//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/factories/RomanAlphabetFactory.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/factories/RomanAlphabetFactory.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/factories/RomanAlphabetFactory.h"
#include "java/lang/NumberFormatException.h"


#line 54
@implementation ComItextpdfTextFactoriesRomanAlphabetFactory


#line 63
+ (NSString *)getStringWithInt:(jint)index {
  
#line 64
  if (index < 1) @throw [[JavaLangNumberFormatException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"you.can.t.translate.a.negative.number.into.an.alphabetical.value" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 66
  index--;
  jint bytes = 1;
  jint start = 0;
  jint symbols = 26;
  while (index >= symbols + start) {
    bytes++;
    start += symbols;
    symbols *= 26;
  }
  
#line 76
  jint c = index - start;
  IOSCharArray *value = [IOSCharArray arrayWithLength:bytes];
  while (bytes > 0) {
    *IOSCharArray_GetRef(value, --bytes) = (jchar) ('a' + (c % 26));
    c /= 26;
  }
  
#line 83
  return [NSString stringWithCharacters:value];
}


#line 93
+ (NSString *)getLowerCaseStringWithInt:(jint)index {
  
#line 94
  return [ComItextpdfTextFactoriesRomanAlphabetFactory getStringWithInt:index];
}


#line 104
+ (NSString *)getUpperCaseStringWithInt:(jint)index {
  
#line 105
  return [((NSString *) nil_chk([ComItextpdfTextFactoriesRomanAlphabetFactory getStringWithInt:index])) uppercaseString];
}


#line 117
+ (NSString *)getStringWithInt:(jint)index
                   withBoolean:(jboolean)lowercase {
  
#line 118
  if (lowercase) {
    return [ComItextpdfTextFactoriesRomanAlphabetFactory getLowerCaseStringWithInt:index];
  }
  else {
    return [ComItextpdfTextFactoriesRomanAlphabetFactory getUpperCaseStringWithInt:index];
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x19, NULL },
    { "getLowerCaseStringWithInt:", "getLowerCaseString", "Ljava.lang.String;", 0x19, NULL },
    { "getUpperCaseStringWithInt:", "getUpperCaseString", "Ljava.lang.String;", 0x19, NULL },
    { "getStringWithInt:withBoolean:", "getString", "Ljava.lang.String;", 0x19, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextFactoriesRomanAlphabetFactory = { "RomanAlphabetFactory", "com.itextpdf.text.factories", NULL, 0x1, 5, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextFactoriesRomanAlphabetFactory;
}

@end
