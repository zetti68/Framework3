//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/factories/RomanNumberFactory.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/factories/RomanNumberFactory.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/factories/RomanNumberFactory.h"
#include "java/lang/StringBuffer.h"

BOOL ComItextpdfTextFactoriesRomanNumberFactory_initialized = NO;


#line 49
@implementation ComItextpdfTextFactoriesRomanNumberFactory

IOSObjectArray * ComItextpdfTextFactoriesRomanNumberFactory_roman_;


#line 95
+ (NSString *)getStringWithInt:(jint)index {
  
#line 96
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  
#line 99
  if (index < 0) {
    (void) [buf appendWithChar:'-'];
    index = -index;
  }
  
#line 105
  if (index > 3000) {
    (void) [buf appendWithChar:'|'];
    (void) [buf appendWithNSString:[ComItextpdfTextFactoriesRomanNumberFactory getStringWithInt:index / 1000]];
    (void) [buf appendWithChar:'|'];
    
#line 110
    index = index - (index / 1000) * 1000;
  }
  
#line 114
  jint pos = 0;
  while (YES) {
    
#line 117
    ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit *dig = IOSObjectArray_Get(nil_chk(ComItextpdfTextFactoriesRomanNumberFactory_roman_), pos);
    
#line 119
    while (index >= ((ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit *) nil_chk(dig))->value_) {
      (void) [buf appendWithChar:dig->digit_];
      index -= dig->value_;
    }
    
#line 124
    if (index <= 0) {
      break;
    }
    
#line 128
    jint j = pos;
    while (!((ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit *) nil_chk(IOSObjectArray_Get(ComItextpdfTextFactoriesRomanNumberFactory_roman_, ++j)))->pre_) ;
    
#line 132
    if (index + ((ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit *) nil_chk(IOSObjectArray_Get(ComItextpdfTextFactoriesRomanNumberFactory_roman_, j)))->value_ >= dig->value_) {
      (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithChar:((ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit *) nil_chk(IOSObjectArray_Get(ComItextpdfTextFactoriesRomanNumberFactory_roman_, j)))->digit_])) appendWithChar:dig->digit_];
      index -= dig->value_ - ((ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit *) nil_chk(IOSObjectArray_Get(ComItextpdfTextFactoriesRomanNumberFactory_roman_, j)))->value_;
    }
    pos++;
  }
  return [buf description];
}


#line 146
+ (NSString *)getLowerCaseStringWithInt:(jint)index {
  
#line 147
  return [ComItextpdfTextFactoriesRomanNumberFactory getStringWithInt:index];
}


#line 155
+ (NSString *)getUpperCaseStringWithInt:(jint)index {
  
#line 156
  return [((NSString *) nil_chk([ComItextpdfTextFactoriesRomanNumberFactory getStringWithInt:index])) uppercaseString];
}


#line 165
+ (NSString *)getStringWithInt:(jint)index
                   withBoolean:(jboolean)lowercase {
  
#line 166
  if (lowercase) {
    return [ComItextpdfTextFactoriesRomanNumberFactory getLowerCaseStringWithInt:index];
  }
  else {
    return [ComItextpdfTextFactoriesRomanNumberFactory getUpperCaseStringWithInt:index];
  }
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComItextpdfTextFactoriesRomanNumberFactory class]) {
    ComItextpdfTextFactoriesRomanNumberFactory_roman_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 81
      [[ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit alloc] initWithChar:'m' withInt:1000 withBoolean:NO],
#line 82
      [[ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit alloc] initWithChar:'d' withInt:500 withBoolean:NO],
#line 83
      [[ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit alloc] initWithChar:'c' withInt:100 withBoolean:YES],
#line 84
      [[ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit alloc] initWithChar:'l' withInt:50 withBoolean:NO],
#line 85
      [[ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit alloc] initWithChar:'x' withInt:10 withBoolean:YES],
#line 86
      [[ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit alloc] initWithChar:'v' withInt:5 withBoolean:NO],
#line 87
      [[ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit alloc] initWithChar:'i' withInt:1 withBoolean:YES] } count:7 type:[IOSClass classWithClass:[ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit class]]];
      ComItextpdfTextFactoriesRomanNumberFactory_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getStringWithInt:", "getString", "Ljava.lang.String;", 0x19, NULL },
    { "getLowerCaseStringWithInt:", "getLowerCaseString", "Ljava.lang.String;", 0x19, NULL },
    { "getUpperCaseStringWithInt:", "getUpperCaseString", "Ljava.lang.String;", 0x19, NULL },
    { "getStringWithInt:withBoolean:", "getString", "Ljava.lang.String;", 0x19, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "roman_", NULL, 0x1a, "[Lcom.itextpdf.text.factories.RomanNumberFactory$RomanDigit;", &ComItextpdfTextFactoriesRomanNumberFactory_roman_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextFactoriesRomanNumberFactory = { "RomanNumberFactory", "com.itextpdf.text.factories", NULL, 0x1, 5, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextFactoriesRomanNumberFactory;
}

@end


#line 53
@implementation ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit


#line 70
- (instancetype)initWithChar:(jchar)digit
                     withInt:(jint)value
                 withBoolean:(jboolean)pre {
  if (self = [super init]) {
    
#line 71
    self->digit_ = digit;
    
#line 72
    self->value_ = value;
    
#line 73
    self->pre_ = pre;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit *)other {
  [super copyAllFieldsTo:other];
  other->digit_ = digit_;
  other->pre_ = pre_;
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithChar:withInt:withBoolean:", "RomanDigit", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "digit_", NULL, 0x1, "C", NULL,  },
    { "value_", NULL, 0x1, "I", NULL,  },
    { "pre_", NULL, 0x1, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit = { "RomanDigit", "com.itextpdf.text.factories", "RomanNumberFactory", 0xa, 1, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextFactoriesRomanNumberFactory_RomanDigit;
}

@end
