//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/error_messages/MessageLocalization.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/error_messages/MessageLocalization.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/io/StreamUtil.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"

BOOL ComItextpdfTextError_messagesMessageLocalization_initialized = NO;


#line 63
@implementation ComItextpdfTextError_messagesMessageLocalization

JavaUtilHashMap * ComItextpdfTextError_messagesMessageLocalization_defaultLanguage_;
JavaUtilHashMap * ComItextpdfTextError_messagesMessageLocalization_currentLanguage_;
NSString * ComItextpdfTextError_messagesMessageLocalization_BASE_PATH_ = 
#line 66
@"com/itextpdf/text/l10n/error/";


#line 68
- (instancetype)init {
  return [super init];
}


#line 86
+ (NSString *)getMessageWithNSString:(NSString *)key {
  
#line 87
  return [ComItextpdfTextError_messagesMessageLocalization getMessageWithNSString:key withBoolean:YES];
}


#line 90
+ (NSString *)getMessageWithNSString:(NSString *)key
                         withBoolean:(jboolean)useDefaultLanguageIfMessageNotFound {
  
#line 91
  JavaUtilHashMap *cl = ComItextpdfTextError_messagesMessageLocalization_currentLanguage_;
  NSString *val;
  if (cl != nil) {
    val = [cl getWithId:key];
    if (val != nil)
#line 96
    return val;
  }
  
#line 99
  if (useDefaultLanguageIfMessageNotFound) {
    cl = ComItextpdfTextError_messagesMessageLocalization_defaultLanguage_;
    val = [((JavaUtilHashMap *) nil_chk(cl)) getWithId:key];
    if (val != nil)
#line 103
    return val;
  }
  
#line 106
  return JreStrcat("$$", @"No message found for ", key);
}

+ (NSString *)getComposedMessageWithNSString:(NSString *)key
                                     withInt:(jint)p1 {
  
#line 117
  return [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:key withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:p1], nil, nil, nil } count:4 type:[IOSClass classWithClass:[NSObject class]]]];
}


#line 131
+ (NSString *)getComposedMessageWithNSString:(NSString *)key
                           withNSObjectArray:(IOSObjectArray *)param {
  
#line 132
  NSString *msg = [ComItextpdfTextError_messagesMessageLocalization getMessageWithNSString:key];
  if (nil != param) {
    jint i = 1;
    {
      IOSObjectArray *a__ =
#line 135
      param;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id o = *b__++;
        
#line 136
        if (nil != o) {
          msg = [((NSString *) nil_chk(msg)) replace:JreStrcat("CIC", '{', i, '}') withSequence:[o description]];
        }
        i++;
      }
    }
  }
  
#line 142
  return msg;
}


#line 154
+ (jboolean)setLanguageWithNSString:(NSString *)language
                       withNSString:(NSString *)country {
  
#line 155
  JavaUtilHashMap *lang = [ComItextpdfTextError_messagesMessageLocalization getLanguageMessagesWithNSString:language withNSString:country];
  if (lang == nil)
#line 157
  return NO;
  ComItextpdfTextError_messagesMessageLocalization_currentLanguage_ = lang;
  return YES;
}


#line 167
+ (void)setMessagesWithJavaIoReader:(JavaIoReader *)r {
  
#line 168
  ComItextpdfTextError_messagesMessageLocalization_currentLanguage_ = [ComItextpdfTextError_messagesMessageLocalization readLanguageStreamWithJavaIoReader:r];
}


#line 171
+ (JavaUtilHashMap *)getLanguageMessagesWithNSString:(NSString *)language
                                        withNSString:(NSString *)country {
  
#line 172
  if (language == nil)
#line 173
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The language cannot be null."];
  JavaIoInputStream *is = nil;
  @try {
    NSString *file;
    if (country != nil)
#line 178
    file = JreStrcat("$C$$", language, '_', country, @".lng");
    else
#line 180
    file = JreStrcat("$$", language, @".lng");
    is = [ComItextpdfTextIoStreamUtil getResourceStreamWithNSString:JreStrcat("$$", ComItextpdfTextError_messagesMessageLocalization_BASE_PATH_, file) withJavaLangClassLoader:[[((ComItextpdfTextError_messagesMessageLocalization *) [[ComItextpdfTextError_messagesMessageLocalization alloc] init]) getClass] getClassLoader]];
    if (is != nil)
#line 183
    return [ComItextpdfTextError_messagesMessageLocalization readLanguageStreamWithJavaIoInputStream:is];
    if (country == nil)
#line 185
    return nil;
    file = JreStrcat("$$", language, @".lng");
    is = [ComItextpdfTextIoStreamUtil getResourceStreamWithNSString:JreStrcat("$$", ComItextpdfTextError_messagesMessageLocalization_BASE_PATH_, file) withJavaLangClassLoader:[[((ComItextpdfTextError_messagesMessageLocalization *) [[ComItextpdfTextError_messagesMessageLocalization alloc] init]) getClass] getClassLoader]];
    if (is != nil)
#line 189
    return [ComItextpdfTextError_messagesMessageLocalization readLanguageStreamWithJavaIoInputStream:is];
    else
#line 191
    return nil;
  }
  @finally {
    @try {
      if (nil != is) {
        [is close];
      }
    }
    @catch (
#line 198
    JavaLangException *exx) {
    }
  }
}


#line 204
+ (JavaUtilHashMap *)readLanguageStreamWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 205
  return [ComItextpdfTextError_messagesMessageLocalization readLanguageStreamWithJavaIoReader:[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:is withNSString:@"UTF-8"]];
}


#line 208
+ (JavaUtilHashMap *)readLanguageStreamWithJavaIoReader:(JavaIoReader *)r {
  
#line 209
  JavaUtilHashMap *lang = [[JavaUtilHashMap alloc] init];
  JavaIoBufferedReader *br = [[JavaIoBufferedReader alloc] initWithJavaIoReader:r];
  NSString *line;
  while ((line = [br readLine]) != nil) {
    jint idxeq = [((NSString *) nil_chk(line)) indexOf:'='];
    if (idxeq < 0)
#line 215
    continue;
    NSString *key = [((NSString *) nil_chk([line substring:0 endIndex:idxeq])) trim];
    if ([((NSString *) nil_chk(key)) hasPrefix:@"#"])
#line 218
    continue;
    (void) [lang putWithId:key withId:[line substring:idxeq + 1]];
  }
  return lang;
}

+ (void)initialize {
  if (self == [ComItextpdfTextError_messagesMessageLocalization class]) {
    ComItextpdfTextError_messagesMessageLocalization_defaultLanguage_ =
#line 64
    [[JavaUtilHashMap alloc] init];
    {
      
#line 72
      @try {
        ComItextpdfTextError_messagesMessageLocalization_defaultLanguage_ = [ComItextpdfTextError_messagesMessageLocalization getLanguageMessagesWithNSString:@"en" withNSString:nil];
      }
      @catch (
#line 74
      JavaLangException *ex) {
      }
      
#line 77
      if (ComItextpdfTextError_messagesMessageLocalization_defaultLanguage_ == nil)
#line 78
      ComItextpdfTextError_messagesMessageLocalization_defaultLanguage_ = [[JavaUtilHashMap alloc] init];
    }
    ComItextpdfTextError_messagesMessageLocalization_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MessageLocalization", NULL, 0x2, NULL },
    { "getMessageWithNSString:", "getMessage", "Ljava.lang.String;", 0x9, NULL },
    { "getMessageWithNSString:withBoolean:", "getMessage", "Ljava.lang.String;", 0x9, NULL },
    { "getComposedMessageWithNSString:withInt:", "getComposedMessage", "Ljava.lang.String;", 0x9, NULL },
    { "getComposedMessageWithNSString:withNSObjectArray:", "getComposedMessage", "Ljava.lang.String;", 0x89, NULL },
    { "setLanguageWithNSString:withNSString:", "setLanguage", "Z", 0x9, "Ljava.io.IOException;" },
    { "setMessagesWithJavaIoReader:", "setMessages", "V", 0x9, "Ljava.io.IOException;" },
    { "getLanguageMessagesWithNSString:withNSString:", "getLanguageMessages", "Ljava.util.HashMap;", 0xa, "Ljava.io.IOException;" },
    { "readLanguageStreamWithJavaIoInputStream:", "readLanguageStream", "Ljava.util.HashMap;", 0xa, "Ljava.io.IOException;" },
    { "readLanguageStreamWithJavaIoReader:", "readLanguageStream", "Ljava.util.HashMap;", 0xa, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultLanguage_", NULL, 0xa, "Ljava.util.HashMap;", &ComItextpdfTextError_messagesMessageLocalization_defaultLanguage_,  },
    { "currentLanguage_", NULL, 0xa, "Ljava.util.HashMap;", &ComItextpdfTextError_messagesMessageLocalization_currentLanguage_,  },
    { "BASE_PATH_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfTextError_messagesMessageLocalization_BASE_PATH_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextError_messagesMessageLocalization = { "MessageLocalization", "com.itextpdf.text.error_messages", NULL, 0x11, 10, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextError_messagesMessageLocalization;
}

@end
