//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/WindowRandomAccessSource.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/WindowRandomAccessSource.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/WindowRandomAccessSource.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"


#line 52
@implementation ComItextpdfTextIoWindowRandomAccessSource


#line 73
- (instancetype)initWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source
                                                   withLong:(jlong)offset {
  return
#line 74
  [self initComItextpdfTextIoWindowRandomAccessSourceWithComItextpdfTextIoRandomAccessSource:source withLong:offset withLong:[((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source)) length] - offset];
}


#line 83
- (instancetype)initComItextpdfTextIoWindowRandomAccessSourceWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source
                                                                                            withLong:(jlong)offset
                                                                                            withLong:(jlong)length {
  if (self = [super init]) {
    
#line 84
    self->source_ = source;
    
#line 85
    self->offset_ = offset;
    
#line 86
    self->length__ = length;
  }
  return self;
}

- (instancetype)initWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source
                                                   withLong:(jlong)offset
                                                   withLong:(jlong)length {
  return [self initComItextpdfTextIoWindowRandomAccessSourceWithComItextpdfTextIoRandomAccessSource:
#line 83
source withLong:offset withLong:length];
}


#line 93
- (jint)getWithLong:(jlong)position {
  
#line 94
  if (position >= length__) return -1;
  return [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source_)) getWithLong:offset_ + position];
}


#line 102
- (jint)getWithLong:(jlong)position
      withByteArray:(IOSByteArray *)bytes
            withInt:(jint)off
            withInt:(jint)len {
  
#line 103
  if (position >= length__)
#line 104
  return -1;
  
#line 106
  jlong toRead = [JavaLangMath minWithLong:len withLong:length__ - position];
  return [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source_)) getWithLong:offset_ + position withByteArray:bytes withInt:off withInt:(jint) toRead];
}


#line 114
- (jlong)length {
  
#line 115
  return length__;
}


#line 121
- (void)close {
  
#line 122
  [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source_)) close];
}

- (void)copyAllFieldsTo:(ComItextpdfTextIoWindowRandomAccessSource *)other {
  [super copyAllFieldsTo:other];
  other->length__ = length__;
  other->offset_ = offset_;
  other->source_ = source_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextIoRandomAccessSource:withLong:", "WindowRandomAccessSource", NULL, 0x1, NULL },
    { "initWithComItextpdfTextIoRandomAccessSource:withLong:withLong:", "WindowRandomAccessSource", NULL, 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, "Ljava.io.IOException;" },
    { "getWithLong:withByteArray:withInt:withInt:", "get", "I", 0x1, "Ljava.io.IOException;" },
    { "length", NULL, "J", 0x1, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "source_", NULL, 0x12, "Lcom.itextpdf.text.io.RandomAccessSource;", NULL,  },
    { "offset_", NULL, 0x12, "J", NULL,  },
    { "length__", "length", 0x12, "J", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextIoWindowRandomAccessSource = { "WindowRandomAccessSource", "com.itextpdf.text.io", NULL, 0x1, 6, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextIoWindowRandomAccessSource;
}

@end
