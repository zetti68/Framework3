//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/GroupedRandomAccessSource.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/GroupedRandomAccessSource.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/io/GroupedRandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "java/io/IOException.h"


#line 51
@implementation ComItextpdfTextIoGroupedRandomAccessSource


#line 73
- (instancetype)initWithComItextpdfTextIoRandomAccessSourceArray:(IOSObjectArray *)sources {
  if (self = [super init]) {
    
#line 74
    self->sources_ = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(sources))->size_ type:[IOSClass classWithClass:[ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry class]]];
    
#line 76
    jlong totalSize = 0;
    
#line 77
    for (jint i = 0; i < sources->size_; i++) {
      IOSObjectArray_SetAndConsume(self->sources_, i, [[ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry alloc] initWithInt:i withComItextpdfTextIoRandomAccessSource:IOSObjectArray_Get(sources, i) withLong:totalSize]);
      totalSize += [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(IOSObjectArray_Get(sources, i))) length];
    }
    
#line 81
    size_ = totalSize;
    
#line 82
    currentSourceEntry_ = IOSObjectArray_Get(self->sources_, sources->size_ - 1);
    
#line 83
    [self sourceInUseWithComItextpdfTextIoRandomAccessSource:((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(currentSourceEntry_))->source_];
  }
  return self;
}


#line 94
- (jint)getStartingSourceIndexWithLong:(jlong)offset {
  
#line 95
  if (offset >= ((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(currentSourceEntry_))->firstByte_)
#line 96
  return currentSourceEntry_->index_;
  
#line 98
  return 0;
}


#line 108
- (ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *)getSourceEntryForOffsetWithLong:(jlong)offset {
  
#line 109
  if (offset >= size_)
#line 110
  return nil;
  
#line 112
  if (offset >= ((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(currentSourceEntry_))->firstByte_ && offset <= currentSourceEntry_->lastByte_)
#line 113
  return currentSourceEntry_;
  
#line 116
  [self sourceReleasedWithComItextpdfTextIoRandomAccessSource:currentSourceEntry_->source_];
  
#line 118
  jint startAt = [self getStartingSourceIndexWithLong:offset];
  
#line 120
  for (jint i = startAt; i < ((IOSObjectArray *) nil_chk(sources_))->size_; i++) {
    if (offset >= ((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(IOSObjectArray_Get(sources_, i)))->firstByte_ && offset <= ((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(IOSObjectArray_Get(sources_, i)))->lastByte_) {
      currentSourceEntry_ = IOSObjectArray_Get(sources_, i);
      [self sourceInUseWithComItextpdfTextIoRandomAccessSource:((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(currentSourceEntry_))->source_];
      return currentSourceEntry_;
    }
  }
  
#line 128
  return nil;
}


#line 137
- (void)sourceReleasedWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source {
}


#line 146
- (void)sourceInUseWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source {
}


#line 155
- (jint)getWithLong:(jlong)position {
  
#line 156
  ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *entry_ = [self getSourceEntryForOffsetWithLong:position];
  
#line 158
  if (entry_ == nil)
#line 159
  return -1;
  
#line 161
  return [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(entry_))->source_)) getWithLong:[entry_ offsetNWithLong:position]];
}


#line 168
- (jint)getWithLong:(jlong)position
      withByteArray:(IOSByteArray *)bytes
            withInt:(jint)off
            withInt:(jint)len {
  ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *entry_ = [self getSourceEntryForOffsetWithLong:position];
  
#line 171
  if (entry_ == nil)
#line 172
  return -1;
  
#line 174
  jlong offN = [((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(entry_)) offsetNWithLong:position];
  
#line 176
  jint remaining = len;
  
#line 178
  while (remaining > 0) {
    if (entry_ == nil)
#line 180
    break;
    if (offN > [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(entry_->source_)) length])
#line 182
    break;
    
#line 184
    jint count = [entry_->source_ getWithLong:offN withByteArray:bytes withInt:off withInt:remaining];
    if (count == -1)
#line 186
    break;
    
#line 188
    off += count;
    position += count;
    remaining -= count;
    
#line 192
    offN = 0;
    entry_ = [self getSourceEntryForOffsetWithLong:position];
  }
  return remaining == len ? -1 : len - remaining;
}


#line 202
- (jlong)length {
  
#line 203
  return size_;
}


#line 210
- (void)close {
  {
    IOSObjectArray *a__ =
#line 211
    sources_;
    ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *entry_ = *b__++;
      
#line 212
      [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(((ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *) nil_chk(entry_))->source_)) close];
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextIoGroupedRandomAccessSource *)other {
  [super copyAllFieldsTo:other];
  other->currentSourceEntry_ = currentSourceEntry_;
  other->size_ = size_;
  other->sources_ = sources_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextIoRandomAccessSourceArray:", "GroupedRandomAccessSource", NULL, 0x1, "Ljava.io.IOException;" },
    { "getStartingSourceIndexWithLong:", "getStartingSourceIndex", "I", 0x4, NULL },
    { "getSourceEntryForOffsetWithLong:", "getSourceEntryForOffset", "Lcom.itextpdf.text.io.GroupedRandomAccessSource$SourceEntry;", 0x2, "Ljava.io.IOException;" },
    { "sourceReleasedWithComItextpdfTextIoRandomAccessSource:", "sourceReleased", "V", 0x4, "Ljava.io.IOException;" },
    { "sourceInUseWithComItextpdfTextIoRandomAccessSource:", "sourceInUse", "V", 0x4, "Ljava.io.IOException;" },
    { "getWithLong:", "get", "I", 0x1, "Ljava.io.IOException;" },
    { "getWithLong:withByteArray:withInt:withInt:", "get", "I", 0x1, "Ljava.io.IOException;" },
    { "length", NULL, "J", 0x1, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sources_", NULL, 0x12, "[Lcom.itextpdf.text.io.GroupedRandomAccessSource$SourceEntry;", NULL,  },
    { "currentSourceEntry_", NULL, 0x2, "Lcom.itextpdf.text.io.GroupedRandomAccessSource$SourceEntry;", NULL,  },
    { "size_", NULL, 0x12, "J", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextIoGroupedRandomAccessSource = { "GroupedRandomAccessSource", "com.itextpdf.text.io", NULL, 0x0, 9, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextIoGroupedRandomAccessSource;
}

@end


#line 219
@implementation ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry


#line 243
- (instancetype)initWithInt:(jint)index
withComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source
                   withLong:(jlong)offset {
  if (self = [super init]) {
    
#line 244
    self->index_ = index;
    
#line 245
    self->source_ = source;
    
#line 246
    self->firstByte_ = offset;
    
#line 247
    self->lastByte_ = offset + [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source)) length] - 1;
  }
  return self;
}


#line 255
- (jlong)offsetNWithLong:(jlong)absoluteOffset {
  
#line 256
  return absoluteOffset - firstByte_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry *)other {
  [super copyAllFieldsTo:other];
  other->firstByte_ = firstByte_;
  other->index_ = index_;
  other->lastByte_ = lastByte_;
  other->source_ = source_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withComItextpdfTextIoRandomAccessSource:withLong:", "SourceEntry", NULL, 0x1, NULL },
    { "offsetNWithLong:", "offsetN", "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "source_", NULL, 0x10, "Lcom.itextpdf.text.io.RandomAccessSource;", NULL,  },
    { "firstByte_", NULL, 0x10, "J", NULL,  },
    { "lastByte_", NULL, 0x10, "J", NULL,  },
    { "index_", NULL, 0x10, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry = { "SourceEntry", "com.itextpdf.text.io", "GroupedRandomAccessSource", 0xa, 2, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextIoGroupedRandomAccessSource_SourceEntry;
}

@end
