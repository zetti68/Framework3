//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/RandomAccessSourceFactory.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/RandomAccessSourceFactory.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/io/ArrayRandomAccessSource.h"
#include "com/itextpdf/text/io/FileChannelRandomAccessSource.h"
#include "com/itextpdf/text/io/GetBufferedRandomAccessSource.h"
#include "com/itextpdf/text/io/GroupedRandomAccessSource.h"
#include "com/itextpdf/text/io/MapFailedException.h"
#include "com/itextpdf/text/io/PagedChannelRandomAccessSource.h"
#include "com/itextpdf/text/io/RAFRandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/io/StreamUtil.h"
#include "com/itextpdf/text/io/WindowRandomAccessSource.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/RuntimeException.h"
#include "java/net/URL.h"
#include "java/nio/channels/FileChannel.h"
#include "java/nio/channels/FileLock.h"


#line 61
@implementation ComItextpdfTextIoRandomAccessSourceFactory


#line 81
- (instancetype)init {
  if (self = [super init]) {
    forceRead_ =
#line 66
    NO;
    usePlainRandomAccess_ =
#line 71
    NO;
    exclusivelyLockFile_ =
#line 76
    NO;
  }
  return self;
}


#line 89
- (ComItextpdfTextIoRandomAccessSourceFactory *)setForceReadWithBoolean:(jboolean)forceRead {
  
#line 90
  self->forceRead_ = forceRead;
  return self;
}


#line 99
- (ComItextpdfTextIoRandomAccessSourceFactory *)setUsePlainRandomAccessWithBoolean:(jboolean)usePlainRandomAccess {
  
#line 100
  self->usePlainRandomAccess_ = usePlainRandomAccess;
  return self;
}


#line 104
- (ComItextpdfTextIoRandomAccessSourceFactory *)setExclusivelyLockFileWithBoolean:(jboolean)exclusivelyLockFile {
  
#line 105
  self->exclusivelyLockFile_ = exclusivelyLockFile;
  return self;
}


#line 114
- (id<ComItextpdfTextIoRandomAccessSource>)createSourceWithByteArray:(IOSByteArray *)data {
  
#line 115
  return [[ComItextpdfTextIoArrayRandomAccessSource alloc] initWithByteArray:data];
}


#line 118
- (id<ComItextpdfTextIoRandomAccessSource>)createSourceWithJavaIoRandomAccessFile:(JavaIoRandomAccessFile *)raf {
  
#line 119
  return [[ComItextpdfTextIoRAFRandomAccessSource alloc] initWithJavaIoRandomAccessFile:raf];
}


#line 128
- (id<ComItextpdfTextIoRandomAccessSource>)createSourceWithJavaNetURL:(JavaNetURL *)url {
  
#line 129
  JavaIoInputStream *is = [((JavaNetURL *) nil_chk(url)) openStream];
  @try {
    return [self createSourceWithJavaIoInputStream:is];
  }
  @finally {
    @try {
      
#line 134
      [((JavaIoInputStream *) nil_chk(is)) close];
    }
    @catch (
#line 134
    JavaIoIOException *ioe) {
    }
  }
}


#line 144
- (id<ComItextpdfTextIoRandomAccessSource>)createSourceWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 145
  @try {
    return [self createSourceWithByteArray:[ComItextpdfTextIoStreamUtil inputStreamToArrayWithJavaIoInputStream:is]];
  }
  @finally {
    @try {
      
#line 149
      [((JavaIoInputStream *) nil_chk(is)) close];
    }
    @catch (
#line 149
    JavaIoIOException *ioe) {
    }
  }
}


#line 161
- (id<ComItextpdfTextIoRandomAccessSource>)createBestSourceWithNSString:(NSString *)filename {
  
#line 162
  JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:filename];
  if (![file canRead]) {
    if ([((NSString *) nil_chk(filename)) hasPrefix:@"file:/"] ||
#line 165
    [filename hasPrefix:@"http://"] ||
#line 166
    [filename hasPrefix:@"https://"] ||
#line 167
    [filename hasPrefix:@"jar:"] ||
#line 168
    [filename hasPrefix:@"wsjar:"] ||
#line 169
    [filename hasPrefix:@"wsjar:"] ||
#line 170
    [filename hasPrefix:@"vfszip:"]) {
      return [self createSourceWithJavaNetURL:[[JavaNetURL alloc] initWithNSString:filename]];
    }
    else {
      
#line 173
      return [self createByReadingToMemoryWithNSString:filename];
    }
  }
  
#line 177
  if (forceRead_) {
    return [self createByReadingToMemoryWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithNSString:filename]];
  }
  
#line 181
  NSString *openMode = exclusivelyLockFile_ ? @"rw" : @"r";
  
#line 183
  JavaIoRandomAccessFile *raf = [[JavaIoRandomAccessFile alloc] initWithJavaIoFile:file withNSString:openMode];
  if (exclusivelyLockFile_) {
    (void) [((JavaNioChannelsFileChannel *) nil_chk([raf getChannel])) lock];
  }
  
#line 188
  if (usePlainRandomAccess_) {
    return [[ComItextpdfTextIoRAFRandomAccessSource alloc] initWithJavaIoRandomAccessFile:raf];
  }
  
#line 192
  @try {
    if ([raf length] <= 0)
#line 194
    return [[ComItextpdfTextIoRAFRandomAccessSource alloc] initWithJavaIoRandomAccessFile:raf];
    
#line 196
    @try {
      
#line 198
      return [self createBestSourceWithJavaNioChannelsFileChannel:[raf getChannel]];
    }
    @catch (
#line 199
    ComItextpdfTextIoMapFailedException *e) {
      return [[ComItextpdfTextIoRAFRandomAccessSource alloc] initWithJavaIoRandomAccessFile:raf];
    }
  }
  @catch (
#line 202
  JavaIoIOException *e) {
    @try {
      [raf close];
    }
    @catch (
#line 205
    JavaIoIOException *ignore) {
    }
    
#line 206
    @throw e;
  }
  @catch (
#line 207
  JavaLangRuntimeException *e) {
    @try {
      [raf close];
    }
    @catch (
#line 210
    JavaIoIOException *ignore) {
    }
    
#line 211
    @throw e;
  }
}


#line 223
- (id<ComItextpdfTextIoRandomAccessSource>)createBestSourceWithJavaNioChannelsFileChannel:(JavaNioChannelsFileChannel *)channel {
  
#line 224
  if ([((JavaNioChannelsFileChannel *) nil_chk(channel)) size] <= ComItextpdfTextIoPagedChannelRandomAccessSource_DEFAULT_TOTAL_BUFSIZE) {
    return [[ComItextpdfTextIoGetBufferedRandomAccessSource alloc] initWithComItextpdfTextIoRandomAccessSource:[[ComItextpdfTextIoFileChannelRandomAccessSource alloc] initWithJavaNioChannelsFileChannel:channel]];
  }
  else {
    
#line 227
    return [[ComItextpdfTextIoGetBufferedRandomAccessSource alloc] initWithComItextpdfTextIoRandomAccessSource:[[ComItextpdfTextIoPagedChannelRandomAccessSource alloc] initWithJavaNioChannelsFileChannel:channel]];
  }
}


#line 231
- (id<ComItextpdfTextIoRandomAccessSource>)createRangedWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source
                                                                                 withLongArray:(IOSLongArray *)ranges {
  
#line 232
  IOSObjectArray *sources = [IOSObjectArray arrayWithLength:((IOSLongArray *) nil_chk(ranges))->size_ / 2 type:[IOSClass classWithProtocol:@protocol(ComItextpdfTextIoRandomAccessSource)]];
  for (jint i = 0; i < ranges->size_; i += 2) {
    IOSObjectArray_SetAndConsume(sources, i / 2, [[ComItextpdfTextIoWindowRandomAccessSource alloc] initWithComItextpdfTextIoRandomAccessSource:source withLong:IOSLongArray_Get(ranges, i) withLong:IOSLongArray_Get(ranges, i + 1)]);
  }
  return [[ComItextpdfTextIoGroupedRandomAccessSource alloc] initWithComItextpdfTextIoRandomAccessSourceArray:sources];
}


#line 245
- (id<ComItextpdfTextIoRandomAccessSource>)createByReadingToMemoryWithNSString:(NSString *)filename {
  
#line 246
  JavaIoInputStream *is = [ComItextpdfTextIoStreamUtil getResourceStreamWithNSString:filename];
  if (is == nil)
#line 248
  @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.not.found.as.file.or.resource" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ filename } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  return [self createByReadingToMemoryWithJavaIoInputStream:is];
}


#line 258
- (id<ComItextpdfTextIoRandomAccessSource>)createByReadingToMemoryWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 259
  @try {
    return [[ComItextpdfTextIoArrayRandomAccessSource alloc] initWithByteArray:[ComItextpdfTextIoStreamUtil inputStreamToArrayWithJavaIoInputStream:is]];
  }
  @finally {
    @try {
      
#line 263
      [((JavaIoInputStream *) nil_chk(is)) close];
    }
    @catch (
#line 263
    JavaIoIOException *ioe) {
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextIoRandomAccessSourceFactory *)other {
  [super copyAllFieldsTo:other];
  other->exclusivelyLockFile_ = exclusivelyLockFile_;
  other->forceRead_ = forceRead_;
  other->usePlainRandomAccess_ = usePlainRandomAccess_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "RandomAccessSourceFactory", NULL, 0x1, NULL },
    { "setForceReadWithBoolean:", "setForceRead", "Lcom.itextpdf.text.io.RandomAccessSourceFactory;", 0x1, NULL },
    { "setUsePlainRandomAccessWithBoolean:", "setUsePlainRandomAccess", "Lcom.itextpdf.text.io.RandomAccessSourceFactory;", 0x1, NULL },
    { "setExclusivelyLockFileWithBoolean:", "setExclusivelyLockFile", "Lcom.itextpdf.text.io.RandomAccessSourceFactory;", 0x1, NULL },
    { "createSourceWithByteArray:", "createSource", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x1, NULL },
    { "createSourceWithJavaIoRandomAccessFile:", "createSource", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x1, "Ljava.io.IOException;" },
    { "createSourceWithJavaNetURL:", "createSource", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x1, "Ljava.io.IOException;" },
    { "createSourceWithJavaIoInputStream:", "createSource", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x1, "Ljava.io.IOException;" },
    { "createBestSourceWithNSString:", "createBestSource", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x1, "Ljava.io.IOException;" },
    { "createBestSourceWithJavaNioChannelsFileChannel:", "createBestSource", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x1, "Ljava.io.IOException;" },
    { "createRangedWithComItextpdfTextIoRandomAccessSource:withLongArray:", "createRanged", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x1, "Ljava.io.IOException;" },
    { "createByReadingToMemoryWithNSString:", "createByReadingToMemory", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x2, "Ljava.io.IOException;" },
    { "createByReadingToMemoryWithJavaIoInputStream:", "createByReadingToMemory", "Lcom.itextpdf.text.io.RandomAccessSource;", 0x2, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "forceRead_", NULL, 0x2, "Z", NULL,  },
    { "usePlainRandomAccess_", NULL, 0x2, "Z", NULL,  },
    { "exclusivelyLockFile_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextIoRandomAccessSourceFactory = { "RandomAccessSourceFactory", "com.itextpdf.text.io", NULL, 0x11, 13, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextIoRandomAccessSourceFactory;
}

@end
