//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/StreamUtil.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/StreamUtil.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/ResourceProvider.h"
#include "com/itextpdf/text/io/StreamUtil.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Math.h"
#include "java/lang/Thread.h"
#include "java/lang/Throwable.h"


#line 57
@implementation ComItextpdfTextIoStreamUtil

id<ComItextpdfTextIoResourceProvider> ComItextpdfTextIoStreamUtil_sResourceProvider_ = 
#line 58
nil;


#line 60
+ (void)setResourceProviderWithComItextpdfTextIoResourceProvider:(id<ComItextpdfTextIoResourceProvider>)pResourceProvider {
  
#line 61
  ComItextpdfTextIoStreamUtil_sResourceProvider_ = pResourceProvider;
}


#line 64
- (instancetype)init {
  return [super init];
}


#line 76
+ (IOSByteArray *)inputStreamToArrayWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 77
  IOSByteArray *b = [IOSByteArray arrayWithLength:8192];
  JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
  while (YES) {
    jint read = [((JavaIoInputStream *) nil_chk(is)) readWithByteArray:b];
    if (read < 1) {
      break;
    }
    [out writeWithByteArray:b withInt:0 withInt:read];
  }
  [out close];
  return [out toByteArray];
}


#line 90
+ (void)CopyBytesWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source
                                                withLong:(jlong)start
                                                withLong:(jlong)length
                                  withJavaIoOutputStream:(JavaIoOutputStream *)outs {
  if (length <= 0) {
    return;
  }
  jlong idx = start;
  IOSByteArray *buf = [IOSByteArray arrayWithLength:8192];
  while (length > 0) {
    jlong n = [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source)) getWithLong:idx withByteArray:buf withInt:0 withInt:(jint) [JavaLangMath minWithLong:buf->size_ withLong:length]];
    if (n <= 0) {
      @throw [[JavaIoEOFException alloc] init];
    }
    [((JavaIoOutputStream *) nil_chk(outs)) writeWithByteArray:buf withInt:0 withInt:(jint) n];
    idx += n;
    length -= n;
  }
}


#line 116
+ (JavaIoInputStream *)getResourceStreamWithNSString:(NSString *)key {
  
#line 117
  return [ComItextpdfTextIoStreamUtil getResourceStreamWithNSString:key withJavaLangClassLoader:nil];
}


#line 131
+ (JavaIoInputStream *)getResourceStreamWithNSString:(NSString *)key
                             withJavaLangClassLoader:(JavaLangClassLoader *)loader {
  
#line 132
  JavaIoInputStream *is = nil;
  if (ComItextpdfTextIoStreamUtil_sResourceProvider_ != nil) {
    is = [ComItextpdfTextIoStreamUtil_sResourceProvider_ getResourceWithNSString:key];
  }
  else {
    
#line 136
    if ([((NSString *) nil_chk(key)) hasPrefix:@"/"]) {
      key = [key substring:1];
    }
    if (loader != nil) {
      is = [loader getResourceAsStreamWithNSString:key];
      if (is != nil) {
        return is;
      }
    }
    
#line 146
    @try {
      JavaLangClassLoader *contextClassLoader = [((JavaLangThread *) nil_chk([JavaLangThread currentThread])) getContextClassLoader];
      if (contextClassLoader != nil) {
        is = [contextClassLoader getResourceAsStreamWithNSString:key];
      }
    }
    @catch (
#line 151
    JavaLangThrowable *e) {
    }
    
#line 155
    if (is == nil) {
      is = [[IOSClass classWithClass:[ComItextpdfTextIoStreamUtil class]] getResourceAsStream:JreStrcat("C$", '/', key)];
    }
    if (is == nil) {
      is = [JavaLangClassLoader getSystemResourceAsStreamWithNSString:key];
    }
  }
  return is;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setResourceProviderWithComItextpdfTextIoResourceProvider:", "setResourceProvider", "V", 0x9, NULL },
    { "init", "StreamUtil", NULL, 0x2, NULL },
    { "inputStreamToArrayWithJavaIoInputStream:", "inputStreamToArray", "[B", 0x9, "Ljava.io.IOException;" },
    { "CopyBytesWithComItextpdfTextIoRandomAccessSource:withLong:withLong:withJavaIoOutputStream:", "CopyBytes", "V", 0x9, "Ljava.io.IOException;" },
    { "getResourceStreamWithNSString:", "getResourceStream", "Ljava.io.InputStream;", 0x9, NULL },
    { "getResourceStreamWithNSString:withJavaLangClassLoader:", "getResourceStream", "Ljava.io.InputStream;", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sResourceProvider_", NULL, 0xa, "Lcom.itextpdf.text.io.ResourceProvider;", &ComItextpdfTextIoStreamUtil_sResourceProvider_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextIoStreamUtil = { "StreamUtil", "com.itextpdf.text.io", NULL, 0x11, 6, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextIoStreamUtil;
}

@end
