//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/MappedChannelRandomAccessSource.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/MappedChannelRandomAccessSource.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/io/ByteBufferRandomAccessSource.h"
#include "com/itextpdf/text/io/MapFailedException.h"
#include "com/itextpdf/text/io/MappedChannelRandomAccessSource.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/nio/MappedByteBuffer.h"
#include "java/nio/channels/FileChannel.h"


#line 56
@implementation ComItextpdfTextIoMappedChannelRandomAccessSource


#line 81
- (instancetype)initWithJavaNioChannelsFileChannel:(JavaNioChannelsFileChannel *)channel
                                          withLong:(jlong)offset
                                          withLong:(jlong)length {
  if (self = [super init]) {
    
#line 82
    if (offset < 0)
#line 83
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("J$", offset, @" is negative")];
    
#line 84
    if (length <= 0)
#line 85
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("J$", length, @" is zero or negative")];
    
#line 87
    self->channel_ = channel;
    
#line 88
    self->offset_ = offset;
    
#line 89
    self->length__ = length;
    
#line 90
    self->source_ = nil;
  }
  return self;
}


#line 97
- (void)open {
  
#line 98
  if (source_ != nil)
#line 99
  return;
  
#line 101
  if (![((JavaNioChannelsFileChannel *) nil_chk(channel_)) isOpen])
#line 102
  @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Channel is closed"];
  
#line 104
  @try {
    source_ = [[ComItextpdfTextIoByteBufferRandomAccessSource alloc] initWithJavaNioByteBuffer:[channel_ mapWithJavaNioChannelsFileChannel_MapMode:JavaNioChannelsFileChannel_MapMode_get_READ_ONLY_() withLong:offset_ withLong:length__]];
  }
  @catch (
#line 106
  JavaIoIOException *e) {
    if ([ComItextpdfTextIoMappedChannelRandomAccessSource exceptionIsMapFailureExceptionWithJavaIoIOException:e])
#line 108
    @throw [[ComItextpdfTextIoMapFailedException alloc] initWithJavaIoIOException:e];
    @throw e;
  }
}


#line 121
+ (jboolean)exceptionIsMapFailureExceptionWithJavaIoIOException:(JavaIoIOException *)e {
  
#line 122
  if ([((JavaIoIOException *) nil_chk(e)) getMessage] != nil && [((NSString *) nil_chk([e getMessage])) indexOfString:@"Map failed"] >= 0)
#line 123
  return YES;
  
#line 125
  return NO;
}


#line 131
- (jint)getWithLong:(jlong)position {
  if (source_ == nil)
#line 133
  @throw [[JavaIoIOException alloc] initWithNSString:@"RandomAccessSource not opened"];
  return [((ComItextpdfTextIoByteBufferRandomAccessSource *) nil_chk(source_)) getWithLong:position];
}


#line 140
- (jint)getWithLong:(jlong)position
      withByteArray:(IOSByteArray *)bytes
            withInt:(jint)off
            withInt:(jint)len {
  
#line 141
  if (source_ == nil)
#line 142
  @throw [[JavaIoIOException alloc] initWithNSString:@"RandomAccessSource not opened"];
  return [((ComItextpdfTextIoByteBufferRandomAccessSource *) nil_chk(source_)) getWithLong:position withByteArray:bytes withInt:off withInt:len];
}


#line 149
- (jlong)length {
  
#line 150
  return length__;
}


#line 156
- (void)close {
  
#line 157
  if (source_ == nil)
#line 158
  return;
  [((ComItextpdfTextIoByteBufferRandomAccessSource *) nil_chk(source_)) close];
  source_ = nil;
}

- (NSString *)description {
  
#line 165
  return JreStrcat("$$J$JC", [[self getClass] getName], @" (", offset_, @", ", length__, ')');
}

- (void)copyAllFieldsTo:(ComItextpdfTextIoMappedChannelRandomAccessSource *)other {
  [super copyAllFieldsTo:other];
  other->channel_ = channel_;
  other->length__ = length__;
  other->offset_ = offset_;
  other->source_ = source_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaNioChannelsFileChannel:withLong:withLong:", "MappedChannelRandomAccessSource", NULL, 0x1, NULL },
    { "open", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "exceptionIsMapFailureExceptionWithJavaIoIOException:", "exceptionIsMapFailureException", "Z", 0xa, NULL },
    { "getWithLong:", "get", "I", 0x1, "Ljava.io.IOException;" },
    { "getWithLong:withByteArray:withInt:withInt:", "get", "I", 0x1, "Ljava.io.IOException;" },
    { "length", NULL, "J", 0x1, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "channel_", NULL, 0x12, "Ljava.nio.channels.FileChannel;", NULL,  },
    { "offset_", NULL, 0x12, "J", NULL,  },
    { "length__", "length", 0x12, "J", NULL,  },
    { "source_", NULL, 0x2, "Lcom.itextpdf.text.io.ByteBufferRandomAccessSource;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextIoMappedChannelRandomAccessSource = { "MappedChannelRandomAccessSource", "com.itextpdf.text.io", NULL, 0x0, 8, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextIoMappedChannelRandomAccessSource;
}

@end
