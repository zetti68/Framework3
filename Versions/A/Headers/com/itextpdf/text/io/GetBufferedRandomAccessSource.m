//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/GetBufferedRandomAccessSource.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/io/GetBufferedRandomAccessSource.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/io/GetBufferedRandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"


#line 50
@implementation ComItextpdfTextIoGetBufferedRandomAccessSource


#line 64
- (instancetype)initWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)source {
  if (self = [super init]) {
    getBufferStart_ =
#line 57
    -1;
    getBufferEnd_ =
#line 58
    -1;
    
#line 65
    self->source_ = source;
    
#line 67
    self->getBuffer_ = [IOSByteArray arrayWithLength:(jint) [JavaLangMath minWithLong:[JavaLangMath maxWithLong:[((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source)) length] / 4 withLong:1] withLong:(jlong) 4096]];
    
#line 68
    self->getBufferStart_ = -1;
    
#line 69
    self->getBufferEnd_ = -1;
  }
  return self;
}


#line 76
- (jint)getWithLong:(jlong)position {
  
#line 77
  if (position < getBufferStart_ || position > getBufferEnd_) {
    jint count = [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source_)) getWithLong:position withByteArray:getBuffer_ withInt:0 withInt:((IOSByteArray *) nil_chk(getBuffer_))->size_];
    if (count == -1)
#line 80
    return -1;
    getBufferStart_ = position;
    getBufferEnd_ = position + count - 1;
  }
  jint bufPos = (jint) (position - getBufferStart_);
  return (jint) 0xff & IOSByteArray_Get(nil_chk(getBuffer_), bufPos);
}

- (jint)getWithLong:(jlong)position
      withByteArray:(IOSByteArray *)bytes
            withInt:(jint)off
            withInt:(jint)len {
  
#line 92
  return [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source_)) getWithLong:position withByteArray:bytes withInt:off withInt:len];
}


#line 98
- (jlong)length {
  
#line 99
  return [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source_)) length];
}


#line 105
- (void)close {
  
#line 106
  [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(source_)) close];
  getBufferStart_ = -1;
  getBufferEnd_ = -1;
}

- (void)copyAllFieldsTo:(ComItextpdfTextIoGetBufferedRandomAccessSource *)other {
  [super copyAllFieldsTo:other];
  other->getBuffer_ = getBuffer_;
  other->getBufferEnd_ = getBufferEnd_;
  other->getBufferStart_ = getBufferStart_;
  other->source_ = source_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextIoRandomAccessSource:", "GetBufferedRandomAccessSource", NULL, 0x1, NULL },
    { "getWithLong:", "get", "I", 0x1, "Ljava.io.IOException;" },
    { "getWithLong:withByteArray:withInt:withInt:", "get", "I", 0x1, "Ljava.io.IOException;" },
    { "length", NULL, "J", 0x1, NULL },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "source_", NULL, 0x12, "Lcom.itextpdf.text.io.RandomAccessSource;", NULL,  },
    { "getBuffer_", NULL, 0x12, "[B", NULL,  },
    { "getBufferStart_", NULL, 0x2, "J", NULL,  },
    { "getBufferEnd_", NULL, 0x2, "J", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextIoGetBufferedRandomAccessSource = { "GetBufferedRandomAccessSource", "com.itextpdf.text.io", NULL, 0x1, 5, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextIoGetBufferedRandomAccessSource;
}

@end
