//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/ExceptionConverter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/ExceptionConverter.java"

#include "com/itextpdf/text/ExceptionConverter.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"


#line 61
@implementation ComItextpdfTextExceptionConverter


#line 72
- (instancetype)initWithJavaLangException:(JavaLangException *)ex {
  if (self =
#line 73
  [super initWithJavaLangThrowable:ex]) {
    
#line 74
    self->ex_ = ex;
    
#line 75
    prefix_ = ([ex isKindOfClass:[JavaLangRuntimeException class]]) ? @"" : @"ExceptionConverter: ";
  }
  return self;
}

+ (JavaLangRuntimeException *)convertExceptionWithJavaLangException:(JavaLangException *)ex {
  
#line 87
  if ([ex isKindOfClass:[JavaLangRuntimeException class]]) {
    return (JavaLangRuntimeException *) check_class_cast(ex, [JavaLangRuntimeException class]);
  }
  return [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ex];
}


#line 97
- (JavaLangException *)getException {
  
#line 98
  return ex_;
}


#line 105
- (NSString *)getMessage {
  
#line 106
  return [((JavaLangException *) nil_chk(ex_)) getMessage];
}


#line 113
- (NSString *)getLocalizedMessage {
  
#line 114
  return [((JavaLangException *) nil_chk(ex_)) getLocalizedMessage];
}

- (NSString *)description {
  
#line 122
  return JreStrcat("$@", prefix_, ex_);
}


#line 126
- (void)printStackTrace {
  
#line 127
  [self printStackTraceWithJavaIoPrintStream:JavaLangSystem_get_err_()];
}


#line 135
- (void)printStackTraceWithJavaIoPrintStream:(JavaIoPrintStream *)s {
  
#line 136
  @synchronized(s) {
    [((JavaIoPrintStream *) nil_chk(s)) printWithNSString:prefix_];
    [((JavaLangException *) nil_chk(ex_)) printStackTraceWithJavaIoPrintStream:s];
  }
}


#line 146
- (void)printStackTraceWithJavaIoPrintWriter:(JavaIoPrintWriter *)s {
  
#line 147
  @synchronized(s) {
    [((JavaIoPrintWriter *) nil_chk(s)) printWithNSString:prefix_];
    [((JavaLangException *) nil_chk(ex_)) printStackTraceWithJavaIoPrintWriter:s];
  }
}


#line 159
- (JavaLangThrowable *)fillInStackTrace {
  
#line 160
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextExceptionConverter *)other {
  [super copyAllFieldsTo:other];
  other->ex_ = ex_;
  other->prefix_ = prefix_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaLangException:", "ExceptionConverter", NULL, 0x1, NULL },
    { "convertExceptionWithJavaLangException:", "convertException", "Ljava.lang.RuntimeException;", 0x19, NULL },
    { "getException", NULL, "Ljava.lang.Exception;", 0x1, NULL },
    { "getMessage", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getLocalizedMessage", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "printStackTrace", NULL, "V", 0x1, NULL },
    { "printStackTraceWithJavaIoPrintStream:", "printStackTrace", "V", 0x1, NULL },
    { "printStackTraceWithJavaIoPrintWriter:", "printStackTrace", "V", 0x1, NULL },
    { "fillInStackTrace", NULL, "Ljava.lang.Throwable;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfTextExceptionConverter_serialVersionUID },
    { "ex_", NULL, 0x2, "Ljava.lang.Exception;", NULL,  },
    { "prefix_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextExceptionConverter = { "ExceptionConverter", "com.itextpdf.text", NULL, 0x1, 10, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextExceptionConverter;
}

@end
