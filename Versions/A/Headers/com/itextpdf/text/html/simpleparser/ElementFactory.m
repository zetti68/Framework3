//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/html/simpleparser/ElementFactory.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/html/simpleparser/ElementFactory.java"

#include "IOSClass.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/DocListener.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/FontFactory.h"
#include "com/itextpdf/text/FontFactoryImp.h"
#include "com/itextpdf/text/FontProvider.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/List.h"
#include "com/itextpdf/text/ListItem.h"
#include "com/itextpdf/text/Paragraph.h"
#include "com/itextpdf/text/html/HtmlTags.h"
#include "com/itextpdf/text/html/HtmlUtilities.h"
#include "com/itextpdf/text/html/simpleparser/ChainedProperties.h"
#include "com/itextpdf/text/html/simpleparser/ElementFactory.h"
#include "com/itextpdf/text/html/simpleparser/ImageProvider.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/HyphenationAuto.h"
#include "com/itextpdf/text/pdf/HyphenationEvent.h"
#include "com/itextpdf/text/pdf/draw/LineSeparator.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/StringTokenizer.h"


#line 77
@implementation ComItextpdfTextHtmlSimpleparserElementFactory


#line 90
- (instancetype)init {
  if (self = [super init]) {
    provider_ =
#line 85
    [ComItextpdfTextFontFactory getFontImp];
  }
  return self;
}


#line 98
- (void)setFontProviderWithComItextpdfTextFontProvider:(id<ComItextpdfTextFontProvider>)provider {
  self->provider_ = provider;
}


#line 107
- (id<ComItextpdfTextFontProvider>)getFontProvider {
  
#line 108
  return provider_;
}


#line 116
- (ComItextpdfTextFont *)getFontWithComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 120
  NSString *face = [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_FACE_()];
  
#line 126
  if (face == nil || ((jint) [((NSString *) nil_chk([face trim])) length]) == 0) {
    face = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_FONTFAMILY_()];
  }
  
#line 131
  if (face != nil) {
    JavaUtilStringTokenizer *tok = [[JavaUtilStringTokenizer alloc] initWithNSString:face withNSString:@","];
    while ([tok hasMoreTokens]) {
      face = [((NSString *) nil_chk([tok nextToken])) trim];
      if ([((NSString *) nil_chk(face)) hasPrefix:@"\""])
#line 136
      face = [face substring:1];
      if ([((NSString *) nil_chk(face)) hasSuffix:@"\""])
#line 138
      face = [face substring:0 endIndex:((jint) [face length]) - 1];
      if ([((id<ComItextpdfTextFontProvider>) nil_chk(provider_)) isRegisteredWithNSString:face])
#line 140
      break;
    }
  }
  
#line 145
  NSString *encoding = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_ENCODING_()];
  if (encoding == nil)
#line 147
  encoding = ComItextpdfTextPdfBaseFont_get_WINANSI_();
  
#line 152
  NSString *value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_SIZE_()];
  jfloat size = 12;
  if (value != nil)
#line 155
  size = [JavaLangFloat parseFloatWithNSString:value];
  
#line 158
  jint style = 0;
  
#line 161
  NSString *decoration = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_TEXTDECORATION_()];
  if (decoration != nil && ((jint) [((NSString *) nil_chk([decoration trim])) length]) != 0) {
    if ([((NSString *) nil_chk(ComItextpdfTextHtmlHtmlTags_get_UNDERLINE_())) isEqual:decoration]) {
      style |= ComItextpdfTextFont_UNDERLINE;
    }
    else
#line 165
    if ([((NSString *) nil_chk(ComItextpdfTextHtmlHtmlTags_get_LINETHROUGH_())) isEqual:decoration]) {
      style |= ComItextpdfTextFont_STRIKETHRU;
    }
  }
  
#line 170
  if ([chain hasPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_I_()])
#line 171
  style |= ComItextpdfTextFont_ITALIC;
  
#line 173
  if ([chain hasPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_B_()])
#line 174
  style |= ComItextpdfTextFont_BOLD;
  
#line 176
  if ([chain hasPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_U_()])
#line 177
  style |= ComItextpdfTextFont_UNDERLINE;
  
#line 179
  if ([chain hasPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_S_()])
#line 180
  style |= ComItextpdfTextFont_STRIKETHRU;
  
#line 183
  ComItextpdfTextBaseColor *color = [ComItextpdfTextHtmlHtmlUtilities decodeColorWithNSString:[chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_COLOR_()]];
  
#line 186
  return [((id<ComItextpdfTextFontProvider>) nil_chk(provider_)) getFontWithNSString:face withNSString:encoding withBoolean:YES withFloat:size withInt:style withComItextpdfTextBaseColor:color];
}


#line 196
- (ComItextpdfTextChunk *)createChunkWithNSString:(NSString *)content
withComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 197
  ComItextpdfTextFont *font = [self getFontWithComItextpdfTextHtmlSimpleparserChainedProperties:chain];
  ComItextpdfTextChunk *ck = [[ComItextpdfTextChunk alloc] initWithNSString:content withComItextpdfTextFont:font];
  if ([((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) hasPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_SUB_()])
#line 200
  (void) [ck setTextRiseWithFloat:-[((ComItextpdfTextFont *) nil_chk(font)) getSize] / 2];
  else if ([chain hasPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_SUP_()])
#line 202
  (void) [ck setTextRiseWithFloat:[((ComItextpdfTextFont *) nil_chk(font)) getSize] / 2];
  (void) [ck setHyphenationWithComItextpdfTextPdfHyphenationEvent:[self getHyphenationWithComItextpdfTextHtmlSimpleparserChainedProperties:chain]];
  return ck;
}


#line 213
- (ComItextpdfTextParagraph *)createParagraphWithComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 214
  ComItextpdfTextParagraph *paragraph = [[ComItextpdfTextParagraph alloc] init];
  [self updateElementWithComItextpdfTextParagraph:paragraph withComItextpdfTextHtmlSimpleparserChainedProperties:chain];
  return paragraph;
}


#line 225
- (ComItextpdfTextListItem *)createListItemWithComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 226
  ComItextpdfTextListItem *item = [[ComItextpdfTextListItem alloc] init];
  [self updateElementWithComItextpdfTextParagraph:item withComItextpdfTextHtmlSimpleparserChainedProperties:chain];
  return item;
}


#line 237
- (void)updateElementWithComItextpdfTextParagraph:(ComItextpdfTextParagraph *)paragraph
withComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 239
  NSString *value = [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_ALIGN_()];
  [((ComItextpdfTextParagraph *) nil_chk(paragraph)) setAlignmentWithInt:[ComItextpdfTextHtmlHtmlUtilities alignmentValueWithNSString:value]];
  
#line 242
  [paragraph setHyphenationWithComItextpdfTextPdfHyphenationEvent:[self getHyphenationWithComItextpdfTextHtmlSimpleparserChainedProperties:chain]];
  
#line 244
  [ComItextpdfTextHtmlSimpleparserElementFactory setParagraphLeadingWithComItextpdfTextParagraph:paragraph withNSString:[chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_LEADING_()]];
  
#line 246
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_AFTER_()];
  if (value != nil) {
    @try {
      [paragraph setSpacingBeforeWithFloat:[JavaLangFloat parseFloatWithNSString:value]];
    }
    @catch (
#line 250
    JavaLangException *e) {
    }
  }
  
#line 254
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_AFTER_()];
  if (value != nil) {
    @try {
      [paragraph setSpacingAfterWithFloat:[JavaLangFloat parseFloatWithNSString:value]];
    }
    @catch (
#line 258
    JavaLangException *e) {
    }
  }
  
#line 262
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_EXTRAPARASPACE_()];
  if (value != nil) {
    @try {
      [paragraph setExtraParagraphSpaceWithFloat:[JavaLangFloat parseFloatWithNSString:value]];
    }
    @catch (
#line 266
    JavaLangException *e) {
    }
  }
  
#line 270
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_INDENT_()];
  if (value != nil) {
    @try {
      [paragraph setIndentationLeftWithFloat:[JavaLangFloat parseFloatWithNSString:value]];
    }
    @catch (
#line 274
    JavaLangException *e) {
    }
  }
}


#line 284
+ (void)setParagraphLeadingWithComItextpdfTextParagraph:(ComItextpdfTextParagraph *)paragraph
                                           withNSString:(NSString *)leading {
  
#line 286
  if (leading == nil) {
    [((ComItextpdfTextParagraph *) nil_chk(paragraph)) setLeadingWithFloat:0 withFloat:1.5f];
    return;
  }
  @try {
    JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:leading withNSString:@" ,"];
    
#line 293
    NSString *v = [tk nextToken];
    jfloat v1 = [JavaLangFloat parseFloatWithNSString:v];
    if (![tk hasMoreTokens]) {
      [((ComItextpdfTextParagraph *) nil_chk(paragraph)) setLeadingWithFloat:v1 withFloat:0];
      return;
    }
    
#line 300
    v = [tk nextToken];
    jfloat v2 = [JavaLangFloat parseFloatWithNSString:v];
    [((ComItextpdfTextParagraph *) nil_chk(paragraph)) setLeadingWithFloat:v1 withFloat:v2];
  }
  @catch (
#line 303
  JavaLangException *e) {
    
#line 305
    [((ComItextpdfTextParagraph *) nil_chk(paragraph)) setLeadingWithFloat:0 withFloat:1.5f];
  }
}

- (id<ComItextpdfTextPdfHyphenationEvent>)getHyphenationWithComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 318
  NSString *value = [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_HYPHENATION_()];
  
#line 320
  if (value == nil || ((jint) [value length]) == 0) {
    return nil;
  }
  
#line 324
  jint pos = [((NSString *) nil_chk(value)) indexOf:'_'];
  if (pos == -1) {
    return [[ComItextpdfTextPdfHyphenationAuto alloc] initWithNSString:value withNSString:nil withInt:2 withInt:2];
  }
  
#line 329
  NSString *lang = [value substring:0 endIndex:pos];
  NSString *country = [value substring:pos + 1];
  
#line 332
  pos = [((NSString *) nil_chk(country)) indexOf:','];
  if (pos == -1) {
    return [[ComItextpdfTextPdfHyphenationAuto alloc] initWithNSString:lang withNSString:country withInt:2 withInt:2];
  }
  
#line 337
  jint leftMin;
  jint rightMin = 2;
  value = [country substring:pos + 1];
  country = [country substring:0 endIndex:pos];
  pos = [((NSString *) nil_chk(value)) indexOf:','];
  if (pos == -1) {
    leftMin = [JavaLangInteger parseIntWithNSString:value];
  }
  else {
    
#line 345
    leftMin = [JavaLangInteger parseIntWithNSString:[value substring:0 endIndex:pos]];
    rightMin = [JavaLangInteger parseIntWithNSString:[value substring:pos + 1]];
  }
  return [[ComItextpdfTextPdfHyphenationAuto alloc] initWithNSString:lang withNSString:country withInt:leftMin withInt:rightMin];
}


#line 358
- (ComItextpdfTextPdfDrawLineSeparator *)createLineSeparatorWithJavaUtilMap:(id<JavaUtilMap>)attrs
                                                                  withFloat:(jfloat)offset {
  
#line 360
  jfloat lineWidth = 1;
  NSString *size = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:ComItextpdfTextHtmlHtmlTags_get_SIZE_()];
  if (size != nil) {
    jfloat tmpSize = [ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:size withFloat:ComItextpdfTextHtmlHtmlUtilities_DEFAULT_FONT_SIZE];
    if (tmpSize > 0)
#line 365
    lineWidth = tmpSize;
  }
  
#line 368
  NSString *width = [attrs getWithId:ComItextpdfTextHtmlHtmlTags_get_WIDTH_()];
  jfloat percentage = 100;
  if (width != nil) {
    jfloat tmpWidth = [ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:width withFloat:ComItextpdfTextHtmlHtmlUtilities_DEFAULT_FONT_SIZE];
    if (tmpWidth > 0) percentage = tmpWidth;
    if (![width hasSuffix:@"%"])
#line 374
    percentage = 100;
  }
  
#line 377
  ComItextpdfTextBaseColor *lineColor = nil;
  
#line 379
  jint align = [ComItextpdfTextHtmlHtmlUtilities alignmentValueWithNSString:[attrs getWithId:ComItextpdfTextHtmlHtmlTags_get_ALIGN_()]];
  return [[ComItextpdfTextPdfDrawLineSeparator alloc] initWithFloat:lineWidth withFloat:percentage withComItextpdfTextBaseColor:lineColor withInt:align withFloat:offset];
}


#line 395
- (ComItextpdfTextImage *)createImageWithNSString:(NSString *)src
                                  withJavaUtilMap:(id<JavaUtilMap>)attrs
withComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain
                   withComItextpdfTextDocListener:(id<ComItextpdfTextDocListener>)document
 withComItextpdfTextHtmlSimpleparserImageProvider:(id<ComItextpdfTextHtmlSimpleparserImageProvider>)img_provider
                              withJavaUtilHashMap:(JavaUtilHashMap *)img_store
                                     withNSString:(NSString *)img_baseurl {
  
#line 403
  ComItextpdfTextImage *img = nil;
  
#line 405
  if (img_provider != nil)
#line 406
  img = [img_provider getImageWithNSString:src withJavaUtilMap:attrs withComItextpdfTextHtmlSimpleparserChainedProperties:chain withComItextpdfTextDocListener:document];
  
#line 408
  if (img == nil && img_store != nil) {
    ComItextpdfTextImage *tim = [img_store getWithId:src];
    if (tim != nil)
#line 411
    img = [ComItextpdfTextImage getInstanceWithComItextpdfTextImage:tim];
  }
  if (img != nil)
#line 414
  return img;
  
#line 417
  if (![((NSString *) nil_chk(src)) hasPrefix:@"http"] && img_baseurl != nil) {
    src = JreStrcat("$$", img_baseurl, src);
  }
  else if (img == nil && ![src hasPrefix:@"http"]) {
    NSString *path = [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_IMAGEPATH_()];
    if (path == nil)
#line 423
    path = @"";
    src = [((JavaIoFile *) [[JavaIoFile alloc] initWithNSString:path withNSString:src]) getPath];
  }
  img = [ComItextpdfTextImage getInstanceWithNSString:src];
  if (img == nil)
#line 428
  return nil;
  
#line 430
  jfloat actualFontSize = [ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:
#line 431
  [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_SIZE_()] withFloat:
#line 432
  ComItextpdfTextHtmlHtmlUtilities_DEFAULT_FONT_SIZE];
  if (actualFontSize <= 0.0f)
#line 434
  actualFontSize = ComItextpdfTextHtmlHtmlUtilities_DEFAULT_FONT_SIZE;
  NSString *width = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:ComItextpdfTextHtmlHtmlTags_get_WIDTH_()];
  jfloat widthInPoints = [ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:width withFloat:actualFontSize];
  NSString *height = [attrs getWithId:ComItextpdfTextHtmlHtmlTags_get_HEIGHT_()];
  jfloat heightInPoints = [ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:height withFloat:actualFontSize];
  if (widthInPoints > 0 && heightInPoints > 0) {
    [((ComItextpdfTextImage *) nil_chk(img)) scaleAbsoluteWithFloat:widthInPoints withFloat:heightInPoints];
  }
  else
#line 441
  if (widthInPoints > 0) {
    heightInPoints = [((ComItextpdfTextImage *) nil_chk(img)) getHeight] * widthInPoints /
#line 443
    [img getWidth];
    [img scaleAbsoluteWithFloat:widthInPoints withFloat:heightInPoints];
  }
  else
#line 445
  if (heightInPoints > 0) {
    widthInPoints = [((ComItextpdfTextImage *) nil_chk(img)) getWidth] * heightInPoints /
#line 447
    [img getHeight];
    [img scaleAbsoluteWithFloat:widthInPoints withFloat:heightInPoints];
  }
  
#line 451
  NSString *before = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_BEFORE_()];
  if (before != nil)
#line 453
  [((ComItextpdfTextImage *) nil_chk(img)) setSpacingBeforeWithFloat:[JavaLangFloat parseFloatWithNSString:before]];
  NSString *after = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_AFTER_()];
  if (after != nil)
#line 456
  [((ComItextpdfTextImage *) nil_chk(img)) setSpacingAfterWithFloat:[JavaLangFloat parseFloatWithNSString:after]];
  [((ComItextpdfTextImage *) nil_chk(img)) setWidthPercentageWithFloat:0];
  return img;
}


#line 466
- (ComItextpdfTextList *)createListWithNSString:(NSString *)tag
withComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 467
  ComItextpdfTextList *list;
  if ([((NSString *) nil_chk(ComItextpdfTextHtmlHtmlTags_get_UL_())) equalsIgnoreCase:tag]) {
    list = [[ComItextpdfTextList alloc] initWithBoolean:ComItextpdfTextList_UNORDERED];
    [list setListSymbolWithNSString:@"\u2022 "];
  }
  else {
    list = [[ComItextpdfTextList alloc] initWithBoolean:ComItextpdfTextList_ORDERED];
  }
  @try {
    [((ComItextpdfTextList *) nil_chk(list)) setIndentationLeftWithFloat:[((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_INDENT_()]]) floatValue]];
  }
  @catch (
#line 477
  JavaLangException *e) {
    [((ComItextpdfTextList *) nil_chk(list)) setAutoindentWithBoolean:YES];
  }
  return list;
}

- (void)copyAllFieldsTo:(ComItextpdfTextHtmlSimpleparserElementFactory *)other {
  [super copyAllFieldsTo:other];
  other->provider_ = provider_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ElementFactory", NULL, 0x1, NULL },
    { "setFontProviderWithComItextpdfTextFontProvider:", "setFontProvider", "V", 0x1, NULL },
    { "getFontProvider", NULL, "Lcom.itextpdf.text.FontProvider;", 0x1, NULL },
    { "getFontWithComItextpdfTextHtmlSimpleparserChainedProperties:", "getFont", "Lcom.itextpdf.text.Font;", 0x1, NULL },
    { "createChunkWithNSString:withComItextpdfTextHtmlSimpleparserChainedProperties:", "createChunk", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "createParagraphWithComItextpdfTextHtmlSimpleparserChainedProperties:", "createParagraph", "Lcom.itextpdf.text.Paragraph;", 0x1, NULL },
    { "createListItemWithComItextpdfTextHtmlSimpleparserChainedProperties:", "createListItem", "Lcom.itextpdf.text.ListItem;", 0x1, NULL },
    { "updateElementWithComItextpdfTextParagraph:withComItextpdfTextHtmlSimpleparserChainedProperties:", "updateElement", "V", 0x4, NULL },
    { "setParagraphLeadingWithComItextpdfTextParagraph:withNSString:", "setParagraphLeading", "V", 0xc, NULL },
    { "getHyphenationWithComItextpdfTextHtmlSimpleparserChainedProperties:", "getHyphenation", "Lcom.itextpdf.text.pdf.HyphenationEvent;", 0x1, NULL },
    { "createLineSeparatorWithJavaUtilMap:withFloat:", "createLineSeparator", "Lcom.itextpdf.text.pdf.draw.LineSeparator;", 0x1, NULL },
    { "createImageWithNSString:withJavaUtilMap:withComItextpdfTextHtmlSimpleparserChainedProperties:withComItextpdfTextDocListener:withComItextpdfTextHtmlSimpleparserImageProvider:withJavaUtilHashMap:withNSString:", "createImage", "Lcom.itextpdf.text.Image;", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createListWithNSString:withComItextpdfTextHtmlSimpleparserChainedProperties:", "createList", "Lcom.itextpdf.text.List;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "provider_", NULL, 0x2, "Lcom.itextpdf.text.FontProvider;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextHtmlSimpleparserElementFactory = { "ElementFactory", "com.itextpdf.text.html.simpleparser", NULL, 0x1, 13, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextHtmlSimpleparserElementFactory;
}

@end
