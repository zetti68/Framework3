//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/html/simpleparser/StyleSheet.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/html/simpleparser/StyleSheet.java"

#include "IOSClass.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/html/HtmlTags.h"
#include "com/itextpdf/text/html/HtmlUtilities.h"
#include "com/itextpdf/text/html/simpleparser/ChainedProperties.h"
#include "com/itextpdf/text/html/simpleparser/StyleSheet.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"


#line 60
@implementation ComItextpdfTextHtmlSimpleparserStyleSheet


#line 78
- (instancetype)init {
  if (self = [super init]) {
    tagMap_ =
#line 66
    [[JavaUtilHashMap alloc] init];
    classMap_ =
#line 73
    [[JavaUtilHashMap alloc] init];
  }
  return self;
}


#line 86
- (void)loadTagStyleWithNSString:(NSString *)tag
                 withJavaUtilMap:(id<JavaUtilMap>)attrs {
  
#line 87
  (void) [((id<JavaUtilMap>) nil_chk(tagMap_)) putWithId:[((NSString *) nil_chk(tag)) lowercaseString] withId:attrs];
}


#line 97
- (void)loadTagStyleWithNSString:(NSString *)tag
                    withNSString:(NSString *)key
                    withNSString:(NSString *)value {
  
#line 98
  tag = [((NSString *) nil_chk(tag)) lowercaseString];
  id<JavaUtilMap> styles = [((id<JavaUtilMap>) nil_chk(tagMap_)) getWithId:tag];
  if (styles == nil) {
    styles = [[JavaUtilHashMap alloc] init];
    (void) [tagMap_ putWithId:tag withId:styles];
  }
  (void) [((id<JavaUtilMap>) nil_chk(styles)) putWithId:key withId:value];
}


#line 112
- (void)loadStyleWithNSString:(NSString *)className_
          withJavaUtilHashMap:(JavaUtilHashMap *)attrs {
  
#line 113
  (void) [((id<JavaUtilMap>) nil_chk(classMap_)) putWithId:[((NSString *) nil_chk(className_)) lowercaseString] withId:attrs];
}


#line 123
- (void)loadStyleWithNSString:(NSString *)className_
                 withNSString:(NSString *)key
                 withNSString:(NSString *)value {
  
#line 124
  className_ = [((NSString *) nil_chk(className_)) lowercaseString];
  id<JavaUtilMap> styles = [((id<JavaUtilMap>) nil_chk(classMap_)) getWithId:className_];
  if (styles == nil) {
    styles = [[JavaUtilHashMap alloc] init];
    (void) [classMap_ putWithId:className_ withId:styles];
  }
  (void) [((id<JavaUtilMap>) nil_chk(styles)) putWithId:key withId:value];
}


#line 139
- (void)applyStyleWithNSString:(NSString *)tag
               withJavaUtilMap:(id<JavaUtilMap>)attrs {
  
#line 141
  id<JavaUtilMap> map = [((id<JavaUtilMap>) nil_chk(tagMap_)) getWithId:[((NSString *) nil_chk(tag)) lowercaseString]];
  if (map != nil) {
    
#line 144
    id<JavaUtilMap> temp = [[JavaUtilHashMap alloc] initWithJavaUtilMap:map];
    
#line 146
    [temp putAllWithJavaUtilMap:attrs];
    
#line 148
    [((id<JavaUtilMap>) nil_chk(attrs)) putAllWithJavaUtilMap:temp];
  }
  
#line 151
  NSString *cm = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:ComItextpdfTextHtmlHtmlTags_get_CLASS_()];
  if (cm == nil)
#line 153
  return;
  
#line 155
  map = [((id<JavaUtilMap>) nil_chk(classMap_)) getWithId:[((NSString *) nil_chk(cm)) lowercaseString]];
  if (map == nil)
#line 157
  return;
  
#line 159
  (void) [attrs removeWithId:ComItextpdfTextHtmlHtmlTags_get_CLASS_()];
  
#line 161
  id<JavaUtilMap> temp = [[JavaUtilHashMap alloc] initWithJavaUtilMap:map];
  
#line 163
  [temp putAllWithJavaUtilMap:attrs];
  
#line 165
  [attrs putAllWithJavaUtilMap:temp];
}


#line 174
+ (void)resolveStyleAttributeWithJavaUtilMap:(id<JavaUtilMap>)h
withComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 175
  NSString *style = [((id<JavaUtilMap>) nil_chk(h)) getWithId:ComItextpdfTextHtmlHtmlTags_get_STYLE_()];
  if (style == nil)
#line 177
  return;
  JavaUtilProperties *prop = [ComItextpdfTextHtmlHtmlUtilities parseAttributesWithNSString:style];
  for (id __strong element in nil_chk([((JavaUtilProperties *) nil_chk(prop)) keySet])) {
    NSString *key = (NSString *) check_class_cast(element, [NSString class]);
    if ([((NSString *) nil_chk(key)) isEqual:ComItextpdfTextHtmlHtmlTags_get_FONTFAMILY_()]) {
      (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_FACE_() withId:[prop getPropertyWithNSString:key]];
    }
    else
#line 183
    if ([key isEqual:ComItextpdfTextHtmlHtmlTags_get_FONTSIZE_()]) {
      jfloat actualFontSize = [ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:[((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_SIZE_()] withFloat:
#line 186
      ComItextpdfTextHtmlHtmlUtilities_DEFAULT_FONT_SIZE];
      if (actualFontSize <= 0.0f)
#line 188
      actualFontSize = ComItextpdfTextHtmlHtmlUtilities_DEFAULT_FONT_SIZE;
      (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_SIZE_() withId:JreStrcat("$$", [JavaLangFloat toStringWithFloat:[ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:[prop getPropertyWithNSString:
#line 190
      key] withFloat:actualFontSize]], @"pt")];
    }
    else if ([key isEqual:ComItextpdfTextHtmlHtmlTags_get_FONTSTYLE_()]) {
      NSString *ss = [((NSString *) nil_chk([((NSString *) nil_chk([prop getPropertyWithNSString:key])) trim])) lowercaseString];
      if ([((NSString *) nil_chk(ss)) isEqual:ComItextpdfTextHtmlHtmlTags_get_ITALIC_()] || [ss isEqual:ComItextpdfTextHtmlHtmlTags_get_OBLIQUE_()])
#line 195
      (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_I_() withId:nil];
    }
    else
#line 196
    if ([key isEqual:ComItextpdfTextHtmlHtmlTags_get_FONTWEIGHT_()]) {
      NSString *ss = [((NSString *) nil_chk([((NSString *) nil_chk([prop getPropertyWithNSString:key])) trim])) lowercaseString];
      if ([((NSString *) nil_chk(ss)) isEqual:ComItextpdfTextHtmlHtmlTags_get_BOLD_()] || [ss isEqual:@"700"] || [ss isEqual:@"800"] ||
#line 199
      [ss isEqual:@"900"])
#line 200
      (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_B_() withId:nil];
    }
    else
#line 201
    if ([key isEqual:ComItextpdfTextHtmlHtmlTags_get_TEXTDECORATION_()]) {
      NSString *ss = [((NSString *) nil_chk([((NSString *) nil_chk([prop getPropertyWithNSString:key])) trim])) lowercaseString];
      if ([((NSString *) nil_chk(ss)) isEqual:ComItextpdfTextHtmlHtmlTags_get_UNDERLINE_()])
#line 204
      (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_U_() withId:nil];
    }
    else
#line 205
    if ([key isEqual:ComItextpdfTextHtmlHtmlTags_get_COLOR_()]) {
      ComItextpdfTextBaseColor *c = [ComItextpdfTextHtmlHtmlUtilities decodeColorWithNSString:[prop getPropertyWithNSString:key]];
      if (c != nil) {
        jint hh = [c getRGB];
        NSString *hs = [JavaLangInteger toHexStringWithInt:hh];
        hs = JreStrcat("$$", @"000000", hs);
        hs = JreStrcat("C$", '#', [hs substring:((jint) [hs length]) - 6]);
        (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_COLOR_() withId:hs];
      }
    }
    else
#line 214
    if ([key isEqual:ComItextpdfTextHtmlHtmlTags_get_LINEHEIGHT_()]) {
      NSString *ss = [((NSString *) nil_chk([prop getPropertyWithNSString:key])) trim];
      jfloat actualFontSize = [ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:[((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_SIZE_()] withFloat:
#line 218
      ComItextpdfTextHtmlHtmlUtilities_DEFAULT_FONT_SIZE];
      if (actualFontSize <= 0.0f)
#line 220
      actualFontSize = ComItextpdfTextHtmlHtmlUtilities_DEFAULT_FONT_SIZE;
      jfloat v = [ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:[prop getPropertyWithNSString:key] withFloat:
#line 222
      actualFontSize];
      if ([((NSString *) nil_chk(ss)) hasSuffix:@"%"]) {
        (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_LEADING_() withId:JreStrcat("$F", @"0,", v / 100)];
        return;
      }
      if ([((NSString *) nil_chk(ComItextpdfTextHtmlHtmlTags_get_NORMAL_())) equalsIgnoreCase:ss]) {
        (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_LEADING_() withId:@"0,1.5"];
        return;
      }
      (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_LEADING_() withId:JreStrcat("F$", v, @",0")];
    }
    else
#line 232
    if ([key isEqual:ComItextpdfTextHtmlHtmlTags_get_TEXTALIGN_()]) {
      NSString *ss = [((NSString *) nil_chk([((NSString *) nil_chk([prop getPropertyWithNSString:key])) trim])) lowercaseString];
      (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_ALIGN_() withId:ss];
    }
    else
#line 235
    if ([key isEqual:ComItextpdfTextHtmlHtmlTags_get_PADDINGLEFT_()]) {
      NSString *ss = [((NSString *) nil_chk([((NSString *) nil_chk([prop getPropertyWithNSString:key])) trim])) lowercaseString];
      (void) [h putWithId:ComItextpdfTextHtmlHtmlTags_get_INDENT_() withId:[JavaLangFloat toStringWithFloat:[ComItextpdfTextHtmlHtmlUtilities parseLengthWithNSString:ss]]];
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextHtmlSimpleparserStyleSheet *)other {
  [super copyAllFieldsTo:other];
  other->classMap_ = classMap_;
  other->tagMap_ = tagMap_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "StyleSheet", NULL, 0x1, NULL },
    { "loadTagStyleWithNSString:withJavaUtilMap:", "loadTagStyle", "V", 0x1, NULL },
    { "loadTagStyleWithNSString:withNSString:withNSString:", "loadTagStyle", "V", 0x1, NULL },
    { "loadStyleWithNSString:withJavaUtilHashMap:", "loadStyle", "V", 0x1, NULL },
    { "loadStyleWithNSString:withNSString:withNSString:", "loadStyle", "V", 0x1, NULL },
    { "applyStyleWithNSString:withJavaUtilMap:", "applyStyle", "V", 0x1, NULL },
    { "resolveStyleAttributeWithJavaUtilMap:withComItextpdfTextHtmlSimpleparserChainedProperties:", "resolveStyleAttribute", "V", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tagMap_", NULL, 0x4, "Ljava.util.Map;", NULL,  },
    { "classMap_", NULL, 0x4, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextHtmlSimpleparserStyleSheet = { "StyleSheet", "com.itextpdf.text.html.simpleparser", NULL, 0x1, 7, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextHtmlSimpleparserStyleSheet;
}

@end
