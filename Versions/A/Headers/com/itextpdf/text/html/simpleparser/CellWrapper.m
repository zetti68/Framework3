//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/html/simpleparser/CellWrapper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/html/simpleparser/CellWrapper.java"

#include "IOSClass.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ElementListener.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/html/HtmlTags.h"
#include "com/itextpdf/text/html/HtmlUtilities.h"
#include "com/itextpdf/text/html/simpleparser/CellWrapper.h"
#include "com/itextpdf/text/html/simpleparser/ChainedProperties.h"
#include "com/itextpdf/text/pdf/PdfPCell.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"


#line 64
@implementation ComItextpdfTextHtmlSimpleparserCellWrapper


#line 87
- (instancetype)initWithNSString:(NSString *)tag
withComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  if (self = [super init]) {
    
#line 88
    self->cell_ = [self createPdfPCellWithNSString:tag withComItextpdfTextHtmlSimpleparserChainedProperties:chain];
    
#line 89
    NSString *value = [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_WIDTH_()];
    
#line 90
    if (value != nil) {
      value = [value trim];
      if ([((NSString *) nil_chk(value)) hasSuffix:@"%"]) {
        percentage_ = YES;
        value = [value substring:0 endIndex:((jint) [value length]) - 1];
      }
      width_ = [JavaLangFloat parseFloatWithNSString:value];
    }
  }
  return self;
}


#line 106
- (ComItextpdfTextPdfPdfPCell *)createPdfPCellWithNSString:(NSString *)tag
      withComItextpdfTextHtmlSimpleparserChainedProperties:(ComItextpdfTextHtmlSimpleparserChainedProperties *)chain {
  
#line 107
  ComItextpdfTextPdfPdfPCell *cell = [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *) check_class_cast(nil, [ComItextpdfTextPhrase class])];
  
#line 109
  NSString *value = [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_COLSPAN_()];
  if (value != nil)
#line 111
  [cell setColspanWithInt:[JavaLangInteger parseIntWithNSString:value]];
  
#line 113
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_ROWSPAN_()];
  if (value != nil)
#line 115
  [cell setRowspanWithInt:[JavaLangInteger parseIntWithNSString:value]];
  
#line 117
  if ([((NSString *) nil_chk(tag)) isEqual:ComItextpdfTextHtmlHtmlTags_get_TH_()])
#line 118
  [cell setHorizontalAlignmentWithInt:ComItextpdfTextElement_ALIGN_CENTER];
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_ALIGN_()];
  if (value != nil) {
    [cell setHorizontalAlignmentWithInt:[ComItextpdfTextHtmlHtmlUtilities alignmentValueWithNSString:value]];
  }
  
#line 124
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_VALIGN_()];
  [cell setVerticalAlignmentWithInt:ComItextpdfTextElement_ALIGN_MIDDLE];
  if (value != nil) {
    [cell setVerticalAlignmentWithInt:[ComItextpdfTextHtmlHtmlUtilities alignmentValueWithNSString:value]];
  }
  
#line 130
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_BORDER_()];
  jfloat border = 0;
  if (value != nil)
#line 133
  border = [JavaLangFloat parseFloatWithNSString:value];
  [cell setBorderWidthWithFloat:border];
  
#line 136
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_CELLPADDING_()];
  if (value != nil)
#line 138
  [cell setPaddingWithFloat:[JavaLangFloat parseFloatWithNSString:value]];
  [cell setUseDescenderWithBoolean:YES];
  
#line 141
  value = [chain getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_BGCOLOR_()];
  [cell setBackgroundColorWithComItextpdfTextBaseColor:[ComItextpdfTextHtmlHtmlUtilities decodeColorWithNSString:value]];
  return cell;
}


#line 150
- (ComItextpdfTextPdfPdfPCell *)getCell {
  
#line 151
  return cell_;
}


#line 159
- (jfloat)getWidth {
  
#line 160
  return width_;
}


#line 168
- (jboolean)isPercentage {
  
#line 169
  return percentage_;
}


#line 176
- (jboolean)addWithComItextpdfTextElement:(id<ComItextpdfTextElement>)o {
  
#line 177
  [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell_)) addElementWithComItextpdfTextElement:o];
  return YES;
}


#line 186
- (id<JavaUtilList>)getChunks {
  
#line 187
  return nil;
}


#line 193
- (jboolean)isContent {
  
#line 194
  return NO;
}


#line 200
- (jboolean)isNestable {
  
#line 201
  return NO;
}


#line 207
- (jboolean)processWithComItextpdfTextElementListener:(id<ComItextpdfTextElementListener>)listener {
  
#line 208
  return NO;
}


#line 214
- (jint)type {
  
#line 215
  return 0;
}

- (void)copyAllFieldsTo:(ComItextpdfTextHtmlSimpleparserCellWrapper *)other {
  [super copyAllFieldsTo:other];
  other->cell_ = cell_;
  other->percentage_ = percentage_;
  other->width_ = width_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withComItextpdfTextHtmlSimpleparserChainedProperties:", "CellWrapper", NULL, 0x1, NULL },
    { "createPdfPCellWithNSString:withComItextpdfTextHtmlSimpleparserChainedProperties:", "createPdfPCell", "Lcom.itextpdf.text.pdf.PdfPCell;", 0x1, NULL },
    { "getCell", NULL, "Lcom.itextpdf.text.pdf.PdfPCell;", 0x1, NULL },
    { "getWidth", NULL, "F", 0x1, NULL },
    { "isPercentage", NULL, "Z", 0x1, NULL },
    { "addWithComItextpdfTextElement:", "add", "Z", 0x1, NULL },
    { "getChunks", NULL, "Ljava.util.List;", 0x1, NULL },
    { "isContent", NULL, "Z", 0x1, NULL },
    { "isNestable", NULL, "Z", 0x1, NULL },
    { "processWithComItextpdfTextElementListener:", "process", "Z", 0x1, NULL },
    { "type", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cell_", NULL, 0x12, "Lcom.itextpdf.text.pdf.PdfPCell;", NULL,  },
    { "width_", NULL, 0x2, "F", NULL,  },
    { "percentage_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextHtmlSimpleparserCellWrapper = { "CellWrapper", "com.itextpdf.text.html.simpleparser", NULL, 0x1, 11, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextHtmlSimpleparserCellWrapper;
}

@end
