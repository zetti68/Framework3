//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/html/simpleparser/HTMLWorker.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/html/simpleparser/HTMLWorker.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/DocListener.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/FontProvider.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/List.h"
#include "com/itextpdf/text/ListItem.h"
#include "com/itextpdf/text/Paragraph.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/TextElementArray.h"
#include "com/itextpdf/text/html/HtmlTags.h"
#include "com/itextpdf/text/html/HtmlUtilities.h"
#include "com/itextpdf/text/html/simpleparser/CellWrapper.h"
#include "com/itextpdf/text/html/simpleparser/ChainedProperties.h"
#include "com/itextpdf/text/html/simpleparser/ElementFactory.h"
#include "com/itextpdf/text/html/simpleparser/HTMLTagProcessor.h"
#include "com/itextpdf/text/html/simpleparser/HTMLTagProcessors.h"
#include "com/itextpdf/text/html/simpleparser/HTMLWorker.h"
#include "com/itextpdf/text/html/simpleparser/ImageProcessor.h"
#include "com/itextpdf/text/html/simpleparser/ImageProvider.h"
#include "com/itextpdf/text/html/simpleparser/ImageStore.h"
#include "com/itextpdf/text/html/simpleparser/LinkProcessor.h"
#include "com/itextpdf/text/html/simpleparser/StyleSheet.h"
#include "com/itextpdf/text/html/simpleparser/TableWrapper.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/log/LoggerFactory.h"
#include "com/itextpdf/text/pdf/PdfPCell.h"
#include "com/itextpdf/text/pdf/PdfPTable.h"
#include "com/itextpdf/text/pdf/draw/LineSeparator.h"
#include "com/itextpdf/text/xml/simpleparser/SimpleXMLParser.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Stack.h"

BOOL ComItextpdfTextHtmlSimpleparserHTMLWorker_initialized = NO;


#line 84
@implementation ComItextpdfTextHtmlSimpleparserHTMLWorker

id<ComItextpdfTextLogLogger> ComItextpdfTextHtmlSimpleparserHTMLWorker_LOGGER_;
NSString * ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_PROVIDER_ = 
#line 342
@"img_provider";
NSString * ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_PROCESSOR_ = 
#line 348
@"img_interface";
NSString * ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_STORE_ = 
#line 354
@"img_static";
NSString * ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_BASEURL_ = 
#line 360
@"img_baseurl";
NSString * ComItextpdfTextHtmlSimpleparserHTMLWorker_FONT_PROVIDER_ = 
#line 366
@"font_factory";
NSString * ComItextpdfTextHtmlSimpleparserHTMLWorker_LINK_PROVIDER_ = 
#line 372
@"alink_interface";


#line 109
- (instancetype)initWithComItextpdfTextDocListener:(id<ComItextpdfTextDocListener>)document {
  return
#line 110
  [self initComItextpdfTextHtmlSimpleparserHTMLWorkerWithComItextpdfTextDocListener:document withJavaUtilMap:nil withComItextpdfTextHtmlSimpleparserStyleSheet:nil];
}


#line 120
- (instancetype)initComItextpdfTextHtmlSimpleparserHTMLWorkerWithComItextpdfTextDocListener:(id<ComItextpdfTextDocListener>)document
                                                                            withJavaUtilMap:(id<JavaUtilMap>)tags
                                              withComItextpdfTextHtmlSimpleparserStyleSheet:(ComItextpdfTextHtmlSimpleparserStyleSheet *)style {
  if (self = [super init]) {
    style_ =
#line 103
    [[ComItextpdfTextHtmlSimpleparserStyleSheet alloc] init];
    stack_ =
#line 163
    [[JavaUtilStack alloc] init];
    chain_ =
#line 175
    [[ComItextpdfTextHtmlSimpleparserChainedProperties alloc] init];
    providers_ =
#line 378
    [[JavaUtilHashMap alloc] init];
    factory_ =
#line 403
    [[ComItextpdfTextHtmlSimpleparserElementFactory alloc] init];
    tableState_ =
#line 660
    [[JavaUtilStack alloc] init];
    pendingTR_ =
#line 663
    NO;
    pendingTD_ =
#line 666
    NO;
    pendingLI_ =
#line 669
    NO;
    insidePRE_ =
#line 675
    NO;
    skipText_ =
#line 681
    NO;
    
#line 121
    self->document_ = document;
    
#line 122
    [self setSupportedTagsWithJavaUtilMap:tags];
    
#line 123
    [self setStyleSheetWithComItextpdfTextHtmlSimpleparserStyleSheet:style];
  }
  return self;
}

- (instancetype)initWithComItextpdfTextDocListener:(id<ComItextpdfTextDocListener>)document
                                   withJavaUtilMap:(id<JavaUtilMap>)tags
     withComItextpdfTextHtmlSimpleparserStyleSheet:(ComItextpdfTextHtmlSimpleparserStyleSheet *)style {
  return [self initComItextpdfTextHtmlSimpleparserHTMLWorkerWithComItextpdfTextDocListener:
#line 120
document withJavaUtilMap:tags withComItextpdfTextHtmlSimpleparserStyleSheet:style];
}


#line 131
- (void)setSupportedTagsWithJavaUtilMap:(id<JavaUtilMap>)tags {
  
#line 132
  if (tags == nil)
#line 133
  tags = [[ComItextpdfTextHtmlSimpleparserHTMLTagProcessors alloc] init];
  self->tags_ = tags;
}


#line 141
- (void)setStyleSheetWithComItextpdfTextHtmlSimpleparserStyleSheet:(ComItextpdfTextHtmlSimpleparserStyleSheet *)style {
  
#line 142
  if (style == nil)
#line 143
  style = [[ComItextpdfTextHtmlSimpleparserStyleSheet alloc] init];
  self->style_ = style;
}


#line 152
- (void)parseWithJavaIoReader:(JavaIoReader *)reader {
  
#line 153
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextHtmlSimpleparserHTMLWorker_LOGGER_)) infoWithNSString:@"Please note, there is a more extended version of the HTMLWorker available in the iText XMLWorker"];
  [ComItextpdfTextXmlSimpleparserSimpleXMLParser parseWithComItextpdfTextXmlSimpleparserSimpleXMLDocHandler:self withComItextpdfTextXmlSimpleparserSimpleXMLDocHandlerComment:nil withJavaIoReader:reader withBoolean:YES];
}


#line 180
- (void)startDocument {
  
#line 181
  JavaUtilHashMap *attrs = [[JavaUtilHashMap alloc] init];
  [((ComItextpdfTextHtmlSimpleparserStyleSheet *) nil_chk(style_)) applyStyleWithNSString:ComItextpdfTextHtmlHtmlTags_get_BODY_() withJavaUtilMap:attrs];
  [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain_)) addToChainWithNSString:ComItextpdfTextHtmlHtmlTags_get_BODY_() withJavaUtilMap:attrs];
}


#line 189
- (void)startElementWithNSString:(NSString *)tag
                 withJavaUtilMap:(id<JavaUtilMap>)attrs {
  
#line 190
  id<ComItextpdfTextHtmlSimpleparserHTMLTagProcessor> htmlTag = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:tag];
  if (htmlTag == nil) {
    return;
  }
  
#line 195
  [((ComItextpdfTextHtmlSimpleparserStyleSheet *) nil_chk(style_)) applyStyleWithNSString:tag withJavaUtilMap:attrs];
  
#line 197
  [ComItextpdfTextHtmlSimpleparserStyleSheet resolveStyleAttributeWithJavaUtilMap:attrs withComItextpdfTextHtmlSimpleparserChainedProperties:chain_];
  
#line 199
  @try {
    [((id<ComItextpdfTextHtmlSimpleparserHTMLTagProcessor>) nil_chk(htmlTag)) startElementWithComItextpdfTextHtmlSimpleparserHTMLWorker:self withNSString:tag withJavaUtilMap:attrs];
  }
  @catch (
#line 201
  ComItextpdfTextDocumentException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
  @catch (
#line 203
  JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 211
- (void)textWithNSString:(NSString *)content {
  
#line 212
  if (skipText_)
#line 213
  return;
  if (currentParagraph_ == nil) {
    currentParagraph_ = [self createParagraph];
  }
  if (!insidePRE_) {
    
#line 219
    if (((jint) [((NSString *) nil_chk([((NSString *) nil_chk(content)) trim])) length]) == 0 && [content indexOf:' '] < 0) {
      return;
    }
    content = [ComItextpdfTextHtmlHtmlUtilities eliminateWhiteSpaceWithNSString:content];
  }
  ComItextpdfTextChunk *chunk = [self createChunkWithNSString:content];
  [((ComItextpdfTextParagraph *) nil_chk(currentParagraph_)) addWithId:chunk];
}


#line 231
- (void)endElementWithNSString:(NSString *)tag {
  id<ComItextpdfTextHtmlSimpleparserHTMLTagProcessor> htmlTag = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:tag];
  if (htmlTag == nil) {
    return;
  }
  
#line 237
  @try {
    [((id<ComItextpdfTextHtmlSimpleparserHTMLTagProcessor>) nil_chk(htmlTag)) endElementWithComItextpdfTextHtmlSimpleparserHTMLWorker:self withNSString:tag];
  }
  @catch (
#line 239
  ComItextpdfTextDocumentException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 247
- (void)endDocument {
  @try {
    
#line 250
    for (jint k = 0; k < [((JavaUtilStack *) nil_chk(stack_)) size]; ++k)
#line 251
    [((id<ComItextpdfTextDocListener>) nil_chk(document_)) addWithComItextpdfTextElement:[stack_ elementAtWithInt:k]];
    
#line 253
    if (currentParagraph_ != nil)
#line 254
    [((id<ComItextpdfTextDocListener>) nil_chk(document_)) addWithComItextpdfTextElement:currentParagraph_];
    currentParagraph_ = nil;
  }
  @catch (
#line 256
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 267
- (void)newLine {
  if (currentParagraph_ == nil) {
    currentParagraph_ = [[ComItextpdfTextParagraph alloc] init];
  }
  [((ComItextpdfTextParagraph *) nil_chk(currentParagraph_)) addWithId:[self createChunkWithNSString:@"\n"]];
}


#line 281
- (void)carriageReturn {
  
#line 282
  if (currentParagraph_ == nil)
#line 283
  return;
  if ([((JavaUtilStack *) nil_chk(stack_)) empty])
#line 285
  [((id<ComItextpdfTextDocListener>) nil_chk(document_)) addWithComItextpdfTextElement:currentParagraph_];
  else {
    id<ComItextpdfTextElement> obj = [stack_ pop];
    if ([(id) obj conformsToProtocol: @protocol(ComItextpdfTextTextElementArray)]) {
      id<ComItextpdfTextTextElementArray> current = (id<ComItextpdfTextTextElementArray>) check_protocol_cast(obj, @protocol(ComItextpdfTextTextElementArray));
      [((id<ComItextpdfTextTextElementArray>) nil_chk(current)) addWithComItextpdfTextElement:currentParagraph_];
    }
    (void) [stack_ pushWithId:obj];
  }
  currentParagraph_ = nil;
}


#line 302
- (void)flushContent {
  
#line 303
  [self pushToStackWithComItextpdfTextElement:currentParagraph_];
  currentParagraph_ = [[ComItextpdfTextParagraph alloc] init];
}


#line 312
- (void)pushToStackWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element {
  
#line 313
  if (element != nil)
#line 314
  (void) [((JavaUtilStack *) nil_chk(stack_)) pushWithId:element];
}


#line 323
- (void)updateChainWithNSString:(NSString *)tag
                withJavaUtilMap:(id<JavaUtilMap>)attrs {
  
#line 324
  [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain_)) addToChainWithNSString:tag withJavaUtilMap:attrs];
}


#line 332
- (void)updateChainWithNSString:(NSString *)tag {
  
#line 333
  [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain_)) removeChainWithNSString:tag];
}


#line 386
- (void)setProvidersWithJavaUtilMap:(id<JavaUtilMap>)providers {
  
#line 387
  if (providers == nil)
#line 388
  return;
  self->providers_ = providers;
  id<ComItextpdfTextFontProvider> ff = nil;
  if (providers != nil)
#line 392
  ff = (id<ComItextpdfTextFontProvider>) check_protocol_cast([providers getWithId:ComItextpdfTextHtmlSimpleparserHTMLWorker_FONT_PROVIDER_], @protocol(ComItextpdfTextFontProvider));
  if (ff != nil)
#line 394
  [((ComItextpdfTextHtmlSimpleparserElementFactory *) nil_chk(factory_)) setFontProviderWithComItextpdfTextFontProvider:ff];
}


#line 411
- (ComItextpdfTextChunk *)createChunkWithNSString:(NSString *)content {
  
#line 412
  return [((ComItextpdfTextHtmlSimpleparserElementFactory *) nil_chk(factory_)) createChunkWithNSString:content withComItextpdfTextHtmlSimpleparserChainedProperties:chain_];
}


#line 419
- (ComItextpdfTextParagraph *)createParagraph {
  
#line 420
  return [((ComItextpdfTextHtmlSimpleparserElementFactory *) nil_chk(factory_)) createParagraphWithComItextpdfTextHtmlSimpleparserChainedProperties:chain_];
}


#line 428
- (ComItextpdfTextList *)createListWithNSString:(NSString *)tag {
  
#line 429
  return [((ComItextpdfTextHtmlSimpleparserElementFactory *) nil_chk(factory_)) createListWithNSString:tag withComItextpdfTextHtmlSimpleparserChainedProperties:chain_];
}


#line 436
- (ComItextpdfTextListItem *)createListItem {
  
#line 437
  return [((ComItextpdfTextHtmlSimpleparserElementFactory *) nil_chk(factory_)) createListItemWithComItextpdfTextHtmlSimpleparserChainedProperties:chain_];
}


#line 445
- (ComItextpdfTextPdfDrawLineSeparator *)createLineSeparatorWithJavaUtilMap:(id<JavaUtilMap>)attrs {
  
#line 446
  return [((ComItextpdfTextHtmlSimpleparserElementFactory *) nil_chk(factory_)) createLineSeparatorWithJavaUtilMap:attrs withFloat:[((ComItextpdfTextParagraph *) nil_chk(currentParagraph_)) getLeading] / 2];
}


#line 457
- (ComItextpdfTextImage *)createImageWithJavaUtilMap:(id<JavaUtilMap>)attrs {
  
#line 458
  NSString *src = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:ComItextpdfTextHtmlHtmlTags_get_SRC_()];
  if (src == nil)
#line 460
  return nil;
  ComItextpdfTextImage *img = [((ComItextpdfTextHtmlSimpleparserElementFactory *) nil_chk(factory_)) createImageWithNSString:
#line 462
  src withJavaUtilMap:attrs withComItextpdfTextHtmlSimpleparserChainedProperties:chain_ withComItextpdfTextDocListener:document_ withComItextpdfTextHtmlSimpleparserImageProvider:
#line 463
  (id<ComItextpdfTextHtmlSimpleparserImageProvider>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(providers_)) getWithId:ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_PROVIDER_], @protocol(ComItextpdfTextHtmlSimpleparserImageProvider)) withJavaUtilHashMap:
#line 464
  (ComItextpdfTextHtmlSimpleparserImageStore *) check_class_cast([providers_ getWithId:ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_STORE_], [ComItextpdfTextHtmlSimpleparserImageStore class]) withNSString:
#line 465
  (NSString *) check_class_cast([providers_ getWithId:ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_BASEURL_], [NSString class])];
  return img;
}


#line 475
- (ComItextpdfTextHtmlSimpleparserCellWrapper *)createCellWithNSString:(NSString *)tag {
  return [[ComItextpdfTextHtmlSimpleparserCellWrapper alloc] initWithNSString:tag withComItextpdfTextHtmlSimpleparserChainedProperties:chain_];
}


#line 485
- (void)processLink {
  
#line 486
  if (currentParagraph_ == nil) {
    currentParagraph_ = [[ComItextpdfTextParagraph alloc] init];
  }
  
#line 490
  id<ComItextpdfTextHtmlSimpleparserLinkProcessor> i = (id<ComItextpdfTextHtmlSimpleparserLinkProcessor>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(providers_)) getWithId:ComItextpdfTextHtmlSimpleparserHTMLWorker_LINK_PROVIDER_], @protocol(ComItextpdfTextHtmlSimpleparserLinkProcessor));
  if (i == nil || ![i processWithComItextpdfTextParagraph:currentParagraph_ withComItextpdfTextHtmlSimpleparserChainedProperties:chain_]) {
    
#line 493
    NSString *href = [((ComItextpdfTextHtmlSimpleparserChainedProperties *) nil_chk(chain_)) getPropertyWithNSString:ComItextpdfTextHtmlHtmlTags_get_HREF_()];
    if (href != nil) {
      for (ComItextpdfTextChunk * __strong ck in nil_chk([((ComItextpdfTextParagraph *) nil_chk(currentParagraph_)) getChunks])) {
        (void) [((ComItextpdfTextChunk *) nil_chk(ck)) setAnchorWithNSString:href];
      }
    }
  }
  
#line 501
  if ([((JavaUtilStack *) nil_chk(stack_)) isEmpty]) {
    
#line 503
    ComItextpdfTextParagraph *tmp = [[ComItextpdfTextParagraph alloc] initWithComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithComItextpdfTextPhrase:currentParagraph_]];
    currentParagraph_ = tmp;
  }
  else {
    
#line 506
    ComItextpdfTextParagraph *tmp = (ComItextpdfTextParagraph *) check_class_cast([stack_ pop], [ComItextpdfTextParagraph class]);
    [((ComItextpdfTextParagraph *) nil_chk(tmp)) addWithId:[[ComItextpdfTextPhrase alloc] initWithComItextpdfTextPhrase:currentParagraph_]];
    currentParagraph_ = tmp;
  }
}


#line 519
- (void)processList {
  
#line 520
  if ([((JavaUtilStack *) nil_chk(stack_)) empty])
#line 521
  return;
  id<ComItextpdfTextElement> obj = [stack_ pop];
  if (!([(id) obj isKindOfClass:[ComItextpdfTextList class]])) {
    (void) [stack_ pushWithId:obj];
    return;
  }
  if ([stack_ empty])
#line 528
  [((id<ComItextpdfTextDocListener>) nil_chk(document_)) addWithComItextpdfTextElement:obj];
  else
#line 530
  [((id<ComItextpdfTextTextElementArray>) nil_chk(((id<ComItextpdfTextTextElementArray>) check_protocol_cast([stack_ peek], @protocol(ComItextpdfTextTextElementArray))))) addWithComItextpdfTextElement:obj];
}


#line 539
- (void)processListItem {
  
#line 540
  if ([((JavaUtilStack *) nil_chk(stack_)) empty])
#line 541
  return;
  id<ComItextpdfTextElement> obj = [stack_ pop];
  if (!([(id) obj isKindOfClass:[ComItextpdfTextListItem class]])) {
    (void) [stack_ pushWithId:obj];
    return;
  }
  if ([stack_ empty]) {
    [((id<ComItextpdfTextDocListener>) nil_chk(document_)) addWithComItextpdfTextElement:obj];
    return;
  }
  ComItextpdfTextListItem *item = (ComItextpdfTextListItem *) check_class_cast(obj, [ComItextpdfTextListItem class]);
  id<ComItextpdfTextElement> list = [stack_ pop];
  if (!([(id) list isKindOfClass:[ComItextpdfTextList class]])) {
    (void) [stack_ pushWithId:list];
    return;
  }
  [((ComItextpdfTextList *) nil_chk(((ComItextpdfTextList *) check_class_cast(list, [ComItextpdfTextList class])))) addWithComItextpdfTextElement:item];
  [((ComItextpdfTextListItem *) nil_chk(item)) adjustListSymbolFont];
  (void) [stack_ pushWithId:list];
}


#line 569
- (void)processImageWithComItextpdfTextImage:(ComItextpdfTextImage *)img
                             withJavaUtilMap:(id<JavaUtilMap>)attrs {
  
#line 570
  id<ComItextpdfTextHtmlSimpleparserImageProcessor> processor = (id<ComItextpdfTextHtmlSimpleparserImageProcessor>) check_protocol_cast([((id<JavaUtilMap>) nil_chk(providers_)) getWithId:ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_PROCESSOR_], @protocol(ComItextpdfTextHtmlSimpleparserImageProcessor));
  if (processor == nil || ![processor processWithComItextpdfTextImage:img withJavaUtilMap:attrs withComItextpdfTextHtmlSimpleparserChainedProperties:chain_ withComItextpdfTextDocListener:document_]) {
    NSString *align = [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:ComItextpdfTextHtmlHtmlTags_get_ALIGN_()];
    if (align != nil) {
      [self carriageReturn];
    }
    if (currentParagraph_ == nil) {
      currentParagraph_ = [self createParagraph];
    }
    [((ComItextpdfTextParagraph *) nil_chk(currentParagraph_)) addWithId:[[ComItextpdfTextChunk alloc] initWithComItextpdfTextImage:img withFloat:0 withFloat:0 withBoolean:YES]];
    [currentParagraph_ setAlignmentWithInt:[ComItextpdfTextHtmlHtmlUtilities alignmentValueWithNSString:align]];
    if (align != nil) {
      [self carriageReturn];
    }
  }
}


#line 592
- (void)processTable {
  
#line 593
  ComItextpdfTextHtmlSimpleparserTableWrapper *table = (ComItextpdfTextHtmlSimpleparserTableWrapper *) check_class_cast([((JavaUtilStack *) nil_chk(stack_)) pop], [ComItextpdfTextHtmlSimpleparserTableWrapper class]);
  ComItextpdfTextPdfPdfPTable *tb = [((ComItextpdfTextHtmlSimpleparserTableWrapper *) nil_chk(table)) createTable];
  [((ComItextpdfTextPdfPdfPTable *) nil_chk(tb)) setSplitRowsWithBoolean:YES];
  if ([stack_ empty])
#line 597
  [((id<ComItextpdfTextDocListener>) nil_chk(document_)) addWithComItextpdfTextElement:tb];
  else
#line 599
  [((id<ComItextpdfTextTextElementArray>) nil_chk(((id<ComItextpdfTextTextElementArray>) check_protocol_cast([stack_ peek], @protocol(ComItextpdfTextTextElementArray))))) addWithComItextpdfTextElement:tb];
}

- (void)processRow {
  
#line 607
  JavaUtilArrayList *row = [[JavaUtilArrayList alloc] init];
  JavaUtilArrayList *cellWidths = [[JavaUtilArrayList alloc] init];
  jboolean percentage = NO;
  jfloat width;
  jfloat totalWidth = 0;
  jint zeroWidth = 0;
  ComItextpdfTextHtmlSimpleparserTableWrapper *table = nil;
  while (YES) {
    id<ComItextpdfTextElement> obj = [((JavaUtilStack *) nil_chk(stack_)) pop];
    if ([(id) obj isKindOfClass:[ComItextpdfTextHtmlSimpleparserCellWrapper class]]) {
      ComItextpdfTextHtmlSimpleparserCellWrapper *cell = (ComItextpdfTextHtmlSimpleparserCellWrapper *) check_class_cast(obj, [ComItextpdfTextHtmlSimpleparserCellWrapper class]);
      width = [((ComItextpdfTextHtmlSimpleparserCellWrapper *) nil_chk(cell)) getWidth];
      [cellWidths addWithId:[[JavaLangFloat alloc] initWithFloat:width]];
      percentage |= [cell isPercentage];
      if (width == 0) {
        zeroWidth++;
      }
      else {
        totalWidth += width;
      }
      [row addWithId:[cell getCell]];
    }
    if ([(id) obj isKindOfClass:[ComItextpdfTextHtmlSimpleparserTableWrapper class]]) {
      table = (ComItextpdfTextHtmlSimpleparserTableWrapper *) check_class_cast(obj, [ComItextpdfTextHtmlSimpleparserTableWrapper class]);
      break;
    }
  }
  [((ComItextpdfTextHtmlSimpleparserTableWrapper *) nil_chk(table)) addRowWithJavaUtilList:row];
  if ([cellWidths size] > 0) {
    
#line 637
    totalWidth = 100 - totalWidth;
    [JavaUtilCollections reverseWithJavaUtilList:cellWidths];
    IOSFloatArray *widths = [IOSFloatArray arrayWithLength:[cellWidths size]];
    jboolean hasZero = NO;
    for (jint i = 0; i < widths->size_; i++) {
      *IOSFloatArray_GetRef(widths, i) = [((JavaLangFloat *) nil_chk([cellWidths getWithInt:i])) floatValue];
      if (IOSFloatArray_Get(widths, i) == 0 && percentage && zeroWidth > 0) {
        *IOSFloatArray_GetRef(widths, i) = totalWidth / zeroWidth;
      }
      if (IOSFloatArray_Get(widths, i) == 0) {
        hasZero = YES;
        break;
      }
    }
    if (!hasZero)
#line 652
    [table setColWidthsWithFloatArray:widths];
  }
  (void) [((JavaUtilStack *) nil_chk(stack_)) pushWithId:table];
}


#line 688
- (void)pushTableState {
  
#line 689
  (void) [((JavaUtilStack *) nil_chk(tableState_)) pushWithId:[IOSBooleanArray arrayWithBooleans:(jboolean[]){ pendingTR_, pendingTD_ } count:2]];
}


#line 697
- (void)popTableState {
  
#line 698
  IOSBooleanArray *state = [((JavaUtilStack *) nil_chk(tableState_)) pop];
  pendingTR_ = IOSBooleanArray_Get(nil_chk(state), 0);
  pendingTD_ = IOSBooleanArray_Get(state, 1);
}


#line 707
- (jboolean)isPendingTR {
  
#line 708
  return pendingTR_;
}


#line 715
- (void)setPendingTRWithBoolean:(jboolean)pendingTR {
  
#line 716
  self->pendingTR_ = pendingTR;
}


#line 723
- (jboolean)isPendingTD {
  
#line 724
  return pendingTD_;
}


#line 731
- (void)setPendingTDWithBoolean:(jboolean)pendingTD {
  
#line 732
  self->pendingTD_ = pendingTD;
}


#line 739
- (jboolean)isPendingLI {
  
#line 740
  return pendingLI_;
}


#line 747
- (void)setPendingLIWithBoolean:(jboolean)pendingLI {
  
#line 748
  self->pendingLI_ = pendingLI;
}


#line 755
- (jboolean)isInsidePRE {
  
#line 756
  return insidePRE_;
}


#line 763
- (void)setInsidePREWithBoolean:(jboolean)insidePRE {
  
#line 764
  self->insidePRE_ = insidePRE;
}


#line 771
- (jboolean)isSkipText {
  
#line 772
  return skipText_;
}


#line 779
- (void)setSkipTextWithBoolean:(jboolean)skipText {
  
#line 780
  self->skipText_ = skipText;
}


#line 795
+ (id<JavaUtilList>)parseToListWithJavaIoReader:(JavaIoReader *)reader
  withComItextpdfTextHtmlSimpleparserStyleSheet:(ComItextpdfTextHtmlSimpleparserStyleSheet *)style {
  
#line 797
  return [ComItextpdfTextHtmlSimpleparserHTMLWorker parseToListWithJavaIoReader:reader withComItextpdfTextHtmlSimpleparserStyleSheet:style withJavaUtilHashMap:nil];
}


#line 808
+ (id<JavaUtilList>)parseToListWithJavaIoReader:(JavaIoReader *)reader
  withComItextpdfTextHtmlSimpleparserStyleSheet:(ComItextpdfTextHtmlSimpleparserStyleSheet *)style
                            withJavaUtilHashMap:(JavaUtilHashMap *)providers {
  
#line 810
  return [ComItextpdfTextHtmlSimpleparserHTMLWorker parseToListWithJavaIoReader:reader withComItextpdfTextHtmlSimpleparserStyleSheet:style withJavaUtilMap:nil withJavaUtilHashMap:providers];
}


#line 823
+ (id<JavaUtilList>)parseToListWithJavaIoReader:(JavaIoReader *)reader
  withComItextpdfTextHtmlSimpleparserStyleSheet:(ComItextpdfTextHtmlSimpleparserStyleSheet *)style
                                withJavaUtilMap:(id<JavaUtilMap>)tags
                            withJavaUtilHashMap:(JavaUtilHashMap *)providers {
  
#line 825
  ComItextpdfTextHtmlSimpleparserHTMLWorker *worker = [[ComItextpdfTextHtmlSimpleparserHTMLWorker alloc] initWithComItextpdfTextDocListener:nil withJavaUtilMap:tags withComItextpdfTextHtmlSimpleparserStyleSheet:style];
  worker->document_ = worker;
  [worker setProvidersWithJavaUtilMap:providers];
  worker->objectList_ = [[JavaUtilArrayList alloc] init];
  [worker parseWithJavaIoReader:reader];
  return worker->objectList_;
}


#line 838
- (jboolean)addWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element {
  
#line 839
  [((id<JavaUtilList>) nil_chk(objectList_)) addWithId:element];
  return YES;
}


#line 846
- (void)close {
}


#line 852
- (jboolean)newPage {
  
#line 853
  return YES;
}


#line 859
- (void)open {
}


#line 865
- (void)resetPageCount {
}


#line 871
- (jboolean)setMarginMirroringWithBoolean:(jboolean)marginMirroring {
  
#line 872
  return NO;
}


#line 879
- (jboolean)setMarginMirroringTopBottomWithBoolean:(jboolean)marginMirroring {
  
#line 880
  return NO;
}


#line 886
- (jboolean)setMarginsWithFloat:(jfloat)marginLeft
                      withFloat:(jfloat)marginRight
                      withFloat:(jfloat)marginTop
                      withFloat:(jfloat)marginBottom {
  
#line 888
  return YES;
}


#line 894
- (void)setPageCountWithInt:(jint)pageN {
}


#line 900
- (jboolean)setPageSizeWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize {
  
#line 901
  return YES;
}


#line 911
- (void)setInterfacePropsWithJavaUtilHashMap:(JavaUtilHashMap *)providers {
  
#line 912
  [self setProvidersWithJavaUtilMap:providers];
}


#line 919
- (id<JavaUtilMap>)getInterfaceProps {
  
#line 920
  return providers_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextHtmlSimpleparserHTMLWorker *)other {
  [super copyAllFieldsTo:other];
  other->chain_ = chain_;
  other->currentParagraph_ = currentParagraph_;
  other->document_ = document_;
  other->factory_ = factory_;
  other->insidePRE_ = insidePRE_;
  other->objectList_ = objectList_;
  other->pendingLI_ = pendingLI_;
  other->pendingTD_ = pendingTD_;
  other->pendingTR_ = pendingTR_;
  other->providers_ = providers_;
  other->skipText_ = skipText_;
  other->stack_ = stack_;
  other->style_ = style_;
  other->tableState_ = tableState_;
  other->tags_ = tags_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextHtmlSimpleparserHTMLWorker class]) {
    ComItextpdfTextHtmlSimpleparserHTMLWorker_LOGGER_ =
#line 86
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextHtmlSimpleparserHTMLWorker class]]];
    ComItextpdfTextHtmlSimpleparserHTMLWorker_initialized = YES;
  }
}

+ (IOSObjectArray *)__annotations_setInterfacePropsWithJavaUtilHashMap_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_getInterfaceProps {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextDocListener:", "HTMLWorker", NULL, 0x1, NULL },
    { "initWithComItextpdfTextDocListener:withJavaUtilMap:withComItextpdfTextHtmlSimpleparserStyleSheet:", "HTMLWorker", NULL, 0x1, NULL },
    { "setSupportedTagsWithJavaUtilMap:", "setSupportedTags", "V", 0x1, NULL },
    { "setStyleSheetWithComItextpdfTextHtmlSimpleparserStyleSheet:", "setStyleSheet", "V", 0x1, NULL },
    { "parseWithJavaIoReader:", "parse", "V", 0x1, "Ljava.io.IOException;" },
    { "startDocument", NULL, "V", 0x1, NULL },
    { "startElementWithNSString:withJavaUtilMap:", "startElement", "V", 0x1, NULL },
    { "textWithNSString:", "text", "V", 0x1, NULL },
    { "endElementWithNSString:", "endElement", "V", 0x1, NULL },
    { "endDocument", NULL, "V", 0x1, NULL },
    { "newLine", NULL, "V", 0x1, NULL },
    { "carriageReturn", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "flushContent", NULL, "V", 0x1, NULL },
    { "pushToStackWithComItextpdfTextElement:", "pushToStack", "V", 0x1, NULL },
    { "updateChainWithNSString:withJavaUtilMap:", "updateChain", "V", 0x1, NULL },
    { "updateChainWithNSString:", "updateChain", "V", 0x1, NULL },
    { "setProvidersWithJavaUtilMap:", "setProviders", "V", 0x1, NULL },
    { "createChunkWithNSString:", "createChunk", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "createParagraph", NULL, "Lcom.itextpdf.text.Paragraph;", 0x1, NULL },
    { "createListWithNSString:", "createList", "Lcom.itextpdf.text.List;", 0x1, NULL },
    { "createListItem", NULL, "Lcom.itextpdf.text.ListItem;", 0x1, NULL },
    { "createLineSeparatorWithJavaUtilMap:", "createLineSeparator", "Lcom.itextpdf.text.pdf.draw.LineSeparator;", 0x1, NULL },
    { "createImageWithJavaUtilMap:", "createImage", "Lcom.itextpdf.text.Image;", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createCellWithNSString:", "createCell", "Lcom.itextpdf.text.html.simpleparser.CellWrapper;", 0x1, NULL },
    { "processLink", NULL, "V", 0x1, NULL },
    { "processList", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "processListItem", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "processImageWithComItextpdfTextImage:withJavaUtilMap:", "processImage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "processTable", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "processRow", NULL, "V", 0x1, NULL },
    { "pushTableState", NULL, "V", 0x1, NULL },
    { "popTableState", NULL, "V", 0x1, NULL },
    { "isPendingTR", NULL, "Z", 0x1, NULL },
    { "setPendingTRWithBoolean:", "setPendingTR", "V", 0x1, NULL },
    { "isPendingTD", NULL, "Z", 0x1, NULL },
    { "setPendingTDWithBoolean:", "setPendingTD", "V", 0x1, NULL },
    { "isPendingLI", NULL, "Z", 0x1, NULL },
    { "setPendingLIWithBoolean:", "setPendingLI", "V", 0x1, NULL },
    { "isInsidePRE", NULL, "Z", 0x1, NULL },
    { "setInsidePREWithBoolean:", "setInsidePRE", "V", 0x1, NULL },
    { "isSkipText", NULL, "Z", 0x1, NULL },
    { "setSkipTextWithBoolean:", "setSkipText", "V", 0x1, NULL },
    { "parseToListWithJavaIoReader:withComItextpdfTextHtmlSimpleparserStyleSheet:", "parseToList", "Ljava.util.List;", 0x9, "Ljava.io.IOException;" },
    { "parseToListWithJavaIoReader:withComItextpdfTextHtmlSimpleparserStyleSheet:withJavaUtilHashMap:", "parseToList", "Ljava.util.List;", 0x9, "Ljava.io.IOException;" },
    { "parseToListWithJavaIoReader:withComItextpdfTextHtmlSimpleparserStyleSheet:withJavaUtilMap:withJavaUtilHashMap:", "parseToList", "Ljava.util.List;", 0x9, "Ljava.io.IOException;" },
    { "addWithComItextpdfTextElement:", "add", "Z", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "close", NULL, "V", 0x1, NULL },
    { "newPage", NULL, "Z", 0x1, NULL },
    { "open", NULL, "V", 0x1, NULL },
    { "resetPageCount", NULL, "V", 0x1, NULL },
    { "setMarginMirroringWithBoolean:", "setMarginMirroring", "Z", 0x1, NULL },
    { "setMarginMirroringTopBottomWithBoolean:", "setMarginMirroringTopBottom", "Z", 0x1, NULL },
    { "setMarginsWithFloat:withFloat:withFloat:withFloat:", "setMargins", "Z", 0x1, NULL },
    { "setPageCountWithInt:", "setPageCount", "V", 0x1, NULL },
    { "setPageSizeWithComItextpdfTextRectangle:", "setPageSize", "Z", 0x1, NULL },
    { "setInterfacePropsWithJavaUtilHashMap:", "setInterfaceProps", "V", 0x1, NULL },
    { "getInterfaceProps", NULL, "Ljava.util.Map;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER_", NULL, 0xa, "Lcom.itextpdf.text.log.Logger;", &ComItextpdfTextHtmlSimpleparserHTMLWorker_LOGGER_,  },
    { "document_", NULL, 0x4, "Lcom.itextpdf.text.DocListener;", NULL,  },
    { "tags_", NULL, 0x4, "Ljava.util.Map;", NULL,  },
    { "style_", NULL, 0x2, "Lcom.itextpdf.text.html.simpleparser.StyleSheet;", NULL,  },
    { "stack_", NULL, 0x4, "Ljava.util.Stack;", NULL,  },
    { "currentParagraph_", NULL, 0x4, "Lcom.itextpdf.text.Paragraph;", NULL,  },
    { "chain_", NULL, 0x12, "Lcom.itextpdf.text.html.simpleparser.ChainedProperties;", NULL,  },
    { "IMG_PROVIDER_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_PROVIDER_,  },
    { "IMG_PROCESSOR_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_PROCESSOR_,  },
    { "IMG_STORE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_STORE_,  },
    { "IMG_BASEURL_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextHtmlSimpleparserHTMLWorker_IMG_BASEURL_,  },
    { "FONT_PROVIDER_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextHtmlSimpleparserHTMLWorker_FONT_PROVIDER_,  },
    { "LINK_PROVIDER_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextHtmlSimpleparserHTMLWorker_LINK_PROVIDER_,  },
    { "providers_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "factory_", NULL, 0x12, "Lcom.itextpdf.text.html.simpleparser.ElementFactory;", NULL,  },
    { "tableState_", NULL, 0x12, "Ljava.util.Stack;", NULL,  },
    { "pendingTR_", NULL, 0x2, "Z", NULL,  },
    { "pendingTD_", NULL, 0x2, "Z", NULL,  },
    { "pendingLI_", NULL, 0x2, "Z", NULL,  },
    { "insidePRE_", NULL, 0x2, "Z", NULL,  },
    { "skipText_", NULL, 0x4, "Z", NULL,  },
    { "objectList_", NULL, 0x4, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextHtmlSimpleparserHTMLWorker = { "HTMLWorker", "com.itextpdf.text.html.simpleparser", NULL, 0x1, 57, methods, 22, fields, 0, NULL};
  return &_ComItextpdfTextHtmlSimpleparserHTMLWorker;
}

@end
