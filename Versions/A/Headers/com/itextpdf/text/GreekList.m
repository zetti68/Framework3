//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/GreekList.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/GreekList.java"

#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/FontFactory.h"
#include "com/itextpdf/text/GreekList.h"
#include "com/itextpdf/text/List.h"
#include "com/itextpdf/text/ListItem.h"
#include "com/itextpdf/text/factories/GreekAlphabetFactory.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"


#line 56
@implementation ComItextpdfTextGreekList


#line 63
- (instancetype)init {
  if (self =
#line 64
  [super initWithBoolean:YES]) {
    
#line 65
    [self setGreekFont];
  }
  return self;
}


#line 72
- (instancetype)initWithInt:(jint)symbolIndent {
  if (self = [super initWithBoolean:YES withFloat:symbolIndent]) {
    
#line 74
    [self setGreekFont];
  }
  return self;
}


#line 82
- (instancetype)initWithBoolean:(jboolean)greeklower
                        withInt:(jint)symbolIndent {
  if (self =
#line 83
  [super initWithBoolean:YES withFloat:symbolIndent]) {
    
#line 84
    lowercase_ = greeklower;
    
#line 85
    [self setGreekFont];
  }
  return self;
}


#line 93
- (void)setGreekFont {
  
#line 94
  jfloat fontsize = [((ComItextpdfTextFont *) nil_chk([((ComItextpdfTextChunk *) nil_chk(symbol_)) getFont])) getSize];
  [symbol_ setFontWithComItextpdfTextFont:[ComItextpdfTextFontFactory getFontWithNSString:ComItextpdfTextFontFactory_get_SYMBOL_() withFloat:fontsize withInt:ComItextpdfTextFont_NORMAL]];
}


#line 107
- (jboolean)addWithComItextpdfTextElement:(id<ComItextpdfTextElement>)o {
  
#line 108
  if ([(id) o isKindOfClass:[ComItextpdfTextListItem class]]) {
    ComItextpdfTextListItem *item = (ComItextpdfTextListItem *) check_class_cast(o, [ComItextpdfTextListItem class]);
    ComItextpdfTextChunk *chunk = [[ComItextpdfTextChunk alloc] initWithNSString:preSymbol_ withComItextpdfTextFont:[((ComItextpdfTextChunk *) nil_chk(symbol_)) getFont]];
    [chunk setAttributesWithJavaUtilHashMap:[symbol_ getAttributes]];
    (void) [chunk appendWithNSString:[ComItextpdfTextFactoriesGreekAlphabetFactory getStringWithInt:first_ + [((JavaUtilArrayList *) nil_chk(list_)) size] withBoolean:lowercase_]];
    (void) [chunk appendWithNSString:postSymbol_];
    [((ComItextpdfTextListItem *) nil_chk(item)) setListSymbolWithComItextpdfTextChunk:chunk];
    [item setIndentationLeftWithFloat:symbolIndent_ withBoolean:autoindent_];
    [item setIndentationRightWithFloat:0];
    [list_ addWithId:item];
  }
  else
#line 118
  if ([(id) o isKindOfClass:[ComItextpdfTextList class]]) {
    ComItextpdfTextList *nested = (ComItextpdfTextList *) check_class_cast(o, [ComItextpdfTextList class]);
    [nested setIndentationLeftWithFloat:[((ComItextpdfTextList *) nil_chk(nested)) getIndentationLeft] + symbolIndent_];
    first_--;
    return [((JavaUtilArrayList *) nil_chk(list_)) addWithId:nested];
  }
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GreekList", NULL, 0x1, NULL },
    { "initWithInt:", "GreekList", NULL, 0x1, NULL },
    { "initWithBoolean:withInt:", "GreekList", NULL, 0x1, NULL },
    { "setGreekFont", NULL, "V", 0x4, NULL },
    { "addWithComItextpdfTextElement:", "add", "Z", 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextGreekList = { "GreekList", "com.itextpdf.text", NULL, 0x1, 5, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextGreekList;
}

@end
