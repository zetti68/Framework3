//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/List.java
//

#ifndef _ComItextpdfTextList_H_
#define _ComItextpdfTextList_H_

@class ComItextpdfTextAccessibleElementId;
@class ComItextpdfTextChunk;
@class ComItextpdfTextListItem;
@class ComItextpdfTextPdfPdfName;
@class ComItextpdfTextPdfPdfObject;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@protocol ComItextpdfTextElement;
@protocol ComItextpdfTextElementListener;
@protocol JavaUtilList;

#import "JreEmulation.h"
#include "com/itextpdf/text/TextElementArray.h"
#include "com/itextpdf/text/api/Indentable.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"

#define ComItextpdfTextList_ALPHABETICAL YES
#define ComItextpdfTextList_LOWERCASE YES
#define ComItextpdfTextList_NUMERICAL NO
#define ComItextpdfTextList_ORDERED YES
#define ComItextpdfTextList_UNORDERED NO
#define ComItextpdfTextList_UPPERCASE NO

@interface ComItextpdfTextList : NSObject < ComItextpdfTextTextElementArray, ComItextpdfTextApiIndentable, ComItextpdfTextPdfInterfacesIAccessibleElement > {
 @public
  JavaUtilArrayList *list_;
  jboolean numbered_;
  jboolean lettered_;
  jboolean lowercase_;
  jboolean autoindent_;
  jboolean alignindent_;
  jint first_;
  ComItextpdfTextChunk *symbol_;
  NSString *preSymbol_;
  NSString *postSymbol_;
  jfloat indentationLeft_;
  jfloat indentationRight_;
  jfloat symbolIndent_;
  ComItextpdfTextPdfPdfName *role_;
  JavaUtilHashMap *accessibleAttributes_;
  ComItextpdfTextAccessibleElementId *id__;
}

- (instancetype)init;

- (instancetype)initWithFloat:(jfloat)symbolIndent;

- (instancetype)initWithBoolean:(jboolean)numbered;

- (instancetype)initWithBoolean:(jboolean)numbered
                    withBoolean:(jboolean)lettered;

- (instancetype)initWithBoolean:(jboolean)numbered
                      withFloat:(jfloat)symbolIndent;

- (instancetype)initWithBoolean:(jboolean)numbered
                    withBoolean:(jboolean)lettered
                      withFloat:(jfloat)symbolIndent;

- (jboolean)processWithComItextpdfTextElementListener:(id<ComItextpdfTextElementListener>)listener;

- (jint)type;

- (id<JavaUtilList>)getChunks;

- (jboolean)addWithNSString:(NSString *)s;

- (jboolean)addWithComItextpdfTextElement:(id<ComItextpdfTextElement>)o;

- (void)normalizeIndentation;

- (void)setNumberedWithBoolean:(jboolean)numbered;

- (void)setLetteredWithBoolean:(jboolean)lettered;

- (void)setLowercaseWithBoolean:(jboolean)uppercase;

- (void)setAutoindentWithBoolean:(jboolean)autoindent;

- (void)setAlignindentWithBoolean:(jboolean)alignindent;

- (void)setFirstWithInt:(jint)first;

- (void)setListSymbolWithComItextpdfTextChunk:(ComItextpdfTextChunk *)symbol;

- (void)setListSymbolWithNSString:(NSString *)symbol;

- (void)setIndentationLeftWithFloat:(jfloat)indentation;

- (void)setIndentationRightWithFloat:(jfloat)indentation;

- (void)setSymbolIndentWithFloat:(jfloat)symbolIndent;

- (JavaUtilArrayList *)getItems;

- (jint)size;

- (jboolean)isEmpty;

- (jfloat)getTotalLeading;

- (jboolean)isNumbered;

- (jboolean)isLettered;

- (jboolean)isLowercase;

- (jboolean)isAutoindent;

- (jboolean)isAlignindent;

- (jint)getFirst;

- (ComItextpdfTextChunk *)getSymbol;

- (jfloat)getIndentationLeft;

- (jfloat)getIndentationRight;

- (jfloat)getSymbolIndent;

- (jboolean)isContent;

- (jboolean)isNestable;

- (NSString *)getPostSymbol;

- (void)setPostSymbolWithNSString:(NSString *)postSymbol;

- (NSString *)getPreSymbol;

- (void)setPreSymbolWithNSString:(NSString *)preSymbol;

- (ComItextpdfTextListItem *)getFirstItem;

- (ComItextpdfTextListItem *)getLastItem;

- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key;

- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value;

- (JavaUtilHashMap *)getAccessibleAttributes;

- (ComItextpdfTextPdfPdfName *)getRole;

- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role;

- (ComItextpdfTextAccessibleElementId *)getId;

- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_;

- (jboolean)isInline;

- (void)copyAllFieldsTo:(ComItextpdfTextList *)other;

@end

__attribute__((always_inline)) inline void ComItextpdfTextList_init() {}

J2OBJC_FIELD_SETTER(ComItextpdfTextList, list_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComItextpdfTextList, symbol_, ComItextpdfTextChunk *)
J2OBJC_FIELD_SETTER(ComItextpdfTextList, preSymbol_, NSString *)
J2OBJC_FIELD_SETTER(ComItextpdfTextList, postSymbol_, NSString *)
J2OBJC_FIELD_SETTER(ComItextpdfTextList, role_, ComItextpdfTextPdfPdfName *)
J2OBJC_FIELD_SETTER(ComItextpdfTextList, accessibleAttributes_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComItextpdfTextList, id__, ComItextpdfTextAccessibleElementId *)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextList, ORDERED, jboolean)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextList, UNORDERED, jboolean)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextList, NUMERICAL, jboolean)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextList, ALPHABETICAL, jboolean)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextList, UPPERCASE, jboolean)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextList, LOWERCASE, jboolean)

#endif // _ComItextpdfTextList_H_
