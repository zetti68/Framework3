//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Paragraph.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Paragraph.java"

#include "IOSClass.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/List.h"
#include "com/itextpdf/text/ListItem.h"
#include "com/itextpdf/text/Paragraph.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/TabSettings.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfPTable.h"
#include "java/lang/Deprecated.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"


#line 76
@implementation ComItextpdfTextParagraph


#line 116
- (instancetype)init {
  if (self =
#line 117
  [super init]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
  }
  return self;
}


#line 125
- (instancetype)initWithFloat:(jfloat)leading {
  if (self =
#line 126
  [super initWithFloat:leading]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
  }
  return self;
}


#line 134
- (instancetype)initWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk {
  if (self =
#line 135
  [super initWithComItextpdfTextChunk:chunk]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
  }
  return self;
}


#line 145
- (instancetype)initWithFloat:(jfloat)leading
     withComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk {
  if (self =
#line 146
  [super initWithFloat:leading withComItextpdfTextChunk:chunk]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
  }
  return self;
}


#line 154
- (instancetype)initWithNSString:(NSString *)string {
  if (self =
#line 155
  [super initWithNSString:string]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
  }
  return self;
}


#line 165
- (instancetype)initWithNSString:(NSString *)string
         withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  if (self =
#line 166
  [super initWithNSString:string withComItextpdfTextFont:font]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
  }
  return self;
}


#line 176
- (instancetype)initWithFloat:(jfloat)leading
                 withNSString:(NSString *)string {
  if (self =
#line 177
  [super initWithFloat:leading withNSString:string]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
  }
  return self;
}


#line 188
- (instancetype)initWithFloat:(jfloat)leading
                 withNSString:(NSString *)string
      withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  if (self =
#line 189
  [super initWithFloat:leading withNSString:string withComItextpdfTextFont:font]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
  }
  return self;
}


#line 197
- (instancetype)initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  if (self =
#line 198
  [super initWithComItextpdfTextPhrase:phrase]) {
    alignment_ =
#line 84
    ComItextpdfTextElement_ALIGN_UNDEFINED;
    firstLineIndent_ =
#line 93
    0;
    extraParagraphSpace_ =
#line 102
    0;
    keeptogether_ =
#line 105
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_P_();
    accessibleAttributes_ =
#line 108
    nil;
    id__ =
#line 109
    nil;
    
#line 199
    if ([phrase isKindOfClass:[ComItextpdfTextParagraph class]]) {
      ComItextpdfTextParagraph *p = (ComItextpdfTextParagraph *) check_class_cast(phrase, [ComItextpdfTextParagraph class]);
      [self setAlignmentWithInt:((ComItextpdfTextParagraph *) nil_chk(p))->alignment_];
      [self setIndentationLeftWithFloat:[p getIndentationLeft]];
      [self setIndentationRightWithFloat:[p getIndentationRight]];
      [self setFirstLineIndentWithFloat:[p getFirstLineIndent]];
      [self setSpacingAfterWithFloat:[p getSpacingAfter]];
      [self setSpacingBeforeWithFloat:[p getSpacingBefore]];
      [self setExtraParagraphSpaceWithFloat:[p getExtraParagraphSpace]];
      [self setRoleWithComItextpdfTextPdfPdfName:p->role_];
      id__ = [p getId];
      if (p->accessibleAttributes_ != nil)
#line 211
      accessibleAttributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:p->accessibleAttributes_];
    }
  }
  return self;
}


#line 219
- (ComItextpdfTextParagraph *)cloneShallowWithBoolean:(jboolean)spacingBefore {
  
#line 220
  ComItextpdfTextParagraph *copy_ = [[ComItextpdfTextParagraph alloc] init];
  [copy_ setFontWithComItextpdfTextFont:[self getFont]];
  [copy_ setAlignmentWithInt:[self getAlignment]];
  [copy_ setLeadingWithFloat:[self getLeading] withFloat:multipliedLeading_];
  [copy_ setIndentationLeftWithFloat:[self getIndentationLeft]];
  [copy_ setIndentationRightWithFloat:[self getIndentationRight]];
  [copy_ setFirstLineIndentWithFloat:[self getFirstLineIndent]];
  [copy_ setSpacingAfterWithFloat:[self getSpacingAfter]];
  if (spacingBefore)
#line 229
  [copy_ setSpacingBeforeWithFloat:[self getSpacingBefore]];
  [copy_ setExtraParagraphSpaceWithFloat:[self getExtraParagraphSpace]];
  [copy_ setRoleWithComItextpdfTextPdfPdfName:role_];
  copy_->id__ = [self getId];
  if (accessibleAttributes_ != nil)
#line 234
  copy_->accessibleAttributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:accessibleAttributes_];
  [copy_ setTabSettingsWithComItextpdfTextTabSettings:[self getTabSettings]];
  [copy_ setKeepTogetherWithBoolean:[self getKeepTogether]];
  return copy_;
}

- (id<JavaUtilList>)breakUp {
  
#line 245
  id<JavaUtilList> list = [[JavaUtilArrayList alloc] init];
  ComItextpdfTextParagraph *tmp = nil;
  for (id<ComItextpdfTextElement> __strong e in self) {
    if ([((id<ComItextpdfTextElement>) nil_chk(e)) type] == ComItextpdfTextElement_LIST || [e type] == ComItextpdfTextElement_PTABLE || [e type] == ComItextpdfTextElement_PARAGRAPH) {
      if (tmp != nil && [tmp size] > 0) {
        [tmp setSpacingAfterWithFloat:0];
        [list addWithId:tmp];
        tmp = [self cloneShallowWithBoolean:NO];
      }
      if ([list size] == 0) {
        {
          
#line 263
          ComItextpdfTextListItem *firstItem;
          
#line 255
          switch ([e type]) {
            case ComItextpdfTextElement_PTABLE:
            [((ComItextpdfTextPdfPdfPTable *) check_class_cast(e, [ComItextpdfTextPdfPdfPTable class])) setSpacingBeforeWithFloat:[self getSpacingBefore]];
            break;
            case ComItextpdfTextElement_PARAGRAPH:
            [((ComItextpdfTextParagraph *) check_class_cast(e, [ComItextpdfTextParagraph class])) setSpacingBeforeWithFloat:[self getSpacingBefore]];
            break;
            case ComItextpdfTextElement_LIST:
            firstItem = [((ComItextpdfTextList *) check_class_cast(e, [ComItextpdfTextList class])) getFirstItem];
            if (firstItem != nil) {
              [firstItem setSpacingBeforeWithFloat:[self getSpacingBefore]];
            }
            break;
            default:
            break;
          }
        }
      }
      
#line 272
      [list addWithId:e];
    }
    else {
      if (tmp == nil) {
        tmp = [self cloneShallowWithBoolean:[list size] == 0];
      }
      [((ComItextpdfTextParagraph *) nil_chk(tmp)) addWithId:e];
    }
  }
  if (tmp != nil && [tmp size] > 0) {
    [list addWithId:tmp];
  }
  if ([list size] != 0) {
    id<ComItextpdfTextElement> lastElement = [list getWithInt:[list size] - 1];
    {
      
#line 294
      ComItextpdfTextListItem *lastItem;
      
#line 286
      switch ([((id<ComItextpdfTextElement>) nil_chk(lastElement)) type]) {
        case ComItextpdfTextElement_PTABLE:
        [((ComItextpdfTextPdfPdfPTable *) check_class_cast(lastElement, [ComItextpdfTextPdfPdfPTable class])) setSpacingAfterWithFloat:[self getSpacingAfter]];
        break;
        case ComItextpdfTextElement_PARAGRAPH:
        [((ComItextpdfTextParagraph *) check_class_cast(lastElement, [ComItextpdfTextParagraph class])) setSpacingAfterWithFloat:[self getSpacingAfter]];
        break;
        case ComItextpdfTextElement_LIST:
        lastItem = [((ComItextpdfTextList *) check_class_cast(lastElement, [ComItextpdfTextList class])) getLastItem];
        if (lastItem != nil) {
          [lastItem setSpacingAfterWithFloat:[self getSpacingAfter]];
        }
        break;
        default:
        break;
      }
    }
  }
  
#line 303
  return list;
}


#line 314
- (jint)type {
  
#line 315
  return ComItextpdfTextElement_PARAGRAPH;
}


#line 327
- (jboolean)addWithId:(id<ComItextpdfTextElement>)o {
  
#line 328
  if ([(id) o isKindOfClass:[ComItextpdfTextList class]]) {
    ComItextpdfTextList *list = (ComItextpdfTextList *) check_class_cast(o, [ComItextpdfTextList class]);
    [list setIndentationLeftWithFloat:[((ComItextpdfTextList *) nil_chk(list)) getIndentationLeft] + indentationLeft_];
    [list setIndentationRightWithFloat:indentationRight_];
    return [super addWithId:list];
  }
  else if ([(id) o isKindOfClass:[ComItextpdfTextImage class]]) {
    [super addSpecialWithComItextpdfTextElement:o];
    return YES;
  }
  else if ([(id) o isKindOfClass:[ComItextpdfTextParagraph class]]) {
    [super addSpecialWithComItextpdfTextElement:o];
    return YES;
  }
  return [super addWithId:o];
}


#line 352
- (void)setAlignmentWithInt:(jint)alignment {
  
#line 353
  self->alignment_ = alignment;
}


#line 359
- (void)setIndentationLeftWithFloat:(jfloat)indentation {
  
#line 360
  self->indentationLeft_ = indentation;
}


#line 366
- (void)setIndentationRightWithFloat:(jfloat)indentation {
  
#line 367
  self->indentationRight_ = indentation;
}


#line 374
- (void)setFirstLineIndentWithFloat:(jfloat)firstLineIndent {
  
#line 375
  self->firstLineIndent_ = firstLineIndent;
}


#line 381
- (void)setSpacingBeforeWithFloat:(jfloat)spacing {
  
#line 382
  self->spacingBefore__ = spacing;
}


#line 388
- (void)setSpacingAfterWithFloat:(jfloat)spacing {
  
#line 389
  self->spacingAfter__ = spacing;
}


#line 397
- (void)setKeepTogetherWithBoolean:(jboolean)keeptogether {
  
#line 398
  self->keeptogether_ = keeptogether;
}


#line 406
- (jboolean)getKeepTogether {
  
#line 407
  return keeptogether_;
}


#line 417
- (jint)getAlignment {
  
#line 418
  return alignment_;
}


#line 424
- (jfloat)getIndentationLeft {
  
#line 425
  return indentationLeft_;
}


#line 431
- (jfloat)getIndentationRight {
  
#line 432
  return indentationRight_;
}


#line 439
- (jfloat)getFirstLineIndent {
  
#line 440
  return self->firstLineIndent_;
}


#line 446
- (jfloat)getSpacingBefore {
  
#line 447
  return spacingBefore__;
}


#line 453
- (jfloat)getSpacingAfter {
  
#line 454
  return spacingAfter__;
}


#line 461
- (jfloat)getExtraParagraphSpace {
  
#line 462
  return self->extraParagraphSpace_;
}


#line 469
- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace {
  
#line 470
  self->extraParagraphSpace_ = extraParagraphSpace;
}


#line 483
- (jfloat)spacingBefore {
  
#line 484
  return [self getSpacingBefore];
}


#line 495
- (jfloat)spacingAfter {
  
#line 496
  return spacingAfter__;
}


#line 499
- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 500
  if (accessibleAttributes_ != nil)
#line 501
  return [accessibleAttributes_ getWithId:key];
  else
#line 503
  return nil;
}


#line 506
- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 507
  if (accessibleAttributes_ == nil)
#line 508
  accessibleAttributes_ = [[JavaUtilHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(accessibleAttributes_)) putWithId:key withId:value];
}


#line 512
- (JavaUtilHashMap *)getAccessibleAttributes {
  
#line 513
  return accessibleAttributes_;
}


#line 516
- (ComItextpdfTextPdfPdfName *)getRole {
  
#line 517
  return role_;
}


#line 520
- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role {
  
#line 521
  self->role_ = role;
}


#line 524
- (ComItextpdfTextAccessibleElementId *)getId {
  
#line 525
  if (id__ == nil)
#line 526
  id__ = [[ComItextpdfTextAccessibleElementId alloc] init];
  return id__;
}


#line 530
- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_ {
  
#line 531
  self->id__ = id_;
}


#line 534
- (jboolean)isInline {
  
#line 535
  return NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextParagraph *)other {
  [super copyAllFieldsTo:other];
  other->accessibleAttributes_ = accessibleAttributes_;
  other->alignment_ = alignment_;
  other->extraParagraphSpace_ = extraParagraphSpace_;
  other->firstLineIndent_ = firstLineIndent_;
  other->id__ = id__;
  other->indentationLeft_ = indentationLeft_;
  other->indentationRight_ = indentationRight_;
  other->keeptogether_ = keeptogether_;
  other->role_ = role_;
  other->spacingAfter__ = spacingAfter__;
  other->spacingBefore__ = spacingBefore__;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (IOSObjectArray *)__annotations_spacingBefore {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_spacingAfter {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Paragraph", NULL, 0x1, NULL },
    { "initWithFloat:", "Paragraph", NULL, 0x1, NULL },
    { "initWithComItextpdfTextChunk:", "Paragraph", NULL, 0x1, NULL },
    { "initWithFloat:withComItextpdfTextChunk:", "Paragraph", NULL, 0x1, NULL },
    { "initWithNSString:", "Paragraph", NULL, 0x1, NULL },
    { "initWithNSString:withComItextpdfTextFont:", "Paragraph", NULL, 0x1, NULL },
    { "initWithFloat:withNSString:", "Paragraph", NULL, 0x1, NULL },
    { "initWithFloat:withNSString:withComItextpdfTextFont:", "Paragraph", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPhrase:", "Paragraph", NULL, 0x1, NULL },
    { "cloneShallowWithBoolean:", "cloneShallow", "Lcom.itextpdf.text.Paragraph;", 0x1, NULL },
    { "breakUp", NULL, "Ljava.util.List;", 0x1, NULL },
    { "type", NULL, "I", 0x1, NULL },
    { "addWithComItextpdfTextElement:", "add", "Z", 0x1, NULL },
    { "setAlignmentWithInt:", "setAlignment", "V", 0x1, NULL },
    { "setIndentationLeftWithFloat:", "setIndentationLeft", "V", 0x1, NULL },
    { "setIndentationRightWithFloat:", "setIndentationRight", "V", 0x1, NULL },
    { "setFirstLineIndentWithFloat:", "setFirstLineIndent", "V", 0x1, NULL },
    { "setSpacingBeforeWithFloat:", "setSpacingBefore", "V", 0x1, NULL },
    { "setSpacingAfterWithFloat:", "setSpacingAfter", "V", 0x1, NULL },
    { "setKeepTogetherWithBoolean:", "setKeepTogether", "V", 0x1, NULL },
    { "getKeepTogether", NULL, "Z", 0x1, NULL },
    { "getAlignment", NULL, "I", 0x1, NULL },
    { "getIndentationLeft", NULL, "F", 0x1, NULL },
    { "getIndentationRight", NULL, "F", 0x1, NULL },
    { "getFirstLineIndent", NULL, "F", 0x1, NULL },
    { "getSpacingBefore", NULL, "F", 0x1, NULL },
    { "getSpacingAfter", NULL, "F", 0x1, NULL },
    { "getExtraParagraphSpace", NULL, "F", 0x1, NULL },
    { "setExtraParagraphSpaceWithFloat:", "setExtraParagraphSpace", "V", 0x1, NULL },
    { "spacingBefore", NULL, "F", 0x1, NULL },
    { "spacingAfter", NULL, "F", 0x1, NULL },
    { "getAccessibleAttributeWithComItextpdfTextPdfPdfName:", "getAccessibleAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAccessibleAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAccessibleAttribute", "V", 0x1, NULL },
    { "getAccessibleAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getRole", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "setRoleWithComItextpdfTextPdfPdfName:", "setRole", "V", 0x1, NULL },
    { "getId", NULL, "Lcom.itextpdf.text.AccessibleElementId;", 0x1, NULL },
    { "setIdWithComItextpdfTextAccessibleElementId:", "setId", "V", 0x1, NULL },
    { "isInline", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfTextParagraph_serialVersionUID },
    { "alignment_", NULL, 0x4, "I", NULL,  },
    { "indentationLeft_", NULL, 0x4, "F", NULL,  },
    { "indentationRight_", NULL, 0x4, "F", NULL,  },
    { "firstLineIndent_", NULL, 0x2, "F", NULL,  },
    { "spacingBefore__", "spacingBefore", 0x4, "F", NULL,  },
    { "spacingAfter__", "spacingAfter", 0x4, "F", NULL,  },
    { "extraParagraphSpace_", NULL, 0x2, "F", NULL,  },
    { "keeptogether_", NULL, 0x4, "Z", NULL,  },
    { "role_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "accessibleAttributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "id__", "id", 0x2, "Lcom.itextpdf.text.AccessibleElementId;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextParagraph = { "Paragraph", "com.itextpdf.text", NULL, 0x1, 39, methods, 12, fields, 0, NULL};
  return &_ComItextpdfTextParagraph;
}

@end
