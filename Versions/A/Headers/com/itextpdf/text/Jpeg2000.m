//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Jpeg2000.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Jpeg2000.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BadElementException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Jpeg2000.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"


#line 62
@implementation ComItextpdfTextJpeg2000


#line 89
- (instancetype)initWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  if (self =
#line 90
  [super initWithComItextpdfTextImage:image]) {
    colorSpecBoxes_ =
#line 83
    nil;
    isJp2__ =
#line 84
    NO;
    
#line 91
    if ([image isKindOfClass:[ComItextpdfTextJpeg2000 class]]) {
      ComItextpdfTextJpeg2000 *jpeg2000 = (ComItextpdfTextJpeg2000 *) check_class_cast(image, [ComItextpdfTextJpeg2000 class]);
      numOfComps_ = ((ComItextpdfTextJpeg2000 *) nil_chk(jpeg2000))->numOfComps_;
      if (colorSpecBoxes_ != nil)
#line 95
      colorSpecBoxes_ = (JavaUtilArrayList *) check_class_cast([jpeg2000->colorSpecBoxes_ clone], [JavaUtilArrayList class]);
      isJp2__ = jpeg2000->isJp2__;
      if (bpcBoxData_ != nil)
#line 98
      bpcBoxData_ = [jpeg2000->bpcBoxData_ clone];
    }
  }
  return self;
}


#line 110
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url {
  if (self =
#line 111
  [super initWithJavaNetURL:url]) {
    colorSpecBoxes_ =
#line 83
    nil;
    isJp2__ =
#line 84
    NO;
    
#line 112
    [self processParameters];
  }
  return self;
}


#line 123
- (instancetype)initComItextpdfTextJpeg2000WithByteArray:(IOSByteArray *)img {
  if (self =
#line 124
  [super initWithJavaNetURL:(JavaNetURL *) check_class_cast(nil, [JavaNetURL class])]) {
    colorSpecBoxes_ =
#line 83
    nil;
    isJp2__ =
#line 84
    NO;
    
#line 125
    rawData_ = img;
    originalData_ = img;
    
#line 127
    [self processParameters];
  }
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)img {
  return [self initComItextpdfTextJpeg2000WithByteArray:
#line 123
img];
}


#line 140
- (instancetype)initWithByteArray:(IOSByteArray *)img
                        withFloat:(jfloat)width
                        withFloat:(jfloat)height {
  if (self =
#line 141
  [self initComItextpdfTextJpeg2000WithByteArray:img]) {
    
#line 142
    scaledWidth_ = width;
    
#line 143
    scaledHeight_ = height;
  }
  return self;
}


#line 146
- (jint)cio_readWithInt:(jint)n {
  
#line 147
  jint v = 0;
  for (jint i = n - 1; i >= 0; i--) {
    v += LShift32([((JavaIoInputStream *) nil_chk(inp_)) read], (LShift32(i, 3)));
  }
  return v;
}


#line 154
- (void)jp2_read_boxhdr {
  
#line 155
  boxLength_ = [self cio_readWithInt:4];
  boxType_ = [self cio_readWithInt:4];
  if (boxLength_ == 1) {
    if ([self cio_readWithInt:4] != 0) {
      @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"cannot.handle.box.sizes.higher.than.2.32" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    boxLength_ = [self cio_readWithInt:4];
    if (boxLength_ == 0)
#line 163
    @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unsupported.box.size.eq.eq.0" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  else if (boxLength_ == 0) {
    @throw [[ComItextpdfTextJpeg2000_ZeroBoxSizeException alloc] initWithComItextpdfTextJpeg2000:self withNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unsupported.box.size.eq.eq.0" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}


#line 174
- (void)processParameters {
  
#line 175
  type__ = ComItextpdfTextElement_JPEG2000;
  originalType_ = ComItextpdfTextImage_ORIGINAL_JPEG2000;
  inp_ = nil;
  @try {
    if (rawData_ == nil) {
      inp_ = [((JavaNetURL *) nil_chk(url_)) openStream];
    }
    else {
      inp_ = [[JavaIoByteArrayInputStream alloc] initWithByteArray:rawData_];
    }
    boxLength_ = [self cio_readWithInt:4];
    if (boxLength_ == (jint) 0x0000000c) {
      isJp2__ = YES;
      boxType_ = [self cio_readWithInt:4];
      if (ComItextpdfTextJpeg2000_JP2_JP != boxType_) {
        @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"expected.jp.marker" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
      if ((jint) 0x0d0a870a != [self cio_readWithInt:4]) {
        @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"error.with.jp.marker" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
      
#line 196
      [self jp2_read_boxhdr];
      if (ComItextpdfTextJpeg2000_JP2_FTYP != boxType_) {
        @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"expected.ftyp.marker" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
      [ComItextpdfTextUtilities skipWithJavaIoInputStream:inp_ withInt:boxLength_ - 8];
      [self jp2_read_boxhdr];
      do {
        if (ComItextpdfTextJpeg2000_JP2_JP2H != boxType_) {
          if (boxType_ == ComItextpdfTextJpeg2000_JP2_JP2C) {
            @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"expected.jp2h.marker" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
          }
          [ComItextpdfTextUtilities skipWithJavaIoInputStream:inp_ withInt:boxLength_ - 8];
          [self jp2_read_boxhdr];
        }
      }
      while (
#line 210
      ComItextpdfTextJpeg2000_JP2_JP2H != boxType_);
      [self jp2_read_boxhdr];
      if (ComItextpdfTextJpeg2000_JP2_IHDR != boxType_) {
        @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"expected.ihdr.marker" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
      scaledHeight_ = [self cio_readWithInt:4];
      [self setTopWithFloat:scaledHeight_];
      scaledWidth_ = [self cio_readWithInt:4];
      [self setRightWithFloat:scaledWidth_];
      numOfComps_ = [self cio_readWithInt:2];
      bpc_ = -1;
      bpc_ = [self cio_readWithInt:1];
      
#line 223
      [ComItextpdfTextUtilities skipWithJavaIoInputStream:inp_ withInt:3];
      
#line 225
      [self jp2_read_boxhdr];
      if (boxType_ == ComItextpdfTextJpeg2000_JP2_BPCC) {
        bpcBoxData_ = [IOSByteArray arrayWithLength:boxLength_ - 8];
        [((JavaIoInputStream *) nil_chk(inp_)) readWithByteArray:bpcBoxData_ withInt:0 withInt:boxLength_ - 8];
      }
      else
#line 229
      if (boxType_ == ComItextpdfTextJpeg2000_JP2_COLR) {
        do {
          if (colorSpecBoxes_ == nil)
#line 232
          colorSpecBoxes_ = [[JavaUtilArrayList alloc] init];
          [((JavaUtilArrayList *) nil_chk(colorSpecBoxes_)) addWithId:[self jp2_read_colr]];
          @try {
            [self jp2_read_boxhdr];
          }
          @catch (
#line 236
          ComItextpdfTextJpeg2000_ZeroBoxSizeException *ioe) {
          }
        }
        while (ComItextpdfTextJpeg2000_JP2_COLR == boxType_);
      }
    }
    else if (boxLength_ == (jint) 0xff4fff51) {
      [ComItextpdfTextUtilities skipWithJavaIoInputStream:inp_ withInt:4];
      jint x1 = [self cio_readWithInt:4];
      jint y1 = [self cio_readWithInt:4];
      jint x0 = [self cio_readWithInt:4];
      jint y0 = [self cio_readWithInt:4];
      [ComItextpdfTextUtilities skipWithJavaIoInputStream:inp_ withInt:16];
      colorspace_ = [self cio_readWithInt:2];
      bpc_ = 8;
      scaledHeight_ = y1 - y0;
      [self setTopWithFloat:scaledHeight_];
      scaledWidth_ = x1 - x0;
      [self setRightWithFloat:scaledWidth_];
    }
    else {
      @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"not.a.valid.jpeg2000.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  @finally {
    if (inp_ != nil) {
      @try {
        
#line 262
        [inp_ close];
      }
      @catch (
#line 262
      JavaLangException *e) {
      }
      
#line 263
      inp_ = nil;
    }
  }
  plainWidth_ = [self getWidth];
  plainHeight_ = [self getHeight];
}


#line 270
- (ComItextpdfTextJpeg2000_ColorSpecBox *)jp2_read_colr {
  
#line 271
  jint readBytes = 8;
  ComItextpdfTextJpeg2000_ColorSpecBox *colr = [[ComItextpdfTextJpeg2000_ColorSpecBox alloc] init];
  for (jint i = 0; i < 3; i++) {
    [colr addWithId:[JavaLangInteger valueOfWithInt:[self cio_readWithInt:1]]];
    readBytes++;
  }
  if ([colr getMeth] == 1) {
    [colr addWithId:[JavaLangInteger valueOfWithInt:[self cio_readWithInt:4]]];
    readBytes += 4;
  }
  else {
    
#line 281
    [colr addWithId:[JavaLangInteger valueOfWithInt:0]];
  }
  
#line 284
  if (boxLength_ - readBytes > 0) {
    IOSByteArray *colorProfile = [IOSByteArray arrayWithLength:boxLength_ - readBytes];
    [((JavaIoInputStream *) nil_chk(inp_)) readWithByteArray:colorProfile withInt:0 withInt:boxLength_ - readBytes];
    [colr setColorProfileWithByteArray:colorProfile];
  }
  return colr;
}


#line 292
- (jint)getNumOfComps {
  
#line 293
  return numOfComps_;
}


#line 296
- (IOSByteArray *)getBpcBoxData {
  
#line 297
  return bpcBoxData_;
}


#line 300
- (JavaUtilArrayList *)getColorSpecBoxes {
  
#line 301
  return colorSpecBoxes_;
}


#line 307
- (jboolean)isJp2 {
  
#line 308
  return isJp2__;
}

- (void)copyAllFieldsTo:(ComItextpdfTextJpeg2000 *)other {
  [super copyAllFieldsTo:other];
  other->boxLength_ = boxLength_;
  other->boxType_ = boxType_;
  other->bpcBoxData_ = bpcBoxData_;
  other->colorSpecBoxes_ = colorSpecBoxes_;
  other->inp_ = inp_;
  other->isJp2__ = isJp2__;
  other->numOfComps_ = numOfComps_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextImage:", "Jpeg2000", NULL, 0x0, NULL },
    { "initWithJavaNetURL:", "Jpeg2000", NULL, 0x1, "Lcom.itextpdf.text.BadElementException;Ljava.io.IOException;" },
    { "initWithByteArray:", "Jpeg2000", NULL, 0x1, "Lcom.itextpdf.text.BadElementException;Ljava.io.IOException;" },
    { "initWithByteArray:withFloat:withFloat:", "Jpeg2000", NULL, 0x1, "Lcom.itextpdf.text.BadElementException;Ljava.io.IOException;" },
    { "cio_readWithInt:", "cio_read", "I", 0x2, "Ljava.io.IOException;" },
    { "jp2_read_boxhdr", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "processParameters", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "jp2_read_colr", NULL, "Lcom.itextpdf.text.Jpeg2000$ColorSpecBox;", 0x2, "Ljava.io.IOException;" },
    { "getNumOfComps", NULL, "I", 0x1, NULL },
    { "getBpcBoxData", NULL, "[B", 0x1, NULL },
    { "getColorSpecBoxes", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "isJp2", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "JP2_JP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_JP },
    { "JP2_IHDR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_IHDR },
    { "JPIP_JPIP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JPIP_JPIP },
    { "JP2_FTYP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_FTYP },
    { "JP2_JP2H_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_JP2H },
    { "JP2_COLR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_COLR },
    { "JP2_JP2C_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_JP2C },
    { "JP2_URL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_URL },
    { "JP2_DBTL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_DBTL },
    { "JP2_BPCC_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_BPCC },
    { "JP2_JP2_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextJpeg2000_JP2_JP2 },
    { "inp_", NULL, 0x0, "Ljava.io.InputStream;", NULL,  },
    { "boxLength_", NULL, 0x0, "I", NULL,  },
    { "boxType_", NULL, 0x0, "I", NULL,  },
    { "numOfComps_", NULL, 0x0, "I", NULL,  },
    { "colorSpecBoxes_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "isJp2__", "isJp2", 0x0, "Z", NULL,  },
    { "bpcBoxData_", NULL, 0x0, "[B", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextJpeg2000 = { "Jpeg2000", "com.itextpdf.text", NULL, 0x1, 12, methods, 18, fields, 0, NULL};
  return &_ComItextpdfTextJpeg2000;
}

@end


#line 311
@implementation ComItextpdfTextJpeg2000_ColorSpecBox


#line 314
- (jint)getMeth {
  
#line 315
  return [((JavaLangInteger *) nil_chk([self getWithInt:0])) intValue];
}


#line 318
- (jint)getPrec {
  
#line 319
  return [((JavaLangInteger *) nil_chk([self getWithInt:1])) intValue];
}


#line 322
- (jint)getApprox {
  
#line 323
  return [((JavaLangInteger *) nil_chk([self getWithInt:2])) intValue];
}


#line 326
- (jint)getEnumCs {
  
#line 327
  return [((JavaLangInteger *) nil_chk([self getWithInt:3])) intValue];
}


#line 330
- (IOSByteArray *)getColorProfile {
  
#line 331
  return colorProfile_;
}


#line 334
- (void)setColorProfileWithByteArray:(IOSByteArray *)colorProfile {
  
#line 335
  self->colorProfile_ = colorProfile;
}

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextJpeg2000_ColorSpecBox *)other {
  [super copyAllFieldsTo:other];
  other->colorProfile_ = colorProfile_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getMeth", NULL, "I", 0x1, NULL },
    { "getPrec", NULL, "I", 0x1, NULL },
    { "getApprox", NULL, "I", 0x1, NULL },
    { "getEnumCs", NULL, "I", 0x1, NULL },
    { "getColorProfile", NULL, "[B", 0x1, NULL },
    { "setColorProfileWithByteArray:", "setColorProfile", "V", 0x0, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "colorProfile_", NULL, 0x2, "[B", NULL,  },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Integer;"};
  static const J2ObjcClassInfo _ComItextpdfTextJpeg2000_ColorSpecBox = { "ColorSpecBox", "com.itextpdf.text", "Jpeg2000", 0x9, 7, methods, 1, fields, 1, superclass_type_args};
  return &_ComItextpdfTextJpeg2000_ColorSpecBox;
}

@end


#line 339
@implementation ComItextpdfTextJpeg2000_ZeroBoxSizeException


#line 340
- (instancetype)initWithComItextpdfTextJpeg2000:(ComItextpdfTextJpeg2000 *)outer$ {
  return
#line 341
  [super init];
}


#line 344
- (instancetype)initWithComItextpdfTextJpeg2000:(ComItextpdfTextJpeg2000 *)outer$
                                   withNSString:(NSString *)s {
  return [super initWithNSString:s];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextJpeg2000:", "ZeroBoxSizeException", NULL, 0x1, NULL },
    { "initWithComItextpdfTextJpeg2000:withNSString:", "ZeroBoxSizeException", NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextJpeg2000_ZeroBoxSizeException = { "ZeroBoxSizeException", "com.itextpdf.text", "Jpeg2000", 0x2, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextJpeg2000_ZeroBoxSizeException;
}

@end
