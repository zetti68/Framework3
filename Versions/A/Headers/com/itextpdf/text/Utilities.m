//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Utilities.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Utilities.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/PRTokeniser.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URI.h"
#include "java/net/URL.h"
#include "java/util/Collections.h"
#include "java/util/Hashtable.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"


#line 67
@implementation ComItextpdfTextUtilities


#line 79
+ (id<JavaUtilSet>)getKeySetWithJavaUtilHashtable:(JavaUtilHashtable *)table {
  
#line 80
  return table == nil ? [JavaUtilCollections emptySet] : [table keySet];
}


#line 92
+ (IOSObjectArray *)addToArrayWithNSObjectArray2:(IOSObjectArray *)original
                               withNSObjectArray:(IOSObjectArray *)item {
  
#line 93
  if (original == nil) {
    original = [IOSObjectArray arrayWithLength:1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]]];
    IOSObjectArray_Set(original, 0, item);
    return original;
  }
  else {
    
#line 98
    IOSObjectArray *original2 = [IOSObjectArray arrayWithLength:original->size_ + 1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSObject class]]]];
    [JavaLangSystem arraycopyWithId:original withInt:0 withId:original2 withInt:0 withInt:original->size_];
    IOSObjectArray_Set(original2, original->size_, item);
    return original2;
  }
}

+ (jboolean)checkTrueOrFalseWithJavaUtilProperties:(JavaUtilProperties *)attributes
                                      withNSString:(NSString *)key {
  
#line 112
  return [@"true" equalsIgnoreCase:[((JavaUtilProperties *) nil_chk(attributes)) getPropertyWithNSString:key]];
}


#line 120
+ (NSString *)unEscapeURLWithNSString:(NSString *)src {
  
#line 121
  JavaLangStringBuffer *bf = [[JavaLangStringBuffer alloc] init];
  IOSCharArray *s = [((NSString *) nil_chk(src)) toCharArray];
  for (jint k = 0; k < ((IOSCharArray *) nil_chk(s))->size_; ++k) {
    jchar c = IOSCharArray_Get(s, k);
    if (c == '%') {
      if (k + 2 >= s->size_) {
        (void) [bf appendWithChar:c];
        continue;
      }
      jint a0 = [ComItextpdfTextPdfPRTokeniser getHexWithInt:IOSCharArray_Get(s, k + 1)];
      jint a1 = [ComItextpdfTextPdfPRTokeniser getHexWithInt:IOSCharArray_Get(s, k + 2)];
      if (a0 < 0 || a1 < 0) {
        (void) [bf appendWithChar:c];
        continue;
      }
      (void) [bf appendWithChar:(jchar) (a0 * 16 + a1)];
      k += 2;
    }
    else
#line 140
    (void) [bf appendWithChar:c];
  }
  return [bf description];
}


#line 156
+ (JavaNetURL *)toURLWithNSString:(NSString *)filename {
  
#line 157
  @try {
    return [[JavaNetURL alloc] initWithNSString:filename];
  }
  @catch (JavaLangException *e) {
    return [((JavaNetURI *) nil_chk([((JavaIoFile *) [[JavaIoFile alloc] initWithNSString:filename]) toURI])) toURL];
  }
}


#line 176
+ (void)skipWithJavaIoInputStream:(JavaIoInputStream *)is
                          withInt:(jint)size {
  
#line 177
  jlong n;
  while (size > 0) {
    n = [((JavaIoInputStream *) nil_chk(is)) skipWithLong:size];
    if (n <= 0)
#line 181
    break;
    size -= n;
  }
}


#line 192
+ (jfloat)millimetersToPointsWithFloat:(jfloat)value {
  
#line 193
  return [ComItextpdfTextUtilities inchesToPointsWithFloat:[ComItextpdfTextUtilities millimetersToInchesWithFloat:value]];
}


#line 202
+ (jfloat)millimetersToInchesWithFloat:(jfloat)value {
  
#line 203
  return value / 25.4f;
}


#line 212
+ (jfloat)pointsToMillimetersWithFloat:(jfloat)value {
  
#line 213
  return [ComItextpdfTextUtilities inchesToMillimetersWithFloat:[ComItextpdfTextUtilities pointsToInchesWithFloat:value]];
}


#line 222
+ (jfloat)pointsToInchesWithFloat:(jfloat)value {
  
#line 223
  return value / 72.0f;
}


#line 232
+ (jfloat)inchesToMillimetersWithFloat:(jfloat)value {
  
#line 233
  return value * 25.4f;
}


#line 242
+ (jfloat)inchesToPointsWithFloat:(jfloat)value {
  
#line 243
  return value * 72.0f;
}


#line 253
+ (jboolean)isSurrogateHighWithChar:(jchar)c {
  
#line 254
  return c >= 0xd800 && c <= 0xdbff;
}


#line 264
+ (jboolean)isSurrogateLowWithChar:(jchar)c {
  
#line 265
  return c >= 0xdc00 && c <= 0xdfff;
}


#line 277
+ (jboolean)isSurrogatePairWithNSString:(NSString *)text
                                withInt:(jint)idx {
  
#line 278
  if (idx < 0 || idx > ((jint) [((NSString *) nil_chk(text)) length]) - 2)
#line 279
  return NO;
  return [ComItextpdfTextUtilities isSurrogateHighWithChar:[((NSString *) nil_chk(text)) charAtWithInt:idx]] && [ComItextpdfTextUtilities isSurrogateLowWithChar:[text charAtWithInt:idx + 1]];
}


#line 292
+ (jboolean)isSurrogatePairWithCharArray:(IOSCharArray *)text
                                 withInt:(jint)idx {
  
#line 293
  if (idx < 0 || idx > ((IOSCharArray *) nil_chk(text))->size_ - 2)
#line 294
  return NO;
  return [ComItextpdfTextUtilities isSurrogateHighWithChar:IOSCharArray_Get(nil_chk(text), idx)] && [ComItextpdfTextUtilities isSurrogateLowWithChar:IOSCharArray_Get(text, idx + 1)];
}


#line 306
+ (jint)convertToUtf32WithChar:(jchar)highSurrogate
                      withChar:(jchar)lowSurrogate {
  
#line 307
  return (highSurrogate - (jint) 0xd800) * (jint) 0x400 + lowSurrogate - (jint) 0xdc00 + (jint) 0x10000;
}


#line 317
+ (jint)convertToUtf32WithCharArray:(IOSCharArray *)text
                            withInt:(jint)idx {
  
#line 318
  return (IOSCharArray_Get(nil_chk(text), idx) - (jint) 0xd800) * (jint) 0x400 + IOSCharArray_Get(text, idx + 1) - (jint) 0xdc00 + (jint) 0x10000;
}


#line 328
+ (jint)convertToUtf32WithNSString:(NSString *)text
                           withInt:(jint)idx {
  
#line 329
  return ([((NSString *) nil_chk(text)) charAtWithInt:idx] - (jint) 0xd800) * (jint) 0x400 + [text charAtWithInt:idx + 1] - (jint) 0xdc00 + (jint) 0x10000;
}


#line 338
+ (NSString *)convertFromUtf32WithInt:(jint)codePoint {
  
#line 339
  if (codePoint < (jint) 0x10000)
#line 340
  return [JavaLangCharacter toStringWithChar:(jchar) codePoint];
  codePoint -= (jint) 0x10000;
  return [NSString stringWithCharacters:[IOSCharArray arrayWithChars:(jchar[]){ (jchar) (codePoint / (jint) 0x400 + (jint) 0xd800), (jchar) (codePoint % (jint) 0x400 + (jint) 0xdc00) } count:2]];
}


#line 352
+ (NSString *)readFileToStringWithNSString:(NSString *)path {
  
#line 353
  return [ComItextpdfTextUtilities readFileToStringWithJavaIoFile:[[JavaIoFile alloc] initWithNSString:path]];
}


#line 363
+ (NSString *)readFileToStringWithJavaIoFile:(JavaIoFile *)file {
  
#line 364
  IOSByteArray *jsBytes = [IOSByteArray arrayWithLength:(jint) [((JavaIoFile *) nil_chk(file)) length]];
  JavaIoFileInputStream *f = [[JavaIoFileInputStream alloc] initWithJavaIoFile:file];
  [f readWithByteArray:jsBytes];
  return [NSString stringWithBytes:jsBytes];
}


#line 375
+ (NSString *)convertToHexWithByteArray:(IOSByteArray *)bytes {
  
#line 376
  ComItextpdfTextPdfByteBuffer *buf = [[ComItextpdfTextPdfByteBuffer alloc] init];
  {
    IOSByteArray *a__ =
#line 377
    bytes;
    jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte b = *b__++;
      
#line 378
      (void) [buf appendHexWithByte:b];
    }
  }
  
#line 380
  return [((NSString *) nil_chk([ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:[buf toByteArray] withNSString:nil])) uppercaseString];
}

- (instancetype)init {
  return [super init];
}

+ (IOSObjectArray *)__annotations_getKeySetWithJavaUtilHashtable_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getKeySetWithJavaUtilHashtable:", "getKeySet", "Ljava.util.Set;", 0x9, NULL },
    { "addToArrayWithNSObjectArray2:withNSObjectArray:", "addToArray", "[[Ljava.lang.Object;", 0x9, NULL },
    { "checkTrueOrFalseWithJavaUtilProperties:withNSString:", "checkTrueOrFalse", "Z", 0x9, NULL },
    { "unEscapeURLWithNSString:", "unEscapeURL", "Ljava.lang.String;", 0x9, NULL },
    { "toURLWithNSString:", "toURL", "Ljava.net.URL;", 0x9, "Ljava.net.MalformedURLException;" },
    { "skipWithJavaIoInputStream:withInt:", "skip", "V", 0x9, "Ljava.io.IOException;" },
    { "millimetersToPointsWithFloat:", "millimetersToPoints", "F", 0x19, NULL },
    { "millimetersToInchesWithFloat:", "millimetersToInches", "F", 0x19, NULL },
    { "pointsToMillimetersWithFloat:", "pointsToMillimeters", "F", 0x19, NULL },
    { "pointsToInchesWithFloat:", "pointsToInches", "F", 0x19, NULL },
    { "inchesToMillimetersWithFloat:", "inchesToMillimeters", "F", 0x19, NULL },
    { "inchesToPointsWithFloat:", "inchesToPoints", "F", 0x19, NULL },
    { "isSurrogateHighWithChar:", "isSurrogateHigh", "Z", 0x9, NULL },
    { "isSurrogateLowWithChar:", "isSurrogateLow", "Z", 0x9, NULL },
    { "isSurrogatePairWithNSString:withInt:", "isSurrogatePair", "Z", 0x9, NULL },
    { "isSurrogatePairWithCharArray:withInt:", "isSurrogatePair", "Z", 0x9, NULL },
    { "convertToUtf32WithChar:withChar:", "convertToUtf32", "I", 0x9, NULL },
    { "convertToUtf32WithCharArray:withInt:", "convertToUtf32", "I", 0x9, NULL },
    { "convertToUtf32WithNSString:withInt:", "convertToUtf32", "I", 0x9, NULL },
    { "convertFromUtf32WithInt:", "convertFromUtf32", "Ljava.lang.String;", 0x9, NULL },
    { "readFileToStringWithNSString:", "readFileToString", "Ljava.lang.String;", 0x9, "Ljava.io.IOException;" },
    { "readFileToStringWithJavaIoFile:", "readFileToString", "Ljava.lang.String;", 0x9, "Ljava.io.IOException;" },
    { "convertToHexWithByteArray:", "convertToHex", "Ljava.lang.String;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextUtilities = { "Utilities", "com.itextpdf.text", NULL, 0x1, 24, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextUtilities;
}

@end
