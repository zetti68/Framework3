//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/ZapfDingbatsNumberList.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/ZapfDingbatsNumberList.java"

#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/FontFactory.h"
#include "com/itextpdf/text/List.h"
#include "com/itextpdf/text/ListItem.h"
#include "com/itextpdf/text/ZapfDingbatsNumberList.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"


#line 55
@implementation ComItextpdfTextZapfDingbatsNumberList


#line 66
- (instancetype)initWithInt:(jint)type {
  if (self =
#line 67
  [super initWithBoolean:YES]) {
    
#line 68
    self->type_ = type;
    
#line 69
    jfloat fontsize = [((ComItextpdfTextFont *) nil_chk([((ComItextpdfTextChunk *) nil_chk(symbol_)) getFont])) getSize];
    
#line 70
    [symbol_ setFontWithComItextpdfTextFont:[ComItextpdfTextFontFactory getFontWithNSString:ComItextpdfTextFontFactory_get_ZAPFDINGBATS_() withFloat:fontsize withInt:ComItextpdfTextFont_NORMAL]];
    
#line 71
    postSymbol_ = @" ";
  }
  return self;
}


#line 79
- (instancetype)initWithInt:(jint)type
                    withInt:(jint)symbolIndent {
  if (self =
#line 80
  [super initWithBoolean:YES withFloat:symbolIndent]) {
    
#line 81
    self->type_ = type;
    
#line 82
    jfloat fontsize = [((ComItextpdfTextFont *) nil_chk([((ComItextpdfTextChunk *) nil_chk(symbol_)) getFont])) getSize];
    
#line 83
    [symbol_ setFontWithComItextpdfTextFont:[ComItextpdfTextFontFactory getFontWithNSString:ComItextpdfTextFontFactory_get_ZAPFDINGBATS_() withFloat:fontsize withInt:ComItextpdfTextFont_NORMAL]];
    
#line 84
    postSymbol_ = @" ";
  }
  return self;
}


#line 92
- (void)setTypeWithInt:(jint)type {
  
#line 93
  self->type_ = type;
}


#line 101
- (jint)getType {
  
#line 102
  return type_;
}


#line 112
- (jboolean)addWithComItextpdfTextElement:(id<ComItextpdfTextElement>)o {
  
#line 113
  if ([(id) o isKindOfClass:[ComItextpdfTextListItem class]]) {
    ComItextpdfTextListItem *item = (ComItextpdfTextListItem *) check_class_cast(o, [ComItextpdfTextListItem class]);
    ComItextpdfTextChunk *chunk = [[ComItextpdfTextChunk alloc] initWithNSString:preSymbol_ withComItextpdfTextFont:[((ComItextpdfTextChunk *) nil_chk(symbol_)) getFont]];
    [chunk setAttributesWithJavaUtilHashMap:[symbol_ getAttributes]];
    switch (type_) {
      case 0:
      (void) [chunk appendWithNSString:[NSString valueOfChar:(jchar) (first_ + [((JavaUtilArrayList *) nil_chk(list_)) size] + 171)]];
      break;
      case 1:
      (void) [chunk appendWithNSString:[NSString valueOfChar:(jchar) (first_ + [((JavaUtilArrayList *) nil_chk(list_)) size] + 181)]];
      break;
      case 2:
      (void) [chunk appendWithNSString:[NSString valueOfChar:(jchar) (first_ + [((JavaUtilArrayList *) nil_chk(list_)) size] + 191)]];
      break;
      default:
      (void) [chunk appendWithNSString:[NSString valueOfChar:(jchar) (first_ + [((JavaUtilArrayList *) nil_chk(list_)) size] + 201)]];
    }
    (void) [chunk appendWithNSString:postSymbol_];
    [((ComItextpdfTextListItem *) nil_chk(item)) setListSymbolWithComItextpdfTextChunk:chunk];
    [item setIndentationLeftWithFloat:symbolIndent_ withBoolean:autoindent_];
    [item setIndentationRightWithFloat:0];
    [((JavaUtilArrayList *) nil_chk(list_)) addWithId:item];
  }
  else
#line 135
  if ([(id) o isKindOfClass:[ComItextpdfTextList class]]) {
    ComItextpdfTextList *nested = (ComItextpdfTextList *) check_class_cast(o, [ComItextpdfTextList class]);
    [nested setIndentationLeftWithFloat:[((ComItextpdfTextList *) nil_chk(nested)) getIndentationLeft] + symbolIndent_];
    first_--;
    return [((JavaUtilArrayList *) nil_chk(list_)) addWithId:nested];
  }
  return NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextZapfDingbatsNumberList *)other {
  [super copyAllFieldsTo:other];
  other->type_ = type_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "ZapfDingbatsNumberList", NULL, 0x1, NULL },
    { "initWithInt:withInt:", "ZapfDingbatsNumberList", NULL, 0x1, NULL },
    { "setTypeWithInt:", "setType", "V", 0x1, NULL },
    { "getType", NULL, "I", 0x1, NULL },
    { "addWithComItextpdfTextElement:", "add", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextZapfDingbatsNumberList = { "ZapfDingbatsNumberList", "com.itextpdf.text", NULL, 0x1, 5, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextZapfDingbatsNumberList;
}

@end
