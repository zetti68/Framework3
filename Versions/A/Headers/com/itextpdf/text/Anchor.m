//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Anchor.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Anchor.java"

#include "com/itextpdf/text/Anchor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ElementListener.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/Phrase.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"


#line 70
@implementation ComItextpdfTextAnchor


#line 88
- (instancetype)init {
  if (self =
#line 89
  [super initWithFloat:16]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
  }
  return self;
}


#line 98
- (instancetype)initWithFloat:(jfloat)leading {
  if (self =
#line 99
  [super initWithFloat:leading]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
  }
  return self;
}


#line 107
- (instancetype)initWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk {
  if (self =
#line 108
  [super initWithComItextpdfTextChunk:chunk]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
  }
  return self;
}


#line 116
- (instancetype)initWithNSString:(NSString *)string {
  if (self =
#line 117
  [super initWithNSString:string]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
  }
  return self;
}


#line 127
- (instancetype)initWithNSString:(NSString *)string
         withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  if (self =
#line 128
  [super initWithNSString:string withComItextpdfTextFont:font]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
  }
  return self;
}


#line 138
- (instancetype)initWithFloat:(jfloat)leading
     withComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk {
  if (self =
#line 139
  [super initWithFloat:leading withComItextpdfTextChunk:chunk]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
  }
  return self;
}


#line 149
- (instancetype)initWithFloat:(jfloat)leading
                 withNSString:(NSString *)string {
  if (self =
#line 150
  [super initWithFloat:leading withNSString:string]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
  }
  return self;
}


#line 161
- (instancetype)initWithFloat:(jfloat)leading
                 withNSString:(NSString *)string
      withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  if (self =
#line 162
  [super initWithFloat:leading withNSString:string withComItextpdfTextFont:font]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
  }
  return self;
}


#line 170
- (instancetype)initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  if (self =
#line 171
  [super initWithComItextpdfTextPhrase:phrase]) {
    name_ =
#line 78
    nil;
    reference_ =
#line 81
    nil;
    
#line 172
    if ([phrase isKindOfClass:[ComItextpdfTextAnchor class]]) {
      ComItextpdfTextAnchor *a = (ComItextpdfTextAnchor *) check_class_cast(phrase, [ComItextpdfTextAnchor class]);
      [self setNameWithNSString:((ComItextpdfTextAnchor *) nil_chk(a))->name_];
      [self setReferenceWithNSString:a->reference_];
    }
  }
  return self;
}


#line 189
- (jboolean)processWithComItextpdfTextElementListener:(id<ComItextpdfTextElementListener>)listener {
  
#line 190
  @try {
    ComItextpdfTextChunk *chunk;
    id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk([self getChunks])) iterator];
    jboolean localDestination = reference_ != nil && [reference_ hasPrefix:@"#"];
    jboolean notGotoOK = YES;
    while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
      chunk = [i next];
      if (name_ != nil && notGotoOK && ![((ComItextpdfTextChunk *) nil_chk(chunk)) isEmpty]) {
        (void) [chunk setLocalDestinationWithNSString:name_];
        notGotoOK = NO;
      }
      if (localDestination) {
        (void) [((ComItextpdfTextChunk *) nil_chk(chunk)) setLocalGotoWithNSString:[((NSString *) nil_chk(reference_)) substring:1]];
      }
      [((id<ComItextpdfTextElementListener>) nil_chk(listener)) addWithComItextpdfTextElement:chunk];
    }
    return YES;
  }
  @catch (ComItextpdfTextDocumentException *de) {
    return NO;
  }
}


#line 219
- (id<JavaUtilList>)getChunks {
  
#line 220
  jboolean localDestination = reference_ != nil && [reference_ hasPrefix:@"#"];
  jboolean notGotoOK = YES;
  id<JavaUtilList> tmp = [[JavaUtilArrayList alloc] init];
  id<JavaUtilIterator> i = [self iterator];
  id<ComItextpdfTextElement> element;
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    element = (id<ComItextpdfTextElement>) check_protocol_cast([i next], @protocol(ComItextpdfTextElement));
    if ([(id) element isKindOfClass:[ComItextpdfTextChunk class]]) {
      ComItextpdfTextChunk *chunk = (ComItextpdfTextChunk *) check_class_cast(element, [ComItextpdfTextChunk class]);
      notGotoOK = [self applyAnchorWithComItextpdfTextChunk:chunk withBoolean:notGotoOK withBoolean:localDestination];
      [tmp addWithId:chunk];
    }
    else {
      for (ComItextpdfTextChunk * __strong c in nil_chk([((id<ComItextpdfTextElement>) nil_chk(element)) getChunks])) {
        notGotoOK = [self applyAnchorWithComItextpdfTextChunk:c withBoolean:notGotoOK withBoolean:localDestination];
        [tmp addWithId:c];
      }
    }
  }
  return tmp;
}


#line 249
- (jboolean)applyAnchorWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk
                                    withBoolean:(jboolean)notGotoOK
                                    withBoolean:(jboolean)localDestination {
  
#line 250
  if (name_ != nil && notGotoOK && ![((ComItextpdfTextChunk *) nil_chk(chunk)) isEmpty]) {
    (void) [chunk setLocalDestinationWithNSString:name_];
    notGotoOK = NO;
  }
  if (localDestination) {
    (void) [((ComItextpdfTextChunk *) nil_chk(chunk)) setLocalGotoWithNSString:[((NSString *) nil_chk(reference_)) substring:1]];
  }
  else if (reference_ != nil)
#line 258
  (void) [((ComItextpdfTextChunk *) nil_chk(chunk)) setAnchorWithNSString:reference_];
  return notGotoOK;
}


#line 268
- (jint)type {
  
#line 269
  return ComItextpdfTextElement_ANCHOR;
}


#line 279
- (void)setNameWithNSString:(NSString *)name {
  
#line 280
  self->name_ = name;
}


#line 288
- (void)setReferenceWithNSString:(NSString *)reference {
  
#line 289
  self->reference_ = reference;
}


#line 299
- (NSString *)getName {
  
#line 300
  return name_;
}


#line 308
- (NSString *)getReference {
  
#line 309
  return reference_;
}


#line 317
- (JavaNetURL *)getUrl {
  
#line 318
  @try {
    return [[JavaNetURL alloc] initWithNSString:reference_];
  }
  @catch (JavaNetMalformedURLException *mue) {
    return nil;
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextAnchor *)other {
  [super copyAllFieldsTo:other];
  other->name_ = name_;
  other->reference_ = reference_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Anchor", NULL, 0x1, NULL },
    { "initWithFloat:", "Anchor", NULL, 0x1, NULL },
    { "initWithComItextpdfTextChunk:", "Anchor", NULL, 0x1, NULL },
    { "initWithNSString:", "Anchor", NULL, 0x1, NULL },
    { "initWithNSString:withComItextpdfTextFont:", "Anchor", NULL, 0x1, NULL },
    { "initWithFloat:withComItextpdfTextChunk:", "Anchor", NULL, 0x1, NULL },
    { "initWithFloat:withNSString:", "Anchor", NULL, 0x1, NULL },
    { "initWithFloat:withNSString:withComItextpdfTextFont:", "Anchor", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPhrase:", "Anchor", NULL, 0x1, NULL },
    { "processWithComItextpdfTextElementListener:", "process", "Z", 0x1, NULL },
    { "getChunks", NULL, "Ljava.util.List;", 0x1, NULL },
    { "applyAnchorWithComItextpdfTextChunk:withBoolean:withBoolean:", "applyAnchor", "Z", 0x4, NULL },
    { "type", NULL, "I", 0x1, NULL },
    { "setNameWithNSString:", "setName", "V", 0x1, NULL },
    { "setReferenceWithNSString:", "setReference", "V", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getReference", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getUrl", NULL, "Ljava.net.URL;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfTextAnchor_serialVersionUID },
    { "name_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "reference_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextAnchor = { "Anchor", "com.itextpdf.text", NULL, 0x1, 18, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextAnchor;
}

@end
