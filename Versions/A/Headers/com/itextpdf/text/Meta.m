//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Meta.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Meta.java"

#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ElementListener.h"
#include "com/itextpdf/text/Meta.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


#line 63
@implementation ComItextpdfTextMeta

NSString * ComItextpdfTextMeta_UNKNOWN_ = 
#line 77
@"unknown";
NSString * ComItextpdfTextMeta_PRODUCER_ = 
#line 83
@"producer";
NSString * ComItextpdfTextMeta_CREATIONDATE_ = 
#line 89
@"creationdate";
NSString * ComItextpdfTextMeta_AUTHOR_ = 
#line 95
@"author";
NSString * ComItextpdfTextMeta_KEYWORDS_ = 
#line 101
@"keywords";
NSString * ComItextpdfTextMeta_SUBJECT_ = 
#line 107
@"subject";
NSString * ComItextpdfTextMeta_TITLE_ = 
#line 113
@"title";


#line 123
- (instancetype)initWithInt:(jint)type
               withNSString:(NSString *)content {
  if (self = [super init]) {
    
#line 124
    self->type__ = type;
    
#line 125
    self->content_ = [[JavaLangStringBuffer alloc] initWithNSString:content];
  }
  return self;
}


#line 134
- (instancetype)initWithNSString:(NSString *)tag
                    withNSString:(NSString *)content {
  if (self = [super init]) {
    self->type__ = [ComItextpdfTextMeta getTypeWithNSString:tag];
    
#line 136
    self->content_ = [[JavaLangStringBuffer alloc] initWithNSString:content];
  }
  return self;
}


#line 148
- (jboolean)processWithComItextpdfTextElementListener:(id<ComItextpdfTextElementListener>)listener {
  
#line 149
  @try {
    return [((id<ComItextpdfTextElementListener>) nil_chk(listener)) addWithComItextpdfTextElement:self];
  }
  @catch (ComItextpdfTextDocumentException *de) {
    return NO;
  }
}


#line 162
- (jint)type {
  
#line 163
  return type__;
}


#line 171
- (id<JavaUtilList>)getChunks {
  
#line 172
  return [[JavaUtilArrayList alloc] init];
}


#line 179
- (jboolean)isContent {
  
#line 180
  return NO;
}


#line 187
- (jboolean)isNestable {
  
#line 188
  return NO;
}


#line 199
- (JavaLangStringBuffer *)appendWithNSString:(NSString *)string {
  
#line 200
  return [((JavaLangStringBuffer *) nil_chk(content_)) appendWithNSString:string];
}


#line 210
- (NSString *)getContent {
  
#line 211
  return [((JavaLangStringBuffer *) nil_chk(content_)) description];
}


#line 220
- (NSString *)getName {
  
#line 221
  switch (type__) {
    case ComItextpdfTextElement_SUBJECT:
    return ComItextpdfTextMeta_SUBJECT_;
    case ComItextpdfTextElement_KEYWORDS:
    return ComItextpdfTextMeta_KEYWORDS_;
    case ComItextpdfTextElement_AUTHOR:
    return ComItextpdfTextMeta_AUTHOR_;
    case ComItextpdfTextElement_TITLE:
    return ComItextpdfTextMeta_TITLE_;
    case ComItextpdfTextElement_PRODUCER:
    return ComItextpdfTextMeta_PRODUCER_;
    case ComItextpdfTextElement_CREATIONDATE:
    return ComItextpdfTextMeta_CREATIONDATE_;
    default:
    return ComItextpdfTextMeta_UNKNOWN_;
  }
}


#line 245
+ (jint)getTypeWithNSString:(NSString *)tag {
  
#line 246
  if ([((NSString *) nil_chk(ComItextpdfTextMeta_SUBJECT_)) isEqual:tag]) {
    return ComItextpdfTextElement_SUBJECT;
  }
  if ([((NSString *) nil_chk(ComItextpdfTextMeta_KEYWORDS_)) isEqual:tag]) {
    return ComItextpdfTextElement_KEYWORDS;
  }
  if ([((NSString *) nil_chk(ComItextpdfTextMeta_AUTHOR_)) isEqual:tag]) {
    return ComItextpdfTextElement_AUTHOR;
  }
  if ([((NSString *) nil_chk(ComItextpdfTextMeta_TITLE_)) isEqual:tag]) {
    return ComItextpdfTextElement_TITLE;
  }
  if ([((NSString *) nil_chk(ComItextpdfTextMeta_PRODUCER_)) isEqual:tag]) {
    return ComItextpdfTextElement_PRODUCER;
  }
  if ([((NSString *) nil_chk(ComItextpdfTextMeta_CREATIONDATE_)) isEqual:tag]) {
    return ComItextpdfTextElement_CREATIONDATE;
  }
  return ComItextpdfTextElement_HEADER;
}

- (void)copyAllFieldsTo:(ComItextpdfTextMeta *)other {
  [super copyAllFieldsTo:other];
  other->content_ = content_;
  other->type__ = type__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withNSString:", "Meta", NULL, 0x0, NULL },
    { "initWithNSString:withNSString:", "Meta", NULL, 0x1, NULL },
    { "processWithComItextpdfTextElementListener:", "process", "Z", 0x1, NULL },
    { "type", NULL, "I", 0x1, NULL },
    { "getChunks", NULL, "Ljava.util.List;", 0x1, NULL },
    { "isContent", NULL, "Z", 0x1, NULL },
    { "isNestable", NULL, "Z", 0x1, NULL },
    { "appendWithNSString:", "append", "Ljava.lang.StringBuffer;", 0x1, NULL },
    { "getContent", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getTypeWithNSString:", "getType", "I", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type__", "type", 0x12, "I", NULL,  },
    { "content_", NULL, 0x12, "Ljava.lang.StringBuffer;", NULL,  },
    { "UNKNOWN_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextMeta_UNKNOWN_,  },
    { "PRODUCER_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextMeta_PRODUCER_,  },
    { "CREATIONDATE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextMeta_CREATIONDATE_,  },
    { "AUTHOR_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextMeta_AUTHOR_,  },
    { "KEYWORDS_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextMeta_KEYWORDS_,  },
    { "SUBJECT_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextMeta_SUBJECT_,  },
    { "TITLE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextMeta_TITLE_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextMeta = { "Meta", "com.itextpdf.text", NULL, 0x1, 11, methods, 9, fields, 0, NULL};
  return &_ComItextpdfTextMeta;
}

@end
