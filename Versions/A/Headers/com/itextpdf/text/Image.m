//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Image.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Image.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/Annotation.h"
#include "com/itextpdf/text/BadElementException.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/ImgCCITT.h"
#include "com/itextpdf/text/ImgJBIG2.h"
#include "com/itextpdf/text/ImgRaw.h"
#include "com/itextpdf/text/ImgTemplate.h"
#include "com/itextpdf/text/ImgWMF.h"
#include "com/itextpdf/text/Jpeg.h"
#include "com/itextpdf/text/Jpeg2000.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/pdf/ICC_Profile.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfOCG.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfTemplate.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/codec/BmpImage.h"
#include "com/itextpdf/text/pdf/codec/CCITTG4Encoder.h"
#include "com/itextpdf/text/pdf/codec/GifImage.h"
#include "com/itextpdf/text/pdf/codec/JBIG2Image.h"
#include "com/itextpdf/text/pdf/codec/PngImage.h"
#include "com/itextpdf/text/pdf/codec/TiffImage.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/net/MalformedURLException.h"
#include "java/net/URL.h"
#include "java/util/HashMap.h"


#line 91
@implementation ComItextpdfTextImage

jlong ComItextpdfTextImage_serialId_ = 
#line 1182
0;


#line 233
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url {
  if (self =
#line 234
  [super initWithFloat:0 withFloat:0]) {
    bpc_ =
#line 182
    1;
    template__ = [IOSObjectArray arrayWithLength:
#line 185
    1 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfTemplate class]]];
    absoluteX_ =
#line 194
    JavaLangFloat_NaN;
    absoluteY_ =
#line 197
    JavaLangFloat_NaN;
    compressionLevel_ =
#line 215
    ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION;
    mySerialId_ =
#line 218
    [ComItextpdfTextImage getSerialId];
    role_ = ComItextpdfTextPdfPdfName_get_FIGURE_();
    accessibleAttributes_ =
#line 221
    nil;
    id__ =
#line 222
    nil;
    indentationLeft_ =
#line 1271
    0;
    indentationRight_ =
#line 1274
    0;
    widthPercentage_ =
#line 1363
    100;
    scaleToFitHeight_ =
#line 1418
    YES;
    annotation_ =
#line 1441
    nil;
    originalType_ =
#line 1515
    ComItextpdfTextImage_ORIGINAL_NONE;
    deflated_ =
#line 1565
    NO;
    dpiX_ =
#line 1590
    0;
    dpiY_ =
#line 1593
    0;
    XYRatio_ =
#line 1629
    0;
    colorspace_ =
#line 1653
    -1;
    colortransform_ =
#line 1666
    1;
    invert_ =
#line 1677
    NO;
    profile_ =
#line 1699
    nil;
    additional_ =
#line 1730
    nil;
    mask_ =
#line 1795
    NO;
    
#line 235
    self->url_ = url;
    
#line 236
    self->alignment_ = ComItextpdfTextImage_DEFAULT;
    
#line 237
    rotationRadians_ = 0;
  }
  return self;
}


#line 240
+ (ComItextpdfTextImage *)getInstanceWithJavaNetURL:(JavaNetURL *)url {
  
#line 241
  return [ComItextpdfTextImage getInstanceWithJavaNetURL:url withBoolean:NO];
}


#line 254
+ (ComItextpdfTextImage *)getInstanceWithJavaNetURL:(JavaNetURL *)url
                                        withBoolean:(jboolean)recoverFromImageError {
  
#line 256
  JavaIoInputStream *is = nil;
  ComItextpdfTextIoRandomAccessSourceFactory *randomAccessSourceFactory = [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init];
  
#line 259
  @try {
    is = [((JavaNetURL *) nil_chk(url)) openStream];
    jint c1 = [((JavaIoInputStream *) nil_chk(is)) read];
    jint c2 = [is read];
    jint c3 = [is read];
    jint c4 = [is read];
    
#line 266
    jint c5 = [is read];
    jint c6 = [is read];
    jint c7 = [is read];
    jint c8 = [is read];
    [is close];
    
#line 272
    is = nil;
    if (c1 == 'G' && c2 == 'I' && c3 == 'F') {
      ComItextpdfTextPdfCodecGifImage *gif = [[ComItextpdfTextPdfCodecGifImage alloc] initWithJavaNetURL:url];
      ComItextpdfTextImage *img = [gif getImageWithInt:1];
      return img;
    }
    if (c1 == (jint) 0xFF && c2 == (jint) 0xD8) {
      return [[ComItextpdfTextJpeg alloc] initWithJavaNetURL:url];
    }
    if (c1 == (jint) 0x00 && c2 == (jint) 0x00 && c3 == (jint) 0x00 && c4 == (jint) 0x0c) {
      return [[ComItextpdfTextJpeg2000 alloc] initWithJavaNetURL:url];
    }
    if (c1 == (jint) 0xff && c2 == (jint) 0x4f && c3 == (jint) 0xff && c4 == (jint) 0x51) {
      return [[ComItextpdfTextJpeg2000 alloc] initWithJavaNetURL:url];
    }
    if (c1 == IOSIntArray_Get(nil_chk(ComItextpdfTextPdfCodecPngImage_get_PNGID_()), 0) && c2 == IOSIntArray_Get(ComItextpdfTextPdfCodecPngImage_get_PNGID_(), 1) &&
#line 288
    c3 == IOSIntArray_Get(ComItextpdfTextPdfCodecPngImage_get_PNGID_(), 2) && c4 == IOSIntArray_Get(ComItextpdfTextPdfCodecPngImage_get_PNGID_(), 3)) {
      return [ComItextpdfTextPdfCodecPngImage getImageWithJavaNetURL:url];
    }
    if (c1 == (jint) 0xD7 && c2 == (jint) 0xCD) {
      return [[ComItextpdfTextImgWMF alloc] initWithJavaNetURL:url];
    }
    if (c1 == 'B' && c2 == 'M') {
      return [ComItextpdfTextPdfCodecBmpImage getImageWithJavaNetURL:url];
    }
    if ((c1 == 'M' && c2 == 'M' && c3 == 0 && c4 == 42) || (
#line 298
    c1 == 'I' && c2 == 'I' && c3 == 42 && c4 == 0)) {
      ComItextpdfTextPdfRandomAccessFileOrArray *ra = nil;
      @try {
        if ([((NSString *) nil_chk([url getProtocol])) isEqual:@"file"]) {
          NSString *file = [url getFile];
          file = [ComItextpdfTextUtilities unEscapeURLWithNSString:file];
          ra = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[randomAccessSourceFactory createBestSourceWithNSString:file]];
        }
        else ra = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[randomAccessSourceFactory createSourceWithJavaNetURL:url]];
        ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecTiffImage getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:ra withInt:1];
        ((ComItextpdfTextImage *) nil_chk(img))->url_ = url;
        return img;
      }
      @catch (
#line 310
      JavaLangRuntimeException *e) {
        if (recoverFromImageError) {
          
#line 314
          ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecTiffImage getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:ra withBoolean:recoverFromImageError withInt:1];
          ((ComItextpdfTextImage *) nil_chk(img))->url_ = url;
          return img;
        }
        @throw e;
      }
      @finally {
        
#line 320
        if (ra != nil)
#line 321
        [ra close];
      }
    }
    
#line 325
    if (c1 == (jint) 0x97 && c2 == 'J' && c3 == 'B' && c4 == '2' &&
#line 326
    c5 == 0x000d && c6 == 0x000a && c7 == (jint) 0x1a && c8 == 0x000a) {
      ComItextpdfTextPdfRandomAccessFileOrArray *ra = nil;
      @try {
        if ([((NSString *) nil_chk([url getProtocol])) isEqual:@"file"]) {
          NSString *file = [url getFile];
          file = [ComItextpdfTextUtilities unEscapeURLWithNSString:file];
          ra = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[randomAccessSourceFactory createBestSourceWithNSString:file]];
        }
        else ra = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[randomAccessSourceFactory createSourceWithJavaNetURL:url]];
        ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecJBIG2Image getJbig2ImageWithComItextpdfTextPdfRandomAccessFileOrArray:ra withInt:1];
        ((ComItextpdfTextImage *) nil_chk(img))->url_ = url;
        return img;
      }
      @finally {
        
#line 339
        if (ra != nil)
#line 340
        [ra close];
      }
    }
    @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unknown.image.format" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [url description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  @finally {
    
#line 345
    if (is != nil) {
      [is close];
    }
  }
}


#line 362
+ (ComItextpdfTextImage *)getInstanceWithNSString:(NSString *)filename {
  
#line 364
  return [ComItextpdfTextImage getInstanceWithJavaNetURL:[ComItextpdfTextUtilities toURLWithNSString:filename]];
}


#line 367
+ (ComItextpdfTextImage *)getInstanceWithNSString:(NSString *)filename
                                      withBoolean:(jboolean)recoverFromImageError {
  return [ComItextpdfTextImage getInstanceWithJavaNetURL:[ComItextpdfTextUtilities toURLWithNSString:filename] withBoolean:recoverFromImageError];
}

+ (ComItextpdfTextImage *)getInstanceWithByteArray:(IOSByteArray *)imgb {
  
#line 374
  return [ComItextpdfTextImage getInstanceWithByteArray:imgb withBoolean:NO];
}


#line 387
+ (ComItextpdfTextImage *)getInstanceWithByteArray:(IOSByteArray *)imgb
                                       withBoolean:(jboolean)recoverFromImageError {
  
#line 389
  JavaIoInputStream *is = nil;
  ComItextpdfTextIoRandomAccessSourceFactory *randomAccessSourceFactory = [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init];
  @try {
    is = [[JavaIoByteArrayInputStream alloc] initWithByteArray:imgb];
    jint c1 = [is read];
    jint c2 = [is read];
    jint c3 = [is read];
    jint c4 = [is read];
    [is close];
    
#line 399
    is = nil;
    if (c1 == 'G' && c2 == 'I' && c3 == 'F') {
      ComItextpdfTextPdfCodecGifImage *gif = [[ComItextpdfTextPdfCodecGifImage alloc] initWithByteArray:imgb];
      return [gif getImageWithInt:1];
    }
    if (c1 == (jint) 0xFF && c2 == (jint) 0xD8) {
      return [[ComItextpdfTextJpeg alloc] initWithByteArray:imgb];
    }
    if (c1 == (jint) 0x00 && c2 == (jint) 0x00 && c3 == (jint) 0x00 && c4 == (jint) 0x0c) {
      return [[ComItextpdfTextJpeg2000 alloc] initWithByteArray:imgb];
    }
    if (c1 == (jint) 0xff && c2 == (jint) 0x4f && c3 == (jint) 0xff && c4 == (jint) 0x51) {
      return [[ComItextpdfTextJpeg2000 alloc] initWithByteArray:imgb];
    }
    if (c1 == IOSIntArray_Get(nil_chk(ComItextpdfTextPdfCodecPngImage_get_PNGID_()), 0) && c2 == IOSIntArray_Get(ComItextpdfTextPdfCodecPngImage_get_PNGID_(), 1) &&
#line 414
    c3 == IOSIntArray_Get(ComItextpdfTextPdfCodecPngImage_get_PNGID_(), 2) && c4 == IOSIntArray_Get(ComItextpdfTextPdfCodecPngImage_get_PNGID_(), 3)) {
      return [ComItextpdfTextPdfCodecPngImage getImageWithByteArray:imgb];
    }
    if (c1 == (jint) 0xD7 && c2 == (jint) 0xCD) {
      return [[ComItextpdfTextImgWMF alloc] initWithByteArray:imgb];
    }
    if (c1 == 'B' && c2 == 'M') {
      return [ComItextpdfTextPdfCodecBmpImage getImageWithByteArray:imgb];
    }
    if ((c1 == 'M' && c2 == 'M' && c3 == 0 && c4 == 42) || (
#line 424
    c1 == 'I' && c2 == 'I' && c3 == 42 && c4 == 0)) {
      ComItextpdfTextPdfRandomAccessFileOrArray *ra = nil;
      @try {
        ra = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[randomAccessSourceFactory createSourceWithByteArray:imgb]];
        ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecTiffImage getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:ra withInt:1];
        if ([((ComItextpdfTextImage *) nil_chk(img)) getOriginalData] == nil)
#line 430
        [img setOriginalDataWithByteArray:imgb];
        return img;
      }
      @catch (
#line 432
      JavaLangRuntimeException *e) {
        if (recoverFromImageError) {
          
#line 436
          ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecTiffImage getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:ra withBoolean:recoverFromImageError withInt:1];
          if ([((ComItextpdfTextImage *) nil_chk(img)) getOriginalData] == nil)
#line 438
          [img setOriginalDataWithByteArray:imgb];
          return img;
        }
        @throw e;
      }
      @finally {
        
#line 443
        if (ra != nil)
#line 444
        [ra close];
      }
    }
    
#line 448
    if (c1 == (jint) 0x97 && c2 == 'J' && c3 == 'B' && c4 == '2') {
      is = [[JavaIoByteArrayInputStream alloc] initWithByteArray:imgb];
      [is skipWithLong:4];
      jint c5 = [is read];
      jint c6 = [is read];
      jint c7 = [is read];
      jint c8 = [is read];
      [is close];
      if (c5 == 0x000d && c6 == 0x000a && c7 == (jint) 0x1a && c8 == 0x000a) {
        
#line 460
        ComItextpdfTextPdfRandomAccessFileOrArray *ra = nil;
        @try {
          ra = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[randomAccessSourceFactory createSourceWithByteArray:imgb]];
          ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecJBIG2Image getJbig2ImageWithComItextpdfTextPdfRandomAccessFileOrArray:ra withInt:1];
          if ([((ComItextpdfTextImage *) nil_chk(img)) getOriginalData] == nil)
#line 465
          [img setOriginalDataWithByteArray:imgb];
          return img;
        }
        @finally {
          
#line 468
          if (ra != nil)
#line 469
          [ra close];
        }
      }
    }
    @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.byte.array.is.not.a.recognized.imageformat" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  @finally {
    
#line 475
    if (is != nil) {
      [is close];
    }
  }
}


#line 498
+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                                     withInt:(jint)components
                                     withInt:(jint)bpc
                               withByteArray:(IOSByteArray *)data {
  
#line 500
  return [ComItextpdfTextImage getInstanceWithInt:width withInt:height withInt:components withInt:bpc withByteArray:data withIntArray:nil];
}


#line 512
+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                               withByteArray:(IOSByteArray *)data
                               withByteArray:(IOSByteArray *)globals {
  
#line 513
  return [[ComItextpdfTextImgJBIG2 alloc] initWithInt:width withInt:height withByteArray:data withByteArray:globals];
}


#line 540
+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                                 withBoolean:(jboolean)reverseBits
                                     withInt:(jint)typeCCITT
                                     withInt:(jint)parameters
                               withByteArray:(IOSByteArray *)data {
  
#line 543
  return [ComItextpdfTextImage getInstanceWithInt:width withInt:height withBoolean:reverseBits withInt:typeCCITT withInt:
#line 544
  parameters withByteArray:data withIntArray:nil];
}


#line 574
+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                                 withBoolean:(jboolean)reverseBits
                                     withInt:(jint)typeCCITT
                                     withInt:(jint)parameters
                               withByteArray:(IOSByteArray *)data
                                withIntArray:(IOSIntArray *)transparency {
  
#line 577
  if (transparency != nil && transparency->size_ != 2)
#line 578
  @throw [[ComItextpdfTextBadElementException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"transparency.length.must.be.equal.to.2.with.ccitt.images" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextImage *img = [[ComItextpdfTextImgCCITT alloc] initWithInt:width withInt:height withBoolean:reverseBits withInt:typeCCITT withInt:
#line 580
  parameters withByteArray:data];
  img->transparency_ = transparency;
  return img;
}


#line 605
+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                                     withInt:(jint)components
                                     withInt:(jint)bpc
                               withByteArray:(IOSByteArray *)data
                                withIntArray:(IOSIntArray *)transparency {
  
#line 608
  if (transparency != nil && transparency->size_ != components * 2)
#line 609
  @throw [[ComItextpdfTextBadElementException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"transparency.length.must.be.equal.to.componentes.2" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (components == 1 && bpc == 1) {
    IOSByteArray *g4 = [ComItextpdfTextPdfCodecCCITTG4Encoder compressWithByteArray:data withInt:width withInt:height];
    return [ComItextpdfTextImage getInstanceWithInt:width withInt:height withBoolean:NO withInt:ComItextpdfTextElement_CCITTG4 withInt:
#line 613
    ComItextpdfTextElement_CCITT_BLACKIS1 withByteArray:g4 withIntArray:transparency];
  }
  ComItextpdfTextImage *img = [[ComItextpdfTextImgRaw alloc] initWithInt:width withInt:height withInt:components withInt:bpc withByteArray:data];
  img->transparency_ = transparency;
  return img;
}


#line 630
+ (ComItextpdfTextImage *)getInstanceWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_ {
  
#line 632
  return [[ComItextpdfTextImgTemplate alloc] initWithComItextpdfTextPdfPdfTemplate:template_];
}


#line 648
- (ComItextpdfTextPdfPdfIndirectReference *)getDirectReference {
  
#line 649
  return self->directReference_;
}


#line 656
- (void)setDirectReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)directReference {
  
#line 657
  self->directReference_ = directReference;
}


#line 666
+ (ComItextpdfTextImage *)getInstanceWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  
#line 667
  ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:ref], [ComItextpdfTextPdfPdfDictionary class]);
  jint width = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIDTH_()]], [ComItextpdfTextPdfPdfNumber class])))) intValue];
  jint height = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HEIGHT_()]], [ComItextpdfTextPdfPdfNumber class])))) intValue];
  ComItextpdfTextImage *imask = nil;
  ComItextpdfTextPdfPdfObject *obj = [dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SMASK_()];
  if (obj != nil && [obj isIndirect]) {
    imask = [ComItextpdfTextImage getInstanceWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class])];
  }
  else {
    obj = [dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MASK_()];
    if (obj != nil && [obj isIndirect]) {
      ComItextpdfTextPdfPdfObject *obj2 = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:obj];
      if ([obj2 isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]])
#line 680
      imask = [ComItextpdfTextImage getInstanceWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class])];
    }
  }
  ComItextpdfTextImage *img = [[ComItextpdfTextImgRaw alloc] initWithInt:width withInt:height withInt:1 withInt:1 withByteArray:nil];
  img->imageMask_ = imask;
  img->directReference_ = ref;
  return img;
}


#line 697
- (instancetype)initWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  if (self =
#line 698
  [super initWithComItextpdfTextRectangle:image]) {
    bpc_ =
#line 182
    1;
    template__ = [IOSObjectArray arrayWithLength:
#line 185
    1 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfTemplate class]]];
    absoluteX_ =
#line 194
    JavaLangFloat_NaN;
    absoluteY_ =
#line 197
    JavaLangFloat_NaN;
    compressionLevel_ =
#line 215
    ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION;
    mySerialId_ =
#line 218
    [ComItextpdfTextImage getSerialId];
    role_ = ComItextpdfTextPdfPdfName_get_FIGURE_();
    accessibleAttributes_ =
#line 221
    nil;
    id__ =
#line 222
    nil;
    indentationLeft_ =
#line 1271
    0;
    indentationRight_ =
#line 1274
    0;
    widthPercentage_ =
#line 1363
    100;
    scaleToFitHeight_ =
#line 1418
    YES;
    annotation_ =
#line 1441
    nil;
    originalType_ =
#line 1515
    ComItextpdfTextImage_ORIGINAL_NONE;
    deflated_ =
#line 1565
    NO;
    dpiX_ =
#line 1590
    0;
    dpiY_ =
#line 1593
    0;
    XYRatio_ =
#line 1629
    0;
    colorspace_ =
#line 1653
    -1;
    colortransform_ =
#line 1666
    1;
    invert_ =
#line 1677
    NO;
    profile_ =
#line 1699
    nil;
    additional_ =
#line 1730
    nil;
    mask_ =
#line 1795
    NO;
    
#line 699
    self->type__ = ((ComItextpdfTextImage *) nil_chk(image))->type__;
    
#line 700
    self->url_ = image->url_;
    
#line 701
    self->rawData_ = image->rawData_;
    
#line 702
    self->bpc_ = image->bpc_;
    
#line 703
    self->template__ = image->template__;
    
#line 704
    self->alignment_ = image->alignment_;
    
#line 705
    self->alt_ = image->alt_;
    
#line 706
    self->absoluteX_ = image->absoluteX_;
    
#line 707
    self->absoluteY_ = image->absoluteY_;
    
#line 708
    self->plainWidth_ = image->plainWidth_;
    
#line 709
    self->plainHeight_ = image->plainHeight_;
    
#line 710
    self->scaledWidth_ = image->scaledWidth_;
    
#line 711
    self->scaledHeight_ = image->scaledHeight_;
    
#line 712
    self->mySerialId_ = image->mySerialId_;
    
#line 714
    self->directReference_ = image->directReference_;
    
#line 716
    self->rotationRadians_ = image->rotationRadians_;
    
#line 717
    self->initialRotation_ = image->initialRotation_;
    
#line 718
    self->indentationLeft_ = image->indentationLeft_;
    
#line 719
    self->indentationRight_ = image->indentationRight_;
    
#line 720
    self->spacingBefore_ = image->spacingBefore_;
    
#line 721
    self->spacingAfter_ = image->spacingAfter_;
    
#line 723
    self->widthPercentage_ = image->widthPercentage_;
    
#line 724
    self->scaleToFitLineWhenOverflow_ = image->scaleToFitLineWhenOverflow_;
    
#line 725
    self->scaleToFitHeight_ = image->scaleToFitHeight_;
    
#line 726
    self->annotation_ = image->annotation_;
    
#line 727
    self->layer_ = image->layer_;
    
#line 728
    self->interpolation_ = image->interpolation_;
    
#line 729
    self->originalType_ = image->originalType_;
    
#line 730
    self->originalData_ = image->originalData_;
    
#line 731
    self->deflated_ = image->deflated_;
    
#line 732
    self->dpiX_ = image->dpiX_;
    
#line 733
    self->dpiY_ = image->dpiY_;
    
#line 734
    self->XYRatio_ = image->XYRatio_;
    
#line 736
    self->colorspace_ = image->colorspace_;
    
#line 737
    self->invert_ = image->invert_;
    
#line 738
    self->profile_ = image->profile_;
    
#line 739
    self->additional_ = image->additional_;
    
#line 740
    self->mask_ = image->mask_;
    
#line 741
    self->imageMask_ = image->imageMask_;
    
#line 742
    self->smask_ = image->smask_;
    
#line 743
    self->transparency_ = image->transparency_;
    
#line 744
    self->role_ = image->role_;
    
#line 745
    if (image->accessibleAttributes_ != nil)
#line 746
    self->accessibleAttributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:image->accessibleAttributes_];
    
#line 747
    [self setIdWithComItextpdfTextAccessibleElementId:[image getId]];
  }
  return self;
}


#line 757
+ (ComItextpdfTextImage *)getInstanceWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 758
  if (image == nil)
#line 759
  return nil;
  @try {
    IOSClass *cs = [((ComItextpdfTextImage *) nil_chk(image)) getClass];
    JavaLangReflectConstructor *constructor = [cs getDeclaredConstructor:[IOSObjectArray arrayWithObjects:(id[]){
#line 763
      [IOSClass classWithClass:[ComItextpdfTextImage class]] } count:1 type:[IOSClass classWithClass:[IOSClass class]]]];
      return [((JavaLangReflectConstructor *) nil_chk(constructor)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ image } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    @catch (
#line 765
    JavaLangException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
  }


#line 779
- (jint)type {
  
#line 780
  return type__;
}


#line 788
- (jboolean)isNestable {
  
#line 789
  return YES;
}


#line 801
- (jboolean)isJpeg {
  
#line 802
  return type__ == ComItextpdfTextElement_JPEG;
}


#line 812
- (jboolean)isImgRaw {
  
#line 813
  return type__ == ComItextpdfTextElement_IMGRAW;
}


#line 823
- (jboolean)isImgTemplate {
  
#line 824
  return type__ == ComItextpdfTextElement_IMGTEMPLATE;
}


#line 836
- (JavaNetURL *)getUrl {
  
#line 837
  return url_;
}


#line 846
- (void)setUrlWithJavaNetURL:(JavaNetURL *)url {
  
#line 847
  self->url_ = url;
}


#line 858
- (IOSByteArray *)getRawData {
  
#line 859
  return rawData_;
}


#line 870
- (jint)getBpc {
  
#line 871
  return bpc_;
}


#line 882
- (ComItextpdfTextPdfPdfTemplate *)getTemplateData {
  
#line 883
  return IOSObjectArray_Get(nil_chk(template__), 0);
}


#line 892
- (void)setTemplateDataWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_ {
  
#line 893
  IOSObjectArray_Set(nil_chk(self->template__), 0, template_);
}


#line 901
- (jint)getAlignment {
  
#line 902
  return alignment_;
}


#line 912
- (void)setAlignmentWithInt:(jint)alignment {
  
#line 913
  self->alignment_ = alignment;
}


#line 922
- (NSString *)getAlt {
  
#line 923
  return alt_;
}


#line 933
- (void)setAltWithNSString:(NSString *)alt {
  
#line 934
  self->alt_ = alt;
  [self setAccessibleAttributeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ALT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:alt]];
}


#line 945
- (void)setAbsolutePositionWithFloat:(jfloat)absoluteX
                           withFloat:(jfloat)absoluteY {
  
#line 946
  self->absoluteX_ = absoluteX;
  self->absoluteY_ = absoluteY;
}


#line 956
- (jboolean)hasAbsoluteX {
  
#line 957
  return ![JavaLangFloat isNaNWithFloat:absoluteX_];
}


#line 965
- (jfloat)getAbsoluteX {
  
#line 966
  return absoluteX_;
}


#line 975
- (jboolean)hasAbsoluteY {
  
#line 976
  return ![JavaLangFloat isNaNWithFloat:absoluteY_];
}


#line 984
- (jfloat)getAbsoluteY {
  
#line 985
  return absoluteY_;
}


#line 995
- (jfloat)getScaledWidth {
  
#line 996
  return scaledWidth_;
}


#line 1004
- (jfloat)getScaledHeight {
  
#line 1005
  return scaledHeight_;
}


#line 1013
- (jfloat)getPlainWidth {
  
#line 1014
  return plainWidth_;
}


#line 1022
- (jfloat)getPlainHeight {
  
#line 1023
  return plainHeight_;
}


#line 1031
- (void)scaleAbsoluteWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rectangle {
  
#line 1032
  [self scaleAbsoluteWithFloat:[((ComItextpdfTextRectangle *) nil_chk(rectangle)) getWidth] withFloat:[rectangle getHeight]];
}


#line 1043
- (void)scaleAbsoluteWithFloat:(jfloat)newWidth
                     withFloat:(jfloat)newHeight {
  
#line 1044
  plainWidth_ = newWidth;
  plainHeight_ = newHeight;
  IOSFloatArray *matrix = [self matrix];
  scaledWidth_ = IOSFloatArray_Get(nil_chk(matrix), ComItextpdfTextImage_DX) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CX);
  scaledHeight_ = IOSFloatArray_Get(matrix, ComItextpdfTextImage_DY) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CY);
  [self setWidthPercentageWithFloat:0];
}


#line 1058
- (void)scaleAbsoluteWidthWithFloat:(jfloat)newWidth {
  
#line 1059
  plainWidth_ = newWidth;
  IOSFloatArray *matrix = [self matrix];
  scaledWidth_ = IOSFloatArray_Get(nil_chk(matrix), ComItextpdfTextImage_DX) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CX);
  scaledHeight_ = IOSFloatArray_Get(matrix, ComItextpdfTextImage_DY) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CY);
  [self setWidthPercentageWithFloat:0];
}


#line 1072
- (void)scaleAbsoluteHeightWithFloat:(jfloat)newHeight {
  
#line 1073
  plainHeight_ = newHeight;
  IOSFloatArray *matrix = [self matrix];
  scaledWidth_ = IOSFloatArray_Get(nil_chk(matrix), ComItextpdfTextImage_DX) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CX);
  scaledHeight_ = IOSFloatArray_Get(matrix, ComItextpdfTextImage_DY) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CY);
  [self setWidthPercentageWithFloat:0];
}


#line 1086
- (void)scalePercentWithFloat:(jfloat)percent {
  
#line 1087
  [self scalePercentWithFloat:percent withFloat:percent];
}


#line 1098
- (void)scalePercentWithFloat:(jfloat)percentX
                    withFloat:(jfloat)percentY {
  
#line 1099
  plainWidth_ = [self getWidth] * percentX / 100.0f;
  plainHeight_ = [self getHeight] * percentY / 100.0f;
  IOSFloatArray *matrix = [self matrix];
  scaledWidth_ = IOSFloatArray_Get(nil_chk(matrix), ComItextpdfTextImage_DX) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CX);
  scaledHeight_ = IOSFloatArray_Get(matrix, ComItextpdfTextImage_DY) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CY);
  [self setWidthPercentageWithFloat:0];
}


#line 1112
- (void)scaleToFitWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rectangle {
  
#line 1113
  [self scaleToFitWithFloat:[((ComItextpdfTextRectangle *) nil_chk(rectangle)) getWidth] withFloat:[rectangle getHeight]];
}


#line 1124
- (void)scaleToFitWithFloat:(jfloat)fitWidth
                  withFloat:(jfloat)fitHeight {
  
#line 1125
  [self scalePercentWithFloat:100];
  jfloat percentX = fitWidth * 100 / [self getScaledWidth];
  jfloat percentY = fitHeight * 100 / [self getScaledHeight];
  [self scalePercentWithFloat:percentX < percentY ? percentX : percentY];
  [self setWidthPercentageWithFloat:0];
}


#line 1138
- (IOSFloatArray *)matrix {
  
#line 1139
  return [self matrixWithFloat:1];
}


#line 1147
- (IOSFloatArray *)matrixWithFloat:(jfloat)scalePercentage {
  
#line 1148
  IOSFloatArray *matrix = [IOSFloatArray arrayWithLength:8];
  jfloat cosX = (jfloat) [JavaLangMath cosWithDouble:rotationRadians_];
  jfloat sinX = (jfloat) [JavaLangMath sinWithDouble:rotationRadians_];
  *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_AX) = plainWidth_ * cosX * scalePercentage;
  *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_AY) = plainWidth_ * sinX * scalePercentage;
  *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_BX) = -plainHeight_ * sinX * scalePercentage;
  *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_BY) = plainHeight_ * cosX * scalePercentage;
  if (rotationRadians_ < JavaLangMath_PI / 2.0f) {
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CX) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_BX);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CY) = 0;
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_DX) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_AX);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_DY) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_AY) + IOSFloatArray_Get(matrix, ComItextpdfTextImage_BY);
  }
  else
#line 1160
  if (rotationRadians_ < JavaLangMath_PI) {
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CX) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_AX) + IOSFloatArray_Get(matrix, ComItextpdfTextImage_BX);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CY) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_BY);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_DX) = 0;
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_DY) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_AY);
  }
  else
#line 1165
  if (rotationRadians_ < JavaLangMath_PI * 1.5f) {
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CX) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_AX);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CY) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_AY) + IOSFloatArray_Get(matrix, ComItextpdfTextImage_BY);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_DX) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_BX);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_DY) = 0;
  }
  else {
    
#line 1171
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CX) = 0;
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CY) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_AY);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_DX) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_AX) + IOSFloatArray_Get(matrix, ComItextpdfTextImage_BX);
    *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_DY) = IOSFloatArray_Get(matrix, ComItextpdfTextImage_BY);
  }
  return matrix;
}


#line 1186
+ (JavaLangLong *)getSerialId {
  @synchronized([IOSClass classWithClass:[ComItextpdfTextImage class]]) {
    
#line 1187
    ++ComItextpdfTextImage_serialId_;
    return [JavaLangLong valueOfWithLong:ComItextpdfTextImage_serialId_];
  }
}


#line 1196
- (JavaLangLong *)getMySerialId {
  
#line 1197
  return mySerialId_;
}


#line 1212
- (jfloat)getImageRotation {
  
#line 1213
  jdouble d = 2.0 * JavaLangMath_PI;
  jfloat rot = (jfloat) (fmod((rotationRadians_ - initialRotation_), d));
  if (rot < 0) {
    rot += d;
  }
  return rot;
}


#line 1227
- (void)setRotationWithFloat:(jfloat)r {
  
#line 1228
  jdouble d = 2.0 * JavaLangMath_PI;
  rotationRadians_ = (jfloat) (fmod((r + initialRotation_), d));
  if (rotationRadians_ < 0) {
    rotationRadians_ += d;
  }
  IOSFloatArray *matrix = [self matrix];
  scaledWidth_ = IOSFloatArray_Get(nil_chk(matrix), ComItextpdfTextImage_DX) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CX);
  scaledHeight_ = IOSFloatArray_Get(matrix, ComItextpdfTextImage_DY) - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CY);
}


#line 1244
- (void)setRotationDegreesWithFloat:(jfloat)deg {
  
#line 1245
  jdouble d = JavaLangMath_PI;
  [self setRotationWithFloat:deg / 180 * (jfloat) d];
}


#line 1253
- (jfloat)getInitialRotation {
  
#line 1254
  return self->initialRotation_;
}


#line 1262
- (void)setInitialRotationWithFloat:(jfloat)initialRotation {
  
#line 1263
  jfloat old_rot = rotationRadians_ - self->initialRotation_;
  self->initialRotation_ = initialRotation;
  [self setRotationWithFloat:old_rot];
}


#line 1287
- (jfloat)getIndentationLeft {
  
#line 1288
  return indentationLeft_;
}


#line 1296
- (void)setIndentationLeftWithFloat:(jfloat)f {
  
#line 1297
  indentationLeft_ = f;
}


#line 1305
- (jfloat)getIndentationRight {
  
#line 1306
  return indentationRight_;
}


#line 1314
- (void)setIndentationRightWithFloat:(jfloat)f {
  
#line 1315
  indentationRight_ = f;
}


#line 1323
- (jfloat)getSpacingBefore {
  
#line 1324
  return spacingBefore_;
}


#line 1334
- (void)setSpacingBeforeWithFloat:(jfloat)spacing {
  
#line 1335
  self->spacingBefore_ = spacing;
}


#line 1343
- (jfloat)getSpacingAfter {
  
#line 1344
  return spacingAfter_;
}


#line 1354
- (void)setSpacingAfterWithFloat:(jfloat)spacing {
  
#line 1355
  self->spacingAfter_ = spacing;
}


#line 1370
- (jfloat)getWidthPercentage {
  
#line 1371
  return self->widthPercentage_;
}


#line 1380
- (void)setWidthPercentageWithFloat:(jfloat)widthPercentage {
  
#line 1381
  self->widthPercentage_ = widthPercentage;
}


#line 1398
- (jboolean)isScaleToFitLineWhenOverflow {
  
#line 1399
  return scaleToFitLineWhenOverflow_;
}


#line 1407
- (void)setScaleToFitLineWhenOverflowWithBoolean:(jboolean)scaleToFitLineWhenOverflow {
  
#line 1408
  self->scaleToFitLineWhenOverflow_ = scaleToFitLineWhenOverflow;
}


#line 1425
- (jboolean)isScaleToFitHeight {
  
#line 1426
  return scaleToFitHeight_;
}


#line 1434
- (void)setScaleToFitHeightWithBoolean:(jboolean)scaleToFitHeight {
  
#line 1435
  self->scaleToFitHeight_ = scaleToFitHeight;
}


#line 1449
- (void)setAnnotationWithComItextpdfTextAnnotation:(ComItextpdfTextAnnotation *)annotation {
  
#line 1450
  self->annotation_ = annotation;
}


#line 1458
- (ComItextpdfTextAnnotation *)getAnnotation {
  
#line 1459
  return annotation_;
}


#line 1473
- (id<ComItextpdfTextPdfPdfOCG>)getLayer {
  
#line 1474
  return layer_;
}


#line 1483
- (void)setLayerWithComItextpdfTextPdfPdfOCG:(id<ComItextpdfTextPdfPdfOCG>)layer {
  
#line 1484
  self->layer_ = layer;
}


#line 1497
- (jboolean)isInterpolation {
  
#line 1498
  return interpolation_;
}


#line 1508
- (void)setInterpolationWithBoolean:(jboolean)interpolation {
  
#line 1509
  self->interpolation_ = interpolation;
}


#line 1526
- (jint)getOriginalType {
  
#line 1527
  return self->originalType_;
}


#line 1537
- (void)setOriginalTypeWithInt:(jint)originalType {
  
#line 1538
  self->originalType_ = originalType;
}


#line 1547
- (IOSByteArray *)getOriginalData {
  
#line 1548
  return self->originalData_;
}


#line 1558
- (void)setOriginalDataWithByteArray:(IOSByteArray *)originalData {
  
#line 1559
  self->originalData_ = originalData;
}


#line 1573
- (jboolean)isDeflated {
  
#line 1574
  return self->deflated_;
}


#line 1583
- (void)setDeflatedWithBoolean:(jboolean)deflated {
  
#line 1584
  self->deflated_ = deflated;
}


#line 1600
- (jint)getDpiX {
  
#line 1601
  return dpiX_;
}


#line 1609
- (jint)getDpiY {
  
#line 1610
  return dpiY_;
}


#line 1621
- (void)setDpiWithInt:(jint)dpiX
              withInt:(jint)dpiY {
  
#line 1622
  self->dpiX_ = dpiX;
  self->dpiY_ = dpiY;
}


#line 1636
- (jfloat)getXYRatio {
  
#line 1637
  return self->XYRatio_;
}


#line 1646
- (void)setXYRatioWithFloat:(jfloat)XYRatio {
  
#line 1647
  self->XYRatio_ = XYRatio;
}


#line 1662
- (jint)getColorspace {
  
#line 1663
  return colorspace_;
}

- (void)setColorTransformWithInt:(jint)c {
  
#line 1669
  colortransform_ = c;
}


#line 1672
- (jint)getColorTransform {
  
#line 1673
  return colortransform_;
}


#line 1684
- (jboolean)isInverted {
  
#line 1685
  return invert_;
}


#line 1694
- (void)setInvertedWithBoolean:(jboolean)invert {
  
#line 1695
  self->invert_ = invert;
}


#line 1707
- (void)tagICCWithComItextpdfTextPdfICC_Profile:(ComItextpdfTextPdfICC_Profile *)profile {
  
#line 1708
  self->profile_ = profile;
}


#line 1716
- (jboolean)hasICCProfile {
  
#line 1717
  return self->profile_ != nil;
}


#line 1725
- (ComItextpdfTextPdfICC_Profile *)getICCProfile {
  
#line 1726
  return profile_;
}


#line 1737
- (ComItextpdfTextPdfPdfDictionary *)getAdditional {
  
#line 1738
  return self->additional_;
}


#line 1747
- (void)setAdditionalWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)additional {
  
#line 1748
  self->additional_ = additional;
}


#line 1754
- (void)simplifyColorspace {
  
#line 1755
  if (additional_ == nil)
#line 1756
  return;
  ComItextpdfTextPdfPdfArray *value = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(additional_)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_()];
  if (value == nil)
#line 1759
  return;
  ComItextpdfTextPdfPdfObject *cs = [self simplifyColorspaceWithComItextpdfTextPdfPdfArray:value];
  ComItextpdfTextPdfPdfObject *newValue;
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(cs)) isName])
#line 1763
  newValue = cs;
  else {
    newValue = value;
    ComItextpdfTextPdfPdfName *first = [((ComItextpdfTextPdfPdfArray *) nil_chk(value)) getAsNameWithInt:0];
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_INDEXED_())) isEqual:first]) {
      if ([value size] >= 2) {
        ComItextpdfTextPdfPdfArray *second = [value getAsArrayWithInt:1];
        if (second != nil) {
          (void) [value setWithInt:1 withComItextpdfTextPdfPdfObject:[self simplifyColorspaceWithComItextpdfTextPdfPdfArray:second]];
        }
      }
    }
  }
  [additional_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:newValue];
}


#line 1782
- (ComItextpdfTextPdfPdfObject *)simplifyColorspaceWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)obj {
  
#line 1783
  if (obj == nil)
#line 1784
  return obj;
  ComItextpdfTextPdfPdfName *first = [((ComItextpdfTextPdfPdfArray *) nil_chk(obj)) getAsNameWithInt:0];
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CALGRAY_())) isEqual:first])
#line 1787
  return ComItextpdfTextPdfPdfName_get_DEVICEGRAY_();
  else if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CALRGB_())) isEqual:first])
#line 1789
  return ComItextpdfTextPdfPdfName_get_DEVICERGB_();
  else
#line 1791
  return obj;
}


#line 1808
- (jboolean)isMask {
  
#line 1809
  return mask_;
}


#line 1818
- (void)makeMask {
  
#line 1819
  if (![self isMaskCandidate])
#line 1820
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"this.image.can.not.be.an.image.mask" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  mask_ = YES;
}


#line 1830
- (jboolean)isMaskCandidate {
  
#line 1831
  if (type__ == ComItextpdfTextElement_IMGRAW) {
    if (bpc_ > (jint) 0xff)
#line 1833
    return YES;
  }
  return colorspace_ == 1;
}


#line 1843
- (ComItextpdfTextImage *)getImageMask {
  
#line 1844
  return imageMask_;
}


#line 1855
- (void)setImageMaskWithComItextpdfTextImage:(ComItextpdfTextImage *)mask {
  
#line 1856
  if (self->mask_)
#line 1857
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"an.image.mask.cannot.contain.another.image.mask" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (!((ComItextpdfTextImage *) nil_chk(mask))->mask_)
#line 1859
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.image.mask.is.not.a.mask.did.you.do.makemask" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  imageMask_ = mask;
  smask_ = (mask->bpc_ > 1 && mask->bpc_ <= 8);
}


#line 1870
- (jboolean)isSmask {
  
#line 1871
  return self->smask_;
}


#line 1880
- (void)setSmaskWithBoolean:(jboolean)smask {
  
#line 1881
  self->smask_ = smask;
}


#line 1893
- (IOSIntArray *)getTransparency {
  
#line 1894
  return transparency_;
}


#line 1903
- (void)setTransparencyWithIntArray:(IOSIntArray *)transparency {
  
#line 1904
  self->transparency_ = transparency;
}


#line 1913
- (jint)getCompressionLevel {
  
#line 1914
  return compressionLevel_;
}


#line 1922
- (void)setCompressionLevelWithInt:(jint)compressionLevel {
  
#line 1923
  if (compressionLevel < ComItextpdfTextPdfPdfStream_NO_COMPRESSION || compressionLevel > ComItextpdfTextPdfPdfStream_BEST_COMPRESSION)
#line 1924
  self->compressionLevel_ = ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION;
  else
#line 1926
  self->compressionLevel_ = compressionLevel;
}


#line 1929
- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 1930
  if (accessibleAttributes_ != nil)
#line 1931
  return [accessibleAttributes_ getWithId:key];
  else
#line 1933
  return nil;
}


#line 1936
- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 1937
  if (accessibleAttributes_ == nil)
#line 1938
  accessibleAttributes_ = [[JavaUtilHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(accessibleAttributes_)) putWithId:key withId:value];
}


#line 1942
- (JavaUtilHashMap *)getAccessibleAttributes {
  
#line 1943
  return accessibleAttributes_;
}


#line 1946
- (ComItextpdfTextPdfPdfName *)getRole {
  
#line 1947
  return role_;
}


#line 1950
- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role {
  
#line 1951
  self->role_ = role;
}


#line 1954
- (ComItextpdfTextAccessibleElementId *)getId {
  
#line 1955
  if (id__ == nil)
#line 1956
  id__ = [[ComItextpdfTextAccessibleElementId alloc] init];
  return id__;
}


#line 1960
- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_ {
  
#line 1961
  self->id__ = id_;
}


#line 1964
- (jboolean)isInline {
  
#line 1965
  return YES;
}

- (void)copyAllFieldsTo:(ComItextpdfTextImage *)other {
  [super copyAllFieldsTo:other];
  other->XYRatio_ = XYRatio_;
  other->absoluteX_ = absoluteX_;
  other->absoluteY_ = absoluteY_;
  other->accessibleAttributes_ = accessibleAttributes_;
  other->additional_ = additional_;
  other->alignment_ = alignment_;
  other->alt_ = alt_;
  other->annotation_ = annotation_;
  other->bpc_ = bpc_;
  other->colorspace_ = colorspace_;
  other->colortransform_ = colortransform_;
  other->compressionLevel_ = compressionLevel_;
  other->deflated_ = deflated_;
  other->directReference_ = directReference_;
  other->dpiX_ = dpiX_;
  other->dpiY_ = dpiY_;
  other->id__ = id__;
  other->imageMask_ = imageMask_;
  other->indentationLeft_ = indentationLeft_;
  other->indentationRight_ = indentationRight_;
  other->initialRotation_ = initialRotation_;
  other->interpolation_ = interpolation_;
  other->invert_ = invert_;
  other->layer_ = layer_;
  other->mask_ = mask_;
  other->mySerialId_ = mySerialId_;
  other->originalData_ = originalData_;
  other->originalType_ = originalType_;
  other->plainHeight_ = plainHeight_;
  other->plainWidth_ = plainWidth_;
  other->profile_ = profile_;
  other->rawData_ = rawData_;
  other->role_ = role_;
  other->rotationRadians_ = rotationRadians_;
  other->scaleToFitHeight_ = scaleToFitHeight_;
  other->scaleToFitLineWhenOverflow_ = scaleToFitLineWhenOverflow_;
  other->scaledHeight_ = scaledHeight_;
  other->scaledWidth_ = scaledWidth_;
  other->smask_ = smask_;
  other->spacingAfter_ = spacingAfter_;
  other->spacingBefore_ = spacingBefore_;
  other->template__ = template__;
  other->transparency_ = transparency_;
  other->type__ = type__;
  other->url_ = url_;
  other->widthPercentage_ = widthPercentage_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaNetURL:", "Image", NULL, 0x1, NULL },
    { "getInstanceWithJavaNetURL:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;Ljava.net.MalformedURLException;Ljava.io.IOException;" },
    { "getInstanceWithJavaNetURL:withBoolean:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;Ljava.net.MalformedURLException;Ljava.io.IOException;" },
    { "getInstanceWithNSString:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;Ljava.net.MalformedURLException;Ljava.io.IOException;" },
    { "getInstanceWithNSString:withBoolean:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;Lcom.itextpdf.text.BadElementException;" },
    { "getInstanceWithByteArray:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;Ljava.net.MalformedURLException;Ljava.io.IOException;" },
    { "getInstanceWithByteArray:withBoolean:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;Ljava.net.MalformedURLException;Ljava.io.IOException;" },
    { "getInstanceWithInt:withInt:withInt:withInt:withByteArray:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;" },
    { "getInstanceWithInt:withInt:withByteArray:withByteArray:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, NULL },
    { "getInstanceWithInt:withInt:withBoolean:withInt:withInt:withByteArray:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;" },
    { "getInstanceWithInt:withInt:withBoolean:withInt:withInt:withByteArray:withIntArray:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;" },
    { "getInstanceWithInt:withInt:withInt:withInt:withByteArray:withIntArray:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;" },
    { "getInstanceWithComItextpdfTextPdfPdfTemplate:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;" },
    { "getDirectReference", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "setDirectReferenceWithComItextpdfTextPdfPdfIndirectReference:", "setDirectReference", "V", 0x1, NULL },
    { "getInstanceWithComItextpdfTextPdfPRIndirectReference:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, "Lcom.itextpdf.text.BadElementException;" },
    { "initWithComItextpdfTextImage:", "Image", NULL, 0x4, NULL },
    { "getInstanceWithComItextpdfTextImage:", "getInstance", "Lcom.itextpdf.text.Image;", 0x9, NULL },
    { "type", NULL, "I", 0x1, NULL },
    { "isNestable", NULL, "Z", 0x1, NULL },
    { "isJpeg", NULL, "Z", 0x1, NULL },
    { "isImgRaw", NULL, "Z", 0x1, NULL },
    { "isImgTemplate", NULL, "Z", 0x1, NULL },
    { "getUrl", NULL, "Ljava.net.URL;", 0x1, NULL },
    { "setUrlWithJavaNetURL:", "setUrl", "V", 0x1, NULL },
    { "getRawData", NULL, "[B", 0x1, NULL },
    { "getBpc", NULL, "I", 0x1, NULL },
    { "getTemplateData", NULL, "Lcom.itextpdf.text.pdf.PdfTemplate;", 0x1, NULL },
    { "setTemplateDataWithComItextpdfTextPdfPdfTemplate:", "setTemplateData", "V", 0x1, NULL },
    { "getAlignment", NULL, "I", 0x1, NULL },
    { "setAlignmentWithInt:", "setAlignment", "V", 0x1, NULL },
    { "getAlt", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setAltWithNSString:", "setAlt", "V", 0x1, NULL },
    { "setAbsolutePositionWithFloat:withFloat:", "setAbsolutePosition", "V", 0x1, NULL },
    { "hasAbsoluteX", NULL, "Z", 0x1, NULL },
    { "getAbsoluteX", NULL, "F", 0x1, NULL },
    { "hasAbsoluteY", NULL, "Z", 0x1, NULL },
    { "getAbsoluteY", NULL, "F", 0x1, NULL },
    { "getScaledWidth", NULL, "F", 0x1, NULL },
    { "getScaledHeight", NULL, "F", 0x1, NULL },
    { "getPlainWidth", NULL, "F", 0x1, NULL },
    { "getPlainHeight", NULL, "F", 0x1, NULL },
    { "scaleAbsoluteWithComItextpdfTextRectangle:", "scaleAbsolute", "V", 0x1, NULL },
    { "scaleAbsoluteWithFloat:withFloat:", "scaleAbsolute", "V", 0x1, NULL },
    { "scaleAbsoluteWidthWithFloat:", "scaleAbsoluteWidth", "V", 0x1, NULL },
    { "scaleAbsoluteHeightWithFloat:", "scaleAbsoluteHeight", "V", 0x1, NULL },
    { "scalePercentWithFloat:", "scalePercent", "V", 0x1, NULL },
    { "scalePercentWithFloat:withFloat:", "scalePercent", "V", 0x1, NULL },
    { "scaleToFitWithComItextpdfTextRectangle:", "scaleToFit", "V", 0x1, NULL },
    { "scaleToFitWithFloat:withFloat:", "scaleToFit", "V", 0x1, NULL },
    { "matrix", NULL, "[F", 0x1, NULL },
    { "matrixWithFloat:", "matrix", "[F", 0x1, NULL },
    { "getSerialId", NULL, "Ljava.lang.Long;", 0x2c, NULL },
    { "getMySerialId", NULL, "Ljava.lang.Long;", 0x1, NULL },
    { "getImageRotation", NULL, "F", 0x1, NULL },
    { "setRotationWithFloat:", "setRotation", "V", 0x1, NULL },
    { "setRotationDegreesWithFloat:", "setRotationDegrees", "V", 0x1, NULL },
    { "getInitialRotation", NULL, "F", 0x1, NULL },
    { "setInitialRotationWithFloat:", "setInitialRotation", "V", 0x1, NULL },
    { "getIndentationLeft", NULL, "F", 0x1, NULL },
    { "setIndentationLeftWithFloat:", "setIndentationLeft", "V", 0x1, NULL },
    { "getIndentationRight", NULL, "F", 0x1, NULL },
    { "setIndentationRightWithFloat:", "setIndentationRight", "V", 0x1, NULL },
    { "getSpacingBefore", NULL, "F", 0x1, NULL },
    { "setSpacingBeforeWithFloat:", "setSpacingBefore", "V", 0x1, NULL },
    { "getSpacingAfter", NULL, "F", 0x1, NULL },
    { "setSpacingAfterWithFloat:", "setSpacingAfter", "V", 0x1, NULL },
    { "getWidthPercentage", NULL, "F", 0x1, NULL },
    { "setWidthPercentageWithFloat:", "setWidthPercentage", "V", 0x1, NULL },
    { "isScaleToFitLineWhenOverflow", NULL, "Z", 0x1, NULL },
    { "setScaleToFitLineWhenOverflowWithBoolean:", "setScaleToFitLineWhenOverflow", "V", 0x1, NULL },
    { "isScaleToFitHeight", NULL, "Z", 0x1, NULL },
    { "setScaleToFitHeightWithBoolean:", "setScaleToFitHeight", "V", 0x1, NULL },
    { "setAnnotationWithComItextpdfTextAnnotation:", "setAnnotation", "V", 0x1, NULL },
    { "getAnnotation", NULL, "Lcom.itextpdf.text.Annotation;", 0x1, NULL },
    { "getLayer", NULL, "Lcom.itextpdf.text.pdf.PdfOCG;", 0x1, NULL },
    { "setLayerWithComItextpdfTextPdfPdfOCG:", "setLayer", "V", 0x1, NULL },
    { "isInterpolation", NULL, "Z", 0x1, NULL },
    { "setInterpolationWithBoolean:", "setInterpolation", "V", 0x1, NULL },
    { "getOriginalType", NULL, "I", 0x1, NULL },
    { "setOriginalTypeWithInt:", "setOriginalType", "V", 0x1, NULL },
    { "getOriginalData", NULL, "[B", 0x1, NULL },
    { "setOriginalDataWithByteArray:", "setOriginalData", "V", 0x1, NULL },
    { "isDeflated", NULL, "Z", 0x1, NULL },
    { "setDeflatedWithBoolean:", "setDeflated", "V", 0x1, NULL },
    { "getDpiX", NULL, "I", 0x1, NULL },
    { "getDpiY", NULL, "I", 0x1, NULL },
    { "setDpiWithInt:withInt:", "setDpi", "V", 0x1, NULL },
    { "getXYRatio", NULL, "F", 0x1, NULL },
    { "setXYRatioWithFloat:", "setXYRatio", "V", 0x1, NULL },
    { "getColorspace", NULL, "I", 0x1, NULL },
    { "setColorTransformWithInt:", "setColorTransform", "V", 0x1, NULL },
    { "getColorTransform", NULL, "I", 0x1, NULL },
    { "isInverted", NULL, "Z", 0x1, NULL },
    { "setInvertedWithBoolean:", "setInverted", "V", 0x1, NULL },
    { "tagICCWithComItextpdfTextPdfICC_Profile:", "tagICC", "V", 0x1, NULL },
    { "hasICCProfile", NULL, "Z", 0x1, NULL },
    { "getICCProfile", NULL, "Lcom.itextpdf.text.pdf.ICC_Profile;", 0x1, NULL },
    { "getAdditional", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "setAdditionalWithComItextpdfTextPdfPdfDictionary:", "setAdditional", "V", 0x1, NULL },
    { "simplifyColorspace", NULL, "V", 0x1, NULL },
    { "simplifyColorspaceWithComItextpdfTextPdfPdfArray:", "simplifyColorspace", "Lcom.itextpdf.text.pdf.PdfObject;", 0x2, NULL },
    { "isMask", NULL, "Z", 0x1, NULL },
    { "makeMask", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "isMaskCandidate", NULL, "Z", 0x1, NULL },
    { "getImageMask", NULL, "Lcom.itextpdf.text.Image;", 0x1, NULL },
    { "setImageMaskWithComItextpdfTextImage:", "setImageMask", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "isSmask", NULL, "Z", 0x1, NULL },
    { "setSmaskWithBoolean:", "setSmask", "V", 0x1, NULL },
    { "getTransparency", NULL, "[I", 0x1, NULL },
    { "setTransparencyWithIntArray:", "setTransparency", "V", 0x1, NULL },
    { "getCompressionLevel", NULL, "I", 0x1, NULL },
    { "setCompressionLevelWithInt:", "setCompressionLevel", "V", 0x1, NULL },
    { "getAccessibleAttributeWithComItextpdfTextPdfPdfName:", "getAccessibleAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAccessibleAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAccessibleAttribute", "V", 0x1, NULL },
    { "getAccessibleAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getRole", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "setRoleWithComItextpdfTextPdfPdfName:", "setRole", "V", 0x1, NULL },
    { "getId", NULL, "Lcom.itextpdf.text.AccessibleElementId;", 0x1, NULL },
    { "setIdWithComItextpdfTextAccessibleElementId:", "setId", "V", 0x1, NULL },
    { "isInline", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_DEFAULT },
    { "RIGHT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_RIGHT },
    { "LEFT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_LEFT },
    { "MIDDLE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_MIDDLE },
    { "TEXTWRAP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_TEXTWRAP },
    { "UNDERLYING_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_UNDERLYING },
    { "AX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_AX },
    { "AY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_AY },
    { "BX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_BX },
    { "BY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_BY },
    { "CX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_CX },
    { "CY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_CY },
    { "DX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_DX },
    { "DY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_DY },
    { "ORIGINAL_NONE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_NONE },
    { "ORIGINAL_JPEG_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_JPEG },
    { "ORIGINAL_PNG_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_PNG },
    { "ORIGINAL_GIF_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_GIF },
    { "ORIGINAL_BMP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_BMP },
    { "ORIGINAL_TIFF_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_TIFF },
    { "ORIGINAL_WMF_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_WMF },
    { "ORIGINAL_PS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_PS },
    { "ORIGINAL_JPEG2000_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_JPEG2000 },
    { "ORIGINAL_JBIG2_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextImage_ORIGINAL_JBIG2 },
    { "type__", "type", 0x4, "I", NULL,  },
    { "url_", NULL, 0x4, "Ljava.net.URL;", NULL,  },
    { "rawData_", NULL, 0x4, "[B", NULL,  },
    { "bpc_", NULL, 0x4, "I", NULL,  },
    { "template__", "template", 0x4, "[Lcom.itextpdf.text.pdf.PdfTemplate;", NULL,  },
    { "alignment_", NULL, 0x4, "I", NULL,  },
    { "alt_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "absoluteX_", NULL, 0x4, "F", NULL,  },
    { "absoluteY_", NULL, 0x4, "F", NULL,  },
    { "plainWidth_", NULL, 0x4, "F", NULL,  },
    { "plainHeight_", NULL, 0x4, "F", NULL,  },
    { "scaledWidth_", NULL, 0x4, "F", NULL,  },
    { "scaledHeight_", NULL, 0x4, "F", NULL,  },
    { "compressionLevel_", NULL, 0x4, "I", NULL,  },
    { "mySerialId_", NULL, 0x4, "Ljava.lang.Long;", NULL,  },
    { "role_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "accessibleAttributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "id__", "id", 0x2, "Lcom.itextpdf.text.AccessibleElementId;", NULL,  },
    { "directReference_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
    { "serialId_", NULL, 0x8, "J", &ComItextpdfTextImage_serialId_,  },
    { "rotationRadians_", NULL, 0x4, "F", NULL,  },
    { "initialRotation_", NULL, 0x2, "F", NULL,  },
    { "indentationLeft_", NULL, 0x4, "F", NULL,  },
    { "indentationRight_", NULL, 0x4, "F", NULL,  },
    { "spacingBefore_", NULL, 0x4, "F", NULL,  },
    { "spacingAfter_", NULL, 0x4, "F", NULL,  },
    { "widthPercentage_", NULL, 0x2, "F", NULL,  },
    { "scaleToFitLineWhenOverflow_", NULL, 0x4, "Z", NULL,  },
    { "scaleToFitHeight_", NULL, 0x4, "Z", NULL,  },
    { "annotation_", NULL, 0x4, "Lcom.itextpdf.text.Annotation;", NULL,  },
    { "layer_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfOCG;", NULL,  },
    { "interpolation_", NULL, 0x4, "Z", NULL,  },
    { "originalType_", NULL, 0x4, "I", NULL,  },
    { "originalData_", NULL, 0x4, "[B", NULL,  },
    { "deflated_", NULL, 0x4, "Z", NULL,  },
    { "dpiX_", NULL, 0x4, "I", NULL,  },
    { "dpiY_", NULL, 0x4, "I", NULL,  },
    { "XYRatio_", NULL, 0x2, "F", NULL,  },
    { "colorspace_", NULL, 0x4, "I", NULL,  },
    { "colortransform_", NULL, 0x4, "I", NULL,  },
    { "invert_", NULL, 0x4, "Z", NULL,  },
    { "profile_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ICC_Profile;", NULL,  },
    { "additional_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "mask_", NULL, 0x4, "Z", NULL,  },
    { "imageMask_", NULL, 0x4, "Lcom.itextpdf.text.Image;", NULL,  },
    { "smask_", NULL, 0x2, "Z", NULL,  },
    { "transparency_", NULL, 0x4, "[I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextImage = { "Image", "com.itextpdf.text", NULL, 0x401, 121, methods, 71, fields, 0, NULL};
  return &_ComItextpdfTextImage;
}

@end
