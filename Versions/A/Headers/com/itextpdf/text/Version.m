//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Version.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Version.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/Version.h"
#include "java/lang/Exception.h"
#include "java/lang/reflect/Method.h"


#line 55
@implementation ComItextpdfTextVersion

ComItextpdfTextVersion * ComItextpdfTextVersion_version__ = 
#line 86
nil;


#line 93
+ (ComItextpdfTextVersion *)getInstance {
  
#line 94
  if (ComItextpdfTextVersion_version__ == nil) {
    ComItextpdfTextVersion_version__ = [[ComItextpdfTextVersion alloc] init];
    @try {
      IOSClass *klass = [IOSClass forName:@"com.itextpdf.license.LicenseKey"];
      JavaLangReflectMethod *m = [((IOSClass *) nil_chk(klass)) getMethod:@"getLicenseeInfo" parameterTypes:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]]];
      IOSObjectArray *info = (IOSObjectArray *) check_class_cast([((JavaLangReflectMethod *) nil_chk(m)) invokeWithId:[klass newInstance] withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]], [IOSObjectArray class]);
      if (IOSObjectArray_Get(nil_chk(info), 3) != nil && ((jint) [((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(info, 3))) trim])) length]) > 0) {
        ComItextpdfTextVersion_version__->key_ = IOSObjectArray_Get(info, 3);
      }
      else {
        ComItextpdfTextVersion_version__->key_ = @"Trial version ";
        if (IOSObjectArray_Get(info, 5) == nil) {
          ComItextpdfTextVersion_version__->key_ = JreStrcat("$$", ComItextpdfTextVersion_version__->key_, @"unauthorised");
        }
        else {
          ComItextpdfTextVersion_version__->key_ = JreStrcat("$$", ComItextpdfTextVersion_version__->key_, IOSObjectArray_Get(info, 5));
        }
      }
      if (IOSObjectArray_Get(info, 4) != nil && ((jint) [((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(info, 4))) trim])) length]) > 0) {
        ComItextpdfTextVersion_version__->iTextVersion_ = IOSObjectArray_Get(info, 4);
      }
      else if (IOSObjectArray_Get(info, 2) != nil && ((jint) [((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(info, 2))) trim])) length]) > 0) {
        ComItextpdfTextVersion_version__->iTextVersion_ = JreStrcat("$$", ComItextpdfTextVersion_version__->iTextVersion_, JreStrcat("$$", @" (", IOSObjectArray_Get(info, 2)));
        if (![((NSString *) nil_chk([((NSString *) nil_chk(ComItextpdfTextVersion_version__->key_)) lowercaseString])) hasPrefix:@"trial"]) {
          ComItextpdfTextVersion_version__->iTextVersion_ = JreStrcat("$$", ComItextpdfTextVersion_version__->iTextVersion_, @"; licensed version)");
        }
        else {
          ComItextpdfTextVersion_version__->iTextVersion_ = JreStrcat("$$", ComItextpdfTextVersion_version__->iTextVersion_, JreStrcat("$$C", @"; ", ComItextpdfTextVersion_version__->key_, ')'));
        }
      }
      else
#line 125
      if (IOSObjectArray_Get(info, 0) != nil && ((jint) [((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(info, 0))) trim])) length]) > 0) {
        ComItextpdfTextVersion_version__->iTextVersion_ = JreStrcat("$$", ComItextpdfTextVersion_version__->iTextVersion_, JreStrcat("$$", @" (", IOSObjectArray_Get(info, 0)));
        if (![((NSString *) nil_chk([((NSString *) nil_chk(ComItextpdfTextVersion_version__->key_)) lowercaseString])) hasPrefix:@"trial"]) {
          
#line 130
          ComItextpdfTextVersion_version__->iTextVersion_ = JreStrcat("$$", ComItextpdfTextVersion_version__->iTextVersion_, @"; licensed version)");
        }
        else {
          ComItextpdfTextVersion_version__->iTextVersion_ = JreStrcat("$$", ComItextpdfTextVersion_version__->iTextVersion_, JreStrcat("$$C", @"; ", ComItextpdfTextVersion_version__->key_, ')'));
        }
      }
      else {
        @throw [[JavaLangException alloc] init];
      }
    }
    @catch (
#line 139
    JavaLangException *e) {
      ComItextpdfTextVersion_version__->iTextVersion_ = JreStrcat("$$", ComItextpdfTextVersion_version__->iTextVersion_, @" (AGPL-version)");
    }
  }
  return ComItextpdfTextVersion_version__;
}

- (NSString *)getProduct {
  
#line 153
  return iText_;
}


#line 162
- (NSString *)getRelease {
  
#line 163
  return release__;
}


#line 173
- (NSString *)getVersion {
  
#line 174
  return iTextVersion_;
}


#line 181
- (NSString *)getKey {
  
#line 182
  return key_;
}

- (instancetype)init {
  if (self = [super init]) {
    iText_ =
#line 64
    @"iText\u00ae";
    release__ =
#line 70
    @"5.5.0";
    key_ =
#line 75
    nil;
    iTextVersion_ = JreStrcat("$C$$",
#line 83
    iText_, ' ', release__, @" \u00a92000-2013 iText Group NV");
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextVersion *)other {
  [super copyAllFieldsTo:other];
  other->iText_ = iText_;
  other->iTextVersion_ = iTextVersion_;
  other->key_ = key_;
  other->release__ = release__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getInstance", NULL, "Lcom.itextpdf.text.Version;", 0x9, NULL },
    { "getProduct", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getRelease", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getVersion", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getKey", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iText_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "release__", "release", 0x2, "Ljava.lang.String;", NULL,  },
    { "key_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "iTextVersion_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "version__", "version", 0xa, "Lcom.itextpdf.text.Version;", &ComItextpdfTextVersion_version__,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextVersion = { "Version", "com.itextpdf.text", NULL, 0x11, 6, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextVersion;
}

@end
