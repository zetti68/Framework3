//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Document.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Document.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/ChapterAutoNumber.h"
#include "com/itextpdf/text/DocListener.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Header.h"
#include "com/itextpdf/text/LargeElement.h"
#include "com/itextpdf/text/Meta.h"
#include "com/itextpdf/text/PageSize.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/Version.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"


#line 99
@implementation ComItextpdfTextDocument

jboolean ComItextpdfTextDocument_compress_ = 
#line 105
YES;
jboolean ComItextpdfTextDocument_plainRandomAccess_ = 
#line 111
NO;
jfloat ComItextpdfTextDocument_wmfFontCorrection_ = 
#line 114
0.86f;


#line 181
- (instancetype)init {
  return
#line 182
  [self initComItextpdfTextDocumentWithComItextpdfTextRectangle:ComItextpdfTextPageSize_get_A4_()];
}


#line 192
- (instancetype)initComItextpdfTextDocumentWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize {
  return
#line 193
  [self initComItextpdfTextDocumentWithComItextpdfTextRectangle:pageSize withFloat:36 withFloat:36 withFloat:36 withFloat:36];
}

- (instancetype)initWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize {
  return [self initComItextpdfTextDocumentWithComItextpdfTextRectangle:
#line 192
pageSize];
}


#line 211
- (instancetype)initComItextpdfTextDocumentWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize
                                                              withFloat:(jfloat)marginLeft
                                                              withFloat:(jfloat)marginRight
                                                              withFloat:(jfloat)marginTop
                                                              withFloat:(jfloat)marginBottom {
  if (self = [super init]) {
    listeners_ =
#line 120
    [[JavaUtilArrayList alloc] init];
    marginLeft_ =
#line 134
    0;
    marginRight_ =
#line 137
    0;
    marginTop_ =
#line 140
    0;
    marginBottom_ =
#line 143
    0;
    marginMirroring_ =
#line 146
    NO;
    marginMirroringTopBottom_ =
#line 152
    NO;
    javaScript_onLoad_ =
#line 155
    nil;
    javaScript_onUnLoad_ =
#line 158
    nil;
    htmlStyleClass_ =
#line 161
    nil;
    pageN_ =
#line 166
    0;
    chapternumber_ =
#line 169
    0;
    role_ = ComItextpdfTextPdfPdfName_get_DOCUMENT_();
    accessibleAttributes_ =
#line 172
    nil;
    id__ =
#line 173
    [[ComItextpdfTextAccessibleElementId alloc] init];
    
#line 213
    self->pageSize_ = pageSize;
    
#line 214
    self->marginLeft_ = marginLeft;
    
#line 215
    self->marginRight_ = marginRight;
    
#line 216
    self->marginTop_ = marginTop;
    
#line 217
    self->marginBottom_ = marginBottom;
  }
  return self;
}

- (instancetype)initWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize
                                       withFloat:(jfloat)marginLeft
                                       withFloat:(jfloat)marginRight
                                       withFloat:(jfloat)marginTop
                                       withFloat:(jfloat)marginBottom {
  return [self initComItextpdfTextDocumentWithComItextpdfTextRectangle:
#line 211
pageSize withFloat:marginLeft withFloat:marginRight withFloat:
#line 212
marginTop withFloat:marginBottom];
}


#line 229
- (void)addDocListenerWithComItextpdfTextDocListener:(id<ComItextpdfTextDocListener>)listener {
  
#line 230
  [((JavaUtilArrayList *) nil_chk(listeners_)) addWithId:listener];
  if ([(id) listener conformsToProtocol: @protocol(ComItextpdfTextPdfInterfacesIAccessibleElement)]) {
    id<ComItextpdfTextPdfInterfacesIAccessibleElement> ae = (id<ComItextpdfTextPdfInterfacesIAccessibleElement>) check_protocol_cast(listener, @protocol(ComItextpdfTextPdfInterfacesIAccessibleElement));
    [((id<ComItextpdfTextPdfInterfacesIAccessibleElement>) nil_chk(ae)) setRoleWithComItextpdfTextPdfPdfName:self->role_];
    [ae setIdWithComItextpdfTextAccessibleElementId:self->id__];
    if (self->accessibleAttributes_ != nil) {
      for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([self->accessibleAttributes_ keySet]))
#line 237
      [ae setAccessibleAttributeWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[self->accessibleAttributes_ getWithId:key]];
    }
  }
}


#line 249
- (void)removeDocListenerWithComItextpdfTextDocListener:(id<ComItextpdfTextDocListener>)listener {
  
#line 250
  [((JavaUtilArrayList *) nil_chk(listeners_)) removeWithId:listener];
}


#line 266
- (jboolean)addWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element {
  
#line 267
  if (close__) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.has.been.closed.you.can.t.add.any.elements" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if (!open__ && [((id<ComItextpdfTextElement>) nil_chk(element)) isContent]) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.is.not.open.yet.you.can.only.add.meta.information" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  jboolean success = NO;
  if ([(id) element isKindOfClass:[ComItextpdfTextChapterAutoNumber class]]) {
    chapternumber_ = [((ComItextpdfTextChapterAutoNumber *) nil_chk(((ComItextpdfTextChapterAutoNumber *) check_class_cast(element, [ComItextpdfTextChapterAutoNumber class])))) setAutomaticNumberWithInt:chapternumber_];
  }
  for (id<ComItextpdfTextDocListener> __strong listener in nil_chk(listeners_)) {
    success |= [((id<ComItextpdfTextDocListener>) nil_chk(listener)) addWithComItextpdfTextElement:element];
  }
  if ([(id) element conformsToProtocol: @protocol(ComItextpdfTextLargeElement)]) {
    id<ComItextpdfTextLargeElement> e = (id<ComItextpdfTextLargeElement>) check_protocol_cast(element, @protocol(ComItextpdfTextLargeElement));
    if (![((id<ComItextpdfTextLargeElement>) nil_chk(e)) isComplete])
#line 283
    [e flushContent];
  }
  return success;
}


#line 296
- (void)open {
  
#line 297
  if (!close__) {
    open__ = YES;
  }
  for (id<ComItextpdfTextDocListener> __strong listener in nil_chk(listeners_)) {
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) setPageSizeWithComItextpdfTextRectangle:pageSize_];
    [listener setMarginsWithFloat:marginLeft_ withFloat:marginRight_ withFloat:marginTop_ withFloat:
#line 303
    marginBottom_];
    [listener open];
  }
}


#line 316
- (jboolean)setPageSizeWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize {
  
#line 317
  self->pageSize_ = pageSize;
  for (id<ComItextpdfTextDocListener> __strong listener in nil_chk(listeners_)) {
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) setPageSizeWithComItextpdfTextRectangle:pageSize];
  }
  return YES;
}


#line 338
- (jboolean)setMarginsWithFloat:(jfloat)marginLeft
                      withFloat:(jfloat)marginRight
                      withFloat:(jfloat)marginTop
                      withFloat:(jfloat)marginBottom {
  
#line 340
  self->marginLeft_ = marginLeft;
  self->marginRight_ = marginRight;
  self->marginTop_ = marginTop;
  self->marginBottom_ = marginBottom;
  for (id<ComItextpdfTextDocListener> __strong listener in nil_chk(listeners_)) {
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) setMarginsWithFloat:marginLeft withFloat:marginRight withFloat:marginTop withFloat:
#line 346
    marginBottom];
  }
  return YES;
}


#line 358
- (jboolean)newPage {
  
#line 359
  if (!open__ || close__) {
    return NO;
  }
  for (id<ComItextpdfTextDocListener> __strong listener in nil_chk(listeners_)) {
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) newPage];
  }
  return YES;
}


#line 372
- (void)resetPageCount {
  
#line 373
  pageN_ = 0;
  for (id<ComItextpdfTextDocListener> __strong listener in nil_chk(listeners_)) {
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) resetPageCount];
  }
}


#line 386
- (void)setPageCountWithInt:(jint)pageN {
  
#line 387
  self->pageN_ = pageN;
  for (id<ComItextpdfTextDocListener> __strong listener in nil_chk(listeners_)) {
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) setPageCountWithInt:pageN];
  }
}


#line 399
- (jint)getPageNumber {
  
#line 400
  return self->pageN_;
}


#line 410
- (void)close {
  
#line 411
  if (!close__) {
    open__ = NO;
    close__ = YES;
  }
  for (id<ComItextpdfTextDocListener> __strong listener in nil_chk(listeners_)) {
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) close];
  }
}


#line 432
- (jboolean)addHeaderWithNSString:(NSString *)name
                     withNSString:(NSString *)content {
  
#line 433
  @try {
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextHeader alloc] initWithNSString:name withNSString:content]];
  }
  @catch (
#line 435
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 448
- (jboolean)addTitleWithNSString:(NSString *)title {
  
#line 449
  @try {
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextMeta alloc] initWithInt:ComItextpdfTextElement_TITLE withNSString:title]];
  }
  @catch (
#line 451
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 464
- (jboolean)addSubjectWithNSString:(NSString *)subject {
  
#line 465
  @try {
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextMeta alloc] initWithInt:ComItextpdfTextElement_SUBJECT withNSString:subject]];
  }
  @catch (
#line 467
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 480
- (jboolean)addKeywordsWithNSString:(NSString *)keywords {
  
#line 481
  @try {
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextMeta alloc] initWithInt:ComItextpdfTextElement_KEYWORDS withNSString:keywords]];
  }
  @catch (
#line 483
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 496
- (jboolean)addAuthorWithNSString:(NSString *)author {
  
#line 497
  @try {
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextMeta alloc] initWithInt:ComItextpdfTextElement_AUTHOR withNSString:author]];
  }
  @catch (
#line 499
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 512
- (jboolean)addCreatorWithNSString:(NSString *)creator {
  
#line 513
  @try {
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextMeta alloc] initWithInt:ComItextpdfTextElement_CREATOR withNSString:creator]];
  }
  @catch (
#line 515
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 526
- (jboolean)addProducer {
  
#line 527
  @try {
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextMeta alloc] initWithInt:ComItextpdfTextElement_PRODUCER withNSString:[((ComItextpdfTextVersion *) nil_chk([ComItextpdfTextVersion getInstance])) getVersion]]];
  }
  @catch (
#line 529
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}

- (jboolean)addLanguageWithNSString:(NSString *)language {
  
#line 540
  @try {
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextMeta alloc] initWithInt:ComItextpdfTextElement_LANGUAGE withNSString:language]];
  }
  @catch (
#line 542
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 553
- (jboolean)addCreationDate {
  
#line 554
  @try {
    
#line 556
    JavaTextSimpleDateFormat *sdf = [[JavaTextSimpleDateFormat alloc] initWithNSString:
#line 557
    @"EEE MMM dd HH:mm:ss zzz yyyy"];
    return [self addWithComItextpdfTextElement:[[ComItextpdfTextMeta alloc] initWithInt:ComItextpdfTextElement_CREATIONDATE withNSString:[sdf formatWithJavaUtilDate:[[JavaUtilDate alloc] init]]]];
  }
  @catch (
#line 559
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 572
- (jfloat)leftMargin {
  
#line 573
  return marginLeft_;
}


#line 582
- (jfloat)rightMargin {
  
#line 583
  return marginRight_;
}


#line 592
- (jfloat)topMargin {
  
#line 593
  return marginTop_;
}


#line 602
- (jfloat)bottomMargin {
  
#line 603
  return marginBottom_;
}


#line 612
- (jfloat)left {
  
#line 613
  return [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getLeftWithFloat:marginLeft_];
}


#line 622
- (jfloat)right {
  
#line 623
  return [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getRightWithFloat:marginRight_];
}


#line 632
- (jfloat)top {
  
#line 633
  return [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getTopWithFloat:marginTop_];
}


#line 642
- (jfloat)bottom {
  
#line 643
  return [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getBottomWithFloat:marginBottom_];
}


#line 654
- (jfloat)leftWithFloat:(jfloat)margin {
  
#line 655
  return [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getLeftWithFloat:marginLeft_ + margin];
}


#line 666
- (jfloat)rightWithFloat:(jfloat)margin {
  
#line 667
  return [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getRightWithFloat:marginRight_ + margin];
}


#line 678
- (jfloat)topWithFloat:(jfloat)margin {
  
#line 679
  return [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getTopWithFloat:marginTop_ + margin];
}


#line 690
- (jfloat)bottomWithFloat:(jfloat)margin {
  
#line 691
  return [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getBottomWithFloat:marginBottom_ + margin];
}


#line 700
- (ComItextpdfTextRectangle *)getPageSize {
  
#line 701
  return self->pageSize_;
}


#line 709
- (jboolean)isOpen {
  
#line 710
  return open__;
}


#line 720
- (void)setJavaScript_onLoadWithNSString:(NSString *)code {
  
#line 721
  self->javaScript_onLoad_ = code;
}


#line 730
- (NSString *)getJavaScript_onLoad {
  
#line 731
  return self->javaScript_onLoad_;
}


#line 741
- (void)setJavaScript_onUnLoadWithNSString:(NSString *)code {
  
#line 742
  self->javaScript_onUnLoad_ = code;
}


#line 751
- (NSString *)getJavaScript_onUnLoad {
  
#line 752
  return self->javaScript_onUnLoad_;
}


#line 762
- (void)setHtmlStyleClassWithNSString:(NSString *)htmlStyleClass {
  
#line 763
  self->htmlStyleClass_ = htmlStyleClass;
}


#line 772
- (NSString *)getHtmlStyleClass {
  
#line 773
  return self->htmlStyleClass_;
}


#line 783
- (jboolean)setMarginMirroringWithBoolean:(jboolean)marginMirroring {
  
#line 784
  self->marginMirroring_ = marginMirroring;
  id<ComItextpdfTextDocListener> listener;
  for (id __strong element in nil_chk(listeners_)) {
    listener = (id<ComItextpdfTextDocListener>) check_protocol_cast(element, @protocol(ComItextpdfTextDocListener));
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) setMarginMirroringWithBoolean:marginMirroring];
  }
  return YES;
}


#line 801
- (jboolean)setMarginMirroringTopBottomWithBoolean:(jboolean)marginMirroringTopBottom {
  
#line 802
  self->marginMirroringTopBottom_ = marginMirroringTopBottom;
  id<ComItextpdfTextDocListener> listener;
  for (id __strong element in nil_chk(listeners_)) {
    listener = (id<ComItextpdfTextDocListener>) check_protocol_cast(element, @protocol(ComItextpdfTextDocListener));
    [((id<ComItextpdfTextDocListener>) nil_chk(listener)) setMarginMirroringTopBottomWithBoolean:marginMirroringTopBottom];
  }
  return YES;
}


#line 816
- (jboolean)isMarginMirroring {
  
#line 817
  return marginMirroring_;
}


#line 820
- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 821
  if (accessibleAttributes_ != nil)
#line 822
  return [accessibleAttributes_ getWithId:key];
  else
#line 824
  return nil;
}


#line 827
- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 828
  if (accessibleAttributes_ == nil)
#line 829
  accessibleAttributes_ = [[JavaUtilHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(accessibleAttributes_)) putWithId:key withId:value];
}


#line 833
- (JavaUtilHashMap *)getAccessibleAttributes {
  
#line 834
  return accessibleAttributes_;
}


#line 837
- (ComItextpdfTextPdfPdfName *)getRole {
  
#line 838
  return role_;
}


#line 841
- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role {
  
#line 842
  self->role_ = role;
}


#line 845
- (ComItextpdfTextAccessibleElementId *)getId {
  
#line 846
  return id__;
}


#line 849
- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_ {
  
#line 850
  self->id__ = id_;
}


#line 853
- (jboolean)isInline {
  
#line 854
  return NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextDocument *)other {
  [super copyAllFieldsTo:other];
  other->accessibleAttributes_ = accessibleAttributes_;
  other->chapternumber_ = chapternumber_;
  other->close__ = close__;
  other->htmlStyleClass_ = htmlStyleClass_;
  other->id__ = id__;
  other->javaScript_onLoad_ = javaScript_onLoad_;
  other->javaScript_onUnLoad_ = javaScript_onUnLoad_;
  other->listeners_ = listeners_;
  other->marginBottom_ = marginBottom_;
  other->marginLeft_ = marginLeft_;
  other->marginMirroring_ = marginMirroring_;
  other->marginMirroringTopBottom_ = marginMirroringTopBottom_;
  other->marginRight_ = marginRight_;
  other->marginTop_ = marginTop_;
  other->open__ = open__;
  other->pageN_ = pageN_;
  other->pageSize_ = pageSize_;
  other->role_ = role_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Document", NULL, 0x1, NULL },
    { "initWithComItextpdfTextRectangle:", "Document", NULL, 0x1, NULL },
    { "initWithComItextpdfTextRectangle:withFloat:withFloat:withFloat:withFloat:", "Document", NULL, 0x1, NULL },
    { "addDocListenerWithComItextpdfTextDocListener:", "addDocListener", "V", 0x1, NULL },
    { "removeDocListenerWithComItextpdfTextDocListener:", "removeDocListener", "V", 0x1, NULL },
    { "addWithComItextpdfTextElement:", "add", "Z", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "open", NULL, "V", 0x1, NULL },
    { "setPageSizeWithComItextpdfTextRectangle:", "setPageSize", "Z", 0x1, NULL },
    { "setMarginsWithFloat:withFloat:withFloat:withFloat:", "setMargins", "Z", 0x1, NULL },
    { "newPage", NULL, "Z", 0x1, NULL },
    { "resetPageCount", NULL, "V", 0x1, NULL },
    { "setPageCountWithInt:", "setPageCount", "V", 0x1, NULL },
    { "getPageNumber", NULL, "I", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "addHeaderWithNSString:withNSString:", "addHeader", "Z", 0x1, NULL },
    { "addTitleWithNSString:", "addTitle", "Z", 0x1, NULL },
    { "addSubjectWithNSString:", "addSubject", "Z", 0x1, NULL },
    { "addKeywordsWithNSString:", "addKeywords", "Z", 0x1, NULL },
    { "addAuthorWithNSString:", "addAuthor", "Z", 0x1, NULL },
    { "addCreatorWithNSString:", "addCreator", "Z", 0x1, NULL },
    { "addProducer", NULL, "Z", 0x1, NULL },
    { "addLanguageWithNSString:", "addLanguage", "Z", 0x1, NULL },
    { "addCreationDate", NULL, "Z", 0x1, NULL },
    { "leftMargin", NULL, "F", 0x1, NULL },
    { "rightMargin", NULL, "F", 0x1, NULL },
    { "topMargin", NULL, "F", 0x1, NULL },
    { "bottomMargin", NULL, "F", 0x1, NULL },
    { "left", NULL, "F", 0x1, NULL },
    { "right", NULL, "F", 0x1, NULL },
    { "top", NULL, "F", 0x1, NULL },
    { "bottom", NULL, "F", 0x1, NULL },
    { "leftWithFloat:", "left", "F", 0x1, NULL },
    { "rightWithFloat:", "right", "F", 0x1, NULL },
    { "topWithFloat:", "top", "F", 0x1, NULL },
    { "bottomWithFloat:", "bottom", "F", 0x1, NULL },
    { "getPageSize", NULL, "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "isOpen", NULL, "Z", 0x1, NULL },
    { "setJavaScript_onLoadWithNSString:", "setJavaScript_onLoad", "V", 0x1, NULL },
    { "getJavaScript_onLoad", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setJavaScript_onUnLoadWithNSString:", "setJavaScript_onUnLoad", "V", 0x1, NULL },
    { "getJavaScript_onUnLoad", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setHtmlStyleClassWithNSString:", "setHtmlStyleClass", "V", 0x1, NULL },
    { "getHtmlStyleClass", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setMarginMirroringWithBoolean:", "setMarginMirroring", "Z", 0x1, NULL },
    { "setMarginMirroringTopBottomWithBoolean:", "setMarginMirroringTopBottom", "Z", 0x1, NULL },
    { "isMarginMirroring", NULL, "Z", 0x1, NULL },
    { "getAccessibleAttributeWithComItextpdfTextPdfPdfName:", "getAccessibleAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAccessibleAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAccessibleAttribute", "V", 0x1, NULL },
    { "getAccessibleAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getRole", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "setRoleWithComItextpdfTextPdfPdfName:", "setRole", "V", 0x1, NULL },
    { "getId", NULL, "Lcom.itextpdf.text.AccessibleElementId;", 0x1, NULL },
    { "setIdWithComItextpdfTextAccessibleElementId:", "setId", "V", 0x1, NULL },
    { "isInline", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "compress_", NULL, 0x9, "Z", &ComItextpdfTextDocument_compress_,  },
    { "plainRandomAccess_", NULL, 0x9, "Z", &ComItextpdfTextDocument_plainRandomAccess_,  },
    { "wmfFontCorrection_", NULL, 0x9, "F", &ComItextpdfTextDocument_wmfFontCorrection_,  },
    { "listeners_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "open__", "open", 0x4, "Z", NULL,  },
    { "close__", "close", 0x4, "Z", NULL,  },
    { "pageSize_", NULL, 0x4, "Lcom.itextpdf.text.Rectangle;", NULL,  },
    { "marginLeft_", NULL, 0x4, "F", NULL,  },
    { "marginRight_", NULL, 0x4, "F", NULL,  },
    { "marginTop_", NULL, 0x4, "F", NULL,  },
    { "marginBottom_", NULL, 0x4, "F", NULL,  },
    { "marginMirroring_", NULL, 0x4, "Z", NULL,  },
    { "marginMirroringTopBottom_", NULL, 0x4, "Z", NULL,  },
    { "javaScript_onLoad_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "javaScript_onUnLoad_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "htmlStyleClass_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "pageN_", NULL, 0x4, "I", NULL,  },
    { "chapternumber_", NULL, 0x4, "I", NULL,  },
    { "role_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "accessibleAttributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "id__", "id", 0x4, "Lcom.itextpdf.text.AccessibleElementId;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextDocument = { "Document", "com.itextpdf.text", NULL, 0x1, 54, methods, 21, fields, 0, NULL};
  return &_ComItextpdfTextDocument;
}

@end
