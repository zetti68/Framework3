//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfContentByte.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfContentByte.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/awt/geom/AffineTransform.h"
#include "com/itextpdf/awt/geom/Point2D.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/Annotation.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/ImgJBIG2.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/IllegalPdfSyntaxException.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/CMYKColor.h"
#include "com/itextpdf/text/pdf/ColorDetails.h"
#include "com/itextpdf/text/pdf/ExtendedColor.h"
#include "com/itextpdf/text/pdf/FontDetails.h"
#include "com/itextpdf/text/pdf/GrayColor.h"
#include "com/itextpdf/text/pdf/PageResources.h"
#include "com/itextpdf/text/pdf/PatternColor.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfAppearance.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDestination.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfDocument.h"
#include "com/itextpdf/text/pdf/PdfGState.h"
#include "com/itextpdf/text/pdf/PdfImage.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLayer.h"
#include "com/itextpdf/text/pdf/PdfLayerMembership.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfOCG.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfOutline.h"
#include "com/itextpdf/text/pdf/PdfPSXObject.h"
#include "com/itextpdf/text/pdf/PdfPatternPainter.h"
#include "com/itextpdf/text/pdf/PdfShading.h"
#include "com/itextpdf/text/pdf/PdfShadingPattern.h"
#include "com/itextpdf/text/pdf/PdfSpotColor.h"
#include "com/itextpdf/text/pdf/PdfStructureElement.h"
#include "com/itextpdf/text/pdf/PdfStructureTreeRoot.h"
#include "com/itextpdf/text/pdf/PdfTemplate.h"
#include "com/itextpdf/text/pdf/PdfTextArray.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/ShadingColor.h"
#include "com/itextpdf/text/pdf/SpotColor.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"
#include "com/itextpdf/text/pdf/internal/PdfAnnotationsImp.h"
#include "com/itextpdf/text/pdf/internal/PdfIsoKeys.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfPdfContentByte_initialized = NO;


#line 66
@implementation ComItextpdfTextPdfPdfContentByte

IOSFloatArray * ComItextpdfTextPdfPdfContentByte_unitRect_;
JavaUtilHashMap * ComItextpdfTextPdfPdfContentByte_abrev_;


#line 248
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)wr {
  if (self = [super init]) {
    content_ =
#line 195
    [[ComItextpdfTextPdfByteBuffer alloc] init];
    markedContentSize_ =
#line 197
    0;
    state_ =
#line 206
    [[ComItextpdfTextPdfPdfContentByte_GraphicState alloc] init];
    stateList_ =
#line 209
    [[JavaUtilArrayList alloc] init];
    separator_ =
#line 216
    0x000a;
    mcDepth_ =
#line 218
    0;
    inText_ =
#line 219
    NO;
    mcElements_ =
#line 223
    [[JavaUtilArrayList alloc] init];
    duplicatedFrom_ =
#line 225
    nil;
    
#line 249
    if (wr != nil) {
      writer_ = wr;
      pdf_ = [writer_ getPdfDocument];
    }
  }
  return self;
}

- (NSString *)description {
  
#line 265
  return [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) description];
}


#line 272
- (jboolean)isTagged {
  
#line 273
  return writer_ != nil && [writer_ isTagged];
}


#line 281
- (ComItextpdfTextPdfByteBuffer *)getInternalBuffer {
  
#line 282
  return content_;
}


#line 291
- (IOSByteArray *)toPdfWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 292
  [self sanityCheck];
  return [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) toByteArray];
}


#line 304
- (void)addWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)other {
  
#line 305
  if (((ComItextpdfTextPdfPdfContentByte *) nil_chk(other))->writer_ != nil && writer_ != other->writer_)
#line 306
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"inconsistent.writers.are.you.mixing.two.documents" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithComItextpdfTextPdfByteBuffer:other->content_];
  markedContentSize_ += other->markedContentSize_;
}


#line 316
- (jfloat)getXTLM {
  
#line 317
  return ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->xTLM_;
}


#line 325
- (jfloat)getYTLM {
  
#line 326
  return ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->yTLM_;
}


#line 334
- (jfloat)getLeading {
  
#line 335
  return ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->leading_;
}


#line 343
- (jfloat)getCharacterSpacing {
  
#line 344
  return ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->charSpace_;
}


#line 352
- (jfloat)getWordSpacing {
  
#line 353
  return ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->wordSpace_;
}


#line 361
- (jfloat)getHorizontalScaling {
  
#line 362
  return ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->scale__;
}


#line 374
- (void)setFlatnessWithFloat:(jfloat)flatness {
  
#line 375
  if (flatness >= 0 && flatness <= 100) {
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:flatness])) appendWithNSString:@" i"])) append_iWithInt:separator_];
  }
}


#line 390
- (void)setLineCapWithInt:(jint)style {
  
#line 391
  if (style >= 0 && style <= 2) {
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithInt:style])) appendWithNSString:@" J"])) append_iWithInt:separator_];
  }
}


#line 407
- (void)setLineDashWithFloat:(jfloat)phase {
  
#line 408
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"[] "])) appendWithFloat:phase])) appendWithNSString:@" d"])) append_iWithInt:separator_];
}


#line 423
- (void)setLineDashWithFloat:(jfloat)unitsOn
                   withFloat:(jfloat)phase {
  
#line 424
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"["])) appendWithFloat:unitsOn])) appendWithNSString:@"] "])) appendWithFloat:phase])) appendWithNSString:@" d"])) append_iWithInt:separator_];
}


#line 440
- (void)setLineDashWithFloat:(jfloat)unitsOn
                   withFloat:(jfloat)unitsOff
                   withFloat:(jfloat)phase {
  
#line 441
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"["])) appendWithFloat:unitsOn])) appendWithChar:' '])) appendWithFloat:unitsOff])) appendWithNSString:@"] "])) appendWithFloat:phase])) appendWithNSString:@" d"])) append_iWithInt:separator_];
}


#line 456
- (void)setLineDashWithFloatArray:(IOSFloatArray *)array
                        withFloat:(jfloat)phase {
  
#line 457
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"["];
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(array))->size_; i++) {
    (void) [content_ appendWithFloat:IOSFloatArray_Get(array, i)];
    if (i < array->size_ - 1) (void) [content_ appendWithChar:' '];
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithNSString:@"] "])) appendWithFloat:phase])) appendWithNSString:@" d"])) append_iWithInt:separator_];
}


#line 475
- (void)setLineJoinWithInt:(jint)style {
  
#line 476
  if (style >= 0 && style <= 2) {
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithInt:style])) appendWithNSString:@" j"])) append_iWithInt:separator_];
  }
}


#line 490
- (void)setLineWidthWithFloat:(jfloat)w {
  
#line 491
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:w])) appendWithNSString:@" w"])) append_iWithInt:separator_];
}


#line 505
- (void)setMiterLimitWithFloat:(jfloat)miterLimit {
  
#line 506
  if (miterLimit > 1) {
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:miterLimit])) appendWithNSString:@" M"])) append_iWithInt:separator_];
  }
}


#line 517
- (void)clip {
  
#line 518
  if (inText_ && [self isTagged]) {
    [self endText];
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"W"])) append_iWithInt:separator_];
}


#line 529
- (void)eoClip {
  
#line 530
  if (inText_ && [self isTagged]) {
    [self endText];
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"W*"])) append_iWithInt:separator_];
}


#line 545
- (void)setGrayFillWithFloat:(jfloat)gray {
  
#line 546
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfGrayColor alloc] initWithFloat:gray] withBoolean:YES];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:gray])) appendWithNSString:@" g"])) append_iWithInt:separator_];
}


#line 554
- (void)resetGrayFill {
  
#line 555
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfGrayColor alloc] initWithInt:0] withBoolean:YES];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"0 g"])) append_iWithInt:separator_];
}


#line 568
- (void)setGrayStrokeWithFloat:(jfloat)gray {
  
#line 569
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfGrayColor alloc] initWithFloat:gray] withBoolean:NO];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:gray])) appendWithNSString:@" G"])) append_iWithInt:separator_];
}


#line 577
- (void)resetGrayStroke {
  
#line 578
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfGrayColor alloc] initWithInt:0] withBoolean:NO];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"0 G"])) append_iWithInt:separator_];
}


#line 588
- (void)HelperRGBWithFloat:(jfloat)red
                 withFloat:(jfloat)green
                 withFloat:(jfloat)blue {
  
#line 589
  if (red < 0)
#line 590
  red = 0.0f;
  else if (red > 1.0f)
#line 592
  red = 1.0f;
  if (green < 0)
#line 594
  green = 0.0f;
  else if (green > 1.0f)
#line 596
  green = 1.0f;
  if (blue < 0)
#line 598
  blue = 0.0f;
  else if (blue > 1.0f)
#line 600
  blue = 1.0f;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:red])) appendWithChar:' '])) appendWithFloat:green])) appendWithChar:' '])) appendWithFloat:blue];
}


#line 618
- (void)setRGBColorFillFWithFloat:(jfloat)red
                        withFloat:(jfloat)green
                        withFloat:(jfloat)blue {
  
#line 619
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithFloat:red withFloat:green withFloat:blue] withBoolean:YES];
  [self HelperRGBWithFloat:red withFloat:green withFloat:blue];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@" rg"])) append_iWithInt:separator_];
}

- (void)resetRGBColorFill {
  
#line 629
  [self resetGrayFill];
}


#line 646
- (void)setRGBColorStrokeFWithFloat:(jfloat)red
                          withFloat:(jfloat)green
                          withFloat:(jfloat)blue {
  
#line 647
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithFloat:red withFloat:green withFloat:blue] withBoolean:NO];
  [self HelperRGBWithFloat:red withFloat:green withFloat:blue];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@" RG"])) append_iWithInt:separator_];
}


#line 657
- (void)resetRGBColorStroke {
  
#line 658
  [self resetGrayStroke];
}


#line 669
- (void)HelperCMYKWithFloat:(jfloat)cyan
                  withFloat:(jfloat)magenta
                  withFloat:(jfloat)yellow
                  withFloat:(jfloat)black {
  
#line 670
  if (cyan < 0)
#line 671
  cyan = 0.0f;
  else if (cyan > 1.0f)
#line 673
  cyan = 1.0f;
  if (magenta < 0)
#line 675
  magenta = 0.0f;
  else if (magenta > 1.0f)
#line 677
  magenta = 1.0f;
  if (yellow < 0)
#line 679
  yellow = 0.0f;
  else if (yellow > 1.0f)
#line 681
  yellow = 1.0f;
  if (black < 0)
#line 683
  black = 0.0f;
  else if (black > 1.0f)
#line 685
  black = 1.0f;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:cyan])) appendWithChar:' '])) appendWithFloat:magenta])) appendWithChar:' '])) appendWithFloat:yellow])) appendWithChar:' '])) appendWithFloat:black];
}


#line 704
- (void)setCMYKColorFillFWithFloat:(jfloat)cyan
                         withFloat:(jfloat)magenta
                         withFloat:(jfloat)yellow
                         withFloat:(jfloat)black {
  
#line 705
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfCMYKColor alloc] initWithFloat:cyan withFloat:magenta withFloat:yellow withFloat:black] withBoolean:YES];
  [self HelperCMYKWithFloat:cyan withFloat:magenta withFloat:yellow withFloat:black];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@" k"])) append_iWithInt:separator_];
}

- (void)resetCMYKColorFill {
  
#line 716
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfCMYKColor alloc] initWithInt:0 withInt:0 withInt:0 withInt:1] withBoolean:YES];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"0 0 0 1 k"])) append_iWithInt:separator_];
}


#line 735
- (void)setCMYKColorStrokeFWithFloat:(jfloat)cyan
                           withFloat:(jfloat)magenta
                           withFloat:(jfloat)yellow
                           withFloat:(jfloat)black {
  
#line 736
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfCMYKColor alloc] initWithFloat:cyan withFloat:magenta withFloat:yellow withFloat:black] withBoolean:NO];
  [self HelperCMYKWithFloat:cyan withFloat:magenta withFloat:yellow withFloat:black];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@" K"])) append_iWithInt:separator_];
}

- (void)resetCMYKColorStroke {
  
#line 747
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfCMYKColor alloc] initWithInt:0 withInt:0 withInt:0 withInt:1] withBoolean:NO];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"0 0 0 1 K"])) append_iWithInt:separator_];
}


#line 758
- (void)moveToWithFloat:(jfloat)x
              withFloat:(jfloat)y {
  
#line 759
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 763
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithNSString:@" m"])) append_iWithInt:separator_];
}


#line 777
- (void)lineToWithFloat:(jfloat)x
              withFloat:(jfloat)y {
  
#line 778
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 782
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithNSString:@" l"])) append_iWithInt:separator_];
}


#line 799
- (void)curveToWithFloat:(jfloat)x1
               withFloat:(jfloat)y1
               withFloat:(jfloat)x2
               withFloat:(jfloat)y2
               withFloat:(jfloat)x3
               withFloat:(jfloat)y3 {
  
#line 800
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 804
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:x1])) appendWithChar:' '])) appendWithFloat:y1])) appendWithChar:' '])) appendWithFloat:x2])) appendWithChar:' '])) appendWithFloat:y2])) appendWithChar:' '])) appendWithFloat:x3])) appendWithChar:' '])) appendWithFloat:y3])) appendWithNSString:@" c"])) append_iWithInt:separator_];
}


#line 819
- (void)curveToWithFloat:(jfloat)x2
               withFloat:(jfloat)y2
               withFloat:(jfloat)x3
               withFloat:(jfloat)y3 {
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 824
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:x2])) appendWithChar:' '])) appendWithFloat:y2])) appendWithChar:' '])) appendWithFloat:x3])) appendWithChar:' '])) appendWithFloat:y3])) appendWithNSString:@" v"])) append_iWithInt:separator_];
}


#line 839
- (void)curveFromToWithFloat:(jfloat)x1
                   withFloat:(jfloat)y1
                   withFloat:(jfloat)x3
                   withFloat:(jfloat)y3 {
  
#line 840
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 844
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:x1])) appendWithChar:' '])) appendWithFloat:y1])) appendWithChar:' '])) appendWithFloat:x3])) appendWithChar:' '])) appendWithFloat:y3])) appendWithNSString:@" y"])) append_iWithInt:separator_];
}


#line 856
- (void)circleWithFloat:(jfloat)x
              withFloat:(jfloat)y
              withFloat:(jfloat)r {
  
#line 857
  jfloat b = 0.5523f;
  [self moveToWithFloat:x + r withFloat:y];
  [self curveToWithFloat:x + r withFloat:y + r * b withFloat:x + r * b withFloat:y + r withFloat:x withFloat:y + r];
  [self curveToWithFloat:x - r * b withFloat:y + r withFloat:x - r withFloat:y + r * b withFloat:x - r withFloat:y];
  [self curveToWithFloat:x - r withFloat:y - r * b withFloat:x - r * b withFloat:y - r withFloat:x withFloat:y - r];
  [self curveToWithFloat:x + r * b withFloat:y - r withFloat:x + r withFloat:y - r * b withFloat:x + r withFloat:y];
}


#line 876
- (void)rectangleWithFloat:(jfloat)x
                 withFloat:(jfloat)y
                 withFloat:(jfloat)w
                 withFloat:(jfloat)h {
  
#line 877
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 881
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithChar:' '])) appendWithFloat:w])) appendWithChar:' '])) appendWithFloat:h])) appendWithNSString:@" re"])) append_iWithInt:separator_];
}


#line 887
- (jboolean)compareColorsWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)c1
                         withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)c2 {
  
#line 888
  if (c1 == nil && c2 == nil)
#line 889
  return YES;
  if (c1 == nil || c2 == nil)
#line 891
  return NO;
  if ([c1 isKindOfClass:[ComItextpdfTextPdfExtendedColor class]])
#line 893
  return [((ComItextpdfTextBaseColor *) nil_chk(c1)) isEqual:c2];
  return [((ComItextpdfTextBaseColor *) nil_chk(c2)) isEqual:c1];
}

- (void)variableRectangleWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rect {
  
#line 904
  jfloat t = [((ComItextpdfTextRectangle *) nil_chk(rect)) getTop];
  jfloat b = [rect getBottom];
  jfloat r = [rect getRight];
  jfloat l = [rect getLeft];
  jfloat wt = [rect getBorderWidthTop];
  jfloat wb = [rect getBorderWidthBottom];
  jfloat wr = [rect getBorderWidthRight];
  jfloat wl = [rect getBorderWidthLeft];
  ComItextpdfTextBaseColor *ct = [rect getBorderColorTop];
  ComItextpdfTextBaseColor *cb = [rect getBorderColorBottom];
  ComItextpdfTextBaseColor *cr = [rect getBorderColorRight];
  ComItextpdfTextBaseColor *cl = [rect getBorderColorLeft];
  [self saveState];
  [self setLineCapWithInt:ComItextpdfTextPdfPdfContentByte_LINE_CAP_BUTT];
  [self setLineJoinWithInt:ComItextpdfTextPdfPdfContentByte_LINE_JOIN_MITER];
  jfloat clw = 0;
  jboolean cdef = NO;
  ComItextpdfTextBaseColor *ccol = nil;
  jboolean cdefi = NO;
  ComItextpdfTextBaseColor *cfil = nil;
  
#line 925
  if (wt > 0) {
    [self setLineWidthWithFloat:clw = wt];
    cdef = YES;
    if (ct == nil)
#line 929
    [self resetRGBColorStroke];
    else
#line 931
    [self setColorStrokeWithComItextpdfTextBaseColor:ct];
    ccol = ct;
    [self moveToWithFloat:l withFloat:t - wt / 2.0f];
    [self lineToWithFloat:r withFloat:t - wt / 2.0f];
    [self stroke];
  }
  
#line 939
  if (wb > 0) {
    if (wb != clw)
#line 941
    [self setLineWidthWithFloat:clw = wb];
    if (!cdef || ![self compareColorsWithComItextpdfTextBaseColor:ccol withComItextpdfTextBaseColor:cb]) {
      cdef = YES;
      if (cb == nil)
#line 945
      [self resetRGBColorStroke];
      else
#line 947
      [self setColorStrokeWithComItextpdfTextBaseColor:cb];
      ccol = cb;
    }
    [self moveToWithFloat:r withFloat:b + wb / 2.0f];
    [self lineToWithFloat:l withFloat:b + wb / 2.0f];
    [self stroke];
  }
  
#line 956
  if (wr > 0) {
    if (wr != clw)
#line 958
    [self setLineWidthWithFloat:clw = wr];
    if (!cdef || ![self compareColorsWithComItextpdfTextBaseColor:ccol withComItextpdfTextBaseColor:cr]) {
      cdef = YES;
      if (cr == nil)
#line 962
      [self resetRGBColorStroke];
      else
#line 964
      [self setColorStrokeWithComItextpdfTextBaseColor:cr];
      ccol = cr;
    }
    jboolean bt = [self compareColorsWithComItextpdfTextBaseColor:ct withComItextpdfTextBaseColor:cr];
    jboolean bb = [self compareColorsWithComItextpdfTextBaseColor:cb withComItextpdfTextBaseColor:cr];
    [self moveToWithFloat:r - wr / 2.0f withFloat:bt ? t : t - wt];
    [self lineToWithFloat:r - wr / 2.0f withFloat:bb ? b : b + wb];
    [self stroke];
    if (!bt || !bb) {
      cdefi = YES;
      if (cr == nil)
#line 975
      [self resetRGBColorFill];
      else
#line 977
      [self setColorFillWithComItextpdfTextBaseColor:cr];
      cfil = cr;
      if (!bt) {
        [self moveToWithFloat:r withFloat:t];
        [self lineToWithFloat:r withFloat:t - wt];
        [self lineToWithFloat:r - wr withFloat:t - wt];
        [self fill];
      }
      if (!bb) {
        [self moveToWithFloat:r withFloat:b];
        [self lineToWithFloat:r withFloat:b + wb];
        [self lineToWithFloat:r - wr withFloat:b + wb];
        [self fill];
      }
    }
  }
  
#line 995
  if (wl > 0) {
    if (wl != clw)
#line 997
    [self setLineWidthWithFloat:wl];
    if (!cdef || ![self compareColorsWithComItextpdfTextBaseColor:ccol withComItextpdfTextBaseColor:cl]) {
      if (cl == nil)
#line 1000
      [self resetRGBColorStroke];
      else
#line 1002
      [self setColorStrokeWithComItextpdfTextBaseColor:cl];
    }
    jboolean bt = [self compareColorsWithComItextpdfTextBaseColor:ct withComItextpdfTextBaseColor:cl];
    jboolean bb = [self compareColorsWithComItextpdfTextBaseColor:cb withComItextpdfTextBaseColor:cl];
    [self moveToWithFloat:l + wl / 2.0f withFloat:bt ? t : t - wt];
    [self lineToWithFloat:l + wl / 2.0f withFloat:bb ? b : b + wb];
    [self stroke];
    if (!bt || !bb) {
      if (!cdefi || ![self compareColorsWithComItextpdfTextBaseColor:cfil withComItextpdfTextBaseColor:cl]) {
        if (cl == nil)
#line 1012
        [self resetRGBColorFill];
        else
#line 1014
        [self setColorFillWithComItextpdfTextBaseColor:cl];
      }
      if (!bt) {
        [self moveToWithFloat:l withFloat:t];
        [self lineToWithFloat:l withFloat:t - wt];
        [self lineToWithFloat:l + wl withFloat:t - wt];
        [self fill];
      }
      if (!bb) {
        [self moveToWithFloat:l withFloat:b];
        [self lineToWithFloat:l withFloat:b + wb];
        [self lineToWithFloat:l + wl withFloat:b + wb];
        [self fill];
      }
    }
  }
  [self restoreState];
}


#line 1039
- (void)rectangleWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rectangle {
  
#line 1041
  jfloat x1 = [((ComItextpdfTextRectangle *) nil_chk(rectangle)) getLeft];
  jfloat y1 = [rectangle getBottom];
  jfloat x2 = [rectangle getRight];
  jfloat y2 = [rectangle getTop];
  
#line 1047
  ComItextpdfTextBaseColor *background = [rectangle getBackgroundColor];
  if (background != nil) {
    [self saveState];
    [self setColorFillWithComItextpdfTextBaseColor:background];
    [self rectangleWithFloat:x1 withFloat:y1 withFloat:x2 - x1 withFloat:y2 - y1];
    [self fill];
    [self restoreState];
  }
  
#line 1057
  if (![rectangle hasBorders]) {
    return;
  }
  
#line 1064
  if ([rectangle isUseVariableBorders]) {
    [self variableRectangleWithComItextpdfTextRectangle:rectangle];
  }
  else {
    
#line 1069
    if ([rectangle getBorderWidth] != ComItextpdfTextRectangle_UNDEFINED) {
      [self setLineWidthWithFloat:[rectangle getBorderWidth]];
    }
    
#line 1074
    ComItextpdfTextBaseColor *color = [rectangle getBorderColor];
    if (color != nil) {
      [self setColorStrokeWithComItextpdfTextBaseColor:color];
    }
    
#line 1080
    if ([rectangle hasBorderWithInt:ComItextpdfTextRectangle_BOX]) {
      [self rectangleWithFloat:x1 withFloat:y1 withFloat:x2 - x1 withFloat:y2 - y1];
    }
    else {
      
#line 1085
      if ([rectangle hasBorderWithInt:ComItextpdfTextRectangle_RIGHT]) {
        [self moveToWithFloat:x2 withFloat:y1];
        [self lineToWithFloat:x2 withFloat:y2];
      }
      if ([rectangle hasBorderWithInt:ComItextpdfTextRectangle_LEFT]) {
        [self moveToWithFloat:x1 withFloat:y1];
        [self lineToWithFloat:x1 withFloat:y2];
      }
      if ([rectangle hasBorderWithInt:ComItextpdfTextRectangle_BOTTOM]) {
        [self moveToWithFloat:x1 withFloat:y1];
        [self lineToWithFloat:x2 withFloat:y1];
      }
      if ([rectangle hasBorderWithInt:ComItextpdfTextRectangle_TOP]) {
        [self moveToWithFloat:x1 withFloat:y2];
        [self lineToWithFloat:x2 withFloat:y2];
      }
    }
    
#line 1103
    [self stroke];
    
#line 1105
    if (color != nil) {
      [self resetRGBColorStroke];
    }
  }
}


#line 1116
- (void)closePath {
  
#line 1117
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1121
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"h"])) append_iWithInt:separator_];
}


#line 1131
- (void)newPath {
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1136
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"n"])) append_iWithInt:separator_];
}


#line 1146
- (void)stroke {
  
#line 1147
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1151
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorStroke_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"S"])) append_iWithInt:separator_];
}


#line 1163
- (void)closePathStroke {
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1168
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorStroke_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"s"])) append_iWithInt:separator_];
}


#line 1180
- (void)fill {
  
#line 1181
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1185
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorFill_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"f"])) append_iWithInt:separator_];
}


#line 1197
- (void)eoFill {
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1202
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorFill_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"f*"])) append_iWithInt:separator_];
}


#line 1214
- (void)fillStroke {
  
#line 1215
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1219
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorFill_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:state_->colorStroke_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"B"])) append_iWithInt:separator_];
}


#line 1232
- (void)closePathFillStroke {
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1237
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorFill_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:state_->colorStroke_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"b"])) append_iWithInt:separator_];
}


#line 1250
- (void)eoFillStroke {
  
#line 1251
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1255
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorFill_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:state_->colorStroke_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"B*"])) append_iWithInt:separator_];
}


#line 1268
- (void)closePathEoFillStroke {
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 1273
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"path.construction.operator.inside.text.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorFill_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:state_->colorStroke_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"b*"])) append_iWithInt:separator_];
}


#line 1288
- (void)addImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 1289
  [self addImageWithComItextpdfTextImage:image withBoolean:NO];
}


#line 1299
- (void)addImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                             withBoolean:(jboolean)inlineImage {
  
#line 1300
  if (![((ComItextpdfTextImage *) nil_chk(image)) hasAbsoluteY])
#line 1301
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.image.must.have.absolute.positioning" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  IOSFloatArray *matrix = [image matrix];
  *IOSFloatArray_GetRef(nil_chk(matrix), ComItextpdfTextImage_CX) = [image getAbsoluteX] - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CX);
  *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CY) = [image getAbsoluteY] - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CY);
  [self addImageWithComItextpdfTextImage:image withFloat:IOSFloatArray_Get(matrix, 0) withFloat:IOSFloatArray_Get(matrix, 1) withFloat:IOSFloatArray_Get(matrix, 2) withFloat:IOSFloatArray_Get(matrix, 3) withFloat:IOSFloatArray_Get(matrix, 4) withFloat:IOSFloatArray_Get(matrix, 5) withBoolean:inlineImage];
}


#line 1321
- (void)addImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                               withFloat:(jfloat)a
                               withFloat:(jfloat)b
                               withFloat:(jfloat)c
                               withFloat:(jfloat)d
                               withFloat:(jfloat)e
                               withFloat:(jfloat)f {
  
#line 1322
  [self addImageWithComItextpdfTextImage:image withFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f withBoolean:NO];
}


#line 1330
- (void)addImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image
   withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)transform {
  
#line 1331
  IOSDoubleArray *matrix = [IOSDoubleArray arrayWithLength:6];
  [((ComItextpdfAwtGeomAffineTransform *) nil_chk(transform)) getMatrixWithDoubleArray:matrix];
  [self addImageWithComItextpdfTextImage:image withFloat:(jfloat) IOSDoubleArray_Get(matrix, 0) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 1) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 2) withFloat:
#line 1334
  (jfloat) IOSDoubleArray_Get(matrix, 3) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 4) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 5) withBoolean:NO];
}


#line 1351
- (void)addImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                               withFloat:(jfloat)a
                               withFloat:(jfloat)b
                               withFloat:(jfloat)c
                               withFloat:(jfloat)d
                               withFloat:(jfloat)e
                               withFloat:(jfloat)f
                             withBoolean:(jboolean)inlineImage {
  
#line 1352
  @try {
    if ([((ComItextpdfTextImage *) nil_chk(image)) getLayer] != nil)
#line 1354
    [self beginLayerWithComItextpdfTextPdfPdfOCG:[image getLayer]];
    if ([self isTagged]) {
      if (inText_)
#line 1357
      [self endText];
      ComItextpdfAwtGeomAffineTransform *transform = [[ComItextpdfAwtGeomAffineTransform alloc] initWithFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f];
      IOSObjectArray *src = [IOSObjectArray arrayWithObjects:(id[]){ [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:0 withFloat:0], [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:1 withFloat:0], [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:1 withFloat:1], [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:0 withFloat:1] } count:4 type:[IOSClass classWithClass:[ComItextpdfAwtGeomPoint2D_Float class]]];
      IOSObjectArray *dst = [IOSObjectArray arrayWithLength:4 type:[IOSClass classWithClass:[ComItextpdfAwtGeomPoint2D_Float class]]];
      [transform transformWithComItextpdfAwtGeomPoint2DArray:src withInt:0 withComItextpdfAwtGeomPoint2DArray:dst withInt:0 withInt:4];
      jfloat left = JavaLangFloat_MAX_VALUE;
      jfloat right = -JavaLangFloat_MAX_VALUE;
      jfloat bottom = JavaLangFloat_MAX_VALUE;
      jfloat top = -JavaLangFloat_MAX_VALUE;
      for (jint i = 0; i < 4; i++) {
        if ([((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(dst, i))) getX] < left)
#line 1368
        left = (jfloat) [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(dst, i))) getX];
        if ([((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(dst, i))) getX] > right)
#line 1370
        right = (jfloat) [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(dst, i))) getX];
        if ([((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(dst, i))) getY] < bottom)
#line 1372
        bottom = (jfloat) [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(dst, i))) getY];
        if ([((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(dst, i))) getY] > top)
#line 1374
        top = (jfloat) [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(dst, i))) getY];
      }
      [image setAccessibleAttributeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BBOX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ left, bottom, right, top } count:4]]];
    }
    if (writer_ != nil && [image isImgTemplate]) {
      (void) [writer_ addDirectImageSimpleWithComItextpdfTextImage:image];
      ComItextpdfTextPdfPdfTemplate *template_ = [image getTemplateData];
      jfloat w = [((ComItextpdfTextPdfPdfTemplate *) nil_chk(template_)) getWidth];
      jfloat h = [template_ getHeight];
      [self addTemplateWithComItextpdfTextPdfPdfTemplate:template_ withFloat:a / w withFloat:b / w withFloat:c / h withFloat:d / h withFloat:e withFloat:f];
    }
    else {
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"q "];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:a])) appendWithChar:' '];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:b])) appendWithChar:' '];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:c])) appendWithChar:' '];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:d])) appendWithChar:' '];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:e])) appendWithChar:' '];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:f])) appendWithNSString:@" cm"];
      if (inlineImage) {
        (void) [content_ appendWithNSString:@"\nBI\n"];
        ComItextpdfTextPdfPdfImage *pimage = [[ComItextpdfTextPdfPdfImage alloc] initWithComItextpdfTextImage:image withNSString:@"" withComItextpdfTextPdfPdfIndirectReference:nil];
        if ([image isKindOfClass:[ComItextpdfTextImgJBIG2 class]]) {
          IOSByteArray *globals = [((ComItextpdfTextImgJBIG2 *) check_class_cast(image, [ComItextpdfTextImgJBIG2 class])) getGlobalBytes];
          if (globals != nil) {
            ComItextpdfTextPdfPdfDictionary *decodeparms = [[ComItextpdfTextPdfPdfDictionary alloc] init];
            [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JBIG2GLOBALS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getReferenceJBIG2GlobalsWithByteArray:globals]];
            [pimage putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODEPARMS_() withComItextpdfTextPdfPdfObject:decodeparms];
          }
        }
        [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_INLINE_IMAGE withId:pimage];
        for (id __strong element in nil_chk([pimage getKeys])) {
          ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
          ComItextpdfTextPdfPdfObject *value = [pimage getWithComItextpdfTextPdfPdfName:key];
          NSString *s = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfPdfContentByte_abrev_)) getWithId:key];
          if (s == nil)
#line 1410
          continue;
          (void) [content_ appendWithNSString:s];
          jboolean check = YES;
          if ([((ComItextpdfTextPdfPdfName *) nil_chk(key)) isEqual:ComItextpdfTextPdfPdfName_get_COLORSPACE_()] && [((ComItextpdfTextPdfPdfObject *) nil_chk(value)) isArray]) {
            ComItextpdfTextPdfPdfArray *ar = (ComItextpdfTextPdfPdfArray *) check_class_cast(value, [ComItextpdfTextPdfPdfArray class]);
            if ([ar size] == 4 &&
#line 1416
            [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_INDEXED_())) isEqual:[ar getAsNameWithInt:0]] &&
#line 1417
            [((ComItextpdfTextPdfPdfObject *) nil_chk([ar getPdfObjectWithInt:1])) isName] &&
#line 1418
            [((ComItextpdfTextPdfPdfObject *) nil_chk([ar getPdfObjectWithInt:2])) isNumber] &&
#line 1419
            [((ComItextpdfTextPdfPdfObject *) nil_chk([ar getPdfObjectWithInt:3])) isString]) {
              
#line 1421
              check = NO;
            }
          }
          
#line 1425
          if (check && [key isEqual:ComItextpdfTextPdfPdfName_get_COLORSPACE_()] && ![((ComItextpdfTextPdfPdfObject *) nil_chk(value)) isName]) {
            ComItextpdfTextPdfPdfName *cs = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getColorspaceName];
            ComItextpdfTextPdfPageResources *prs = [self getPageResources];
            (void) [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addColorWithComItextpdfTextPdfPdfName:cs withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer_ addToBodyWithComItextpdfTextPdfPdfObject:value])) getIndirectReference]];
            value = cs;
          }
          [((ComItextpdfTextPdfPdfObject *) nil_chk(value)) toPdfWithComItextpdfTextPdfPdfWriter:nil withJavaIoOutputStream:content_];
          (void) [content_ appendWithChar:0x000a];
        }
        (void) [content_ appendWithNSString:@"ID\n"];
        [pimage writeContentWithJavaIoOutputStream:content_];
        (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithNSString:@"\nEI\nQ"])) append_iWithInt:separator_];
      }
      else {
        ComItextpdfTextPdfPdfName *name;
        ComItextpdfTextPdfPageResources *prs = [self getPageResources];
        ComItextpdfTextImage *maskImage = [image getImageMask];
        if (maskImage != nil) {
          name = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectImageSimpleWithComItextpdfTextImage:maskImage];
          (void) [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addXObjectWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[writer_ getImageReferenceWithComItextpdfTextPdfPdfName:name]];
        }
        name = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectImageSimpleWithComItextpdfTextImage:image];
        name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addXObjectWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[writer_ getImageReferenceWithComItextpdfTextPdfPdfName:name]];
        (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithChar:' '])) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" Do Q"])) append_iWithInt:separator_];
      }
    }
    if ([image hasBorders]) {
      [self saveState];
      jfloat w = [image getWidth];
      jfloat h = [image getHeight];
      [self concatCTMWithFloat:a / w withFloat:b / w withFloat:c / h withFloat:d / h withFloat:e withFloat:f];
      [self rectangleWithComItextpdfTextRectangle:image];
      [self restoreState];
    }
    if ([image getLayer] != nil)
#line 1460
    [self endLayer];
    ComItextpdfTextAnnotation *annot = [image getAnnotation];
    if (annot == nil)
#line 1463
    return;
    IOSFloatArray *r = [IOSFloatArray arrayWithLength:((IOSFloatArray *) nil_chk(ComItextpdfTextPdfPdfContentByte_unitRect_))->size_];
    for (jint k = 0; k < ComItextpdfTextPdfPdfContentByte_unitRect_->size_; k += 2) {
      *IOSFloatArray_GetRef(r, k) = a * IOSFloatArray_Get(ComItextpdfTextPdfPdfContentByte_unitRect_, k) + c * IOSFloatArray_Get(ComItextpdfTextPdfPdfContentByte_unitRect_, k + 1) + e;
      *IOSFloatArray_GetRef(r, k + 1) = b * IOSFloatArray_Get(ComItextpdfTextPdfPdfContentByte_unitRect_, k) + d * IOSFloatArray_Get(ComItextpdfTextPdfPdfContentByte_unitRect_, k + 1) + f;
    }
    jfloat llx = IOSFloatArray_Get(r, 0);
    jfloat lly = IOSFloatArray_Get(r, 1);
    jfloat urx = llx;
    jfloat ury = lly;
    for (jint k = 2; k < r->size_; k += 2) {
      llx = [JavaLangMath minWithFloat:llx withFloat:IOSFloatArray_Get(r, k)];
      lly = [JavaLangMath minWithFloat:lly withFloat:IOSFloatArray_Get(r, k + 1)];
      urx = [JavaLangMath maxWithFloat:urx withFloat:IOSFloatArray_Get(r, k)];
      ury = [JavaLangMath maxWithFloat:ury withFloat:IOSFloatArray_Get(r, k + 1)];
    }
    annot = [[ComItextpdfTextAnnotation alloc] initWithComItextpdfTextAnnotation:annot];
    [annot setDimensionsWithFloat:llx withFloat:lly withFloat:urx withFloat:ury];
    ComItextpdfTextPdfPdfAnnotation *an = [ComItextpdfTextPdfInternalPdfAnnotationsImp convertAnnotationWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextAnnotation:annot withComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:llx withFloat:lly withFloat:urx withFloat:ury]];
    if (an == nil)
#line 1483
    return;
    [self addAnnotationWithComItextpdfTextPdfPdfAnnotation:an];
  }
  @catch (JavaLangException *ee) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithJavaLangException:ee];
  }
}


#line 1495
- (void)reset {
  
#line 1496
  [self resetWithBoolean:YES];
}


#line 1504
- (void)resetWithBoolean:(jboolean)validateContent {
  
#line 1505
  [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) reset];
  markedContentSize_ = 0;
  if (validateContent) {
    [self sanityCheck];
  }
  state_ = [[ComItextpdfTextPdfPdfContentByte_GraphicState alloc] init];
  stateList_ = [[JavaUtilArrayList alloc] init];
}


#line 1519
- (void)beginTextWithBoolean:(jboolean)restoreTM {
  
#line 1520
  if (inText_) {
    if ([self isTagged]) {
    }
    else {
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.begin.end.text.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  else {
    
#line 1527
    inText_ = YES;
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"BT"])) append_iWithInt:separator_];
    if (restoreTM) {
      jfloat xTLM = ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->xTLM_;
      jfloat tx = state_->tx_;
      [self setTextMatrixWithFloat:state_->aTLM_ withFloat:state_->bTLM_ withFloat:state_->cTLM_ withFloat:state_->dTLM_ withFloat:state_->tx_ withFloat:state_->yTLM_];
      state_->xTLM_ = xTLM;
      state_->tx_ = tx;
    }
    else {
      
#line 1536
      ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->xTLM_ = 0;
      state_->yTLM_ = 0;
      state_->tx_ = 0;
    }
    if ([self isTagged]) {
      @try {
        [self restoreColor];
      }
      @catch (
#line 1543
      JavaIoIOException *ioe) {
      }
    }
  }
}


#line 1553
- (void)beginText {
  
#line 1554
  [self beginTextWithBoolean:NO];
}


#line 1560
- (void)endText {
  
#line 1561
  if (!inText_) {
    if ([self isTagged]) {
    }
    else {
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.begin.end.text.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  else {
    
#line 1568
    inText_ = NO;
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"ET"])) append_iWithInt:separator_];
    if ([self isTagged]) {
      @try {
        [self restoreColor];
      }
      @catch (
#line 1573
      JavaIoIOException *ioe) {
      }
    }
  }
}


#line 1585
- (void)saveState {
  
#line 1586
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_CANVAS withId:@"q"];
  if (inText_ && [self isTagged]) {
    [self endText];
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"q"])) append_iWithInt:separator_];
  [((JavaUtilArrayList *) nil_chk(stateList_)) addWithId:[[ComItextpdfTextPdfPdfContentByte_GraphicState alloc] initWithComItextpdfTextPdfPdfContentByte_GraphicState:state_]];
}


#line 1598
- (void)restoreState {
  
#line 1599
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_CANVAS withId:@"Q"];
  if (inText_ && [self isTagged]) {
    [self endText];
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"Q"])) append_iWithInt:separator_];
  jint idx = [((JavaUtilArrayList *) nil_chk(stateList_)) size] - 1;
  if (idx < 0)
#line 1606
  @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.save.restore.state.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_)) restoreWithComItextpdfTextPdfPdfContentByte_GraphicState:[stateList_ getWithInt:idx]];
  (void) [stateList_ removeWithInt:idx];
}


#line 1616
- (void)setCharacterSpacingWithFloat:(jfloat)charSpace {
  
#line 1617
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->charSpace_ = charSpace;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:charSpace])) appendWithNSString:@" Tc"])) append_iWithInt:separator_];
}


#line 1629
- (void)setWordSpacingWithFloat:(jfloat)wordSpace {
  
#line 1630
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->wordSpace_ = wordSpace;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:wordSpace])) appendWithNSString:@" Tw"])) append_iWithInt:separator_];
}


#line 1642
- (void)setHorizontalScalingWithFloat:(jfloat)scale_ {
  
#line 1643
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->scale__ = scale_;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:scale_])) appendWithNSString:@" Tz"])) append_iWithInt:separator_];
}


#line 1658
- (void)setLeadingWithFloat:(jfloat)leading {
  
#line 1659
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->leading_ = leading;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:leading])) appendWithNSString:@" TL"])) append_iWithInt:separator_];
}


#line 1672
- (void)setFontAndSizeWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf
                                           withFloat:(jfloat)size {
  
#line 1673
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  [self checkWriter];
  if (size < 0.0001f && size > -0.0001f)
#line 1678
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"font.size.too.small.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfFloat:size] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->size_ = size;
  state_->fontDetails_ = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimpleWithComItextpdfTextPdfBaseFont:bf];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfFontDetails *) nil_chk(state_->fontDetails_)) getFontName];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addFontWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[state_->fontDetails_ getIndirectReference]];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithChar:' '])) appendWithFloat:size])) appendWithNSString:@" Tf"])) append_iWithInt:separator_];
}


#line 1692
- (void)setTextRenderingModeWithInt:(jint)rendering {
  
#line 1693
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->textRenderMode_ = rendering;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithInt:rendering])) appendWithNSString:@" Tr"])) append_iWithInt:separator_];
}


#line 1707
- (void)setTextRiseWithFloat:(jfloat)rise {
  
#line 1708
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:rise])) appendWithNSString:@" Ts"])) append_iWithInt:separator_];
}


#line 1720
- (void)showText2WithNSString:(NSString *)text {
  
#line 1721
  if (((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->fontDetails_ == nil)
#line 1722
  @throw [[JavaLangNullPointerException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"font.and.size.must.be.set.before.writing.any.text" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  IOSByteArray *b = [((ComItextpdfTextPdfFontDetails *) nil_chk(state_->fontDetails_)) convertToBytesWithNSString:text];
  [ComItextpdfTextPdfPdfContentByte escapeStringWithByteArray:b withComItextpdfTextPdfByteBuffer:content_];
}


#line 1732
- (void)showTextWithNSString:(NSString *)text {
  
#line 1733
  [self checkState];
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  [self showText2WithNSString:text];
  [self updateTxWithNSString:text withFloat:0];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"Tj"])) append_iWithInt:separator_];
}


#line 1748
+ (ComItextpdfTextPdfPdfTextArray *)getKernArrayWithNSString:(NSString *)text
                              withComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)font {
  
#line 1749
  ComItextpdfTextPdfPdfTextArray *pa = [[ComItextpdfTextPdfPdfTextArray alloc] init];
  JavaLangStringBuffer *acc = [[JavaLangStringBuffer alloc] init];
  jint len = ((jint) [((NSString *) nil_chk(text)) length]) - 1;
  IOSCharArray *c = [text toCharArray];
  if (len >= 0)
#line 1754
  (void) [acc appendWithCharArray:c withInt:0 withInt:1];
  for (jint k = 0; k < len; ++k) {
    jchar c2 = IOSCharArray_Get(nil_chk(c), k + 1);
    jint kern = [((ComItextpdfTextPdfBaseFont *) nil_chk(font)) getKerningWithInt:IOSCharArray_Get(c, k) withInt:c2];
    if (kern == 0) {
      (void) [acc appendWithChar:c2];
    }
    else {
      [pa addWithNSString:[acc description]];
      [acc setLengthWithInt:0];
      (void) [acc appendWithCharArray:c withInt:k + 1 withInt:1];
      [pa addWithFloat:-kern];
    }
  }
  [pa addWithNSString:[acc description]];
  return pa;
}


#line 1777
- (void)showTextKernedWithNSString:(NSString *)text {
  
#line 1778
  if (((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->fontDetails_ == nil)
#line 1779
  @throw [[JavaLangNullPointerException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"font.and.size.must.be.set.before.writing.any.text" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfBaseFont *bf = [((ComItextpdfTextPdfFontDetails *) nil_chk(state_->fontDetails_)) getBaseFont];
  if ([((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) hasKernPairs])
#line 1782
  [self showTextWithComItextpdfTextPdfPdfTextArray:[ComItextpdfTextPdfPdfContentByte getKernArrayWithNSString:text withComItextpdfTextPdfBaseFont:bf]];
  else {
    [self showTextWithNSString:text];
  }
}


#line 1793
- (void)newlineShowTextWithNSString:(NSString *)text {
  
#line 1794
  [self checkState];
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->yTLM_ -= state_->leading_;
  [self showText2WithNSString:text];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"'"])) append_iWithInt:separator_];
  state_->tx_ = state_->xTLM_;
  [self updateTxWithNSString:text withFloat:0];
}


#line 1812
- (void)newlineShowTextWithFloat:(jfloat)wordSpacing
                       withFloat:(jfloat)charSpacing
                    withNSString:(NSString *)text {
  
#line 1813
  [self checkState];
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->yTLM_ -= state_->leading_;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:wordSpacing])) appendWithChar:' '])) appendWithFloat:charSpacing];
  [self showText2WithNSString:text];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithNSString:@"\""])) append_iWithInt:separator_];
  
#line 1823
  state_->charSpace_ = charSpacing;
  state_->wordSpace_ = wordSpacing;
  state_->tx_ = state_->xTLM_;
  [self updateTxWithNSString:text withFloat:0];
}


#line 1841
- (void)setTextMatrixWithFloat:(jfloat)a
                     withFloat:(jfloat)b
                     withFloat:(jfloat)c
                     withFloat:(jfloat)d
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y {
  
#line 1842
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->xTLM_ = x;
  state_->yTLM_ = y;
  state_->aTLM_ = a;
  state_->bTLM_ = b;
  state_->cTLM_ = c;
  state_->dTLM_ = d;
  state_->tx_ = state_->xTLM_;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:a])) appendWithChar:' '])) appendWithFloat:b])) append_iWithInt:' '])) appendWithFloat:
#line 1853
  c])) append_iWithInt:' '])) appendWithFloat:d])) append_iWithInt:' '])) appendWithFloat:
#line 1854
  x])) append_iWithInt:' '])) appendWithFloat:y])) appendWithNSString:@" Tm"])) append_iWithInt:separator_];
}


#line 1862
- (void)setTextMatrixWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)transform {
  
#line 1863
  IOSDoubleArray *matrix = [IOSDoubleArray arrayWithLength:6];
  [((ComItextpdfAwtGeomAffineTransform *) nil_chk(transform)) getMatrixWithDoubleArray:matrix];
  [self setTextMatrixWithFloat:(jfloat) IOSDoubleArray_Get(matrix, 0) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 1) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 2) withFloat:
#line 1866
  (jfloat) IOSDoubleArray_Get(matrix, 3) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 4) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 5)];
}


#line 1877
- (void)setTextMatrixWithFloat:(jfloat)x
                     withFloat:(jfloat)y {
  
#line 1878
  [self setTextMatrixWithFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:x withFloat:y];
}


#line 1887
- (void)moveTextWithFloat:(jfloat)x
                withFloat:(jfloat)y {
  
#line 1888
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->xTLM_ += x;
  state_->yTLM_ += y;
  if ([self isTagged] && state_->xTLM_ != state_->tx_) {
    [self setTextMatrixWithFloat:state_->aTLM_ withFloat:state_->bTLM_ withFloat:state_->cTLM_ withFloat:state_->dTLM_ withFloat:state_->xTLM_ withFloat:state_->yTLM_];
  }
  else {
    
#line 1896
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithNSString:@" Td"])) append_iWithInt:separator_];
  }
}


#line 1908
- (void)moveTextWithLeadingWithFloat:(jfloat)x
                           withFloat:(jfloat)y {
  
#line 1909
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->xTLM_ += x;
  state_->yTLM_ += y;
  state_->leading_ = -y;
  if ([self isTagged] && state_->xTLM_ != state_->tx_) {
    [self setTextMatrixWithFloat:state_->aTLM_ withFloat:state_->bTLM_ withFloat:state_->cTLM_ withFloat:state_->dTLM_ withFloat:state_->xTLM_ withFloat:state_->yTLM_];
  }
  else {
    
#line 1918
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithNSString:@" TD"])) append_iWithInt:separator_];
  }
}


#line 1925
- (void)newlineText {
  
#line 1926
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  if ([self isTagged] && ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->xTLM_ != state_->tx_) {
    [self setTextMatrixWithFloat:state_->aTLM_ withFloat:state_->bTLM_ withFloat:state_->cTLM_ withFloat:state_->dTLM_ withFloat:state_->xTLM_ withFloat:state_->yTLM_];
  }
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->yTLM_ -= state_->leading_;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"T*"])) append_iWithInt:separator_];
}


#line 1941
- (jint)size {
  
#line 1942
  return [self sizeWithBoolean:YES];
}


#line 1945
- (jint)sizeWithBoolean:(jboolean)includeMarkedContentSize {
  
#line 1946
  if (includeMarkedContentSize)
#line 1947
  return [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) size];
  else
#line 1949
  return [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) size] - markedContentSize_;
}


#line 1958
+ (IOSByteArray *)escapeStringWithByteArray:(IOSByteArray *)b {
  
#line 1959
  ComItextpdfTextPdfByteBuffer *content = [[ComItextpdfTextPdfByteBuffer alloc] init];
  [ComItextpdfTextPdfPdfContentByte escapeStringWithByteArray:b withComItextpdfTextPdfByteBuffer:content];
  return [content toByteArray];
}


#line 1970
+ (void)escapeStringWithByteArray:(IOSByteArray *)b
 withComItextpdfTextPdfByteBuffer:(ComItextpdfTextPdfByteBuffer *)content {
  
#line 1971
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content)) append_iWithInt:'('];
  for (jint k = 0; k < ((IOSByteArray *) nil_chk(b))->size_; ++k) {
    jbyte c = IOSByteArray_Get(b, k);
    switch (c) {
      case 0x000d:
      (void) [content appendWithNSString:@"\\r"];
      break;
      case 0x000a:
      (void) [content appendWithNSString:@"\\n"];
      break;
      case 0x0009:
      (void) [content appendWithNSString:@"\\t"];
      break;
      case 0x0008:
      (void) [content appendWithNSString:@"\\b"];
      break;
      case 0x000c:
      (void) [content appendWithNSString:@"\\f"];
      break;
      case '(':
      case ')':
      case '\\':
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content append_iWithInt:'\\'])) append_iWithInt:c];
      break;
      default:
      (void) [content append_iWithInt:c];
    }
  }
  (void) [content appendWithNSString:@")"];
}


#line 2008
- (void)addOutlineWithComItextpdfTextPdfPdfOutline:(ComItextpdfTextPdfPdfOutline *)outline
                                      withNSString:(NSString *)name {
  
#line 2009
  [self checkWriter];
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addOutlineWithComItextpdfTextPdfPdfOutline:outline withNSString:name];
}


#line 2017
- (ComItextpdfTextPdfPdfOutline *)getRootOutline {
  
#line 2018
  [self checkWriter];
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getRootOutline];
}


#line 2032
- (jfloat)getEffectiveStringWidthWithNSString:(NSString *)text
                                  withBoolean:(jboolean)kerned {
  
#line 2033
  ComItextpdfTextPdfBaseFont *bf = [((ComItextpdfTextPdfFontDetails *) nil_chk(((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->fontDetails_)) getBaseFont];
  
#line 2035
  jfloat w;
  if (kerned)
#line 2037
  w = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getWidthPointKernedWithNSString:text withFloat:state_->size_];
  else
#line 2039
  w = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getWidthPointWithNSString:text withFloat:state_->size_];
  
#line 2041
  if (state_->charSpace_ != 0.0f && ((jint) [((NSString *) nil_chk(text)) length]) > 1) {
    w += state_->charSpace_ * (((jint) [text length]) - 1);
  }
  
#line 2045
  if (state_->wordSpace_ != 0.0f && ![((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) isVertical]) {
    for (jint i = 0; i < ((jint) [((NSString *) nil_chk(text)) length]) - 1; i++) {
      if ([text charAtWithInt:i] == ' ')
#line 2048
      w += state_->wordSpace_;
    }
  }
  if (state_->scale__ != 100.0)
#line 2052
  w = w * state_->scale__ / 100.0f;
  
#line 2055
  return w;
}


#line 2069
- (jfloat)getEffectiveStringWidthWithNSString:(NSString *)text
                                  withBoolean:(jboolean)kerned
                                    withFloat:(jfloat)kerning {
  
#line 2070
  ComItextpdfTextPdfBaseFont *bf = [((ComItextpdfTextPdfFontDetails *) nil_chk(((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->fontDetails_)) getBaseFont];
  jfloat w;
  if (kerned)
#line 2073
  w = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getWidthPointKernedWithNSString:text withFloat:state_->size_];
  else
#line 2075
  w = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getWidthPointWithNSString:text withFloat:state_->size_];
  if (state_->charSpace_ != 0.0f && ((jint) [((NSString *) nil_chk(text)) length]) > 0) {
    w += state_->charSpace_ * (((jint) [text length]));
  }
  if (state_->wordSpace_ != 0.0f && ![((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) isVertical]) {
    for (jint i = 0; i < ((jint) [((NSString *) nil_chk(text)) length]); i++) {
      if ([text charAtWithInt:i] == ' ')
#line 2082
      w += state_->wordSpace_;
    }
  }
  w -= kerning / 1000.f * state_->size_;
  if (state_->scale__ != 100.0)
#line 2087
  w = w * state_->scale__ / 100.0f;
  return w;
}

- (void)showTextAlignedWithInt:(jint)alignment
                  withNSString:(NSString *)text
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y
                     withFloat:(jfloat)rotation {
  
#line 2100
  [self showTextAlignedWithInt:alignment withNSString:text withFloat:x withFloat:y withFloat:rotation withBoolean:NO];
}


#line 2103
- (void)showTextAlignedWithInt:(jint)alignment
                  withNSString:(NSString *)text
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y
                     withFloat:(jfloat)rotation
                   withBoolean:(jboolean)kerned {
  
#line 2104
  if (((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->fontDetails_ == nil)
#line 2105
  @throw [[JavaLangNullPointerException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"font.and.size.must.be.set.before.writing.any.text" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (rotation == 0) {
    switch (alignment) {
      case ComItextpdfTextPdfPdfContentByte_ALIGN_CENTER:
      x -= [self getEffectiveStringWidthWithNSString:text withBoolean:kerned] / 2;
      break;
      case ComItextpdfTextPdfPdfContentByte_ALIGN_RIGHT:
      x -= [self getEffectiveStringWidthWithNSString:text withBoolean:kerned];
      break;
    }
    [self setTextMatrixWithFloat:x withFloat:y];
    if (kerned)
#line 2117
    [self showTextKernedWithNSString:text];
    else
#line 2119
    [self showTextWithNSString:text];
  }
  else {
    jdouble alpha = rotation * JavaLangMath_PI / 180.0;
    jfloat cos = (jfloat) [JavaLangMath cosWithDouble:alpha];
    jfloat sin = (jfloat) [JavaLangMath sinWithDouble:alpha];
    jfloat len;
    switch (alignment) {
      case ComItextpdfTextPdfPdfContentByte_ALIGN_CENTER:
      len = [self getEffectiveStringWidthWithNSString:text withBoolean:kerned] / 2;
      x -= len * cos;
      y -= len * sin;
      break;
      case ComItextpdfTextPdfPdfContentByte_ALIGN_RIGHT:
      len = [self getEffectiveStringWidthWithNSString:text withBoolean:kerned];
      x -= len * cos;
      y -= len * sin;
      break;
    }
    [self setTextMatrixWithFloat:cos withFloat:sin withFloat:-sin withFloat:cos withFloat:x withFloat:y];
    if (kerned)
#line 2140
    [self showTextKernedWithNSString:text];
    else
#line 2142
    [self showTextWithNSString:text];
    [self setTextMatrixWithFloat:0.0f withFloat:0.0f];
  }
}


#line 2155
- (void)showTextAlignedKernedWithInt:(jint)alignment
                        withNSString:(NSString *)text
                           withFloat:(jfloat)x
                           withFloat:(jfloat)y
                           withFloat:(jfloat)rotation {
  
#line 2156
  [self showTextAlignedWithInt:alignment withNSString:text withFloat:x withFloat:y withFloat:rotation withBoolean:YES];
}


#line 2183
- (void)concatCTMWithFloat:(jfloat)a
                 withFloat:(jfloat)b
                 withFloat:(jfloat)c
                 withFloat:(jfloat)d
                 withFloat:(jfloat)e
                 withFloat:(jfloat)f {
  
#line 2184
  if (inText_ && [self isTagged]) {
    [self endText];
  }
  [((ComItextpdfAwtGeomAffineTransform *) nil_chk(((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->CTM_)) concatenateWithComItextpdfAwtGeomAffineTransform:[[ComItextpdfAwtGeomAffineTransform alloc] initWithFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f]];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:a])) appendWithChar:' '])) appendWithFloat:b])) appendWithChar:' '])) appendWithFloat:c])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:d])) appendWithChar:' '])) appendWithFloat:e])) appendWithChar:' '])) appendWithFloat:f])) appendWithNSString:@" cm"])) append_iWithInt:separator_];
}


#line 2196
- (void)concatCTMWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)transform {
  
#line 2197
  IOSDoubleArray *matrix = [IOSDoubleArray arrayWithLength:6];
  [((ComItextpdfAwtGeomAffineTransform *) nil_chk(transform)) getMatrixWithDoubleArray:matrix];
  [self concatCTMWithFloat:(jfloat) IOSDoubleArray_Get(matrix, 0) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 1) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 2) withFloat:
#line 2200
  (jfloat) IOSDoubleArray_Get(matrix, 3) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 4) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 5)];
}


#line 2227
+ (JavaUtilArrayList *)bezierArcWithFloat:(jfloat)x1
                                withFloat:(jfloat)y1
                                withFloat:(jfloat)x2
                                withFloat:(jfloat)y2
                                withFloat:(jfloat)startAng
                                withFloat:(jfloat)extent {
  
#line 2228
  jfloat tmp;
  if (x1 > x2) {
    tmp = x1;
    x1 = x2;
    x2 = tmp;
  }
  if (y2 > y1) {
    tmp = y1;
    y1 = y2;
    y2 = tmp;
  }
  
#line 2240
  jfloat fragAngle;
  jint Nfrag;
  if ([JavaLangMath absWithFloat:extent] <= 90.0f) {
    fragAngle = extent;
    Nfrag = 1;
  }
  else {
    Nfrag = J2ObjCFpToInt([JavaLangMath ceilWithDouble:[JavaLangMath absWithFloat:extent] / 90.0f]);
    fragAngle = extent / Nfrag;
  }
  jfloat x_cen = (x1 + x2) / 2.0f;
  jfloat y_cen = (y1 + y2) / 2.0f;
  jfloat rx = (x2 - x1) / 2.0f;
  jfloat ry = (y2 - y1) / 2.0f;
  jfloat halfAng = (jfloat) (fragAngle * JavaLangMath_PI / 360.);
  jfloat kappa = (jfloat) [JavaLangMath absWithDouble:4. / 3. * (1. - [JavaLangMath cosWithDouble:halfAng]) / [JavaLangMath sinWithDouble:halfAng]];
  JavaUtilArrayList *pointList = [[JavaUtilArrayList alloc] init];
  for (jint i = 0; i < Nfrag; ++i) {
    jfloat theta0 = (jfloat) ((startAng + i * fragAngle) * JavaLangMath_PI / 180.);
    jfloat theta1 = (jfloat) ((startAng + (i + 1) * fragAngle) * JavaLangMath_PI / 180.);
    jfloat cos0 = (jfloat) [JavaLangMath cosWithDouble:theta0];
    jfloat cos1 = (jfloat) [JavaLangMath cosWithDouble:theta1];
    jfloat sin0 = (jfloat) [JavaLangMath sinWithDouble:theta0];
    jfloat sin1 = (jfloat) [JavaLangMath sinWithDouble:theta1];
    if (fragAngle > 0.0f) {
      [pointList addWithId:[IOSFloatArray arrayWithFloats:(jfloat[]){ x_cen + rx * cos0,
#line 2266
      y_cen - ry * sin0,
#line 2267
      x_cen + rx * (cos0 - kappa * sin0),
#line 2268
      y_cen - ry * (sin0 + kappa * cos0),
#line 2269
      x_cen + rx * (cos1 + kappa * sin1),
#line 2270
      y_cen - ry * (sin1 - kappa * cos1),
#line 2271
      x_cen + rx * cos1,
#line 2272
      y_cen - ry * sin1 } count:8]];
    }
    else {
      [pointList addWithId:[IOSFloatArray arrayWithFloats:(jfloat[]){ x_cen + rx * cos0,
#line 2276
      y_cen - ry * sin0,
#line 2277
      x_cen + rx * (cos0 + kappa * sin0),
#line 2278
      y_cen - ry * (sin0 - kappa * cos0),
#line 2279
      x_cen + rx * (cos1 - kappa * sin1),
#line 2280
      y_cen - ry * (sin1 + kappa * cos1),
#line 2281
      x_cen + rx * cos1,
#line 2282
      y_cen - ry * sin1 } count:8]];
    }
  }
  return pointList;
}


#line 2300
- (void)arcWithFloat:(jfloat)x1
           withFloat:(jfloat)y1
           withFloat:(jfloat)x2
           withFloat:(jfloat)y2
           withFloat:(jfloat)startAng
           withFloat:(jfloat)extent {
  
#line 2301
  JavaUtilArrayList *ar = [ComItextpdfTextPdfPdfContentByte bezierArcWithFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2 withFloat:startAng withFloat:extent];
  if ([((JavaUtilArrayList *) nil_chk(ar)) isEmpty])
#line 2303
  return;
  IOSFloatArray *pt = [ar getWithInt:0];
  [self moveToWithFloat:IOSFloatArray_Get(nil_chk(pt), 0) withFloat:IOSFloatArray_Get(pt, 1)];
  for (jint k = 0; k < [ar size]; ++k) {
    pt = [ar getWithInt:k];
    [self curveToWithFloat:IOSFloatArray_Get(nil_chk(pt), 2) withFloat:IOSFloatArray_Get(pt, 3) withFloat:IOSFloatArray_Get(pt, 4) withFloat:IOSFloatArray_Get(pt, 5) withFloat:IOSFloatArray_Get(pt, 6) withFloat:IOSFloatArray_Get(pt, 7)];
  }
}

- (void)ellipseWithFloat:(jfloat)x1
               withFloat:(jfloat)y1
               withFloat:(jfloat)x2
               withFloat:(jfloat)y2 {
  
#line 2321
  [self arcWithFloat:x1 withFloat:y1 withFloat:x2 withFloat:y2 withFloat:0.0f withFloat:360.0f];
}


#line 2335
- (ComItextpdfTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                      withFloat:(jfloat)height
                                                      withFloat:(jfloat)xstep
                                                      withFloat:(jfloat)ystep {
  
#line 2336
  [self checkWriter];
  if (xstep == 0.0f || ystep == 0.0f)
#line 2338
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"xstep.or.ystep.can.not.be.zero" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPdfPatternPainter *painter = [[ComItextpdfTextPdfPdfPatternPainter alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
  [painter setWidthWithFloat:width];
  [painter setHeightWithFloat:height];
  [painter setXStepWithFloat:xstep];
  [painter setYStepWithFloat:ystep];
  (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimplePatternWithComItextpdfTextPdfPdfPatternPainter:painter];
  return painter;
}


#line 2355
- (ComItextpdfTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                      withFloat:(jfloat)height {
  
#line 2356
  return [self createPatternWithFloat:width withFloat:height withFloat:width withFloat:height];
}


#line 2371
- (ComItextpdfTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                      withFloat:(jfloat)height
                                                      withFloat:(jfloat)xstep
                                                      withFloat:(jfloat)ystep
                                   withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  
#line 2372
  [self checkWriter];
  if (xstep == 0.0f || ystep == 0.0f)
#line 2374
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"xstep.or.ystep.can.not.be.zero" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPdfPatternPainter *painter = [[ComItextpdfTextPdfPdfPatternPainter alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextBaseColor:color];
  [painter setWidthWithFloat:width];
  [painter setHeightWithFloat:height];
  [painter setXStepWithFloat:xstep];
  [painter setYStepWithFloat:ystep];
  (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimplePatternWithComItextpdfTextPdfPdfPatternPainter:painter];
  return painter;
}


#line 2393
- (ComItextpdfTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                      withFloat:(jfloat)height
                                   withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  
#line 2394
  return [self createPatternWithFloat:width withFloat:height withFloat:width withFloat:height withComItextpdfTextBaseColor:color];
}


#line 2409
- (ComItextpdfTextPdfPdfTemplate *)createTemplateWithFloat:(jfloat)width
                                                 withFloat:(jfloat)height {
  
#line 2410
  return [self createTemplateWithFloat:width withFloat:height withComItextpdfTextPdfPdfName:nil];
}


#line 2413
- (ComItextpdfTextPdfPdfTemplate *)createTemplateWithFloat:(jfloat)width
                                                 withFloat:(jfloat)height
                             withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)forcedName {
  
#line 2414
  [self checkWriter];
  ComItextpdfTextPdfPdfTemplate *template_ = [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
  [template_ setWidthWithFloat:width];
  [template_ setHeightWithFloat:height];
  (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:template_ withComItextpdfTextPdfPdfName:forcedName];
  return template_;
}


#line 2429
- (ComItextpdfTextPdfPdfAppearance *)createAppearanceWithFloat:(jfloat)width
                                                     withFloat:(jfloat)height {
  
#line 2430
  return [self createAppearanceWithFloat:width withFloat:height withComItextpdfTextPdfPdfName:nil];
}


#line 2433
- (ComItextpdfTextPdfPdfAppearance *)createAppearanceWithFloat:(jfloat)width
                                                     withFloat:(jfloat)height
                                 withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)forcedName {
  
#line 2434
  [self checkWriter];
  ComItextpdfTextPdfPdfAppearance *template_ = [[ComItextpdfTextPdfPdfAppearance alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
  [template_ setWidthWithFloat:width];
  [template_ setHeightWithFloat:height];
  (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:template_ withComItextpdfTextPdfPdfName:forcedName];
  return template_;
}


#line 2447
- (void)addPSXObjectWithComItextpdfTextPdfPdfPSXObject:(ComItextpdfTextPdfPdfPSXObject *)psobject {
  
#line 2448
  if (inText_ && [self isTagged]) {
    [self endText];
  }
  [self checkWriter];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:psobject withComItextpdfTextPdfPdfName:nil];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addXObjectWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfPSXObject *) nil_chk(psobject)) getIndirectReference]];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" Do"])) append_iWithInt:separator_];
}


#line 2469
- (void)addTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_
                                           withFloat:(jfloat)a
                                           withFloat:(jfloat)b
                                           withFloat:(jfloat)c
                                           withFloat:(jfloat)d
                                           withFloat:(jfloat)e
                                           withFloat:(jfloat)f {
  
#line 2470
  [self addTemplateWithComItextpdfTextPdfPdfTemplate:template_ withFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f withBoolean:NO];
}


#line 2486
- (void)addTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_
                                           withFloat:(jfloat)a
                                           withFloat:(jfloat)b
                                           withFloat:(jfloat)c
                                           withFloat:(jfloat)d
                                           withFloat:(jfloat)e
                                           withFloat:(jfloat)f
                                         withBoolean:(jboolean)tagContent {
  
#line 2487
  [self checkWriter];
  [self checkNoPatternWithComItextpdfTextPdfPdfTemplate:template_];
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_FORM_XOBJ withId:template_];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:template_ withComItextpdfTextPdfPdfName:nil];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addXObjectWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfTemplate *) nil_chk(template_)) getIndirectReference]];
  if ([self isTagged]) {
    if (inText_)
#line 2495
    [self endText];
    if ([template_ isContentTagged] || ([template_ getPageReference] != nil && tagContent)) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"template.with.tagged.could.not.be.used.more.than.once" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    
#line 2500
    [template_ setPageReferenceWithComItextpdfTextPdfPdfIndirectReference:[writer_ getCurrentPage]];
    
#line 2502
    if (tagContent) {
      [template_ setContentTaggedWithBoolean:YES];
      JavaUtilArrayList *allMcElements = [self getMcElements];
      if (allMcElements != nil && [allMcElements size] > 0)
#line 2506
      [((JavaUtilArrayList *) nil_chk([template_ getMcElements])) addWithId:[allMcElements getWithInt:[allMcElements size] - 1]];
    }
    else {
      
#line 2508
      [self openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:template_];
    }
  }
  
#line 2512
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"q "];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:a])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:b])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:c])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:d])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:e])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:f])) appendWithNSString:@" cm "];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" Do Q"])) append_iWithInt:separator_];
  
#line 2521
  if ([self isTagged] && !tagContent) {
    [self closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:template_];
    [template_ setIdWithComItextpdfTextAccessibleElementId:nil];
  }
}


#line 2532
- (void)addTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_
               withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)transform {
  
#line 2533
  [self addTemplateWithComItextpdfTextPdfPdfTemplate:template_ withComItextpdfAwtGeomAffineTransform:transform withBoolean:NO];
}


#line 2543
- (void)addTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_
               withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)transform
                                         withBoolean:(jboolean)tagContent {
  
#line 2544
  IOSDoubleArray *matrix = [IOSDoubleArray arrayWithLength:6];
  [((ComItextpdfAwtGeomAffineTransform *) nil_chk(transform)) getMatrixWithDoubleArray:matrix];
  [self addTemplateWithComItextpdfTextPdfPdfTemplate:template_ withFloat:(jfloat) IOSDoubleArray_Get(matrix, 0) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 1) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 2) withFloat:
#line 2547
  (jfloat) IOSDoubleArray_Get(matrix, 3) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 4) withFloat:(jfloat) IOSDoubleArray_Get(matrix, 5) withBoolean:tagContent];
}


#line 2550
- (void)addTemplateReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)template_
                                         withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)name
                                                             withFloat:(jfloat)a
                                                             withFloat:(jfloat)b
                                                             withFloat:(jfloat)c
                                                             withFloat:(jfloat)d
                                                             withFloat:(jfloat)e
                                                             withFloat:(jfloat)f {
  
#line 2551
  if (inText_ && [self isTagged]) {
    [self endText];
  }
  [self checkWriter];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addXObjectWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:template_];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"q "];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:a])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:b])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:c])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:d])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:e])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithFloat:f])) appendWithNSString:@" cm "];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" Do Q"])) append_iWithInt:separator_];
}


#line 2574
- (void)addTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_
                                           withFloat:(jfloat)x
                                           withFloat:(jfloat)y {
  
#line 2575
  [self addTemplateWithComItextpdfTextPdfPdfTemplate:template_ withFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:x withFloat:y];
}


#line 2578
- (void)addTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_
                                           withFloat:(jfloat)x
                                           withFloat:(jfloat)y
                                         withBoolean:(jboolean)tagContent {
  
#line 2579
  [self addTemplateWithComItextpdfTextPdfPdfTemplate:template_ withFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:x withFloat:y withBoolean:tagContent];
}


#line 2600
- (void)setCMYKColorFillWithInt:(jint)cyan
                        withInt:(jint)magenta
                        withInt:(jint)yellow
                        withInt:(jint)black {
  
#line 2601
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfCMYKColor alloc] initWithInt:cyan withInt:magenta withInt:yellow withInt:black] withBoolean:YES];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:(jfloat) (cyan & (jint) 0xFF) / (jint) 0xFF];
  (void) [content_ appendWithChar:' '];
  (void) [content_ appendWithFloat:(jfloat) (magenta & (jint) 0xFF) / (jint) 0xFF];
  (void) [content_ appendWithChar:' '];
  (void) [content_ appendWithFloat:(jfloat) (yellow & (jint) 0xFF) / (jint) 0xFF];
  (void) [content_ appendWithChar:' '];
  (void) [content_ appendWithFloat:(jfloat) (black & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithNSString:@" k"])) append_iWithInt:separator_];
}


#line 2628
- (void)setCMYKColorStrokeWithInt:(jint)cyan
                          withInt:(jint)magenta
                          withInt:(jint)yellow
                          withInt:(jint)black {
  
#line 2629
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfCMYKColor alloc] initWithInt:cyan withInt:magenta withInt:yellow withInt:black] withBoolean:NO];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:(jfloat) (cyan & (jint) 0xFF) / (jint) 0xFF];
  (void) [content_ appendWithChar:' '];
  (void) [content_ appendWithFloat:(jfloat) (magenta & (jint) 0xFF) / (jint) 0xFF];
  (void) [content_ appendWithChar:' '];
  (void) [content_ appendWithFloat:(jfloat) (yellow & (jint) 0xFF) / (jint) 0xFF];
  (void) [content_ appendWithChar:' '];
  (void) [content_ appendWithFloat:(jfloat) (black & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithNSString:@" K"])) append_iWithInt:separator_];
}


#line 2657
- (void)setRGBColorFillWithInt:(jint)red
                       withInt:(jint)green
                       withInt:(jint)blue {
  
#line 2658
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:red withInt:green withInt:blue] withBoolean:YES];
  [self HelperRGBWithFloat:(jfloat) (red & (jint) 0xFF) / (jint) 0xFF withFloat:(jfloat) (green & (jint) 0xFF) / (jint) 0xFF withFloat:(jfloat) (blue & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@" rg"])) append_iWithInt:separator_];
}


#line 2679
- (void)setRGBColorStrokeWithInt:(jint)red
                         withInt:(jint)green
                         withInt:(jint)blue {
  
#line 2680
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:red withInt:green withInt:blue] withBoolean:NO];
  [self HelperRGBWithFloat:(jfloat) (red & (jint) 0xFF) / (jint) 0xFF withFloat:(jfloat) (green & (jint) 0xFF) / (jint) 0xFF withFloat:(jfloat) (blue & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@" RG"])) append_iWithInt:separator_];
}

- (void)setColorStrokeWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  
#line 2690
  jint type = [ComItextpdfTextPdfExtendedColor getTypeWithComItextpdfTextBaseColor:color];
  switch (type) {
    case ComItextpdfTextPdfExtendedColor_TYPE_GRAY:
    {
      
#line 2693
      [self setGrayStrokeWithFloat:[((ComItextpdfTextPdfGrayColor *) nil_chk(((ComItextpdfTextPdfGrayColor *) check_class_cast(color, [ComItextpdfTextPdfGrayColor class])))) getGray]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_CMYK:
    {
      
#line 2697
      ComItextpdfTextPdfCMYKColor *cmyk = (ComItextpdfTextPdfCMYKColor *) check_class_cast(color, [ComItextpdfTextPdfCMYKColor class]);
      [self setCMYKColorStrokeFWithFloat:[((ComItextpdfTextPdfCMYKColor *) nil_chk(cmyk)) getCyan] withFloat:[cmyk getMagenta] withFloat:[cmyk getYellow] withFloat:[cmyk getBlack]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_SEPARATION:
    {
      
#line 2702
      ComItextpdfTextPdfSpotColor *spot = (ComItextpdfTextPdfSpotColor *) check_class_cast(color, [ComItextpdfTextPdfSpotColor class]);
      [self setColorStrokeWithComItextpdfTextPdfPdfSpotColor:[((ComItextpdfTextPdfSpotColor *) nil_chk(spot)) getPdfSpotColor] withFloat:[spot getTint]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_PATTERN:
    {
      
#line 2707
      ComItextpdfTextPdfPatternColor *pat = (ComItextpdfTextPdfPatternColor *) check_class_cast(color, [ComItextpdfTextPdfPatternColor class]);
      [self setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:[((ComItextpdfTextPdfPatternColor *) nil_chk(pat)) getPainter]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_SHADING:
    {
      
#line 2712
      ComItextpdfTextPdfShadingColor *shading = (ComItextpdfTextPdfShadingColor *) check_class_cast(color, [ComItextpdfTextPdfShadingColor class]);
      [self setShadingStrokeWithComItextpdfTextPdfPdfShadingPattern:[((ComItextpdfTextPdfShadingColor *) nil_chk(shading)) getPdfShadingPattern]];
      break;
    }
    default:
    [self setRGBColorStrokeWithInt:[((ComItextpdfTextBaseColor *) nil_chk(color)) getRed] withInt:[color getGreen] withInt:[color getBlue]];
  }
}


#line 2725
- (void)setColorFillWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  
#line 2726
  jint type = [ComItextpdfTextPdfExtendedColor getTypeWithComItextpdfTextBaseColor:color];
  switch (type) {
    case ComItextpdfTextPdfExtendedColor_TYPE_GRAY:
    {
      
#line 2729
      [self setGrayFillWithFloat:[((ComItextpdfTextPdfGrayColor *) nil_chk(((ComItextpdfTextPdfGrayColor *) check_class_cast(color, [ComItextpdfTextPdfGrayColor class])))) getGray]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_CMYK:
    {
      
#line 2733
      ComItextpdfTextPdfCMYKColor *cmyk = (ComItextpdfTextPdfCMYKColor *) check_class_cast(color, [ComItextpdfTextPdfCMYKColor class]);
      [self setCMYKColorFillFWithFloat:[((ComItextpdfTextPdfCMYKColor *) nil_chk(cmyk)) getCyan] withFloat:[cmyk getMagenta] withFloat:[cmyk getYellow] withFloat:[cmyk getBlack]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_SEPARATION:
    {
      
#line 2738
      ComItextpdfTextPdfSpotColor *spot = (ComItextpdfTextPdfSpotColor *) check_class_cast(color, [ComItextpdfTextPdfSpotColor class]);
      [self setColorFillWithComItextpdfTextPdfPdfSpotColor:[((ComItextpdfTextPdfSpotColor *) nil_chk(spot)) getPdfSpotColor] withFloat:[spot getTint]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_PATTERN:
    {
      
#line 2743
      ComItextpdfTextPdfPatternColor *pat = (ComItextpdfTextPdfPatternColor *) check_class_cast(color, [ComItextpdfTextPdfPatternColor class]);
      [self setPatternFillWithComItextpdfTextPdfPdfPatternPainter:[((ComItextpdfTextPdfPatternColor *) nil_chk(pat)) getPainter]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_SHADING:
    {
      
#line 2748
      ComItextpdfTextPdfShadingColor *shading = (ComItextpdfTextPdfShadingColor *) check_class_cast(color, [ComItextpdfTextPdfShadingColor class]);
      [self setShadingFillWithComItextpdfTextPdfPdfShadingPattern:[((ComItextpdfTextPdfShadingColor *) nil_chk(shading)) getPdfShadingPattern]];
      break;
    }
    default:
    [self setRGBColorFillWithInt:[((ComItextpdfTextBaseColor *) nil_chk(color)) getRed] withInt:[color getGreen] withInt:[color getBlue]];
  }
}


#line 2762
- (void)setColorFillWithComItextpdfTextPdfPdfSpotColor:(ComItextpdfTextPdfPdfSpotColor *)sp
                                             withFloat:(jfloat)tint {
  
#line 2763
  [self checkWriter];
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorDetails_ = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimpleWithComItextpdfTextPdfPdfSpotColor:sp];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfColorDetails *) nil_chk(state_->colorDetails_)) getColorName];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addColorWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[state_->colorDetails_ getIndirectReference]];
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfSpotColor alloc] initWithComItextpdfTextPdfPdfSpotColor:sp withFloat:tint] withBoolean:YES];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" cs "])) appendWithFloat:tint])) appendWithNSString:@" scn"])) append_iWithInt:separator_];
}


#line 2777
- (void)setColorStrokeWithComItextpdfTextPdfPdfSpotColor:(ComItextpdfTextPdfPdfSpotColor *)sp
                                               withFloat:(jfloat)tint {
  
#line 2778
  [self checkWriter];
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorDetails_ = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimpleWithComItextpdfTextPdfPdfSpotColor:sp];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfColorDetails *) nil_chk(state_->colorDetails_)) getColorName];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addColorWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[state_->colorDetails_ getIndirectReference]];
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfSpotColor alloc] initWithComItextpdfTextPdfPdfSpotColor:sp withFloat:tint] withBoolean:NO];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" CS "])) appendWithFloat:tint])) appendWithNSString:@" SCN"])) append_iWithInt:separator_];
}


#line 2791
- (void)setPatternFillWithComItextpdfTextPdfPdfPatternPainter:(ComItextpdfTextPdfPdfPatternPainter *)p {
  
#line 2792
  if ([((ComItextpdfTextPdfPdfPatternPainter *) nil_chk(p)) isStencil]) {
    [self setPatternFillWithComItextpdfTextPdfPdfPatternPainter:p withComItextpdfTextBaseColor:[p getDefaultColor]];
    return;
  }
  [self checkWriter];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimplePatternWithComItextpdfTextPdfPdfPatternPainter:p];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addPatternWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[p getIndirectReference]];
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfPatternColor alloc] initWithComItextpdfTextPdfPdfPatternPainter:p] withBoolean:YES];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_PATTERN_())) getBytes]])) appendWithNSString:@" cs "])) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" scn"])) append_iWithInt:separator_];
}


#line 2808
- (void)outputColorNumbersWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                             withFloat:(jfloat)tint {
  
#line 2809
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:color];
  jint type = [ComItextpdfTextPdfExtendedColor getTypeWithComItextpdfTextBaseColor:color];
  switch (type) {
    case ComItextpdfTextPdfExtendedColor_TYPE_RGB:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:(jfloat) [((ComItextpdfTextBaseColor *) nil_chk(color)) getRed] / (jint) 0xFF];
    (void) [content_ appendWithChar:' '];
    (void) [content_ appendWithFloat:(jfloat) [color getGreen] / (jint) 0xFF];
    (void) [content_ appendWithChar:' '];
    (void) [content_ appendWithFloat:(jfloat) [color getBlue] / (jint) 0xFF];
    break;
    case ComItextpdfTextPdfExtendedColor_TYPE_GRAY:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:[((ComItextpdfTextPdfGrayColor *) nil_chk(((ComItextpdfTextPdfGrayColor *) check_class_cast(color, [ComItextpdfTextPdfGrayColor class])))) getGray]];
    break;
    case ComItextpdfTextPdfExtendedColor_TYPE_CMYK:
    {
      
#line 2823
      ComItextpdfTextPdfCMYKColor *cmyk = (ComItextpdfTextPdfCMYKColor *) check_class_cast(color, [ComItextpdfTextPdfCMYKColor class]);
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:[((ComItextpdfTextPdfCMYKColor *) nil_chk(cmyk)) getCyan]])) appendWithChar:' '])) appendWithFloat:[cmyk getMagenta]];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithChar:' '])) appendWithFloat:[cmyk getYellow]])) appendWithChar:' '])) appendWithFloat:[cmyk getBlack]];
      break;
    }
    case ComItextpdfTextPdfExtendedColor_TYPE_SEPARATION:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:tint];
    break;
    default:
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.color.type" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}


#line 2840
- (void)setPatternFillWithComItextpdfTextPdfPdfPatternPainter:(ComItextpdfTextPdfPdfPatternPainter *)p
                                 withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  
#line 2841
  if ([ComItextpdfTextPdfExtendedColor getTypeWithComItextpdfTextBaseColor:color] == ComItextpdfTextPdfExtendedColor_TYPE_SEPARATION)
#line 2842
  [self setPatternFillWithComItextpdfTextPdfPdfPatternPainter:p withComItextpdfTextBaseColor:color withFloat:[((ComItextpdfTextPdfSpotColor *) nil_chk(((ComItextpdfTextPdfSpotColor *) check_class_cast(color, [ComItextpdfTextPdfSpotColor class])))) getTint]];
  else
#line 2844
  [self setPatternFillWithComItextpdfTextPdfPdfPatternPainter:p withComItextpdfTextBaseColor:color withFloat:0];
}

- (void)setPatternFillWithComItextpdfTextPdfPdfPatternPainter:(ComItextpdfTextPdfPdfPatternPainter *)p
                                 withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                                    withFloat:(jfloat)tint {
  
#line 2853
  [self checkWriter];
  if (![((ComItextpdfTextPdfPdfPatternPainter *) nil_chk(p)) isStencil])
#line 2855
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"an.uncolored.pattern.was.expected" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimplePatternWithComItextpdfTextPdfPdfPatternPainter:p];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addPatternWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[p getIndirectReference]];
  ComItextpdfTextPdfColorDetails *csDetail = [writer_ addSimplePatternColorspaceWithComItextpdfTextBaseColor:color];
  ComItextpdfTextPdfPdfName *cName = [prs addColorWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfColorDetails *) nil_chk(csDetail)) getColorName] withComItextpdfTextPdfPdfIndirectReference:[csDetail getIndirectReference]];
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfPdfContentByte_UncoloredPattern alloc] initWithComItextpdfTextPdfPdfPatternPainter:p withComItextpdfTextBaseColor:color withFloat:tint] withBoolean:YES];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(cName)) getBytes]])) appendWithNSString:@" cs"])) append_iWithInt:separator_];
  [self outputColorNumbersWithComItextpdfTextBaseColor:color withFloat:tint];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithChar:' '])) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" scn"])) append_iWithInt:separator_];
}


#line 2871
- (void)setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:(ComItextpdfTextPdfPdfPatternPainter *)p
                                   withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  if ([ComItextpdfTextPdfExtendedColor getTypeWithComItextpdfTextBaseColor:color] == ComItextpdfTextPdfExtendedColor_TYPE_SEPARATION)
#line 2873
  [self setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:p withComItextpdfTextBaseColor:color withFloat:[((ComItextpdfTextPdfSpotColor *) nil_chk(((ComItextpdfTextPdfSpotColor *) check_class_cast(color, [ComItextpdfTextPdfSpotColor class])))) getTint]];
  else
#line 2875
  [self setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:p withComItextpdfTextBaseColor:color withFloat:0];
}


#line 2883
- (void)setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:(ComItextpdfTextPdfPdfPatternPainter *)p
                                   withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                                      withFloat:(jfloat)tint {
  
#line 2884
  [self checkWriter];
  if (![((ComItextpdfTextPdfPdfPatternPainter *) nil_chk(p)) isStencil])
#line 2886
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"an.uncolored.pattern.was.expected" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimplePatternWithComItextpdfTextPdfPdfPatternPainter:p];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addPatternWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[p getIndirectReference]];
  ComItextpdfTextPdfColorDetails *csDetail = [writer_ addSimplePatternColorspaceWithComItextpdfTextBaseColor:color];
  ComItextpdfTextPdfPdfName *cName = [prs addColorWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfColorDetails *) nil_chk(csDetail)) getColorName] withComItextpdfTextPdfPdfIndirectReference:[csDetail getIndirectReference]];
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfPdfContentByte_UncoloredPattern alloc] initWithComItextpdfTextPdfPdfPatternPainter:p withComItextpdfTextBaseColor:color withFloat:tint] withBoolean:NO];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(cName)) getBytes]])) appendWithNSString:@" CS"])) append_iWithInt:separator_];
  [self outputColorNumbersWithComItextpdfTextBaseColor:color withFloat:tint];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithChar:' '])) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" SCN"])) append_iWithInt:separator_];
}


#line 2902
- (void)setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:(ComItextpdfTextPdfPdfPatternPainter *)p {
  if ([((ComItextpdfTextPdfPdfPatternPainter *) nil_chk(p)) isStencil]) {
    [self setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:p withComItextpdfTextBaseColor:[p getDefaultColor]];
    return;
  }
  [self checkWriter];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimplePatternWithComItextpdfTextPdfPdfPatternPainter:p];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addPatternWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[p getIndirectReference]];
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfPatternColor alloc] initWithComItextpdfTextPdfPdfPatternPainter:p] withBoolean:NO];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_PATTERN_())) getBytes]])) appendWithNSString:@" CS "])) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" SCN"])) append_iWithInt:separator_];
}


#line 2919
- (void)paintShadingWithComItextpdfTextPdfPdfShading:(ComItextpdfTextPdfPdfShading *)shading {
  
#line 2920
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimpleShadingWithComItextpdfTextPdfPdfShading:shading];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addShadingWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfPdfShading *) nil_chk(shading)) getShadingName] withComItextpdfTextPdfPdfIndirectReference:[shading getShadingReference]];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" sh"])) append_iWithInt:separator_];
  ComItextpdfTextPdfColorDetails *details = [shading getColorDetails];
  if (details != nil)
#line 2926
  (void) [prs addColorWithComItextpdfTextPdfPdfName:[details getColorName] withComItextpdfTextPdfPdfIndirectReference:[details getIndirectReference]];
}


#line 2933
- (void)paintShadingWithComItextpdfTextPdfPdfShadingPattern:(ComItextpdfTextPdfPdfShadingPattern *)shading {
  
#line 2934
  [self paintShadingWithComItextpdfTextPdfPdfShading:[((ComItextpdfTextPdfPdfShadingPattern *) nil_chk(shading)) getShading]];
}


#line 2941
- (void)setShadingFillWithComItextpdfTextPdfPdfShadingPattern:(ComItextpdfTextPdfPdfShadingPattern *)shading {
  
#line 2942
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimpleShadingPatternWithComItextpdfTextPdfPdfShadingPattern:shading];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addPatternWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfPdfShadingPattern *) nil_chk(shading)) getPatternName] withComItextpdfTextPdfPdfIndirectReference:[shading getPatternReference]];
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfShadingColor alloc] initWithComItextpdfTextPdfPdfShadingPattern:shading] withBoolean:YES];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_PATTERN_())) getBytes]])) appendWithNSString:@" cs "])) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" scn"])) append_iWithInt:separator_];
  ComItextpdfTextPdfColorDetails *details = [shading getColorDetails];
  if (details != nil)
#line 2949
  (void) [prs addColorWithComItextpdfTextPdfPdfName:[details getColorName] withComItextpdfTextPdfPdfIndirectReference:[details getIndirectReference]];
}


#line 2956
- (void)setShadingStrokeWithComItextpdfTextPdfPdfShadingPattern:(ComItextpdfTextPdfPdfShadingPattern *)shading {
  
#line 2957
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimpleShadingPatternWithComItextpdfTextPdfPdfShadingPattern:shading];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addPatternWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfPdfShadingPattern *) nil_chk(shading)) getPatternName] withComItextpdfTextPdfPdfIndirectReference:[shading getPatternReference]];
  [self saveColorWithComItextpdfTextBaseColor:[[ComItextpdfTextPdfShadingColor alloc] initWithComItextpdfTextPdfPdfShadingPattern:shading] withBoolean:NO];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_PATTERN_())) getBytes]])) appendWithNSString:@" CS "])) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" SCN"])) append_iWithInt:separator_];
  ComItextpdfTextPdfColorDetails *details = [shading getColorDetails];
  if (details != nil)
#line 2964
  (void) [prs addColorWithComItextpdfTextPdfPdfName:[details getColorName] withComItextpdfTextPdfPdfIndirectReference:[details getIndirectReference]];
}

- (void)checkWriter {
  
#line 2971
  if (writer_ == nil)
#line 2972
  @throw [[JavaLangNullPointerException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.writer.in.pdfcontentbyte.is.null" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 2979
- (void)showTextWithComItextpdfTextPdfPdfTextArray:(ComItextpdfTextPdfPdfTextArray *)text {
  
#line 2980
  [self checkState];
  if (!inText_ && [self isTagged]) {
    [self beginTextWithBoolean:YES];
  }
  if (((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->fontDetails_ == nil)
#line 2985
  @throw [[JavaLangNullPointerException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"font.and.size.must.be.set.before.writing.any.text" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"["];
  JavaUtilArrayList *arrayList = [((ComItextpdfTextPdfPdfTextArray *) nil_chk(text)) getArrayList];
  jboolean lastWasNumber = NO;
  for (id __strong obj in nil_chk(arrayList)) {
    if ([obj isKindOfClass:[NSString class]]) {
      [self showText2WithNSString:(NSString *) check_class_cast(obj, [NSString class])];
      [self updateTxWithNSString:(NSString *) check_class_cast(obj, [NSString class]) withFloat:0];
      lastWasNumber = NO;
    }
    else {
      if (lastWasNumber)
#line 2997
      (void) [content_ appendWithChar:' '];
      else
#line 2999
      lastWasNumber = YES;
      (void) [content_ appendWithFloat:[((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(obj, [JavaLangFloat class])))) floatValue]];
      [self updateTxWithNSString:@"" withFloat:[((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(obj, [JavaLangFloat class])))) floatValue]];
    }
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithNSString:@"]TJ"])) append_iWithInt:separator_];
}


#line 3011
- (ComItextpdfTextPdfPdfWriter *)getPdfWriter {
  return writer_;
}


#line 3019
- (ComItextpdfTextPdfPdfDocument *)getPdfDocument {
  
#line 3020
  return pdf_;
}


#line 3032
- (void)localGotoWithNSString:(NSString *)name
                    withFloat:(jfloat)llx
                    withFloat:(jfloat)lly
                    withFloat:(jfloat)urx
                    withFloat:(jfloat)ury {
  
#line 3033
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) localGotoWithNSString:name withFloat:llx withFloat:lly withFloat:urx withFloat:ury];
}


#line 3045
- (jboolean)localDestinationWithNSString:(NSString *)name
    withComItextpdfTextPdfPdfDestination:(ComItextpdfTextPdfPdfDestination *)destination {
  
#line 3046
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) localDestinationWithNSString:name withComItextpdfTextPdfPdfDestination:destination];
}


#line 3055
- (ComItextpdfTextPdfPdfContentByte *)getDuplicate {
  
#line 3056
  ComItextpdfTextPdfPdfContentByte *cb = [[ComItextpdfTextPdfPdfContentByte alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
  cb->duplicatedFrom_ = self;
  return cb;
}


#line 3061
- (ComItextpdfTextPdfPdfContentByte *)getDuplicateWithBoolean:(jboolean)inheritGraphicState {
  
#line 3062
  ComItextpdfTextPdfPdfContentByte *cb = [self getDuplicate];
  if (inheritGraphicState) {
    ((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb))->state_ = state_;
    cb->stateList_ = stateList_;
  }
  return cb;
}


#line 3079
- (void)remoteGotoWithNSString:(NSString *)filename
                  withNSString:(NSString *)name
                     withFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury {
  
#line 3080
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) remoteGotoWithNSString:filename withNSString:name withFloat:llx withFloat:lly withFloat:urx withFloat:ury];
}


#line 3092
- (void)remoteGotoWithNSString:(NSString *)filename
                       withInt:(jint)page
                     withFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury {
  
#line 3093
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) remoteGotoWithNSString:filename withInt:page withFloat:llx withFloat:lly withFloat:urx withFloat:ury];
}


#line 3104
- (void)roundRectangleWithFloat:(jfloat)x
                      withFloat:(jfloat)y
                      withFloat:(jfloat)w
                      withFloat:(jfloat)h
                      withFloat:(jfloat)r {
  
#line 3105
  if (w < 0) {
    x += w;
    w = -w;
  }
  if (h < 0) {
    y += h;
    h = -h;
  }
  if (r < 0)
#line 3114
  r = -r;
  jfloat b = 0.4477f;
  [self moveToWithFloat:x + r withFloat:y];
  [self lineToWithFloat:x + w - r withFloat:y];
  [self curveToWithFloat:x + w - r * b withFloat:y withFloat:x + w withFloat:y + r * b withFloat:x + w withFloat:y + r];
  [self lineToWithFloat:x + w withFloat:y + h - r];
  [self curveToWithFloat:x + w withFloat:y + h - r * b withFloat:x + w - r * b withFloat:y + h withFloat:x + w - r withFloat:y + h];
  [self lineToWithFloat:x + r withFloat:y + h];
  [self curveToWithFloat:x + r * b withFloat:y + h withFloat:x withFloat:y + h - r * b withFloat:x withFloat:y + h - r];
  [self lineToWithFloat:x withFloat:y + r];
  [self curveToWithFloat:x withFloat:y + r * b withFloat:x + r * b withFloat:y withFloat:x + r withFloat:y];
}

- (void)setActionWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action
                                       withFloat:(jfloat)llx
                                       withFloat:(jfloat)lly
                                       withFloat:(jfloat)urx
                                       withFloat:(jfloat)ury {
  
#line 3135
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setActionWithComItextpdfTextPdfPdfAction:action withFloat:llx withFloat:lly withFloat:urx withFloat:ury];
}


#line 3141
- (void)setLiteralWithNSString:(NSString *)s {
  
#line 3142
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:s];
}


#line 3148
- (void)setLiteralWithChar:(jchar)c {
  
#line 3149
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithChar:c];
}


#line 3155
- (void)setLiteralWithFloat:(jfloat)n {
  
#line 3156
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithFloat:n];
}


#line 3162
- (void)checkNoPatternWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)t {
  
#line 3163
  if ([((ComItextpdfTextPdfPdfTemplate *) nil_chk(t)) getType] == ComItextpdfTextPdfPdfTemplate_TYPE_PATTERN)
#line 3164
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.use.of.a.pattern.a.template.was.expected" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 3175
- (void)drawRadioFieldWithFloat:(jfloat)llx
                      withFloat:(jfloat)lly
                      withFloat:(jfloat)urx
                      withFloat:(jfloat)ury
                    withBoolean:(jboolean)on {
  
#line 3176
  if (llx > urx) {
    
#line 3176
    jfloat x = llx;
    
#line 3176
    llx = urx;
    
#line 3176
    urx = x;
  }
  
#line 3177
  if (lly > ury) {
    
#line 3177
    jfloat y = lly;
    
#line 3177
    lly = ury;
    
#line 3177
    ury = y;
  }
  
#line 3178
  [self saveState];
  
#line 3180
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:1];
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xC0 withInt:(jint) 0xC0 withInt:(jint) 0xC0]];
  [self arcWithFloat:llx + 1.0f withFloat:lly + 1.0f withFloat:urx - 1.0f withFloat:ury - 1.0f withFloat:0.0f withFloat:360.0f];
  [self stroke];
  
#line 3186
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:1];
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xA0 withInt:(jint) 0xA0 withInt:(jint) 0xA0]];
  [self arcWithFloat:llx + 0.5f withFloat:lly + 0.5f withFloat:urx - 0.5f withFloat:ury - 0.5f withFloat:45 withFloat:180];
  [self stroke];
  
#line 3192
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:1];
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0x00 withInt:(jint) 0x00 withInt:(jint) 0x00]];
  [self arcWithFloat:llx + 1.5f withFloat:lly + 1.5f withFloat:urx - 1.5f withFloat:ury - 1.5f withFloat:45 withFloat:180];
  [self stroke];
  if (on) {
    
#line 3199
    [self setLineWidthWithFloat:1];
    [self setLineCapWithInt:1];
    [self setColorFillWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0x00 withInt:(jint) 0x00 withInt:(jint) 0x00]];
    [self arcWithFloat:llx + 4.0f withFloat:lly + 4.0f withFloat:urx - 4.0f withFloat:ury - 4.0f withFloat:0 withFloat:360];
    [self fill];
  }
  [self restoreState];
}


#line 3215
- (void)drawTextFieldWithFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury {
  
#line 3216
  if (llx > urx) {
    
#line 3216
    jfloat x = llx;
    
#line 3216
    llx = urx;
    
#line 3216
    urx = x;
  }
  
#line 3217
  if (lly > ury) {
    
#line 3217
    jfloat y = lly;
    
#line 3217
    lly = ury;
    
#line 3217
    ury = y;
  }
  [self saveState];
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xC0 withInt:(jint) 0xC0 withInt:(jint) 0xC0]];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self rectangleWithFloat:llx withFloat:lly withFloat:urx - llx withFloat:ury - lly];
  [self stroke];
  
#line 3226
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self setColorFillWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xFF withInt:(jint) 0xFF withInt:(jint) 0xFF]];
  [self rectangleWithFloat:llx + 0.5f withFloat:lly + 0.5f withFloat:urx - llx - 1.0f withFloat:ury - lly - 1.0f];
  [self fill];
  
#line 3232
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xC0 withInt:(jint) 0xC0 withInt:(jint) 0xC0]];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 1.0f withFloat:lly + 1.5f];
  [self lineToWithFloat:urx - 1.5f withFloat:lly + 1.5f];
  [self lineToWithFloat:urx - 1.5f withFloat:ury - 1.0f];
  [self stroke];
  
#line 3240
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xA0 withInt:(jint) 0xA0 withInt:(jint) 0xA0]];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 1.0f withFloat:lly + 1];
  [self lineToWithFloat:llx + 1.0f withFloat:ury - 1.0f];
  [self lineToWithFloat:urx - 1.0f withFloat:ury - 1.0f];
  [self stroke];
  
#line 3248
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0x00 withInt:(jint) 0x00 withInt:(jint) 0x00]];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 2.0f withFloat:lly + 2.0f];
  [self lineToWithFloat:llx + 2.0f withFloat:ury - 2.0f];
  [self lineToWithFloat:urx - 2.0f withFloat:ury - 2.0f];
  [self stroke];
  [self restoreState];
}


#line 3268
- (void)drawButtonWithFloat:(jfloat)llx
                  withFloat:(jfloat)lly
                  withFloat:(jfloat)urx
                  withFloat:(jfloat)ury
               withNSString:(NSString *)text
withComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf
                  withFloat:(jfloat)size {
  
#line 3269
  if (llx > urx) {
    
#line 3269
    jfloat x = llx;
    
#line 3269
    llx = urx;
    
#line 3269
    urx = x;
  }
  
#line 3270
  if (lly > ury) {
    
#line 3270
    jfloat y = lly;
    
#line 3270
    lly = ury;
    
#line 3270
    ury = y;
  }
  [self saveState];
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0x00 withInt:(jint) 0x00 withInt:(jint) 0x00]];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self rectangleWithFloat:llx withFloat:lly withFloat:urx - llx withFloat:ury - lly];
  [self stroke];
  
#line 3279
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self setColorFillWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xC0 withInt:(jint) 0xC0 withInt:(jint) 0xC0]];
  [self rectangleWithFloat:llx + 0.5f withFloat:lly + 0.5f withFloat:urx - llx - 1.0f withFloat:ury - lly - 1.0f];
  [self fill];
  
#line 3285
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xFF withInt:(jint) 0xFF withInt:(jint) 0xFF]];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 1.0f withFloat:lly + 1.0f];
  [self lineToWithFloat:llx + 1.0f withFloat:ury - 1.0f];
  [self lineToWithFloat:urx - 1.0f withFloat:ury - 1.0f];
  [self stroke];
  
#line 3293
  [self setColorStrokeWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:(jint) 0xA0 withInt:(jint) 0xA0 withInt:(jint) 0xA0]];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 1.0f withFloat:lly + 1.0f];
  [self lineToWithFloat:urx - 1.0f withFloat:lly + 1.0f];
  [self lineToWithFloat:urx - 1.0f withFloat:ury - 1.0f];
  [self stroke];
  
#line 3301
  [self resetRGBColorFill];
  [self beginText];
  [self setFontAndSizeWithComItextpdfTextPdfBaseFont:bf withFloat:size];
  [self showTextAlignedWithInt:ComItextpdfTextPdfPdfContentByte_ALIGN_CENTER withNSString:text withFloat:llx + (urx - llx) / 2 withFloat:lly + (ury - lly - size) / 2 withFloat:0];
  [self endText];
  [self restoreState];
}


#line 3309
- (ComItextpdfTextPdfPageResources *)getPageResources {
  
#line 3310
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getPageResources];
}


#line 3316
- (void)setGStateWithComItextpdfTextPdfPdfGState:(ComItextpdfTextPdfPdfGState *)gstate {
  
#line 3317
  IOSObjectArray *obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimpleExtGStateWithComItextpdfTextPdfPdfDictionary:gstate];
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  ComItextpdfTextPdfPdfName *name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addExtGStateWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *) check_class_cast(IOSObjectArray_Get(nil_chk(obj), 0), [ComItextpdfTextPdfPdfName class]) withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(IOSObjectArray_Get(obj, 1), [ComItextpdfTextPdfPdfIndirectReference class])];
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->extGState_ = gstate;
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" gs"])) append_iWithInt:separator_];
}


#line 3332
- (void)beginLayerWithComItextpdfTextPdfPdfOCG:(id<ComItextpdfTextPdfPdfOCG>)layer {
  
#line 3333
  if ([(id) layer isKindOfClass:[ComItextpdfTextPdfPdfLayer class]] && [((ComItextpdfTextPdfPdfLayer *) nil_chk(((ComItextpdfTextPdfPdfLayer *) check_class_cast(layer, [ComItextpdfTextPdfPdfLayer class])))) getTitle] != nil)
#line 3334
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"a.title.is.not.a.layer" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (layerDepth_ == nil)
#line 3336
  layerDepth_ = [[JavaUtilArrayList alloc] init];
  if ([(id) layer isKindOfClass:[ComItextpdfTextPdfPdfLayerMembership class]]) {
    [((JavaUtilArrayList *) nil_chk(layerDepth_)) addWithId:[JavaLangInteger valueOfWithInt:1]];
    [self beginLayer2WithComItextpdfTextPdfPdfOCG:layer];
    return;
  }
  jint n = 0;
  ComItextpdfTextPdfPdfLayer *la = (ComItextpdfTextPdfPdfLayer *) check_class_cast(layer, [ComItextpdfTextPdfPdfLayer class]);
  while (la != nil) {
    if ([((ComItextpdfTextPdfPdfLayer *) nil_chk(la)) getTitle] == nil) {
      [self beginLayer2WithComItextpdfTextPdfPdfOCG:la];
      ++n;
    }
    la = [la getParent];
  }
  [((JavaUtilArrayList *) nil_chk(layerDepth_)) addWithId:[JavaLangInteger valueOfWithInt:n]];
}


#line 3354
- (void)beginLayer2WithComItextpdfTextPdfPdfOCG:(id<ComItextpdfTextPdfPdfOCG>)layer {
  
#line 3355
  ComItextpdfTextPdfPdfName *name = (ComItextpdfTextPdfPdfName *) check_class_cast(IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimplePropertyWithId:layer withComItextpdfTextPdfPdfIndirectReference:[((id<ComItextpdfTextPdfPdfOCG>) nil_chk(layer)) getRef]]), 0), [ComItextpdfTextPdfPdfName class]);
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addPropertyWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:[layer getRef]];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"/OC "])) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" BDC"])) append_iWithInt:separator_];
}


#line 3364
- (void)endLayer {
  
#line 3365
  jint n = 1;
  if (layerDepth_ != nil && ![layerDepth_ isEmpty]) {
    n = [((JavaLangInteger *) nil_chk([layerDepth_ getWithInt:[layerDepth_ size] - 1])) intValue];
    (void) [layerDepth_ removeWithInt:[layerDepth_ size] - 1];
  }
  else {
    
#line 3370
    @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.layer.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  while (n-- > 0)
#line 3373
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithNSString:@"EMC"])) append_iWithInt:separator_];
}


#line 3380
- (void)transformWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)af {
  
#line 3381
  if (inText_ && [self isTagged]) {
    [self endText];
  }
  IOSDoubleArray *matrix = [IOSDoubleArray arrayWithLength:6];
  [((ComItextpdfAwtGeomAffineTransform *) nil_chk(af)) getMatrixWithDoubleArray:matrix];
  [((ComItextpdfAwtGeomAffineTransform *) nil_chk(((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->CTM_)) concatenateWithComItextpdfAwtGeomAffineTransform:af];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) appendWithDouble:IOSDoubleArray_Get(matrix, 0)])) appendWithChar:' '])) appendWithDouble:IOSDoubleArray_Get(matrix, 1)])) appendWithChar:' '])) appendWithDouble:IOSDoubleArray_Get(matrix, 2)])) appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithDouble:IOSDoubleArray_Get(matrix, 3)])) appendWithChar:' '])) appendWithDouble:IOSDoubleArray_Get(matrix, 4)])) appendWithChar:' '])) appendWithDouble:IOSDoubleArray_Get(matrix, 5)])) appendWithNSString:@" cm"])) append_iWithInt:separator_];
}


#line 3391
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
  
#line 3392
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot];
}


#line 3395
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot
                                             withBoolean:(jboolean)applyCTM {
  
#line 3396
  if (applyCTM && [((ComItextpdfAwtGeomAffineTransform *) nil_chk(((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->CTM_)) getType] != ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY) {
    [((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) applyCTMWithComItextpdfAwtGeomAffineTransform:state_->CTM_];
  }
  [self addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot];
}


#line 3408
- (void)setDefaultColorspaceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)name
                          withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 3409
  ComItextpdfTextPdfPageResources *prs = [self getPageResources];
  [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addDefaultColorWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfObject:obj];
}


#line 3419
- (void)beginMarkedContentSequenceWithComItextpdfTextPdfPdfStructureElement:(ComItextpdfTextPdfPdfStructureElement *)struc {
  
#line 3420
  ComItextpdfTextPdfPdfObject *obj = [((ComItextpdfTextPdfPdfStructureElement *) nil_chk(struc)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
  IOSIntArray *structParentMarkPoint = [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getStructParentIndexAndNextMarkPointWithId:[self getCurrentPage]];
  jint structParent = IOSIntArray_Get(nil_chk(structParentMarkPoint), 0);
  jint mark = IOSIntArray_Get(structParentMarkPoint, 1);
  if (obj != nil) {
    ComItextpdfTextPdfPdfArray *ar = nil;
    if ([obj isNumber]) {
      ar = [[ComItextpdfTextPdfPdfArray alloc] init];
      [ar addWithComItextpdfTextPdfPdfObject:obj];
      [struc putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_() withComItextpdfTextPdfPdfObject:ar];
    }
    else if ([obj isArray]) {
      ar = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
    }
    else
#line 3435
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unknown.object.at.k.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [[obj getClass] description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    if ([((ComItextpdfTextPdfPdfArray *) nil_chk(ar)) getAsNumberWithInt:0] != nil) {
      ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MCR_()];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_() withComItextpdfTextPdfPdfObject:[self getCurrentPage]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MCID_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:mark]];
      [ar addWithComItextpdfTextPdfPdfObject:dic];
    }
    [struc setPageMarkWithInt:[pdf_ getStructParentIndexWithId:[self getCurrentPage]] withInt:-1];
  }
  else {
    [struc setPageMarkWithInt:structParent withInt:mark];
    [struc putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_() withComItextpdfTextPdfPdfObject:[self getCurrentPage]];
  }
  [self setMcDepthWithInt:[self getMcDepth] + 1];
  jint contentSize = [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) size];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithByteArray:[((ComItextpdfTextPdfPdfObject *) nil_chk([struc getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()])) getBytes]])) appendWithNSString:@" <</MCID "])) appendWithInt:mark])) appendWithNSString:@">> BDC"])) append_iWithInt:separator_];
  markedContentSize_ += [content_ size] - contentSize;
}


#line 3454
- (ComItextpdfTextPdfPdfIndirectReference *)getCurrentPage {
  
#line 3455
  return [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getCurrentPage];
}


#line 3461
- (void)endMarkedContentSequence {
  
#line 3462
  if ([self getMcDepth] == 0) {
    @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.begin.end.marked.content.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  jint contentSize = [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) size];
  [self setMcDepthWithInt:[self getMcDepth] - 1];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithNSString:@"EMC"])) append_iWithInt:separator_];
  markedContentSize_ += [content_ size] - contentSize;
}


#line 3479
- (void)beginMarkedContentSequenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)tag
                            withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)property
                                                    withBoolean:(jboolean)inline_ {
  
#line 3480
  jint contentSize = [((ComItextpdfTextPdfByteBuffer *) nil_chk(content_)) size];
  if (property == nil) {
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(tag)) getBytes]])) appendWithNSString:@" BMC"])) append_iWithInt:separator_];
    [self setMcDepthWithInt:[self getMcDepth] + 1];
  }
  else {
    
#line 3485
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(tag)) getBytes]])) appendWithChar:' '];
    if (inline_)
#line 3487
    @try {
      [property toPdfWithComItextpdfTextPdfPdfWriter:writer_ withJavaIoOutputStream:content_];
    }
    @catch (JavaLangException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
    else {
      IOSObjectArray *objs;
      if ([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) propertyExistsWithId:property])
#line 3496
      objs = [writer_ addSimplePropertyWithId:property withComItextpdfTextPdfPdfIndirectReference:nil];
      else
#line 3498
      objs = [writer_ addSimplePropertyWithId:property withComItextpdfTextPdfPdfIndirectReference:[writer_ getPdfIndirectReference]];
      ComItextpdfTextPdfPdfName *name = (ComItextpdfTextPdfPdfName *) check_class_cast(IOSObjectArray_Get(nil_chk(objs), 0), [ComItextpdfTextPdfPdfName class]);
      ComItextpdfTextPdfPageResources *prs = [self getPageResources];
      name = [((ComItextpdfTextPdfPageResources *) nil_chk(prs)) addPropertyWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(IOSObjectArray_Get(objs, 1), [ComItextpdfTextPdfPdfIndirectReference class])];
      (void) [content_ appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) getBytes]];
    }
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([content_ appendWithNSString:@" BDC"])) append_iWithInt:separator_];
    [self setMcDepthWithInt:[self getMcDepth] + 1];
  }
  markedContentSize_ += [content_ size] - contentSize;
}


#line 3514
- (void)beginMarkedContentSequenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)tag {
  
#line 3515
  [self beginMarkedContentSequenceWithComItextpdfTextPdfPdfName:tag withComItextpdfTextPdfPdfDictionary:nil withBoolean:NO];
}


#line 3529
- (void)sanityCheck {
  
#line 3530
  if ([self getMcDepth] != 0) {
    @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.marked.content.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if (inText_) {
    if ([self isTagged]) {
      [self endText];
    }
    else {
      
#line 3537
      @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.begin.end.text.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  if (layerDepth_ != nil && ![layerDepth_ isEmpty]) {
    @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.layer.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if (![((JavaUtilArrayList *) nil_chk(stateList_)) isEmpty]) {
    @throw [[ComItextpdfTextExceptionsIllegalPdfSyntaxException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unbalanced.save.restore.state.operators" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}


#line 3548
- (void)openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)element {
  
#line 3549
  if ([self isTagged]) {
    if (((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_))->openMCDocument_) {
      pdf_->openMCDocument_ = NO;
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getDirectContentUnder])) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:pdf_];
    }
    if (element != nil) {
      if (![((JavaUtilArrayList *) nil_chk([self getMcElements])) containsWithId:element]) {
        ComItextpdfTextPdfPdfStructureElement *structureElement = [self openMCBlockIntWithComItextpdfTextPdfInterfacesIAccessibleElement:element];
        [((JavaUtilArrayList *) nil_chk([self getMcElements])) addWithId:element];
        if (structureElement != nil)
#line 3559
        (void) [((JavaUtilHashMap *) nil_chk(pdf_->structElements_)) putWithId:[element getId] withId:structureElement];
      }
    }
  }
}


#line 3565
- (ComItextpdfTextPdfPdfDictionary *)getParentStructureElement {
  
#line 3566
  ComItextpdfTextPdfPdfDictionary *parent = nil;
  if ([((JavaUtilArrayList *) nil_chk([self getMcElements])) size] > 0)
#line 3568
  parent = [((JavaUtilHashMap *) nil_chk(((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_))->structElements_)) getWithId:[((id<ComItextpdfTextPdfInterfacesIAccessibleElement>) nil_chk([((JavaUtilArrayList *) nil_chk([self getMcElements])) getWithInt:[((JavaUtilArrayList *) nil_chk([self getMcElements])) size] - 1])) getId]];
  if (parent == nil) {
    parent = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getStructureTreeRoot];
  }
  return parent;
}


#line 3575
- (ComItextpdfTextPdfPdfStructureElement *)openMCBlockIntWithComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)element {
  
#line 3576
  ComItextpdfTextPdfPdfStructureElement *structureElement = nil;
  if ([self isTagged]) {
    id<ComItextpdfTextPdfInterfacesIAccessibleElement> parent = nil;
    if ([((JavaUtilArrayList *) nil_chk([self getMcElements])) size] > 0)
#line 3580
    parent = [((JavaUtilArrayList *) nil_chk([self getMcElements])) getWithInt:[((JavaUtilArrayList *) nil_chk([self getMcElements])) size] - 1];
    [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) checkElementRoleWithComItextpdfTextPdfInterfacesIAccessibleElement:element withComItextpdfTextPdfInterfacesIAccessibleElement:parent];
    if ([((id<ComItextpdfTextPdfInterfacesIAccessibleElement>) nil_chk(element)) getRole] != nil) {
      if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_ARTIFACT_())) isEqual:[element getRole]]) {
        structureElement = [((JavaUtilHashMap *) nil_chk(((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_))->structElements_)) getWithId:[element getId]];
        if (structureElement == nil) {
          structureElement = [[ComItextpdfTextPdfPdfStructureElement alloc] initWithComItextpdfTextPdfPdfDictionary:[self getParentStructureElement] withComItextpdfTextPdfPdfName:[element getRole]];
        }
      }
      if ([ComItextpdfTextPdfPdfName_get_ARTIFACT_() isEqual:[element getRole]]) {
        JavaUtilHashMap *properties = [element getAccessibleAttributes];
        ComItextpdfTextPdfPdfDictionary *propertiesDict = nil;
        if (properties == nil || [properties isEmpty]) {
        }
        else {
          
#line 3594
          propertiesDict = [[ComItextpdfTextPdfPdfDictionary alloc] init];
          for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([properties entrySet])) {
            [propertiesDict putWithComItextpdfTextPdfPdfName:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withComItextpdfTextPdfPdfObject:[entry_ getValue]];
          }
        }
        jboolean inTextLocal = inText_;
        if (inText_)
#line 3601
        [self endText];
        [self beginMarkedContentSequenceWithComItextpdfTextPdfPdfName:[element getRole] withComItextpdfTextPdfPdfDictionary:propertiesDict withBoolean:YES];
        if (inTextLocal)
#line 3604
        [self beginTextWithBoolean:YES];
      }
      else {
        
#line 3606
        if ([writer_ needToBeMarkedInContentWithComItextpdfTextPdfInterfacesIAccessibleElement:element]) {
          jboolean inTextLocal = inText_;
          if (inText_)
#line 3609
          [self endText];
          [self beginMarkedContentSequenceWithComItextpdfTextPdfPdfStructureElement:structureElement];
          if (inTextLocal)
#line 3612
          [self beginTextWithBoolean:YES];
        }
      }
    }
  }
  return structureElement;
}


#line 3620
- (void)closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)element {
  
#line 3621
  if ([self isTagged] && element != nil) {
    if ([((JavaUtilArrayList *) nil_chk([self getMcElements])) containsWithId:element]) {
      [self closeMCBlockIntWithComItextpdfTextPdfInterfacesIAccessibleElement:element];
      [((JavaUtilArrayList *) nil_chk([self getMcElements])) removeWithId:element];
    }
  }
}


#line 3629
- (void)closeMCBlockIntWithComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)element {
  
#line 3630
  if ([self isTagged] && [((id<ComItextpdfTextPdfInterfacesIAccessibleElement>) nil_chk(element)) getRole] != nil) {
    ComItextpdfTextPdfPdfStructureElement *structureElement = [((JavaUtilHashMap *) nil_chk(((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_))->structElements_)) getWithId:[element getId]];
    if (structureElement != nil) {
      [structureElement writeAttributesWithComItextpdfTextPdfInterfacesIAccessibleElement:element];
    }
    if ([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) needToBeMarkedInContentWithComItextpdfTextPdfInterfacesIAccessibleElement:element]) {
      jboolean inTextLocal = inText_;
      if (inText_)
#line 3638
      [self endText];
      [self endMarkedContentSequence];
      if (inTextLocal)
#line 3641
      [self beginTextWithBoolean:YES];
    }
  }
}


#line 3646
- (JavaUtilArrayList *)saveMCBlocks {
  
#line 3647
  JavaUtilArrayList *mc = [[JavaUtilArrayList alloc] init];
  if ([self isTagged]) {
    mc = [self getMcElements];
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(mc)) size]; i++) {
      [self closeMCBlockIntWithComItextpdfTextPdfInterfacesIAccessibleElement:[mc getWithInt:i]];
    }
    [self setMcElementsWithJavaUtilArrayList:[[JavaUtilArrayList alloc] init]];
  }
  return mc;
}


#line 3658
- (void)restoreMCBlocksWithJavaUtilArrayList:(JavaUtilArrayList *)mcElements {
  
#line 3659
  if ([self isTagged] && mcElements != nil) {
    [self setMcElementsWithJavaUtilArrayList:mcElements];
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk([self getMcElements])) size]; i++) {
      (void) [self openMCBlockIntWithComItextpdfTextPdfInterfacesIAccessibleElement:[((JavaUtilArrayList *) nil_chk([self getMcElements])) getWithInt:i]];
    }
  }
}


#line 3667
- (jint)getMcDepth {
  
#line 3668
  if (duplicatedFrom_ != nil)
#line 3669
  return [duplicatedFrom_ getMcDepth];
  else
#line 3671
  return mcDepth_;
}


#line 3674
- (void)setMcDepthWithInt:(jint)value {
  
#line 3675
  if (duplicatedFrom_ != nil)
#line 3676
  [duplicatedFrom_ setMcDepthWithInt:value];
  else
#line 3678
  mcDepth_ = value;
}


#line 3681
- (JavaUtilArrayList *)getMcElements {
  
#line 3682
  if (duplicatedFrom_ != nil)
#line 3683
  return [duplicatedFrom_ getMcElements];
  else
#line 3685
  return mcElements_;
}


#line 3688
- (void)setMcElementsWithJavaUtilArrayList:(JavaUtilArrayList *)value {
  
#line 3689
  if (duplicatedFrom_ != nil)
#line 3690
  [duplicatedFrom_ setMcElementsWithJavaUtilArrayList:value];
  else
#line 3692
  mcElements_ = value;
}


#line 3695
- (void)updateTxWithNSString:(NSString *)text
                   withFloat:(jfloat)Tj {
  
#line 3696
  ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->tx_ += [self getEffectiveStringWidthWithNSString:text withBoolean:NO withFloat:Tj];
}


#line 3699
- (void)saveColorWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                  withBoolean:(jboolean)fill {
  
#line 3700
  if ([self isTagged]) {
    if (inText_) {
      if (fill) {
        ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->textColorFill_ = color;
      }
      else {
        
#line 3705
        ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->textColorStroke_ = color;
      }
    }
    else {
      
#line 3708
      if (fill) {
        ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorFill_ = color;
      }
      else {
        
#line 3711
        ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorStroke_ = color;
      }
    }
  }
  else {
    
#line 3715
    if (fill) {
      ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorFill_ = color;
    }
    else {
      
#line 3718
      ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->colorStroke_ = color;
    }
  }
}


#line 3723
- (void)restoreColorWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                     withBoolean:(jboolean)fill {
  
#line 3724
  if ([self isTagged]) {
    if ([color isKindOfClass:[ComItextpdfTextPdfPdfContentByte_UncoloredPattern class]]) {
      ComItextpdfTextPdfPdfContentByte_UncoloredPattern *c = (ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) check_class_cast(color, [ComItextpdfTextPdfPdfContentByte_UncoloredPattern class]);
      if (fill)
#line 3728
      [self setPatternFillWithComItextpdfTextPdfPdfPatternPainter:[((ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) nil_chk(c)) getPainter] withComItextpdfTextBaseColor:c->color_ withFloat:c->tint_];
      else
#line 3730
      [self setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:[((ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) nil_chk(c)) getPainter] withComItextpdfTextBaseColor:c->color_ withFloat:c->tint_];
    }
    else {
      
#line 3732
      if (fill)
#line 3733
      [self setColorFillWithComItextpdfTextBaseColor:color];
      else
#line 3735
      [self setColorStrokeWithComItextpdfTextBaseColor:color];
    }
  }
}


#line 3740
- (void)restoreColor {
  
#line 3741
  if ([self isTagged]) {
    if (inText_) {
      if (![((ComItextpdfTextBaseColor *) nil_chk(((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->textColorFill_)) isEqual:state_->colorFill_]) {
        [self restoreColorWithComItextpdfTextBaseColor:state_->textColorFill_ withBoolean:YES];
      }
      if (![((ComItextpdfTextBaseColor *) nil_chk(state_->textColorStroke_)) isEqual:state_->colorStroke_]) {
        [self restoreColorWithComItextpdfTextBaseColor:state_->textColorStroke_ withBoolean:NO];
      }
    }
    else {
      
#line 3750
      if (![((ComItextpdfTextBaseColor *) nil_chk(((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->textColorFill_)) isEqual:state_->colorFill_]) {
        [self restoreColorWithComItextpdfTextBaseColor:state_->colorFill_ withBoolean:YES];
      }
      if (![((ComItextpdfTextBaseColor *) nil_chk(state_->textColorStroke_)) isEqual:state_->colorStroke_]) {
        [self restoreColorWithComItextpdfTextBaseColor:state_->colorStroke_ withBoolean:NO];
      }
    }
  }
}


#line 3777
- (jboolean)getInText {
  
#line 3778
  return inText_;
}


#line 3781
- (void)checkState {
  
#line 3782
  jboolean stroke = NO;
  jboolean fill = NO;
  if (((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(state_))->textRenderMode_ == ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL) {
    fill = YES;
  }
  else
#line 3786
  if (state_->textRenderMode_ == ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_STROKE) {
    stroke = YES;
  }
  else
#line 3788
  if (state_->textRenderMode_ == ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE) {
    fill = YES;
    stroke = YES;
  }
  if (fill) {
    [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:[self isTagged] ? state_->textColorFill_ : state_->colorFill_];
  }
  if (stroke) {
    [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_COLOR withId:[self isTagged] ? state_->textColorStroke_ : state_->colorStroke_];
  }
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer_ withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_GSTATE withId:state_->extGState_];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfContentByte *)other {
  [super copyAllFieldsTo:other];
  other->content_ = content_;
  other->duplicatedFrom_ = duplicatedFrom_;
  other->inText_ = inText_;
  other->layerDepth_ = layerDepth_;
  other->markedContentSize_ = markedContentSize_;
  other->mcDepth_ = mcDepth_;
  other->mcElements_ = mcElements_;
  other->pdf_ = pdf_;
  other->separator_ = separator_;
  other->state_ = state_;
  other->stateList_ = stateList_;
  other->writer_ = writer_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfContentByte class]) {
    ComItextpdfTextPdfPdfContentByte_unitRect_ = [IOSFloatArray arrayWithFloats:(jfloat[]){
#line 191
      0, 0, 0, 1, 1, 0, 1, 1 } count:8];
      ComItextpdfTextPdfPdfContentByte_abrev_ =
#line 221
      [[JavaUtilHashMap alloc] init];
      {
        
#line 228
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_() withId:@"/BPC "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withId:@"/CS "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_DECODE_() withId:@"/D "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_DECODEPARMS_() withId:@"/DP "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_FILTER_() withId:@"/F "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_HEIGHT_() withId:@"/H "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_IMAGEMASK_() withId:@"/IM "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_INTENT_() withId:@"/Intent "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_INTERPOLATE_() withId:@"/I "];
        (void) [ComItextpdfTextPdfPdfContentByte_abrev_ putWithId:ComItextpdfTextPdfPdfName_get_WIDTH_() withId:@"/W "];
      }
      ComItextpdfTextPdfPdfContentByte_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:", "PdfContentByte", NULL, 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "isTagged", NULL, "Z", 0x1, NULL },
    { "getInternalBuffer", NULL, "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "toPdfWithComItextpdfTextPdfPdfWriter:", "toPdf", "[B", 0x1, NULL },
    { "addWithComItextpdfTextPdfPdfContentByte:", "add", "V", 0x1, NULL },
    { "getXTLM", NULL, "F", 0x1, NULL },
    { "getYTLM", NULL, "F", 0x1, NULL },
    { "getLeading", NULL, "F", 0x1, NULL },
    { "getCharacterSpacing", NULL, "F", 0x1, NULL },
    { "getWordSpacing", NULL, "F", 0x1, NULL },
    { "getHorizontalScaling", NULL, "F", 0x1, NULL },
    { "setFlatnessWithFloat:", "setFlatness", "V", 0x1, NULL },
    { "setLineCapWithInt:", "setLineCap", "V", 0x1, NULL },
    { "setLineDashWithFloat:", "setLineDash", "V", 0x1, NULL },
    { "setLineDashWithFloat:withFloat:", "setLineDash", "V", 0x1, NULL },
    { "setLineDashWithFloat:withFloat:withFloat:", "setLineDash", "V", 0x1, NULL },
    { "setLineDashWithFloatArray:withFloat:", "setLineDash", "V", 0x11, NULL },
    { "setLineJoinWithInt:", "setLineJoin", "V", 0x1, NULL },
    { "setLineWidthWithFloat:", "setLineWidth", "V", 0x1, NULL },
    { "setMiterLimitWithFloat:", "setMiterLimit", "V", 0x1, NULL },
    { "clip", NULL, "V", 0x1, NULL },
    { "eoClip", NULL, "V", 0x1, NULL },
    { "setGrayFillWithFloat:", "setGrayFill", "V", 0x1, NULL },
    { "resetGrayFill", NULL, "V", 0x1, NULL },
    { "setGrayStrokeWithFloat:", "setGrayStroke", "V", 0x1, NULL },
    { "resetGrayStroke", NULL, "V", 0x1, NULL },
    { "HelperRGBWithFloat:withFloat:withFloat:", "HelperRGB", "V", 0x2, NULL },
    { "setRGBColorFillFWithFloat:withFloat:withFloat:", "setRGBColorFillF", "V", 0x1, NULL },
    { "resetRGBColorFill", NULL, "V", 0x1, NULL },
    { "setRGBColorStrokeFWithFloat:withFloat:withFloat:", "setRGBColorStrokeF", "V", 0x1, NULL },
    { "resetRGBColorStroke", NULL, "V", 0x1, NULL },
    { "HelperCMYKWithFloat:withFloat:withFloat:withFloat:", "HelperCMYK", "V", 0x2, NULL },
    { "setCMYKColorFillFWithFloat:withFloat:withFloat:withFloat:", "setCMYKColorFillF", "V", 0x1, NULL },
    { "resetCMYKColorFill", NULL, "V", 0x1, NULL },
    { "setCMYKColorStrokeFWithFloat:withFloat:withFloat:withFloat:", "setCMYKColorStrokeF", "V", 0x1, NULL },
    { "resetCMYKColorStroke", NULL, "V", 0x1, NULL },
    { "moveToWithFloat:withFloat:", "moveTo", "V", 0x1, NULL },
    { "lineToWithFloat:withFloat:", "lineTo", "V", 0x1, NULL },
    { "curveToWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "curveTo", "V", 0x1, NULL },
    { "curveToWithFloat:withFloat:withFloat:withFloat:", "curveTo", "V", 0x1, NULL },
    { "curveFromToWithFloat:withFloat:withFloat:withFloat:", "curveFromTo", "V", 0x1, NULL },
    { "circleWithFloat:withFloat:withFloat:", "circle", "V", 0x1, NULL },
    { "rectangleWithFloat:withFloat:withFloat:withFloat:", "rectangle", "V", 0x1, NULL },
    { "compareColorsWithComItextpdfTextBaseColor:withComItextpdfTextBaseColor:", "compareColors", "Z", 0x2, NULL },
    { "variableRectangleWithComItextpdfTextRectangle:", "variableRectangle", "V", 0x1, NULL },
    { "rectangleWithComItextpdfTextRectangle:", "rectangle", "V", 0x1, NULL },
    { "closePath", NULL, "V", 0x1, NULL },
    { "newPath", NULL, "V", 0x1, NULL },
    { "stroke", NULL, "V", 0x1, NULL },
    { "closePathStroke", NULL, "V", 0x1, NULL },
    { "fill", NULL, "V", 0x1, NULL },
    { "eoFill", NULL, "V", 0x1, NULL },
    { "fillStroke", NULL, "V", 0x1, NULL },
    { "closePathFillStroke", NULL, "V", 0x1, NULL },
    { "eoFillStroke", NULL, "V", 0x1, NULL },
    { "closePathEoFillStroke", NULL, "V", 0x1, NULL },
    { "addImageWithComItextpdfTextImage:", "addImage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addImageWithComItextpdfTextImage:withBoolean:", "addImage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addImageWithComItextpdfTextImage:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "addImage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addImageWithComItextpdfTextImage:withComItextpdfAwtGeomAffineTransform:", "addImage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addImageWithComItextpdfTextImage:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withBoolean:", "addImage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "reset", NULL, "V", 0x1, NULL },
    { "resetWithBoolean:", "reset", "V", 0x1, NULL },
    { "beginTextWithBoolean:", "beginText", "V", 0x4, NULL },
    { "beginText", NULL, "V", 0x1, NULL },
    { "endText", NULL, "V", 0x1, NULL },
    { "saveState", NULL, "V", 0x1, NULL },
    { "restoreState", NULL, "V", 0x1, NULL },
    { "setCharacterSpacingWithFloat:", "setCharacterSpacing", "V", 0x1, NULL },
    { "setWordSpacingWithFloat:", "setWordSpacing", "V", 0x1, NULL },
    { "setHorizontalScalingWithFloat:", "setHorizontalScaling", "V", 0x1, NULL },
    { "setLeadingWithFloat:", "setLeading", "V", 0x1, NULL },
    { "setFontAndSizeWithComItextpdfTextPdfBaseFont:withFloat:", "setFontAndSize", "V", 0x1, NULL },
    { "setTextRenderingModeWithInt:", "setTextRenderingMode", "V", 0x1, NULL },
    { "setTextRiseWithFloat:", "setTextRise", "V", 0x1, NULL },
    { "showText2WithNSString:", "showText2", "V", 0x2, NULL },
    { "showTextWithNSString:", "showText", "V", 0x1, NULL },
    { "getKernArrayWithNSString:withComItextpdfTextPdfBaseFont:", "getKernArray", "Lcom.itextpdf.text.pdf.PdfTextArray;", 0x9, NULL },
    { "showTextKernedWithNSString:", "showTextKerned", "V", 0x1, NULL },
    { "newlineShowTextWithNSString:", "newlineShowText", "V", 0x1, NULL },
    { "newlineShowTextWithFloat:withFloat:withNSString:", "newlineShowText", "V", 0x1, NULL },
    { "setTextMatrixWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "setTextMatrix", "V", 0x1, NULL },
    { "setTextMatrixWithComItextpdfAwtGeomAffineTransform:", "setTextMatrix", "V", 0x1, NULL },
    { "setTextMatrixWithFloat:withFloat:", "setTextMatrix", "V", 0x1, NULL },
    { "moveTextWithFloat:withFloat:", "moveText", "V", 0x1, NULL },
    { "moveTextWithLeadingWithFloat:withFloat:", "moveTextWithLeading", "V", 0x1, NULL },
    { "newlineText", NULL, "V", 0x1, NULL },
    { "size", NULL, "I", 0x0, NULL },
    { "sizeWithBoolean:", "size", "I", 0x0, NULL },
    { "escapeStringWithByteArray:", "escapeString", "[B", 0x8, NULL },
    { "escapeStringWithByteArray:withComItextpdfTextPdfByteBuffer:", "escapeString", "V", 0x8, NULL },
    { "addOutlineWithComItextpdfTextPdfPdfOutline:withNSString:", "addOutline", "V", 0x1, NULL },
    { "getRootOutline", NULL, "Lcom.itextpdf.text.pdf.PdfOutline;", 0x1, NULL },
    { "getEffectiveStringWidthWithNSString:withBoolean:", "getEffectiveStringWidth", "F", 0x1, NULL },
    { "getEffectiveStringWidthWithNSString:withBoolean:withFloat:", "getEffectiveStringWidth", "F", 0x2, NULL },
    { "showTextAlignedWithInt:withNSString:withFloat:withFloat:withFloat:", "showTextAligned", "V", 0x1, NULL },
    { "showTextAlignedWithInt:withNSString:withFloat:withFloat:withFloat:withBoolean:", "showTextAligned", "V", 0x2, NULL },
    { "showTextAlignedKernedWithInt:withNSString:withFloat:withFloat:withFloat:", "showTextAlignedKerned", "V", 0x1, NULL },
    { "concatCTMWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "concatCTM", "V", 0x1, NULL },
    { "concatCTMWithComItextpdfAwtGeomAffineTransform:", "concatCTM", "V", 0x1, NULL },
    { "bezierArcWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "bezierArc", "Ljava.util.ArrayList;", 0x9, NULL },
    { "arcWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "arc", "V", 0x1, NULL },
    { "ellipseWithFloat:withFloat:withFloat:withFloat:", "ellipse", "V", 0x1, NULL },
    { "createPatternWithFloat:withFloat:withFloat:withFloat:", "createPattern", "Lcom.itextpdf.text.pdf.PdfPatternPainter;", 0x1, NULL },
    { "createPatternWithFloat:withFloat:", "createPattern", "Lcom.itextpdf.text.pdf.PdfPatternPainter;", 0x1, NULL },
    { "createPatternWithFloat:withFloat:withFloat:withFloat:withComItextpdfTextBaseColor:", "createPattern", "Lcom.itextpdf.text.pdf.PdfPatternPainter;", 0x1, NULL },
    { "createPatternWithFloat:withFloat:withComItextpdfTextBaseColor:", "createPattern", "Lcom.itextpdf.text.pdf.PdfPatternPainter;", 0x1, NULL },
    { "createTemplateWithFloat:withFloat:", "createTemplate", "Lcom.itextpdf.text.pdf.PdfTemplate;", 0x1, NULL },
    { "createTemplateWithFloat:withFloat:withComItextpdfTextPdfPdfName:", "createTemplate", "Lcom.itextpdf.text.pdf.PdfTemplate;", 0x0, NULL },
    { "createAppearanceWithFloat:withFloat:", "createAppearance", "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x1, NULL },
    { "createAppearanceWithFloat:withFloat:withComItextpdfTextPdfPdfName:", "createAppearance", "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x0, NULL },
    { "addPSXObjectWithComItextpdfTextPdfPdfPSXObject:", "addPSXObject", "V", 0x1, NULL },
    { "addTemplateWithComItextpdfTextPdfPdfTemplate:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "addTemplate", "V", 0x1, NULL },
    { "addTemplateWithComItextpdfTextPdfPdfTemplate:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withBoolean:", "addTemplate", "V", 0x1, NULL },
    { "addTemplateWithComItextpdfTextPdfPdfTemplate:withComItextpdfAwtGeomAffineTransform:", "addTemplate", "V", 0x1, NULL },
    { "addTemplateWithComItextpdfTextPdfPdfTemplate:withComItextpdfAwtGeomAffineTransform:withBoolean:", "addTemplate", "V", 0x1, NULL },
    { "addTemplateReferenceWithComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfName:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "addTemplateReference", "V", 0x0, NULL },
    { "addTemplateWithComItextpdfTextPdfPdfTemplate:withFloat:withFloat:", "addTemplate", "V", 0x1, NULL },
    { "addTemplateWithComItextpdfTextPdfPdfTemplate:withFloat:withFloat:withBoolean:", "addTemplate", "V", 0x1, NULL },
    { "setCMYKColorFillWithInt:withInt:withInt:withInt:", "setCMYKColorFill", "V", 0x1, NULL },
    { "setCMYKColorStrokeWithInt:withInt:withInt:withInt:", "setCMYKColorStroke", "V", 0x1, NULL },
    { "setRGBColorFillWithInt:withInt:withInt:", "setRGBColorFill", "V", 0x1, NULL },
    { "setRGBColorStrokeWithInt:withInt:withInt:", "setRGBColorStroke", "V", 0x1, NULL },
    { "setColorStrokeWithComItextpdfTextBaseColor:", "setColorStroke", "V", 0x1, NULL },
    { "setColorFillWithComItextpdfTextBaseColor:", "setColorFill", "V", 0x1, NULL },
    { "setColorFillWithComItextpdfTextPdfPdfSpotColor:withFloat:", "setColorFill", "V", 0x1, NULL },
    { "setColorStrokeWithComItextpdfTextPdfPdfSpotColor:withFloat:", "setColorStroke", "V", 0x1, NULL },
    { "setPatternFillWithComItextpdfTextPdfPdfPatternPainter:", "setPatternFill", "V", 0x1, NULL },
    { "outputColorNumbersWithComItextpdfTextBaseColor:withFloat:", "outputColorNumbers", "V", 0x0, NULL },
    { "setPatternFillWithComItextpdfTextPdfPdfPatternPainter:withComItextpdfTextBaseColor:", "setPatternFill", "V", 0x1, NULL },
    { "setPatternFillWithComItextpdfTextPdfPdfPatternPainter:withComItextpdfTextBaseColor:withFloat:", "setPatternFill", "V", 0x1, NULL },
    { "setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:withComItextpdfTextBaseColor:", "setPatternStroke", "V", 0x1, NULL },
    { "setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:withComItextpdfTextBaseColor:withFloat:", "setPatternStroke", "V", 0x1, NULL },
    { "setPatternStrokeWithComItextpdfTextPdfPdfPatternPainter:", "setPatternStroke", "V", 0x1, NULL },
    { "paintShadingWithComItextpdfTextPdfPdfShading:", "paintShading", "V", 0x1, NULL },
    { "paintShadingWithComItextpdfTextPdfPdfShadingPattern:", "paintShading", "V", 0x1, NULL },
    { "setShadingFillWithComItextpdfTextPdfPdfShadingPattern:", "setShadingFill", "V", 0x1, NULL },
    { "setShadingStrokeWithComItextpdfTextPdfPdfShadingPattern:", "setShadingStroke", "V", 0x1, NULL },
    { "checkWriter", NULL, "V", 0x4, NULL },
    { "showTextWithComItextpdfTextPdfPdfTextArray:", "showText", "V", 0x1, NULL },
    { "getPdfWriter", NULL, "Lcom.itextpdf.text.pdf.PdfWriter;", 0x1, NULL },
    { "getPdfDocument", NULL, "Lcom.itextpdf.text.pdf.PdfDocument;", 0x1, NULL },
    { "localGotoWithNSString:withFloat:withFloat:withFloat:withFloat:", "localGoto", "V", 0x1, NULL },
    { "localDestinationWithNSString:withComItextpdfTextPdfPdfDestination:", "localDestination", "Z", 0x1, NULL },
    { "getDuplicate", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getDuplicateWithBoolean:", "getDuplicate", "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "remoteGotoWithNSString:withNSString:withFloat:withFloat:withFloat:withFloat:", "remoteGoto", "V", 0x1, NULL },
    { "remoteGotoWithNSString:withInt:withFloat:withFloat:withFloat:withFloat:", "remoteGoto", "V", 0x1, NULL },
    { "roundRectangleWithFloat:withFloat:withFloat:withFloat:withFloat:", "roundRectangle", "V", 0x1, NULL },
    { "setActionWithComItextpdfTextPdfPdfAction:withFloat:withFloat:withFloat:withFloat:", "setAction", "V", 0x1, NULL },
    { "setLiteralWithNSString:", "setLiteral", "V", 0x1, NULL },
    { "setLiteralWithChar:", "setLiteral", "V", 0x1, NULL },
    { "setLiteralWithFloat:", "setLiteral", "V", 0x1, NULL },
    { "checkNoPatternWithComItextpdfTextPdfPdfTemplate:", "checkNoPattern", "V", 0x0, NULL },
    { "drawRadioFieldWithFloat:withFloat:withFloat:withFloat:withBoolean:", "drawRadioField", "V", 0x1, NULL },
    { "drawTextFieldWithFloat:withFloat:withFloat:withFloat:", "drawTextField", "V", 0x1, NULL },
    { "drawButtonWithFloat:withFloat:withFloat:withFloat:withNSString:withComItextpdfTextPdfBaseFont:withFloat:", "drawButton", "V", 0x1, NULL },
    { "getPageResources", NULL, "Lcom.itextpdf.text.pdf.PageResources;", 0x0, NULL },
    { "setGStateWithComItextpdfTextPdfPdfGState:", "setGState", "V", 0x1, NULL },
    { "beginLayerWithComItextpdfTextPdfPdfOCG:", "beginLayer", "V", 0x1, NULL },
    { "beginLayer2WithComItextpdfTextPdfPdfOCG:", "beginLayer2", "V", 0x2, NULL },
    { "endLayer", NULL, "V", 0x1, NULL },
    { "transformWithComItextpdfAwtGeomAffineTransform:", "transform", "V", 0x1, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addAnnotation", "V", 0x0, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:withBoolean:", "addAnnotation", "V", 0x0, NULL },
    { "setDefaultColorspaceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setDefaultColorspace", "V", 0x1, NULL },
    { "beginMarkedContentSequenceWithComItextpdfTextPdfPdfStructureElement:", "beginMarkedContentSequence", "V", 0x1, NULL },
    { "getCurrentPage", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x4, NULL },
    { "endMarkedContentSequence", NULL, "V", 0x1, NULL },
    { "beginMarkedContentSequenceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfDictionary:withBoolean:", "beginMarkedContentSequence", "V", 0x1, NULL },
    { "beginMarkedContentSequenceWithComItextpdfTextPdfPdfName:", "beginMarkedContentSequence", "V", 0x1, NULL },
    { "sanityCheck", NULL, "V", 0x1, NULL },
    { "openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:", "openMCBlock", "V", 0x1, NULL },
    { "getParentStructureElement", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x2, NULL },
    { "openMCBlockIntWithComItextpdfTextPdfInterfacesIAccessibleElement:", "openMCBlockInt", "Lcom.itextpdf.text.pdf.PdfStructureElement;", 0x2, NULL },
    { "closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:", "closeMCBlock", "V", 0x1, NULL },
    { "closeMCBlockIntWithComItextpdfTextPdfInterfacesIAccessibleElement:", "closeMCBlockInt", "V", 0x2, NULL },
    { "saveMCBlocks", NULL, "Ljava.util.ArrayList;", 0x4, NULL },
    { "restoreMCBlocksWithJavaUtilArrayList:", "restoreMCBlocks", "V", 0x4, NULL },
    { "getMcDepth", NULL, "I", 0x4, NULL },
    { "setMcDepthWithInt:", "setMcDepth", "V", 0x4, NULL },
    { "getMcElements", NULL, "Ljava.util.ArrayList;", 0x4, NULL },
    { "setMcElementsWithJavaUtilArrayList:", "setMcElements", "V", 0x4, NULL },
    { "updateTxWithNSString:withFloat:", "updateTx", "V", 0x4, NULL },
    { "saveColorWithComItextpdfTextBaseColor:withBoolean:", "saveColor", "V", 0x2, NULL },
    { "restoreColorWithComItextpdfTextBaseColor:withBoolean:", "restoreColor", "V", 0x2, "Ljava.io.IOException;" },
    { "restoreColor", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "getInText", NULL, "Z", 0x4, NULL },
    { "checkState", NULL, "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ALIGN_CENTER_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_ALIGN_CENTER },
    { "ALIGN_LEFT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_ALIGN_LEFT },
    { "ALIGN_RIGHT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_ALIGN_RIGHT },
    { "LINE_CAP_BUTT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_LINE_CAP_BUTT },
    { "LINE_CAP_ROUND_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_LINE_CAP_ROUND },
    { "LINE_CAP_PROJECTING_SQUARE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_LINE_CAP_PROJECTING_SQUARE },
    { "LINE_JOIN_MITER_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_LINE_JOIN_MITER },
    { "LINE_JOIN_ROUND_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_LINE_JOIN_ROUND },
    { "LINE_JOIN_BEVEL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_LINE_JOIN_BEVEL },
    { "TEXT_RENDER_MODE_FILL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL },
    { "TEXT_RENDER_MODE_STROKE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_STROKE },
    { "TEXT_RENDER_MODE_FILL_STROKE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE },
    { "TEXT_RENDER_MODE_INVISIBLE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_INVISIBLE },
    { "TEXT_RENDER_MODE_FILL_CLIP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_CLIP },
    { "TEXT_RENDER_MODE_STROKE_CLIP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_STROKE_CLIP },
    { "TEXT_RENDER_MODE_FILL_STROKE_CLIP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE_CLIP },
    { "TEXT_RENDER_MODE_CLIP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_CLIP },
    { "unitRect_", NULL, 0x1a, "[F", &ComItextpdfTextPdfPdfContentByte_unitRect_,  },
    { "content_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ByteBuffer;", NULL,  },
    { "markedContentSize_", NULL, 0x4, "I", NULL,  },
    { "writer_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "pdf_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDocument;", NULL,  },
    { "state_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfContentByte$GraphicState;", NULL,  },
    { "stateList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "layerDepth_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "separator_", NULL, 0x4, "I", NULL,  },
    { "mcDepth_", NULL, 0x2, "I", NULL,  },
    { "inText_", NULL, 0x2, "Z", NULL,  },
    { "abrev_", NULL, 0xa, "Ljava.util.HashMap;", &ComItextpdfTextPdfPdfContentByte_abrev_,  },
    { "mcElements_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "duplicatedFrom_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfContentByte = { "PdfContentByte", "com.itextpdf.text.pdf", NULL, 0x1, 190, methods, 31, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfContentByte;
}

@end


#line 72
@implementation ComItextpdfTextPdfPdfContentByte_GraphicState


#line 115
- (instancetype)init {
  if (self = [super init]) {
    xTLM_ =
#line 84
    0;
    yTLM_ =
#line 86
    0;
    aTLM_ =
#line 88
    1;
    bTLM_ =
#line 89
    0;
    cTLM_ =
#line 90
    0;
    dTLM_ =
#line 91
    1;
    tx_ =
#line 93
    0;
    leading_ =
#line 96
    0;
    scale__ =
#line 99
    100;
    charSpace_ =
#line 102
    0;
    wordSpace_ =
#line 105
    0;
    textColorFill_ =
#line 107
    [[ComItextpdfTextPdfGrayColor alloc] initWithInt:0];
    colorFill_ =
#line 108
    [[ComItextpdfTextPdfGrayColor alloc] initWithInt:0];
    textColorStroke_ =
#line 109
    [[ComItextpdfTextPdfGrayColor alloc] initWithInt:0];
    colorStroke_ =
#line 110
    [[ComItextpdfTextPdfGrayColor alloc] initWithInt:0];
    textRenderMode_ =
#line 111
    ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL;
    CTM_ =
#line 112
    [[ComItextpdfAwtGeomAffineTransform alloc] init];
    extGState_ =
#line 113
    nil;
  }
  return self;
}


#line 118
- (instancetype)initWithComItextpdfTextPdfPdfContentByte_GraphicState:(ComItextpdfTextPdfPdfContentByte_GraphicState *)cp {
  if (self = [super init]) {
    xTLM_ =
#line 84
    0;
    yTLM_ =
#line 86
    0;
    aTLM_ =
#line 88
    1;
    bTLM_ =
#line 89
    0;
    cTLM_ =
#line 90
    0;
    dTLM_ =
#line 91
    1;
    tx_ =
#line 93
    0;
    leading_ =
#line 96
    0;
    scale__ =
#line 99
    100;
    charSpace_ =
#line 102
    0;
    wordSpace_ =
#line 105
    0;
    textColorFill_ =
#line 107
    [[ComItextpdfTextPdfGrayColor alloc] initWithInt:0];
    colorFill_ =
#line 108
    [[ComItextpdfTextPdfGrayColor alloc] initWithInt:0];
    textColorStroke_ =
#line 109
    [[ComItextpdfTextPdfGrayColor alloc] initWithInt:0];
    colorStroke_ =
#line 110
    [[ComItextpdfTextPdfGrayColor alloc] initWithInt:0];
    textRenderMode_ =
#line 111
    ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL;
    CTM_ =
#line 112
    [[ComItextpdfAwtGeomAffineTransform alloc] init];
    extGState_ =
#line 113
    nil;
    
#line 119
    [self copyParametersWithComItextpdfTextPdfPdfContentByte_GraphicState:cp];
  }
  return self;
}


#line 122
- (void)copyParametersWithComItextpdfTextPdfPdfContentByte_GraphicState:(ComItextpdfTextPdfPdfContentByte_GraphicState *)cp {
  
#line 123
  fontDetails_ = ((ComItextpdfTextPdfPdfContentByte_GraphicState *) nil_chk(cp))->fontDetails_;
  colorDetails_ = cp->colorDetails_;
  size_ = cp->size_;
  xTLM_ = cp->xTLM_;
  yTLM_ = cp->yTLM_;
  aTLM_ = cp->aTLM_;
  bTLM_ = cp->bTLM_;
  cTLM_ = cp->cTLM_;
  dTLM_ = cp->dTLM_;
  tx_ = cp->tx_;
  leading_ = cp->leading_;
  scale__ = cp->scale__;
  charSpace_ = cp->charSpace_;
  wordSpace_ = cp->wordSpace_;
  textColorFill_ = cp->textColorFill_;
  colorFill_ = cp->colorFill_;
  textColorStroke_ = cp->textColorStroke_;
  colorStroke_ = cp->colorStroke_;
  CTM_ = [[ComItextpdfAwtGeomAffineTransform alloc] initWithComItextpdfAwtGeomAffineTransform:cp->CTM_];
  textRenderMode_ = cp->textRenderMode_;
  extGState_ = cp->extGState_;
}


#line 146
- (void)restoreWithComItextpdfTextPdfPdfContentByte_GraphicState:(ComItextpdfTextPdfPdfContentByte_GraphicState *)restore {
  
#line 147
  [self copyParametersWithComItextpdfTextPdfPdfContentByte_GraphicState:restore];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfContentByte_GraphicState *)other {
  [super copyAllFieldsTo:other];
  other->CTM_ = CTM_;
  other->aTLM_ = aTLM_;
  other->bTLM_ = bTLM_;
  other->cTLM_ = cTLM_;
  other->charSpace_ = charSpace_;
  other->colorDetails_ = colorDetails_;
  other->colorFill_ = colorFill_;
  other->colorStroke_ = colorStroke_;
  other->dTLM_ = dTLM_;
  other->extGState_ = extGState_;
  other->fontDetails_ = fontDetails_;
  other->leading_ = leading_;
  other->scale__ = scale__;
  other->size_ = size_;
  other->textColorFill_ = textColorFill_;
  other->textColorStroke_ = textColorStroke_;
  other->textRenderMode_ = textRenderMode_;
  other->tx_ = tx_;
  other->wordSpace_ = wordSpace_;
  other->xTLM_ = xTLM_;
  other->yTLM_ = yTLM_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GraphicState", NULL, 0x0, NULL },
    { "initWithComItextpdfTextPdfPdfContentByte_GraphicState:", "GraphicState", NULL, 0x0, NULL },
    { "copyParametersWithComItextpdfTextPdfPdfContentByte_GraphicState:", "copyParameters", "V", 0x0, NULL },
    { "restoreWithComItextpdfTextPdfPdfContentByte_GraphicState:", "restore", "V", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fontDetails_", NULL, 0x0, "Lcom.itextpdf.text.pdf.FontDetails;", NULL,  },
    { "colorDetails_", NULL, 0x0, "Lcom.itextpdf.text.pdf.ColorDetails;", NULL,  },
    { "size_", NULL, 0x0, "F", NULL,  },
    { "xTLM_", NULL, 0x4, "F", NULL,  },
    { "yTLM_", NULL, 0x4, "F", NULL,  },
    { "aTLM_", NULL, 0x4, "F", NULL,  },
    { "bTLM_", NULL, 0x4, "F", NULL,  },
    { "cTLM_", NULL, 0x4, "F", NULL,  },
    { "dTLM_", NULL, 0x4, "F", NULL,  },
    { "tx_", NULL, 0x4, "F", NULL,  },
    { "leading_", NULL, 0x4, "F", NULL,  },
    { "scale__", "scale", 0x4, "F", NULL,  },
    { "charSpace_", NULL, 0x4, "F", NULL,  },
    { "wordSpace_", NULL, 0x4, "F", NULL,  },
    { "textColorFill_", NULL, 0x4, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "colorFill_", NULL, 0x4, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "textColorStroke_", NULL, 0x4, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "colorStroke_", NULL, 0x4, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "textRenderMode_", NULL, 0x4, "I", NULL,  },
    { "CTM_", NULL, 0x4, "Lcom.itextpdf.awt.geom.AffineTransform;", NULL,  },
    { "extGState_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfObject;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfContentByte_GraphicState = { "GraphicState", "com.itextpdf.text.pdf", "PdfContentByte", 0x9, 4, methods, 21, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfContentByte_GraphicState;
}

@end


#line 3760
@implementation ComItextpdfTextPdfPdfContentByte_UncoloredPattern


#line 3764
- (instancetype)initWithComItextpdfTextPdfPdfPatternPainter:(ComItextpdfTextPdfPdfPatternPainter *)p
                               withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                                  withFloat:(jfloat)tint {
  if (self =
#line 3765
  [super initWithComItextpdfTextPdfPdfPatternPainter:p]) {
    
#line 3766
    self->color_ = color;
    
#line 3767
    self->tint_ = tint;
  }
  return self;
}

- (jboolean)isEqual:(id)obj {
  
#line 3772
  return [obj isKindOfClass:[ComItextpdfTextPdfPdfContentByte_UncoloredPattern class]] && [((ComItextpdfTextPdfPdfPatternPainter *) nil_chk((((ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) nil_chk(((ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) check_class_cast(obj, [ComItextpdfTextPdfPdfContentByte_UncoloredPattern class]))))->painter_))) isEqual:self->painter_] && [((ComItextpdfTextBaseColor *) nil_chk((((ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) nil_chk(((ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) check_class_cast(obj, [ComItextpdfTextPdfPdfContentByte_UncoloredPattern class]))))->color_))) isEqual:self->color_] && ((ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) nil_chk(((ComItextpdfTextPdfPdfContentByte_UncoloredPattern *) check_class_cast(obj, [ComItextpdfTextPdfPdfContentByte_UncoloredPattern class]))))->tint_ == self->tint_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfContentByte_UncoloredPattern *)other {
  [super copyAllFieldsTo:other];
  other->color_ = color_;
  other->tint_ = tint_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfPatternPainter:withComItextpdfTextBaseColor:withFloat:", "UncoloredPattern", NULL, 0x4, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "color_", NULL, 0x4, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "tint_", NULL, 0x4, "F", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfContentByte_UncoloredPattern = { "UncoloredPattern", "com.itextpdf.text.pdf", "PdfContentByte", 0x8, 2, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfContentByte_UncoloredPattern;
}

@end
