//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/ColumnText.java
//

#ifndef _ComItextpdfTextPdfColumnText_H_
#define _ComItextpdfTextPdfColumnText_H_

@class ComItextpdfTextChunk;
@class ComItextpdfTextFont;
@class ComItextpdfTextPdfBidiLine;
@class ComItextpdfTextPdfPdfContentByte;
@class ComItextpdfTextPhrase;
@class ComItextpdfTextRectangle;
@class IOSFloatArray;
@class IOSObjectArray;
@class JavaUtilArrayList;
@class JavaUtilLinkedList;
@protocol ComItextpdfTextElement;
@protocol ComItextpdfTextLogLogger;
@protocol ComItextpdfTextPdfInterfacesIAccessibleElement;
@protocol JavaUtilList;

#import "JreEmulation.h"

#define ComItextpdfTextPdfColumnText_AR_COMPOSEDTASHKEEL 4
#define ComItextpdfTextPdfColumnText_AR_LIG 8
#define ComItextpdfTextPdfColumnText_AR_NOVOWEL 1
#define ComItextpdfTextPdfColumnText_DIGITS_AN2EN 64
#define ComItextpdfTextPdfColumnText_DIGITS_EN2AN 32
#define ComItextpdfTextPdfColumnText_DIGITS_EN2AN_INIT_AL 128
#define ComItextpdfTextPdfColumnText_DIGITS_EN2AN_INIT_LR 96
#define ComItextpdfTextPdfColumnText_DIGIT_TYPE_AN 0
#define ComItextpdfTextPdfColumnText_DIGIT_TYPE_AN_EXTENDED 256
#define ComItextpdfTextPdfColumnText_GLOBAL_SPACE_CHAR_RATIO 0.0f
#define ComItextpdfTextPdfColumnText_LINE_STATUS_NOLINE 2
#define ComItextpdfTextPdfColumnText_LINE_STATUS_OFFLIMITS 1
#define ComItextpdfTextPdfColumnText_LINE_STATUS_OK 0
#define ComItextpdfTextPdfColumnText_NO_MORE_COLUMN 2
#define ComItextpdfTextPdfColumnText_NO_MORE_TEXT 1
#define ComItextpdfTextPdfColumnText_START_COLUMN 0

@interface ComItextpdfTextPdfColumnText : NSObject {
 @public
  id<ComItextpdfTextLogLogger> LOGGER_;
  jint runDirection_;
  jfloat maxY_;
  jfloat minY_;
  jfloat leftX_;
  jfloat rightX_;
  jint alignment_;
  JavaUtilArrayList *leftWall_;
  JavaUtilArrayList *rightWall_;
  ComItextpdfTextPdfBidiLine *bidiLine_;
  jfloat yLine_;
  jfloat lastX_;
  jfloat currentLeading_;
  jfloat fixedLeading_;
  jfloat multipliedLeading_;
  ComItextpdfTextPdfPdfContentByte *canvas_;
  IOSObjectArray *canvases_;
  jint lineStatus_;
  jfloat indent_;
  jfloat followingIndent_;
  jfloat rightIndent_;
  jfloat extraParagraphSpace_;
  jfloat rectangularWidth_;
  jboolean rectangularMode_;
  jfloat spaceCharRatio_;
  jboolean lastWasNewline_;
  jboolean repeatFirstLineIndent_;
  jint linesWritten_;
  jfloat firstLineY_;
  jboolean firstLineYDone_;
  jint arabicOptions_;
  jfloat descender_;
  jboolean composite_;
  ComItextpdfTextPdfColumnText *compositeColumn_;
  JavaUtilLinkedList *compositeElements_;
  jint listIdx_;
  jint rowIdx_;
  jint splittedRow_;
  ComItextpdfTextPhrase *waitPhrase_;
  jboolean useAscender_;
  jfloat filledWidth_;
  jboolean adjustFirstLine_;
  jboolean inheritGraphicState_;
}

- (instancetype)initWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas;

+ (ComItextpdfTextPdfColumnText *)duplicateWithComItextpdfTextPdfColumnText:(ComItextpdfTextPdfColumnText *)org;

- (ComItextpdfTextPdfColumnText *)setACopyWithComItextpdfTextPdfColumnText:(ComItextpdfTextPdfColumnText *)org;

- (void)setSimpleVarsWithComItextpdfTextPdfColumnText:(ComItextpdfTextPdfColumnText *)org;

- (void)addWaitingPhrase;

- (void)addTextWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase;

- (void)setTextWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase;

- (void)addTextWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk;

- (void)addElementWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element;

+ (jboolean)isAllowedElementWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element;

- (JavaUtilArrayList *)convertColumnWithFloatArray:(IOSFloatArray *)cLine;

- (jfloat)findLimitsPointWithJavaUtilArrayList:(JavaUtilArrayList *)wall;

- (IOSFloatArray *)findLimitsOneLine;

- (IOSFloatArray *)findLimitsTwoLines;

- (void)setColumnsWithFloatArray:(IOSFloatArray *)leftLine
                  withFloatArray:(IOSFloatArray *)rightLine;

- (void)setSimpleColumnWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase
                                       withFloat:(jfloat)llx
                                       withFloat:(jfloat)lly
                                       withFloat:(jfloat)urx
                                       withFloat:(jfloat)ury
                                       withFloat:(jfloat)leading
                                         withInt:(jint)alignment;

- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury
                       withFloat:(jfloat)leading
                         withInt:(jint)alignment;

- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury;

- (void)setSimpleColumnWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rect;

- (void)setLeadingWithFloat:(jfloat)leading;

- (void)setLeadingWithFloat:(jfloat)fixedLeading
                  withFloat:(jfloat)multipliedLeading;

- (jfloat)getLeading;

- (jfloat)getMultipliedLeading;

- (void)setYLineWithFloat:(jfloat)yLine;

- (jfloat)getYLine;

- (jint)getRowsDrawn;

- (void)setAlignmentWithInt:(jint)alignment;

- (jint)getAlignment;

- (void)setIndentWithFloat:(jfloat)indent;

- (void)setIndentWithFloat:(jfloat)indent
               withBoolean:(jboolean)repeatFirstLineIndent;

- (jfloat)getIndent;

- (void)setFollowingIndentWithFloat:(jfloat)indent;

- (jfloat)getFollowingIndent;

- (void)setRightIndentWithFloat:(jfloat)indent;

- (jfloat)getRightIndent;

- (jfloat)getCurrentLeading;

- (jboolean)getInheritGraphicState;

- (void)setInheritGraphicStateWithBoolean:(jboolean)inheritGraphicState;

- (jint)go;

- (jint)goWithBoolean:(jboolean)simulate;

- (jint)goWithBoolean:(jboolean)simulate
withComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)elementToGo;

- (jfloat)getExtraParagraphSpace;

- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace;

- (void)clearChunks;

- (jfloat)getSpaceCharRatio;

- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio;

- (void)setRunDirectionWithInt:(jint)runDirection;

- (jint)getRunDirection;

- (jint)getLinesWritten;

- (jfloat)getLastX;

- (jint)getArabicOptions;

- (void)setArabicOptionsWithInt:(jint)arabicOptions;

- (jfloat)getDescender;

+ (jfloat)getWidthWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase
                                    withInt:(jint)runDirection
                                    withInt:(jint)arabicOptions;

+ (jfloat)getWidthWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase;

+ (void)showTextAlignedWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas
                                                    withInt:(jint)alignment
                                  withComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase
                                                  withFloat:(jfloat)x
                                                  withFloat:(jfloat)y
                                                  withFloat:(jfloat)rotation
                                                    withInt:(jint)runDirection
                                                    withInt:(jint)arabicOptions;

+ (void)showTextAlignedWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas
                                                    withInt:(jint)alignment
                                  withComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase
                                                  withFloat:(jfloat)x
                                                  withFloat:(jfloat)y
                                                  withFloat:(jfloat)rotation;

+ (jfloat)fitTextWithComItextpdfTextFont:(ComItextpdfTextFont *)font
                            withNSString:(NSString *)text
            withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rect
                               withFloat:(jfloat)maxFontSize
                                 withInt:(jint)runDirection;

- (jint)goCompositeWithBoolean:(jboolean)simulate;

- (ComItextpdfTextPdfPdfContentByte *)getCanvas;

- (void)setCanvasWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas;

- (void)setCanvasesWithComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

- (IOSObjectArray *)getCanvases;

- (jboolean)zeroHeightElement;

- (id<JavaUtilList>)getCompositeElements;

- (jboolean)isUseAscender;

- (void)setUseAscenderWithBoolean:(jboolean)useAscender;

+ (jboolean)hasMoreTextWithInt:(jint)status;

- (jfloat)getFilledWidth;

- (void)setFilledWidthWithFloat:(jfloat)filledWidth;

- (void)updateFilledWidthWithFloat:(jfloat)w;

- (jboolean)isAdjustFirstLine;

- (void)setAdjustFirstLineWithBoolean:(jboolean)adjustFirstLine;

+ (jboolean)isTaggedWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas;

- (void)copyAllFieldsTo:(ComItextpdfTextPdfColumnText *)other;

@end

__attribute__((always_inline)) inline void ComItextpdfTextPdfColumnText_init() {}

J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, LOGGER_, id<ComItextpdfTextLogLogger>)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, leftWall_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, rightWall_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, bidiLine_, ComItextpdfTextPdfBidiLine *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, canvas_, ComItextpdfTextPdfPdfContentByte *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, canvases_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, compositeColumn_, ComItextpdfTextPdfColumnText *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, compositeElements_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfColumnText, waitPhrase_, ComItextpdfTextPhrase *)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, AR_NOVOWEL, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, AR_COMPOSEDTASHKEEL, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, AR_LIG, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, DIGITS_EN2AN, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, DIGITS_AN2EN, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, DIGITS_EN2AN_INIT_LR, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, DIGITS_EN2AN_INIT_AL, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, DIGIT_TYPE_AN, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, DIGIT_TYPE_AN_EXTENDED, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, GLOBAL_SPACE_CHAR_RATIO, jfloat)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, START_COLUMN, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, NO_MORE_TEXT, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, NO_MORE_COLUMN, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, LINE_STATUS_OK, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, LINE_STATUS_OFFLIMITS, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfColumnText, LINE_STATUS_NOLINE, jint)

#endif // _ComItextpdfTextPdfColumnText_H_
