//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TrueTypeFont.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TrueTypeFont.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/GlyphList.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfRectangle.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/TrueTypeFont.h"
#include "com/itextpdf/text/pdf/TrueTypeFontSubSet.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfTrueTypeFont_initialized = NO;


#line 62
@implementation ComItextpdfTextPdfTrueTypeFont

IOSObjectArray * ComItextpdfTextPdfTrueTypeFont_codePages_;


#line 342
- (instancetype)init {
  if (self = [super init]) {
    justNames_ =
#line 132
    NO;
    cff_ =
#line 146
    NO;
    style_ =
#line 161
    @"";
    head_ =
#line 164
    [[ComItextpdfTextPdfTrueTypeFont_FontHeader alloc] init];
    hhea_ =
#line 167
    [[ComItextpdfTextPdfTrueTypeFont_HorizontalHeader alloc] init];
    os_2_ =
#line 170
    [[ComItextpdfTextPdfTrueTypeFont_WindowsMetrics alloc] init];
    kerning_ =
#line 200
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    isFixedPitch_ =
#line 229
    NO;
  }
  return self;
}


#line 355
- (instancetype)initWithNSString:(NSString *)ttFile
                    withNSString:(NSString *)enc
                     withBoolean:(jboolean)emb
                   withByteArray:(IOSByteArray *)ttfAfm
                     withBoolean:(jboolean)justNames
                     withBoolean:(jboolean)forceRead {
  if (self = [super init]) {
    justNames_ =
#line 132
    NO;
    cff_ =
#line 146
    NO;
    style_ =
#line 161
    @"";
    head_ =
#line 164
    [[ComItextpdfTextPdfTrueTypeFont_FontHeader alloc] init];
    hhea_ =
#line 167
    [[ComItextpdfTextPdfTrueTypeFont_HorizontalHeader alloc] init];
    os_2_ =
#line 170
    [[ComItextpdfTextPdfTrueTypeFont_WindowsMetrics alloc] init];
    kerning_ =
#line 200
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    isFixedPitch_ =
#line 229
    NO;
    
#line 356
    self->justNames_ = justNames;
    
#line 357
    NSString *nameBase = [ComItextpdfTextPdfBaseFont getBaseNameWithNSString:ttFile];
    
#line 358
    NSString *ttcName = [ComItextpdfTextPdfTrueTypeFont getTTCNameWithNSString:nameBase];
    
#line 359
    if (((jint) [((NSString *) nil_chk(nameBase)) length]) < ((jint) [((NSString *) nil_chk(ttFile)) length])) {
      style_ = [ttFile substring:((jint) [nameBase length])];
    }
    
#line 362
    encoding_ = enc;
    
#line 363
    embedded_ = emb;
    
#line 364
    fileName_ = ttcName;
    
#line 365
    fontType_ = ComItextpdfTextPdfBaseFont_FONT_TYPE_TT;
    
#line 366
    ttcIndex_ = @"";
    
#line 367
    if (((jint) [((NSString *) nil_chk(ttcName)) length]) < ((jint) [nameBase length]))
#line 368
    ttcIndex_ = [nameBase substring:((jint) [ttcName length]) + 1];
    
#line 369
    if ([((NSString *) nil_chk([((NSString *) nil_chk(fileName_)) lowercaseString])) hasSuffix:@".ttf"] || [((NSString *) nil_chk([fileName_ lowercaseString])) hasSuffix:@".otf"] || [((NSString *) nil_chk([fileName_ lowercaseString])) hasSuffix:@".ttc"]) {
      [self processWithByteArray:ttfAfm withBoolean:forceRead];
      if (!justNames && embedded_ && os_2_->fsType_ == 2)
#line 372
      @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.cannot.be.embedded.due.to.licensing.restrictions" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$", fileName_, style_) } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    else
#line 375
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.is.not.a.ttf.otf.or.ttc.font.file" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$", fileName_, style_) } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    
#line 376
    if (![((NSString *) nil_chk(encoding_)) hasPrefix:@"#"])
#line 377
    (void) [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:@" " withNSString:enc];
    
#line 378
    [self createEncoding];
  }
  return self;
}


#line 387
+ (NSString *)getTTCNameWithNSString:(NSString *)name {
  
#line 388
  jint idx = [((NSString *) nil_chk([((NSString *) nil_chk(name)) lowercaseString])) indexOfString:@".ttc,"];
  if (idx < 0)
#line 390
  return name;
  else
#line 392
  return [name substring:0 endIndex:idx + 4];
}


#line 401
- (void)fillTables {
  
#line 402
  IOSIntArray *table_location;
  table_location = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"head"];
  if (table_location == nil)
#line 405
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"head", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0) + 16];
  ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->flags_ = [rf_ readUnsignedShort];
  head_->unitsPerEm_ = [rf_ readUnsignedShort];
  [rf_ skipBytesWithInt:16];
  head_->xMin_ = [rf_ readShort];
  head_->yMin_ = [rf_ readShort];
  head_->xMax_ = [rf_ readShort];
  head_->yMax_ = [rf_ readShort];
  head_->macStyle_ = [rf_ readUnsignedShort];
  
#line 416
  table_location = [tables_ getWithId:@"hhea"];
  if (table_location == nil)
#line 418
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"hhea", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [rf_ seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0) + 4];
  ((ComItextpdfTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(hhea_))->Ascender_ = [rf_ readShort];
  hhea_->Descender_ = [rf_ readShort];
  hhea_->LineGap_ = [rf_ readShort];
  hhea_->advanceWidthMax_ = [rf_ readUnsignedShort];
  hhea_->minLeftSideBearing_ = [rf_ readShort];
  hhea_->minRightSideBearing_ = [rf_ readShort];
  hhea_->xMaxExtent_ = [rf_ readShort];
  hhea_->caretSlopeRise_ = [rf_ readShort];
  hhea_->caretSlopeRun_ = [rf_ readShort];
  [rf_ skipBytesWithInt:12];
  hhea_->numberOfHMetrics_ = [rf_ readUnsignedShort];
  
#line 432
  table_location = [tables_ getWithId:@"OS/2"];
  if (table_location == nil)
#line 434
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"OS/2", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [rf_ seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0)];
  jint version_ = [rf_ readUnsignedShort];
  ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->xAvgCharWidth_ = [rf_ readShort];
  os_2_->usWeightClass_ = [rf_ readUnsignedShort];
  os_2_->usWidthClass_ = [rf_ readUnsignedShort];
  os_2_->fsType_ = [rf_ readShort];
  os_2_->ySubscriptXSize_ = [rf_ readShort];
  os_2_->ySubscriptYSize_ = [rf_ readShort];
  os_2_->ySubscriptXOffset_ = [rf_ readShort];
  os_2_->ySubscriptYOffset_ = [rf_ readShort];
  os_2_->ySuperscriptXSize_ = [rf_ readShort];
  os_2_->ySuperscriptYSize_ = [rf_ readShort];
  os_2_->ySuperscriptXOffset_ = [rf_ readShort];
  os_2_->ySuperscriptYOffset_ = [rf_ readShort];
  os_2_->yStrikeoutSize_ = [rf_ readShort];
  os_2_->yStrikeoutPosition_ = [rf_ readShort];
  os_2_->sFamilyClass_ = [rf_ readShort];
  [rf_ readFullyWithByteArray:os_2_->panose_];
  [rf_ skipBytesWithInt:16];
  [rf_ readFullyWithByteArray:os_2_->achVendID_];
  os_2_->fsSelection_ = [rf_ readUnsignedShort];
  os_2_->usFirstCharIndex_ = [rf_ readUnsignedShort];
  os_2_->usLastCharIndex_ = [rf_ readUnsignedShort];
  os_2_->sTypoAscender_ = [rf_ readShort];
  os_2_->sTypoDescender_ = [rf_ readShort];
  if (os_2_->sTypoDescender_ > 0)
#line 461
  os_2_->sTypoDescender_ = (jshort) -os_2_->sTypoDescender_;
  os_2_->sTypoLineGap_ = [rf_ readShort];
  os_2_->usWinAscent_ = [rf_ readUnsignedShort];
  os_2_->usWinDescent_ = [rf_ readUnsignedShort];
  os_2_->ulCodePageRange1_ = 0;
  os_2_->ulCodePageRange2_ = 0;
  if (version_ > 0) {
    os_2_->ulCodePageRange1_ = [rf_ readInt];
    os_2_->ulCodePageRange2_ = [rf_ readInt];
  }
  if (version_ > 1) {
    [rf_ skipBytesWithInt:2];
    os_2_->sCapHeight_ = [rf_ readShort];
  }
  else
#line 476
  os_2_->sCapHeight_ = J2ObjCFpToInt((0.7 * head_->unitsPerEm_));
  
#line 478
  table_location = [tables_ getWithId:@"post"];
  if (table_location == nil) {
    italicAngle_ = -[JavaLangMath atan2WithDouble:hhea_->caretSlopeRun_ withDouble:hhea_->caretSlopeRise_] * 180 / JavaLangMath_PI;
    return;
  }
  [rf_ seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0) + 4];
  jshort mantissa = [rf_ readShort];
  jint fraction = [rf_ readUnsignedShort];
  italicAngle_ = mantissa + fraction / 16384.0;
  underlinePosition_ = [rf_ readShort];
  underlineThickness_ = [rf_ readShort];
  isFixedPitch_ = ([rf_ readInt] != 0);
}


#line 498
- (NSString *)getBaseFont {
  
#line 499
  IOSIntArray *table_location;
  table_location = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"name"];
  if (table_location == nil)
#line 502
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"name", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0) + 2];
  jint numRecords = [rf_ readUnsignedShort];
  jint startOfStorage = [rf_ readUnsignedShort];
  for (jint k = 0; k < numRecords; ++k) {
    jint platformID = [rf_ readUnsignedShort];
    [rf_ readUnsignedShort];
    [rf_ readUnsignedShort];
    jint nameID = [rf_ readUnsignedShort];
    jint length = [rf_ readUnsignedShort];
    jint offset = [rf_ readUnsignedShort];
    if (nameID == 6) {
      [rf_ seekWithLong:IOSIntArray_Get(table_location, 0) + startOfStorage + offset];
      if (platformID == 0 || platformID == 3)
#line 516
      return [self readUnicodeStringWithInt:length];
      else
#line 518
      return [self readStandardStringWithInt:length];
    }
  }
  JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:fileName_];
  return [((NSString *) nil_chk([file getName])) replace:' ' withChar:'-'];
}

- (IOSObjectArray *)getNamesWithInt:(jint)id_ {
  
#line 531
  IOSIntArray *table_location;
  table_location = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"name"];
  if (table_location == nil)
#line 534
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"name", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0) + 2];
  jint numRecords = [rf_ readUnsignedShort];
  jint startOfStorage = [rf_ readUnsignedShort];
  JavaUtilArrayList *names = [[JavaUtilArrayList alloc] init];
  for (jint k = 0; k < numRecords; ++k) {
    jint platformID = [rf_ readUnsignedShort];
    jint platformEncodingID = [rf_ readUnsignedShort];
    jint languageID = [rf_ readUnsignedShort];
    jint nameID = [rf_ readUnsignedShort];
    jint length = [rf_ readUnsignedShort];
    jint offset = [rf_ readUnsignedShort];
    if (nameID == id_) {
      jint pos = (jint) [rf_ getFilePointer];
      [rf_ seekWithLong:IOSIntArray_Get(table_location, 0) + startOfStorage + offset];
      NSString *name;
      if (platformID == 0 || platformID == 3 || (platformID == 2 && platformEncodingID == 1)) {
        name = [self readUnicodeStringWithInt:length];
      }
      else {
        name = [self readStandardStringWithInt:length];
      }
      [names addWithId:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:platformID],
#line 557
      [NSString valueOfInt:platformEncodingID], [NSString valueOfInt:languageID], name } count:4 type:[IOSClass classWithClass:[NSString class]]]];
      [rf_ seekWithLong:pos];
    }
  }
  IOSObjectArray *thisName = [IOSObjectArray arrayWithLength:[names size] type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
  for (jint k = 0; k < [names size]; ++k)
#line 563
  IOSObjectArray_Set(thisName, k, [names getWithInt:k]);
  return thisName;
}


#line 571
- (IOSObjectArray *)getAllNames {
  IOSIntArray *table_location;
  table_location = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"name"];
  if (table_location == nil)
#line 575
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"name", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0) + 2];
  jint numRecords = [rf_ readUnsignedShort];
  jint startOfStorage = [rf_ readUnsignedShort];
  JavaUtilArrayList *names = [[JavaUtilArrayList alloc] init];
  for (jint k = 0; k < numRecords; ++k) {
    jint platformID = [rf_ readUnsignedShort];
    jint platformEncodingID = [rf_ readUnsignedShort];
    jint languageID = [rf_ readUnsignedShort];
    jint nameID = [rf_ readUnsignedShort];
    jint length = [rf_ readUnsignedShort];
    jint offset = [rf_ readUnsignedShort];
    jint pos = (jint) [rf_ getFilePointer];
    [rf_ seekWithLong:IOSIntArray_Get(table_location, 0) + startOfStorage + offset];
    NSString *name;
    if (platformID == 0 || platformID == 3 || (platformID == 2 && platformEncodingID == 1)) {
      name = [self readUnicodeStringWithInt:length];
    }
    else {
      name = [self readStandardStringWithInt:length];
    }
    [names addWithId:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:nameID], [NSString valueOfInt:platformID],
#line 597
    [NSString valueOfInt:platformEncodingID], [NSString valueOfInt:languageID], name } count:5 type:[IOSClass classWithClass:[NSString class]]]];
    [rf_ seekWithLong:pos];
  }
  IOSObjectArray *thisName = [IOSObjectArray arrayWithLength:[names size] type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
  for (jint k = 0; k < [names size]; ++k)
#line 602
  IOSObjectArray_Set(thisName, k, [names getWithInt:k]);
  return thisName;
}


#line 606
- (void)checkCff {
  
#line 607
  IOSIntArray *table_location;
  table_location = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"CFF "];
  if (table_location != nil) {
    cff_ = YES;
    cffOffset_ = IOSIntArray_Get(table_location, 0);
    cffLength_ = IOSIntArray_Get(table_location, 1);
  }
}


#line 622
- (void)processWithByteArray:(IOSByteArray *)ttfAfm
                 withBoolean:(jboolean)preload {
  
#line 623
  tables_ = [[JavaUtilHashMap alloc] init];
  
#line 625
  if (ttfAfm == nil)
#line 626
  rf_ = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithNSString:fileName_ withBoolean:preload withBoolean:ComItextpdfTextDocument_get_plainRandomAccess_()];
  else
#line 628
  rf_ = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithByteArray:ttfAfm];
  
#line 630
  @try {
    if (((jint) [((NSString *) nil_chk(ttcIndex_)) length]) > 0) {
      jint dirIdx = [JavaLangInteger parseIntWithNSString:ttcIndex_];
      if (dirIdx < 0)
#line 634
      @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.font.index.for.1.must.be.positive" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fileName_ } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
      NSString *mainTag = [self readStandardStringWithInt:4];
      if (![((NSString *) nil_chk(mainTag)) isEqual:@"ttcf"])
#line 637
      @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.is.not.a.valid.ttc.file" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fileName_ } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) skipBytesWithInt:4];
      jint dirCount = [rf_ readInt];
      if (dirIdx >= dirCount)
#line 641
      @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.font.index.for.1.must.be.between.0.and.2.it.was.3" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fileName_, [NSString valueOfInt:dirCount - 1], [NSString valueOfInt:dirIdx] } count:3 type:[IOSClass classWithClass:[NSObject class]]]]];
      [rf_ skipBytesWithInt:dirIdx * 4];
      directoryOffset_ = [rf_ readInt];
    }
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:directoryOffset_];
    jint ttId = [rf_ readInt];
    if (ttId != (jint) 0x00010000 && ttId != (jint) 0x4F54544F)
#line 648
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.is.not.a.valid.ttf.or.otf.file" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fileName_ } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    jint num_tables = [rf_ readUnsignedShort];
    [rf_ skipBytesWithInt:6];
    for (jint k = 0; k < num_tables; ++k) {
      NSString *tag = [self readStandardStringWithInt:4];
      [rf_ skipBytesWithInt:4];
      IOSIntArray *table_location = [IOSIntArray arrayWithLength:2];
      *IOSIntArray_GetRef(table_location, 0) = [rf_ readInt];
      *IOSIntArray_GetRef(table_location, 1) = [rf_ readInt];
      (void) [tables_ putWithId:tag withId:table_location];
    }
    [self checkCff];
    fontName_ = [self getBaseFont];
    fullName_ = [self getNamesWithInt:4];
    familyName_ = [self getNamesWithInt:1];
    allNameEntries_ = [self getAllNames];
    if (!justNames_) {
      [self fillTables];
      [self readGlyphWidths];
      [self readCMaps];
      [self readKerning];
      [self readBbox];
    }
  }
  @finally {
    
#line 674
    if (!embedded_) {
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) close];
      rf_ = nil;
    }
  }
}


#line 687
- (NSString *)readStandardStringWithInt:(jint)length {
  
#line 688
  return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) readStringWithInt:length withNSString:ComItextpdfTextPdfBaseFont_get_WINANSI_()];
}


#line 698
- (NSString *)readUnicodeStringWithInt:(jint)length {
  
#line 699
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  length /= 2;
  for (jint k = 0; k < length; ++k) {
    (void) [buf appendWithChar:[((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) readChar]];
  }
  return [buf description];
}


#line 712
- (void)readGlyphWidths {
  
#line 713
  IOSIntArray *table_location;
  table_location = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"hmtx"];
  if (table_location == nil)
#line 716
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"hmtx", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0)];
  glyphWidthsByIndex_ = [IOSIntArray arrayWithLength:((ComItextpdfTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(hhea_))->numberOfHMetrics_];
  for (jint k = 0; k < hhea_->numberOfHMetrics_; ++k) {
    *IOSIntArray_GetRef(glyphWidthsByIndex_, k) = [rf_ readUnsignedShort] * 1000 / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    jint
#line 722
    leftSideBearing = [rf_ readShort] * 1000 / head_->unitsPerEm_;
  }
}

- (jint)getGlyphWidthWithInt:(jint)glyph {
  
#line 731
  if (glyph >= ((IOSIntArray *) nil_chk(glyphWidthsByIndex_))->size_)
#line 732
  glyph = glyphWidthsByIndex_->size_ - 1;
  return IOSIntArray_Get(glyphWidthsByIndex_, glyph);
}


#line 736
- (void)readBbox {
  
#line 737
  IOSIntArray *tableLocation;
  tableLocation = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"head"];
  if (tableLocation == nil)
#line 740
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"head", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(tableLocation), 0) + ComItextpdfTextPdfTrueTypeFontSubSet_HEAD_LOCA_FORMAT_OFFSET];
  jboolean locaShortTable = [rf_ readUnsignedShort] == 0;
  tableLocation = [tables_ getWithId:@"loca"];
  if (tableLocation == nil)
#line 745
  return;
  [rf_ seekWithLong:IOSIntArray_Get(nil_chk(tableLocation), 0)];
  IOSIntArray *locaTable;
  if (locaShortTable) {
    jint entries = IOSIntArray_Get(tableLocation, 1) / 2;
    locaTable = [IOSIntArray arrayWithLength:entries];
    for (jint k = 0; k < entries; ++k)
#line 752
    *IOSIntArray_GetRef(locaTable, k) = [rf_ readUnsignedShort] * 2;
  }
  else {
    jint entries = IOSIntArray_Get(tableLocation, 1) / 4;
    locaTable = [IOSIntArray arrayWithLength:entries];
    for (jint k = 0; k < entries; ++k)
#line 758
    *IOSIntArray_GetRef(locaTable, k) = [rf_ readInt];
  }
  tableLocation = [tables_ getWithId:@"glyf"];
  if (tableLocation == nil)
#line 762
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"glyf", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  jint tableGlyphOffset = IOSIntArray_Get(nil_chk(tableLocation), 0);
  bboxes_ = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(locaTable))->size_ - 1 type:[IOSIntArray iosClass]];
  for (jint glyph = 0; glyph < locaTable->size_ - 1; ++glyph) {
    jint start = IOSIntArray_Get(locaTable, glyph);
    if (start != IOSIntArray_Get(locaTable, glyph + 1)) {
      [rf_ seekWithLong:tableGlyphOffset + start + 2];
      IOSObjectArray_SetAndConsume(bboxes_, glyph, [IOSIntArray newArrayWithInts:(jint[]){
#line 770
        [rf_ readShort] * 1000 / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_,
#line 771
        [rf_ readShort] * 1000 / head_->unitsPerEm_,
#line 772
        [rf_ readShort] * 1000 / head_->unitsPerEm_,
#line 773
        [rf_ readShort] * 1000 / head_->unitsPerEm_ } count:4]);
      }
    }
  }


#line 783
- (void)readCMaps {
  
#line 784
  IOSIntArray *table_location;
  table_location = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"cmap"];
  if (table_location == nil)
#line 787
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"cmap", JreStrcat("$$", fileName_, style_) } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0)];
  [rf_ skipBytesWithInt:2];
  jint num_tables = [rf_ readUnsignedShort];
  fontSpecific_ = NO;
  jint map10 = 0;
  jint map31 = 0;
  jint map30 = 0;
  jint mapExt = 0;
  for (jint k = 0; k < num_tables; ++k) {
    jint platId = [rf_ readUnsignedShort];
    jint platSpecId = [rf_ readUnsignedShort];
    jint offset = [rf_ readInt];
    if (platId == 3 && platSpecId == 0) {
      fontSpecific_ = YES;
      map30 = offset;
    }
    else if (platId == 3 && platSpecId == 1) {
      map31 = offset;
    }
    else if (platId == 3 && platSpecId == 10) {
      mapExt = offset;
    }
    if (platId == 1 && platSpecId == 0) {
      map10 = offset;
    }
  }
  if (map10 > 0) {
    [rf_ seekWithLong:IOSIntArray_Get(table_location, 0) + map10];
    jint format = [rf_ readUnsignedShort];
    switch (format) {
      case 0:
      cmap10_ = [self readFormat0];
      break;
      case 4:
      cmap10_ = [self readFormat4];
      break;
      case 6:
      cmap10_ = [self readFormat6];
      break;
    }
  }
  if (map31 > 0) {
    [rf_ seekWithLong:IOSIntArray_Get(table_location, 0) + map31];
    jint format = [rf_ readUnsignedShort];
    if (format == 4) {
      cmap31_ = [self readFormat4];
    }
  }
  if (map30 > 0) {
    [rf_ seekWithLong:IOSIntArray_Get(table_location, 0) + map30];
    jint format = [rf_ readUnsignedShort];
    if (format == 4) {
      cmap10_ = [self readFormat4];
    }
  }
  if (mapExt > 0) {
    [rf_ seekWithLong:IOSIntArray_Get(table_location, 0) + mapExt];
    jint format = [rf_ readUnsignedShort];
    switch (format) {
      case 0:
      cmapExt_ = [self readFormat0];
      break;
      case 4:
      cmapExt_ = [self readFormat4];
      break;
      case 6:
      cmapExt_ = [self readFormat6];
      break;
      case 12:
      cmapExt_ = [self readFormat12];
      break;
    }
  }
}


#line 863
- (JavaUtilHashMap *)readFormat12 {
  
#line 864
  JavaUtilHashMap *h = [[JavaUtilHashMap alloc] init];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) skipBytesWithInt:2];
  [rf_ readInt];
  [rf_ skipBytesWithInt:4];
  jint nGroups = [rf_ readInt];
  for (jint k = 0; k < nGroups; k++) {
    jint startCharCode = [rf_ readInt];
    jint endCharCode = [rf_ readInt];
    jint startGlyphID = [rf_ readInt];
    for (jint i = startCharCode; i <= endCharCode; i++) {
      IOSIntArray *r = [IOSIntArray arrayWithLength:2];
      *IOSIntArray_GetRef(r, 0) = startGlyphID;
      *IOSIntArray_GetRef(r, 1) = [self getGlyphWidthWithInt:IOSIntArray_Get(r, 0)];
      (void) [h putWithId:[JavaLangInteger valueOfWithInt:i] withId:r];
      startGlyphID++;
    }
  }
  return h;
}


#line 889
- (JavaUtilHashMap *)readFormat0 {
  
#line 890
  JavaUtilHashMap *h = [[JavaUtilHashMap alloc] init];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) skipBytesWithInt:4];
  for (jint k = 0; k < 256; ++k) {
    IOSIntArray *r = [IOSIntArray arrayWithLength:2];
    *IOSIntArray_GetRef(r, 0) = [rf_ readUnsignedByte];
    *IOSIntArray_GetRef(r, 1) = [self getGlyphWidthWithInt:IOSIntArray_Get(r, 0)];
    (void) [h putWithId:[JavaLangInteger valueOfWithInt:k] withId:r];
  }
  return h;
}


#line 906
- (JavaUtilHashMap *)readFormat4 {
  
#line 907
  JavaUtilHashMap *h = [[JavaUtilHashMap alloc] init];
  jint table_lenght = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) readUnsignedShort];
  [rf_ skipBytesWithInt:2];
  jint segCount = [rf_ readUnsignedShort] / 2;
  [rf_ skipBytesWithInt:6];
  IOSIntArray *endCount = [IOSIntArray arrayWithLength:segCount];
  for (jint k = 0; k < segCount; ++k) {
    *IOSIntArray_GetRef(endCount, k) = [rf_ readUnsignedShort];
  }
  [rf_ skipBytesWithInt:2];
  IOSIntArray *startCount = [IOSIntArray arrayWithLength:segCount];
  for (jint k = 0; k < segCount; ++k) {
    *IOSIntArray_GetRef(startCount, k) = [rf_ readUnsignedShort];
  }
  IOSIntArray *idDelta = [IOSIntArray arrayWithLength:segCount];
  for (jint k = 0; k < segCount; ++k) {
    *IOSIntArray_GetRef(idDelta, k) = [rf_ readUnsignedShort];
  }
  IOSIntArray *idRO = [IOSIntArray arrayWithLength:segCount];
  for (jint k = 0; k < segCount; ++k) {
    *IOSIntArray_GetRef(idRO, k) = [rf_ readUnsignedShort];
  }
  IOSIntArray *glyphId = [IOSIntArray arrayWithLength:table_lenght / 2 - 8 - segCount * 4];
  for (jint k = 0; k < glyphId->size_; ++k) {
    *IOSIntArray_GetRef(glyphId, k) = [rf_ readUnsignedShort];
  }
  for (jint k = 0; k < segCount; ++k) {
    jint glyph;
    for (jint j = IOSIntArray_Get(startCount, k); j <= IOSIntArray_Get(endCount, k) && j != (jint) 0xFFFF; ++j) {
      if (IOSIntArray_Get(idRO, k) == 0) {
        glyph = (j + IOSIntArray_Get(idDelta, k)) & (jint) 0xFFFF;
      }
      else {
        jint idx = k + IOSIntArray_Get(idRO, k) / 2 - segCount + j - IOSIntArray_Get(startCount, k);
        if (idx >= glyphId->size_)
#line 942
        continue;
        glyph = (IOSIntArray_Get(glyphId, idx) + IOSIntArray_Get(idDelta, k)) & (jint) 0xFFFF;
      }
      IOSIntArray *r = [IOSIntArray arrayWithLength:2];
      *IOSIntArray_GetRef(r, 0) = glyph;
      *IOSIntArray_GetRef(r, 1) = [self getGlyphWidthWithInt:IOSIntArray_Get(r, 0)];
      (void) [h putWithId:[JavaLangInteger valueOfWithInt:fontSpecific_ ? ((j & (jint) 0xff00) == (jint) 0xf000 ? j & (jint) 0xff : j) : j] withId:r];
    }
  }
  return h;
}


#line 960
- (JavaUtilHashMap *)readFormat6 {
  
#line 961
  JavaUtilHashMap *h = [[JavaUtilHashMap alloc] init];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) skipBytesWithInt:4];
  jint start_code = [rf_ readUnsignedShort];
  jint code_count = [rf_ readUnsignedShort];
  for (jint k = 0; k < code_count; ++k) {
    IOSIntArray *r = [IOSIntArray arrayWithLength:2];
    *IOSIntArray_GetRef(r, 0) = [rf_ readUnsignedShort];
    *IOSIntArray_GetRef(r, 1) = [self getGlyphWidthWithInt:IOSIntArray_Get(r, 0)];
    (void) [h putWithId:[JavaLangInteger valueOfWithInt:k + start_code] withId:r];
  }
  return h;
}


#line 977
- (void)readKerning {
  
#line 978
  IOSIntArray *table_location;
  table_location = [((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"kern"];
  if (table_location == nil)
#line 981
  return;
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(table_location), 0) + 2];
  jint nTables = [rf_ readUnsignedShort];
  jint checkpoint = IOSIntArray_Get(table_location, 0) + 4;
  jint length = 0;
  for (jint k = 0; k < nTables; ++k) {
    checkpoint += length;
    [rf_ seekWithLong:checkpoint];
    [rf_ skipBytesWithInt:2];
    length = [rf_ readUnsignedShort];
    jint coverage = [rf_ readUnsignedShort];
    if ((coverage & (jint) 0xfff7) == (jint) 0x0001) {
      jint nPairs = [rf_ readUnsignedShort];
      [rf_ skipBytesWithInt:6];
      for (jint j = 0; j < nPairs; ++j) {
        jint pair = [rf_ readInt];
        jint value = [rf_ readShort] * 1000 / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
        [((ComItextpdfTextPdfIntHashtable *) nil_chk(kerning_)) putWithInt:pair withInt:value];
      }
    }
  }
}


#line 1010
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  
#line 1011
  IOSIntArray *metrics = [self getMetricsTTWithInt:char1];
  if (metrics == nil)
#line 1013
  return 0;
  jint c1 = IOSIntArray_Get(nil_chk(metrics), 0);
  metrics = [self getMetricsTTWithInt:char2];
  if (metrics == nil)
#line 1017
  return 0;
  jint c2 = IOSIntArray_Get(nil_chk(metrics), 0);
  return [((ComItextpdfTextPdfIntHashtable *) nil_chk(kerning_)) getWithInt:(LShift32(c1, 16)) + c2];
}


#line 1029
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  
#line 1030
  IOSIntArray *metric = [self getMetricsTTWithInt:c];
  if (metric == nil)
#line 1032
  return 0;
  return IOSIntArray_Get(nil_chk(metric), 1);
}


#line 1041
- (ComItextpdfTextPdfPdfDictionary *)getFontDescriptorWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)fontStream
                                                                                    withNSString:(NSString *)subsetPrefix
                                                      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)cidset {
  
#line 1042
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ASCENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->sTypoAscender_ * 1000 / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CAPHEIGHT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:os_2_->sCapHeight_ * 1000 / head_->unitsPerEm_]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:os_2_->sTypoDescender_ * 1000 / head_->unitsPerEm_]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTBBOX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 1047
  head_->xMin_ * 1000 / head_->unitsPerEm_ withFloat:
#line 1048
  head_->yMin_ * 1000 / head_->unitsPerEm_ withFloat:
#line 1049
  head_->xMax_ * 1000 / head_->unitsPerEm_ withFloat:
#line 1050
  head_->yMax_ * 1000 / head_->unitsPerEm_]];
  if (cidset != nil)
#line 1052
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CIDSET_() withComItextpdfTextPdfPdfObject:cidset];
  if (cff_) {
    if ([((NSString *) nil_chk(encoding_)) hasPrefix:@"Identity-"])
#line 1055
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTNAME_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$C$", subsetPrefix, fontName_, '-', encoding_)]];
    else
#line 1057
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTNAME_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$$", subsetPrefix, fontName_, style_)]];
  }
  else
#line 1060
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTNAME_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$$", subsetPrefix, fontName_, style_)]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ITALICANGLE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithDouble:italicAngle_]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STEMV_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:80]];
  if (fontStream != nil) {
    if (cff_)
#line 1065
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTFILE3_() withComItextpdfTextPdfPdfObject:fontStream];
    else
#line 1067
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTFILE2_() withComItextpdfTextPdfPdfObject:fontStream];
  }
  jint flags = 0;
  if (isFixedPitch_)
#line 1071
  flags |= 1;
  flags |= fontSpecific_ ? 4 : 32;
  if ((head_->macStyle_ & 2) != 0)
#line 1074
  flags |= 64;
  if ((head_->macStyle_ & 1) != 0)
#line 1076
  flags |= 262144;
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FLAGS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:flags]];
  
#line 1079
  return dic;
}


#line 1090
- (ComItextpdfTextPdfPdfDictionary *)getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)fontDescriptor
                                                                                  withNSString:(NSString *)subsetPrefix
                                                                                       withInt:(jint)firstChar
                                                                                       withInt:(jint)lastChar
                                                                                 withByteArray:(IOSByteArray *)shortTag {
  
#line 1091
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  if (cff_) {
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TYPE1_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$", fontName_, style_)]];
  }
  else {
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TRUETYPE_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$$", subsetPrefix, fontName_, style_)]];
  }
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$$", subsetPrefix, fontName_, style_)]];
  if (!fontSpecific_) {
    for (jint k = firstChar; k <= lastChar; ++k) {
      if (![((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(differences_), k))) isEqual:ComItextpdfTextPdfBaseFont_get_notdef_()]) {
        firstChar = k;
        break;
      }
    }
    if ([((NSString *) nil_chk(encoding_)) isEqual:@"Cp1252"] || [encoding_ isEqual:@"MacRoman"])
#line 1109
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_() withComItextpdfTextPdfPdfObject:[encoding_ isEqual:@"Cp1252"] ? ComItextpdfTextPdfPdfName_get_WIN_ANSI_ENCODING_() : ComItextpdfTextPdfPdfName_get_MAC_ROMAN_ENCODING_()];
    else {
      ComItextpdfTextPdfPdfDictionary *enc = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_()];
      ComItextpdfTextPdfPdfArray *dif = [[ComItextpdfTextPdfPdfArray alloc] init];
      jboolean gap = YES;
      for (jint k = firstChar; k <= lastChar; ++k) {
        if (IOSByteArray_Get(nil_chk(shortTag), k) != 0) {
          if (gap) {
            [dif addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:k]];
            gap = NO;
          }
          [dif addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:IOSObjectArray_Get(nil_chk(differences_), k)]];
        }
        else
#line 1123
        gap = YES;
      }
      [enc putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DIFFERENCES_() withComItextpdfTextPdfPdfObject:dif];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_() withComItextpdfTextPdfPdfObject:enc];
    }
  }
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRSTCHAR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:firstChar]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LASTCHAR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:lastChar]];
  ComItextpdfTextPdfPdfArray *wd = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint k = firstChar; k <= lastChar; ++k) {
    if (IOSByteArray_Get(nil_chk(shortTag), k) == 0)
#line 1134
    [wd addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
    else
#line 1136
    [wd addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:IOSIntArray_Get(nil_chk(widths_), k)]];
  }
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIDTHS_() withComItextpdfTextPdfPdfObject:wd];
  if (fontDescriptor != nil)
#line 1140
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_() withComItextpdfTextPdfPdfObject:fontDescriptor];
  return dic;
}


#line 1144
- (IOSByteArray *)getFullFont {
  
#line 1145
  ComItextpdfTextPdfRandomAccessFileOrArray *rf2 = nil;
  @try {
    rf2 = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:rf_];
    [rf2 reOpen];
    IOSByteArray *b = [IOSByteArray arrayWithLength:(jint) [rf2 length]];
    [rf2 readFullyWithByteArray:b];
    return b;
  }
  @finally {
    @try {
      
#line 1154
      if (rf2 != nil) {
        
#line 1154
        [rf2 close];
      }
    }
    @catch (
#line 1154
    JavaLangException *e) {
    }
  }
}


#line 1158
- (IOSByteArray *)getSubSetWithJavaUtilHashSet:(JavaUtilHashSet *)glyphs
                                   withBoolean:(jboolean)subsetp {
  @synchronized(self) {
    
#line 1159
    ComItextpdfTextPdfTrueTypeFontSubSet *sb = [[ComItextpdfTextPdfTrueTypeFontSubSet alloc] initWithNSString:fileName_ withComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:rf_] withJavaUtilHashSet:glyphs withInt:directoryOffset_ withBoolean:YES withBoolean:!subsetp];
    return [sb process];
  }
}


#line 1163
+ (IOSIntArray *)compactRangesWithJavaUtilArrayList:(JavaUtilArrayList *)ranges {
  
#line 1164
  JavaUtilArrayList *simp = [[JavaUtilArrayList alloc] init];
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(ranges)) size]; ++k) {
    IOSIntArray *r = [ranges getWithInt:k];
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(r))->size_; j += 2) {
      [simp addWithId:[IOSIntArray arrayWithInts:(jint[]){ [JavaLangMath maxWithInt:0 withInt:[JavaLangMath minWithInt:IOSIntArray_Get(r, j) withInt:IOSIntArray_Get(r, j + 1)]], [JavaLangMath minWithInt:(jint) 0xffff withInt:[JavaLangMath maxWithInt:IOSIntArray_Get(r, j) withInt:IOSIntArray_Get(r, j + 1)]] } count:2]];
    }
  }
  for (jint k1 = 0; k1 < [simp size] - 1; ++k1) {
    for (jint k2 = k1 + 1; k2 < [simp size]; ++k2) {
      IOSIntArray *r1 = [simp getWithInt:k1];
      IOSIntArray *r2 = [simp getWithInt:k2];
      if ((IOSIntArray_Get(nil_chk(r1), 0) >= IOSIntArray_Get(nil_chk(r2), 0) && IOSIntArray_Get(r1, 0) <= IOSIntArray_Get(r2, 1)) || (IOSIntArray_Get(r1, 1) >= IOSIntArray_Get(r2, 0) && IOSIntArray_Get(r1, 0) <= IOSIntArray_Get(r2, 1))) {
        *IOSIntArray_GetRef(r1, 0) = [JavaLangMath minWithInt:IOSIntArray_Get(r1, 0) withInt:IOSIntArray_Get(r2, 0)];
        *IOSIntArray_GetRef(r1, 1) = [JavaLangMath maxWithInt:IOSIntArray_Get(r1, 1) withInt:IOSIntArray_Get(r2, 1)];
        (void) [simp removeWithInt:k2];
        --k2;
      }
    }
  }
  IOSIntArray *s = [IOSIntArray arrayWithLength:[simp size] * 2];
  for (jint k = 0; k < [simp size]; ++k) {
    IOSIntArray *r = [simp getWithInt:k];
    *IOSIntArray_GetRef(s, k * 2) = IOSIntArray_Get(nil_chk(r), 0);
    *IOSIntArray_GetRef(s, k * 2 + 1) = IOSIntArray_Get(r, 1);
  }
  return s;
}


#line 1192
- (void)addRangeUniWithJavaUtilHashMap:(JavaUtilHashMap *)longTag
                           withBoolean:(jboolean)includeMetrics
                           withBoolean:(jboolean)subsetp {
  
#line 1193
  if (!subsetp && (subsetRanges_ != nil || directoryOffset_ > 0)) {
    IOSIntArray *rg = subsetRanges_ == nil && directoryOffset_ > 0 ? [IOSIntArray arrayWithInts:(jint[]){ 0, (jint) 0xffff } count:2] : [ComItextpdfTextPdfTrueTypeFont compactRangesWithJavaUtilArrayList:subsetRanges_];
    JavaUtilHashMap *usemap;
    if (!fontSpecific_ && cmap31_ != nil)
#line 1197
    usemap = cmap31_;
    else if (fontSpecific_ && cmap10_ != nil)
#line 1199
    usemap = cmap10_;
    else if (cmap31_ != nil)
#line 1201
    usemap = cmap31_;
    else
#line 1203
    usemap = cmap10_;
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilHashMap *) nil_chk(usemap)) entrySet])) {
      IOSIntArray *v = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
      JavaLangInteger *gi = [JavaLangInteger valueOfWithInt:IOSIntArray_Get(nil_chk(v), 0)];
      if ([((JavaUtilHashMap *) nil_chk(longTag)) containsKeyWithId:gi])
#line 1208
      continue;
      jint c = [((JavaLangInteger *) nil_chk([e getKey])) intValue];
      jboolean skip = YES;
      for (jint k = 0; k < rg->size_; k += 2) {
        if (c >= IOSIntArray_Get(rg, k) && c <= IOSIntArray_Get(rg, k + 1)) {
          skip = NO;
          break;
        }
      }
      if (!skip)
#line 1218
      (void) [longTag putWithId:gi withId:includeMetrics ? [IOSIntArray arrayWithInts:(jint[]){ IOSIntArray_Get(v, 0), IOSIntArray_Get(v, 1), c } count:3] : nil];
    }
  }
}


#line 1223
- (void)addRangeUniWithJavaUtilHashSet:(JavaUtilHashSet *)longTag
                           withBoolean:(jboolean)subsetp {
  
#line 1224
  if (!subsetp && (subsetRanges_ != nil || directoryOffset_ > 0)) {
    IOSIntArray *rg = subsetRanges_ == nil && directoryOffset_ > 0 ? [IOSIntArray arrayWithInts:(jint[]){ 0, (jint) 0xffff } count:2] : [ComItextpdfTextPdfTrueTypeFont compactRangesWithJavaUtilArrayList:subsetRanges_];
    JavaUtilHashMap *usemap;
    if (!fontSpecific_ && cmap31_ != nil)
#line 1228
    usemap = cmap31_;
    else if (fontSpecific_ && cmap10_ != nil)
#line 1230
    usemap = cmap10_;
    else if (cmap31_ != nil)
#line 1232
    usemap = cmap31_;
    else
#line 1234
    usemap = cmap10_;
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilHashMap *) nil_chk(usemap)) entrySet])) {
      IOSIntArray *v = [((id<JavaUtilMap_Entry>) nil_chk(e)) getValue];
      JavaLangInteger *gi = [JavaLangInteger valueOfWithInt:IOSIntArray_Get(nil_chk(v), 0)];
      if ([((JavaUtilHashSet *) nil_chk(longTag)) containsWithId:gi])
#line 1239
      continue;
      jint c = [((JavaLangInteger *) nil_chk([e getKey])) intValue];
      jboolean skip = YES;
      for (jint k = 0; k < rg->size_; k += 2) {
        if (c >= IOSIntArray_Get(rg, k) && c <= IOSIntArray_Get(rg, k + 1)) {
          skip = NO;
          break;
        }
      }
      if (!skip)
#line 1249
      [longTag addWithId:gi];
    }
  }
}


#line 1262
- (void)writeFontWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                               withNSObjectArray:(IOSObjectArray *)params {
  jint firstChar = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [JavaLangInteger class])))) intValue];
  jint lastChar = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(params, 1), [JavaLangInteger class])))) intValue];
  IOSByteArray *shortTag = (IOSByteArray *) check_class_cast(IOSObjectArray_Get(params, 2), [IOSByteArray class]);
  jboolean subsetp = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(params, 3), [JavaLangBoolean class])))) booleanValue] && subset_;
  
#line 1268
  if (!subsetp) {
    firstChar = 0;
    lastChar = ((IOSByteArray *) nil_chk(shortTag))->size_ - 1;
    for (jint k = 0; k < shortTag->size_; ++k)
#line 1272
    *IOSByteArray_GetRef(shortTag, k) = 1;
  }
  ComItextpdfTextPdfPdfIndirectReference *ind_font = nil;
  ComItextpdfTextPdfPdfObject *pobj = nil;
  ComItextpdfTextPdfPdfIndirectObject *obj = nil;
  NSString *subsetPrefix = @"";
  if (embedded_) {
    if (cff_) {
      pobj = [[ComItextpdfTextPdfBaseFont_StreamFont alloc] initWithByteArray:[self readCffFont] withNSString:@"Type1C" withInt:compressionLevel_];
      obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:pobj];
      ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
    }
    else {
      if (subsetp)
#line 1286
      subsetPrefix = [ComItextpdfTextPdfBaseFont createSubsetPrefix];
      JavaUtilHashSet *glyphs = [[JavaUtilHashSet alloc] init];
      for (jint k = firstChar; k <= lastChar; ++k) {
        if (IOSByteArray_Get(nil_chk(shortTag), k) != 0) {
          IOSIntArray *metrics = nil;
          if (specialMap_ != nil) {
            IOSIntArray *cd = [ComItextpdfTextPdfGlyphList nameToUnicodeWithNSString:IOSObjectArray_Get(nil_chk(differences_), k)];
            if (cd != nil)
#line 1294
            metrics = [self getMetricsTTWithInt:IOSIntArray_Get(cd, 0)];
          }
          else {
            if (fontSpecific_)
#line 1298
            metrics = [self getMetricsTTWithInt:k];
            else
#line 1300
            metrics = [self getMetricsTTWithInt:IOSCharArray_Get(nil_chk(unicodeDifferences_), k)];
          }
          if (metrics != nil)
#line 1303
          [glyphs addWithId:[JavaLangInteger valueOfWithInt:IOSIntArray_Get(metrics, 0)]];
        }
      }
      [self addRangeUniWithJavaUtilHashSet:glyphs withBoolean:subsetp];
      IOSByteArray *b = nil;
      if (subsetp || directoryOffset_ != 0 || subsetRanges_ != nil) {
        b = [self getSubSetWithJavaUtilHashSet:[[JavaUtilHashSet alloc] initWithJavaUtilCollection:glyphs] withBoolean:subsetp];
      }
      else {
        b = [self getFullFont];
      }
      IOSIntArray *lengths = [IOSIntArray arrayWithInts:(jint[]){ ((IOSByteArray *) nil_chk(b))->size_ } count:1];
      pobj = [[ComItextpdfTextPdfBaseFont_StreamFont alloc] initWithByteArray:b withIntArray:lengths withInt:compressionLevel_];
      obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:pobj];
      ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
    }
  }
  pobj = [self getFontDescriptorWithComItextpdfTextPdfPdfIndirectReference:ind_font withNSString:subsetPrefix withComItextpdfTextPdfPdfIndirectReference:nil];
  if (pobj != nil) {
    obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:pobj];
    ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  pobj = [self getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:ind_font withNSString:subsetPrefix withInt:firstChar withInt:lastChar withByteArray:shortTag];
  (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:pobj withComItextpdfTextPdfPdfIndirectReference:ref];
}


#line 1336
- (IOSByteArray *)readCffFont {
  
#line 1337
  ComItextpdfTextPdfRandomAccessFileOrArray *rf2 = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:rf_];
  IOSByteArray *b = [IOSByteArray arrayWithLength:cffLength_];
  @try {
    [rf2 reOpen];
    [rf2 seekWithLong:cffOffset_];
    [rf2 readFullyWithByteArray:b];
  }
  @finally {
    @try {
      [rf2 close];
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 1352
  return b;
}


#line 1361
- (ComItextpdfTextPdfPdfStream *)getFullFontStream {
  
#line 1362
  if (cff_) {
    return [[ComItextpdfTextPdfBaseFont_StreamFont alloc] initWithByteArray:[self readCffFont] withNSString:@"Type1C" withInt:compressionLevel_];
  }
  else {
    IOSByteArray *b = [self getFullFont];
    IOSIntArray *lengths = [IOSIntArray arrayWithInts:(jint[]){ ((IOSByteArray *) nil_chk(b))->size_ } count:1];
    return [[ComItextpdfTextPdfBaseFont_StreamFont alloc] initWithByteArray:b withIntArray:lengths withInt:compressionLevel_];
  }
}


#line 1380
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  
#line 1381
  switch (key) {
    case ComItextpdfTextPdfBaseFont_ASCENT:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->sTypoAscender_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_CAPHEIGHT:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->sCapHeight_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_DESCENT:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->sTypoDescender_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_ITALICANGLE:
    return (jfloat) italicAngle_;
    case ComItextpdfTextPdfBaseFont_BBOXLLX:
    return fontSize * ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->xMin_ / head_->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_BBOXLLY:
    return fontSize * ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->yMin_ / head_->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_BBOXURX:
    return fontSize * ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->xMax_ / head_->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_BBOXURY:
    return fontSize * ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->yMax_ / head_->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_AWT_ASCENT:
    return fontSize * ((ComItextpdfTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(hhea_))->Ascender_ / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_AWT_DESCENT:
    return fontSize * ((ComItextpdfTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(hhea_))->Descender_ / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_AWT_LEADING:
    return fontSize * ((ComItextpdfTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(hhea_))->LineGap_ / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_AWT_MAXADVANCE:
    return fontSize * ((ComItextpdfTextPdfTrueTypeFont_HorizontalHeader *) nil_chk(hhea_))->advanceWidthMax_ / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_UNDERLINE_POSITION:
    return (underlinePosition_ - underlineThickness_ / 2) * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_UNDERLINE_THICKNESS:
    return underlineThickness_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_STRIKETHROUGH_POSITION:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->yStrikeoutPosition_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_STRIKETHROUGH_THICKNESS:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->yStrikeoutSize_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_SUBSCRIPT_SIZE:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->ySubscriptYSize_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_SUBSCRIPT_OFFSET:
    return -((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->ySubscriptYOffset_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_SUPERSCRIPT_SIZE:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->ySuperscriptYSize_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_SUPERSCRIPT_OFFSET:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->ySuperscriptYOffset_ * fontSize / ((ComItextpdfTextPdfTrueTypeFont_FontHeader *) nil_chk(head_))->unitsPerEm_;
    case ComItextpdfTextPdfBaseFont_WEIGHT_CLASS:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->usWeightClass_;
    case ComItextpdfTextPdfBaseFont_WIDTH_CLASS:
    return ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->usWidthClass_;
  }
  return 0;
}


#line 1434
- (IOSIntArray *)getMetricsTTWithInt:(jint)c {
  
#line 1435
  if (cmapExt_ != nil)
#line 1436
  return [cmapExt_ getWithId:[JavaLangInteger valueOfWithInt:c]];
  if (!fontSpecific_ && cmap31_ != nil)
#line 1438
  return [cmap31_ getWithId:[JavaLangInteger valueOfWithInt:c]];
  if (fontSpecific_ && cmap10_ != nil)
#line 1440
  return [cmap10_ getWithId:[JavaLangInteger valueOfWithInt:c]];
  if (cmap31_ != nil)
#line 1442
  return [cmap31_ getWithId:[JavaLangInteger valueOfWithInt:c]];
  if (cmap10_ != nil)
#line 1444
  return [cmap10_ getWithId:[JavaLangInteger valueOfWithInt:c]];
  return nil;
}


#line 1452
- (NSString *)getPostscriptFontName {
  
#line 1453
  return fontName_;
}


#line 1460
- (IOSObjectArray *)getCodePagesSupported {
  
#line 1461
  jlong cp = (LShift64((jlong) ((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->ulCodePageRange2_, 32)) + (os_2_->ulCodePageRange1_ & (jlong) 0xffffffffLL);
  jint count = 0;
  jlong bit = 1;
  for (jint k = 0; k < 64; ++k) {
    if ((cp & bit) != 0 && IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfTrueTypeFont_codePages_), k) != nil)
#line 1466
    ++count;
    LShiftAssignLong(&bit, 1);
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:count type:[IOSClass classWithClass:[NSString class]]];
  count = 0;
  bit = 1;
  for (jint k = 0; k < 64; ++k) {
    if ((cp & bit) != 0 && IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfTrueTypeFont_codePages_), k) != nil)
#line 1474
    IOSObjectArray_Set(ret, count++, IOSObjectArray_Get(ComItextpdfTextPdfTrueTypeFont_codePages_, k));
    LShiftAssignLong(&bit, 1);
  }
  return ret;
}


#line 1489
- (IOSObjectArray *)getFullFontName {
  
#line 1490
  return fullName_;
}


#line 1502
- (IOSObjectArray *)getAllNameEntries {
  
#line 1503
  return allNameEntries_;
}


#line 1515
- (IOSObjectArray *)getFamilyFontName {
  
#line 1516
  return familyName_;
}


#line 1523
- (jboolean)hasKernPairs {
  
#line 1524
  return [((ComItextpdfTextPdfIntHashtable *) nil_chk(kerning_)) size] > 0;
}


#line 1533
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
  
#line 1534
  fontName_ = name;
}


#line 1545
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  
#line 1546
  IOSIntArray *metrics = [self getMetricsTTWithInt:char1];
  if (metrics == nil)
#line 1548
  return NO;
  jint c1 = IOSIntArray_Get(nil_chk(metrics), 0);
  metrics = [self getMetricsTTWithInt:char2];
  if (metrics == nil)
#line 1552
  return NO;
  jint c2 = IOSIntArray_Get(nil_chk(metrics), 0);
  [((ComItextpdfTextPdfIntHashtable *) nil_chk(kerning_)) putWithInt:(LShift32(c1, 16)) + c2 withInt:kern];
  return YES;
}


#line 1559
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  
#line 1560
  JavaUtilHashMap *map = nil;
  if (name == nil || cmap31_ == nil)
#line 1562
  map = cmap10_;
  else
#line 1564
  map = cmap31_;
  if (map == nil)
#line 1566
  return nil;
  IOSIntArray *metric = [((JavaUtilHashMap *) nil_chk(map)) getWithId:[JavaLangInteger valueOfWithInt:c]];
  if (metric == nil || bboxes_ == nil)
#line 1569
  return nil;
  return IOSObjectArray_Get(nil_chk(bboxes_), IOSIntArray_Get(nil_chk(metric), 0));
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfTrueTypeFont *)other {
  [super copyAllFieldsTo:other];
  other->allNameEntries_ = allNameEntries_;
  other->bboxes_ = bboxes_;
  other->cff_ = cff_;
  other->cffLength_ = cffLength_;
  other->cffOffset_ = cffOffset_;
  other->cmap10_ = cmap10_;
  other->cmap31_ = cmap31_;
  other->cmapExt_ = cmapExt_;
  other->directoryOffset_ = directoryOffset_;
  other->familyName_ = familyName_;
  other->fileName_ = fileName_;
  other->fontName_ = fontName_;
  other->fullName_ = fullName_;
  other->glyphWidthsByIndex_ = glyphWidthsByIndex_;
  other->head_ = head_;
  other->hhea_ = hhea_;
  other->isFixedPitch_ = isFixedPitch_;
  other->italicAngle_ = italicAngle_;
  other->justNames_ = justNames_;
  other->kerning_ = kerning_;
  other->os_2_ = os_2_;
  other->rf_ = rf_;
  other->style_ = style_;
  other->tables_ = tables_;
  other->ttcIndex_ = ttcIndex_;
  other->underlinePosition_ = underlinePosition_;
  other->underlineThickness_ = underlineThickness_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfTrueTypeFont class]) {
    ComItextpdfTextPdfTrueTypeFont_codePages_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 67
      @"1252 Latin 1",
#line 68
      @"1250 Latin 2: Eastern Europe",
#line 69
      @"1251 Cyrillic",
#line 70
      @"1253 Greek",
#line 71
      @"1254 Turkish",
#line 72
      @"1255 Hebrew",
#line 73
      @"1256 Arabic",
#line 74
      @"1257 Windows Baltic",
#line 75
      @"1258 Vietnamese",
#line 76
      nil,
#line 77
      nil,
#line 78
      nil,
#line 79
      nil,
#line 80
      nil,
#line 81
      nil,
#line 82
      nil,
#line 83
      @"874 Thai",
#line 84
      @"932 JIS/Japan",
#line 85
      @"936 Chinese: Simplified chars--PRC and Singapore",
#line 86
      @"949 Korean Wansung",
#line 87
      @"950 Chinese: Traditional chars--Taiwan and Hong Kong",
#line 88
      @"1361 Korean Johab",
#line 89
      nil,
#line 90
      nil,
#line 91
      nil,
#line 92
      nil,
#line 93
      nil,
#line 94
      nil,
#line 95
      nil,
#line 96
      @"Macintosh Character Set (US Roman)",
#line 97
      @"OEM Character Set",
#line 98
      @"Symbol Character Set",
#line 99
      nil,
#line 100
      nil,
#line 101
      nil,
#line 102
      nil,
#line 103
      nil,
#line 104
      nil,
#line 105
      nil,
#line 106
      nil,
#line 107
      nil,
#line 108
      nil,
#line 109
      nil,
#line 110
      nil,
#line 111
      nil,
#line 112
      nil,
#line 113
      nil,
#line 114
      nil,
#line 115
      @"869 IBM Greek",
#line 116
      @"866 MS-DOS Russian",
#line 117
      @"865 MS-DOS Nordic",
#line 118
      @"864 Arabic",
#line 119
      @"863 MS-DOS Canadian French",
#line 120
      @"862 Hebrew",
#line 121
      @"861 MS-DOS Icelandic",
#line 122
      @"860 MS-DOS Portuguese",
#line 123
      @"857 IBM Turkish",
#line 124
      @"855 IBM Cyrillic; primarily Russian",
#line 125
      @"852 Latin 2",
#line 126
      @"775 MS-DOS Baltic",
#line 127
      @"737 Greek; former 437 G",
#line 128
      @"708 Arabic; ASMO 708",
#line 129
      @"850 WE/Latin 1",
#line 130
      @"437 US" } count:64 type:[IOSClass classWithClass:[NSString class]]];
      ComItextpdfTextPdfTrueTypeFont_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TrueTypeFont", NULL, 0x4, NULL },
    { "initWithNSString:withNSString:withBoolean:withByteArray:withBoolean:withBoolean:", "TrueTypeFont", NULL, 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getTTCNameWithNSString:", "getTTCName", "Ljava.lang.String;", 0xc, NULL },
    { "fillTables", NULL, "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getBaseFont", NULL, "Ljava.lang.String;", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getNamesWithInt:", "getNames", "[[Ljava.lang.String;", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getAllNames", NULL, "[[Ljava.lang.String;", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "checkCff", NULL, "V", 0x0, NULL },
    { "processWithByteArray:withBoolean:", "process", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "readStandardStringWithInt:", "readStandardString", "Ljava.lang.String;", 0x4, "Ljava.io.IOException;" },
    { "readUnicodeStringWithInt:", "readUnicodeString", "Ljava.lang.String;", 0x4, "Ljava.io.IOException;" },
    { "readGlyphWidths", NULL, "V", 0x4, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getGlyphWidthWithInt:", "getGlyphWidth", "I", 0x4, NULL },
    { "readBbox", NULL, "V", 0x2, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "readCMaps", NULL, "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "readFormat12", NULL, "Ljava.util.HashMap;", 0x0, "Ljava.io.IOException;" },
    { "readFormat0", NULL, "Ljava.util.HashMap;", 0x0, "Ljava.io.IOException;" },
    { "readFormat4", NULL, "Ljava.util.HashMap;", 0x0, "Ljava.io.IOException;" },
    { "readFormat6", NULL, "Ljava.util.HashMap;", 0x0, "Ljava.io.IOException;" },
    { "readKerning", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "getKerningWithInt:withInt:", "getKerning", "I", 0x1, NULL },
    { "getRawWidthWithInt:withNSString:", "getRawWidth", "I", 0x0, NULL },
    { "getFontDescriptorWithComItextpdfTextPdfPdfIndirectReference:withNSString:withComItextpdfTextPdfPdfIndirectReference:", "getFontDescriptor", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, NULL },
    { "getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:withNSString:withInt:withInt:withByteArray:", "getFontBaseType", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, NULL },
    { "getFullFont", NULL, "[B", 0x4, "Ljava.io.IOException;" },
    { "getSubSetWithJavaUtilHashSet:withBoolean:", "getSubSet", "[B", 0x24, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "compactRangesWithJavaUtilArrayList:", "compactRanges", "[I", 0xc, NULL },
    { "addRangeUniWithJavaUtilHashMap:withBoolean:withBoolean:", "addRangeUni", "V", 0x4, NULL },
    { "addRangeUniWithJavaUtilHashSet:withBoolean:", "addRangeUni", "V", 0x4, NULL },
    { "writeFontWithComItextpdfTextPdfPdfWriter:withComItextpdfTextPdfPdfIndirectReference:withNSObjectArray:", "writeFont", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "readCffFont", NULL, "[B", 0x4, "Ljava.io.IOException;" },
    { "getFullFontStream", NULL, "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getFontDescriptorWithInt:withFloat:", "getFontDescriptor", "F", 0x1, NULL },
    { "getMetricsTTWithInt:", "getMetricsTT", "[I", 0x1, NULL },
    { "getPostscriptFontName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getCodePagesSupported", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "getFullFontName", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getAllNameEntries", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getFamilyFontName", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "hasKernPairs", NULL, "Z", 0x1, NULL },
    { "setPostscriptFontNameWithNSString:", "setPostscriptFontName", "V", 0x1, NULL },
    { "setKerningWithInt:withInt:withInt:", "setKerning", "Z", 0x1, NULL },
    { "getRawCharBBoxWithInt:withNSString:", "getRawCharBBox", "[I", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "codePages_", NULL, 0x18, "[Ljava.lang.String;", &ComItextpdfTextPdfTrueTypeFont_codePages_,  },
    { "justNames_", NULL, 0x4, "Z", NULL,  },
    { "tables_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "rf_", NULL, 0x4, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "fileName_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "cff_", NULL, 0x4, "Z", NULL,  },
    { "cffOffset_", NULL, 0x4, "I", NULL,  },
    { "cffLength_", NULL, 0x4, "I", NULL,  },
    { "directoryOffset_", NULL, 0x4, "I", NULL,  },
    { "ttcIndex_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "style_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "head_", NULL, 0x4, "Lcom.itextpdf.text.pdf.TrueTypeFont$FontHeader;", NULL,  },
    { "hhea_", NULL, 0x4, "Lcom.itextpdf.text.pdf.TrueTypeFont$HorizontalHeader;", NULL,  },
    { "os_2_", NULL, 0x4, "Lcom.itextpdf.text.pdf.TrueTypeFont$WindowsMetrics;", NULL,  },
    { "glyphWidthsByIndex_", NULL, 0x4, "[I", NULL,  },
    { "bboxes_", NULL, 0x4, "[[I", NULL,  },
    { "cmap10_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "cmap31_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "cmapExt_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "kerning_", NULL, 0x4, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "fontName_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "fullName_", NULL, 0x4, "[[Ljava.lang.String;", NULL,  },
    { "allNameEntries_", NULL, 0x4, "[[Ljava.lang.String;", NULL,  },
    { "familyName_", NULL, 0x4, "[[Ljava.lang.String;", NULL,  },
    { "italicAngle_", NULL, 0x4, "D", NULL,  },
    { "isFixedPitch_", NULL, 0x4, "Z", NULL,  },
    { "underlinePosition_", NULL, 0x4, "I", NULL,  },
    { "underlineThickness_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfTrueTypeFont = { "TrueTypeFont", "com.itextpdf.text.pdf", NULL, 0x0, 43, methods, 28, fields, 0, NULL};
  return &_ComItextpdfTextPdfTrueTypeFont;
}

@end


#line 237
@implementation ComItextpdfTextPdfTrueTypeFont_FontHeader

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfTrueTypeFont_FontHeader *)other {
  [super copyAllFieldsTo:other];
  other->flags_ = flags_;
  other->macStyle_ = macStyle_;
  other->unitsPerEm_ = unitsPerEm_;
  other->xMax_ = xMax_;
  other->xMin_ = xMin_;
  other->yMax_ = yMax_;
  other->yMin_ = yMin_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "flags_", NULL, 0x0, "I", NULL,  },
    { "unitsPerEm_", NULL, 0x0, "I", NULL,  },
    { "xMin_", NULL, 0x0, "S", NULL,  },
    { "yMin_", NULL, 0x0, "S", NULL,  },
    { "xMax_", NULL, 0x0, "S", NULL,  },
    { "yMax_", NULL, 0x0, "S", NULL,  },
    { "macStyle_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfTrueTypeFont_FontHeader = { "FontHeader", "com.itextpdf.text.pdf", "TrueTypeFont", 0xc, 1, methods, 7, fields, 0, NULL};
  return &_ComItextpdfTextPdfTrueTypeFont_FontHeader;
}

@end


#line 256
@implementation ComItextpdfTextPdfTrueTypeFont_HorizontalHeader

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfTrueTypeFont_HorizontalHeader *)other {
  [super copyAllFieldsTo:other];
  other->Ascender_ = Ascender_;
  other->Descender_ = Descender_;
  other->LineGap_ = LineGap_;
  other->advanceWidthMax_ = advanceWidthMax_;
  other->caretSlopeRise_ = caretSlopeRise_;
  other->caretSlopeRun_ = caretSlopeRun_;
  other->minLeftSideBearing_ = minLeftSideBearing_;
  other->minRightSideBearing_ = minRightSideBearing_;
  other->numberOfHMetrics_ = numberOfHMetrics_;
  other->xMaxExtent_ = xMaxExtent_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "Ascender_", NULL, 0x0, "S", NULL,  },
    { "Descender_", NULL, 0x0, "S", NULL,  },
    { "LineGap_", NULL, 0x0, "S", NULL,  },
    { "advanceWidthMax_", NULL, 0x0, "I", NULL,  },
    { "minLeftSideBearing_", NULL, 0x0, "S", NULL,  },
    { "minRightSideBearing_", NULL, 0x0, "S", NULL,  },
    { "xMaxExtent_", NULL, 0x0, "S", NULL,  },
    { "caretSlopeRise_", NULL, 0x0, "S", NULL,  },
    { "caretSlopeRun_", NULL, 0x0, "S", NULL,  },
    { "numberOfHMetrics_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfTrueTypeFont_HorizontalHeader = { "HorizontalHeader", "com.itextpdf.text.pdf", "TrueTypeFont", 0xc, 1, methods, 10, fields, 0, NULL};
  return &_ComItextpdfTextPdfTrueTypeFont_HorizontalHeader;
}

@end


#line 281
@implementation ComItextpdfTextPdfTrueTypeFont_WindowsMetrics

- (instancetype)init {
  if (self = [super init]) {
    panose_ = [IOSByteArray arrayWithLength:
#line 313
    10];
    achVendID_ = [IOSByteArray arrayWithLength:
#line 315
    4];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *)other {
  [super copyAllFieldsTo:other];
  other->achVendID_ = achVendID_;
  other->fsSelection_ = fsSelection_;
  other->fsType_ = fsType_;
  other->panose_ = panose_;
  other->sCapHeight_ = sCapHeight_;
  other->sFamilyClass_ = sFamilyClass_;
  other->sTypoAscender_ = sTypoAscender_;
  other->sTypoDescender_ = sTypoDescender_;
  other->sTypoLineGap_ = sTypoLineGap_;
  other->ulCodePageRange1_ = ulCodePageRange1_;
  other->ulCodePageRange2_ = ulCodePageRange2_;
  other->usFirstCharIndex_ = usFirstCharIndex_;
  other->usLastCharIndex_ = usLastCharIndex_;
  other->usWeightClass_ = usWeightClass_;
  other->usWidthClass_ = usWidthClass_;
  other->usWinAscent_ = usWinAscent_;
  other->usWinDescent_ = usWinDescent_;
  other->xAvgCharWidth_ = xAvgCharWidth_;
  other->yStrikeoutPosition_ = yStrikeoutPosition_;
  other->yStrikeoutSize_ = yStrikeoutSize_;
  other->ySubscriptXOffset_ = ySubscriptXOffset_;
  other->ySubscriptXSize_ = ySubscriptXSize_;
  other->ySubscriptYOffset_ = ySubscriptYOffset_;
  other->ySubscriptYSize_ = ySubscriptYSize_;
  other->ySuperscriptXOffset_ = ySuperscriptXOffset_;
  other->ySuperscriptXSize_ = ySuperscriptXSize_;
  other->ySuperscriptYOffset_ = ySuperscriptYOffset_;
  other->ySuperscriptYSize_ = ySuperscriptYSize_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "xAvgCharWidth_", NULL, 0x0, "S", NULL,  },
    { "usWeightClass_", NULL, 0x0, "I", NULL,  },
    { "usWidthClass_", NULL, 0x0, "I", NULL,  },
    { "fsType_", NULL, 0x0, "S", NULL,  },
    { "ySubscriptXSize_", NULL, 0x0, "S", NULL,  },
    { "ySubscriptYSize_", NULL, 0x0, "S", NULL,  },
    { "ySubscriptXOffset_", NULL, 0x0, "S", NULL,  },
    { "ySubscriptYOffset_", NULL, 0x0, "S", NULL,  },
    { "ySuperscriptXSize_", NULL, 0x0, "S", NULL,  },
    { "ySuperscriptYSize_", NULL, 0x0, "S", NULL,  },
    { "ySuperscriptXOffset_", NULL, 0x0, "S", NULL,  },
    { "ySuperscriptYOffset_", NULL, 0x0, "S", NULL,  },
    { "yStrikeoutSize_", NULL, 0x0, "S", NULL,  },
    { "yStrikeoutPosition_", NULL, 0x0, "S", NULL,  },
    { "sFamilyClass_", NULL, 0x0, "S", NULL,  },
    { "panose_", NULL, 0x0, "[B", NULL,  },
    { "achVendID_", NULL, 0x0, "[B", NULL,  },
    { "fsSelection_", NULL, 0x0, "I", NULL,  },
    { "usFirstCharIndex_", NULL, 0x0, "I", NULL,  },
    { "usLastCharIndex_", NULL, 0x0, "I", NULL,  },
    { "sTypoAscender_", NULL, 0x0, "S", NULL,  },
    { "sTypoDescender_", NULL, 0x0, "S", NULL,  },
    { "sTypoLineGap_", NULL, 0x0, "S", NULL,  },
    { "usWinAscent_", NULL, 0x0, "I", NULL,  },
    { "usWinDescent_", NULL, 0x0, "I", NULL,  },
    { "ulCodePageRange1_", NULL, 0x0, "I", NULL,  },
    { "ulCodePageRange2_", NULL, 0x0, "I", NULL,  },
    { "sCapHeight_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfTrueTypeFont_WindowsMetrics = { "WindowsMetrics", "com.itextpdf.text.pdf", "TrueTypeFont", 0xc, 1, methods, 28, fields, 0, NULL};
  return &_ComItextpdfTextPdfTrueTypeFont_WindowsMetrics;
}

@end
