//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfReader.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfReader.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/PageSize.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/BadPasswordException.h"
#include "com/itextpdf/text/exceptions/InvalidPdfException.h"
#include "com/itextpdf/text/exceptions/UnsupportedPdfException.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/io/WindowRandomAccessSource.h"
#include "com/itextpdf/text/log/Counter.h"
#include "com/itextpdf/text/log/CounterFactory.h"
#include "com/itextpdf/text/log/Level.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/log/LoggerFactory.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/FilterHandlers.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/LZWDecoder.h"
#include "com/itextpdf/text/pdf/LongHashtable.h"
#include "com/itextpdf/text/pdf/PRAcroForm.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PRTokeniser.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfEncryption.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNameTree.h"
#include "com/itextpdf/text/pdf/PdfNull.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfReaderInstance.h"
#include "com/itextpdf/text/pdf/PdfSignatureAppearance.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/SequenceList.h"
#include "com/itextpdf/text/pdf/internal/PdfViewerPreferencesImp.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/security/Key.h"
#include "java/security/cert/Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/zip/InflaterInputStream.h"

BOOL ComItextpdfTextPdfPdfReader_initialized = NO;


#line 91
@implementation ComItextpdfTextPdfPdfReader

jboolean ComItextpdfTextPdfPdfReader_unethicalreading_ = 
#line 98
NO;
jboolean ComItextpdfTextPdfPdfReader_debugmode_ = 
#line 100
NO;
id<ComItextpdfTextLogLogger> ComItextpdfTextPdfPdfReader_LOGGER_;
IOSObjectArray * ComItextpdfTextPdfPdfReader_pageInhCandidates_;
IOSByteArray * ComItextpdfTextPdfPdfReader_endstream_;
IOSByteArray * ComItextpdfTextPdfPdfReader_endobj_;
id<ComItextpdfTextLogCounter> ComItextpdfTextPdfPdfReader_COUNTER_;


#line 161
- (id<ComItextpdfTextLogCounter>)getCounter {
  
#line 162
  return ComItextpdfTextPdfPdfReader_COUNTER_;
}


#line 176
- (instancetype)initComItextpdfTextPdfPdfReaderWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)byteSource
                                                                           withBoolean:(jboolean)partialRead
                                                                         withByteArray:(IOSByteArray *)ownerPassword
                                                       withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate
                                                                   withJavaSecurityKey:(id<JavaSecurityKey>)certificateKey
                                                                          withNSString:(NSString *)certificateKeyProvider
                                                                           withBoolean:(jboolean)closeSourceOnConstructorError {
  if (self = [super init]) {
    acroForm_ =
#line 123
    nil;
    acroFormParsed_ =
#line 124
    NO;
    encrypted_ =
#line 125
    NO;
    rebuilt_ =
#line 126
    NO;
    tampered_ =
#line 128
    NO;
    password_ =
#line 133
    nil;
    certificateKey_ =
#line 134
    nil;
    certificate_ =
#line 135
    nil;
    certificateKeyProvider_ =
#line 136
    nil;
    strings_ =
#line 138
    [[JavaUtilArrayList alloc] init];
    sharedStreams_ =
#line 139
    YES;
    consolidateNamedDestinations__ =
#line 140
    NO;
    remoteToLocalNamedDestinations_ =
#line 141
    NO;
    lastXrefPartial_ =
#line 148
    -1;
    viewerPreferences_ =
#line 152
    [[ComItextpdfTextPdfInternalPdfViewerPreferencesImp alloc] init];
    readDepth_ =
#line 1533
    0;
    
#line 177
    self->certificate_ = certificate;
    
#line 178
    self->certificateKey_ = certificateKey;
    
#line 179
    self->certificateKeyProvider_ = certificateKeyProvider;
    
#line 180
    self->password_ = ownerPassword;
    
#line 181
    self->partial_ = partialRead;
    
#line 182
    @try {
      
#line 184
      tokens_ = [ComItextpdfTextPdfPdfReader getOffsetTokeniserWithComItextpdfTextIoRandomAccessSource:byteSource];
      
#line 186
      if (partialRead) {
        [self readPdfPartial];
      }
      else {
        
#line 189
        [self readPdf];
      }
    }
    @catch (
#line 191
    JavaIoIOException *e) {
      if (closeSourceOnConstructorError)
#line 193
      [((id<ComItextpdfTextIoRandomAccessSource>) nil_chk(byteSource)) close];
      @throw e;
    }
    
#line 196
    [((id<ComItextpdfTextLogCounter>) nil_chk([self getCounter])) readWithLong:fileLength_];
  }
  return self;
}

- (instancetype)initWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)byteSource
                                                withBoolean:(jboolean)partialRead
                                              withByteArray:(IOSByteArray *)ownerPassword
                            withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate
                                        withJavaSecurityKey:(id<JavaSecurityKey>)certificateKey
                                               withNSString:(NSString *)certificateKeyProvider
                                                withBoolean:(jboolean)closeSourceOnConstructorError {
  return [self initComItextpdfTextPdfPdfReaderWithComItextpdfTextIoRandomAccessSource:
#line 176
byteSource withBoolean:partialRead withByteArray:ownerPassword withJavaSecurityCertCertificate:certificate withJavaSecurityKey:certificateKey withNSString:certificateKeyProvider withBoolean:closeSourceOnConstructorError];
}


#line 204
- (instancetype)initWithNSString:(NSString *)filename {
  return
#line 205
  [self initComItextpdfTextPdfPdfReaderWithNSString:filename withByteArray:(IOSByteArray *) check_class_cast(nil, [IOSByteArray class])];
}


#line 214
- (instancetype)initComItextpdfTextPdfPdfReaderWithNSString:(NSString *)filename
                                              withByteArray:(IOSByteArray *)ownerPassword {
  return
#line 215
  [self initComItextpdfTextPdfPdfReaderWithNSString:filename withByteArray:ownerPassword withBoolean:NO];
}

- (instancetype)initWithNSString:(NSString *)filename
                   withByteArray:(IOSByteArray *)ownerPassword {
  return [self initComItextpdfTextPdfPdfReaderWithNSString:
#line 214
filename withByteArray:ownerPassword];
}


#line 226
- (instancetype)initComItextpdfTextPdfPdfReaderWithNSString:(NSString *)filename
                                              withByteArray:(IOSByteArray *)ownerPassword
                                                withBoolean:(jboolean)partial {
  return [self initComItextpdfTextPdfPdfReaderWithComItextpdfTextIoRandomAccessSource:
#line 228
  [((ComItextpdfTextIoRandomAccessSourceFactory *) nil_chk([((ComItextpdfTextIoRandomAccessSourceFactory *) nil_chk([((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) setForceReadWithBoolean:
#line 229
  NO])) setUsePlainRandomAccessWithBoolean:ComItextpdfTextDocument_get_plainRandomAccess_()])) createBestSourceWithNSString:
#line 231
  filename] withBoolean:
#line 232
  partial withByteArray:
#line 233
  ownerPassword withJavaSecurityCertCertificate:
#line 234
  nil withJavaSecurityKey:
#line 235
  nil withNSString:
#line 236
  nil withBoolean:
#line 237
  YES];
}

- (instancetype)initWithNSString:(NSString *)filename
                   withByteArray:(IOSByteArray *)ownerPassword
                     withBoolean:(jboolean)partial {
  return [self initComItextpdfTextPdfPdfReaderWithNSString:
#line 226
filename withByteArray:ownerPassword withBoolean:partial];
}


#line 246
- (instancetype)initWithByteArray:(IOSByteArray *)pdfIn {
  return
#line 247
  [self initComItextpdfTextPdfPdfReaderWithByteArray:pdfIn withByteArray:nil];
}


#line 256
- (instancetype)initComItextpdfTextPdfPdfReaderWithByteArray:(IOSByteArray *)pdfIn
                                               withByteArray:(IOSByteArray *)ownerPassword {
  return
#line 257
  [self initComItextpdfTextPdfPdfReaderWithComItextpdfTextIoRandomAccessSource:
#line 258
  [((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createSourceWithByteArray:pdfIn] withBoolean:
#line 259
  NO withByteArray:
#line 260
  ownerPassword withJavaSecurityCertCertificate:
#line 261
  nil withJavaSecurityKey:
#line 262
  nil withNSString:
#line 263
  nil withBoolean:
#line 264
  YES];
}

- (instancetype)initWithByteArray:(IOSByteArray *)pdfIn
                    withByteArray:(IOSByteArray *)ownerPassword {
  return [self initComItextpdfTextPdfPdfReaderWithByteArray:
#line 256
pdfIn withByteArray:ownerPassword];
}


#line 277
- (instancetype)initWithNSString:(NSString *)filename
 withJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)certificate
             withJavaSecurityKey:(id<JavaSecurityKey>)certificateKey
                    withNSString:(NSString *)certificateKeyProvider {
  return
#line 278
  [self initComItextpdfTextPdfPdfReaderWithComItextpdfTextIoRandomAccessSource:
#line 279
  [((ComItextpdfTextIoRandomAccessSourceFactory *) nil_chk([((ComItextpdfTextIoRandomAccessSourceFactory *) nil_chk([((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) setForceReadWithBoolean:
#line 280
  NO])) setUsePlainRandomAccessWithBoolean:ComItextpdfTextDocument_get_plainRandomAccess_()])) createBestSourceWithNSString:
#line 282
  filename] withBoolean:
#line 283
  NO withByteArray:
#line 284
  nil withJavaSecurityCertCertificate:
#line 285
  certificate withJavaSecurityKey:
#line 286
  certificateKey withNSString:
#line 287
  certificateKeyProvider withBoolean:
#line 288
  YES];
}


#line 300
- (instancetype)initWithJavaNetURL:(JavaNetURL *)url {
  return
#line 301
  [self initComItextpdfTextPdfPdfReaderWithJavaNetURL:url withByteArray:nil];
}


#line 310
- (instancetype)initComItextpdfTextPdfPdfReaderWithJavaNetURL:(JavaNetURL *)url
                                                withByteArray:(IOSByteArray *)ownerPassword {
  return
#line 311
  [self initComItextpdfTextPdfPdfReaderWithComItextpdfTextIoRandomAccessSource:
#line 312
  [((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createSourceWithJavaNetURL:url] withBoolean:
#line 313
  NO withByteArray:
#line 314
  ownerPassword withJavaSecurityCertCertificate:
#line 315
  nil withJavaSecurityKey:
#line 316
  nil withNSString:
#line 317
  nil withBoolean:
#line 318
  YES];
}

- (instancetype)initWithJavaNetURL:(JavaNetURL *)url
                     withByteArray:(IOSByteArray *)ownerPassword {
  return [self initComItextpdfTextPdfPdfReaderWithJavaNetURL:
#line 310
url withByteArray:ownerPassword];
}


#line 330
- (instancetype)initComItextpdfTextPdfPdfReaderWithJavaIoInputStream:(JavaIoInputStream *)is
                                                       withByteArray:(IOSByteArray *)ownerPassword {
  return
#line 331
  [self initComItextpdfTextPdfPdfReaderWithComItextpdfTextIoRandomAccessSource:
#line 332
  [((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createSourceWithJavaIoInputStream:is] withBoolean:
#line 333
  NO withByteArray:
#line 334
  ownerPassword withJavaSecurityCertCertificate:
#line 335
  nil withJavaSecurityKey:
#line 336
  nil withNSString:
#line 337
  nil withBoolean:
#line 338
  NO];
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                            withByteArray:(IOSByteArray *)ownerPassword {
  return [self initComItextpdfTextPdfPdfReaderWithJavaIoInputStream:
#line 330
is withByteArray:ownerPassword];
}


#line 349
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  return
#line 350
  [self initComItextpdfTextPdfPdfReaderWithJavaIoInputStream:is withByteArray:nil];
}


#line 361
- (instancetype)initWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)raf
                                                    withByteArray:(IOSByteArray *)ownerPassword {
  return
#line 362
  [self initComItextpdfTextPdfPdfReaderWithComItextpdfTextIoRandomAccessSource:
#line 363
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(raf)) getByteSource] withBoolean:
#line 364
  YES withByteArray:
#line 365
  ownerPassword withJavaSecurityCertCertificate:
#line 366
  nil withJavaSecurityKey:
#line 367
  nil withNSString:
#line 368
  nil withBoolean:
#line 369
  NO];
}


#line 376
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  if (self = [super init]) {
    acroForm_ =
#line 123
    nil;
    acroFormParsed_ =
#line 124
    NO;
    encrypted_ =
#line 125
    NO;
    rebuilt_ =
#line 126
    NO;
    tampered_ =
#line 128
    NO;
    password_ =
#line 133
    nil;
    certificateKey_ =
#line 134
    nil;
    certificate_ =
#line 135
    nil;
    certificateKeyProvider_ =
#line 136
    nil;
    strings_ =
#line 138
    [[JavaUtilArrayList alloc] init];
    sharedStreams_ =
#line 139
    YES;
    consolidateNamedDestinations__ =
#line 140
    NO;
    remoteToLocalNamedDestinations_ =
#line 141
    NO;
    lastXrefPartial_ =
#line 148
    -1;
    viewerPreferences_ =
#line 152
    [[ComItextpdfTextPdfInternalPdfViewerPreferencesImp alloc] init];
    readDepth_ =
#line 1533
    0;
    
#line 377
    self->appendable_ = ((ComItextpdfTextPdfPdfReader *) nil_chk(reader))->appendable_;
    
#line 378
    self->consolidateNamedDestinations__ = reader->consolidateNamedDestinations__;
    
#line 379
    self->encrypted_ = reader->encrypted_;
    
#line 380
    self->rebuilt_ = reader->rebuilt_;
    self->sharedStreams_ = reader->sharedStreams_;
    
#line 382
    self->tampered_ = reader->tampered_;
    
#line 383
    self->password_ = reader->password_;
    
#line 384
    self->pdfVersion_ = reader->pdfVersion_;
    
#line 385
    self->eofPos_ = reader->eofPos_;
    
#line 386
    self->freeXref_ = reader->freeXref_;
    
#line 387
    self->lastXref_ = reader->lastXref_;
    
#line 388
    self->newXrefType_ = reader->newXrefType_;
    
#line 389
    self->tokens_ = [[ComItextpdfTextPdfPRTokeniser alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[((ComItextpdfTextPdfPRTokeniser *) nil_chk(reader->tokens_)) getSafeFile]];
    
#line 390
    if (reader->decrypt_ != nil)
#line 391
    self->decrypt_ = [[ComItextpdfTextPdfPdfEncryption alloc] initWithComItextpdfTextPdfPdfEncryption:reader->decrypt_];
    
#line 392
    self->pValue_ = reader->pValue_;
    
#line 393
    self->rValue_ = reader->rValue_;
    
#line 394
    self->xrefObj_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:reader->xrefObj_];
    
#line 395
    for (jint k = 0; k < [reader->xrefObj_ size]; ++k) {
      (void) [self->xrefObj_ setWithInt:k withId:[ComItextpdfTextPdfPdfReader duplicatePdfObjectWithComItextpdfTextPdfPdfObject:[reader->xrefObj_ getWithInt:k] withComItextpdfTextPdfPdfReader:self]];
    }
    
#line 398
    self->pageRefs_ = [[ComItextpdfTextPdfPdfReader_PageRefs alloc] initWithComItextpdfTextPdfPdfReader_PageRefs:reader->pageRefs_ withComItextpdfTextPdfPdfReader:self];
    
#line 399
    self->trailer_ = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader duplicatePdfObjectWithComItextpdfTextPdfPdfObject:reader->trailer_ withComItextpdfTextPdfPdfReader:self], [ComItextpdfTextPdfPdfDictionary class]);
    
#line 400
    self->catalog_ = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(trailer_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()];
    
#line 401
    self->rootPages_ = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGES_()];
    
#line 402
    self->fileLength_ = reader->fileLength_;
    
#line 403
    self->partial_ = reader->partial_;
    
#line 404
    self->hybridXref_ = reader->hybridXref_;
    
#line 405
    self->objStmToOffset_ = reader->objStmToOffset_;
    
#line 406
    self->xref_ = reader->xref_;
    
#line 407
    self->cryptoRef_ = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([ComItextpdfTextPdfPdfReader duplicatePdfObjectWithComItextpdfTextPdfPdfObject:reader->cryptoRef_ withComItextpdfTextPdfPdfReader:self], [ComItextpdfTextPdfPRIndirectReference class]);
    
#line 408
    self->ownerPasswordUsed_ = reader->ownerPasswordUsed_;
  }
  return self;
}


#line 418
+ (ComItextpdfTextPdfPRTokeniser *)getOffsetTokeniserWithComItextpdfTextIoRandomAccessSource:(id<ComItextpdfTextIoRandomAccessSource>)byteSource {
  
#line 419
  ComItextpdfTextPdfPRTokeniser *tok = [[ComItextpdfTextPdfPRTokeniser alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:byteSource]];
  jint offset = [tok getHeaderOffset];
  if (offset != 0) {
    id<ComItextpdfTextIoRandomAccessSource> offsetSource = [[ComItextpdfTextIoWindowRandomAccessSource alloc] initWithComItextpdfTextIoRandomAccessSource:byteSource withLong:offset];
    tok = [[ComItextpdfTextPdfPRTokeniser alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:offsetSource]];
  }
  return tok;
}


#line 432
- (ComItextpdfTextPdfRandomAccessFileOrArray *)getSafeFile {
  
#line 433
  return [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) getSafeFile];
}


#line 436
- (ComItextpdfTextPdfPdfReaderInstance *)getPdfReaderInstanceWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 437
  return [[ComItextpdfTextPdfPdfReaderInstance alloc] initWithComItextpdfTextPdfPdfReader:self withComItextpdfTextPdfPdfWriter:writer];
}


#line 443
- (jint)getNumberOfPages {
  
#line 444
  return [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) size];
}


#line 452
- (ComItextpdfTextPdfPdfDictionary *)getCatalog {
  
#line 453
  return catalog_;
}


#line 460
- (ComItextpdfTextPdfPRAcroForm *)getAcroForm {
  
#line 461
  if (!acroFormParsed_) {
    acroFormParsed_ = YES;
    ComItextpdfTextPdfPdfObject *form = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
    if (form != nil) {
      @try {
        acroForm_ = [[ComItextpdfTextPdfPRAcroForm alloc] initWithComItextpdfTextPdfPdfReader:self];
        [acroForm_ readAcroFormWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:form], [ComItextpdfTextPdfPdfDictionary class])];
      }
      @catch (JavaLangException *e) {
        acroForm_ = nil;
      }
    }
  }
  return acroForm_;
}


#line 481
- (jint)getPageRotationWithInt:(jint)index {
  
#line 482
  return [self getPageRotationWithComItextpdfTextPdfPdfDictionary:[((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) getPageNReleaseWithInt:index]];
}


#line 485
- (jint)getPageRotationWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)page {
  
#line 486
  ComItextpdfTextPdfPdfNumber *rotate = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROTATE_()];
  if (rotate == nil)
#line 488
  return 0;
  else {
    jint n = [rotate intValue];
    n %= 360;
    return n < 0 ? n + 360 : n;
  }
}


#line 500
- (ComItextpdfTextRectangle *)getPageSizeWithRotationWithInt:(jint)index {
  
#line 501
  return [self getPageSizeWithRotationWithComItextpdfTextPdfPdfDictionary:[((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) getPageNReleaseWithInt:index]];
}


#line 509
- (ComItextpdfTextRectangle *)getPageSizeWithRotationWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)page {
  
#line 510
  ComItextpdfTextRectangle *rect = [self getPageSizeWithComItextpdfTextPdfPdfDictionary:page];
  jint rotation = [self getPageRotationWithComItextpdfTextPdfPdfDictionary:page];
  while (rotation > 0) {
    rect = [((ComItextpdfTextRectangle *) nil_chk(rect)) rotate];
    rotation -= 90;
  }
  return rect;
}


#line 524
- (ComItextpdfTextRectangle *)getPageSizeWithInt:(jint)index {
  
#line 525
  return [self getPageSizeWithComItextpdfTextPdfPdfDictionary:[((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) getPageNReleaseWithInt:index]];
}


#line 533
- (ComItextpdfTextRectangle *)getPageSizeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)page {
  
#line 534
  ComItextpdfTextPdfPdfArray *mediaBox = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MEDIABOX_()];
  return [ComItextpdfTextPdfPdfReader getNormalizedRectangleWithComItextpdfTextPdfPdfArray:mediaBox];
}


#line 546
- (ComItextpdfTextRectangle *)getCropBoxWithInt:(jint)index {
  
#line 547
  ComItextpdfTextPdfPdfDictionary *page = [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) getPageNReleaseWithInt:index];
  ComItextpdfTextPdfPdfArray *cropBox = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CROPBOX_()]], [ComItextpdfTextPdfPdfArray class]);
  if (cropBox == nil)
#line 550
  return [self getPageSizeWithComItextpdfTextPdfPdfDictionary:page];
  return [ComItextpdfTextPdfPdfReader getNormalizedRectangleWithComItextpdfTextPdfPdfArray:cropBox];
}


#line 559
- (ComItextpdfTextRectangle *)getBoxSizeWithInt:(jint)index
                                   withNSString:(NSString *)boxName {
  
#line 560
  ComItextpdfTextPdfPdfDictionary *page = [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) getPageNReleaseWithInt:index];
  ComItextpdfTextPdfPdfArray *box = nil;
  if ([((NSString *) nil_chk(boxName)) isEqual:@"trim"])
#line 563
  box = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRIMBOX_()]], [ComItextpdfTextPdfPdfArray class]);
  else if ([boxName isEqual:@"art"])
#line 565
  box = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ARTBOX_()]], [ComItextpdfTextPdfPdfArray class]);
  else if ([boxName isEqual:@"bleed"])
#line 567
  box = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BLEEDBOX_()]], [ComItextpdfTextPdfPdfArray class]);
  else if ([boxName isEqual:@"crop"])
#line 569
  box = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CROPBOX_()]], [ComItextpdfTextPdfPdfArray class]);
  else if ([boxName isEqual:@"media"])
#line 571
  box = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MEDIABOX_()]], [ComItextpdfTextPdfPdfArray class]);
  if (box == nil)
#line 573
  return nil;
  return [ComItextpdfTextPdfPdfReader getNormalizedRectangleWithComItextpdfTextPdfPdfArray:box];
}


#line 582
- (JavaUtilHashMap *)getInfo {
  
#line 583
  JavaUtilHashMap *map = [[JavaUtilHashMap alloc] init];
  ComItextpdfTextPdfPdfDictionary *info = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(trailer_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INFO_()];
  if (info == nil)
#line 586
  return map;
  for (id __strong element in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(info)) getKeys])) {
    ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
    ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[info getWithComItextpdfTextPdfPdfName:key]];
    if (obj == nil)
#line 591
    continue;
    NSString *value = [((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) description];
    switch ([obj type]) {
      case ComItextpdfTextPdfPdfObject_STRING:
      {
        
#line 595
        value = [((ComItextpdfTextPdfPdfString *) check_class_cast(obj, [ComItextpdfTextPdfPdfString class])) toUnicodeString];
        break;
      }
      case ComItextpdfTextPdfPdfObject_NAME:
      {
        
#line 599
        value = [ComItextpdfTextPdfPdfName decodeNameWithNSString:value];
        break;
      }
    }
    (void) [map putWithId:[ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfName *) nil_chk(key)) description]] withId:value];
  }
  return map;
}


#line 612
+ (ComItextpdfTextRectangle *)getNormalizedRectangleWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)box {
  
#line 613
  jfloat llx = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfArray *) nil_chk(box)) getPdfObjectWithInt:0]], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat lly = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[box getPdfObjectWithInt:1]], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat urx = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[box getPdfObjectWithInt:2]], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat ury = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[box getPdfObjectWithInt:3]], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  return [[ComItextpdfTextRectangle alloc] initWithFloat:[JavaLangMath minWithFloat:llx withFloat:urx] withFloat:[JavaLangMath minWithFloat:lly withFloat:ury] withFloat:
#line 618
  [JavaLangMath maxWithFloat:llx withFloat:urx] withFloat:[JavaLangMath maxWithFloat:lly withFloat:ury]];
}

- (jboolean)isTagged {
  
#line 625
  ComItextpdfTextPdfPdfDictionary *markInfo = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MARKINFO_()];
  if (markInfo == nil)
#line 627
  return NO;
  return [((ComItextpdfTextPdfPdfBoolean *) nil_chk(ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(markInfo)) getAsBooleanWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MARKED_()]];
}

- (void)readPdf {
  
#line 635
  fileLength_ = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk([((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) getFile])) length];
  pdfVersion_ = [tokens_ checkPdfHeader];
  @try {
    [self readXref];
  }
  @catch (JavaLangException *e) {
    @try {
      rebuilt_ = YES;
      [self rebuildXref];
      lastXref_ = -1;
    }
    @catch (JavaLangException *ne) {
      @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"rebuild.failed.1.original.message.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((JavaLangException *) nil_chk(ne)) getMessage], [((JavaLangException *) nil_chk(e)) getMessage] } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  @try {
    [self readDocObj];
  }
  @catch (JavaLangException *e) {
    if ([e isKindOfClass:[ComItextpdfTextExceptionsBadPasswordException class]])
#line 655
    @throw [[ComItextpdfTextExceptionsBadPasswordException alloc] initWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
    if (rebuilt_ || encryptionError_)
#line 657
    @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
    rebuilt_ = YES;
    encrypted_ = NO;
    @try {
      [self rebuildXref];
      lastXref_ = -1;
      [self readDocObj];
    }
    @catch (
#line 664
    JavaLangException *ne) {
      @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"rebuild.failed.1.original.message.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((JavaLangException *) nil_chk(ne)) getMessage], [((JavaLangException *) nil_chk(e)) getMessage] } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  [((JavaUtilArrayList *) nil_chk(strings_)) clear];
  [self readPages];
  
#line 671
  [self removeUnusedObjects];
}


#line 675
- (void)readPdfPartial {
  
#line 676
  fileLength_ = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk([((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) getFile])) length];
  pdfVersion_ = [tokens_ checkPdfHeader];
  @try {
    [self readXref];
  }
  @catch (JavaLangException *e) {
    @try {
      rebuilt_ = YES;
      [self rebuildXref];
      lastXref_ = -1;
    }
    @catch (
#line 686
    JavaLangException *ne) {
      @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:
#line 688
      [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 689
      @"rebuild.failed.1.original.message.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){
#line 690
        [((JavaLangException *) nil_chk(ne)) getMessage], [((JavaLangException *) nil_chk(e)) getMessage] } count:2 type:[IOSClass classWithClass:[NSObject class]]]] withJavaLangThrowable:ne];
      }
    }
    [self readDocObjPartial];
    [self readPages];
  }


#line 697
- (jboolean)equalsArrayWithByteArray:(IOSByteArray *)ar1
                       withByteArray:(IOSByteArray *)ar2
                             withInt:(jint)size {
  
#line 698
  for (jint k = 0; k < size; ++k) {
    if (IOSByteArray_Get(nil_chk(ar1), k) != IOSByteArray_Get(nil_chk(ar2), k))
#line 700
    return NO;
  }
  return YES;
}


#line 709
- (void)readDecryptedDocObj {
}


#line 716
+ (ComItextpdfTextPdfPdfObject *)getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 717
  ComItextpdfTextPdfPdfObject *obj2 = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj];
  [ComItextpdfTextPdfPdfReader releaseLastXrefPartialWithComItextpdfTextPdfPdfObject:obj];
  return obj2;
}


#line 729
+ (ComItextpdfTextPdfPdfObject *)getPdfObjectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 730
  if (obj == nil)
#line 731
  return nil;
  if (![((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect])
#line 733
  return obj;
  @try {
    ComItextpdfTextPdfPRIndirectReference *ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class]);
    jint idx = [ref getNumber];
    jboolean appendable = ((ComItextpdfTextPdfPdfReader *) nil_chk([ref getReader]))->appendable_;
    obj = [((ComItextpdfTextPdfPdfReader *) nil_chk([ref getReader])) getPdfObjectWithInt:idx];
    if (obj == nil) {
      return nil;
    }
    else {
      if (appendable) {
        switch ([obj type]) {
          case ComItextpdfTextPdfPdfObject_NULL:
          obj = [[ComItextpdfTextPdfPdfNull alloc] init];
          break;
          case ComItextpdfTextPdfPdfObject_BOOLEAN:
          obj = [[ComItextpdfTextPdfPdfBoolean alloc] initWithBoolean:[((ComItextpdfTextPdfPdfBoolean *) check_class_cast(obj, [ComItextpdfTextPdfPdfBoolean class])) booleanValue]];
          break;
          case ComItextpdfTextPdfPdfObject_NAME:
          obj = [[ComItextpdfTextPdfPdfName alloc] initWithByteArray:[obj getBytes]];
          break;
        }
        [obj setIndRefWithComItextpdfTextPdfPRIndirectReference:ref];
      }
      return obj;
    }
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 773
+ (ComItextpdfTextPdfPdfObject *)getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj
                                                    withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)parent {
  
#line 774
  ComItextpdfTextPdfPdfObject *obj2 = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj withComItextpdfTextPdfPdfObject:parent];
  [ComItextpdfTextPdfPdfReader releaseLastXrefPartialWithComItextpdfTextPdfPdfObject:obj];
  return obj2;
}


#line 784
+ (ComItextpdfTextPdfPdfObject *)getPdfObjectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj
                                             withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)parent {
  
#line 785
  if (obj == nil)
#line 786
  return nil;
  if (![((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect]) {
    ComItextpdfTextPdfPRIndirectReference *ref = nil;
    if (parent != nil && (ref = [parent getIndRef]) != nil && [((ComItextpdfTextPdfPdfReader *) nil_chk([((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getReader])) isAppendable]) {
      switch ([obj type]) {
        case ComItextpdfTextPdfPdfObject_NULL:
        obj = [[ComItextpdfTextPdfPdfNull alloc] init];
        break;
        case ComItextpdfTextPdfPdfObject_BOOLEAN:
        obj = [[ComItextpdfTextPdfPdfBoolean alloc] initWithBoolean:[((ComItextpdfTextPdfPdfBoolean *) check_class_cast(obj, [ComItextpdfTextPdfPdfBoolean class])) booleanValue]];
        break;
        case ComItextpdfTextPdfPdfObject_NAME:
        obj = [[ComItextpdfTextPdfPdfName alloc] initWithByteArray:[obj getBytes]];
        break;
      }
      [obj setIndRefWithComItextpdfTextPdfPRIndirectReference:ref];
    }
    return obj;
  }
  return [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj];
}

- (ComItextpdfTextPdfPdfObject *)getPdfObjectReleaseWithInt:(jint)idx {
  
#line 813
  ComItextpdfTextPdfPdfObject *obj = [self getPdfObjectWithInt:idx];
  [self releaseLastXrefPartial];
  return obj;
}


#line 822
- (ComItextpdfTextPdfPdfObject *)getPdfObjectWithInt:(jint)idx {
  
#line 823
  @try {
    lastXrefPartial_ = -1;
    if (idx < 0 || idx >= [((JavaUtilArrayList *) nil_chk(xrefObj_)) size])
#line 826
    return nil;
    ComItextpdfTextPdfPdfObject *obj = [((JavaUtilArrayList *) nil_chk(xrefObj_)) getWithInt:idx];
    if (!partial_ || obj != nil)
#line 829
    return obj;
    if (idx * 2 >= ((IOSLongArray *) nil_chk(xref_))->size_)
#line 831
    return nil;
    obj = [self readSingleObjectWithInt:idx];
    lastXrefPartial_ = -1;
    if (obj != nil)
#line 835
    lastXrefPartial_ = idx;
    return obj;
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 846
- (void)resetLastXrefPartial {
  
#line 847
  lastXrefPartial_ = -1;
}


#line 853
- (void)releaseLastXrefPartial {
  
#line 854
  if (partial_ && lastXrefPartial_ != -1) {
    (void) [((JavaUtilArrayList *) nil_chk(xrefObj_)) setWithInt:lastXrefPartial_ withId:nil];
    lastXrefPartial_ = -1;
  }
}


#line 863
+ (void)releaseLastXrefPartialWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 864
  if (obj == nil)
#line 865
  return;
  if (![((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect])
#line 867
  return;
  if (!([obj isKindOfClass:[ComItextpdfTextPdfPRIndirectReference class]]))
#line 869
  return;
  
#line 871
  ComItextpdfTextPdfPRIndirectReference *ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class]);
  ComItextpdfTextPdfPdfReader *reader = [ref getReader];
  if (((ComItextpdfTextPdfPdfReader *) nil_chk(reader))->partial_ && reader->lastXrefPartial_ != -1 && reader->lastXrefPartial_ == [ref getNumber]) {
    (void) [((JavaUtilArrayList *) nil_chk(reader->xrefObj_)) setWithInt:reader->lastXrefPartial_ withId:nil];
  }
  reader->lastXrefPartial_ = -1;
}


#line 879
- (void)setXrefPartialObjectWithInt:(jint)idx
    withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 880
  if (!partial_ || idx < 0)
#line 881
  return;
  (void) [((JavaUtilArrayList *) nil_chk(xrefObj_)) setWithInt:idx withId:obj];
}

- (ComItextpdfTextPdfPRIndirectReference *)addPdfObjectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 890
  [((JavaUtilArrayList *) nil_chk(xrefObj_)) addWithId:obj];
  return [[ComItextpdfTextPdfPRIndirectReference alloc] initWithComItextpdfTextPdfPdfReader:self withInt:[xrefObj_ size] - 1];
}


#line 894
- (void)readPages {
  
#line 895
  catalog_ = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(trailer_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()];
  if (catalog_ == nil)
#line 897
  @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.has.no.catalog.object" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  rootPages_ = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGES_()];
  if (rootPages_ == nil)
#line 900
  @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.has.no.page.root" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  pageRefs_ = [[ComItextpdfTextPdfPdfReader_PageRefs alloc] initWithComItextpdfTextPdfPdfReader:self];
}


#line 904
- (void)readDocObjPartial {
  
#line 905
  xrefObj_ = [[JavaUtilArrayList alloc] initWithInt:((IOSLongArray *) nil_chk(xref_))->size_ / 2];
  [xrefObj_ addAllWithJavaUtilCollection:[JavaUtilCollections nCopiesWithInt:xref_->size_ / 2 withId:nil]];
  [self readDecryptedDocObj];
  if (objStmToOffset_ != nil) {
    IOSLongArray *keys = [objStmToOffset_ getKeys];
    for (jint k = 0; k < ((IOSLongArray *) nil_chk(keys))->size_; ++k) {
      jlong n = IOSLongArray_Get(keys, k);
      [objStmToOffset_ putWithLong:n withLong:IOSLongArray_Get(xref_, (jint) (n * 2))];
      *IOSLongArray_GetRef(xref_, (jint) (n * 2)) = -1;
    }
  }
}


#line 918
- (ComItextpdfTextPdfPdfObject *)readSingleObjectWithInt:(jint)k {
  
#line 919
  [((JavaUtilArrayList *) nil_chk(strings_)) clear];
  jint k2 = k * 2;
  jlong pos = IOSLongArray_Get(nil_chk(xref_), k2);
  if (pos < 0)
#line 923
  return nil;
  if (IOSLongArray_Get(xref_, k2 + 1) > 0)
#line 925
  pos = [((ComItextpdfTextPdfLongHashtable *) nil_chk(objStmToOffset_)) getWithLong:IOSLongArray_Get(xref_, k2 + 1)];
  if (pos == 0)
#line 927
  return nil;
  [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) seekWithLong:pos];
  [tokens_ nextValidToken];
  if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 931
  [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.object.number" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  objNum_ = [tokens_ intValue];
  [tokens_ nextValidToken];
  if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 935
  [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.generation.number" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  objGen_ = [tokens_ intValue];
  [tokens_ nextValidToken];
  if (![((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"obj"])
#line 939
  [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"token.obj.expected" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPdfObject *obj;
  @try {
    obj = [self readPRObject];
    for (jint j = 0; j < [strings_ size]; ++j) {
      ComItextpdfTextPdfPdfString *str = [strings_ getWithInt:j];
      [((ComItextpdfTextPdfPdfString *) nil_chk(str)) decryptWithComItextpdfTextPdfPdfReader:self];
    }
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isStream]) {
      [self checkPRStreamLengthWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(obj, [ComItextpdfTextPdfPRStream class])];
    }
  }
  @catch (JavaIoIOException *e) {
    if (ComItextpdfTextPdfPdfReader_debugmode_) {
      if ([((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfPdfReader_LOGGER_)) isLoggingWithComItextpdfTextLogLevelEnum:ComItextpdfTextLogLevelEnum_get_ERROR()])
#line 954
      [ComItextpdfTextPdfPdfReader_LOGGER_ errorWithNSString:[((JavaIoIOException *) nil_chk(e)) getMessage] withJavaLangException:e];
      obj = nil;
    }
    else
#line 958
    @throw e;
  }
  if (IOSLongArray_Get(xref_, k2 + 1) > 0) {
    obj = [self readOneObjStmWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(obj, [ComItextpdfTextPdfPRStream class]) withInt:(jint) IOSLongArray_Get(xref_, k2)];
  }
  (void) [((JavaUtilArrayList *) nil_chk(xrefObj_)) setWithInt:k withId:obj];
  return obj;
}


#line 967
- (ComItextpdfTextPdfPdfObject *)readOneObjStmWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream
                                                                     withInt:(jint)idx {
  
#line 968
  jint first = [((ComItextpdfTextPdfPdfNumber *) nil_chk([((ComItextpdfTextPdfPRStream *) nil_chk(stream)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_()])) intValue];
  IOSByteArray *b = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:stream withComItextpdfTextPdfRandomAccessFileOrArray:[((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) getFile]];
  ComItextpdfTextPdfPRTokeniser *saveTokens = tokens_;
  tokens_ = [[ComItextpdfTextPdfPRTokeniser alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createSourceWithByteArray:b]]];
  @try {
    jint address = 0;
    jboolean ok = YES;
    ++idx;
    for (jint k = 0; k < idx; ++k) {
      ok = [tokens_ nextToken];
      if (!ok)
#line 979
      break;
      if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER()) {
        ok = NO;
        break;
      }
      ok = [tokens_ nextToken];
      if (!ok)
#line 986
      break;
      if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER()) {
        ok = NO;
        break;
      }
      address = [tokens_ intValue] + first;
    }
    if (!ok)
#line 994
    @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"error.reading.objstm" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    [tokens_ seekWithLong:address];
    [tokens_ nextToken];
    ComItextpdfTextPdfPdfObject *obj;
    if ([tokens_ getTokenType] == ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER()) {
      obj = [[ComItextpdfTextPdfPdfNumber alloc] initWithNSString:[tokens_ getStringValue]];
    }
    else {
      [tokens_ seekWithLong:address];
      obj = [self readPRObject];
    }
    return obj;
  }
  @finally {
    
#line 1009
    tokens_ = saveTokens;
  }
}


#line 1016
- (jdouble)dumpPerc {
  
#line 1017
  jint total = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(xrefObj_)) size]; ++k) {
    if ([xrefObj_ getWithInt:k] != nil)
#line 1020
    ++total;
  }
  return total * 100.0 / [xrefObj_ size];
}


#line 1025
- (void)readDocObj {
  
#line 1026
  JavaUtilArrayList *streams = [[JavaUtilArrayList alloc] init];
  xrefObj_ = [[JavaUtilArrayList alloc] initWithInt:((IOSLongArray *) nil_chk(xref_))->size_ / 2];
  [xrefObj_ addAllWithJavaUtilCollection:[JavaUtilCollections nCopiesWithInt:xref_->size_ / 2 withId:nil]];
  for (jint k = 2; k < xref_->size_; k += 2) {
    jlong pos = IOSLongArray_Get(xref_, k);
    if (pos <= 0 || IOSLongArray_Get(xref_, k + 1) > 0)
#line 1032
    continue;
    [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) seekWithLong:pos];
    [tokens_ nextValidToken];
    if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 1036
    [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.object.number" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    objNum_ = [tokens_ intValue];
    [tokens_ nextValidToken];
    if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 1040
    [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.generation.number" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    objGen_ = [tokens_ intValue];
    [tokens_ nextValidToken];
    if (![((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"obj"])
#line 1044
    [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"token.obj.expected" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    ComItextpdfTextPdfPdfObject *obj;
    @try {
      obj = [self readPRObject];
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isStream]) {
        [streams addWithId:(ComItextpdfTextPdfPRStream *) check_class_cast(obj, [ComItextpdfTextPdfPRStream class])];
      }
    }
    @catch (JavaIoIOException *e) {
      if (ComItextpdfTextPdfPdfReader_debugmode_) {
        if ([((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfPdfReader_LOGGER_)) isLoggingWithComItextpdfTextLogLevelEnum:ComItextpdfTextLogLevelEnum_get_ERROR()])
#line 1055
        [ComItextpdfTextPdfPdfReader_LOGGER_ errorWithNSString:[((JavaIoIOException *) nil_chk(e)) getMessage] withJavaLangException:e];
        obj = nil;
      }
      else
#line 1059
      @throw e;
    }
    (void) [xrefObj_ setWithInt:k / 2 withId:obj];
  }
  for (jint k = 0; k < [streams size]; ++k) {
    [self checkPRStreamLengthWithComItextpdfTextPdfPRStream:[streams getWithInt:k]];
  }
  [self readDecryptedDocObj];
  if (objStmMark_ != nil) {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([objStmMark_ entrySet])) {
      jint n = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey])) intValue];
      ComItextpdfTextPdfIntHashtable *h = [entry_ getValue];
      [self readObjStmWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast([xrefObj_ getWithInt:n], [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfIntHashtable:h];
      (void) [xrefObj_ setWithInt:n withId:nil];
    }
    objStmMark_ = nil;
  }
  xref_ = nil;
}


#line 1079
- (void)checkPRStreamLengthWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream {
  
#line 1080
  jlong fileLength = [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) length];
  jlong start = [((ComItextpdfTextPdfPRStream *) nil_chk(stream)) getOffset];
  jboolean calc = NO;
  jlong streamLength = 0;
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[stream getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_()]];
  if (obj != nil && [obj type] == ComItextpdfTextPdfPdfObject_NUMBER) {
    streamLength = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) intValue];
    if (streamLength + start > fileLength - 20)
#line 1088
    calc = YES;
    else {
      [tokens_ seekWithLong:start + streamLength];
      NSString *line = [tokens_ readStringWithInt:20];
      if (![((NSString *) nil_chk(line)) hasPrefix:@"\nendstream"] &&
#line 1093
      ![line hasPrefix:@"\x0d\nendstream"] &&
#line 1094
      ![line hasPrefix:@"\x0d""endstream"] &&
#line 1095
      ![line hasPrefix:@"endstream"])
#line 1096
      calc = YES;
    }
  }
  else
#line 1100
  calc = YES;
  if (calc) {
    IOSByteArray *tline = [IOSByteArray arrayWithLength:16];
    [tokens_ seekWithLong:start];
    jlong pos;
    while (YES) {
      pos = [tokens_ getFilePointer];
      if (![tokens_ readLineSegmentWithByteArray:tline])
#line 1108
      break;
      if ([ComItextpdfTextPdfPdfReader equalsnWithByteArray:tline withByteArray:ComItextpdfTextPdfPdfReader_endstream_]) {
        streamLength = pos - start;
        break;
      }
      if ([ComItextpdfTextPdfPdfReader equalsnWithByteArray:tline withByteArray:ComItextpdfTextPdfPdfReader_endobj_]) {
        [tokens_ seekWithLong:pos - 16];
        NSString *s = [tokens_ readStringWithInt:16];
        jint index = [((NSString *) nil_chk(s)) indexOfString:@"endstream"];
        if (index >= 0)
#line 1118
        pos = pos - 16 + index;
        streamLength = pos - start;
        break;
      }
    }
    [tokens_ seekWithLong:pos - 2];
    if ([tokens_ read] == 13)
#line 1125
    streamLength--;
    [tokens_ seekWithLong:pos - 1];
    if ([tokens_ read] == 10)
#line 1128
    streamLength--;
  }
  [stream setLengthWithInt:(jint) streamLength];
}


#line 1133
- (void)readObjStmWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream
              withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)map {
  
#line 1134
  jint first = [((ComItextpdfTextPdfPdfNumber *) nil_chk([((ComItextpdfTextPdfPRStream *) nil_chk(stream)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_()])) intValue];
  jint n = [((ComItextpdfTextPdfPdfNumber *) nil_chk([stream getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_()])) intValue];
  IOSByteArray *b = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:stream withComItextpdfTextPdfRandomAccessFileOrArray:[((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) getFile]];
  ComItextpdfTextPdfPRTokeniser *saveTokens = tokens_;
  tokens_ = [[ComItextpdfTextPdfPRTokeniser alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createSourceWithByteArray:b]]];
  @try {
    IOSIntArray *address = [IOSIntArray arrayWithLength:n];
    IOSIntArray *objNumber = [IOSIntArray arrayWithLength:n];
    jboolean ok = YES;
    for (jint k = 0; k < n; ++k) {
      ok = [tokens_ nextToken];
      if (!ok)
#line 1146
      break;
      if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER()) {
        ok = NO;
        break;
      }
      *IOSIntArray_GetRef(objNumber, k) = [tokens_ intValue];
      ok = [tokens_ nextToken];
      if (!ok)
#line 1154
      break;
      if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER()) {
        ok = NO;
        break;
      }
      *IOSIntArray_GetRef(address, k) = [tokens_ intValue] + first;
    }
    if (!ok)
#line 1162
    @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"error.reading.objstm" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    for (jint k = 0; k < n; ++k) {
      if ([((ComItextpdfTextPdfIntHashtable *) nil_chk(map)) containsKeyWithInt:k]) {
        [tokens_ seekWithLong:IOSIntArray_Get(address, k)];
        [tokens_ nextToken];
        ComItextpdfTextPdfPdfObject *obj;
        if ([tokens_ getTokenType] == ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER()) {
          obj = [[ComItextpdfTextPdfPdfNumber alloc] initWithNSString:[tokens_ getStringValue]];
        }
        else {
          [tokens_ seekWithLong:IOSIntArray_Get(address, k)];
          obj = [self readPRObject];
        }
        (void) [((JavaUtilArrayList *) nil_chk(xrefObj_)) setWithInt:IOSIntArray_Get(objNumber, k) withId:obj];
      }
    }
  }
  @finally {
    tokens_ = saveTokens;
  }
}

+ (ComItextpdfTextPdfPdfObject *)killIndirectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 1191
  if (obj == nil || [obj isNull])
#line 1192
  return nil;
  ComItextpdfTextPdfPdfObject *ret = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:obj];
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect]) {
    ComItextpdfTextPdfPRIndirectReference *ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class]);
    ComItextpdfTextPdfPdfReader *reader = [ref getReader];
    jint n = [ref getNumber];
    (void) [((JavaUtilArrayList *) nil_chk(((ComItextpdfTextPdfPdfReader *) nil_chk(reader))->xrefObj_)) setWithInt:n withId:nil];
    if (reader->partial_)
#line 1200
    *IOSLongArray_GetRef(nil_chk(reader->xref_), n * 2) = -1;
  }
  return ret;
}


#line 1205
- (void)ensureXrefSizeWithInt:(jint)size {
  
#line 1206
  if (size == 0)
#line 1207
  return;
  if (xref_ == nil)
#line 1209
  xref_ = [IOSLongArray arrayWithLength:size];
  else {
    if (xref_->size_ < size) {
      IOSLongArray *xref2 = [IOSLongArray arrayWithLength:size];
      [JavaLangSystem arraycopyWithId:xref_ withInt:0 withId:xref2 withInt:0 withInt:xref_->size_];
      xref_ = xref2;
    }
  }
}


#line 1219
- (void)readXref {
  
#line 1220
  hybridXref_ = NO;
  newXrefType_ = NO;
  [tokens_ seekWithLong:[((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) getStartxref]];
  [tokens_ nextToken];
  if (![((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"startxref"])
#line 1225
  @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"startxref.not.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [tokens_ nextToken];
  if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 1228
  @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"startxref.is.not.followed.by.a.number" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  jlong startxref = [tokens_ longValue];
  lastXref_ = startxref;
  eofPos_ = [tokens_ getFilePointer];
  @try {
    if ([self readXRefStreamWithLong:startxref]) {
      newXrefType_ = YES;
      return;
    }
  }
  @catch (JavaLangException *e) {
  }
  
#line 1239
  xref_ = nil;
  [tokens_ seekWithLong:startxref];
  trailer_ = [self readXrefSection];
  ComItextpdfTextPdfPdfDictionary *trailer2 = trailer_;
  while (YES) {
    ComItextpdfTextPdfPdfNumber *prev = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(trailer2)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PREV_()], [ComItextpdfTextPdfPdfNumber class]);
    if (prev == nil)
#line 1246
    break;
    [tokens_ seekWithLong:[((ComItextpdfTextPdfPdfNumber *) nil_chk(prev)) longValue]];
    trailer2 = [self readXrefSection];
  }
}


#line 1252
- (ComItextpdfTextPdfPdfDictionary *)readXrefSection {
  
#line 1253
  [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) nextValidToken];
  if (![((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"xref"])
#line 1255
  [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"xref.subsection.not.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  jint start = 0;
  jint end = 0;
  jlong pos = 0;
  jint gen = 0;
  while (YES) {
    [tokens_ nextValidToken];
    if ([((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"trailer"])
#line 1263
    break;
    if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 1265
    [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"object.number.of.the.first.object.in.this.xref.subsection.not.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    start = [tokens_ intValue];
    [tokens_ nextValidToken];
    if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 1269
    [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"number.of.entries.in.this.xref.subsection.not.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    end = [tokens_ intValue] + start;
    if (start == 1) {
      jlong back = [tokens_ getFilePointer];
      [tokens_ nextValidToken];
      pos = [tokens_ longValue];
      [tokens_ nextValidToken];
      gen = [tokens_ intValue];
      if (pos == 0 && gen == ComItextpdfTextPdfPdfWriter_GENERATION_MAX) {
        --start;
        --end;
      }
      [tokens_ seekWithLong:back];
    }
    [self ensureXrefSizeWithInt:end * 2];
    for (jint k = start; k < end; ++k) {
      [tokens_ nextValidToken];
      pos = [tokens_ longValue];
      [tokens_ nextValidToken];
      gen = [tokens_ intValue];
      [tokens_ nextValidToken];
      jint p = k * 2;
      if ([((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"n"]) {
        if (IOSLongArray_Get(nil_chk(xref_), p) == 0 && IOSLongArray_Get(xref_, p + 1) == 0) {
          
#line 1295
          *IOSLongArray_GetRef(xref_, p) = pos;
        }
      }
      else if ([((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"f"]) {
        if (IOSLongArray_Get(nil_chk(xref_), p) == 0 && IOSLongArray_Get(xref_, p + 1) == 0)
#line 1300
        *IOSLongArray_GetRef(xref_, p) = -1;
      }
      else
#line 1303
      [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.cross.reference.entry.in.this.xref.subsection" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  ComItextpdfTextPdfPdfDictionary *trailer = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([self readPRObject], [ComItextpdfTextPdfPdfDictionary class]);
  ComItextpdfTextPdfPdfNumber *xrefSize = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(trailer)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIZE_()], [ComItextpdfTextPdfPdfNumber class]);
  [self ensureXrefSizeWithInt:[((ComItextpdfTextPdfPdfNumber *) nil_chk(xrefSize)) intValue] * 2];
  ComItextpdfTextPdfPdfObject *xrs = [trailer getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XREFSTM_()];
  if (xrs != nil && [xrs isNumber]) {
    jint loc = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(xrs, [ComItextpdfTextPdfPdfNumber class])) intValue];
    @try {
      [self readXRefStreamWithLong:loc];
      newXrefType_ = YES;
      hybridXref_ = YES;
    }
    @catch (JavaIoIOException *e) {
      xref_ = nil;
      @throw e;
    }
  }
  return trailer;
}


#line 1325
- (jboolean)readXRefStreamWithLong:(jlong)ptr {
  
#line 1326
  [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) seekWithLong:ptr];
  jint thisStream = 0;
  if (![tokens_ nextToken])
#line 1329
  return NO;
  if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 1331
  return NO;
  thisStream = [tokens_ intValue];
  if (![tokens_ nextToken] || [tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NUMBER())
#line 1334
  return NO;
  if (![tokens_ nextToken] || ![((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"obj"])
#line 1336
  return NO;
  ComItextpdfTextPdfPdfObject *object = [self readPRObject];
  ComItextpdfTextPdfPRStream *stm = nil;
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(object)) isStream]) {
    stm = (ComItextpdfTextPdfPRStream *) check_class_cast(object, [ComItextpdfTextPdfPRStream class]);
    if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_XREF_())) isEqual:[stm getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()]])
#line 1342
    return NO;
  }
  else
#line 1345
  return NO;
  if (trailer_ == nil) {
    trailer_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [trailer_ putAllWithComItextpdfTextPdfPdfDictionary:stm];
  }
  [stm setLengthWithInt:[((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([((ComItextpdfTextPdfPRStream *) nil_chk(stm)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_()], [ComItextpdfTextPdfPdfNumber class])))) intValue]];
  jint size = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([stm getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIZE_()], [ComItextpdfTextPdfPdfNumber class])))) intValue];
  ComItextpdfTextPdfPdfArray *index;
  ComItextpdfTextPdfPdfObject *obj = [stm getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INDEX_()];
  if (obj == nil) {
    index = [[ComItextpdfTextPdfPdfArray alloc] init];
    [index addWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ 0, size } count:2]];
  }
  else
#line 1359
  index = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
  ComItextpdfTextPdfPdfArray *w = (ComItextpdfTextPdfPdfArray *) check_class_cast([stm getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_W_()], [ComItextpdfTextPdfPdfArray class]);
  jlong prev = -1;
  obj = [stm getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PREV_()];
  if (obj != nil)
#line 1364
  prev = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) longValue];
  
#line 1369
  [self ensureXrefSizeWithInt:size * 2];
  if (objStmMark_ == nil && !partial_)
#line 1371
  objStmMark_ = [[JavaUtilHashMap alloc] init];
  if (objStmToOffset_ == nil && partial_)
#line 1373
  objStmToOffset_ = [[ComItextpdfTextPdfLongHashtable alloc] init];
  IOSByteArray *b = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:stm withComItextpdfTextPdfRandomAccessFileOrArray:[tokens_ getFile]];
  jint bptr = 0;
  IOSIntArray *wc = [IOSIntArray arrayWithLength:3];
  for (jint k = 0; k < 3; ++k)
#line 1378
  *IOSIntArray_GetRef(wc, k) = [((ComItextpdfTextPdfPdfNumber *) nil_chk([((ComItextpdfTextPdfPdfArray *) nil_chk(w)) getAsNumberWithInt:k])) intValue];
  for (jint idx = 0; idx < [((ComItextpdfTextPdfPdfArray *) nil_chk(index)) size]; idx += 2) {
    jint start = [((ComItextpdfTextPdfPdfNumber *) nil_chk([index getAsNumberWithInt:idx])) intValue];
    jint length = [((ComItextpdfTextPdfPdfNumber *) nil_chk([index getAsNumberWithInt:idx + 1])) intValue];
    [self ensureXrefSizeWithInt:(start + length) * 2];
    while (length-- > 0) {
      jint type = 1;
      if (IOSIntArray_Get(wc, 0) > 0) {
        type = 0;
        for (jint k = 0; k < IOSIntArray_Get(wc, 0); ++k)
#line 1388
        type = (LShift32(type, 8)) + (IOSByteArray_Get(nil_chk(b), bptr++) & (jint) 0xff);
      }
      jlong field2 = 0;
      for (jint k = 0; k < IOSIntArray_Get(wc, 1); ++k)
#line 1392
      field2 = (LShift64(field2, 8)) + (IOSByteArray_Get(nil_chk(b), bptr++) & (jint) 0xff);
      jint field3 = 0;
      for (jint k = 0; k < IOSIntArray_Get(wc, 2); ++k)
#line 1395
      field3 = (LShift32(field3, 8)) + (IOSByteArray_Get(nil_chk(b), bptr++) & (jint) 0xff);
      jint base = start * 2;
      if (IOSLongArray_Get(nil_chk(xref_), base) == 0 && IOSLongArray_Get(xref_, base + 1) == 0) {
        switch (type) {
          case 0:
          *IOSLongArray_GetRef(xref_, base) = -1;
          break;
          case 1:
          *IOSLongArray_GetRef(xref_, base) = field2;
          break;
          case 2:
          *IOSLongArray_GetRef(xref_, base) = field3;
          *IOSLongArray_GetRef(xref_, base + 1) = field2;
          if (partial_) {
            [((ComItextpdfTextPdfLongHashtable *) nil_chk(objStmToOffset_)) putWithLong:field2 withLong:0];
          }
          else {
            JavaLangInteger *on = [JavaLangInteger valueOfWithInt:(jint) field2];
            ComItextpdfTextPdfIntHashtable *seq = [((JavaUtilHashMap *) nil_chk(objStmMark_)) getWithId:on];
            if (seq == nil) {
              seq = [[ComItextpdfTextPdfIntHashtable alloc] init];
              [seq putWithInt:field3 withInt:1];
              (void) [objStmMark_ putWithId:on withId:seq];
            }
            else
#line 1420
            [seq putWithInt:field3 withInt:1];
          }
          break;
        }
      }
      ++start;
    }
  }
  thisStream *= 2;
  if (thisStream + 1 < ((IOSLongArray *) nil_chk(xref_))->size_ && IOSLongArray_Get(xref_, thisStream) == 0 && IOSLongArray_Get(xref_, thisStream + 1) == 0)
#line 1430
  *IOSLongArray_GetRef(xref_, thisStream) = -1;
  
#line 1432
  if (prev == -1)
#line 1433
  return YES;
  return [self readXRefStreamWithLong:prev];
}


#line 1437
- (void)rebuildXref {
  
#line 1438
  hybridXref_ = NO;
  newXrefType_ = NO;
  [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) seekWithLong:0];
  IOSObjectArray *xr = [IOSObjectArray arrayWithLength:1024 type:[IOSLongArray iosClass]];
  jlong top = 0;
  trailer_ = nil;
  IOSByteArray *line = [IOSByteArray arrayWithLength:64];
  for (; ; ) {
    jlong pos = [tokens_ getFilePointer];
    if (![tokens_ readLineSegmentWithByteArray:line])
#line 1448
    break;
    if (IOSByteArray_Get(line, 0) == 't') {
      if (![((NSString *) nil_chk([ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:line withNSString:nil])) hasPrefix:@"trailer"])
#line 1451
      continue;
      [tokens_ seekWithLong:pos];
      [tokens_ nextToken];
      pos = [tokens_ getFilePointer];
      @try {
        ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([self readPRObject], [ComItextpdfTextPdfPdfDictionary class]);
        if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()] != nil)
#line 1458
        trailer_ = dic;
        else
#line 1460
        [tokens_ seekWithLong:pos];
      }
      @catch (JavaLangException *e) {
        [tokens_ seekWithLong:pos];
      }
    }
    else if (IOSByteArray_Get(line, 0) >= '0' && IOSByteArray_Get(line, 0) <= '9') {
      IOSLongArray *obj = [ComItextpdfTextPdfPRTokeniser checkObjectStartWithByteArray:line];
      if (obj == nil)
#line 1469
      continue;
      jlong num = IOSLongArray_Get(nil_chk(obj), 0);
      jlong gen = IOSLongArray_Get(obj, 1);
      if (num >= xr->size_) {
        jlong newLength = num * 2;
        IOSObjectArray *xr2 = [IOSObjectArray arrayWithLength:(jint) newLength type:[IOSLongArray iosClass]];
        [JavaLangSystem arraycopyWithId:xr withInt:0 withId:xr2 withInt:0 withInt:(jint) top];
        xr = xr2;
      }
      if (num >= top)
#line 1479
      top = num + 1;
      if (IOSObjectArray_Get(xr, (jint) num) == nil || gen >= IOSLongArray_Get(nil_chk(IOSObjectArray_Get(xr, (jint) num)), 1)) {
        *IOSLongArray_GetRef(obj, 0) = pos;
        IOSObjectArray_Set(xr, (jint) num, obj);
      }
    }
  }
  if (trailer_ == nil)
#line 1487
  @throw [[ComItextpdfTextExceptionsInvalidPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"trailer.not.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  xref_ = [IOSLongArray arrayWithLength:(jint) (top * 2)];
  for (jint k = 0; k < top; ++k) {
    IOSLongArray *obj = IOSObjectArray_Get(xr, k);
    if (obj != nil)
#line 1492
    *IOSLongArray_GetRef(xref_, k * 2) = IOSLongArray_Get(obj, 0);
  }
}


#line 1496
- (ComItextpdfTextPdfPdfDictionary *)readDictionary {
  
#line 1497
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  while (YES) {
    [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) nextValidToken];
    if ([tokens_ getTokenType] == ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_END_DIC())
#line 1501
    break;
    if ([tokens_ getTokenType] != ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_NAME())
#line 1503
    [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"dictionary.key.1.is.not.a.name" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [tokens_ getStringValue] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    ComItextpdfTextPdfPdfName *name = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:[tokens_ getStringValue] withBoolean:NO];
    ComItextpdfTextPdfPdfObject *obj = [self readPRObject];
    jint type = [((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type];
    if (-type == [((ComItextpdfTextPdfPRTokeniser_TokenTypeEnum *) nil_chk(ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_END_DIC())) ordinal])
#line 1508
    [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unexpected.gt.gt" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    if (-type == [((ComItextpdfTextPdfPRTokeniser_TokenTypeEnum *) nil_chk(ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_END_ARRAY())) ordinal])
#line 1510
    [tokens_ throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unexpected.close.bracket" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    [dic putWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfObject:obj];
  }
  return dic;
}


#line 1516
- (ComItextpdfTextPdfPdfArray *)readArray {
  
#line 1517
  ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] init];
  while (YES) {
    ComItextpdfTextPdfPdfObject *obj = [self readPRObject];
    jint type = [((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type];
    if (-type == [((ComItextpdfTextPdfPRTokeniser_TokenTypeEnum *) nil_chk(ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_END_ARRAY())) ordinal])
#line 1522
    break;
    if (-type == [((ComItextpdfTextPdfPRTokeniser_TokenTypeEnum *) nil_chk(ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_END_DIC())) ordinal])
#line 1524
    [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) throwErrorWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unexpected.gt.gt" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    [array addWithComItextpdfTextPdfPdfObject:obj];
  }
  return array;
}


#line 1535
- (ComItextpdfTextPdfPdfObject *)readPRObject {
  
#line 1536
  [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) nextValidToken];
  ComItextpdfTextPdfPRTokeniser_TokenTypeEnum *type = [tokens_ getTokenType];
  {
    
#line 1581
    ComItextpdfTextPdfPdfString *str;
    
#line 1598
    jint num;
    ComItextpdfTextPdfPRIndirectReference *ref;
    
#line 1604
    NSString *sv;
    
#line 1538
    switch ([type ordinal]) {
      case ComItextpdfTextPdfPRTokeniser_TokenType_START_DIC:
      {
        
#line 1540
        ++readDepth_;
        ComItextpdfTextPdfPdfDictionary *dic = [self readDictionary];
        --readDepth_;
        jlong pos = [tokens_ getFilePointer];
        
#line 1545
        jboolean hasNext;
        do {
          hasNext = [tokens_ nextToken];
        }
        while (
#line 1548
        hasNext && [tokens_ getTokenType] == ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_COMMENT());
        
#line 1550
        if (hasNext && [((NSString *) nil_chk([tokens_ getStringValue])) isEqual:@"stream"]) {
          
#line 1552
          jint ch;
          do {
            ch = [tokens_ read];
          }
          while (
#line 1555
          ch == 32 || ch == 9 || ch == 0 || ch == 12);
          if (ch != 0x000a)
#line 1557
          ch = [tokens_ read];
          if (ch != 0x000a)
#line 1559
          [tokens_ backOnePositionWithInt:ch];
          ComItextpdfTextPdfPRStream *stream = [[ComItextpdfTextPdfPRStream alloc] initWithComItextpdfTextPdfPdfReader:self withLong:[tokens_ getFilePointer]];
          [stream putAllWithComItextpdfTextPdfPdfDictionary:dic];
          
#line 1563
          [stream setObjNumWithInt:objNum_ withInt:objGen_];
          
#line 1565
          return stream;
        }
        else {
          [tokens_ seekWithLong:pos];
          return dic;
        }
      }
      case ComItextpdfTextPdfPRTokeniser_TokenType_START_ARRAY:
      {
        
#line 1573
        ++readDepth_;
        ComItextpdfTextPdfPdfArray *arr = [self readArray];
        --readDepth_;
        return arr;
      }
      case ComItextpdfTextPdfPRTokeniser_TokenType_NUMBER:
      return [[ComItextpdfTextPdfPdfNumber alloc] initWithNSString:[tokens_ getStringValue]];
      case ComItextpdfTextPdfPRTokeniser_TokenType_STRING:
      str = [((ComItextpdfTextPdfPdfString *) [[ComItextpdfTextPdfPdfString alloc] initWithNSString:[tokens_ getStringValue] withNSString:nil]) setHexWritingWithBoolean:[tokens_ isHexString]];
      
#line 1583
      [((ComItextpdfTextPdfPdfString *) nil_chk(str)) setObjNumWithInt:objNum_ withInt:objGen_];
      if (strings_ != nil)
#line 1585
      [strings_ addWithId:str];
      
#line 1587
      return str;
      case ComItextpdfTextPdfPRTokeniser_TokenType_NAME:
      {
        
#line 1589
        ComItextpdfTextPdfPdfName *cachedName = [((id<JavaUtilMap>) nil_chk(ComItextpdfTextPdfPdfName_get_staticNames_())) getWithId:[tokens_ getStringValue]];
        if (readDepth_ > 0 && cachedName != nil) {
          return cachedName;
        }
        else {
          return [[ComItextpdfTextPdfPdfName alloc] initWithNSString:[tokens_ getStringValue] withBoolean:NO];
        }
      }
      case ComItextpdfTextPdfPRTokeniser_TokenType_REF:
      num = [tokens_ getReference];
      ref = [[ComItextpdfTextPdfPRIndirectReference alloc] initWithComItextpdfTextPdfPdfReader:self withInt:num withInt:[tokens_ getGeneration]];
      return ref;
      case ComItextpdfTextPdfPRTokeniser_TokenType_ENDOFFILE:
      @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unexpected.end.of.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      default:
      sv = [tokens_ getStringValue];
      if ([@"null" isEqual:sv]) {
        if (readDepth_ == 0) {
          return [[ComItextpdfTextPdfPdfNull alloc] init];
        }
        return ComItextpdfTextPdfPdfNull_get_PDFNULL_();
      }
      else if ([@"true" isEqual:sv]) {
        if (readDepth_ == 0) {
          return [[ComItextpdfTextPdfPdfBoolean alloc] initWithBoolean:YES];
        }
        return ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_();
      }
      else if ([@"false" isEqual:sv]) {
        if (readDepth_ == 0) {
          return [[ComItextpdfTextPdfPdfBoolean alloc] initWithBoolean:NO];
        }
        return ComItextpdfTextPdfPdfBoolean_get_PDFFALSE_();
      }
      return [[ComItextpdfTextPdfPdfLiteral alloc] initWithInt:-[((ComItextpdfTextPdfPRTokeniser_TokenTypeEnum *) nil_chk(type)) ordinal] withNSString:[tokens_ getStringValue]];
    }
  }
}


#line 1631
+ (IOSByteArray *)FlateDecodeWithByteArray:(IOSByteArray *)inArg {
  
#line 1632
  IOSByteArray *b = [ComItextpdfTextPdfPdfReader FlateDecodeWithByteArray:inArg withBoolean:YES];
  if (b == nil)
#line 1634
  return [ComItextpdfTextPdfPdfReader FlateDecodeWithByteArray:inArg withBoolean:NO];
  return b;
}


#line 1643
+ (IOSByteArray *)decodePredictorWithByteArray:(IOSByteArray *)inArg
               withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)dicPar {
  
#line 1644
  if (dicPar == nil || ![dicPar isDictionary])
#line 1645
  return inArg;
  ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(dicPar, [ComItextpdfTextPdfPdfDictionary class]);
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PREDICTOR_()]];
  if (obj == nil || ![obj isNumber])
#line 1649
  return inArg;
  jint predictor = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])))) intValue];
  if (predictor < 10 && predictor != 2)
#line 1652
  return inArg;
  jint width = 1;
  obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLUMNS_()]];
  if (obj != nil && [obj isNumber])
#line 1656
  width = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) intValue];
  jint colors = 1;
  obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORS_()]];
  if (obj != nil && [obj isNumber])
#line 1660
  colors = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) intValue];
  jint bpc = 8;
  obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_()]];
  if (obj != nil && [obj isNumber])
#line 1664
  bpc = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) intValue];
  JavaIoDataInputStream *dataStream = [[JavaIoDataInputStream alloc] initWithJavaIoInputStream:[[JavaIoByteArrayInputStream alloc] initWithByteArray:inArg]];
  JavaIoByteArrayOutputStream *fout = [[JavaIoByteArrayOutputStream alloc] initWithInt:((IOSByteArray *) nil_chk(inArg))->size_];
  jint bytesPerPixel = colors * bpc / 8;
  jint bytesPerRow = (colors * width * bpc + 7) / 8;
  IOSByteArray *curr = [IOSByteArray arrayWithLength:bytesPerRow];
  IOSByteArray *prior = [IOSByteArray arrayWithLength:bytesPerRow];
  if (predictor == 2) {
    if (bpc == 8) {
      jint numRows = inArg->size_ / bytesPerRow;
      for (jint row = 0; row < numRows; row++) {
        jint rowStart = row * bytesPerRow;
        for (jint col = 0 + bytesPerPixel; col < bytesPerRow; col++) {
          *IOSByteArray_GetRef(inArg, rowStart + col) = (jbyte) (IOSByteArray_Get(inArg, rowStart + col) + IOSByteArray_Get(inArg, rowStart + col - bytesPerPixel));
        }
      }
    }
    return inArg;
  }
  
#line 1684
  while (YES) {
    
#line 1686
    jint filter = 0;
    @try {
      filter = [dataStream read];
      if (filter < 0) {
        return [fout toByteArray];
      }
      [dataStream readFullyWithByteArray:curr withInt:0 withInt:bytesPerRow];
    }
    @catch (
#line 1693
    JavaLangException *e) {
      return [fout toByteArray];
    }
    
#line 1697
    switch (filter) {
      case 0:
      break;
      case 1:
      for (jint i = bytesPerPixel; i < bytesPerRow; i++) {
        *IOSByteArray_GetRef(curr, i) += IOSByteArray_Get(curr, i - bytesPerPixel);
      }
      break;
      case 2:
      for (jint i = 0; i < bytesPerRow; i++) {
        *IOSByteArray_GetRef(curr, i) += IOSByteArray_Get(prior, i);
      }
      break;
      case 3:
      for (jint i = 0; i < bytesPerPixel; i++) {
        *IOSByteArray_GetRef(curr, i) += IOSByteArray_Get(prior, i) / 2;
      }
      for (jint i = bytesPerPixel; i < bytesPerRow; i++) {
        *IOSByteArray_GetRef(curr, i) += ((IOSByteArray_Get(curr, i - bytesPerPixel) & (jint) 0xff) + (IOSByteArray_Get(prior, i) & (jint) 0xff)) / 2;
      }
      break;
      case 4:
      for (jint i = 0; i < bytesPerPixel; i++) {
        *IOSByteArray_GetRef(curr, i) += IOSByteArray_Get(prior, i);
      }
      
#line 1723
      for (jint i = bytesPerPixel; i < bytesPerRow; i++) {
        jint a = IOSByteArray_Get(curr, i - bytesPerPixel) & (jint) 0xff;
        jint b = IOSByteArray_Get(prior, i) & (jint) 0xff;
        jint c = IOSByteArray_Get(prior, i - bytesPerPixel) & (jint) 0xff;
        
#line 1728
        jint p = a + b - c;
        jint pa = [JavaLangMath absWithInt:p - a];
        jint pb = [JavaLangMath absWithInt:p - b];
        jint pc = [JavaLangMath absWithInt:p - c];
        
#line 1733
        jint ret;
        
#line 1735
        if (pa <= pb && pa <= pc) {
          ret = a;
        }
        else
#line 1737
        if (pb <= pc) {
          ret = b;
        }
        else {
          
#line 1740
          ret = c;
        }
        *IOSByteArray_GetRef(curr, i) += (jbyte) ret;
      }
      break;
      default:
      
#line 1747
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"png.filter.unknown" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    @try {
      [fout writeWithByteArray:curr];
    }
    @catch (JavaIoIOException *ioe) {
    }
    
#line 1757
    IOSByteArray *tmp = prior;
    prior = curr;
    curr = tmp;
  }
}


#line 1769
+ (IOSByteArray *)FlateDecodeWithByteArray:(IOSByteArray *)inArg
                               withBoolean:(jboolean)strict {
  
#line 1770
  JavaIoByteArrayInputStream *stream = [[JavaIoByteArrayInputStream alloc] initWithByteArray:inArg];
  JavaUtilZipInflaterInputStream *zip = [[JavaUtilZipInflaterInputStream alloc] initWithJavaIoInputStream:stream];
  JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
  IOSByteArray *b = [IOSByteArray arrayWithLength:strict ? 4092 : 1];
  @try {
    jint n;
    while ((n = [zip readWithByteArray:b]) >= 0) {
      [out writeWithByteArray:b withInt:0 withInt:n];
    }
    [zip close];
    [out close];
    return [out toByteArray];
  }
  @catch (JavaLangException *e) {
    if (strict)
#line 1785
    return nil;
    return [out toByteArray];
  }
}

+ (IOSByteArray *)ASCIIHexDecodeWithByteArray:(IOSByteArray *)inArg {
  
#line 1795
  JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
  jboolean first = YES;
  jint n1 = 0;
  for (jint k = 0; k < ((IOSByteArray *) nil_chk(inArg))->size_; ++k) {
    jint ch = IOSByteArray_Get(inArg, k) & (jint) 0xff;
    if (ch == '>')
#line 1801
    break;
    if ([ComItextpdfTextPdfPRTokeniser isWhitespaceWithInt:ch])
#line 1803
    continue;
    jint n = [ComItextpdfTextPdfPRTokeniser getHexWithInt:ch];
    if (n == -1)
#line 1806
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.character.in.asciihexdecode" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    if (first)
#line 1808
    n1 = n;
    else
#line 1810
    [out writeWithInt:(jbyte) ((LShift32(n1, 4)) + n)];
    first = !first;
  }
  if (!first)
#line 1814
  [out writeWithInt:(jbyte) (LShift32(n1, 4))];
  return [out toByteArray];
}


#line 1822
+ (IOSByteArray *)ASCII85DecodeWithByteArray:(IOSByteArray *)inArg {
  
#line 1823
  JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
  jint state = 0;
  IOSIntArray *chn = [IOSIntArray arrayWithLength:5];
  for (jint k = 0; k < ((IOSByteArray *) nil_chk(inArg))->size_; ++k) {
    jint ch = IOSByteArray_Get(inArg, k) & (jint) 0xff;
    if (ch == '~')
#line 1829
    break;
    if ([ComItextpdfTextPdfPRTokeniser isWhitespaceWithInt:ch])
#line 1831
    continue;
    if (ch == 'z' && state == 0) {
      [out writeWithInt:0];
      [out writeWithInt:0];
      [out writeWithInt:0];
      [out writeWithInt:0];
      continue;
    }
    if (ch < '!' || ch > 'u')
#line 1840
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.character.in.ascii85decode" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    *IOSIntArray_GetRef(chn, state) = ch - '!';
    ++state;
    if (state == 5) {
      state = 0;
      jint r = 0;
      for (jint j = 0; j < 5; ++j)
#line 1847
      r = r * 85 + IOSIntArray_Get(chn, j);
      [out writeWithInt:(jbyte) (RShift32(r, 24))];
      [out writeWithInt:(jbyte) (RShift32(r, 16))];
      [out writeWithInt:(jbyte) (RShift32(r, 8))];
      [out writeWithInt:(jbyte) r];
    }
  }
  jint r = 0;
  
#line 1858
  if (state == 2) {
    r = IOSIntArray_Get(chn, 0) * 85 * 85 * 85 * 85 + IOSIntArray_Get(chn, 1) * 85 * 85 * 85 + 85 * 85 * 85 + 85 * 85 + 85;
    [out writeWithInt:(jbyte) (RShift32(r, 24))];
  }
  else if (state == 3) {
    r = IOSIntArray_Get(chn, 0) * 85 * 85 * 85 * 85 + IOSIntArray_Get(chn, 1) * 85 * 85 * 85 + IOSIntArray_Get(chn, 2) * 85 * 85 + 85 * 85 + 85;
    [out writeWithInt:(jbyte) (RShift32(r, 24))];
    [out writeWithInt:(jbyte) (RShift32(r, 16))];
  }
  else if (state == 4) {
    r = IOSIntArray_Get(chn, 0) * 85 * 85 * 85 * 85 + IOSIntArray_Get(chn, 1) * 85 * 85 * 85 + IOSIntArray_Get(chn, 2) * 85 * 85 + IOSIntArray_Get(chn, 3) * 85 + 85;
    [out writeWithInt:(jbyte) (RShift32(r, 24))];
    [out writeWithInt:(jbyte) (RShift32(r, 16))];
    [out writeWithInt:(jbyte) (RShift32(r, 8))];
  }
  return [out toByteArray];
}


#line 1880
+ (IOSByteArray *)LZWDecodeWithByteArray:(IOSByteArray *)inArg {
  JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
  ComItextpdfTextPdfLZWDecoder *lzw = [[ComItextpdfTextPdfLZWDecoder alloc] init];
  [lzw decodeWithByteArray:inArg withJavaIoOutputStream:out];
  return [out toByteArray];
}


#line 1891
- (jboolean)isRebuilt {
  
#line 1892
  return self->rebuilt_;
}


#line 1899
- (ComItextpdfTextPdfPdfDictionary *)getPageNWithInt:(jint)pageNum {
  
#line 1900
  ComItextpdfTextPdfPdfDictionary *dic = [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) getPageNWithInt:pageNum];
  if (dic == nil)
#line 1902
  return nil;
  if (appendable_)
#line 1904
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) setIndRefWithComItextpdfTextPdfPRIndirectReference:[pageRefs_ getPageOrigRefWithInt:pageNum]];
  return dic;
}

- (ComItextpdfTextPdfPdfDictionary *)getPageNReleaseWithInt:(jint)pageNum {
  
#line 1913
  ComItextpdfTextPdfPdfDictionary *dic = [self getPageNWithInt:pageNum];
  [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) releasePageWithInt:pageNum];
  return dic;
}


#line 1921
- (void)releasePageWithInt:(jint)pageNum {
  
#line 1922
  [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) releasePageWithInt:pageNum];
}


#line 1928
- (void)resetReleasePage {
  
#line 1929
  [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) resetReleasePage];
}


#line 1936
- (ComItextpdfTextPdfPRIndirectReference *)getPageOrigRefWithInt:(jint)pageNum {
  
#line 1937
  return [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) getPageOrigRefWithInt:pageNum];
}


#line 1946
- (IOSByteArray *)getPageContentWithInt:(jint)pageNum
withComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)file {
  
#line 1947
  ComItextpdfTextPdfPdfDictionary *page = [self getPageNReleaseWithInt:pageNum];
  if (page == nil)
#line 1949
  return nil;
  ComItextpdfTextPdfPdfObject *contents = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()]];
  if (contents == nil)
#line 1952
  return [IOSByteArray arrayWithLength:0];
  JavaIoByteArrayOutputStream *bout = nil;
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(contents)) isStream]) {
    return [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(contents, [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfRandomAccessFileOrArray:file];
  }
  else if ([contents isArray]) {
    ComItextpdfTextPdfPdfArray *array = (ComItextpdfTextPdfPdfArray *) check_class_cast(contents, [ComItextpdfTextPdfPdfArray class]);
    bout = [[JavaIoByteArrayOutputStream alloc] init];
    for (jint k = 0; k < [array size]; ++k) {
      ComItextpdfTextPdfPdfObject *item = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[array getPdfObjectWithInt:k]];
      if (item == nil || ![item isStream])
#line 1963
      continue;
      IOSByteArray *b = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(item, [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfRandomAccessFileOrArray:file];
      [bout writeWithByteArray:b];
      if (k != [array size] - 1)
#line 1967
      [bout writeWithInt:0x000a];
    }
    return [bout toByteArray];
  }
  else
#line 1972
  return [IOSByteArray arrayWithLength:0];
}


#line 1981
+ (IOSByteArray *)getPageContentWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)page {
  
#line 1982
  if (page == nil)
#line 1983
  return nil;
  ComItextpdfTextPdfRandomAccessFileOrArray *rf = nil;
  @try {
    ComItextpdfTextPdfPdfObject *contents = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()]];
    if (contents == nil)
#line 1988
    return [IOSByteArray arrayWithLength:0];
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(contents)) isStream]) {
      if (rf == nil) {
        rf = [((ComItextpdfTextPdfPdfReader *) nil_chk([((ComItextpdfTextPdfPRStream *) check_class_cast(contents, [ComItextpdfTextPdfPRStream class])) getReader])) getSafeFile];
        [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
      }
      return [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(contents, [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfRandomAccessFileOrArray:rf];
    }
    else if ([contents isArray]) {
      ComItextpdfTextPdfPdfArray *array = (ComItextpdfTextPdfPdfArray *) check_class_cast(contents, [ComItextpdfTextPdfPdfArray class]);
      JavaIoByteArrayOutputStream *bout = [[JavaIoByteArrayOutputStream alloc] init];
      for (jint k = 0; k < [array size]; ++k) {
        ComItextpdfTextPdfPdfObject *item = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[array getPdfObjectWithInt:k]];
        if (item == nil || ![item isStream])
#line 2002
        continue;
        if (rf == nil) {
          rf = [((ComItextpdfTextPdfPdfReader *) nil_chk([((ComItextpdfTextPdfPRStream *) nil_chk(((ComItextpdfTextPdfPRStream *) check_class_cast(item, [ComItextpdfTextPdfPRStream class])))) getReader])) getSafeFile];
          [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
        }
        IOSByteArray *b = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(item, [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfRandomAccessFileOrArray:rf];
        [bout writeWithByteArray:b];
        if (k != [array size] - 1)
#line 2010
        [bout writeWithInt:0x000a];
      }
      return [bout toByteArray];
    }
    else
#line 2015
    return [IOSByteArray arrayWithLength:0];
  }
  @finally {
    @try {
      if (rf != nil)
#line 2020
      [rf close];
    }
    @catch (
#line 2021
    JavaLangException *e) {
    }
  }
}


#line 2031
- (ComItextpdfTextPdfPdfDictionary *)getPageResourcesWithInt:(jint)pageNum {
  
#line 2032
  return [self getPageResourcesWithComItextpdfTextPdfPdfDictionary:[self getPageNWithInt:pageNum]];
}


#line 2041
- (ComItextpdfTextPdfPdfDictionary *)getPageResourcesWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)pageDict {
  
#line 2042
  return [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDict)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()];
}


#line 2050
- (IOSByteArray *)getPageContentWithInt:(jint)pageNum {
  
#line 2051
  ComItextpdfTextPdfRandomAccessFileOrArray *rf = [self getSafeFile];
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    return [self getPageContentWithInt:pageNum withComItextpdfTextPdfRandomAccessFileOrArray:rf];
  }
  @finally {
    @try {
      
#line 2057
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) close];
    }
    @catch (
#line 2057
    JavaLangException *e) {
    }
  }
}


#line 2061
- (void)killXrefWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 2062
  if (obj == nil)
#line 2063
  return;
  if ([obj isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]] && ![((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect])
#line 2065
  return;
  switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type]) {
    case ComItextpdfTextPdfPdfObject_INDIRECT:
    {
      
#line 2068
      jint xr = [((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class])) getNumber];
      obj = [((JavaUtilArrayList *) nil_chk(xrefObj_)) getWithInt:xr];
      (void) [xrefObj_ setWithInt:xr withId:nil];
      freeXref_ = xr;
      [self killXrefWithComItextpdfTextPdfPdfObject:obj];
      break;
    }
    case ComItextpdfTextPdfPdfObject_ARRAY:
    {
      
#line 2076
      ComItextpdfTextPdfPdfArray *t = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
      for (jint i = 0; i < [((ComItextpdfTextPdfPdfArray *) nil_chk(t)) size]; ++i)
#line 2078
      [self killXrefWithComItextpdfTextPdfPdfObject:[t getPdfObjectWithInt:i]];
      break;
    }
    case ComItextpdfTextPdfPdfObject_STREAM:
    case ComItextpdfTextPdfPdfObject_DICTIONARY:
    {
      
#line 2083
      ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
      for (id __strong element in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getKeys])) {
        [self killXrefWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class])]];
      }
      break;
    }
  }
}


#line 2096
- (void)setPageContentWithInt:(jint)pageNum
                withByteArray:(IOSByteArray *)content {
  
#line 2097
  [self setPageContentWithInt:pageNum withByteArray:content withInt:ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION];
}


#line 2105
- (void)setPageContentWithInt:(jint)pageNum
                withByteArray:(IOSByteArray *)content
                      withInt:(jint)compressionLevel {
  
#line 2106
  ComItextpdfTextPdfPdfDictionary *page = [self getPageNWithInt:pageNum];
  if (page == nil)
#line 2108
  return;
  ComItextpdfTextPdfPdfObject *contents = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()];
  freeXref_ = -1;
  [self killXrefWithComItextpdfTextPdfPdfObject:contents];
  if (freeXref_ == -1) {
    [((JavaUtilArrayList *) nil_chk(xrefObj_)) addWithId:nil];
    freeXref_ = [xrefObj_ size] - 1;
  }
  [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPRIndirectReference alloc] initWithComItextpdfTextPdfPdfReader:self withInt:freeXref_]];
  (void) [((JavaUtilArrayList *) nil_chk(xrefObj_)) setWithInt:freeXref_ withId:[[ComItextpdfTextPdfPRStream alloc] initWithComItextpdfTextPdfPdfReader:self withByteArray:content withInt:compressionLevel]];
}


#line 2129
+ (IOSByteArray *)decodeBytesWithByteArray:(IOSByteArray *)b
       withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  
#line 2130
  return [ComItextpdfTextPdfPdfReader decodeBytesWithByteArray:b withComItextpdfTextPdfPdfDictionary:streamDictionary withJavaUtilMap:[ComItextpdfTextPdfFilterHandlers getDefaultFilterHandlers]];
}


#line 2142
+ (IOSByteArray *)decodeBytesWithByteArray:(IOSByteArray *)b
       withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary
                           withJavaUtilMap:(id<JavaUtilMap>)filterHandlers {
  
#line 2143
  ComItextpdfTextPdfPdfObject *filter = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(streamDictionary)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_()]];
  
#line 2145
  JavaUtilArrayList *filters = [[JavaUtilArrayList alloc] init];
  if (filter != nil) {
    if ([filter isName])
#line 2148
    [filters addWithId:filter];
    else if ([filter isArray])
#line 2150
    filters = [((ComItextpdfTextPdfPdfArray *) check_class_cast(filter, [ComItextpdfTextPdfPdfArray class])) getArrayList];
  }
  JavaUtilArrayList *dp = [[JavaUtilArrayList alloc] init];
  ComItextpdfTextPdfPdfObject *dpo = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[streamDictionary getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODEPARMS_()]];
  if (dpo == nil || (![dpo isDictionary] && ![dpo isArray]))
#line 2155
  dpo = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[streamDictionary getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DP_()]];
  if (dpo != nil) {
    if ([dpo isDictionary])
#line 2158
    [dp addWithId:dpo];
    else if ([dpo isArray])
#line 2160
    dp = [((ComItextpdfTextPdfPdfArray *) check_class_cast(dpo, [ComItextpdfTextPdfPdfArray class])) getArrayList];
  }
  for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(filters)) size]; ++j) {
    ComItextpdfTextPdfPdfName *filterName = (ComItextpdfTextPdfPdfName *) check_class_cast([filters getWithInt:j], [ComItextpdfTextPdfPdfName class]);
    id<ComItextpdfTextPdfFilterHandlers_FilterHandler> filterHandler = [((id<JavaUtilMap>) nil_chk(filterHandlers)) getWithId:filterName];
    if (filterHandler == nil)
#line 2166
    @throw [[ComItextpdfTextExceptionsUnsupportedPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.filter.1.is.not.supported" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ filterName } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    
#line 2168
    ComItextpdfTextPdfPdfDictionary *decodeParams;
    if (j < [((JavaUtilArrayList *) nil_chk(dp)) size]) {
      ComItextpdfTextPdfPdfObject *dpEntry = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[dp getWithInt:j]];
      if ([dpEntry isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]]) {
        decodeParams = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(dpEntry, [ComItextpdfTextPdfPdfDictionary class]);
      }
      else
#line 2173
      if (dpEntry == nil || [dpEntry isKindOfClass:[ComItextpdfTextPdfPdfNull class]]) {
        decodeParams = nil;
      }
      else {
        
#line 2176
        @throw [[ComItextpdfTextExceptionsUnsupportedPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.decode.parameter.type.1.is.not.supported" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [[dpEntry getClass] description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
    }
    else {
      decodeParams = nil;
    }
    b = [((id<ComItextpdfTextPdfFilterHandlers_FilterHandler>) nil_chk(filterHandler)) decodeWithByteArray:b withComItextpdfTextPdfPdfName:filterName withComItextpdfTextPdfPdfObject:decodeParams withComItextpdfTextPdfPdfDictionary:streamDictionary];
  }
  return b;
}


#line 2193
+ (IOSByteArray *)getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream
                 withComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)file {
  
#line 2194
  IOSByteArray *b = [ComItextpdfTextPdfPdfReader getStreamBytesRawWithComItextpdfTextPdfPRStream:stream withComItextpdfTextPdfRandomAccessFileOrArray:file];
  return [ComItextpdfTextPdfPdfReader decodeBytesWithByteArray:b withComItextpdfTextPdfPdfDictionary:stream];
}


#line 2203
+ (IOSByteArray *)getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream {
  
#line 2204
  ComItextpdfTextPdfRandomAccessFileOrArray *rf = [((ComItextpdfTextPdfPdfReader *) nil_chk([((ComItextpdfTextPdfPRStream *) nil_chk(stream)) getReader])) getSafeFile];
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    return [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:stream withComItextpdfTextPdfRandomAccessFileOrArray:rf];
  }
  @finally {
    @try {
      
#line 2210
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) close];
    }
    @catch (
#line 2210
    JavaLangException *e) {
    }
  }
}


#line 2220
+ (IOSByteArray *)getStreamBytesRawWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream
                    withComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)file {
  
#line 2221
  ComItextpdfTextPdfPdfReader *reader = [((ComItextpdfTextPdfPRStream *) nil_chk(stream)) getReader];
  IOSByteArray *b;
  if ([stream getOffset] < 0)
#line 2224
  b = [stream getBytes];
  else {
    b = [IOSByteArray arrayWithLength:[stream getLength]];
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(file)) seekWithLong:[stream getOffset]];
    [file readFullyWithByteArray:b];
    ComItextpdfTextPdfPdfEncryption *decrypt = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getDecrypt];
    if (decrypt != nil) {
      ComItextpdfTextPdfPdfObject *filter = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[stream getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_()]];
      JavaUtilArrayList *filters = [[JavaUtilArrayList alloc] init];
      if (filter != nil) {
        if ([filter isName])
#line 2235
        [filters addWithId:filter];
        else if ([filter isArray])
#line 2237
        filters = [((ComItextpdfTextPdfPdfArray *) check_class_cast(filter, [ComItextpdfTextPdfPdfArray class])) getArrayList];
      }
      jboolean skip = NO;
      for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(filters)) size]; ++k) {
        ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[filters getWithInt:k]];
        if (obj != nil && [((NSString *) nil_chk([obj description])) isEqual:@"/Crypt"]) {
          skip = YES;
          break;
        }
      }
      if (!skip) {
        [decrypt setHashKeyWithInt:[stream getObjNum] withInt:[stream getObjGen]];
        b = [decrypt decryptByteArrayWithByteArray:b];
      }
    }
  }
  return b;
}


#line 2261
+ (IOSByteArray *)getStreamBytesRawWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream {
  ComItextpdfTextPdfRandomAccessFileOrArray *rf = [((ComItextpdfTextPdfPdfReader *) nil_chk([((ComItextpdfTextPdfPRStream *) nil_chk(stream)) getReader])) getSafeFile];
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    return [ComItextpdfTextPdfPdfReader getStreamBytesRawWithComItextpdfTextPdfPRStream:stream withComItextpdfTextPdfRandomAccessFileOrArray:rf];
  }
  @finally {
    @try {
      
#line 2268
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) close];
    }
    @catch (
#line 2268
    JavaLangException *e) {
    }
  }
}


#line 2273
- (void)eliminateSharedStreams {
  
#line 2274
  if (!sharedStreams_)
#line 2275
  return;
  sharedStreams_ = NO;
  if ([((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) size] == 1)
#line 2278
  return;
  JavaUtilArrayList *newRefs = [[JavaUtilArrayList alloc] init];
  JavaUtilArrayList *newStreams = [[JavaUtilArrayList alloc] init];
  ComItextpdfTextPdfIntHashtable *visited = [[ComItextpdfTextPdfIntHashtable alloc] init];
  for (jint k = 1; k <= [pageRefs_ size]; ++k) {
    ComItextpdfTextPdfPdfDictionary *page = [pageRefs_ getPageNWithInt:k];
    if (page == nil)
#line 2285
    continue;
    ComItextpdfTextPdfPdfObject *contents = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()]];
    if (contents == nil)
#line 2288
    continue;
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(contents)) isStream]) {
      ComItextpdfTextPdfPRIndirectReference *ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([page getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()], [ComItextpdfTextPdfPRIndirectReference class]);
      if ([visited containsKeyWithInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]]) {
        
#line 2293
        [newRefs addWithId:ref];
        [newStreams addWithId:[[ComItextpdfTextPdfPRStream alloc] initWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(contents, [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfPdfDictionary:nil]];
      }
      else
#line 2297
      [visited putWithInt:[ref getNumber] withInt:1];
    }
    else if ([contents isArray]) {
      ComItextpdfTextPdfPdfArray *array = (ComItextpdfTextPdfPdfArray *) check_class_cast(contents, [ComItextpdfTextPdfPdfArray class]);
      for (jint j = 0; j < [array size]; ++j) {
        ComItextpdfTextPdfPRIndirectReference *ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([array getPdfObjectWithInt:j], [ComItextpdfTextPdfPRIndirectReference class]);
        if ([visited containsKeyWithInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]]) {
          
#line 2305
          [newRefs addWithId:ref];
          [newStreams addWithId:[[ComItextpdfTextPdfPRStream alloc] initWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:ref], [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfPdfDictionary:nil]];
        }
        else
#line 2309
        [visited putWithInt:[ref getNumber] withInt:1];
      }
    }
  }
  if ([newStreams isEmpty])
#line 2314
  return;
  for (jint k = 0; k < [newStreams size]; ++k) {
    [((JavaUtilArrayList *) nil_chk(xrefObj_)) addWithId:[newStreams getWithInt:k]];
    ComItextpdfTextPdfPRIndirectReference *ref = [newRefs getWithInt:k];
    [((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) setNumberWithInt:[xrefObj_ size] - 1 withInt:0];
  }
}


#line 2326
- (jboolean)isTampered {
  
#line 2327
  return tampered_;
}


#line 2334
- (void)setTamperedWithBoolean:(jboolean)tampered {
  
#line 2335
  self->tampered_ = tampered;
  [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) keepPages];
}


#line 2343
- (IOSByteArray *)getMetadata {
  
#line 2344
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_METADATA_()]];
  if (!([obj isKindOfClass:[ComItextpdfTextPdfPRStream class]]))
#line 2346
  return nil;
  ComItextpdfTextPdfRandomAccessFileOrArray *rf = [self getSafeFile];
  IOSByteArray *b = nil;
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    b = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(obj, [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfRandomAccessFileOrArray:rf];
  }
  @finally {
    @try {
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 2361
  return b;
}

- (jlong)getLastXref {
  
#line 2369
  return lastXref_;
}


#line 2376
- (jint)getXrefSize {
  
#line 2377
  return [((JavaUtilArrayList *) nil_chk(xrefObj_)) size];
}


#line 2384
- (jlong)getEofPos {
  
#line 2385
  return eofPos_;
}


#line 2393
- (jchar)getPdfVersion {
  
#line 2394
  return pdfVersion_;
}


#line 2401
- (jboolean)isEncrypted {
  
#line 2402
  return encrypted_;
}


#line 2410
- (jint)getPermissions {
  
#line 2411
  return pValue_;
}


#line 2418
- (jboolean)is128Key {
  
#line 2419
  return rValue_ == 3;
}


#line 2426
- (ComItextpdfTextPdfPdfDictionary *)getTrailer {
  
#line 2427
  return trailer_;
}


#line 2430
- (ComItextpdfTextPdfPdfEncryption *)getDecrypt {
  
#line 2431
  return decrypt_;
}


#line 2434
+ (jboolean)equalsnWithByteArray:(IOSByteArray *)a1
                   withByteArray:(IOSByteArray *)a2 {
  
#line 2435
  jint length = ((IOSByteArray *) nil_chk(a2))->size_;
  for (jint k = 0; k < length; ++k) {
    if (IOSByteArray_Get(nil_chk(a1), k) != IOSByteArray_Get(a2, k))
#line 2438
    return NO;
  }
  return YES;
}


#line 2443
+ (jboolean)existsNameWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic
                            withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)value {
  
#line 2444
  ComItextpdfTextPdfPdfObject *type = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:key]];
  if (type == nil || ![type isName])
#line 2446
  return NO;
  ComItextpdfTextPdfPdfName *name = (ComItextpdfTextPdfPdfName *) check_class_cast(type, [ComItextpdfTextPdfPdfName class]);
  return [((ComItextpdfTextPdfPdfName *) nil_chk(name)) isEqual:value];
}


#line 2451
+ (NSString *)getFontNameWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic {
  
#line 2452
  if (dic == nil)
#line 2453
  return nil;
  ComItextpdfTextPdfPdfObject *type = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_()]];
  if (type == nil || ![type isName])
#line 2456
  return nil;
  return [ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfObject *) nil_chk(type)) description]];
}


#line 2460
+ (NSString *)getSubsetPrefixWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic {
  
#line 2461
  if (dic == nil)
#line 2462
  return nil;
  NSString *s = [ComItextpdfTextPdfPdfReader getFontNameWithComItextpdfTextPdfPdfDictionary:dic];
  if (s == nil)
#line 2465
  return nil;
  if (((jint) [((NSString *) nil_chk(s)) length]) < 8 || [s charAtWithInt:6] != '+')
#line 2467
  return nil;
  for (jint k = 0; k < 6; ++k) {
    jchar c = [s charAtWithInt:k];
    if (c < 'A' || c > 'Z')
#line 2471
    return nil;
  }
  return s;
}


#line 2480
- (jint)shuffleSubsetNames {
  
#line 2481
  jint total = 0;
  for (jint k = 1; k < [((JavaUtilArrayList *) nil_chk(xrefObj_)) size]; ++k) {
    ComItextpdfTextPdfPdfObject *obj = [self getPdfObjectReleaseWithInt:k];
    if (obj == nil || ![obj isDictionary])
#line 2485
    continue;
    ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
    if (![ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()])
#line 2488
    continue;
    if ([ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE1_()] ||
#line 2490
    [ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MMTYPE1_()] ||
#line 2491
    [ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRUETYPE_()]) {
      NSString *s = [ComItextpdfTextPdfPdfReader getSubsetPrefixWithComItextpdfTextPdfPdfDictionary:dic];
      if (s == nil)
#line 2494
      continue;
      NSString *ns = JreStrcat("$$", [ComItextpdfTextPdfBaseFont createSubsetPrefix], [((NSString *) nil_chk(s)) substring:7]);
      ComItextpdfTextPdfPdfName *newName = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:ns];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:newName];
      [self setXrefPartialObjectWithInt:k withComItextpdfTextPdfPdfObject:dic];
      ++total;
      ComItextpdfTextPdfPdfDictionary *fd = [dic getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()];
      if (fd == nil)
#line 2502
      continue;
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(fd)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTNAME_() withComItextpdfTextPdfPdfObject:newName];
    }
    else if ([ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE0_()]) {
      NSString *s = [ComItextpdfTextPdfPdfReader getSubsetPrefixWithComItextpdfTextPdfPdfDictionary:dic];
      ComItextpdfTextPdfPdfArray *arr = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENDANTFONTS_()];
      if (arr == nil)
#line 2509
      continue;
      if ([((ComItextpdfTextPdfPdfArray *) nil_chk(arr)) isEmpty])
#line 2511
      continue;
      ComItextpdfTextPdfPdfDictionary *desc = [arr getAsDictWithInt:0];
      NSString *sde = [ComItextpdfTextPdfPdfReader getSubsetPrefixWithComItextpdfTextPdfPdfDictionary:desc];
      if (sde == nil)
#line 2515
      continue;
      NSString *ns = [ComItextpdfTextPdfBaseFont createSubsetPrefix];
      if (s != nil)
#line 2518
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$", ns, [s substring:7])]];
      [self setXrefPartialObjectWithInt:k withComItextpdfTextPdfPdfObject:dic];
      ComItextpdfTextPdfPdfName *newName = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$", ns, [((NSString *) nil_chk(sde)) substring:7])];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(desc)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:newName];
      ++total;
      ComItextpdfTextPdfPdfDictionary *fd = [desc getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()];
      if (fd == nil)
#line 2525
      continue;
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(fd)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTNAME_() withComItextpdfTextPdfPdfObject:newName];
    }
  }
  return total;
}


#line 2535
- (jint)createFakeFontSubsets {
  
#line 2536
  jint total = 0;
  for (jint k = 1; k < [((JavaUtilArrayList *) nil_chk(xrefObj_)) size]; ++k) {
    ComItextpdfTextPdfPdfObject *obj = [self getPdfObjectReleaseWithInt:k];
    if (obj == nil || ![obj isDictionary])
#line 2540
    continue;
    ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
    if (![ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()])
#line 2543
    continue;
    if ([ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE1_()] ||
#line 2545
    [ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MMTYPE1_()] ||
#line 2546
    [ComItextpdfTextPdfPdfReader existsNameWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRUETYPE_()]) {
      NSString *s = [ComItextpdfTextPdfPdfReader getSubsetPrefixWithComItextpdfTextPdfPdfDictionary:dic];
      if (s != nil)
#line 2549
      continue;
      s = [ComItextpdfTextPdfPdfReader getFontNameWithComItextpdfTextPdfPdfDictionary:dic];
      if (s == nil)
#line 2552
      continue;
      NSString *ns = JreStrcat("$$", [ComItextpdfTextPdfBaseFont createSubsetPrefix], s);
      ComItextpdfTextPdfPdfDictionary *fd = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()]], [ComItextpdfTextPdfPdfDictionary class]);
      if (fd == nil)
#line 2556
      continue;
      if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(fd)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTFILE_()] == nil && [fd getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTFILE2_()] == nil &&
#line 2558
      [fd getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTFILE3_()] == nil)
#line 2559
      continue;
      fd = [dic getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()];
      ComItextpdfTextPdfPdfName *newName = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:ns];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:newName];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(fd)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTNAME_() withComItextpdfTextPdfPdfObject:newName];
      [self setXrefPartialObjectWithInt:k withComItextpdfTextPdfPdfObject:dic];
      ++total;
    }
  }
  return total;
}


#line 2571
+ (ComItextpdfTextPdfPdfArray *)getNameArrayWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 2572
  if (obj == nil)
#line 2573
  return nil;
  obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:obj];
  if (obj == nil)
#line 2576
  return nil;
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isArray])
#line 2578
  return (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
  else if ([obj isDictionary]) {
    ComItextpdfTextPdfPdfObject *arr2 = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()]];
    if (arr2 != nil && [arr2 isArray])
#line 2582
    return (ComItextpdfTextPdfPdfArray *) check_class_cast(arr2, [ComItextpdfTextPdfPdfArray class]);
  }
  return nil;
}


#line 2592
- (JavaUtilHashMap *)getNamedDestination {
  return [self getNamedDestinationWithBoolean:NO];
}


#line 2603
- (JavaUtilHashMap *)getNamedDestinationWithBoolean:(jboolean)keepNames {
  
#line 2604
  JavaUtilHashMap *names = [self getNamedDestinationFromNamesWithBoolean:keepNames];
  [((JavaUtilHashMap *) nil_chk(names)) putAllWithJavaUtilMap:[self getNamedDestinationFromStrings]];
  return names;
}


#line 2616
- (JavaUtilHashMap *)getNamedDestinationFromNames {
  
#line 2617
  return [[JavaUtilHashMap alloc] initWithJavaUtilMap:[self getNamedDestinationFromNamesWithBoolean:NO]];
}


#line 2627
- (JavaUtilHashMap *)getNamedDestinationFromNamesWithBoolean:(jboolean)keepNames {
  
#line 2628
  JavaUtilHashMap *names = [[JavaUtilHashMap alloc] init];
  if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESTS_()] != nil) {
    ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[catalog_ getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESTS_()]], [ComItextpdfTextPdfPdfDictionary class]);
    if (dic == nil)
#line 2632
    return names;
    id<JavaUtilSet> keys = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getKeys];
    for (ComItextpdfTextPdfPdfName * __strong key in nil_chk(keys)) {
      ComItextpdfTextPdfPdfArray *arr = [ComItextpdfTextPdfPdfReader getNameArrayWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:key]];
      if (arr == nil)
#line 2637
      continue;
      if (keepNames) {
        (void) [names putWithId:key withId:arr];
      }
      else {
        NSString *name = [ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfName *) nil_chk(key)) description]];
        (void) [names putWithId:name withId:arr];
      }
    }
  }
  return names;
}


#line 2655
- (JavaUtilHashMap *)getNamedDestinationFromStrings {
  
#line 2656
  if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_()] != nil) {
    ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[catalog_ getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_()]], [ComItextpdfTextPdfPdfDictionary class]);
    if (dic != nil) {
      dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESTS_()]], [ComItextpdfTextPdfPdfDictionary class]);
      if (dic != nil) {
        JavaUtilHashMap *names = [ComItextpdfTextPdfPdfNameTree readTreeWithComItextpdfTextPdfPdfDictionary:dic];
        for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(names)) entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
          id<JavaUtilMap_Entry> entry_ = [it next];
          ComItextpdfTextPdfPdfArray *arr = [ComItextpdfTextPdfPdfReader getNameArrayWithComItextpdfTextPdfPdfObject:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]];
          if (arr != nil)
#line 2666
          (void) [entry_ setValueWithId:arr];
          else
#line 2668
          [it remove];
        }
        return names;
      }
    }
  }
  return [[JavaUtilHashMap alloc] init];
}


#line 2680
- (void)removeFields {
  [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) resetReleasePage];
  for (jint k = 1; k <= [pageRefs_ size]; ++k) {
    ComItextpdfTextPdfPdfDictionary *page = [pageRefs_ getPageNWithInt:k];
    ComItextpdfTextPdfPdfArray *annots = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
    if (annots == nil) {
      [pageRefs_ releasePageWithInt:k];
      continue;
    }
    for (jint j = 0; j < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++j) {
      ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[annots getPdfObjectWithInt:j]];
      if (obj == nil || ![obj isDictionary])
#line 2692
      continue;
      ComItextpdfTextPdfPdfDictionary *annot = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
      if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_WIDGET_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(annot)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()]])
#line 2695
      (void) [annots removeWithInt:j--];
    }
    if ([annots isEmpty])
#line 2698
    [page removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
    else
#line 2700
    [pageRefs_ releasePageWithInt:k];
  }
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
  [pageRefs_ resetReleasePage];
}


#line 2709
- (void)removeAnnotations {
  [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) resetReleasePage];
  for (jint k = 1; k <= [pageRefs_ size]; ++k) {
    ComItextpdfTextPdfPdfDictionary *page = [pageRefs_ getPageNWithInt:k];
    if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()] == nil)
#line 2714
    [pageRefs_ releasePageWithInt:k];
    else
#line 2716
    [page removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
  }
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
  [pageRefs_ resetReleasePage];
}


#line 2727
- (JavaUtilArrayList *)getLinksWithInt:(jint)page {
  
#line 2728
  [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) resetReleasePage];
  JavaUtilArrayList *result = [[JavaUtilArrayList alloc] init];
  ComItextpdfTextPdfPdfDictionary *pageDic = [pageRefs_ getPageNWithInt:page];
  if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()] != nil) {
    ComItextpdfTextPdfPdfArray *annots = [pageDic getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
    for (jint j = 0; j < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++j) {
      ComItextpdfTextPdfPdfDictionary *annot = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[annots getPdfObjectWithInt:j]], [ComItextpdfTextPdfPdfDictionary class]);
      
#line 2736
      if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_LINK_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(annot)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()]]) {
        [result addWithId:[[ComItextpdfTextPdfPdfAnnotation_PdfImportedLink alloc] initWithComItextpdfTextPdfPdfDictionary:annot]];
      }
    }
  }
  [pageRefs_ releasePageWithInt:page];
  [pageRefs_ resetReleasePage];
  return result;
}


#line 2746
- (void)iterateBookmarksWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)outlineRef
                                    withJavaUtilHashMap:(JavaUtilHashMap *)names {
  
#line 2747
  while (outlineRef != nil) {
    [self replaceNamedDestinationWithComItextpdfTextPdfPdfObject:outlineRef withJavaUtilHashMap:names];
    ComItextpdfTextPdfPdfDictionary *outline = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:outlineRef], [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfObject *first = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_()];
    if (first != nil) {
      [self iterateBookmarksWithComItextpdfTextPdfPdfObject:first withJavaUtilHashMap:names];
    }
    outlineRef = [outline getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEXT_()];
  }
}


#line 2762
- (void)makeRemoteNamedDestinationsLocal {
  
#line 2763
  if (remoteToLocalNamedDestinations_)
#line 2764
  return;
  remoteToLocalNamedDestinations_ = YES;
  JavaUtilHashMap *names = [self getNamedDestinationWithBoolean:YES];
  if ([((JavaUtilHashMap *) nil_chk(names)) isEmpty])
#line 2768
  return;
  for (jint k = 1; k <= [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) size]; ++k) {
    ComItextpdfTextPdfPdfDictionary *page = [pageRefs_ getPageNWithInt:k];
    ComItextpdfTextPdfPdfObject *annotsRef;
    ComItextpdfTextPdfPdfArray *annots = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:annotsRef = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()]], [ComItextpdfTextPdfPdfArray class]);
    jint annotIdx = lastXrefPartial_;
    [self releaseLastXrefPartial];
    if (annots == nil) {
      [pageRefs_ releasePageWithInt:k];
      continue;
    }
    jboolean commitAnnots = NO;
    for (jint an = 0; an < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++an) {
      ComItextpdfTextPdfPdfObject *objRef = [annots getPdfObjectWithInt:an];
      if ([self convertNamedDestinationWithComItextpdfTextPdfPdfObject:objRef withJavaUtilHashMap:names] && ![((ComItextpdfTextPdfPdfObject *) nil_chk(objRef)) isIndirect])
#line 2783
      commitAnnots = YES;
    }
    if (commitAnnots)
#line 2786
    [self setXrefPartialObjectWithInt:annotIdx withComItextpdfTextPdfPdfObject:annots];
    if (!commitAnnots || [((ComItextpdfTextPdfPdfObject *) nil_chk(annotsRef)) isIndirect])
#line 2788
    [pageRefs_ releasePageWithInt:k];
  }
}

- (jboolean)convertNamedDestinationWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj
                                               withJavaUtilHashMap:(JavaUtilHashMap *)names {
  
#line 2800
  obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj];
  jint objIdx = lastXrefPartial_;
  [self releaseLastXrefPartial];
  if (obj != nil && [obj isDictionary]) {
    ComItextpdfTextPdfPdfObject *ob2 = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_()]];
    if (ob2 != nil) {
      jint obj2Idx = lastXrefPartial_;
      [self releaseLastXrefPartial];
      ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(ob2, [ComItextpdfTextPdfPdfDictionary class]);
      ComItextpdfTextPdfPdfName *type = (ComItextpdfTextPdfPdfName *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()]], [ComItextpdfTextPdfPdfName class]);
      if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_GOTOR_())) isEqual:type]) {
        ComItextpdfTextPdfPdfObject *ob3 = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()]];
        id name = nil;
        if (ob3 != nil) {
          if ([ob3 isName])
#line 2815
          name = ob3;
          else if ([ob3 isString])
#line 2817
          name = [ob3 description];
          ComItextpdfTextPdfPdfArray *dest = (ComItextpdfTextPdfPdfArray *) check_class_cast([((JavaUtilHashMap *) nil_chk(names)) getWithId:name], [ComItextpdfTextPdfPdfArray class]);
          if (dest != nil) {
            [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()];
            [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEWWINDOW_()];
            [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_GOTO_()];
            [self setXrefPartialObjectWithInt:obj2Idx withComItextpdfTextPdfPdfObject:ob2];
            [self setXrefPartialObjectWithInt:objIdx withComItextpdfTextPdfPdfObject:obj];
            return YES;
          }
        }
      }
    }
  }
  return NO;
}


#line 2835
- (void)consolidateNamedDestinations {
  
#line 2836
  if (consolidateNamedDestinations__)
#line 2837
  return;
  consolidateNamedDestinations__ = YES;
  JavaUtilHashMap *names = [self getNamedDestinationWithBoolean:YES];
  if ([((JavaUtilHashMap *) nil_chk(names)) isEmpty])
#line 2841
  return;
  for (jint k = 1; k <= [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) size]; ++k) {
    ComItextpdfTextPdfPdfDictionary *page = [pageRefs_ getPageNWithInt:k];
    ComItextpdfTextPdfPdfObject *annotsRef;
    ComItextpdfTextPdfPdfArray *annots = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:annotsRef = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()]], [ComItextpdfTextPdfPdfArray class]);
    jint annotIdx = lastXrefPartial_;
    [self releaseLastXrefPartial];
    if (annots == nil) {
      [pageRefs_ releasePageWithInt:k];
      continue;
    }
    jboolean commitAnnots = NO;
    for (jint an = 0; an < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++an) {
      ComItextpdfTextPdfPdfObject *objRef = [annots getPdfObjectWithInt:an];
      if ([self replaceNamedDestinationWithComItextpdfTextPdfPdfObject:objRef withJavaUtilHashMap:names] && ![((ComItextpdfTextPdfPdfObject *) nil_chk(objRef)) isIndirect])
#line 2856
      commitAnnots = YES;
    }
    if (commitAnnots)
#line 2859
    [self setXrefPartialObjectWithInt:annotIdx withComItextpdfTextPdfPdfObject:annots];
    if (!commitAnnots || [((ComItextpdfTextPdfPdfObject *) nil_chk(annotsRef)) isIndirect])
#line 2861
    [pageRefs_ releasePageWithInt:k];
  }
  ComItextpdfTextPdfPdfDictionary *outlines = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTLINES_()]], [ComItextpdfTextPdfPdfDictionary class]);
  if (outlines == nil)
#line 2865
  return;
  [self iterateBookmarksWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(outlines)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_()] withJavaUtilHashMap:names];
}


#line 2869
- (jboolean)replaceNamedDestinationWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj
                                               withJavaUtilHashMap:(JavaUtilHashMap *)names {
  
#line 2870
  obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj];
  jint objIdx = lastXrefPartial_;
  [self releaseLastXrefPartial];
  if (obj != nil && [obj isDictionary]) {
    ComItextpdfTextPdfPdfObject *ob2 = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEST_()]];
    id name = nil;
    if (ob2 != nil) {
      if ([ob2 isName])
#line 2878
      name = ob2;
      else if ([ob2 isString])
#line 2880
      name = [ob2 description];
      ComItextpdfTextPdfPdfArray *dest = (ComItextpdfTextPdfPdfArray *) check_class_cast([((JavaUtilHashMap *) nil_chk(names)) getWithId:name], [ComItextpdfTextPdfPdfArray class]);
      if (dest != nil) {
        [((ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEST_() withComItextpdfTextPdfPdfObject:dest];
        [self setXrefPartialObjectWithInt:objIdx withComItextpdfTextPdfPdfObject:obj];
        return YES;
      }
    }
    else if ((ob2 = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_()]]) != nil) {
      jint obj2Idx = lastXrefPartial_;
      [self releaseLastXrefPartial];
      ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(ob2, [ComItextpdfTextPdfPdfDictionary class]);
      ComItextpdfTextPdfPdfName *type = (ComItextpdfTextPdfPdfName *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()]], [ComItextpdfTextPdfPdfName class]);
      if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_GOTO_())) isEqual:type]) {
        ComItextpdfTextPdfPdfObject *ob3 = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()]];
        if (ob3 != nil) {
          if ([ob3 isName])
#line 2897
          name = ob3;
          else if ([ob3 isString])
#line 2899
          name = [ob3 description];
        }
        ComItextpdfTextPdfPdfArray *dest = (ComItextpdfTextPdfPdfArray *) check_class_cast([((JavaUtilHashMap *) nil_chk(names)) getWithId:name], [ComItextpdfTextPdfPdfArray class]);
        if (dest != nil) {
          [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_() withComItextpdfTextPdfPdfObject:dest];
          [self setXrefPartialObjectWithInt:obj2Idx withComItextpdfTextPdfPdfObject:ob2];
          [self setXrefPartialObjectWithInt:objIdx withComItextpdfTextPdfPdfObject:obj];
          return YES;
        }
      }
    }
  }
  return NO;
}


#line 2914
+ (ComItextpdfTextPdfPdfDictionary *)duplicatePdfDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)original
                                                           withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)copy_
                                                               withComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)newReader {
  
#line 2915
  if (copy_ == nil)
#line 2916
  copy_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  for (id __strong element in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(original)) getKeys])) {
    ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(copy_)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfReader duplicatePdfObjectWithComItextpdfTextPdfPdfObject:[original getWithComItextpdfTextPdfPdfName:key] withComItextpdfTextPdfPdfReader:newReader]];
  }
  return copy_;
}


#line 2924
+ (ComItextpdfTextPdfPdfObject *)duplicatePdfObjectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)original
                                                   withComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)newReader {
  
#line 2925
  if (original == nil)
#line 2926
  return nil;
  switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(original)) type]) {
    case ComItextpdfTextPdfPdfObject_DICTIONARY:
    {
      
#line 2929
      return [ComItextpdfTextPdfPdfReader duplicatePdfDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(original, [ComItextpdfTextPdfPdfDictionary class]) withComItextpdfTextPdfPdfDictionary:nil withComItextpdfTextPdfPdfReader:newReader];
    }
    case ComItextpdfTextPdfPdfObject_STREAM:
    {
      
#line 2932
      ComItextpdfTextPdfPRStream *org = (ComItextpdfTextPdfPRStream *) check_class_cast(original, [ComItextpdfTextPdfPRStream class]);
      ComItextpdfTextPdfPRStream *stream = [[ComItextpdfTextPdfPRStream alloc] initWithComItextpdfTextPdfPRStream:org withComItextpdfTextPdfPdfDictionary:nil withComItextpdfTextPdfPdfReader:newReader];
      (void) [ComItextpdfTextPdfPdfReader duplicatePdfDictionaryWithComItextpdfTextPdfPdfDictionary:org withComItextpdfTextPdfPdfDictionary:stream withComItextpdfTextPdfPdfReader:newReader];
      return stream;
    }
    case ComItextpdfTextPdfPdfObject_ARRAY:
    {
      
#line 2938
      ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] init];
      for (id<JavaUtilIterator> it = [((ComItextpdfTextPdfPdfArray *) check_class_cast(original, [ComItextpdfTextPdfPdfArray class])) listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        [arr addWithComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfReader duplicatePdfObjectWithComItextpdfTextPdfPdfObject:[it next] withComItextpdfTextPdfPdfReader:newReader]];
      }
      return arr;
    }
    case ComItextpdfTextPdfPdfObject_INDIRECT:
    {
      
#line 2945
      ComItextpdfTextPdfPRIndirectReference *org = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(original, [ComItextpdfTextPdfPRIndirectReference class]);
      return [[ComItextpdfTextPdfPRIndirectReference alloc] initWithComItextpdfTextPdfPdfReader:newReader withInt:[org getNumber] withInt:[org getGeneration]];
    }
    default:
    return original;
  }
}


#line 2956
- (void)close {
  
#line 2957
  @try {
    [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokens_)) close];
  }
  @catch (JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 2966
- (void)removeUnusedNodeWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj
                                       withBooleanArray:(IOSBooleanArray *)hits {
  JavaUtilStack *state = [[JavaUtilStack alloc] init];
  (void) [state pushWithId:obj];
  while (![state empty]) {
    id current = [state pop];
    if (current == nil)
#line 2972
    continue;
    JavaUtilArrayList *ar = nil;
    ComItextpdfTextPdfPdfDictionary *dic = nil;
    IOSObjectArray *keys = nil;
    IOSObjectArray *objs = nil;
    jint idx = 0;
    if ([current isKindOfClass:[ComItextpdfTextPdfPdfObject class]]) {
      obj = (ComItextpdfTextPdfPdfObject *) check_class_cast(current, [ComItextpdfTextPdfPdfObject class]);
      {
        
#line 2991
        ComItextpdfTextPdfPRIndirectReference *ref;
        jint num;
        
#line 2980
        switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type]) {
          case ComItextpdfTextPdfPdfObject_DICTIONARY:
          case ComItextpdfTextPdfPdfObject_STREAM:
          dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
          keys = [IOSObjectArray arrayWithLength:[dic size] type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfName class]]];
          (void) [((id<JavaUtilSet>) nil_chk([dic getKeys])) toArrayWithNSObjectArray:keys];
          break;
          case ComItextpdfTextPdfPdfObject_ARRAY:
          ar = [((ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class])) getArrayList];
          break;
          case ComItextpdfTextPdfPdfObject_INDIRECT:
          ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class]);
          num = [ref getNumber];
          if (!IOSBooleanArray_Get(nil_chk(hits), num)) {
            *IOSBooleanArray_GetRef(hits, num) = YES;
            (void) [state pushWithId:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:ref]];
          }
          continue;
          default:
          continue;
        }
      }
    }
    else {
      
#line 3003
      objs = (IOSObjectArray *) check_class_cast(current, [IOSObjectArray class]);
      if ([IOSObjectArray_Get(nil_chk(objs), 0) isKindOfClass:[JavaUtilArrayList class]]) {
        ar = (JavaUtilArrayList *) check_class_cast(IOSObjectArray_Get(objs, 0), [JavaUtilArrayList class]);
        idx = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(objs, 1), [JavaLangInteger class])))) intValue];
      }
      else {
        keys = (IOSObjectArray *) check_class_cast(IOSObjectArray_Get(objs, 0), [IOSObjectArray class]);
        dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(IOSObjectArray_Get(objs, 1), [ComItextpdfTextPdfPdfDictionary class]);
        idx = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(objs, 2), [JavaLangInteger class])))) intValue];
      }
    }
    if (ar != nil) {
      for (jint k = idx; k < [ar size]; ++k) {
        ComItextpdfTextPdfPdfObject *v = [ar getWithInt:k];
        if ([((ComItextpdfTextPdfPdfObject *) nil_chk(v)) isIndirect]) {
          jint num = [((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(v, [ComItextpdfTextPdfPRIndirectReference class])) getNumber];
          if (num >= [((JavaUtilArrayList *) nil_chk(xrefObj_)) size] || (!partial_ && [xrefObj_ getWithInt:num] == nil)) {
            (void) [ar setWithInt:k withId:ComItextpdfTextPdfPdfNull_get_PDFNULL_()];
            continue;
          }
        }
        if (objs == nil)
#line 3025
        (void) [state pushWithId:[IOSObjectArray arrayWithObjects:(id[]){ ar, [JavaLangInteger valueOfWithInt:k + 1] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
        else {
          IOSObjectArray_Set(objs, 1, [JavaLangInteger valueOfWithInt:k + 1]);
          (void) [state pushWithId:objs];
        }
        (void) [state pushWithId:v];
        break;
      }
    }
    else {
      for (jint k = idx; k < ((IOSObjectArray *) nil_chk(keys))->size_; ++k) {
        ComItextpdfTextPdfPdfName *key = IOSObjectArray_Get(keys, k);
        ComItextpdfTextPdfPdfObject *v = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:key];
        if ([((ComItextpdfTextPdfPdfObject *) nil_chk(v)) isIndirect]) {
          jint num = [((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(v, [ComItextpdfTextPdfPRIndirectReference class])) getNumber];
          if (num < 0 || num >= [((JavaUtilArrayList *) nil_chk(xrefObj_)) size] || (!partial_ && [xrefObj_ getWithInt:num] == nil)) {
            [dic putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfNull_get_PDFNULL_()];
            continue;
          }
        }
        if (objs == nil)
#line 3046
        (void) [state pushWithId:[IOSObjectArray arrayWithObjects:(id[]){ keys, dic, [JavaLangInteger valueOfWithInt:k + 1] } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
        else {
          IOSObjectArray_Set(objs, 2, [JavaLangInteger valueOfWithInt:k + 1]);
          (void) [state pushWithId:objs];
        }
        (void) [state pushWithId:v];
        break;
      }
    }
  }
}


#line 3062
- (jint)removeUnusedObjects {
  
#line 3063
  IOSBooleanArray *hits = [IOSBooleanArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(xrefObj_)) size]];
  [self removeUnusedNodeWithComItextpdfTextPdfPdfObject:trailer_ withBooleanArray:hits];
  jint total = 0;
  if (partial_) {
    for (jint k = 1; k < hits->size_; ++k) {
      if (!IOSBooleanArray_Get(hits, k)) {
        *IOSLongArray_GetRef(nil_chk(xref_), k * 2) = -1;
        *IOSLongArray_GetRef(xref_, k * 2 + 1) = 0;
        (void) [xrefObj_ setWithInt:k withId:nil];
        ++total;
      }
    }
  }
  else {
    for (jint k = 1; k < hits->size_; ++k) {
      if (!IOSBooleanArray_Get(hits, k)) {
        (void) [xrefObj_ setWithInt:k withId:nil];
        ++total;
      }
    }
  }
  return total;
}


#line 3090
- (ComItextpdfTextPdfAcroFields *)getAcroFields {
  
#line 3091
  return [[ComItextpdfTextPdfAcroFields alloc] initWithComItextpdfTextPdfPdfReader:self withComItextpdfTextPdfPdfWriter:nil];
}


#line 3100
- (NSString *)getJavaScriptWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)file {
  
#line 3101
  ComItextpdfTextPdfPdfDictionary *names = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_()]], [ComItextpdfTextPdfPdfDictionary class]);
  if (names == nil)
#line 3103
  return nil;
  ComItextpdfTextPdfPdfDictionary *js = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(names)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JAVASCRIPT_()]], [ComItextpdfTextPdfPdfDictionary class]);
  if (js == nil)
#line 3106
  return nil;
  JavaUtilHashMap *jscript = [ComItextpdfTextPdfPdfNameTree readTreeWithComItextpdfTextPdfPdfDictionary:js];
  IOSObjectArray *sortedNames = [IOSObjectArray arrayWithLength:[((JavaUtilHashMap *) nil_chk(jscript)) size] type:[IOSClass classWithClass:[NSString class]]];
  sortedNames = [((id<JavaUtilSet>) nil_chk([jscript keySet])) toArrayWithNSObjectArray:sortedNames];
  [JavaUtilArrays sortWithNSObjectArray:sortedNames];
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  for (jint k = 0; k < ((IOSObjectArray *) nil_chk(sortedNames))->size_; ++k) {
    ComItextpdfTextPdfPdfDictionary *j = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[jscript getWithId:IOSObjectArray_Get(sortedNames, k)]], [ComItextpdfTextPdfPdfDictionary class]);
    if (j == nil)
#line 3115
    continue;
    ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(j)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JS_()]];
    if (obj != nil) {
      if ([obj isString])
#line 3119
      (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:[((ComItextpdfTextPdfPdfString *) check_class_cast(obj, [ComItextpdfTextPdfPdfString class])) toUnicodeString]])) appendWithChar:0x000a];
      else if ([obj isStream]) {
        IOSByteArray *bytes = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(obj, [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfRandomAccessFileOrArray:file];
        if (((IOSByteArray *) nil_chk(bytes))->size_ >= 2 && IOSByteArray_Get(bytes, 0) == (jbyte) 254 && IOSByteArray_Get(bytes, 1) == (jbyte) 255)
#line 3123
        (void) [buf appendWithNSString:[ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:bytes withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
        else
#line 3125
        (void) [buf appendWithNSString:[ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:bytes withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_()]];
        (void) [buf appendWithChar:0x000a];
      }
    }
  }
  return [buf description];
}


#line 3138
- (NSString *)getJavaScript {
  
#line 3139
  ComItextpdfTextPdfRandomAccessFileOrArray *rf = [self getSafeFile];
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) reOpen];
    return [self getJavaScriptWithComItextpdfTextPdfRandomAccessFileOrArray:rf];
  }
  @finally {
    @try {
      
#line 3145
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf)) close];
    }
    @catch (
#line 3145
    JavaLangException *e) {
    }
  }
}


#line 3155
- (void)selectPagesWithNSString:(NSString *)ranges {
  
#line 3156
  [self selectPagesWithJavaUtilList:[ComItextpdfTextPdfSequenceList expandWithNSString:ranges withInt:[self getNumberOfPages]]];
}


#line 3165
- (void)selectPagesWithJavaUtilList:(id<JavaUtilList>)pagesToKeep {
  
#line 3166
  [self selectPagesWithJavaUtilList:pagesToKeep withBoolean:YES];
}


#line 3176
- (void)selectPagesWithJavaUtilList:(id<JavaUtilList>)pagesToKeep
                        withBoolean:(jboolean)removeUnused {
  
#line 3177
  [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(pageRefs_)) selectPagesWithJavaUtilList:pagesToKeep];
  if (removeUnused) [self removeUnusedObjects];
}


#line 3185
- (void)setViewerPreferencesWithInt:(jint)preferences {
  
#line 3186
  [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) setViewerPreferencesWithInt:preferences];
  [self setViewerPreferencesWithComItextpdfTextPdfInternalPdfViewerPreferencesImp:self->viewerPreferences_];
}


#line 3195
- (void)addViewerPreferenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                         withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 3196
  [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) addViewerPreferenceWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
  [self setViewerPreferencesWithComItextpdfTextPdfInternalPdfViewerPreferencesImp:self->viewerPreferences_];
}


#line 3200
- (void)setViewerPreferencesWithComItextpdfTextPdfInternalPdfViewerPreferencesImp:(ComItextpdfTextPdfInternalPdfViewerPreferencesImp *)vp {
  
#line 3201
  [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk(vp)) addToCatalogWithComItextpdfTextPdfPdfDictionary:catalog_];
}


#line 3209
- (jint)getSimpleViewerPreferences {
  
#line 3210
  return [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk([ComItextpdfTextPdfInternalPdfViewerPreferencesImp getViewerPreferencesWithComItextpdfTextPdfPdfDictionary:catalog_])) getPageLayoutAndMode];
}


#line 3217
- (jboolean)isAppendable {
  
#line 3218
  return self->appendable_;
}


#line 3225
- (void)setAppendableWithBoolean:(jboolean)appendable {
  
#line 3226
  self->appendable_ = appendable;
  if (appendable)
#line 3228
  (void) [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(trailer_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()]];
}


#line 3235
- (jboolean)isNewXrefType {
  
#line 3236
  return newXrefType_;
}


#line 3243
- (jlong)getFileLength {
  
#line 3244
  return fileLength_;
}


#line 3251
- (jboolean)isHybridXref {
  
#line 3252
  return hybridXref_;
}


#line 3592
- (ComItextpdfTextPdfPdfIndirectReference *)getCryptoRef {
  
#line 3593
  if (cryptoRef_ == nil)
#line 3594
  return nil;
  return [[ComItextpdfTextPdfPdfIndirectReference alloc] initWithInt:0 withInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(cryptoRef_)) getNumber] withInt:[cryptoRef_ getGeneration]];
}


#line 3603
- (jboolean)hasUsageRights {
  
#line 3604
  ComItextpdfTextPdfPdfDictionary *perms = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PERMS_()];
  if (perms == nil)
#line 3606
  return NO;
  return [((ComItextpdfTextPdfPdfDictionary *) nil_chk(perms)) containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_UR_()] || [perms containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_UR3_()];
}


#line 3615
- (void)removeUsageRights {
  
#line 3616
  ComItextpdfTextPdfPdfDictionary *perms = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PERMS_()];
  if (perms == nil)
#line 3618
  return;
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(perms)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_UR_()];
  [perms removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_UR3_()];
  if ([perms size] == 0)
#line 3622
  [catalog_ removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PERMS_()];
}


#line 3635
- (jint)getCertificationLevel {
  
#line 3636
  ComItextpdfTextPdfPdfDictionary *dic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PERMS_()];
  if (dic == nil)
#line 3638
  return ComItextpdfTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  dic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DOCMDP_()];
  if (dic == nil)
#line 3641
  return ComItextpdfTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  ComItextpdfTextPdfPdfArray *arr = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REFERENCE_()];
  if (arr == nil || [arr size] == 0)
#line 3644
  return ComItextpdfTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  dic = [((ComItextpdfTextPdfPdfArray *) nil_chk(arr)) getAsDictWithInt:0];
  if (dic == nil)
#line 3647
  return ComItextpdfTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  dic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANSFORMPARAMS_()];
  if (dic == nil)
#line 3650
  return ComItextpdfTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  ComItextpdfTextPdfPdfNumber *p = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_P_()];
  if (p == nil)
#line 3653
  return ComItextpdfTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
  return [((ComItextpdfTextPdfPdfNumber *) nil_chk(p)) intValue];
}


#line 3664
- (jboolean)isOpenedWithFullPermissions {
  return !encrypted_ || ownerPasswordUsed_ || ComItextpdfTextPdfPdfReader_unethicalreading_;
}


#line 3671
- (jint)getCryptoMode {
  
#line 3672
  if (decrypt_ == nil)
#line 3673
  return -1;
  else
#line 3675
  return [decrypt_ getCryptoMode];
}


#line 3681
- (jboolean)isMetadataEncrypted {
  if (decrypt_ == nil)
#line 3683
  return NO;
  else
#line 3685
  return [decrypt_ isMetadataEncrypted];
}


#line 3691
- (IOSByteArray *)computeUserPassword {
  
#line 3692
  if (!encrypted_ || !ownerPasswordUsed_) return nil;
  return [((ComItextpdfTextPdfPdfEncryption *) nil_chk(decrypt_)) computeUserPasswordWithByteArray:password_];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfReader *)other {
  [super copyAllFieldsTo:other];
  other->acroForm_ = acroForm_;
  other->acroFormParsed_ = acroFormParsed_;
  other->appendable_ = appendable_;
  other->catalog_ = catalog_;
  other->certificate_ = certificate_;
  other->certificateKey_ = certificateKey_;
  other->certificateKeyProvider_ = certificateKeyProvider_;
  other->consolidateNamedDestinations__ = consolidateNamedDestinations__;
  other->cryptoRef_ = cryptoRef_;
  other->decrypt_ = decrypt_;
  other->encrypted_ = encrypted_;
  other->encryptionError_ = encryptionError_;
  other->eofPos_ = eofPos_;
  other->fileLength_ = fileLength_;
  other->freeXref_ = freeXref_;
  other->hybridXref_ = hybridXref_;
  other->lastXref_ = lastXref_;
  other->lastXrefPartial_ = lastXrefPartial_;
  other->newXrefType_ = newXrefType_;
  other->objGen_ = objGen_;
  other->objNum_ = objNum_;
  other->objStmMark_ = objStmMark_;
  other->objStmToOffset_ = objStmToOffset_;
  other->ownerPasswordUsed_ = ownerPasswordUsed_;
  other->pValue_ = pValue_;
  other->pageRefs_ = pageRefs_;
  other->partial_ = partial_;
  other->password_ = password_;
  other->pdfVersion_ = pdfVersion_;
  other->rValue_ = rValue_;
  other->readDepth_ = readDepth_;
  other->rebuilt_ = rebuilt_;
  other->remoteToLocalNamedDestinations_ = remoteToLocalNamedDestinations_;
  other->rootPages_ = rootPages_;
  other->sharedStreams_ = sharedStreams_;
  other->strings_ = strings_;
  other->tampered_ = tampered_;
  other->tokens_ = tokens_;
  other->trailer_ = trailer_;
  other->viewerPreferences_ = viewerPreferences_;
  other->xref_ = xref_;
  other->xrefObj_ = xrefObj_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfReader class]) {
    ComItextpdfTextPdfPdfReader_LOGGER_ =
#line 101
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfReader class]]];
    ComItextpdfTextPdfPdfReader_pageInhCandidates_ = [IOSObjectArray arrayWithObjects:(id[]){ ComItextpdfTextPdfPdfName_get_MEDIABOX_(), ComItextpdfTextPdfPdfName_get_ROTATE_(), ComItextpdfTextPdfPdfName_get_RESOURCES_(), ComItextpdfTextPdfPdfName_get_CROPBOX_() } count:4 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfName class]]];
    ComItextpdfTextPdfPdfReader_endstream_ =
#line 107
    [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:@"endstream" withNSString:nil];
    ComItextpdfTextPdfPdfReader_endobj_ =
#line 108
    [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:@"endobj" withNSString:nil];
    ComItextpdfTextPdfPdfReader_COUNTER_ =
#line 160
    [ComItextpdfTextLogCounterFactory getCounterWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfReader class]]];
    ComItextpdfTextPdfPdfReader_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCounter", NULL, "Lcom.itextpdf.text.log.Counter;", 0x4, NULL },
    { "initWithComItextpdfTextIoRandomAccessSource:withBoolean:withByteArray:withJavaSecurityCertCertificate:withJavaSecurityKey:withNSString:withBoolean:", "PdfReader", NULL, 0x2, "Ljava.io.IOException;" },
    { "initWithNSString:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithNSString:withByteArray:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithNSString:withByteArray:withBoolean:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithByteArray:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithByteArray:withByteArray:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithNSString:withJavaSecurityCertCertificate:withJavaSecurityKey:withNSString:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithJavaNetURL:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithJavaNetURL:withByteArray:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithJavaIoInputStream:withByteArray:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithJavaIoInputStream:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithComItextpdfTextPdfRandomAccessFileOrArray:withByteArray:", "PdfReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithComItextpdfTextPdfPdfReader:", "PdfReader", NULL, 0x1, NULL },
    { "getOffsetTokeniserWithComItextpdfTextIoRandomAccessSource:", "getOffsetTokeniser", "Lcom.itextpdf.text.pdf.PRTokeniser;", 0xa, "Ljava.io.IOException;" },
    { "getSafeFile", NULL, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", 0x1, NULL },
    { "getPdfReaderInstanceWithComItextpdfTextPdfPdfWriter:", "getPdfReaderInstance", "Lcom.itextpdf.text.pdf.PdfReaderInstance;", 0x4, NULL },
    { "getNumberOfPages", NULL, "I", 0x1, NULL },
    { "getCatalog", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getAcroForm", NULL, "Lcom.itextpdf.text.pdf.PRAcroForm;", 0x1, NULL },
    { "getPageRotationWithInt:", "getPageRotation", "I", 0x1, NULL },
    { "getPageRotationWithComItextpdfTextPdfPdfDictionary:", "getPageRotation", "I", 0x0, NULL },
    { "getPageSizeWithRotationWithInt:", "getPageSizeWithRotation", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "getPageSizeWithRotationWithComItextpdfTextPdfPdfDictionary:", "getPageSizeWithRotation", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "getPageSizeWithInt:", "getPageSize", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "getPageSizeWithComItextpdfTextPdfPdfDictionary:", "getPageSize", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "getCropBoxWithInt:", "getCropBox", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "getBoxSizeWithInt:withNSString:", "getBoxSize", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "getInfo", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getNormalizedRectangleWithComItextpdfTextPdfPdfArray:", "getNormalizedRectangle", "Lcom.itextpdf.text.Rectangle;", 0x9, NULL },
    { "isTagged", NULL, "Z", 0x1, NULL },
    { "readPdf", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "readPdfPartial", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "equalsArrayWithByteArray:withByteArray:withInt:", "equalsArray", "Z", 0x2, NULL },
    { "readDecryptedDocObj", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:", "getPdfObjectRelease", "Lcom.itextpdf.text.pdf.PdfObject;", 0x9, NULL },
    { "getPdfObjectWithComItextpdfTextPdfPdfObject:", "getPdfObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x9, NULL },
    { "getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfObject:", "getPdfObjectRelease", "Lcom.itextpdf.text.pdf.PdfObject;", 0x9, NULL },
    { "getPdfObjectWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfObject:", "getPdfObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x9, NULL },
    { "getPdfObjectReleaseWithInt:", "getPdfObjectRelease", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "getPdfObjectWithInt:", "getPdfObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "resetLastXrefPartial", NULL, "V", 0x1, NULL },
    { "releaseLastXrefPartial", NULL, "V", 0x1, NULL },
    { "releaseLastXrefPartialWithComItextpdfTextPdfPdfObject:", "releaseLastXrefPartial", "V", 0x9, NULL },
    { "setXrefPartialObjectWithInt:withComItextpdfTextPdfPdfObject:", "setXrefPartialObject", "V", 0x2, NULL },
    { "addPdfObjectWithComItextpdfTextPdfPdfObject:", "addPdfObject", "Lcom.itextpdf.text.pdf.PRIndirectReference;", 0x1, NULL },
    { "readPages", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "readDocObjPartial", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "readSingleObjectWithInt:", "readSingleObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x4, "Ljava.io.IOException;" },
    { "readOneObjStmWithComItextpdfTextPdfPRStream:withInt:", "readOneObjStm", "Lcom.itextpdf.text.pdf.PdfObject;", 0x4, "Ljava.io.IOException;" },
    { "dumpPerc", NULL, "D", 0x1, NULL },
    { "readDocObj", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "checkPRStreamLengthWithComItextpdfTextPdfPRStream:", "checkPRStreamLength", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjStmWithComItextpdfTextPdfPRStream:withComItextpdfTextPdfIntHashtable:", "readObjStm", "V", 0x4, "Ljava.io.IOException;" },
    { "killIndirectWithComItextpdfTextPdfPdfObject:", "killIndirect", "Lcom.itextpdf.text.pdf.PdfObject;", 0x9, NULL },
    { "ensureXrefSizeWithInt:", "ensureXrefSize", "V", 0x2, NULL },
    { "readXref", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "readXrefSection", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, "Ljava.io.IOException;" },
    { "readXRefStreamWithLong:", "readXRefStream", "Z", 0x4, "Ljava.io.IOException;" },
    { "rebuildXref", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "readDictionary", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, "Ljava.io.IOException;" },
    { "readArray", NULL, "Lcom.itextpdf.text.pdf.PdfArray;", 0x4, "Ljava.io.IOException;" },
    { "readPRObject", NULL, "Lcom.itextpdf.text.pdf.PdfObject;", 0x4, "Ljava.io.IOException;" },
    { "FlateDecodeWithByteArray:", "FlateDecode", "[B", 0x9, NULL },
    { "decodePredictorWithByteArray:withComItextpdfTextPdfPdfObject:", "decodePredictor", "[B", 0x9, NULL },
    { "FlateDecodeWithByteArray:withBoolean:", "FlateDecode", "[B", 0x9, NULL },
    { "ASCIIHexDecodeWithByteArray:", "ASCIIHexDecode", "[B", 0x9, NULL },
    { "ASCII85DecodeWithByteArray:", "ASCII85Decode", "[B", 0x9, NULL },
    { "LZWDecodeWithByteArray:", "LZWDecode", "[B", 0x9, NULL },
    { "isRebuilt", NULL, "Z", 0x1, NULL },
    { "getPageNWithInt:", "getPageN", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getPageNReleaseWithInt:", "getPageNRelease", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "releasePageWithInt:", "releasePage", "V", 0x1, NULL },
    { "resetReleasePage", NULL, "V", 0x1, NULL },
    { "getPageOrigRefWithInt:", "getPageOrigRef", "Lcom.itextpdf.text.pdf.PRIndirectReference;", 0x1, NULL },
    { "getPageContentWithInt:withComItextpdfTextPdfRandomAccessFileOrArray:", "getPageContent", "[B", 0x1, "Ljava.io.IOException;" },
    { "getPageContentWithComItextpdfTextPdfPdfDictionary:", "getPageContent", "[B", 0x9, "Ljava.io.IOException;" },
    { "getPageResourcesWithInt:", "getPageResources", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getPageResourcesWithComItextpdfTextPdfPdfDictionary:", "getPageResources", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getPageContentWithInt:", "getPageContent", "[B", 0x1, "Ljava.io.IOException;" },
    { "killXrefWithComItextpdfTextPdfPdfObject:", "killXref", "V", 0x4, NULL },
    { "setPageContentWithInt:withByteArray:", "setPageContent", "V", 0x1, NULL },
    { "setPageContentWithInt:withByteArray:withInt:", "setPageContent", "V", 0x1, NULL },
    { "decodeBytesWithByteArray:withComItextpdfTextPdfPdfDictionary:", "decodeBytes", "[B", 0x9, "Ljava.io.IOException;" },
    { "decodeBytesWithByteArray:withComItextpdfTextPdfPdfDictionary:withJavaUtilMap:", "decodeBytes", "[B", 0x9, "Ljava.io.IOException;" },
    { "getStreamBytesWithComItextpdfTextPdfPRStream:withComItextpdfTextPdfRandomAccessFileOrArray:", "getStreamBytes", "[B", 0x9, "Ljava.io.IOException;" },
    { "getStreamBytesWithComItextpdfTextPdfPRStream:", "getStreamBytes", "[B", 0x9, "Ljava.io.IOException;" },
    { "getStreamBytesRawWithComItextpdfTextPdfPRStream:withComItextpdfTextPdfRandomAccessFileOrArray:", "getStreamBytesRaw", "[B", 0x9, "Ljava.io.IOException;" },
    { "getStreamBytesRawWithComItextpdfTextPdfPRStream:", "getStreamBytesRaw", "[B", 0x9, "Ljava.io.IOException;" },
    { "eliminateSharedStreams", NULL, "V", 0x1, NULL },
    { "isTampered", NULL, "Z", 0x1, NULL },
    { "setTamperedWithBoolean:", "setTampered", "V", 0x1, NULL },
    { "getMetadata", NULL, "[B", 0x1, "Ljava.io.IOException;" },
    { "getLastXref", NULL, "J", 0x1, NULL },
    { "getXrefSize", NULL, "I", 0x1, NULL },
    { "getEofPos", NULL, "J", 0x1, NULL },
    { "getPdfVersion", NULL, "C", 0x1, NULL },
    { "isEncrypted", NULL, "Z", 0x1, NULL },
    { "getPermissions", NULL, "I", 0x1, NULL },
    { "is128Key", NULL, "Z", 0x1, NULL },
    { "getTrailer", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getDecrypt", NULL, "Lcom.itextpdf.text.pdf.PdfEncryption;", 0x0, NULL },
    { "equalsnWithByteArray:withByteArray:", "equalsn", "Z", 0x8, NULL },
    { "existsNameWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfName:", "existsName", "Z", 0x8, NULL },
    { "getFontNameWithComItextpdfTextPdfPdfDictionary:", "getFontName", "Ljava.lang.String;", 0x8, NULL },
    { "getSubsetPrefixWithComItextpdfTextPdfPdfDictionary:", "getSubsetPrefix", "Ljava.lang.String;", 0x8, NULL },
    { "shuffleSubsetNames", NULL, "I", 0x1, NULL },
    { "createFakeFontSubsets", NULL, "I", 0x1, NULL },
    { "getNameArrayWithComItextpdfTextPdfPdfObject:", "getNameArray", "Lcom.itextpdf.text.pdf.PdfArray;", 0xa, NULL },
    { "getNamedDestination", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getNamedDestinationWithBoolean:", "getNamedDestination", "Ljava.util.HashMap;", 0x1, NULL },
    { "getNamedDestinationFromNames", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getNamedDestinationFromNamesWithBoolean:", "getNamedDestinationFromNames", "Ljava.util.HashMap;", 0x1, NULL },
    { "getNamedDestinationFromStrings", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "removeFields", NULL, "V", 0x1, NULL },
    { "removeAnnotations", NULL, "V", 0x1, NULL },
    { "getLinksWithInt:", "getLinks", "Ljava.util.ArrayList;", 0x1, NULL },
    { "iterateBookmarksWithComItextpdfTextPdfPdfObject:withJavaUtilHashMap:", "iterateBookmarks", "V", 0x2, NULL },
    { "makeRemoteNamedDestinationsLocal", NULL, "V", 0x1, NULL },
    { "convertNamedDestinationWithComItextpdfTextPdfPdfObject:withJavaUtilHashMap:", "convertNamedDestination", "Z", 0x2, NULL },
    { "consolidateNamedDestinations", NULL, "V", 0x1, NULL },
    { "replaceNamedDestinationWithComItextpdfTextPdfPdfObject:withJavaUtilHashMap:", "replaceNamedDestination", "Z", 0x2, NULL },
    { "duplicatePdfDictionaryWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfReader:", "duplicatePdfDictionary", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0xc, NULL },
    { "duplicatePdfObjectWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfReader:", "duplicatePdfObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0xc, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "removeUnusedNodeWithComItextpdfTextPdfPdfObject:withBooleanArray:", "removeUnusedNode", "V", 0x4, NULL },
    { "removeUnusedObjects", NULL, "I", 0x1, NULL },
    { "getAcroFields", NULL, "Lcom.itextpdf.text.pdf.AcroFields;", 0x1, NULL },
    { "getJavaScriptWithComItextpdfTextPdfRandomAccessFileOrArray:", "getJavaScript", "Ljava.lang.String;", 0x1, "Ljava.io.IOException;" },
    { "getJavaScript", NULL, "Ljava.lang.String;", 0x1, "Ljava.io.IOException;" },
    { "selectPagesWithNSString:", "selectPages", "V", 0x1, NULL },
    { "selectPagesWithJavaUtilList:", "selectPages", "V", 0x1, NULL },
    { "selectPagesWithJavaUtilList:withBoolean:", "selectPages", "V", 0x4, NULL },
    { "setViewerPreferencesWithInt:", "setViewerPreferences", "V", 0x1, NULL },
    { "addViewerPreferenceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "addViewerPreference", "V", 0x1, NULL },
    { "setViewerPreferencesWithComItextpdfTextPdfInternalPdfViewerPreferencesImp:", "setViewerPreferences", "V", 0x1, NULL },
    { "getSimpleViewerPreferences", NULL, "I", 0x1, NULL },
    { "isAppendable", NULL, "Z", 0x1, NULL },
    { "setAppendableWithBoolean:", "setAppendable", "V", 0x1, NULL },
    { "isNewXrefType", NULL, "Z", 0x1, NULL },
    { "getFileLength", NULL, "J", 0x1, NULL },
    { "isHybridXref", NULL, "Z", 0x1, NULL },
    { "getCryptoRef", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, NULL },
    { "hasUsageRights", NULL, "Z", 0x1, NULL },
    { "removeUsageRights", NULL, "V", 0x1, NULL },
    { "getCertificationLevel", NULL, "I", 0x1, NULL },
    { "isOpenedWithFullPermissions", NULL, "Z", 0x11, NULL },
    { "getCryptoMode", NULL, "I", 0x1, NULL },
    { "isMetadataEncrypted", NULL, "Z", 0x1, NULL },
    { "computeUserPassword", NULL, "[B", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "unethicalreading_", NULL, 0x9, "Z", &ComItextpdfTextPdfPdfReader_unethicalreading_,  },
    { "debugmode_", NULL, 0x9, "Z", &ComItextpdfTextPdfPdfReader_debugmode_,  },
    { "LOGGER_", NULL, 0x1a, "Lcom.itextpdf.text.log.Logger;", &ComItextpdfTextPdfPdfReader_LOGGER_,  },
    { "pageInhCandidates_", NULL, 0x18, "[Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfReader_pageInhCandidates_,  },
    { "endstream_", NULL, 0x18, "[B", &ComItextpdfTextPdfPdfReader_endstream_,  },
    { "endobj_", NULL, 0x18, "[B", &ComItextpdfTextPdfPdfReader_endobj_,  },
    { "tokens_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PRTokeniser;", NULL,  },
    { "xref_", NULL, 0x4, "[J", NULL,  },
    { "objStmMark_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "objStmToOffset_", NULL, 0x4, "Lcom.itextpdf.text.pdf.LongHashtable;", NULL,  },
    { "newXrefType_", NULL, 0x4, "Z", NULL,  },
    { "xrefObj_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "rootPages_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "trailer_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "catalog_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "pageRefs_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfReader$PageRefs;", NULL,  },
    { "acroForm_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PRAcroForm;", NULL,  },
    { "acroFormParsed_", NULL, 0x4, "Z", NULL,  },
    { "encrypted_", NULL, 0x4, "Z", NULL,  },
    { "rebuilt_", NULL, 0x4, "Z", NULL,  },
    { "freeXref_", NULL, 0x4, "I", NULL,  },
    { "tampered_", NULL, 0x4, "Z", NULL,  },
    { "lastXref_", NULL, 0x4, "J", NULL,  },
    { "eofPos_", NULL, 0x4, "J", NULL,  },
    { "pdfVersion_", NULL, 0x4, "C", NULL,  },
    { "decrypt_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfEncryption;", NULL,  },
    { "password_", NULL, 0x4, "[B", NULL,  },
    { "certificateKey_", NULL, 0x4, "Ljava.security.Key;", NULL,  },
    { "certificate_", NULL, 0x4, "Ljava.security.cert.Certificate;", NULL,  },
    { "certificateKeyProvider_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "ownerPasswordUsed_", NULL, 0x2, "Z", NULL,  },
    { "strings_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "sharedStreams_", NULL, 0x4, "Z", NULL,  },
    { "consolidateNamedDestinations__", "consolidateNamedDestinations", 0x4, "Z", NULL,  },
    { "remoteToLocalNamedDestinations_", NULL, 0x4, "Z", NULL,  },
    { "rValue_", NULL, 0x4, "I", NULL,  },
    { "pValue_", NULL, 0x4, "I", NULL,  },
    { "objNum_", NULL, 0x2, "I", NULL,  },
    { "objGen_", NULL, 0x2, "I", NULL,  },
    { "fileLength_", NULL, 0x2, "J", NULL,  },
    { "hybridXref_", NULL, 0x2, "Z", NULL,  },
    { "lastXrefPartial_", NULL, 0x2, "I", NULL,  },
    { "partial_", NULL, 0x2, "Z", NULL,  },
    { "cryptoRef_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PRIndirectReference;", NULL,  },
    { "viewerPreferences_", NULL, 0x12, "Lcom.itextpdf.text.pdf.internal.PdfViewerPreferencesImp;", NULL,  },
    { "encryptionError_", NULL, 0x2, "Z", NULL,  },
    { "appendable_", NULL, 0x2, "Z", NULL,  },
    { "COUNTER_", NULL, 0xc, "Lcom.itextpdf.text.log.Counter;", &ComItextpdfTextPdfPdfReader_COUNTER_,  },
    { "readDepth_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfReader = { "PdfReader", "com.itextpdf.text.pdf", NULL, 0x1, 150, methods, 49, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfReader;
}

@end


#line 3255
@implementation ComItextpdfTextPdfPdfReader_PageRefs


#line 3269
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  if (self = [super init]) {
    lastPageRead_ =
#line 3264
    -1;
    
#line 3270
    self->reader_ = reader;
    
#line 3271
    if (((ComItextpdfTextPdfPdfReader *) nil_chk(reader))->partial_) {
      refsp_ = [[ComItextpdfTextPdfIntHashtable alloc] init];
      ComItextpdfTextPdfPdfNumber *npages = (ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(reader->rootPages_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_()]], [ComItextpdfTextPdfPdfNumber class]);
      sizep_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk(npages)) intValue];
    }
    else {
      [self readPages];
    }
  }
  return self;
}


#line 3281
- (instancetype)initWithComItextpdfTextPdfPdfReader_PageRefs:(ComItextpdfTextPdfPdfReader_PageRefs *)other
                             withComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  if (self = [super init]) {
    lastPageRead_ =
#line 3264
    -1;
    
#line 3282
    self->reader_ = reader;
    
#line 3283
    self->sizep_ = ((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(other))->sizep_;
    
#line 3284
    if (other->refsn_ != nil) {
      refsn_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:other->refsn_];
      for (jint k = 0; k < [refsn_ size]; ++k) {
        (void) [refsn_ setWithInt:k withId:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast([ComItextpdfTextPdfPdfReader duplicatePdfObjectWithComItextpdfTextPdfPdfObject:[refsn_ getWithInt:k] withComItextpdfTextPdfPdfReader:reader], [ComItextpdfTextPdfPRIndirectReference class])];
      }
    }
    else
#line 3291
    self->refsp_ = (ComItextpdfTextPdfIntHashtable *) check_class_cast([((ComItextpdfTextPdfIntHashtable *) nil_chk(other->refsp_)) clone], [ComItextpdfTextPdfIntHashtable class]);
  }
  return self;
}


#line 3294
- (jint)size {
  
#line 3295
  if (refsn_ != nil)
#line 3296
  return [refsn_ size];
  else
#line 3298
  return sizep_;
}


#line 3301
- (void)readPages {
  
#line 3302
  if (refsn_ != nil)
#line 3303
  return;
  refsp_ = nil;
  refsn_ = [[JavaUtilArrayList alloc] init];
  pageInh_ = [[JavaUtilArrayList alloc] init];
  [self iteratePagesWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfReader *) nil_chk(reader_))->catalog_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGES_()], [ComItextpdfTextPdfPRIndirectReference class])];
  pageInh_ = nil;
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(reader_->rootPages_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[refsn_ size]]];
}


#line 3312
- (void)reReadPages {
  
#line 3313
  refsn_ = nil;
  [self readPages];
}


#line 3321
- (ComItextpdfTextPdfPdfDictionary *)getPageNWithInt:(jint)pageNum {
  
#line 3322
  ComItextpdfTextPdfPRIndirectReference *ref = [self getPageOrigRefWithInt:pageNum];
  return (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:ref], [ComItextpdfTextPdfPdfDictionary class]);
}


#line 3330
- (ComItextpdfTextPdfPdfDictionary *)getPageNReleaseWithInt:(jint)pageNum {
  
#line 3331
  ComItextpdfTextPdfPdfDictionary *page = [self getPageNWithInt:pageNum];
  [self releasePageWithInt:pageNum];
  return page;
}


#line 3340
- (ComItextpdfTextPdfPRIndirectReference *)getPageOrigRefReleaseWithInt:(jint)pageNum {
  
#line 3341
  ComItextpdfTextPdfPRIndirectReference *ref = [self getPageOrigRefWithInt:pageNum];
  [self releasePageWithInt:pageNum];
  return ref;
}


#line 3351
- (ComItextpdfTextPdfPRIndirectReference *)getPageOrigRefWithInt:(jint)pageNum {
  
#line 3352
  @try {
    --pageNum;
    if (pageNum < 0 || pageNum >= [self size])
#line 3355
    return nil;
    if (refsn_ != nil)
#line 3357
    return [refsn_ getWithInt:pageNum];
    else {
      jint n = [((ComItextpdfTextPdfIntHashtable *) nil_chk(refsp_)) getWithInt:pageNum];
      if (n == 0) {
        ComItextpdfTextPdfPRIndirectReference *ref = [self getSinglePageWithInt:pageNum];
        if (((ComItextpdfTextPdfPdfReader *) nil_chk(reader_))->lastXrefPartial_ == -1)
#line 3363
        lastPageRead_ = -1;
        else
#line 3365
        lastPageRead_ = pageNum;
        reader_->lastXrefPartial_ = -1;
        [refsp_ putWithInt:pageNum withInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]];
        if (keepPages__)
#line 3369
        lastPageRead_ = -1;
        return ref;
      }
      else {
        if (lastPageRead_ != pageNum)
#line 3374
        lastPageRead_ = -1;
        if (keepPages__)
#line 3376
        lastPageRead_ = -1;
        return [[ComItextpdfTextPdfPRIndirectReference alloc] initWithComItextpdfTextPdfPdfReader:reader_ withInt:n];
      }
    }
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 3386
- (void)keepPages {
  
#line 3387
  if (refsp_ == nil || keepPages__)
#line 3388
  return;
  keepPages__ = YES;
  [((ComItextpdfTextPdfIntHashtable *) nil_chk(refsp_)) clear];
}

- (void)releasePageWithInt:(jint)pageNum {
  
#line 3397
  if (refsp_ == nil)
#line 3398
  return;
  --pageNum;
  if (pageNum < 0 || pageNum >= [self size])
#line 3401
  return;
  if (pageNum != lastPageRead_)
#line 3403
  return;
  lastPageRead_ = -1;
  ((ComItextpdfTextPdfPdfReader *) nil_chk(reader_))->lastXrefPartial_ = [((ComItextpdfTextPdfIntHashtable *) nil_chk(refsp_)) getWithInt:pageNum];
  [reader_ releaseLastXrefPartial];
  [refsp_ removeWithInt:pageNum];
}


#line 3413
- (void)resetReleasePage {
  
#line 3414
  if (refsp_ == nil)
#line 3415
  return;
  lastPageRead_ = -1;
}


#line 3419
- (void)insertPageWithInt:(jint)pageNum
withComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  
#line 3420
  --pageNum;
  if (refsn_ != nil) {
    if (pageNum >= [refsn_ size])
#line 3423
    [refsn_ addWithId:ref];
    else
#line 3425
    [refsn_ addWithInt:pageNum withId:ref];
  }
  else {
    ++sizep_;
    lastPageRead_ = -1;
    if (pageNum >= [self size]) {
      [((ComItextpdfTextPdfIntHashtable *) nil_chk(refsp_)) putWithInt:[self size] withInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]];
    }
    else {
      ComItextpdfTextPdfIntHashtable *refs2 = [[ComItextpdfTextPdfIntHashtable alloc] initWithInt:([((ComItextpdfTextPdfIntHashtable *) nil_chk(refsp_)) size] + 1) * 2];
      for (id<JavaUtilIterator> it = [refsp_ getEntryIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        ComItextpdfTextPdfIntHashtable_Entry *entry_ = [it next];
        jint p = [((ComItextpdfTextPdfIntHashtable_Entry *) nil_chk(entry_)) getKey];
        [refs2 putWithInt:p >= pageNum ? p + 1 : p withInt:[entry_ getValue]];
      }
      [refs2 putWithInt:pageNum withInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getNumber]];
      refsp_ = refs2;
    }
  }
}


#line 3450
- (void)pushPageAttributesWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)nodePages {
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  if (![((JavaUtilArrayList *) nil_chk(pageInh_)) isEmpty]) {
    [dic putAllWithComItextpdfTextPdfPdfDictionary:[pageInh_ getWithInt:[pageInh_ size] - 1]];
  }
  for (jint k = 0; k < ((IOSObjectArray *) nil_chk(ComItextpdfTextPdfPdfReader_get_pageInhCandidates_()))->size_; ++k) {
    ComItextpdfTextPdfPdfObject *obj = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(nodePages)) getWithComItextpdfTextPdfPdfName:IOSObjectArray_Get(ComItextpdfTextPdfPdfReader_get_pageInhCandidates_(), k)];
    if (obj != nil)
#line 3458
    [dic putWithComItextpdfTextPdfPdfName:IOSObjectArray_Get(ComItextpdfTextPdfPdfReader_get_pageInhCandidates_(), k) withComItextpdfTextPdfPdfObject:obj];
  }
  [pageInh_ addWithId:dic];
}


#line 3466
- (void)popPageAttributes {
  
#line 3467
  (void) [pageInh_ removeWithInt:[((JavaUtilArrayList *) nil_chk(pageInh_)) size] - 1];
}


#line 3470
- (void)iteratePagesWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)rpage {
  
#line 3471
  ComItextpdfTextPdfPdfDictionary *page = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:rpage], [ComItextpdfTextPdfPdfDictionary class]);
  if (page == nil)
#line 3473
  return;
  ComItextpdfTextPdfPdfArray *kidsPR = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()];
  
#line 3476
  if (kidsPR == nil) {
    [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_PAGE_()];
    ComItextpdfTextPdfPdfDictionary *dic = [pageInh_ getWithInt:[((JavaUtilArrayList *) nil_chk(pageInh_)) size] - 1];
    ComItextpdfTextPdfPdfName *key;
    for (id __strong element in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getKeys])) {
      key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
      if ([page getWithComItextpdfTextPdfPdfName:key] == nil)
#line 3483
      [page putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:key]];
    }
    if ([page getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MEDIABOX_()] == nil) {
      ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 0, [((ComItextpdfTextRectangle *) nil_chk(ComItextpdfTextPageSize_get_LETTER_())) getRight], [ComItextpdfTextPageSize_get_LETTER_() getTop] } count:4]];
      [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MEDIABOX_() withComItextpdfTextPdfPdfObject:arr];
    }
    [((JavaUtilArrayList *) nil_chk(refsn_)) addWithId:rpage];
  }
  else {
    
#line 3493
    [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_PAGES_()];
    [self pushPageAttributesWithComItextpdfTextPdfPdfDictionary:page];
    for (jint k = 0; k < [kidsPR size]; ++k) {
      ComItextpdfTextPdfPdfObject *obj = [kidsPR getPdfObjectWithInt:k];
      if (![((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect]) {
        while (k < [kidsPR size])
#line 3499
        (void) [kidsPR removeWithInt:k];
        break;
      }
      [self iteratePagesWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class])];
    }
    [self popPageAttributes];
  }
}


#line 3508
- (ComItextpdfTextPdfPRIndirectReference *)getSinglePageWithInt:(jint)n {
  
#line 3509
  ComItextpdfTextPdfPdfDictionary *acc = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  ComItextpdfTextPdfPdfDictionary *top = ((ComItextpdfTextPdfPdfReader *) nil_chk(reader_))->rootPages_;
  jint base = 0;
  while (YES) {
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(ComItextpdfTextPdfPdfReader_get_pageInhCandidates_()))->size_; ++k) {
      ComItextpdfTextPdfPdfObject *obj = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(top)) getWithComItextpdfTextPdfPdfName:IOSObjectArray_Get(ComItextpdfTextPdfPdfReader_get_pageInhCandidates_(), k)];
      if (obj != nil)
#line 3516
      [acc putWithComItextpdfTextPdfPdfName:IOSObjectArray_Get(ComItextpdfTextPdfPdfReader_get_pageInhCandidates_(), k) withComItextpdfTextPdfPdfObject:obj];
    }
    ComItextpdfTextPdfPdfArray *kids = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(top)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()]], [ComItextpdfTextPdfPdfArray class]);
    for (id<JavaUtilIterator> it = [((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      ComItextpdfTextPdfPRIndirectReference *ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([it next], [ComItextpdfTextPdfPRIndirectReference class]);
      ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:ref], [ComItextpdfTextPdfPdfDictionary class]);
      jint last = reader_->lastXrefPartial_;
      ComItextpdfTextPdfPdfObject *count = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_()]];
      reader_->lastXrefPartial_ = last;
      jint acn = 1;
      if (count != nil && [count type] == ComItextpdfTextPdfPdfObject_NUMBER)
#line 3527
      acn = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(count, [ComItextpdfTextPdfPdfNumber class])) intValue];
      if (n < base + acn) {
        if (count == nil) {
          [dic mergeDifferentWithComItextpdfTextPdfPdfDictionary:acc];
          return ref;
        }
        [reader_ releaseLastXrefPartial];
        top = dic;
        break;
      }
      [reader_ releaseLastXrefPartial];
      base += acn;
    }
  }
}


#line 3543
- (void)selectPagesWithJavaUtilList:(id<JavaUtilList>)pagesToKeep {
  
#line 3544
  ComItextpdfTextPdfIntHashtable *pg = [[ComItextpdfTextPdfIntHashtable alloc] init];
  JavaUtilArrayList *finalPages = [[JavaUtilArrayList alloc] init];
  jint psize = [self size];
  for (JavaLangInteger * __strong pi in nil_chk(pagesToKeep)) {
    jint p = [((JavaLangInteger *) nil_chk(pi)) intValue];
    if (p >= 1 && p <= psize && [pg putWithInt:p withInt:1] == 0)
#line 3550
    [finalPages addWithId:pi];
  }
  if (((ComItextpdfTextPdfPdfReader *) nil_chk(reader_))->partial_) {
    for (jint k = 1; k <= psize; ++k) {
      (void) [self getPageOrigRefWithInt:k];
      [self resetReleasePage];
    }
  }
  ComItextpdfTextPdfPRIndirectReference *parent = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(reader_->catalog_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGES_()], [ComItextpdfTextPdfPRIndirectReference class]);
  ComItextpdfTextPdfPdfDictionary *topPages = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:parent], [ComItextpdfTextPdfPdfDictionary class]);
  JavaUtilArrayList *newPageRefs = [[JavaUtilArrayList alloc] initWithInt:[finalPages size]];
  ComItextpdfTextPdfPdfArray *kids = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint k = 0; k < [finalPages size]; ++k) {
    jint p = [((JavaLangInteger *) nil_chk([finalPages getWithInt:k])) intValue];
    ComItextpdfTextPdfPRIndirectReference *pref = [self getPageOrigRefWithInt:p];
    [self resetReleasePage];
    [kids addWithComItextpdfTextPdfPdfObject:pref];
    [newPageRefs addWithId:pref];
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk([self getPageNWithInt:p])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:parent];
  }
  ComItextpdfTextPdfAcroFields *af = [reader_ getAcroFields];
  jboolean removeFields = [((id<JavaUtilMap>) nil_chk([((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFields])) size] > 0;
  for (jint k = 1; k <= psize; ++k) {
    if (![pg containsKeyWithInt:k]) {
      if (removeFields)
#line 3575
      [af removeFieldsFromPageWithInt:k];
      ComItextpdfTextPdfPRIndirectReference *pref = [self getPageOrigRefWithInt:k];
      jint nref = [((ComItextpdfTextPdfPRIndirectReference *) nil_chk(pref)) getNumber];
      (void) [((JavaUtilArrayList *) nil_chk(reader_->xrefObj_)) setWithInt:nref withId:nil];
      if (reader_->partial_) {
        *IOSLongArray_GetRef(nil_chk(reader_->xref_), nref * 2) = -1;
        *IOSLongArray_GetRef(reader_->xref_, nref * 2 + 1) = 0;
      }
    }
  }
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(topPages)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[finalPages size]]];
  [topPages putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:kids];
  refsp_ = nil;
  refsn_ = newPageRefs;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfReader_PageRefs *)other {
  [super copyAllFieldsTo:other];
  other->keepPages__ = keepPages__;
  other->lastPageRead_ = lastPageRead_;
  other->pageInh_ = pageInh_;
  other->reader_ = reader_;
  other->refsn_ = refsn_;
  other->refsp_ = refsp_;
  other->sizep_ = sizep_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReader:", "PageRefs", NULL, 0x2, "Ljava.io.IOException;" },
    { "initWithComItextpdfTextPdfPdfReader_PageRefs:withComItextpdfTextPdfPdfReader:", "PageRefs", NULL, 0x0, NULL },
    { "size", NULL, "I", 0x0, NULL },
    { "readPages", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "reReadPages", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "getPageNWithInt:", "getPageN", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getPageNReleaseWithInt:", "getPageNRelease", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getPageOrigRefReleaseWithInt:", "getPageOrigRefRelease", "Lcom.itextpdf.text.pdf.PRIndirectReference;", 0x1, NULL },
    { "getPageOrigRefWithInt:", "getPageOrigRef", "Lcom.itextpdf.text.pdf.PRIndirectReference;", 0x1, NULL },
    { "keepPages", NULL, "V", 0x0, NULL },
    { "releasePageWithInt:", "releasePage", "V", 0x1, NULL },
    { "resetReleasePage", NULL, "V", 0x1, NULL },
    { "insertPageWithInt:withComItextpdfTextPdfPRIndirectReference:", "insertPage", "V", 0x0, NULL },
    { "pushPageAttributesWithComItextpdfTextPdfPdfDictionary:", "pushPageAttributes", "V", 0x2, NULL },
    { "popPageAttributes", NULL, "V", 0x2, NULL },
    { "iteratePagesWithComItextpdfTextPdfPRIndirectReference:", "iteratePages", "V", 0x2, "Ljava.io.IOException;" },
    { "getSinglePageWithInt:", "getSinglePage", "Lcom.itextpdf.text.pdf.PRIndirectReference;", 0x4, NULL },
    { "selectPagesWithJavaUtilList:", "selectPages", "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", NULL, 0x12, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "refsn_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "sizep_", NULL, 0x2, "I", NULL,  },
    { "refsp_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "lastPageRead_", NULL, 0x2, "I", NULL,  },
    { "pageInh_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "keepPages__", "keepPages", 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfReader_PageRefs = { "PageRefs", "com.itextpdf.text.pdf", "PdfReader", 0x8, 18, methods, 7, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfReader_PageRefs;
}

@end
