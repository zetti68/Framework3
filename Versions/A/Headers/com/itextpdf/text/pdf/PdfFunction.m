//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfFunction.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfFunction.java"

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfFunction.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/io/IOException.h"


#line 54
@implementation ComItextpdfTextPdfPdfFunction


#line 63
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self = [super init]) {
    
#line 64
    self->writer_ = writer;
  }
  return self;
}


#line 67
- (ComItextpdfTextPdfPdfIndirectReference *)getReference {
  
#line 68
  @try {
    if (reference_ == nil) {
      reference_ = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:dictionary_])) getIndirectReference];
    }
  }
  @catch (JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
  return reference_;
}


#line 79
+ (ComItextpdfTextPdfPdfFunction *)type0WithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                         withFloatArray:(IOSFloatArray *)domain
                                                         withFloatArray:(IOSFloatArray *)range
                                                           withIntArray:(IOSIntArray *)size
                                                                withInt:(jint)bitsPerSample
                                                                withInt:(jint)order
                                                         withFloatArray:(IOSFloatArray *)encode
                                                         withFloatArray:(IOSFloatArray *)decode
                                                          withByteArray:(IOSByteArray *)stream {
  ComItextpdfTextPdfPdfFunction *func = [[ComItextpdfTextPdfPdfFunction alloc] initWithComItextpdfTextPdfPdfWriter:writer];
  func->dictionary_ = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:stream];
  [((ComItextpdfTextPdfPdfStream *) check_class_cast(func->dictionary_, [ComItextpdfTextPdfPdfStream class])) flateCompressWithInt:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getCompressionLevel]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FUNCTIONTYPE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DOMAIN__() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:domain]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RANGE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:range]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIZE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithIntArray:size]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERSAMPLE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:bitsPerSample]];
  if (order != 1)
#line 90
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDER_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:order]];
  if (encode != nil)
#line 92
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:encode]];
  if (decode != nil)
#line 94
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:decode]];
  return func;
}


#line 98
+ (ComItextpdfTextPdfPdfFunction *)type2WithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                         withFloatArray:(IOSFloatArray *)domain
                                                         withFloatArray:(IOSFloatArray *)range
                                                         withFloatArray:(IOSFloatArray *)c0
                                                         withFloatArray:(IOSFloatArray *)c1
                                                              withFloat:(jfloat)n {
  
#line 99
  ComItextpdfTextPdfPdfFunction *func = [[ComItextpdfTextPdfPdfFunction alloc] initWithComItextpdfTextPdfPdfWriter:writer];
  func->dictionary_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FUNCTIONTYPE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:2]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DOMAIN__() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:domain]];
  if (range != nil)
#line 104
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RANGE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:range]];
  if (c0 != nil)
#line 106
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_C0_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:c0]];
  if (c1 != nil)
#line 108
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_C1_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:c1]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:n]];
  return func;
}


#line 113
+ (ComItextpdfTextPdfPdfFunction *)type3WithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                         withFloatArray:(IOSFloatArray *)domain
                                                         withFloatArray:(IOSFloatArray *)range
                                 withComItextpdfTextPdfPdfFunctionArray:(IOSObjectArray *)functions
                                                         withFloatArray:(IOSFloatArray *)bounds
                                                         withFloatArray:(IOSFloatArray *)encode {
  
#line 114
  ComItextpdfTextPdfPdfFunction *func = [[ComItextpdfTextPdfPdfFunction alloc] initWithComItextpdfTextPdfPdfWriter:writer];
  func->dictionary_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FUNCTIONTYPE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:3]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DOMAIN__() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:domain]];
  if (range != nil)
#line 119
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RANGE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:range]];
  ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint k = 0; k < ((IOSObjectArray *) nil_chk(functions))->size_; ++k)
#line 122
  [array addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfFunction *) nil_chk(IOSObjectArray_Get(functions, k))) getReference]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FUNCTIONS_() withComItextpdfTextPdfPdfObject:array];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BOUNDS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:bounds]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:encode]];
  return func;
}


#line 129
+ (ComItextpdfTextPdfPdfFunction *)type4WithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                         withFloatArray:(IOSFloatArray *)domain
                                                         withFloatArray:(IOSFloatArray *)range
                                                           withNSString:(NSString *)postscript {
  
#line 130
  IOSByteArray *b = [IOSByteArray arrayWithLength:((jint) [((NSString *) nil_chk(postscript)) length])];
  for (jint k = 0; k < b->size_; ++k)
#line 132
  *IOSByteArray_GetRef(b, k) = (jbyte) [postscript charAtWithInt:k];
  ComItextpdfTextPdfPdfFunction *func = [[ComItextpdfTextPdfPdfFunction alloc] initWithComItextpdfTextPdfPdfWriter:writer];
  func->dictionary_ = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:b];
  [((ComItextpdfTextPdfPdfStream *) check_class_cast(func->dictionary_, [ComItextpdfTextPdfPdfStream class])) flateCompressWithInt:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getCompressionLevel]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FUNCTIONTYPE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:4]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DOMAIN__() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:domain]];
  [func->dictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RANGE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:range]];
  return func;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfFunction *)other {
  [super copyAllFieldsTo:other];
  other->dictionary_ = dictionary_;
  other->reference_ = reference_;
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:", "PdfFunction", NULL, 0x4, NULL },
    { "getReference", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, NULL },
    { "type0WithComItextpdfTextPdfPdfWriter:withFloatArray:withFloatArray:withIntArray:withInt:withInt:withFloatArray:withFloatArray:withByteArray:", "type0", "Lcom.itextpdf.text.pdf.PdfFunction;", 0x9, NULL },
    { "type2WithComItextpdfTextPdfPdfWriter:withFloatArray:withFloatArray:withFloatArray:withFloatArray:withFloat:", "type2", "Lcom.itextpdf.text.pdf.PdfFunction;", 0x9, NULL },
    { "type3WithComItextpdfTextPdfPdfWriter:withFloatArray:withFloatArray:withComItextpdfTextPdfPdfFunctionArray:withFloatArray:withFloatArray:", "type3", "Lcom.itextpdf.text.pdf.PdfFunction;", 0x9, NULL },
    { "type4WithComItextpdfTextPdfPdfWriter:withFloatArray:withFloatArray:withNSString:", "type4", "Lcom.itextpdf.text.pdf.PdfFunction;", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "reference_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
    { "dictionary_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfFunction = { "PdfFunction", "com.itextpdf.text.pdf", NULL, 0x1, 6, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfFunction;
}

@end
