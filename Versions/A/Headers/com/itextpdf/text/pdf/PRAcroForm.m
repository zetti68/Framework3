//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PRAcroForm.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PRAcroForm.java"

#include "IOSClass.h"
#include "com/itextpdf/text/pdf/PRAcroForm.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/ListIterator.h"
#include "java/util/Set.h"


#line 57
@implementation ComItextpdfTextPdfPRAcroForm


#line 109
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  if (self = [super init]) {
    
#line 110
    self->reader_ = reader;
    
#line 111
    fields_ = [[JavaUtilArrayList alloc] init];
    
#line 112
    fieldByName_ = [[JavaUtilHashMap alloc] init];
    
#line 113
    stack_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}


#line 120
- (jint)size {
  
#line 121
  return [((JavaUtilArrayList *) nil_chk(fields_)) size];
}


#line 124
- (JavaUtilArrayList *)getFields {
  
#line 125
  return fields_;
}


#line 128
- (ComItextpdfTextPdfPRAcroForm_FieldInformation *)getFieldWithNSString:(NSString *)name {
  
#line 129
  return [((JavaUtilHashMap *) nil_chk(fieldByName_)) getWithId:name];
}


#line 137
- (ComItextpdfTextPdfPRIndirectReference *)getRefByNameWithNSString:(NSString *)name {
  
#line 138
  ComItextpdfTextPdfPRAcroForm_FieldInformation *fi = [((JavaUtilHashMap *) nil_chk(fieldByName_)) getWithId:name];
  if (fi == nil) return nil;
  return [((ComItextpdfTextPdfPRAcroForm_FieldInformation *) nil_chk(fi)) getRef];
}


#line 146
- (void)readAcroFormWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)root {
  
#line 147
  if (root == nil)
#line 148
  return;
  hashMap_ = ((ComItextpdfTextPdfPdfDictionary *) nil_chk(root))->hashMap_;
  [self pushAttribWithComItextpdfTextPdfPdfDictionary:root];
  ComItextpdfTextPdfPdfArray *fieldlist = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[root getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_()]], [ComItextpdfTextPdfPdfArray class]);
  if (fieldlist != nil) {
    [self iterateFieldsWithComItextpdfTextPdfPdfArray:fieldlist withComItextpdfTextPdfPRIndirectReference:nil withNSString:nil];
  }
}


#line 163
- (void)iterateFieldsWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)fieldlist
          withComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)fieldDict
                                       withNSString:(NSString *)parentPath {
  
#line 164
  for (id<JavaUtilIterator> it = [((ComItextpdfTextPdfPdfArray *) nil_chk(fieldlist)) listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComItextpdfTextPdfPRIndirectReference *ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([it next], [ComItextpdfTextPdfPRIndirectReference class]);
    ComItextpdfTextPdfPdfDictionary *dict = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:ref], [ComItextpdfTextPdfPdfDictionary class]);
    
#line 169
    ComItextpdfTextPdfPRIndirectReference *myFieldDict = fieldDict;
    NSString *fullPath = parentPath;
    ComItextpdfTextPdfPdfString *tField = (ComItextpdfTextPdfPdfString *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(dict)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_()], [ComItextpdfTextPdfPdfString class]);
    jboolean isFieldDict = tField != nil;
    
#line 174
    if (isFieldDict) {
      myFieldDict = ref;
      if (parentPath == nil) {
        fullPath = [((ComItextpdfTextPdfPdfString *) nil_chk(tField)) description];
      }
      else {
        fullPath = JreStrcat("$C$", parentPath, '.', [((ComItextpdfTextPdfPdfString *) nil_chk(tField)) description]);
      }
    }
    
#line 184
    ComItextpdfTextPdfPdfArray *kids = (ComItextpdfTextPdfPdfArray *) check_class_cast([dict getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()], [ComItextpdfTextPdfPdfArray class]);
    if (kids != nil) {
      [self pushAttribWithComItextpdfTextPdfPdfDictionary:dict];
      [self iterateFieldsWithComItextpdfTextPdfPdfArray:kids withComItextpdfTextPdfPRIndirectReference:myFieldDict withNSString:fullPath];
      (void) [stack_ removeWithInt:[((JavaUtilArrayList *) nil_chk(stack_)) size] - 1];
    }
    else {
      if (myFieldDict != nil) {
        ComItextpdfTextPdfPdfDictionary *mergedDict = [stack_ getWithInt:[((JavaUtilArrayList *) nil_chk(stack_)) size] - 1];
        if (isFieldDict)
#line 194
        mergedDict = [self mergeAttribWithComItextpdfTextPdfPdfDictionary:mergedDict withComItextpdfTextPdfPdfDictionary:dict];
        
#line 196
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(mergedDict)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:fullPath]];
        ComItextpdfTextPdfPRAcroForm_FieldInformation *fi = [[ComItextpdfTextPdfPRAcroForm_FieldInformation alloc] initWithNSString:fullPath withComItextpdfTextPdfPdfDictionary:mergedDict withComItextpdfTextPdfPRIndirectReference:myFieldDict];
        [((JavaUtilArrayList *) nil_chk(fields_)) addWithId:fi];
        (void) [((JavaUtilHashMap *) nil_chk(fieldByName_)) putWithId:fullPath withId:fi];
      }
    }
  }
}


#line 210
- (ComItextpdfTextPdfPdfDictionary *)mergeAttribWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)parent
                                                withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)child {
  
#line 211
  ComItextpdfTextPdfPdfDictionary *targ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  if (parent != nil) [targ putAllWithComItextpdfTextPdfPdfDictionary:parent];
  
#line 214
  for (id __strong element in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(child)) getKeys])) {
    ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(key)) isEqual:ComItextpdfTextPdfPdfName_get_DR_()] || [key isEqual:ComItextpdfTextPdfPdfName_get_DA_()] ||
#line 217
    [key isEqual:ComItextpdfTextPdfPdfName_get_Q_()] || [key isEqual:ComItextpdfTextPdfPdfName_get_FF_()] ||
#line 218
    [key isEqual:ComItextpdfTextPdfPdfName_get_DV_()] || [key isEqual:ComItextpdfTextPdfPdfName_get_V_()] ||
#line 219
    [key isEqual:ComItextpdfTextPdfPdfName_get_FT_()] || [key isEqual:ComItextpdfTextPdfPdfName_get_NM_()] ||
#line 220
    [key isEqual:ComItextpdfTextPdfPdfName_get_F_()]) {
      [targ putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[child getWithComItextpdfTextPdfPdfName:key]];
    }
  }
  return targ;
}


#line 229
- (void)pushAttribWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dict {
  
#line 230
  ComItextpdfTextPdfPdfDictionary *dic = nil;
  if (![((JavaUtilArrayList *) nil_chk(stack_)) isEmpty]) {
    dic = [stack_ getWithInt:[stack_ size] - 1];
  }
  dic = [self mergeAttribWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfPdfDictionary:dict];
  [stack_ addWithId:dic];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPRAcroForm *)other {
  [super copyAllFieldsTo:other];
  other->fieldByName_ = fieldByName_;
  other->fields_ = fields_;
  other->reader_ = reader_;
  other->stack_ = stack_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReader:", "PRAcroForm", NULL, 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getFields", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getFieldWithNSString:", "getField", "Lcom.itextpdf.text.pdf.PRAcroForm$FieldInformation;", 0x1, NULL },
    { "getRefByNameWithNSString:", "getRefByName", "Lcom.itextpdf.text.pdf.PRIndirectReference;", 0x1, NULL },
    { "readAcroFormWithComItextpdfTextPdfPdfDictionary:", "readAcroForm", "V", 0x1, NULL },
    { "iterateFieldsWithComItextpdfTextPdfPdfArray:withComItextpdfTextPdfPRIndirectReference:withNSString:", "iterateFields", "V", 0x4, NULL },
    { "mergeAttribWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfDictionary:", "mergeAttrib", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, NULL },
    { "pushAttribWithComItextpdfTextPdfPdfDictionary:", "pushAttrib", "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fields_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "stack_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "fieldByName_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "reader_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPRAcroForm = { "PRAcroForm", "com.itextpdf.text.pdf", NULL, 0x1, 9, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfPRAcroForm;
}

@end


#line 62
@implementation ComItextpdfTextPdfPRAcroForm_FieldInformation


#line 67
- (instancetype)initWithNSString:(NSString *)fieldName
withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)info
withComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  if (self = [super init]) {
    
#line 68
    self->fieldName_ = fieldName;
    
#line 69
    self->info_ = info;
    
#line 70
    self->ref_ = ref;
  }
  return self;
}


#line 77
- (NSString *)getWidgetName {
  
#line 78
  ComItextpdfTextPdfPdfObject *name = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(info_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NM_()];
  if (name != nil)
#line 80
  return [name description];
  return nil;
}


#line 88
- (NSString *)getName {
  
#line 89
  return fieldName_;
}


#line 92
- (ComItextpdfTextPdfPdfDictionary *)getInfo {
  
#line 93
  return info_;
}


#line 96
- (ComItextpdfTextPdfPRIndirectReference *)getRef {
  
#line 97
  return ref_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPRAcroForm_FieldInformation *)other {
  [super copyAllFieldsTo:other];
  other->fieldName_ = fieldName_;
  other->info_ = info_;
  other->ref_ = ref_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPRIndirectReference:", "FieldInformation", NULL, 0x0, NULL },
    { "getWidgetName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getInfo", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getRef", NULL, "Lcom.itextpdf.text.pdf.PRIndirectReference;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fieldName_", NULL, 0x0, "Ljava.lang.String;", NULL,  },
    { "info_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "ref_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PRIndirectReference;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPRAcroForm_FieldInformation = { "FieldInformation", "com.itextpdf.text.pdf", "PRAcroForm", 0x9, 5, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfPRAcroForm_FieldInformation;
}

@end
