//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfEncryption.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfEncryption.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/BadPasswordException.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/OutputStreamEncryption.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncryption.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfPublicKeyRecipient.h"
#include "com/itextpdf/text/pdf/PdfPublicKeySecurityHandler.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/StandardDecryption.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/security/MessageDigest.h"
#include "java/security/cert/Certificate.h"

BOOL ComItextpdfTextPdfPdfEncryption_initialized = NO;


#line 62
@implementation ComItextpdfTextPdfPdfEncryption

IOSByteArray * ComItextpdfTextPdfPdfEncryption_pad_;
IOSByteArray * ComItextpdfTextPdfPdfEncryption_salt_;
IOSByteArray * ComItextpdfTextPdfPdfEncryption_metadataPad_;
JavaSecurityMessageDigest * ComItextpdfTextPdfPdfEncryption_sMD5_;
jlong ComItextpdfTextPdfPdfEncryption_seq_;


#line 107
+ (void)setMD5WithJavaSecurityMessageDigest:(JavaSecurityMessageDigest *)pMD5 {
  
#line 108
  ComItextpdfTextPdfPdfEncryption_sMD5_ = pMD5;
}


#line 136
- (instancetype)initComItextpdfTextPdfPdfEncryption {
  if (self = [super init]) {
    mkey_ = [IOSByteArray arrayWithLength:
#line 89
    0];
    extra_ = [IOSByteArray arrayWithLength:
#line 92
    5];
    ownerKey_ = [IOSByteArray arrayWithLength:
#line 98
    32];
    userKey_ = [IOSByteArray arrayWithLength:
#line 101
    32];
    publicKeyHandler_ = nil;
    
#line 137
    if (ComItextpdfTextPdfPdfEncryption_sMD5_ == nil) {
      @try {
        ComItextpdfTextPdfPdfEncryption_sMD5_ = [JavaSecurityMessageDigest getInstanceWithNSString:@"MD5"];
      }
      @catch (
#line 140
      JavaLangException *e) {
        @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
      }
    }
    
#line 144
    publicKeyHandler_ = [[ComItextpdfTextPdfPdfPublicKeySecurityHandler alloc] init];
  }
  return self;
}

- (instancetype)init {
  return [self initComItextpdfTextPdfPdfEncryption];
}


#line 147
- (instancetype)initWithComItextpdfTextPdfPdfEncryption:(ComItextpdfTextPdfPdfEncryption *)enc {
  if (self =
#line 148
  [self initComItextpdfTextPdfPdfEncryption]) {
    
#line 149
    if (((ComItextpdfTextPdfPdfEncryption *) nil_chk(enc))->key_ != nil) {
      key_ = [enc->key_ clone];
    }
    
#line 152
    keySize_ = enc->keySize_;
    
#line 153
    mkey_ = [((IOSByteArray *) nil_chk(enc->mkey_)) clone];
    
#line 154
    ownerKey_ = [((IOSByteArray *) nil_chk(enc->ownerKey_)) clone];
    
#line 155
    userKey_ = [((IOSByteArray *) nil_chk(enc->userKey_)) clone];
    
#line 156
    permissions_ = enc->permissions_;
    
#line 157
    if (enc->documentID_ != nil) {
      documentID_ = [enc->documentID_ clone];
    }
    
#line 160
    revision_ = enc->revision_;
    
#line 161
    keyLength_ = enc->keyLength_;
    
#line 162
    encryptMetadata_ = enc->encryptMetadata_;
    
#line 163
    embeddedFilesOnly_ = enc->embeddedFilesOnly_;
    
#line 164
    publicKeyHandler_ = enc->publicKeyHandler_;
  }
  return self;
}


#line 167
- (void)setCryptoModeWithInt:(jint)mode
                     withInt:(jint)kl {
  
#line 168
  cryptoMode_ = mode;
  encryptMetadata_ = ((mode & ComItextpdfTextPdfPdfWriter_DO_NOT_ENCRYPT_METADATA) != ComItextpdfTextPdfPdfWriter_DO_NOT_ENCRYPT_METADATA);
  embeddedFilesOnly_ = ((mode & ComItextpdfTextPdfPdfWriter_EMBEDDED_FILES_ONLY) == ComItextpdfTextPdfPdfWriter_EMBEDDED_FILES_ONLY);
  mode &= ComItextpdfTextPdfPdfWriter_ENCRYPTION_MASK;
  switch (mode) {
    case ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_40:
    encryptMetadata_ = YES;
    embeddedFilesOnly_ = NO;
    keyLength_ = 40;
    revision_ = ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_40;
    break;
    case ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_128:
    embeddedFilesOnly_ = NO;
    if (kl > 0) {
      keyLength_ = kl;
    }
    else {
      
#line 184
      keyLength_ = 128;
    }
    revision_ = ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_128;
    break;
    case ComItextpdfTextPdfPdfWriter_ENCRYPTION_AES_128:
    keyLength_ = 128;
    revision_ = ComItextpdfTextPdfPdfEncryption_AES_128;
    break;
    case ComItextpdfTextPdfPdfWriter_ENCRYPTION_AES_256:
    keyLength_ = 256;
    keySize_ = 32;
    revision_ = ComItextpdfTextPdfPdfEncryption_AES_256;
    break;
    default:
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:
#line 199
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"no.valid.encryption.mode" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}


#line 203
- (jint)getCryptoMode {
  
#line 204
  return cryptoMode_;
}


#line 207
- (jboolean)isMetadataEncrypted {
  
#line 208
  return encryptMetadata_;
}


#line 211
- (jint)getPermissions {
  
#line 212
  return permissions_;
}


#line 221
- (jboolean)isEmbeddedFilesOnly {
  
#line 222
  return embeddedFilesOnly_;
}

- (IOSByteArray *)padPasswordWithByteArray:(IOSByteArray *)userPassword {
  
#line 228
  IOSByteArray *userPad = [IOSByteArray arrayWithLength:32];
  if (userPassword == nil) {
    [JavaLangSystem arraycopyWithId:ComItextpdfTextPdfPdfEncryption_pad_ withInt:0 withId:userPad withInt:0 withInt:32];
  }
  else {
    
#line 232
    [JavaLangSystem arraycopyWithId:userPassword withInt:0 withId:userPad withInt:0 withInt:[JavaLangMath minWithInt:userPassword->size_ withInt:32]];
    if (userPassword->size_ < 32) {
      [JavaLangSystem arraycopyWithId:ComItextpdfTextPdfPdfEncryption_pad_ withInt:0 withId:userPad withInt:userPassword->size_ withInt:32 - userPassword->size_];
    }
  }
  
#line 238
  return userPad;
}


#line 243
- (IOSByteArray *)computeOwnerKeyWithByteArray:(IOSByteArray *)userPad
                                 withByteArray:(IOSByteArray *)ownerPad {
  
#line 244
  IOSByteArray *ownerKey = [IOSByteArray arrayWithLength:32];
  IOSByteArray *digest = [((JavaSecurityMessageDigest *) nil_chk(ComItextpdfTextPdfPdfEncryption_sMD5_)) digestWithByteArray:ownerPad];
  if (revision_ == ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 || revision_ == ComItextpdfTextPdfPdfEncryption_AES_128) {
    IOSByteArray *mkey = [IOSByteArray arrayWithLength:keyLength_ / 8];
    
#line 249
    for (jint k = 0; k < 50; ++k) {
      [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:digest withInt:0 withInt:mkey->size_];
      [JavaLangSystem arraycopyWithId:[ComItextpdfTextPdfPdfEncryption_sMD5_ digest] withInt:0 withId:digest withInt:0 withInt:mkey->size_];
    }
    [JavaLangSystem arraycopyWithId:userPad withInt:0 withId:ownerKey withInt:0 withInt:32];
    for (jint i = 0; i < 20; ++i) {
      for (jint j = 0; j < mkey->size_; ++j) {
        *IOSByteArray_GetRef(mkey, j) = (jbyte) (IOSByteArray_Get(nil_chk(digest), j) ^ i);
      }
    }
  }
  else {
  }
  
#line 261
  return ownerKey;
}


#line 268
- (void)setupGlobalEncryptionKeyWithByteArray:(IOSByteArray *)documentID
                                withByteArray:(IOSByteArray *)userPad
                                withByteArray:(IOSByteArray *)ownerKey
                                      withInt:(jint)permissions {
  
#line 270
  self->documentID_ = documentID;
  self->ownerKey_ = ownerKey;
  self->permissions_ = permissions;
  
#line 274
  mkey_ = [IOSByteArray arrayWithLength:keyLength_ / 8];
  
#line 277
  [((JavaSecurityMessageDigest *) nil_chk(ComItextpdfTextPdfPdfEncryption_sMD5_)) reset];
  [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:userPad];
  [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:ownerKey];
  
#line 281
  IOSByteArray *ext = [IOSByteArray arrayWithLength:4];
  *IOSByteArray_GetRef(ext, 0) = (jbyte) permissions;
  *IOSByteArray_GetRef(ext, 1) = (jbyte) (RShift32(permissions, 8));
  *IOSByteArray_GetRef(ext, 2) = (jbyte) (RShift32(permissions, 16));
  *IOSByteArray_GetRef(ext, 3) = (jbyte) (RShift32(permissions, 24));
  [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:ext withInt:0 withInt:4];
  if (documentID != nil) {
    [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:documentID];
  }
  if (!encryptMetadata_) {
    [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:ComItextpdfTextPdfPdfEncryption_metadataPad_];
  }
  
#line 294
  IOSByteArray *digest = [IOSByteArray arrayWithLength:mkey_->size_];
  [JavaLangSystem arraycopyWithId:[ComItextpdfTextPdfPdfEncryption_sMD5_ digest] withInt:0 withId:digest withInt:0 withInt:mkey_->size_];
  
#line 298
  if (revision_ == ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 || revision_ == ComItextpdfTextPdfPdfEncryption_AES_128) {
    for (jint k = 0; k < 50; ++k) {
      [JavaLangSystem arraycopyWithId:[ComItextpdfTextPdfPdfEncryption_sMD5_ digestWithByteArray:digest] withInt:0 withId:digest withInt:0 withInt:mkey_->size_];
    }
  }
  
#line 304
  [JavaLangSystem arraycopyWithId:digest withInt:0 withId:mkey_ withInt:0 withInt:mkey_->size_];
}


#line 312
- (void)setupUserKey {
  
#line 313
  if (revision_ == ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 || revision_ == ComItextpdfTextPdfPdfEncryption_AES_128) {
    [((JavaSecurityMessageDigest *) nil_chk(ComItextpdfTextPdfPdfEncryption_sMD5_)) updateWithByteArray:ComItextpdfTextPdfPdfEncryption_pad_];
    IOSByteArray *digest = [ComItextpdfTextPdfPdfEncryption_sMD5_ digestWithByteArray:documentID_];
    [JavaLangSystem arraycopyWithId:digest withInt:0 withId:userKey_ withInt:0 withInt:16];
    for (jint k = 16; k < 32; ++k) {
      *IOSByteArray_GetRef(nil_chk(userKey_), k) = 0;
    }
    for (jint i = 0; i < 20; ++i) {
      for (jint j = 0; j < ((IOSByteArray *) nil_chk(mkey_))->size_; ++j) {
        *IOSByteArray_GetRef(nil_chk(digest), j) = (jbyte) (IOSByteArray_Get(mkey_, j) ^ i);
      }
    }
  }
  else {
  }
}


#line 331
- (void)setupAllKeysWithByteArray:(IOSByteArray *)userPassword
                    withByteArray:(IOSByteArray *)ownerPassword
                          withInt:(jint)permissions {
  if (ownerPassword == nil || ownerPassword->size_ == 0) {
    ownerPassword = [((JavaSecurityMessageDigest *) nil_chk(ComItextpdfTextPdfPdfEncryption_sMD5_)) digestWithByteArray:[ComItextpdfTextPdfPdfEncryption createDocumentId]];
  }
  permissions |= (revision_ == ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 || revision_ == ComItextpdfTextPdfPdfEncryption_AES_128 || revision_ == ComItextpdfTextPdfPdfEncryption_AES_256) ? (jint) 0xfffff0c0 :
#line 336
  (jint) 0xffffffc0;
  permissions &= (jint) 0xfffffffc;
  self->permissions_ = permissions;
  
#line 341
  IOSByteArray *userPad = [self padPasswordWithByteArray:userPassword];
  IOSByteArray *ownerPad = [self padPasswordWithByteArray:ownerPassword];
  
#line 344
  ownerKey_ = [self computeOwnerKeyWithByteArray:userPad withByteArray:ownerPad];
  documentID_ = [ComItextpdfTextPdfPdfEncryption createDocumentId];
  [self setupByUserPadWithByteArray:documentID_ withByteArray:userPad withByteArray:ownerKey_ withInt:permissions];
}


#line 354
- (jboolean)readKeyWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)enc
                                         withByteArray:(IOSByteArray *)password {
  
#line 355
  return NO;
}


#line 358
+ (jboolean)compareArrayWithByteArray:(IOSByteArray *)a
                        withByteArray:(IOSByteArray *)b
                              withInt:(jint)len {
  
#line 359
  for (jint k = 0; k < len; ++k) {
    if (IOSByteArray_Get(nil_chk(a), k) != IOSByteArray_Get(nil_chk(b), k)) {
      return NO;
    }
  }
  return YES;
}


#line 367
+ (IOSByteArray *)createDocumentId {
  
#line 368
  if (ComItextpdfTextPdfPdfEncryption_sMD5_ == nil) {
    @try {
      ComItextpdfTextPdfPdfEncryption_sMD5_ = [JavaSecurityMessageDigest getInstanceWithNSString:@"MD5"];
    }
    @catch (
#line 371
    JavaLangException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
  }
  jlong time = [JavaLangSystem currentTimeMillis];
  NSString *s = JreStrcat("JCJ", time, '+', (ComItextpdfTextPdfPdfEncryption_seq_++));
  return [((JavaSecurityMessageDigest *) nil_chk(ComItextpdfTextPdfPdfEncryption_sMD5_)) digestWithByteArray:[s getBytes]];
}


#line 382
- (void)setupByUserPasswordWithByteArray:(IOSByteArray *)documentID
                           withByteArray:(IOSByteArray *)userPassword
                           withByteArray:(IOSByteArray *)ownerKey
                                 withInt:(jint)permissions {
  
#line 384
  [self setupByUserPadWithByteArray:documentID withByteArray:[self padPasswordWithByteArray:userPassword] withByteArray:ownerKey withInt:permissions];
}


#line 389
- (void)setupByUserPadWithByteArray:(IOSByteArray *)documentID
                      withByteArray:(IOSByteArray *)userPad
                      withByteArray:(IOSByteArray *)ownerKey
                            withInt:(jint)permissions {
  
#line 390
  [self setupGlobalEncryptionKeyWithByteArray:documentID withByteArray:userPad withByteArray:ownerKey withInt:permissions];
  [self setupUserKey];
}


#line 396
- (void)setupByOwnerPasswordWithByteArray:(IOSByteArray *)documentID
                            withByteArray:(IOSByteArray *)ownerPassword
                            withByteArray:(IOSByteArray *)userKey
                            withByteArray:(IOSByteArray *)ownerKey
                                  withInt:(jint)permissions {
  
#line 398
  [self setupByOwnerPadWithByteArray:documentID withByteArray:[self padPasswordWithByteArray:ownerPassword] withByteArray:userKey withByteArray:ownerKey withInt:permissions];
}


#line 401
- (void)setupByOwnerPadWithByteArray:(IOSByteArray *)documentID
                       withByteArray:(IOSByteArray *)ownerPad
                       withByteArray:(IOSByteArray *)userKey
                       withByteArray:(IOSByteArray *)ownerKey
                             withInt:(jint)permissions {
  
#line 403
  IOSByteArray *userPad = [self computeOwnerKeyWithByteArray:ownerKey withByteArray:ownerPad];
  
#line 406
  [self setupGlobalEncryptionKeyWithByteArray:documentID withByteArray:userPad withByteArray:ownerKey withInt:permissions];
  
#line 408
  [self setupUserKey];
}


#line 411
- (void)setKeyWithByteArray:(IOSByteArray *)key {
  
#line 412
  self->key_ = key;
}


#line 415
- (void)setupByEncryptionKeyWithByteArray:(IOSByteArray *)key
                                  withInt:(jint)keylength {
  
#line 416
  mkey_ = [IOSByteArray arrayWithLength:keylength / 8];
  [JavaLangSystem arraycopyWithId:key withInt:0 withId:mkey_ withInt:0 withInt:mkey_->size_];
}


#line 420
- (void)setHashKeyWithInt:(jint)number
                  withInt:(jint)generation {
  
#line 421
  if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_256) {
    return;
  }
  [((JavaSecurityMessageDigest *) nil_chk(ComItextpdfTextPdfPdfEncryption_sMD5_)) reset];
  *IOSByteArray_GetRef(nil_chk(extra_), 0) = (jbyte) number;
  *IOSByteArray_GetRef(extra_, 1) = (jbyte) (RShift32(number, 8));
  *IOSByteArray_GetRef(extra_, 2) = (jbyte) (RShift32(number, 16));
  *IOSByteArray_GetRef(extra_, 3) = (jbyte) generation;
  *IOSByteArray_GetRef(extra_, 4) = (jbyte) (RShift32(generation, 8));
  [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:mkey_];
  [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:extra_];
  if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_128) {
    [ComItextpdfTextPdfPdfEncryption_sMD5_ updateWithByteArray:ComItextpdfTextPdfPdfEncryption_salt_];
  }
  key_ = [ComItextpdfTextPdfPdfEncryption_sMD5_ digest];
  keySize_ = ((IOSByteArray *) nil_chk(mkey_))->size_ + 5;
  if (keySize_ > 16) {
    keySize_ = 16;
  }
}


#line 442
+ (ComItextpdfTextPdfPdfObject *)createInfoIdWithByteArray:(IOSByteArray *)id_
                                               withBoolean:(jboolean)modified {
  
#line 443
  ComItextpdfTextPdfByteBuffer *buf = [[ComItextpdfTextPdfByteBuffer alloc] initWithInt:90];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([buf appendWithChar:'['])) appendWithChar:'<'];
  if (((IOSByteArray *) nil_chk(id_))->size_ != 16) {
    id_ = [ComItextpdfTextPdfPdfEncryption createDocumentId];
  }
  for (jint k = 0; k < 16; ++k) {
    (void) [buf appendHexWithByte:IOSByteArray_Get(nil_chk(id_), k)];
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([buf appendWithChar:'>'])) appendWithChar:'<'];
  if (modified) {
    id_ = [ComItextpdfTextPdfPdfEncryption createDocumentId];
  }
  for (jint k = 0; k < 16; ++k) {
    (void) [buf appendHexWithByte:IOSByteArray_Get(nil_chk(id_), k)];
  }
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([buf appendWithChar:'>'])) appendWithChar:']'];
  [buf close];
  return [[ComItextpdfTextPdfPdfLiteral alloc] initWithByteArray:[buf toByteArray]];
}


#line 463
- (ComItextpdfTextPdfPdfDictionary *)getEncryptionDictionary {
  
#line 464
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  
#line 466
  if ([((ComItextpdfTextPdfPdfPublicKeySecurityHandler *) nil_chk(publicKeyHandler_)) getRecipientsSize] > 0) {
    ComItextpdfTextPdfPdfArray *recipients = nil;
    
#line 469
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_PUBSEC_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_R_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:revision_]];
    
#line 472
    @try {
      recipients = [publicKeyHandler_ getEncodedRecipients];
    }
    @catch (
#line 474
    JavaLangException *f) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:f];
    }
    
#line 478
    if (revision_ == ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_40) {
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:1]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBFILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ADBE_PKCS7_S4_()];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECIPIENTS_() withComItextpdfTextPdfPdfObject:recipients];
    }
    else
#line 482
    if (revision_ == ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 && encryptMetadata_) {
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:2]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:128]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBFILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ADBE_PKCS7_S4_()];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECIPIENTS_() withComItextpdfTextPdfPdfObject:recipients];
    }
    else {
      
#line 488
      if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_256) {
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_R_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:ComItextpdfTextPdfPdfEncryption_AES_256]];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:5]];
      }
      else {
        
#line 492
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_R_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:ComItextpdfTextPdfPdfEncryption_AES_128]];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:4]];
      }
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBFILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ADBE_PKCS7_S5_()];
      
#line 497
      ComItextpdfTextPdfPdfDictionary *stdcf = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECIPIENTS_() withComItextpdfTextPdfPdfObject:recipients];
      if (!encryptMetadata_) {
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCRYPTMETADATA_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFFALSE_()];
      }
      if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_128) {
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CFM_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_AESV2_()];
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:128]];
      }
      else
#line 505
      if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_256) {
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CFM_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_AESV3_()];
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:256]];
      }
      else {
        
#line 509
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CFM_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_V2_()];
      }
      ComItextpdfTextPdfPdfDictionary *cf = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [cf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEFAULTCRYPTFILTER_() withComItextpdfTextPdfPdfObject:stdcf];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CF_() withComItextpdfTextPdfPdfObject:cf];
      if (embeddedFilesOnly_) {
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EFF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEFAULTCRYPTFILTER_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_IDENTITY_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STMF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_IDENTITY_()];
      }
      else {
        
#line 519
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEFAULTCRYPTFILTER_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STMF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEFAULTCRYPTFILTER_()];
      }
    }
    
#line 524
    JavaSecurityMessageDigest *md = nil;
    IOSByteArray *encodedRecipient = nil;
    
#line 527
    @try {
      if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_256) {
        md = [JavaSecurityMessageDigest getInstanceWithNSString:@"SHA-256"];
      }
      else {
        
#line 531
        md = [JavaSecurityMessageDigest getInstanceWithNSString:@"SHA-1"];
      }
      [((JavaSecurityMessageDigest *) nil_chk(md)) updateWithByteArray:[publicKeyHandler_ getSeed]];
      for (jint i = 0; i < [publicKeyHandler_ getRecipientsSize]; i++) {
        encodedRecipient = [publicKeyHandler_ getEncodedRecipientWithInt:i];
        [md updateWithByteArray:encodedRecipient];
      }
      if (!encryptMetadata_) {
        [md updateWithByteArray:[IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) 255, (jbyte) 255, (jbyte) 255, (jbyte) 255 } count:4]];
      }
    }
    @catch (
#line 541
    JavaLangException *f) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:f];
    }
    
#line 545
    IOSByteArray *mdResult = [((JavaSecurityMessageDigest *) nil_chk(md)) digest];
    
#line 547
    if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_256) {
      key_ = mdResult;
    }
    else {
      
#line 550
      [self setupByEncryptionKeyWithByteArray:mdResult withInt:keyLength_];
    }
  }
  else {
    
#line 553
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_STANDARD_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_O_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithByteArray:[ComItextpdfTextPdfPdfContentByte escapeStringWithByteArray:ownerKey_]]];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_U_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithByteArray:[ComItextpdfTextPdfPdfContentByte escapeStringWithByteArray:userKey_]]];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_P_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:permissions_]];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_R_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:revision_]];
    
#line 559
    if (revision_ == ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_40) {
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:1]];
    }
    else
#line 561
    if (revision_ == ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 && encryptMetadata_) {
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:2]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:128]];
    }
    else if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_256) {
      if (!encryptMetadata_) {
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCRYPTMETADATA_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFFALSE_()];
      }
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithByteArray:[ComItextpdfTextPdfPdfContentByte escapeStringWithByteArray:oeKey_]]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_UE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithByteArray:[ComItextpdfTextPdfPdfContentByte escapeStringWithByteArray:ueKey_]]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PERMS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithByteArray:[ComItextpdfTextPdfPdfContentByte escapeStringWithByteArray:perms_]]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:revision_]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:256]];
      ComItextpdfTextPdfPdfDictionary *stdcf = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:32]];
      if (embeddedFilesOnly_) {
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AUTHEVENT_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_EFOPEN_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EFF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_STDCF_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_IDENTITY_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STMF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_IDENTITY_()];
      }
      else {
        
#line 582
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AUTHEVENT_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DOCOPEN_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_STDCF_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STMF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_STDCF_()];
      }
      [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CFM_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_AESV3_()];
      ComItextpdfTextPdfPdfDictionary *cf = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [cf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STDCF_() withComItextpdfTextPdfPdfObject:stdcf];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CF_() withComItextpdfTextPdfPdfObject:cf];
    }
    else {
      
#line 591
      if (!encryptMetadata_) {
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCRYPTMETADATA_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFFALSE_()];
      }
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_R_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:ComItextpdfTextPdfPdfEncryption_AES_128]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:4]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:128]];
      ComItextpdfTextPdfPdfDictionary *stdcf = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:16]];
      if (embeddedFilesOnly_) {
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AUTHEVENT_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_EFOPEN_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EFF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_STDCF_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_IDENTITY_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STMF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_IDENTITY_()];
      }
      else {
        
#line 605
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AUTHEVENT_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DOCOPEN_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_STDCF_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STMF_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_STDCF_()];
      }
      if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_128) {
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CFM_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_AESV2_()];
      }
      else {
        
#line 612
        [stdcf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CFM_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_V2_()];
      }
      ComItextpdfTextPdfPdfDictionary *cf = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [cf putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STDCF_() withComItextpdfTextPdfPdfObject:stdcf];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CF_() withComItextpdfTextPdfPdfObject:cf];
    }
  }
  
#line 620
  return dic;
}


#line 623
- (ComItextpdfTextPdfPdfObject *)getFileIDWithBoolean:(jboolean)modified {
  
#line 624
  return [ComItextpdfTextPdfPdfEncryption createInfoIdWithByteArray:documentID_ withBoolean:modified];
}


#line 627
- (ComItextpdfTextPdfOutputStreamEncryption *)getEncryptionStreamWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 628
  return [[ComItextpdfTextPdfOutputStreamEncryption alloc] initWithJavaIoOutputStream:os withByteArray:key_ withInt:0 withInt:keySize_ withInt:revision_];
}


#line 631
- (jint)calculateStreamSizeWithInt:(jint)n {
  
#line 632
  if (revision_ == ComItextpdfTextPdfPdfEncryption_AES_128 || revision_ == ComItextpdfTextPdfPdfEncryption_AES_256) {
    return (n & (jint) 0x7ffffff0) + 32;
  }
  else {
    
#line 635
    return n;
  }
}


#line 639
- (IOSByteArray *)encryptByteArrayWithByteArray:(IOSByteArray *)b {
  
#line 640
  @try {
    JavaIoByteArrayOutputStream *ba = [[JavaIoByteArrayOutputStream alloc] init];
    ComItextpdfTextPdfOutputStreamEncryption *os2 = [self getEncryptionStreamWithJavaIoOutputStream:ba];
    [((ComItextpdfTextPdfOutputStreamEncryption *) nil_chk(os2)) writeWithByteArray:b];
    [os2 finish];
    return [ba toByteArray];
  }
  @catch (
#line 646
  JavaIoIOException *ex) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ex];
  }
}


#line 651
- (ComItextpdfTextPdfStandardDecryption *)getDecryptor {
  
#line 652
  return [[ComItextpdfTextPdfStandardDecryption alloc] initWithByteArray:key_ withInt:0 withInt:keySize_ withInt:revision_];
}


#line 655
- (IOSByteArray *)decryptByteArrayWithByteArray:(IOSByteArray *)b {
  
#line 656
  @try {
    JavaIoByteArrayOutputStream *ba = [[JavaIoByteArrayOutputStream alloc] init];
    ComItextpdfTextPdfStandardDecryption *dec = [self getDecryptor];
    IOSByteArray *b2 = [((ComItextpdfTextPdfStandardDecryption *) nil_chk(dec)) updateWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
    if (b2 != nil) {
      [ba writeWithByteArray:b2];
    }
    b2 = [dec finish];
    if (b2 != nil) {
      [ba writeWithByteArray:b2];
    }
    return [ba toByteArray];
  }
  @catch (
#line 668
  JavaIoIOException *ex) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ex];
  }
}


#line 673
- (void)addRecipientWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                                            withInt:(jint)permission {
  
#line 674
  documentID_ = [ComItextpdfTextPdfPdfEncryption createDocumentId];
  [((ComItextpdfTextPdfPdfPublicKeySecurityHandler *) nil_chk(publicKeyHandler_)) addRecipientWithComItextpdfTextPdfPdfPublicKeyRecipient:[[ComItextpdfTextPdfPdfPublicKeyRecipient alloc] initWithJavaSecurityCertCertificate:cert withInt:permission]];
}


#line 678
- (IOSByteArray *)computeUserPasswordWithByteArray:(IOSByteArray *)ownerPassword {
  
#line 679
  IOSByteArray *userPad = [self computeOwnerKeyWithByteArray:ownerKey_ withByteArray:[self padPasswordWithByteArray:ownerPassword]];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(userPad))->size_; i++) {
    jboolean match = YES;
    for (jint j = 0; j < userPad->size_ - i; j++) {
      if (IOSByteArray_Get(userPad, i + j) != IOSByteArray_Get(nil_chk(ComItextpdfTextPdfPdfEncryption_pad_), j)) {
        match = NO;
        break;
      }
    }
    if (!match) {
      continue;
    }
    IOSByteArray *userPassword = [IOSByteArray arrayWithLength:i];
    [JavaLangSystem arraycopyWithId:userPad withInt:0 withId:userPassword withInt:0 withInt:i];
    return userPassword;
  }
  return userPad;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfEncryption *)other {
  [super copyAllFieldsTo:other];
  other->cryptoMode_ = cryptoMode_;
  other->documentID_ = documentID_;
  other->embeddedFilesOnly_ = embeddedFilesOnly_;
  other->encryptMetadata_ = encryptMetadata_;
  other->extra_ = extra_;
  other->key_ = key_;
  other->keyLength_ = keyLength_;
  other->keySize_ = keySize_;
  other->mkey_ = mkey_;
  other->oeKey_ = oeKey_;
  other->ownerKey_ = ownerKey_;
  other->permissions_ = permissions_;
  other->perms_ = perms_;
  other->publicKeyHandler_ = publicKeyHandler_;
  other->revision_ = revision_;
  other->ueKey_ = ueKey_;
  other->userKey_ = userKey_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfEncryption class]) {
    ComItextpdfTextPdfPdfEncryption_pad_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 72
      (jbyte) (jint) 0x28, (jbyte) (jint) 0xBF, (jbyte) (jint) 0x4E, (jbyte) (jint) 0x5E,
#line 73
      (jbyte) (jint) 0x4E, (jbyte) (jint) 0x75, (jbyte) (jint) 0x8A, (jbyte) (jint) 0x41, (jbyte) (jint) 0x64, (jbyte) (jint) 0x00, (jbyte) (jint) 0x4E,
#line 74
      (jbyte) (jint) 0x56, (jbyte) (jint) 0xFF, (jbyte) (jint) 0xFA, (jbyte) (jint) 0x01, (jbyte) (jint) 0x08, (jbyte) (jint) 0x2E, (jbyte) (jint) 0x2E,
#line 75
      (jbyte) (jint) 0x00, (jbyte) (jint) 0xB6, (jbyte) (jint) 0xD0, (jbyte) (jint) 0x68, (jbyte) (jint) 0x3E, (jbyte) (jint) 0x80, (jbyte) (jint) 0x2F,
#line 76
      (jbyte) (jint) 0x0C, (jbyte) (jint) 0xA9, (jbyte) (jint) 0xFE, (jbyte) (jint) 0x64, (jbyte) (jint) 0x53, (jbyte) (jint) 0x69, (jbyte) (jint) 0x7A } count:32];
      ComItextpdfTextPdfPdfEncryption_salt_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 78
        (jbyte) (jint) 0x73, (jbyte) (jint) 0x41, (jbyte) (jint) 0x6c, (jbyte) (jint) 0x54 } count:4];
        ComItextpdfTextPdfPdfEncryption_metadataPad_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 80
          (jbyte) 255, (jbyte) 255, (jbyte) 255, (jbyte) 255 } count:4];
          ComItextpdfTextPdfPdfEncryption_seq_ =
#line 118
          [JavaLangSystem currentTimeMillis];
          ComItextpdfTextPdfPdfEncryption_initialized = YES;
        }
      }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setMD5WithJavaSecurityMessageDigest:", "setMD5", "V", 0x9, NULL },
    { "init", "PdfEncryption", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfEncryption:", "PdfEncryption", NULL, 0x1, NULL },
    { "setCryptoModeWithInt:withInt:", "setCryptoMode", "V", 0x1, NULL },
    { "getCryptoMode", NULL, "I", 0x1, NULL },
    { "isMetadataEncrypted", NULL, "Z", 0x1, NULL },
    { "getPermissions", NULL, "I", 0x1, NULL },
    { "isEmbeddedFilesOnly", NULL, "Z", 0x1, NULL },
    { "padPasswordWithByteArray:", "padPassword", "[B", 0x2, NULL },
    { "computeOwnerKeyWithByteArray:withByteArray:", "computeOwnerKey", "[B", 0x2, NULL },
    { "setupGlobalEncryptionKeyWithByteArray:withByteArray:withByteArray:withInt:", "setupGlobalEncryptionKey", "V", 0x2, NULL },
    { "setupUserKey", NULL, "V", 0x2, NULL },
    { "setupAllKeysWithByteArray:withByteArray:withInt:", "setupAllKeys", "V", 0x1, NULL },
    { "readKeyWithComItextpdfTextPdfPdfDictionary:withByteArray:", "readKey", "Z", 0x1, "Lcom.itextpdf.text.exceptions.BadPasswordException;" },
    { "compareArrayWithByteArray:withByteArray:withInt:", "compareArray", "Z", 0xa, NULL },
    { "createDocumentId", NULL, "[B", 0x9, NULL },
    { "setupByUserPasswordWithByteArray:withByteArray:withByteArray:withInt:", "setupByUserPassword", "V", 0x1, NULL },
    { "setupByUserPadWithByteArray:withByteArray:withByteArray:withInt:", "setupByUserPad", "V", 0x2, NULL },
    { "setupByOwnerPasswordWithByteArray:withByteArray:withByteArray:withByteArray:withInt:", "setupByOwnerPassword", "V", 0x1, NULL },
    { "setupByOwnerPadWithByteArray:withByteArray:withByteArray:withByteArray:withInt:", "setupByOwnerPad", "V", 0x2, NULL },
    { "setKeyWithByteArray:", "setKey", "V", 0x1, NULL },
    { "setupByEncryptionKeyWithByteArray:withInt:", "setupByEncryptionKey", "V", 0x1, NULL },
    { "setHashKeyWithInt:withInt:", "setHashKey", "V", 0x1, NULL },
    { "createInfoIdWithByteArray:withBoolean:", "createInfoId", "Lcom.itextpdf.text.pdf.PdfObject;", 0x9, "Ljava.io.IOException;" },
    { "getEncryptionDictionary", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getFileIDWithBoolean:", "getFileID", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, "Ljava.io.IOException;" },
    { "getEncryptionStreamWithJavaIoOutputStream:", "getEncryptionStream", "Lcom.itextpdf.text.pdf.OutputStreamEncryption;", 0x1, NULL },
    { "calculateStreamSizeWithInt:", "calculateStreamSize", "I", 0x1, NULL },
    { "encryptByteArrayWithByteArray:", "encryptByteArray", "[B", 0x1, NULL },
    { "getDecryptor", NULL, "Lcom.itextpdf.text.pdf.StandardDecryption;", 0x1, NULL },
    { "decryptByteArrayWithByteArray:", "decryptByteArray", "[B", 0x1, NULL },
    { "addRecipientWithJavaSecurityCertCertificate:withInt:", "addRecipient", "V", 0x1, NULL },
    { "computeUserPasswordWithByteArray:", "computeUserPassword", "[B", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD_ENCRYPTION_40_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_40 },
    { "STANDARD_ENCRYPTION_128_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfEncryption_STANDARD_ENCRYPTION_128 },
    { "AES_128_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfEncryption_AES_128 },
    { "AES_256_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfEncryption_AES_256 },
    { "pad_", NULL, 0x1a, "[B", &ComItextpdfTextPdfPdfEncryption_pad_,  },
    { "salt_", NULL, 0x1a, "[B", &ComItextpdfTextPdfPdfEncryption_salt_,  },
    { "metadataPad_", NULL, 0x1a, "[B", &ComItextpdfTextPdfPdfEncryption_metadataPad_,  },
    { "key_", NULL, 0x0, "[B", NULL,  },
    { "keySize_", NULL, 0x0, "I", NULL,  },
    { "mkey_", NULL, 0x0, "[B", NULL,  },
    { "extra_", NULL, 0x0, "[B", NULL,  },
    { "sMD5_", NULL, 0xa, "Ljava.security.MessageDigest;", &ComItextpdfTextPdfPdfEncryption_sMD5_,  },
    { "ownerKey_", NULL, 0x0, "[B", NULL,  },
    { "userKey_", NULL, 0x0, "[B", NULL,  },
    { "oeKey_", NULL, 0x0, "[B", NULL,  },
    { "ueKey_", NULL, 0x0, "[B", NULL,  },
    { "perms_", NULL, 0x0, "[B", NULL,  },
    { "publicKeyHandler_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfPublicKeySecurityHandler;", NULL,  },
    { "permissions_", NULL, 0x0, "I", NULL,  },
    { "documentID_", NULL, 0x0, "[B", NULL,  },
    { "seq_", NULL, 0x8, "J", &ComItextpdfTextPdfPdfEncryption_seq_,  },
    { "revision_", NULL, 0x2, "I", NULL,  },
    { "keyLength_", NULL, 0x2, "I", NULL,  },
    { "encryptMetadata_", NULL, 0x2, "Z", NULL,  },
    { "embeddedFilesOnly_", NULL, 0x2, "Z", NULL,  },
    { "cryptoMode_", NULL, 0x2, "I", NULL,  },
    { "VALIDATION_SALT_OFFSET_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfEncryption_VALIDATION_SALT_OFFSET },
    { "KEY_SALT_OFFSET_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfEncryption_KEY_SALT_OFFSET },
    { "SALT_LENGHT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfEncryption_SALT_LENGHT },
    { "OU_LENGHT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfEncryption_OU_LENGHT },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfEncryption = { "PdfEncryption", "com.itextpdf.text.pdf", NULL, 0x1, 33, methods, 30, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfEncryption;
}

@end
