//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CFFFont.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CFFFont.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/pdf/CFFFont.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"

BOOL ComItextpdfTextPdfCFFFont_initialized = NO;


#line 84
@implementation ComItextpdfTextPdfCFFFont

IOSObjectArray * ComItextpdfTextPdfCFFFont_operatorNames_;
IOSObjectArray * ComItextpdfTextPdfCFFFont_standardStrings_;


#line 180
- (NSString *)getStringWithChar:(jchar)sid {
  
#line 181
  if (sid < ((IOSObjectArray *) nil_chk(ComItextpdfTextPdfCFFFont_standardStrings_))->size_) return IOSObjectArray_Get(ComItextpdfTextPdfCFFFont_standardStrings_, sid);
  if (sid >= ComItextpdfTextPdfCFFFont_standardStrings_->size_ + ((IOSIntArray *) nil_chk(stringOffsets_))->size_ - 1) return nil;
  jint j = sid - ComItextpdfTextPdfCFFFont_standardStrings_->size_;
  
#line 185
  jint p = [self getPosition];
  [self seekWithInt:IOSIntArray_Get(stringOffsets_, j)];
  JavaLangStringBuffer *s = [[JavaLangStringBuffer alloc] init];
  for (jint k = IOSIntArray_Get(stringOffsets_, j); k < IOSIntArray_Get(stringOffsets_, j + 1); k++) {
    (void) [s appendWithChar:[self getCard8]];
  }
  [self seekWithInt:p];
  return [s description];
}


#line 195
- (jchar)getCard8 {
  
#line 196
  @try {
    jbyte i = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) readByte];
    return (jchar) (i & (jint) 0xff);
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 205
- (jchar)getCard16 {
  
#line 206
  @try {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) readChar];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 214
- (jint)getOffsetWithInt:(jint)offSize {
  
#line 215
  jint offset = 0;
  for (jint i = 0; i < offSize; i++) {
    offset *= 256;
    offset += [self getCard8];
  }
  return offset;
}


#line 223
- (void)seekWithInt:(jint)offset {
  
#line 224
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) seekWithLong:offset];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 232
- (jshort)getShort {
  
#line 233
  @try {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) readShort];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 241
- (jint)getInt {
  
#line 242
  @try {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) readInt];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 250
- (jint)getPosition {
  
#line 251
  @try {
    return (jint) [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) getFilePointer];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 263
- (IOSIntArray *)getIndexWithInt:(jint)nextIndexOffset {
  
#line 264
  jint count, indexOffSize;
  
#line 266
  [self seekWithInt:nextIndexOffset];
  count = [self getCard16];
  IOSIntArray *offsets = [IOSIntArray arrayWithLength:count + 1];
  
#line 270
  if (count == 0) {
    *IOSIntArray_GetRef(offsets, 0) = -1;
    nextIndexOffset += 2;
    return offsets;
  }
  
#line 276
  indexOffSize = [self getCard8];
  
#line 278
  for (jint j = 0; j <= count; j++) {
    
#line 280
    *IOSIntArray_GetRef(offsets, j) = nextIndexOffset +
#line 282
    2 + 1 +
#line 284
    (count + 1) * indexOffSize -
#line 286
    1 +
#line 288
    [self getOffsetWithInt:indexOffSize];
  }
  
#line 291
  return offsets;
}


#line 298
- (void)getDictItem {
  
#line 299
  for (jint i = 0; i < arg_count_; i++) IOSObjectArray_Set(nil_chk(args_), i, nil);
  arg_count_ = 0;
  key_ = nil;
  jboolean gotKey = NO;
  
#line 304
  while (!gotKey) {
    jchar b0 = [self getCard8];
    if (b0 == 29) {
      jint item = [self getInt];
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:item]);
      arg_count_++;
      
#line 311
      continue;
    }
    if (b0 == 28) {
      jshort item = [self getShort];
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:item]);
      arg_count_++;
      
#line 318
      continue;
    }
    if (b0 >= 32 && b0 <= 246) {
      jbyte item = (jbyte) (b0 - 139);
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:item]);
      arg_count_++;
      
#line 325
      continue;
    }
    if (b0 >= 247 && b0 <= 250) {
      jchar b1 = [self getCard8];
      jshort item = (jshort) ((b0 - 247) * 256 + b1 + 108);
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:item]);
      arg_count_++;
      
#line 333
      continue;
    }
    if (b0 >= 251 && b0 <= 254) {
      jchar b1 = [self getCard8];
      jshort item = (jshort) (-(b0 - 251) * 256 - b1 - 108);
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:item]);
      arg_count_++;
      
#line 341
      continue;
    }
    if (b0 == 30) {
      JavaLangStringBuilder *item = [[JavaLangStringBuilder alloc] initWithNSString:@""];
      jboolean done = NO;
      jchar buffer = 0;
      jbyte avail = 0;
      jint nibble = 0;
      while (!done) {
        
#line 351
        if (avail == 0) {
          
#line 351
          buffer = [self getCard8];
          
#line 351
          avail = 2;
        }
        
#line 352
        if (avail == 1) {
          
#line 352
          nibble = buffer / 16;
          
#line 352
          avail--;
        }
        
#line 353
        if (avail == 2) {
          
#line 353
          nibble = buffer % 16;
          
#line 353
          avail--;
        }
        
#line 354
        switch (nibble) {
          case (jint) 0xa:
          
#line 355
          (void) [item appendWithNSString:@"."];
          
#line 355
          break;
          case (jint) 0xb:
          
#line 356
          (void) [item appendWithNSString:@"E"];
          
#line 356
          break;
          case (jint) 0xc:
          
#line 357
          (void) [item appendWithNSString:@"E-"];
          
#line 357
          break;
          case (jint) 0xe:
          
#line 358
          (void) [item appendWithNSString:@"-"];
          
#line 358
          break;
          case (jint) 0xf:
          
#line 359
          done = YES;
          
#line 359
          break;
          default:
          if (nibble >= 0 && nibble <= 9)
#line 362
          (void) [item appendWithNSString:[NSString valueOfInt:nibble]];
          else {
            (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([item appendWithNSString:@"<NIBBLE ERROR: "])) appendWithInt:nibble])) appendWithChar:'>'];
            done = YES;
          }
          break;
        }
      }
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [item description]);
      arg_count_++;
      
#line 373
      continue;
    }
    if (b0 <= 21) {
      gotKey = YES;
      if (b0 != 12) key_ = IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfCFFFont_operatorNames_), b0);
      else key_ = IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfCFFFont_operatorNames_), 32 + [self getCard8]);
      
#line 382
      continue;
    }
  }
}


#line 691
- (ComItextpdfTextPdfCFFFont_RangeItem *)getEntireIndexRangeWithInt:(jint)indexOffset {
  
#line 692
  [self seekWithInt:indexOffset];
  jint count = [self getCard16];
  if (count == 0) {
    return [[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:indexOffset withInt:2];
  }
  else {
    
#line 697
    jint indexOffSize = [self getCard8];
    [self seekWithInt:indexOffset + 2 + 1 + count * indexOffSize];
    jint size = [self getOffsetWithInt:indexOffSize] - 1;
    return [[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:indexOffset withInt:
#line 701
    2 + 1 + (count + 1) * indexOffSize + size];
  }
}


#line 717
- (IOSByteArray *)getCIDWithNSString:(NSString *)fontName {
  
#line 720
  jint j;
  for (j = 0; j < ((IOSObjectArray *) nil_chk(fonts_))->size_; j++)
#line 722
  if ([((NSString *) nil_chk(fontName)) isEqual:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_]) break;
  if (j == fonts_->size_) return nil;
  
#line 725
  JavaUtilLinkedList *l = [[JavaUtilLinkedList alloc] init];
  
#line 729
  [self seekWithInt:0];
  
#line 731
  [self getCard8];
  [self getCard8];
  jint hdrSize = [self getCard8];
  [self getCard8];
  nextIndexOffset_ = hdrSize;
  
#line 737
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:0 withInt:hdrSize]];
  
#line 739
  jint nglyphs = -1, nstrings = -1;
  if (!((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->isCID_) {
    
#line 742
    [self seekWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->charstringsOffset_];
    nglyphs = [self getCard16];
    [self seekWithInt:stringIndexOffset_];
    nstrings = [self getCard16] + ((IOSObjectArray *) nil_chk(ComItextpdfTextPdfCFFFont_standardStrings_))->size_;
  }
  
#line 751
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 1]];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 1]];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 1]];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) (1 + ((jint) [((NSString *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_)) length]))]];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_StringItem alloc] initWithNSString:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_]];
  
#line 760
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 1]];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 2]];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 1]];
  ComItextpdfTextPdfCFFFont_OffsetItem *topdictIndex1Ref = [[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:2];
  [l addLastWithId:topdictIndex1Ref];
  ComItextpdfTextPdfCFFFont_IndexBaseItem *topdictBase = [[ComItextpdfTextPdfCFFFont_IndexBaseItem alloc] init];
  [l addLastWithId:topdictBase];
  
#line 778
  ComItextpdfTextPdfCFFFont_OffsetItem *charsetRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  ComItextpdfTextPdfCFFFont_OffsetItem *charstringsRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  ComItextpdfTextPdfCFFFont_OffsetItem *fdarrayRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  ComItextpdfTextPdfCFFFont_OffsetItem *fdselectRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  
#line 783
  if (!((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->isCID_) {
    
#line 785
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:nstrings]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:nstrings + 1]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:0]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 12]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 30]];
    
#line 791
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:nglyphs]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 12]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 34]];
  }
  
#line 799
  [l addLastWithId:fdarrayRef];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 12]];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 36]];
  
#line 803
  [l addLastWithId:fdselectRef];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 12]];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 37]];
  
#line 807
  [l addLastWithId:charsetRef];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 15]];
  
#line 810
  [l addLastWithId:charstringsRef];
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 17]];
  
#line 813
  [self seekWithInt:IOSIntArray_Get(nil_chk(topdictOffsets_), j)];
  while ([self getPosition] < IOSIntArray_Get(topdictOffsets_, j + 1)) {
    jint p1 = [self getPosition];
    [self getDictItem];
    jint p2 = [self getPosition];
    if ([@"Encoding" isEqual:key_] ||
#line 819
    [@"Private" isEqual:key_] ||
#line 820
    [@"FDSelect" isEqual:key_] ||
#line 821
    [@"FDArray" isEqual:key_] ||
#line 822
    [@"charset" isEqual:key_] ||
#line 823
    [@"CharStrings" isEqual:key_]) {
    }
    else {
      
#line 827
      [l addWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:p1 withInt:p2 - p1]];
    }
  }
  
#line 831
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexMarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:topdictIndex1Ref withComItextpdfTextPdfCFFFont_IndexBaseItem:topdictBase]];
  
#line 837
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->isCID_) {
    [l addLastWithId:[self getEntireIndexRangeWithInt:stringIndexOffset_]];
  }
  else {
    
#line 840
    NSString *fdFontName = JreStrcat("$$", ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_, @"-OneRange");
    if (((jint) [fdFontName length]) > 127)
#line 842
    fdFontName = [fdFontName substring:0 endIndex:127];
    NSString *extraStrings = JreStrcat("$$", @"AdobeIdentity", fdFontName);
    
#line 845
    jint origStringsLen = IOSIntArray_Get(stringOffsets_, ((IOSIntArray *) nil_chk(stringOffsets_))->size_ - 1) - IOSIntArray_Get(
#line 846
    stringOffsets_, 0);
    jint stringsBaseOffset = IOSIntArray_Get(stringOffsets_, 0) - 1;
    
#line 849
    jbyte stringsIndexOffSize;
    if (origStringsLen + ((jint) [extraStrings length]) <= (jint) 0xff) stringsIndexOffSize = 1;
    else if (origStringsLen + ((jint) [extraStrings length]) <= (jint) 0xffff) stringsIndexOffSize = 2;
    else if (origStringsLen + ((jint) [extraStrings length]) <= (jint) 0xffffff) stringsIndexOffSize = 3;
    else stringsIndexOffSize = 4;
    
#line 855
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) (stringOffsets_->size_ - 1 + 3)]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) stringsIndexOffSize]];
    {
      IOSIntArray *a__ =
#line 857
      stringOffsets_;
      jint const *b__ = a__->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint stringOffset = *b__++;
        
#line 858
        [l addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:stringsIndexOffSize withInt:
#line 859
        stringOffset - stringsBaseOffset]];
      }
    }
    
#line 860
    jint currentStringsOffset = IOSIntArray_Get(stringOffsets_, stringOffsets_->size_ - 1) -
#line 861
    stringsBaseOffset;
    
#line 863
    currentStringsOffset += ((jint) [@"Adobe" length]);
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:stringsIndexOffSize withInt:currentStringsOffset]];
    currentStringsOffset += ((jint) [@"Identity" length]);
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:stringsIndexOffSize withInt:currentStringsOffset]];
    currentStringsOffset += ((jint) [((NSString *) nil_chk(fdFontName)) length]);
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:stringsIndexOffSize withInt:currentStringsOffset]];
    
#line 870
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:IOSIntArray_Get(stringOffsets_, 0) withInt:origStringsLen]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_StringItem alloc] initWithNSString:extraStrings]];
  }
  
#line 876
  [l addLastWithId:[self getEntireIndexRangeWithInt:gsubrIndexOffset_]];
  
#line 880
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->isCID_) {
  }
  else {
    
#line 884
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:fdselectRef]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 3]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 1]];
    
#line 888
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 0]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 0]];
    
#line 891
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) nglyphs]];
    
#line 896
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:charsetRef]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 2]];
    
#line 899
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 1]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) (nglyphs - 1)]];
    
#line 905
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:fdarrayRef]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 1]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 1]];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 1]];
    
#line 910
    ComItextpdfTextPdfCFFFont_OffsetItem *privateIndex1Ref = [[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:1];
    [l addLastWithId:privateIndex1Ref];
    ComItextpdfTextPdfCFFFont_IndexBaseItem *privateBase = [[ComItextpdfTextPdfCFFFont_IndexBaseItem alloc] init];
    [l addLastWithId:privateBase];
    
#line 922
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateLength_]];
    ComItextpdfTextPdfCFFFont_OffsetItem *privateRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
    [l addLastWithId:privateRef];
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 18]];
    
#line 927
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexMarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:privateIndex1Ref withComItextpdfTextPdfCFFFont_IndexBaseItem:privateBase]];
    
#line 931
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:privateRef]];
    
#line 935
    [l addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateOffset_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateLength_]];
    if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateSubrs_ >= 0) {
      
#line 938
      [l addLastWithId:[self getEntireIndexRangeWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateSubrs_]];
    }
  }
  
#line 944
  [l addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:charstringsRef]];
  [l addLastWithId:[self getEntireIndexRangeWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->charstringsOffset_]];
  
#line 949
  IOSIntArray *currentOffset = [IOSIntArray arrayWithLength:1];
  *IOSIntArray_GetRef(currentOffset, 0) = 0;
  
#line 952
  id<JavaUtilIterator> listIter = [l iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComItextpdfTextPdfCFFFont_Item *item = [listIter next];
    [((ComItextpdfTextPdfCFFFont_Item *) nil_chk(item)) incrementWithIntArray:currentOffset];
  }
  
#line 958
  listIter = [l iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComItextpdfTextPdfCFFFont_Item *item = [listIter next];
    [((ComItextpdfTextPdfCFFFont_Item *) nil_chk(item)) xref];
  }
  
#line 964
  jint size = IOSIntArray_Get(currentOffset, 0);
  IOSByteArray *b = [IOSByteArray arrayWithLength:size];
  
#line 967
  listIter = [l iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComItextpdfTextPdfCFFFont_Item *item = [listIter next];
    [((ComItextpdfTextPdfCFFFont_Item *) nil_chk(item)) emitWithByteArray:b];
  }
  
#line 973
  return b;
}


#line 977
- (jboolean)isCIDWithNSString:(NSString *)fontName {
  
#line 978
  jint j;
  for (j = 0; j < ((IOSObjectArray *) nil_chk(fonts_))->size_; j++)
#line 980
  if ([((NSString *) nil_chk(fontName)) isEqual:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_]) return ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->isCID_;
  return NO;
}


#line 984
- (jboolean)existsWithNSString:(NSString *)fontName {
  
#line 985
  jint j;
  for (j = 0; j < ((IOSObjectArray *) nil_chk(fonts_))->size_; j++)
#line 987
  if ([((NSString *) nil_chk(fontName)) isEqual:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_]) return YES;
  return NO;
}


#line 992
- (IOSObjectArray *)getNames {
  
#line 993
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(fonts_))->size_ type:[IOSClass classWithClass:[NSString class]]];
  for (jint i = 0; i < fonts_->size_; i++)
#line 995
  IOSObjectArray_Set(names, i, ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->name_);
  return names;
}


#line 1051
- (instancetype)initWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)inputbuffer {
  if (self = [super init]) {
    args_ = [IOSObjectArray arrayWithLength:
#line 295
    48 type:[IOSClass classWithClass:[NSObject class]]];
    arg_count_ =
#line 296
    0;
    
#line 1054
    buf_ = inputbuffer;
    
#line 1055
    [self seekWithInt:0];
    
#line 1057
    [self getCard8];
    
#line 1058
    [self getCard8];
    
#line 1062
    jint hdrSize = [self getCard8];
    
#line 1064
    [self getCard8];
    
#line 1070
    nameIndexOffset_ = hdrSize;
    
#line 1071
    nameOffsets_ = [self getIndexWithInt:nameIndexOffset_];
    
#line 1072
    topdictIndexOffset_ = IOSIntArray_Get(nameOffsets_, ((IOSIntArray *) nil_chk(nameOffsets_))->size_ - 1);
    
#line 1073
    topdictOffsets_ = [self getIndexWithInt:topdictIndexOffset_];
    
#line 1074
    stringIndexOffset_ = IOSIntArray_Get(topdictOffsets_, ((IOSIntArray *) nil_chk(topdictOffsets_))->size_ - 1);
    
#line 1075
    stringOffsets_ = [self getIndexWithInt:stringIndexOffset_];
    
#line 1076
    gsubrIndexOffset_ = IOSIntArray_Get(stringOffsets_, ((IOSIntArray *) nil_chk(stringOffsets_))->size_ - 1);
    
#line 1077
    gsubrOffsets_ = [self getIndexWithInt:gsubrIndexOffset_];
    
#line 1079
    fonts_ = [IOSObjectArray arrayWithLength:nameOffsets_->size_ - 1 type:[IOSClass classWithClass:[ComItextpdfTextPdfCFFFont_Font class]]];
    
#line 1093
    for (jint j = 0; j < nameOffsets_->size_ - 1; j++) {
      IOSObjectArray_SetAndConsume(fonts_, j, [[ComItextpdfTextPdfCFFFont_Font alloc] initWithComItextpdfTextPdfCFFFont:self]);
      [self seekWithInt:IOSIntArray_Get(nameOffsets_, j)];
      ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_ = @"";
      for (jint k = IOSIntArray_Get(nameOffsets_, j); k < IOSIntArray_Get(nameOffsets_, j + 1); k++) {
        ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_ = JreStrcat("$C", ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_, [self getCard8]);
      }
    }
    
#line 1122
    for (jint j = 0; j < topdictOffsets_->size_ - 1; j++) {
      [self seekWithInt:IOSIntArray_Get(topdictOffsets_, j)];
      while ([self getPosition] < IOSIntArray_Get(topdictOffsets_, j + 1)) {
        [self getDictItem];
        if ([@"FullName" isEqual:key_]) {
          
#line 1128
          ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fullName_ = [self getStringWithChar:(jchar) [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue]];
        }
        else if ([@"ROS" isEqual:key_])
#line 1131
        ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->isCID_ = YES;
        else if ([@"Private" isEqual:key_]) {
          ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateLength_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue];
          ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateOffset_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 1), [JavaLangInteger class])))) intValue];
        }
        else if ([@"charset" isEqual:key_]) {
          ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->charsetOffset_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue];
        }
        else
#line 1147
        if ([@"CharStrings" isEqual:key_]) {
          ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->charstringsOffset_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue];
          
#line 1151
          jint p = [self getPosition];
          ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->charstringsOffsets_ = [self getIndexWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->charstringsOffset_];
          [self seekWithInt:p];
        }
        else
#line 1154
        if ([@"FDArray" isEqual:key_])
#line 1155
        ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fdarrayOffset_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue];
        else if ([@"FDSelect" isEqual:key_])
#line 1157
        ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fdselectOffset_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue];
        else if ([@"CharstringType" isEqual:key_])
#line 1159
        ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->CharstringType_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue];
      }
      
#line 1163
      if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateOffset_ >= 0) {
        
#line 1165
        [self seekWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateOffset_];
        while ([self getPosition] < ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateOffset_ + ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateLength_) {
          [self getDictItem];
          if ([@"Subrs" isEqual:key_])
#line 1171
          ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateSubrs_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue] + ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->privateOffset_;
        }
      }
      
#line 1176
      if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fdarrayOffset_ >= 0) {
        IOSIntArray *fdarrayOffsets = [self getIndexWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fdarrayOffset_];
        
#line 1179
        ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fdprivateOffsets_ = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(fdarrayOffsets))->size_ - 1];
        ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fdprivateLengths_ = [IOSIntArray arrayWithLength:fdarrayOffsets->size_ - 1];
        
#line 1184
        for (jint k = 0; k < fdarrayOffsets->size_ - 1; k++) {
          [self seekWithInt:IOSIntArray_Get(fdarrayOffsets, k)];
          while ([self getPosition] < IOSIntArray_Get(fdarrayOffsets, k + 1)) {
            [self getDictItem];
            if ([@"Private" isEqual:key_]) {
              *IOSIntArray_GetRef(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fdprivateLengths_, k) = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 0), [JavaLangInteger class])))) intValue];
              *IOSIntArray_GetRef(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->fdprivateOffsets_, k) = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(args_, 1), [JavaLangInteger class])))) intValue];
            }
          }
        }
      }
    }
  }
  return self;
}


#line 1201
- (void)ReadEncodingWithInt:(jint)nextIndexOffset {
  
#line 1202
  jint format;
  [self seekWithInt:nextIndexOffset];
  format = [self getCard8];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont *)other {
  [super copyAllFieldsTo:other];
  other->arg_count_ = arg_count_;
  other->args_ = args_;
  other->buf_ = buf_;
  other->fonts_ = fonts_;
  other->gsubrIndexOffset_ = gsubrIndexOffset_;
  other->gsubrOffsets_ = gsubrOffsets_;
  other->key_ = key_;
  other->nameIndexOffset_ = nameIndexOffset_;
  other->nameOffsets_ = nameOffsets_;
  other->nextIndexOffset_ = nextIndexOffset_;
  other->stringIndexOffset_ = stringIndexOffset_;
  other->stringOffsets_ = stringOffsets_;
  other->topdictIndexOffset_ = topdictIndexOffset_;
  other->topdictOffsets_ = topdictOffsets_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfCFFFont class]) {
    ComItextpdfTextPdfCFFFont_operatorNames_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 87
      @"version", @"Notice", @"FullName", @"FamilyName",
#line 88
      @"Weight", @"FontBBox", @"BlueValues", @"OtherBlues",
#line 89
      @"FamilyBlues", @"FamilyOtherBlues", @"StdHW", @"StdVW",
#line 90
      @"UNKNOWN_12", @"UniqueID", @"XUID", @"charset",
#line 91
      @"Encoding", @"CharStrings", @"Private", @"Subrs",
#line 92
      @"defaultWidthX", @"nominalWidthX", @"UNKNOWN_22", @"UNKNOWN_23",
#line 93
      @"UNKNOWN_24", @"UNKNOWN_25", @"UNKNOWN_26", @"UNKNOWN_27",
#line 94
      @"UNKNOWN_28", @"UNKNOWN_29", @"UNKNOWN_30", @"UNKNOWN_31",
#line 95
      @"Copyright", @"isFixedPitch", @"ItalicAngle", @"UnderlinePosition",
#line 96
      @"UnderlineThickness", @"PaintType", @"CharstringType", @"FontMatrix",
#line 97
      @"StrokeWidth", @"BlueScale", @"BlueShift", @"BlueFuzz",
#line 98
      @"StemSnapH", @"StemSnapV", @"ForceBold", @"UNKNOWN_12_15",
#line 99
      @"UNKNOWN_12_16", @"LanguageGroup", @"ExpansionFactor", @"initialRandomSeed",
#line 100
      @"SyntheticBase", @"PostScript", @"BaseFontName", @"BaseFontBlend",
#line 101
      @"UNKNOWN_12_24", @"UNKNOWN_12_25", @"UNKNOWN_12_26", @"UNKNOWN_12_27",
#line 102
      @"UNKNOWN_12_28", @"UNKNOWN_12_29", @"ROS", @"CIDFontVersion",
#line 103
      @"CIDFontRevision", @"CIDFontType", @"CIDCount", @"UIDBase",
#line 104
      @"FDArray", @"FDSelect", @"FontName" } count:71 type:[IOSClass classWithClass:[NSString class]]];
      ComItextpdfTextPdfCFFFont_standardStrings_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 110
        @".notdef", @"space", @"exclam", @"quotedbl", @"numbersign", @"dollar",
#line 111
        @"percent", @"ampersand", @"quoteright", @"parenleft", @"parenright",
#line 112
        @"asterisk", @"plus", @"comma", @"hyphen", @"period", @"slash", @"zero", @"one",
#line 113
        @"two", @"three", @"four", @"five", @"six", @"seven", @"eight", @"nine", @"colon",
#line 114
        @"semicolon", @"less", @"equal", @"greater", @"question", @"at", @"A", @"B", @"C",
#line 115
        @"D", @"E", @"F", @"G", @"H", @"I", @"J", @"K", @"L", @"M", @"N", @"O", @"P", @"Q", @"R",
#line 116
        @"S", @"T", @"U", @"V", @"W", @"X", @"Y", @"Z", @"bracketleft", @"backslash",
#line 117
        @"bracketright", @"asciicircum", @"underscore", @"quoteleft", @"a", @"b", @"c",
#line 118
        @"d", @"e", @"f", @"g", @"h", @"i", @"j", @"k", @"l", @"m", @"n", @"o", @"p", @"q", @"r",
#line 119
        @"s", @"t", @"u", @"v", @"w", @"x", @"y", @"z", @"braceleft", @"bar", @"braceright",
#line 120
        @"asciitilde", @"exclamdown", @"cent", @"sterling", @"fraction", @"yen",
#line 121
        @"florin", @"section", @"currency", @"quotesingle", @"quotedblleft",
#line 122
        @"guillemotleft", @"guilsinglleft", @"guilsinglright", @"fi", @"fl", @"endash",
#line 123
        @"dagger", @"daggerdbl", @"periodcentered", @"paragraph", @"bullet",
#line 124
        @"quotesinglbase", @"quotedblbase", @"quotedblright", @"guillemotright",
#line 125
        @"ellipsis", @"perthousand", @"questiondown", @"grave", @"acute", @"circumflex",
#line 126
        @"tilde", @"macron", @"breve", @"dotaccent", @"dieresis", @"ring", @"cedilla",
#line 127
        @"hungarumlaut", @"ogonek", @"caron", @"emdash", @"AE", @"ordfeminine", @"Lslash",
#line 128
        @"Oslash", @"OE", @"ordmasculine", @"ae", @"dotlessi", @"lslash", @"oslash", @"oe",
#line 129
        @"germandbls", @"onesuperior", @"logicalnot", @"mu", @"trademark", @"Eth",
#line 130
        @"onehalf", @"plusminus", @"Thorn", @"onequarter", @"divide", @"brokenbar",
#line 131
        @"degree", @"thorn", @"threequarters", @"twosuperior", @"registered", @"minus",
#line 132
        @"eth", @"multiply", @"threesuperior", @"copyright", @"Aacute", @"Acircumflex",
#line 133
        @"Adieresis", @"Agrave", @"Aring", @"Atilde", @"Ccedilla", @"Eacute",
#line 134
        @"Ecircumflex", @"Edieresis", @"Egrave", @"Iacute", @"Icircumflex", @"Idieresis",
#line 135
        @"Igrave", @"Ntilde", @"Oacute", @"Ocircumflex", @"Odieresis", @"Ograve",
#line 136
        @"Otilde", @"Scaron", @"Uacute", @"Ucircumflex", @"Udieresis", @"Ugrave",
#line 137
        @"Yacute", @"Ydieresis", @"Zcaron", @"aacute", @"acircumflex", @"adieresis",
#line 138
        @"agrave", @"aring", @"atilde", @"ccedilla", @"eacute", @"ecircumflex",
#line 139
        @"edieresis", @"egrave", @"iacute", @"icircumflex", @"idieresis", @"igrave",
#line 140
        @"ntilde", @"oacute", @"ocircumflex", @"odieresis", @"ograve", @"otilde",
#line 141
        @"scaron", @"uacute", @"ucircumflex", @"udieresis", @"ugrave", @"yacute",
#line 142
        @"ydieresis", @"zcaron", @"exclamsmall", @"Hungarumlautsmall",
#line 143
        @"dollaroldstyle", @"dollarsuperior", @"ampersandsmall", @"Acutesmall",
#line 144
        @"parenleftsuperior", @"parenrightsuperior", @"twodotenleader",
#line 145
        @"onedotenleader", @"zerooldstyle", @"oneoldstyle", @"twooldstyle",
#line 146
        @"threeoldstyle", @"fouroldstyle", @"fiveoldstyle", @"sixoldstyle",
#line 147
        @"sevenoldstyle", @"eightoldstyle", @"nineoldstyle", @"commasuperior",
#line 148
        @"threequartersemdash", @"periodsuperior", @"questionsmall", @"asuperior",
#line 149
        @"bsuperior", @"centsuperior", @"dsuperior", @"esuperior", @"isuperior",
#line 150
        @"lsuperior", @"msuperior", @"nsuperior", @"osuperior", @"rsuperior",
#line 151
        @"ssuperior", @"tsuperior", @"ff", @"ffi", @"ffl", @"parenleftinferior",
#line 152
        @"parenrightinferior", @"Circumflexsmall", @"hyphensuperior", @"Gravesmall",
#line 153
        @"Asmall", @"Bsmall", @"Csmall", @"Dsmall", @"Esmall", @"Fsmall", @"Gsmall",
#line 154
        @"Hsmall", @"Ismall", @"Jsmall", @"Ksmall", @"Lsmall", @"Msmall", @"Nsmall",
#line 155
        @"Osmall", @"Psmall", @"Qsmall", @"Rsmall", @"Ssmall", @"Tsmall", @"Usmall",
#line 156
        @"Vsmall", @"Wsmall", @"Xsmall", @"Ysmall", @"Zsmall", @"colonmonetary",
#line 157
        @"onefitted", @"rupiah", @"Tildesmall", @"exclamdownsmall", @"centoldstyle",
#line 158
        @"Lslashsmall", @"Scaronsmall", @"Zcaronsmall", @"Dieresissmall", @"Brevesmall",
#line 159
        @"Caronsmall", @"Dotaccentsmall", @"Macronsmall", @"figuredash",
#line 160
        @"hypheninferior", @"Ogoneksmall", @"Ringsmall", @"Cedillasmall",
#line 161
        @"questiondownsmall", @"oneeighth", @"threeeighths", @"fiveeighths",
#line 162
        @"seveneighths", @"onethird", @"twothirds", @"zerosuperior", @"foursuperior",
#line 163
        @"fivesuperior", @"sixsuperior", @"sevensuperior", @"eightsuperior",
#line 164
        @"ninesuperior", @"zeroinferior", @"oneinferior", @"twoinferior",
#line 165
        @"threeinferior", @"fourinferior", @"fiveinferior", @"sixinferior",
#line 166
        @"seveninferior", @"eightinferior", @"nineinferior", @"centinferior",
#line 167
        @"dollarinferior", @"periodinferior", @"commainferior", @"Agravesmall",
#line 168
        @"Aacutesmall", @"Acircumflexsmall", @"Atildesmall", @"Adieresissmall",
#line 169
        @"Aringsmall", @"AEsmall", @"Ccedillasmall", @"Egravesmall", @"Eacutesmall",
#line 170
        @"Ecircumflexsmall", @"Edieresissmall", @"Igravesmall", @"Iacutesmall",
#line 171
        @"Icircumflexsmall", @"Idieresissmall", @"Ethsmall", @"Ntildesmall",
#line 172
        @"Ogravesmall", @"Oacutesmall", @"Ocircumflexsmall", @"Otildesmall",
#line 173
        @"Odieresissmall", @"OEsmall", @"Oslashsmall", @"Ugravesmall", @"Uacutesmall",
#line 174
        @"Ucircumflexsmall", @"Udieresissmall", @"Yacutesmall", @"Thornsmall",
#line 175
        @"Ydieresissmall", @"001.000", @"001.001", @"001.002", @"001.003", @"Black",
#line 176
        @"Bold", @"Book", @"Light", @"Medium", @"Regular", @"Roman", @"Semibold" } count:391 type:[IOSClass classWithClass:[NSString class]]];
        ComItextpdfTextPdfCFFFont_initialized = YES;
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getStringWithChar:", "getString", "Ljava.lang.String;", 0x1, NULL },
    { "getCard8", NULL, "C", 0x0, NULL },
    { "getCard16", NULL, "C", 0x0, NULL },
    { "getOffsetWithInt:", "getOffset", "I", 0x0, NULL },
    { "seekWithInt:", "seek", "V", 0x0, NULL },
    { "getShort", NULL, "S", 0x0, NULL },
    { "getInt", NULL, "I", 0x0, NULL },
    { "getPosition", NULL, "I", 0x0, NULL },
    { "getIndexWithInt:", "getIndex", "[I", 0x0, NULL },
    { "getDictItem", NULL, "V", 0x4, NULL },
    { "getEntireIndexRangeWithInt:", "getEntireIndexRange", "Lcom.itextpdf.text.pdf.CFFFont$RangeItem;", 0x4, NULL },
    { "getCIDWithNSString:", "getCID", "[B", 0x1, NULL },
    { "isCIDWithNSString:", "isCID", "Z", 0x1, NULL },
    { "existsWithNSString:", "exists", "Z", 0x1, NULL },
    { "getNames", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "initWithComItextpdfTextPdfRandomAccessFileOrArray:", "CFFFont", NULL, 0x1, NULL },
    { "ReadEncodingWithInt:", "ReadEncoding", "V", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "operatorNames_", NULL, 0x18, "[Ljava.lang.String;", &ComItextpdfTextPdfCFFFont_operatorNames_,  },
    { "standardStrings_", NULL, 0x18, "[Ljava.lang.String;", &ComItextpdfTextPdfCFFFont_standardStrings_,  },
    { "nextIndexOffset_", NULL, 0x0, "I", NULL,  },
    { "key_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "args_", NULL, 0x4, "[Ljava.lang.Object;", NULL,  },
    { "arg_count_", NULL, 0x4, "I", NULL,  },
    { "buf_", NULL, 0x4, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "nameIndexOffset_", NULL, 0x4, "I", NULL,  },
    { "topdictIndexOffset_", NULL, 0x4, "I", NULL,  },
    { "stringIndexOffset_", NULL, 0x4, "I", NULL,  },
    { "gsubrIndexOffset_", NULL, 0x4, "I", NULL,  },
    { "nameOffsets_", NULL, 0x4, "[I", NULL,  },
    { "topdictOffsets_", NULL, 0x4, "[I", NULL,  },
    { "stringOffsets_", NULL, 0x4, "[I", NULL,  },
    { "gsubrOffsets_", NULL, 0x4, "[I", NULL,  },
    { "fonts_", NULL, 0x4, "[Lcom.itextpdf.text.pdf.CFFFont$Font;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont = { "CFFFont", "com.itextpdf.text.pdf", NULL, 0x1, 17, methods, 16, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont;
}

@end


#line 390
@implementation ComItextpdfTextPdfCFFFont_Item


#line 393
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 394
  myOffset_ = IOSIntArray_Get(nil_chk(currentOffset), 0);
}


#line 397
- (void)emitWithByteArray:(IOSByteArray *)buffer {
}


#line 399
- (void)xref {
}

- (instancetype)init {
  if (self = [super init]) {
    myOffset_ =
#line 391
    -1;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_Item *)other {
  [super copyAllFieldsTo:other];
  other->myOffset_ = myOffset_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
    { "xref", NULL, "V", 0x1, NULL },
    { "init", NULL, NULL, 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "myOffset_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_Item = { "Item", "com.itextpdf.text.pdf", "CFFFont", 0x40c, 4, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_Item;
}

@end


#line 414
@implementation ComItextpdfTextPdfCFFFont_RangeItem


#line 417
- (instancetype)initWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)buf
                                                          withInt:(jint)offset
                                                          withInt:(jint)length {
  if (self = [super init]) {
    
#line 418
    self->offset_ = offset;
    
#line 419
    self->length_ = length;
    
#line 420
    self->buf_ = buf;
  }
  return self;
}


#line 423
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 424
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += length_;
}


#line 428
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) seekWithLong:offset_];
    for (jint i = myOffset_; i < myOffset_ + length_; i++)
#line 433
    *IOSByteArray_GetRef(nil_chk(buffer), i) = [buf_ readByte];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_RangeItem *)other {
  [super copyAllFieldsTo:other];
  other->buf_ = buf_;
  other->length_ = length_;
  other->offset_ = offset_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfRandomAccessFileOrArray:withInt:withInt:", "RangeItem", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "offset_", NULL, 0x1, "I", NULL,  },
    { "length_", NULL, 0x1, "I", NULL,  },
    { "buf_", NULL, 0x2, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_RangeItem = { "RangeItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 3, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_RangeItem;
}

@end


#line 402
@implementation ComItextpdfTextPdfCFFFont_OffsetItem


#line 407
- (void)setWithInt:(jint)offset {
  
#line 407
  self->value_ = offset;
}

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_OffsetItem *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setWithInt:", "set", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x1, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_OffsetItem = { "OffsetItem", "com.itextpdf.text.pdf", "CFFFont", 0x40c, 2, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_OffsetItem;
}

@end


#line 448
@implementation ComItextpdfTextPdfCFFFont_IndexOffsetItem

- (instancetype)initWithInt:(jint)size
                    withInt:(jint)value {
  if (self = [super init]) {
    
#line 450
    self->size_ = size;
    
#line 450
    self->value_ = value;
  }
  return self;
}


#line 451
- (instancetype)initWithInt:(jint)size {
  if (self = [super init]) {
    
#line 451
    self->size_ = size;
  }
  return self;
}


#line 454
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 455
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += size_;
}


#line 459
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  
#line 460
  jint i = 0;
  switch (size_) {
    case 4:
    *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + i) = (jbyte) ((URShift32(value_, 24)) & (jint) 0xff);
    i++;
    case 3:
    *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + i) = (jbyte) ((URShift32(value_, 16)) & (jint) 0xff);
    i++;
    case 2:
    *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + i) = (jbyte) ((URShift32(value_, 8)) & (jint) 0xff);
    i++;
    case 1:
    *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + i) = (jbyte) ((URShift32(value_, 0)) & (jint) 0xff);
    i++;
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_IndexOffsetItem *)other {
  [super copyAllFieldsTo:other];
  other->size_ = size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "IndexOffsetItem", NULL, 0x1, NULL },
    { "initWithInt:", "IndexOffsetItem", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "size_", NULL, 0x11, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_IndexOffsetItem = { "IndexOffsetItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 4, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_IndexOffsetItem;
}

@end


#line 485
@implementation ComItextpdfTextPdfCFFFont_IndexBaseItem


#line 486
- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "IndexBaseItem", NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_IndexBaseItem = { "IndexBaseItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 1, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_IndexBaseItem;
}

@end


#line 489
@implementation ComItextpdfTextPdfCFFFont_IndexMarkerItem


#line 492
- (instancetype)initWithComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)offItem
                 withComItextpdfTextPdfCFFFont_IndexBaseItem:(ComItextpdfTextPdfCFFFont_IndexBaseItem *)indexBase {
  if (self = [super init]) {
    
#line 493
    self->offItem_ = offItem;
    
#line 494
    self->indexBase_ = indexBase;
  }
  return self;
}


#line 497
- (void)xref {
  
#line 499
  [((ComItextpdfTextPdfCFFFont_OffsetItem *) nil_chk(offItem_)) setWithInt:self->myOffset_ - ((ComItextpdfTextPdfCFFFont_IndexBaseItem *) nil_chk(indexBase_))->myOffset_ + 1];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_IndexMarkerItem *)other {
  [super copyAllFieldsTo:other];
  other->indexBase_ = indexBase_;
  other->offItem_ = offItem_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfCFFFont_OffsetItem:withComItextpdfTextPdfCFFFont_IndexBaseItem:", "IndexMarkerItem", NULL, 0x1, NULL },
    { "xref", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "offItem_", NULL, 0x2, "Lcom.itextpdf.text.pdf.CFFFont$OffsetItem;", NULL,  },
    { "indexBase_", NULL, 0x2, "Lcom.itextpdf.text.pdf.CFFFont$IndexBaseItem;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_IndexMarkerItem = { "IndexMarkerItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 2, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_IndexMarkerItem;
}

@end


#line 506
@implementation ComItextpdfTextPdfCFFFont_SubrMarkerItem


#line 509
- (instancetype)initWithComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)offItem
                 withComItextpdfTextPdfCFFFont_IndexBaseItem:(ComItextpdfTextPdfCFFFont_IndexBaseItem *)indexBase {
  if (self = [super init]) {
    
#line 510
    self->offItem_ = offItem;
    
#line 511
    self->indexBase_ = indexBase;
  }
  return self;
}


#line 514
- (void)xref {
  
#line 516
  [((ComItextpdfTextPdfCFFFont_OffsetItem *) nil_chk(offItem_)) setWithInt:self->myOffset_ - ((ComItextpdfTextPdfCFFFont_IndexBaseItem *) nil_chk(indexBase_))->myOffset_];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_SubrMarkerItem *)other {
  [super copyAllFieldsTo:other];
  other->indexBase_ = indexBase_;
  other->offItem_ = offItem_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfCFFFont_OffsetItem:withComItextpdfTextPdfCFFFont_IndexBaseItem:", "SubrMarkerItem", NULL, 0x1, NULL },
    { "xref", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "offItem_", NULL, 0x2, "Lcom.itextpdf.text.pdf.CFFFont$OffsetItem;", NULL,  },
    { "indexBase_", NULL, 0x2, "Lcom.itextpdf.text.pdf.CFFFont$IndexBaseItem;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_SubrMarkerItem = { "SubrMarkerItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 2, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_SubrMarkerItem;
}

@end


#line 524
@implementation ComItextpdfTextPdfCFFFont_DictOffsetItem

- (instancetype)init {
  if (self = [super init]) {
    
#line 526
    self->size_ = 5;
  }
  return self;
}


#line 529
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 530
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += size_;
}


#line 535
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  if (size_ == 5) {
    *IOSByteArray_GetRef(nil_chk(buffer), myOffset_) = 29;
    *IOSByteArray_GetRef(buffer, myOffset_ + 1) = (jbyte) ((URShift32(value_, 24)) & (jint) 0xff);
    *IOSByteArray_GetRef(buffer, myOffset_ + 2) = (jbyte) ((URShift32(value_, 16)) & (jint) 0xff);
    *IOSByteArray_GetRef(buffer, myOffset_ + 3) = (jbyte) ((URShift32(value_, 8)) & (jint) 0xff);
    *IOSByteArray_GetRef(buffer, myOffset_ + 4) = (jbyte) ((URShift32(value_, 0)) & (jint) 0xff);
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_DictOffsetItem *)other {
  [super copyAllFieldsTo:other];
  other->size_ = size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DictOffsetItem", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "size_", NULL, 0x11, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_DictOffsetItem = { "DictOffsetItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_DictOffsetItem;
}

@end


#line 549
@implementation ComItextpdfTextPdfCFFFont_UInt24Item

- (instancetype)initWithInt:(jint)value {
  if (self = [super init]) {
    
#line 551
    self->value_ = value;
  }
  return self;
}


#line 554
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 555
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += 3;
}


#line 560
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + 0) = (jbyte) ((URShift32(value_, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(buffer, myOffset_ + 1) = (jbyte) ((URShift32(value_, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(buffer, myOffset_ + 2) = (jbyte) ((URShift32(value_, 0)) & (jint) 0xff);
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_UInt24Item *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "UInt24Item", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x1, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_UInt24Item = { "UInt24Item", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_UInt24Item;
}

@end


#line 570
@implementation ComItextpdfTextPdfCFFFont_UInt32Item

- (instancetype)initWithInt:(jint)value {
  if (self = [super init]) {
    
#line 572
    self->value_ = value;
  }
  return self;
}


#line 575
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 576
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += 4;
}


#line 581
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + 0) = (jbyte) ((URShift32(value_, 24)) & (jint) 0xff);
  *IOSByteArray_GetRef(buffer, myOffset_ + 1) = (jbyte) ((URShift32(value_, 16)) & (jint) 0xff);
  *IOSByteArray_GetRef(buffer, myOffset_ + 2) = (jbyte) ((URShift32(value_, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(buffer, myOffset_ + 3) = (jbyte) ((URShift32(value_, 0)) & (jint) 0xff);
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_UInt32Item *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "UInt32Item", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x1, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_UInt32Item = { "UInt32Item", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_UInt32Item;
}

@end


#line 592
@implementation ComItextpdfTextPdfCFFFont_UInt16Item

- (instancetype)initWithChar:(jchar)value {
  if (self = [super init]) {
    
#line 594
    self->value_ = value;
  }
  return self;
}


#line 597
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 598
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += 2;
}


#line 603
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + 0) = (jbyte) ((URShift32(value_, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(buffer, myOffset_ + 1) = (jbyte) ((URShift32(value_, 0)) & (jint) 0xff);
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_UInt16Item *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithChar:", "UInt16Item", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x1, "C", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_UInt16Item = { "UInt16Item", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_UInt16Item;
}

@end


#line 612
@implementation ComItextpdfTextPdfCFFFont_UInt8Item

- (instancetype)initWithChar:(jchar)value {
  if (self = [super init]) {
    
#line 614
    self->value_ = value;
  }
  return self;
}


#line 617
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 618
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += 1;
}


#line 623
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + 0) = (jbyte) ((URShift32(value_, 0)) & (jint) 0xff);
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_UInt8Item *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithChar:", "UInt8Item", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x1, "C", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_UInt8Item = { "UInt8Item", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_UInt8Item;
}

@end


#line 628
@implementation ComItextpdfTextPdfCFFFont_StringItem

- (instancetype)initWithNSString:(NSString *)s {
  if (self = [super init]) {
    
#line 630
    self->s_ = s;
  }
  return self;
}


#line 633
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 634
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += ((jint) [((NSString *) nil_chk(s_)) length]);
}


#line 638
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  
#line 639
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s_)) length]); i++)
#line 640
  *IOSByteArray_GetRef(nil_chk(buffer), myOffset_ + i) = (jbyte) ([s_ charAtWithInt:i] & (jint) 0xff);
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_StringItem *)other {
  [super copyAllFieldsTo:other];
  other->s_ = s_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "StringItem", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "s_", NULL, 0x1, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_StringItem = { "StringItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_StringItem;
}

@end


#line 650
@implementation ComItextpdfTextPdfCFFFont_DictNumberItem


#line 653
- (instancetype)initWithInt:(jint)value {
  if (self = [super init]) {
    size_ =
#line 652
    5;
    
#line 653
    self->value_ = value;
  }
  return self;
}


#line 655
- (void)incrementWithIntArray:(IOSIntArray *)currentOffset {
  
#line 656
  [super incrementWithIntArray:currentOffset];
  *IOSIntArray_GetRef(nil_chk(currentOffset), 0) += size_;
}


#line 661
- (void)emitWithByteArray:(IOSByteArray *)buffer {
  if (size_ == 5) {
    *IOSByteArray_GetRef(nil_chk(buffer), myOffset_) = 29;
    *IOSByteArray_GetRef(buffer, myOffset_ + 1) = (jbyte) ((URShift32(value_, 24)) & (jint) 0xff);
    *IOSByteArray_GetRef(buffer, myOffset_ + 2) = (jbyte) ((URShift32(value_, 16)) & (jint) 0xff);
    *IOSByteArray_GetRef(buffer, myOffset_ + 3) = (jbyte) ((URShift32(value_, 8)) & (jint) 0xff);
    *IOSByteArray_GetRef(buffer, myOffset_ + 4) = (jbyte) ((URShift32(value_, 0)) & (jint) 0xff);
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_DictNumberItem *)other {
  [super copyAllFieldsTo:other];
  other->size_ = size_;
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "DictNumberItem", NULL, 0x1, NULL },
    { "incrementWithIntArray:", "increment", "V", 0x1, NULL },
    { "emitWithByteArray:", "emit", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x11, "I", NULL,  },
    { "size_", NULL, 0x1, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_DictNumberItem = { "DictNumberItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 3, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_DictNumberItem;
}

@end


#line 676
@implementation ComItextpdfTextPdfCFFFont_MarkerItem

- (instancetype)initWithComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)pointerToMarker {
  if (self = [super init]) {
    
#line 678
    p_ = pointerToMarker;
  }
  return self;
}


#line 680
- (void)xref {
  
#line 681
  [((ComItextpdfTextPdfCFFFont_OffsetItem *) nil_chk(p_)) setWithInt:self->myOffset_];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_MarkerItem *)other {
  [super copyAllFieldsTo:other];
  other->p_ = p_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfCFFFont_OffsetItem:", "MarkerItem", NULL, 0x1, NULL },
    { "xref", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "p_", NULL, 0x0, "Lcom.itextpdf.text.pdf.CFFFont$OffsetItem;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_MarkerItem = { "MarkerItem", "com.itextpdf.text.pdf", "CFFFont", 0x1c, 2, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_MarkerItem;
}

@end


#line 1015
@implementation ComItextpdfTextPdfCFFFont_Font

- (instancetype)initWithComItextpdfTextPdfCFFFont:(ComItextpdfTextPdfCFFFont *)outer$ {
  if (self = [super init]) {
    isCID_ =
#line 1018
    NO;
    privateOffset_ =
#line 1019
    -1;
    privateLength_ =
#line 1020
    -1;
    privateSubrs_ =
#line 1021
    -1;
    charstringsOffset_ =
#line 1022
    -1;
    encodingOffset_ =
#line 1023
    -1;
    charsetOffset_ =
#line 1024
    -1;
    fdarrayOffset_ =
#line 1025
    -1;
    fdselectOffset_ =
#line 1026
    -1;
    CharstringType_ =
#line 1040
    2;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFont_Font *)other {
  [super copyAllFieldsTo:other];
  other->CharsetLength_ = CharsetLength_;
  other->CharstringType_ = CharstringType_;
  other->FDArrayCount_ = FDArrayCount_;
  other->FDArrayOffsets_ = FDArrayOffsets_;
  other->FDArrayOffsize_ = FDArrayOffsize_;
  other->FDSelect_ = FDSelect_;
  other->FDSelectFormat_ = FDSelectFormat_;
  other->FDSelectLength_ = FDSelectLength_;
  other->PrivateSubrsOffset_ = PrivateSubrsOffset_;
  other->PrivateSubrsOffsetsArray_ = PrivateSubrsOffsetsArray_;
  other->SubrsOffsets_ = SubrsOffsets_;
  other->charset_ = charset_;
  other->charsetOffset_ = charsetOffset_;
  other->charstringsOffset_ = charstringsOffset_;
  other->charstringsOffsets_ = charstringsOffsets_;
  other->encodingOffset_ = encodingOffset_;
  other->fdarrayOffset_ = fdarrayOffset_;
  other->fdprivateLengths_ = fdprivateLengths_;
  other->fdprivateOffsets_ = fdprivateOffsets_;
  other->fdprivateSubrs_ = fdprivateSubrs_;
  other->fdselectOffset_ = fdselectOffset_;
  other->fullName_ = fullName_;
  other->isCID_ = isCID_;
  other->name_ = name_;
  other->nglyphs_ = nglyphs_;
  other->nstrings_ = nstrings_;
  other->privateLength_ = privateLength_;
  other->privateOffset_ = privateOffset_;
  other->privateSubrs_ = privateSubrs_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfCFFFont:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x1, "Ljava.lang.String;", NULL,  },
    { "fullName_", NULL, 0x1, "Ljava.lang.String;", NULL,  },
    { "isCID_", NULL, 0x1, "Z", NULL,  },
    { "privateOffset_", NULL, 0x1, "I", NULL,  },
    { "privateLength_", NULL, 0x1, "I", NULL,  },
    { "privateSubrs_", NULL, 0x1, "I", NULL,  },
    { "charstringsOffset_", NULL, 0x1, "I", NULL,  },
    { "encodingOffset_", NULL, 0x1, "I", NULL,  },
    { "charsetOffset_", NULL, 0x1, "I", NULL,  },
    { "fdarrayOffset_", NULL, 0x1, "I", NULL,  },
    { "fdselectOffset_", NULL, 0x1, "I", NULL,  },
    { "fdprivateOffsets_", NULL, 0x1, "[I", NULL,  },
    { "fdprivateLengths_", NULL, 0x1, "[I", NULL,  },
    { "fdprivateSubrs_", NULL, 0x1, "[I", NULL,  },
    { "nglyphs_", NULL, 0x1, "I", NULL,  },
    { "nstrings_", NULL, 0x1, "I", NULL,  },
    { "CharsetLength_", NULL, 0x1, "I", NULL,  },
    { "charstringsOffsets_", NULL, 0x1, "[I", NULL,  },
    { "charset_", NULL, 0x1, "[I", NULL,  },
    { "FDSelect_", NULL, 0x1, "[I", NULL,  },
    { "FDSelectLength_", NULL, 0x1, "I", NULL,  },
    { "FDSelectFormat_", NULL, 0x1, "I", NULL,  },
    { "CharstringType_", NULL, 0x1, "I", NULL,  },
    { "FDArrayCount_", NULL, 0x1, "I", NULL,  },
    { "FDArrayOffsize_", NULL, 0x1, "I", NULL,  },
    { "FDArrayOffsets_", NULL, 0x1, "[I", NULL,  },
    { "PrivateSubrsOffset_", NULL, 0x1, "[I", NULL,  },
    { "PrivateSubrsOffsetsArray_", NULL, 0x1, "[[I", NULL,  },
    { "SubrsOffsets_", NULL, 0x1, "[I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFont_Font = { "Font", "com.itextpdf.text.pdf", "CFFFont", 0x14, 1, methods, 29, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFont_Font;
}

@end
