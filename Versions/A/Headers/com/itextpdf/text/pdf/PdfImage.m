//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfImage.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfImage.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BadPdfFormatException.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfImage.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfOCG.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/net/URL.h"
#include "java/util/HashMap.h"


#line 59
@implementation ComItextpdfTextPdfPdfImage


#line 79
- (instancetype)initWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                                withNSString:(NSString *)name
  withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)maskRef {
  if (self =
#line 80
  [super init]) {
    name__ =
#line 65
    nil;
    image_ =
#line 67
    nil;
    
#line 81
    self->image_ = image;
    
#line 82
    if (name == nil)
#line 83
    [self generateImgResNameWithComItextpdfTextImage:image];
    else
#line 85
    self->name__ = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:name];
    
#line 86
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_XOBJECT_()];
    
#line 87
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_IMAGE_()];
    
#line 88
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIDTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:[((ComItextpdfTextImage *) nil_chk(image)) getWidth]]];
    
#line 89
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HEIGHT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:[image getHeight]]];
    
#line 90
    if ([image getLayer] != nil)
#line 91
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OC_() withComItextpdfTextPdfPdfObject:[((id<ComItextpdfTextPdfPdfOCG>) nil_chk([image getLayer])) getRef]];
    
#line 92
    if ([image isMask] && ([image getBpc] == 1 || [image getBpc] > (jint) 0xff))
#line 93
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_IMAGEMASK_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
    
#line 94
    if (maskRef != nil) {
      if ([image isSmask])
#line 96
      [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SMASK_() withComItextpdfTextPdfPdfObject:maskRef];
      else
#line 98
      [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MASK_() withComItextpdfTextPdfPdfObject:maskRef];
    }
    
#line 100
    if ([image isMask] && [image isInverted])
#line 101
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:@"[1 0]"]];
    
#line 102
    if ([image isInterpolation])
#line 103
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INTERPOLATE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
    
#line 104
    JavaIoInputStream *is = nil;
    
#line 105
    @try {
      
#line 107
      IOSIntArray *transparency = [image getTransparency];
      if (transparency != nil && ![image isMask] && maskRef == nil) {
        JavaLangStringBuilder *s = [[JavaLangStringBuilder alloc] initWithNSString:@"["];
        for (jint k = 0; k < transparency->size_; ++k)
#line 111
        (void) [((JavaLangStringBuilder *) nil_chk([s appendWithInt:IOSIntArray_Get(transparency, k)])) appendWithNSString:@" "];
        (void) [s appendWithNSString:@"]"];
        [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MASK_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:[s description]]];
      }
      
#line 116
      if ([image isImgRaw]) {
        
#line 118
        jint colorspace = [image getColorspace];
        bytes_ = [image getRawData];
        [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:((IOSByteArray *) nil_chk(bytes_))->size_]];
        jint bpc = [image getBpc];
        if (bpc > (jint) 0xff) {
          if (![image isMask])
#line 124
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()];
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:1]];
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CCITTFAXDECODE_()];
          jint k = bpc - ComItextpdfTextElement_CCITTG3_1D;
          ComItextpdfTextPdfPdfDictionary *decodeparms = [[ComItextpdfTextPdfPdfDictionary alloc] init];
          if (k != 0)
#line 130
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:k]];
          if ((colorspace & ComItextpdfTextElement_CCITT_BLACKIS1) != 0)
#line 132
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BLACKIS1_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
          if ((colorspace & ComItextpdfTextElement_CCITT_ENCODEDBYTEALIGN) != 0)
#line 134
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODEDBYTEALIGN_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
          if ((colorspace & ComItextpdfTextElement_CCITT_ENDOFLINE) != 0)
#line 136
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENDOFLINE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
          if ((colorspace & ComItextpdfTextElement_CCITT_ENDOFBLOCK) != 0)
#line 138
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENDOFBLOCK_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFFALSE_()];
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLUMNS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:[image getWidth]]];
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROWS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:[image getHeight]]];
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODEPARMS_() withComItextpdfTextPdfPdfObject:decodeparms];
        }
        else {
          switch (colorspace) {
            case 1:
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()];
            if ([image isInverted])
#line 148
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:@"[1 0]"]];
            break;
            case 3:
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
            if ([image isInverted])
#line 153
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:@"[1 0 1 0 1 0]"]];
            break;
            case 4:
            default:
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICECMYK_()];
            if ([image isInverted])
#line 159
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:@"[1 0 1 0 1 0 1 0]"]];
          }
          ComItextpdfTextPdfPdfDictionary *additional = [image getAdditional];
          if (additional != nil)
#line 163
          [self putAllWithComItextpdfTextPdfPdfDictionary:additional];
          if ([image isMask] && ([image getBpc] == 1 || [image getBpc] > 8))
#line 165
          [self removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_()];
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[image getBpc]]];
          if ([image isDeflated])
#line 168
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_FLATEDECODE_()];
          else {
            [self flateCompressWithInt:[image getCompressionLevel]];
          }
        }
        return self;
      }
      
#line 176
      NSString *errorID;
      if ([image getRawData] == nil) {
        is = [((JavaNetURL *) nil_chk([image getUrl])) openStream];
        errorID = [((JavaNetURL *) nil_chk([image getUrl])) description];
      }
      else {
        is = [[JavaIoByteArrayInputStream alloc] initWithByteArray:[image getRawData]];
        errorID = @"Byte array";
      }
      switch ([image type]) {
        case ComItextpdfTextElement_JPEG:
        [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DCTDECODE_()];
        if ([image getColorTransform] == 0) {
          ComItextpdfTextPdfPdfDictionary *decodeparms = [[ComItextpdfTextPdfPdfDictionary alloc] init];
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORTRANSFORM_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODEPARMS_() withComItextpdfTextPdfPdfObject:decodeparms];
        }
        switch ([image getColorspace]) {
          case 1:
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()];
          break;
          case 3:
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
          break;
          default:
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICECMYK_()];
          if ([image isInverted]) {
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:@"[1 0 1 0 1 0 1 0]"]];
          }
        }
        [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:8]];
        if ([image getRawData] != nil) {
          bytes_ = [image getRawData];
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:((IOSByteArray *) nil_chk(bytes_))->size_]];
          return self;
        }
        streamBytes_ = [[JavaIoByteArrayOutputStream alloc] init];
        [ComItextpdfTextPdfPdfImage transferBytesWithJavaIoInputStream:is withJavaIoOutputStream:streamBytes_ withInt:-1];
        break;
        case ComItextpdfTextElement_JPEG2000:
        [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_JPXDECODE_()];
        if ([image getColorspace] > 0) {
          switch ([image getColorspace]) {
            case 1:
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()];
            break;
            case 3:
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
            break;
            default:
            [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICECMYK_()];
          }
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[image getBpc]]];
        }
        if ([image getRawData] != nil) {
          bytes_ = [image getRawData];
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:((IOSByteArray *) nil_chk(bytes_))->size_]];
          return self;
        }
        streamBytes_ = [[JavaIoByteArrayOutputStream alloc] init];
        [ComItextpdfTextPdfPdfImage transferBytesWithJavaIoInputStream:is withJavaIoOutputStream:streamBytes_ withInt:-1];
        break;
        case ComItextpdfTextElement_JBIG2:
        [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_JBIG2DECODE_()];
        [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()];
        [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:1]];
        if ([image getRawData] != nil) {
          bytes_ = [image getRawData];
          [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:((IOSByteArray *) nil_chk(bytes_))->size_]];
          return self;
        }
        streamBytes_ = [[JavaIoByteArrayOutputStream alloc] init];
        [ComItextpdfTextPdfPdfImage transferBytesWithJavaIoInputStream:is withJavaIoOutputStream:streamBytes_ withInt:-1];
        break;
        default:
        @throw [[ComItextpdfTextPdfBadPdfFormatException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.is.an.unknown.image.format" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ errorID } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
      [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[((JavaIoByteArrayOutputStream *) nil_chk(streamBytes_)) size]]];
    }
    @catch (JavaIoIOException *ioe) {
      @throw [[ComItextpdfTextPdfBadPdfFormatException alloc] initWithNSString:[((JavaIoIOException *) nil_chk(ioe)) getMessage]];
    }
    @finally {
      if (is != nil) {
        @try {
          [is close];
        }
        @catch (JavaLangException *ee) {
        }
      }
    }
  }
  return self;
}


#line 276
- (ComItextpdfTextPdfPdfName *)name {
  
#line 277
  return name__;
}


#line 280
- (ComItextpdfTextImage *)getImage {
  
#line 281
  return image_;
}


#line 284
+ (void)transferBytesWithJavaIoInputStream:(JavaIoInputStream *)inArg
                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                   withInt:(jint)len {
  
#line 285
  IOSByteArray *buffer = [IOSByteArray arrayWithLength:ComItextpdfTextPdfPdfImage_TRANSFERSIZE];
  if (len < 0)
#line 287
  len = (jint) 0x7fff0000;
  jint size;
  while (len != 0) {
    size = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:buffer withInt:0 withInt:[JavaLangMath minWithInt:len withInt:ComItextpdfTextPdfPdfImage_TRANSFERSIZE]];
    if (size < 0)
#line 292
    return;
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buffer withInt:0 withInt:size];
    len -= size;
  }
}


#line 298
- (void)importAllWithComItextpdfTextPdfPdfImage:(ComItextpdfTextPdfPdfImage *)dup {
  
#line 299
  name__ = ((ComItextpdfTextPdfPdfImage *) nil_chk(dup))->name__;
  compressed_ = dup->compressed_;
  compressionLevel_ = dup->compressionLevel_;
  streamBytes_ = dup->streamBytes_;
  bytes_ = dup->bytes_;
  hashMap_ = dup->hashMap_;
}


#line 312
- (void)generateImgResNameWithComItextpdfTextImage:(ComItextpdfTextImage *)img {
  
#line 313
  name__ = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$", @"img", [JavaLangLong toHexStringWithLong:[((JavaLangLong *) nil_chk([((ComItextpdfTextImage *) nil_chk(img)) getMySerialId])) longLongValue]])];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfImage *)other {
  [super copyAllFieldsTo:other];
  other->image_ = image_;
  other->name__ = name__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextImage:withNSString:withComItextpdfTextPdfPdfIndirectReference:", "PdfImage", NULL, 0x1, "Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "name", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x1, NULL },
    { "transferBytesWithJavaIoInputStream:withJavaIoOutputStream:withInt:", "transferBytes", "V", 0x8, "Ljava.io.IOException;" },
    { "importAllWithComItextpdfTextPdfPdfImage:", "importAll", "V", 0x4, NULL },
    { "generateImgResNameWithComItextpdfTextImage:", "generateImgResName", "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TRANSFERSIZE_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfImage_TRANSFERSIZE },
    { "name__", "name", 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "image_", NULL, 0x4, "Lcom.itextpdf.text.Image;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfImage = { "PdfImage", "com.itextpdf.text.pdf", NULL, 0x1, 6, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfImage;
}

@end
