//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfCopyForms.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfCopyForms.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocWriter.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/pdf/PdfCopyForms.h"
#include "com/itextpdf/text/pdf/PdfCopyFormsImp.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/SequenceList.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/util/List.h"


#line 64
@implementation ComItextpdfTextPdfPdfCopyForms


#line 75
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self = [super init]) {
    
#line 76
    fc_ = [[ComItextpdfTextPdfPdfCopyFormsImp alloc] initWithJavaIoOutputStream:os];
  }
  return self;
}

- (void)addDocumentWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 85
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) addDocumentWithComItextpdfTextPdfPdfReader:reader];
}


#line 96
- (void)addDocumentWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                  withJavaUtilList:(id<JavaUtilList>)pagesToKeep {
  
#line 97
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) addDocumentWithComItextpdfTextPdfPdfReader:reader withJavaUtilList:pagesToKeep];
}


#line 108
- (void)addDocumentWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                      withNSString:(NSString *)ranges {
  
#line 109
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) addDocumentWithComItextpdfTextPdfPdfReader:reader withJavaUtilList:[ComItextpdfTextPdfSequenceList expandWithNSString:ranges withInt:[((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getNumberOfPages]]];
}


#line 117
- (void)copyDocumentFieldsWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 118
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) copyDocumentFieldsWithComItextpdfTextPdfPdfReader:reader];
}


#line 133
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                       withBoolean:(jboolean)strength128Bits {
  
#line 134
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withInt:strength128Bits ? ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_128 : ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_40];
}


#line 150
- (void)setEncryptionWithBoolean:(jboolean)strength
                    withNSString:(NSString *)userPassword
                    withNSString:(NSString *)ownerPassword
                         withInt:(jint)permissions {
  
#line 151
  [self setEncryptionWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:userPassword] withByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:ownerPassword] withInt:permissions withBoolean:strength];
}


#line 157
- (void)close {
  
#line 158
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) close];
}


#line 165
- (void)open {
  
#line 166
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) openDoc];
}


#line 173
- (void)addJavaScriptWithNSString:(NSString *)js {
  
#line 174
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) addJavaScriptWithNSString:js withBoolean:![ComItextpdfTextPdfPdfEncodings isPdfDocEncodingWithNSString:js]];
}


#line 182
- (void)setOutlinesWithJavaUtilList:(id<JavaUtilList>)outlines {
  
#line 183
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) setOutlinesWithJavaUtilList:outlines];
}


#line 189
- (ComItextpdfTextPdfPdfWriter *)getWriter {
  
#line 190
  return fc_;
}


#line 197
- (jboolean)isFullCompression {
  
#line 198
  return [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) isFullCompression];
}


#line 207
- (void)setFullCompression {
  
#line 208
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) setFullCompression];
}


#line 214
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                           withInt:(jint)encryptionType {
  
#line 215
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withInt:encryptionType];
}


#line 221
- (void)addViewerPreferenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                         withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 222
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) addViewerPreferenceWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
}

- (void)setViewerPreferencesWithInt:(jint)preferences {
  
#line 229
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) setViewerPreferencesWithInt:preferences];
}


#line 235
- (void)setEncryptionWithJavaSecurityCertCertificateArray:(IOSObjectArray *)certs
                                             withIntArray:(IOSIntArray *)permissions
                                                  withInt:(jint)encryptionType {
  
#line 236
  [((ComItextpdfTextPdfPdfCopyFormsImp *) nil_chk(fc_)) setEncryptionWithJavaSecurityCertCertificateArray:certs withIntArray:permissions withInt:encryptionType];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfCopyForms *)other {
  [super copyAllFieldsTo:other];
  other->fc_ = fc_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoOutputStream:", "PdfCopyForms", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addDocumentWithComItextpdfTextPdfPdfReader:", "addDocument", "V", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "addDocumentWithComItextpdfTextPdfPdfReader:withJavaUtilList:", "addDocument", "V", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "addDocumentWithComItextpdfTextPdfPdfReader:withNSString:", "addDocument", "V", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "copyDocumentFieldsWithComItextpdfTextPdfPdfReader:", "copyDocumentFields", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithByteArray:withByteArray:withInt:withBoolean:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithBoolean:withNSString:withNSString:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "close", NULL, "V", 0x1, NULL },
    { "open", NULL, "V", 0x1, NULL },
    { "addJavaScriptWithNSString:", "addJavaScript", "V", 0x1, NULL },
    { "setOutlinesWithJavaUtilList:", "setOutlines", "V", 0x1, NULL },
    { "getWriter", NULL, "Lcom.itextpdf.text.pdf.PdfWriter;", 0x1, NULL },
    { "isFullCompression", NULL, "Z", 0x1, NULL },
    { "setFullCompression", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithByteArray:withByteArray:withInt:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addViewerPreferenceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "addViewerPreference", "V", 0x1, NULL },
    { "setViewerPreferencesWithInt:", "setViewerPreferences", "V", 0x1, NULL },
    { "setEncryptionWithJavaSecurityCertCertificateArray:withIntArray:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fc_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfCopyFormsImp;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfCopyForms = { "PdfCopyForms", "com.itextpdf.text.pdf", NULL, 0x1, 18, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfCopyForms;
}

@end
