//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/Barcode39.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/Barcode39.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/Barcode39.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"

BOOL ComItextpdfTextPdfBarcode39_initialized = NO;


#line 71
@implementation ComItextpdfTextPdfBarcode39

IOSObjectArray * ComItextpdfTextPdfBarcode39_BARS_;
NSString * ComItextpdfTextPdfBarcode39_CHARS_ = 
#line 125
@"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%*";
NSString * ComItextpdfTextPdfBarcode39_EXTENDED_ = @"%U$A$B$C$D$E$F$G$H$I$J$K$L$M$N$O$P$Q$R$S$T$U$V$W$X$Y$Z%A%B%C%D%E  /A/B/C/D/E/F/G/H/I/J/K/L - ./O 0 1 2 3 4 5 6 7 8 9/Z%F%G%H%I%J%V A B C D E F G H I J K L M N O P Q R S T U V W X Y Z%K%L%M%N%O%W+A+B+C+D+E+F+G+H+I+J+K+L+M+N+O+P+Q+R+S+T+U+V+W+X+Y+Z%P%Q%R%S%T";


#line 140
- (instancetype)init {
  if (self = [super init]) {
    
#line 141
    @try {
      x_ = 0.8f;
      n_ = 2;
      font_ = [ComItextpdfTextPdfBaseFont createFontWithNSString:@"Helvetica" withNSString:@"winansi" withBoolean:NO];
      size_ = 8;
      baseline_ = size_;
      barHeight_ = size_ * 3;
      textAlignment_ = ComItextpdfTextElement_ALIGN_CENTER;
      generateChecksum_ = NO;
      checksumText_ = NO;
      startStopText_ = YES;
      extended_ = NO;
    }
    @catch (JavaLangException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
  }
  return self;
}

+ (IOSByteArray *)getBarsCode39WithNSString:(NSString *)text {
  
#line 165
  text = JreStrcat("C$C", '*', text, '*');
  IOSByteArray *bars = [IOSByteArray arrayWithLength:((jint) [text length]) * 10 - 1];
  for (jint k = 0; k < ((jint) [text length]); ++k) {
    jint idx = [((NSString *) nil_chk(ComItextpdfTextPdfBarcode39_CHARS_)) indexOf:[text charAtWithInt:k]];
    if (idx < 0)
#line 170
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.character.1.is.illegal.in.code.39" withInt:[text charAtWithInt:k]]];
    [JavaLangSystem arraycopyWithId:IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfBarcode39_BARS_), idx) withInt:0 withId:bars withInt:k * 10 withInt:9];
  }
  return bars;
}


#line 181
+ (NSString *)getCode39ExWithNSString:(NSString *)text {
  
#line 182
  JavaLangStringBuilder *out = [[JavaLangStringBuilder alloc] initWithNSString:@""];
  for (jint k = 0; k < ((jint) [((NSString *) nil_chk(text)) length]); ++k) {
    jchar c = [text charAtWithInt:k];
    if (c > 127)
#line 186
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.character.1.is.illegal.in.code.39.extended" withInt:c]];
    jchar c1 = [((NSString *) nil_chk(ComItextpdfTextPdfBarcode39_EXTENDED_)) charAtWithInt:c * 2];
    jchar c2 = [ComItextpdfTextPdfBarcode39_EXTENDED_ charAtWithInt:c * 2 + 1];
    if (c1 != ' ')
#line 190
    (void) [out appendWithChar:c1];
    (void) [out appendWithChar:c2];
  }
  return [out description];
}

+ (jchar)getChecksumWithNSString:(NSString *)text {
  
#line 201
  jint chk = 0;
  for (jint k = 0; k < ((jint) [((NSString *) nil_chk(text)) length]); ++k) {
    jint idx = [((NSString *) nil_chk(ComItextpdfTextPdfBarcode39_CHARS_)) indexOf:[text charAtWithInt:k]];
    if (idx < 0)
#line 205
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.character.1.is.illegal.in.code.39" withInt:[text charAtWithInt:k]]];
    chk += idx;
  }
  return [((NSString *) nil_chk(ComItextpdfTextPdfBarcode39_CHARS_)) charAtWithInt:chk % 43];
}


#line 215
- (ComItextpdfTextRectangle *)getBarcodeSize {
  
#line 216
  jfloat fontX = 0;
  jfloat fontY = 0;
  NSString *fCode = code_;
  if (extended_)
#line 220
  fCode = [ComItextpdfTextPdfBarcode39 getCode39ExWithNSString:code_];
  if (font_ != nil) {
    if (baseline_ > 0)
#line 223
    fontY = baseline_ - [font_ getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:size_];
    else
#line 225
    fontY = -baseline_ + size_;
    NSString *fullCode = code_;
    if (generateChecksum_ && checksumText_)
#line 228
    fullCode = JreStrcat("$C", fullCode, [ComItextpdfTextPdfBarcode39 getChecksumWithNSString:fCode]);
    if (startStopText_)
#line 230
    fullCode = JreStrcat("C$C", '*', fullCode, '*');
    fontX = [font_ getWidthPointWithNSString:altText_ != nil ? altText_ : fullCode withFloat:size_];
  }
  jint len = ((jint) [((NSString *) nil_chk(fCode)) length]) + 2;
  if (generateChecksum_)
#line 235
  ++len;
  jfloat fullWidth = len * (6 * x_ + 3 * x_ * n_) + (len - 1) * x_;
  fullWidth = [JavaLangMath maxWithFloat:fullWidth withFloat:fontX];
  jfloat fullHeight = barHeight_ + fontY;
  return [[ComItextpdfTextRectangle alloc] initWithFloat:fullWidth withFloat:fullHeight];
}


#line 278
- (ComItextpdfTextRectangle *)placeBarcodeWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)cb
                                                  withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)barColor
                                                  withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)textColor {
  
#line 279
  NSString *fullCode = code_;
  jfloat fontX = 0;
  NSString *bCode = code_;
  if (extended_)
#line 283
  bCode = [ComItextpdfTextPdfBarcode39 getCode39ExWithNSString:code_];
  if (font_ != nil) {
    if (generateChecksum_ && checksumText_)
#line 286
    fullCode = JreStrcat("$C", fullCode, [ComItextpdfTextPdfBarcode39 getChecksumWithNSString:bCode]);
    if (startStopText_)
#line 288
    fullCode = JreStrcat("C$C", '*', fullCode, '*');
    fontX = [font_ getWidthPointWithNSString:fullCode = altText_ != nil ? altText_ : fullCode withFloat:size_];
  }
  if (generateChecksum_)
#line 292
  bCode = JreStrcat("$C", bCode, [ComItextpdfTextPdfBarcode39 getChecksumWithNSString:bCode]);
  jint len = ((jint) [((NSString *) nil_chk(bCode)) length]) + 2;
  jfloat fullWidth = len * (6 * x_ + 3 * x_ * n_) + (len - 1) * x_;
  jfloat barStartX = 0;
  jfloat textStartX = 0;
  switch (textAlignment_) {
    case ComItextpdfTextElement_ALIGN_LEFT:
    break;
    case ComItextpdfTextElement_ALIGN_RIGHT:
    if (fontX > fullWidth)
#line 302
    barStartX = fontX - fullWidth;
    else
#line 304
    textStartX = fullWidth - fontX;
    break;
    default:
    if (fontX > fullWidth)
#line 308
    barStartX = (fontX - fullWidth) / 2;
    else
#line 310
    textStartX = (fullWidth - fontX) / 2;
    break;
  }
  jfloat barStartY = 0;
  jfloat textStartY = 0;
  if (font_ != nil) {
    if (baseline_ <= 0)
#line 317
    textStartY = barHeight_ - baseline_;
    else {
      textStartY = -[font_ getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:size_];
      barStartY = textStartY + baseline_;
    }
  }
  IOSByteArray *bars = [ComItextpdfTextPdfBarcode39 getBarsCode39WithNSString:bCode];
  jboolean print = YES;
  if (barColor != nil)
#line 326
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) setColorFillWithComItextpdfTextBaseColor:barColor];
  for (jint k = 0; k < ((IOSByteArray *) nil_chk(bars))->size_; ++k) {
    jfloat w = (IOSByteArray_Get(bars, k) == 0 ? x_ : x_ * n_);
    if (print)
#line 330
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) rectangleWithFloat:barStartX withFloat:barStartY withFloat:w - inkSpreading_ withFloat:barHeight_];
    print = !print;
    barStartX += w;
  }
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) fill];
  if (font_ != nil) {
    if (textColor != nil)
#line 337
    [cb setColorFillWithComItextpdfTextBaseColor:textColor];
    [cb beginText];
    [cb setFontAndSizeWithComItextpdfTextPdfBaseFont:font_ withFloat:size_];
    [cb setTextMatrixWithFloat:textStartX withFloat:textStartY];
    [cb showTextWithNSString:fullCode];
    [cb endText];
  }
  return [self getBarcodeSize];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfBarcode39 class]) {
    ComItextpdfTextPdfBarcode39_BARS_ = [IOSObjectArray arrayWithObjects:(id[]){ [IOSByteArray arrayWithBytes:(jbyte[]){
#line 77
      0, 0, 0, 1, 1, 0, 1, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 78
        1, 0, 0, 1, 0, 0, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 79
          0, 0, 1, 1, 0, 0, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 80
            1, 0, 1, 1, 0, 0, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 81
              0, 0, 0, 1, 1, 0, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 82
                1, 0, 0, 1, 1, 0, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 83
                  0, 0, 1, 1, 1, 0, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 84
                    0, 0, 0, 1, 0, 0, 1, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 85
                      1, 0, 0, 1, 0, 0, 1, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 86
                        0, 0, 1, 1, 0, 0, 1, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 87
                          1, 0, 0, 0, 0, 1, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 88
                            0, 0, 1, 0, 0, 1, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 89
                              1, 0, 1, 0, 0, 1, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 90
                                0, 0, 0, 0, 1, 1, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 91
                                  1, 0, 0, 0, 1, 1, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 92
                                    0, 0, 1, 0, 1, 1, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 93
                                      0, 0, 0, 0, 0, 1, 1, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 94
                                        1, 0, 0, 0, 0, 1, 1, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 95
                                          0, 0, 1, 0, 0, 1, 1, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 96
                                            0, 0, 0, 0, 1, 1, 1, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 97
                                              1, 0, 0, 0, 0, 0, 0, 1, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 98
                                                0, 0, 1, 0, 0, 0, 0, 1, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 99
                                                  1, 0, 1, 0, 0, 0, 0, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 100
                                                    0, 0, 0, 0, 1, 0, 0, 1, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 101
                                                      1, 0, 0, 0, 1, 0, 0, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 102
                                                        0, 0, 1, 0, 1, 0, 0, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 103
                                                          0, 0, 0, 0, 0, 0, 1, 1, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 104
                                                            1, 0, 0, 0, 0, 0, 1, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 105
                                                              0, 0, 1, 0, 0, 0, 1, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 106
                                                                0, 0, 0, 0, 1, 0, 1, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 107
                                                                  1, 1, 0, 0, 0, 0, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 108
                                                                    0, 1, 1, 0, 0, 0, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 109
                                                                      1, 1, 1, 0, 0, 0, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 110
                                                                        0, 1, 0, 0, 1, 0, 0, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 111
                                                                          1, 1, 0, 0, 1, 0, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 112
                                                                            0, 1, 1, 0, 1, 0, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 113
                                                                              0, 1, 0, 0, 0, 0, 1, 0, 1 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 114
                                                                                1, 1, 0, 0, 0, 0, 1, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 115
                                                                                  0, 1, 1, 0, 0, 0, 1, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 116
                                                                                    0, 1, 0, 1, 0, 1, 0, 0, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 117
                                                                                      0, 1, 0, 1, 0, 0, 0, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 118
                                                                                        0, 1, 0, 0, 0, 1, 0, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 119
                                                                                          0, 0, 0, 1, 0, 1, 0, 1, 0 } count:9], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 120
                                                                                            0, 1, 0, 0, 1, 0, 1, 0, 0 } count:9] } count:44 type:[IOSByteArray iosClass]];
                                                                                            ComItextpdfTextPdfBarcode39_initialized = YES;
                                                                                          }
                                                                                        }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Barcode39", NULL, 0x1, NULL },
    { "getBarsCode39WithNSString:", "getBarsCode39", "[B", 0x9, NULL },
    { "getCode39ExWithNSString:", "getCode39Ex", "Ljava.lang.String;", 0x9, NULL },
    { "getChecksumWithNSString:", "getChecksum", "C", 0x8, NULL },
    { "getBarcodeSize", NULL, "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "placeBarcodeWithComItextpdfTextPdfPdfContentByte:withComItextpdfTextBaseColor:withComItextpdfTextBaseColor:", "placeBarcode", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BARS_", NULL, 0x1a, "[[B", &ComItextpdfTextPdfBarcode39_BARS_,  },
    { "CHARS_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfTextPdfBarcode39_CHARS_,  },
    { "EXTENDED_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfTextPdfBarcode39_EXTENDED_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfBarcode39 = { "Barcode39", "com.itextpdf.text.pdf", NULL, 0x1, 6, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfBarcode39;
}

@end
