//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPCell.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPCell.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/ColumnText.h"
#include "com/itextpdf/text/pdf/PdfDiv.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfPCell.h"
#include "com/itextpdf/text/pdf/PdfPCellEvent.h"
#include "com/itextpdf/text/pdf/PdfPHeaderCell.h"
#include "com/itextpdf/text/pdf/PdfPRow.h"
#include "com/itextpdf/text/pdf/PdfPTable.h"
#include "com/itextpdf/text/pdf/events/PdfPCellEventForwarder.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"


#line 60
@implementation ComItextpdfTextPdfPdfPCell


#line 131
- (instancetype)init {
  if (self =
#line 132
  [super initWithFloat:0 withFloat:0 withFloat:0 withFloat:0]) {
    column_ =
#line 62
    [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
    verticalAlignment_ =
#line 65
    ComItextpdfTextElement_ALIGN_TOP;
    paddingLeft_ =
#line 68
    2;
    paddingRight_ =
#line 71
    2;
    paddingTop_ =
#line 74
    2;
    paddingBottom_ =
#line 77
    2;
    fixedHeight_ =
#line 80
    0;
    noWrap_ =
#line 86
    NO;
    colspan_ =
#line 92
    1;
    rowspan_ =
#line 98
    1;
    useDescender_ =
#line 107
    NO;
    useBorderPadding_ =
#line 110
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_TD_();
    accessibleAttributes_ =
#line 122
    nil;
    id__ =
#line 123
    [[ComItextpdfTextAccessibleElementId alloc] init];
    headers_ =
#line 125
    nil;
    
#line 133
    borderWidth_ = 0.5f;
    
#line 134
    border_ = ComItextpdfTextRectangle_BOX;
    
#line 135
    [column_ setLeadingWithFloat:0 withFloat:1];
  }
  return self;
}


#line 144
- (instancetype)initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  if (self =
#line 145
  [super initWithFloat:0 withFloat:0 withFloat:0 withFloat:0]) {
    column_ =
#line 62
    [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
    verticalAlignment_ =
#line 65
    ComItextpdfTextElement_ALIGN_TOP;
    paddingLeft_ =
#line 68
    2;
    paddingRight_ =
#line 71
    2;
    paddingTop_ =
#line 74
    2;
    paddingBottom_ =
#line 77
    2;
    fixedHeight_ =
#line 80
    0;
    noWrap_ =
#line 86
    NO;
    colspan_ =
#line 92
    1;
    rowspan_ =
#line 98
    1;
    useDescender_ =
#line 107
    NO;
    useBorderPadding_ =
#line 110
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_TD_();
    accessibleAttributes_ =
#line 122
    nil;
    id__ =
#line 123
    [[ComItextpdfTextAccessibleElementId alloc] init];
    headers_ =
#line 125
    nil;
    
#line 146
    borderWidth_ = 0.5f;
    
#line 147
    border_ = ComItextpdfTextRectangle_BOX;
    
#line 148
    [column_ addTextWithComItextpdfTextPhrase:self->phrase_ = phrase];
    
#line 149
    [column_ setLeadingWithFloat:0 withFloat:1];
  }
  return self;
}


#line 158
- (instancetype)initWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  return
#line 159
  [self initComItextpdfTextPdfPdfPCellWithComItextpdfTextImage:image withBoolean:NO];
}


#line 169
- (instancetype)initComItextpdfTextPdfPdfPCellWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                                                           withBoolean:(jboolean)fit {
  if (self =
#line 170
  [super initWithFloat:0 withFloat:0 withFloat:0 withFloat:0]) {
    column_ =
#line 62
    [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
    verticalAlignment_ =
#line 65
    ComItextpdfTextElement_ALIGN_TOP;
    paddingLeft_ =
#line 68
    2;
    paddingRight_ =
#line 71
    2;
    paddingTop_ =
#line 74
    2;
    paddingBottom_ =
#line 77
    2;
    fixedHeight_ =
#line 80
    0;
    noWrap_ =
#line 86
    NO;
    colspan_ =
#line 92
    1;
    rowspan_ =
#line 98
    1;
    useDescender_ =
#line 107
    NO;
    useBorderPadding_ =
#line 110
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_TD_();
    accessibleAttributes_ =
#line 122
    nil;
    id__ =
#line 123
    [[ComItextpdfTextAccessibleElementId alloc] init];
    headers_ =
#line 125
    nil;
    
#line 171
    borderWidth_ = 0.5f;
    
#line 172
    border_ = ComItextpdfTextRectangle_BOX;
    
#line 173
    [column_ setLeadingWithFloat:0 withFloat:1];
    
#line 174
    if (fit) {
      self->image_ = image;
      [self setPaddingWithFloat:borderWidth_ / 2];
    }
    else {
      [((ComItextpdfTextImage *) nil_chk(image)) setScaleToFitLineWhenOverflowWithBoolean:NO];
      [column_ addTextWithComItextpdfTextPhrase:self->phrase_ = [[ComItextpdfTextPhrase alloc] initWithComItextpdfTextChunk:[[ComItextpdfTextChunk alloc] initWithComItextpdfTextImage:image withFloat:0 withFloat:0 withBoolean:YES]]];
      [self setPaddingWithFloat:0];
    }
  }
  return self;
}

- (instancetype)initWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                                 withBoolean:(jboolean)fit {
  return [self initComItextpdfTextPdfPdfPCellWithComItextpdfTextImage:
#line 169
image withBoolean:fit];
}


#line 192
- (instancetype)initWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table {
  return
#line 193
  [self initComItextpdfTextPdfPdfPCellWithComItextpdfTextPdfPdfPTable:table withComItextpdfTextPdfPdfPCell:nil];
}


#line 204
- (instancetype)initComItextpdfTextPdfPdfPCellWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table
                                               withComItextpdfTextPdfPdfPCell:(ComItextpdfTextPdfPdfPCell *)style {
  if (self =
#line 205
  [super initWithFloat:0 withFloat:0 withFloat:0 withFloat:0]) {
    column_ =
#line 62
    [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
    verticalAlignment_ =
#line 65
    ComItextpdfTextElement_ALIGN_TOP;
    paddingLeft_ =
#line 68
    2;
    paddingRight_ =
#line 71
    2;
    paddingTop_ =
#line 74
    2;
    paddingBottom_ =
#line 77
    2;
    fixedHeight_ =
#line 80
    0;
    noWrap_ =
#line 86
    NO;
    colspan_ =
#line 92
    1;
    rowspan_ =
#line 98
    1;
    useDescender_ =
#line 107
    NO;
    useBorderPadding_ =
#line 110
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_TD_();
    accessibleAttributes_ =
#line 122
    nil;
    id__ =
#line 123
    [[ComItextpdfTextAccessibleElementId alloc] init];
    headers_ =
#line 125
    nil;
    
#line 206
    borderWidth_ = 0.5f;
    
#line 207
    border_ = ComItextpdfTextRectangle_BOX;
    
#line 208
    [column_ setLeadingWithFloat:0 withFloat:1];
    
#line 209
    self->table_ = table;
    
#line 210
    [((ComItextpdfTextPdfPdfPTable *) nil_chk(table)) setWidthPercentageWithFloat:100];
    
#line 211
    [table setExtendLastRowWithBoolean:YES];
    
#line 212
    [column_ addElementWithComItextpdfTextElement:table];
    
#line 213
    if (style != nil) {
      [self cloneNonPositionParametersWithComItextpdfTextRectangle:style];
      verticalAlignment_ = style->verticalAlignment_;
      paddingLeft_ = style->paddingLeft_;
      paddingRight_ = style->paddingRight_;
      paddingTop_ = style->paddingTop_;
      paddingBottom_ = style->paddingBottom_;
      colspan_ = style->colspan_;
      rowspan_ = style->rowspan_;
      cellEvent_ = style->cellEvent_;
      useDescender_ = style->useDescender_;
      useBorderPadding_ = style->useBorderPadding_;
      rotation_PdfPCell_ = style->rotation_PdfPCell_;
    }
    else
#line 228
    [self setPaddingWithFloat:0];
  }
  return self;
}

- (instancetype)initWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table
                     withComItextpdfTextPdfPdfPCell:(ComItextpdfTextPdfPdfPCell *)style {
  return [self initComItextpdfTextPdfPdfPCellWithComItextpdfTextPdfPdfPTable:
#line 204
table withComItextpdfTextPdfPdfPCell:style];
}


#line 236
- (instancetype)initWithComItextpdfTextPdfPdfPCell:(ComItextpdfTextPdfPdfPCell *)cell {
  if (self =
#line 237
  [super initWithFloat:((ComItextpdfTextPdfPdfPCell *) nil_chk(cell))->llx_ withFloat:cell->lly_ withFloat:cell->urx_ withFloat:cell->ury_]) {
    column_ =
#line 62
    [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
    verticalAlignment_ =
#line 65
    ComItextpdfTextElement_ALIGN_TOP;
    paddingLeft_ =
#line 68
    2;
    paddingRight_ =
#line 71
    2;
    paddingTop_ =
#line 74
    2;
    paddingBottom_ =
#line 77
    2;
    fixedHeight_ =
#line 80
    0;
    noWrap_ =
#line 86
    NO;
    colspan_ =
#line 92
    1;
    rowspan_ =
#line 98
    1;
    useDescender_ =
#line 107
    NO;
    useBorderPadding_ =
#line 110
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_TD_();
    accessibleAttributes_ =
#line 122
    nil;
    id__ =
#line 123
    [[ComItextpdfTextAccessibleElementId alloc] init];
    headers_ =
#line 125
    nil;
    
#line 238
    [self cloneNonPositionParametersWithComItextpdfTextRectangle:cell];
    
#line 239
    verticalAlignment_ = cell->verticalAlignment_;
    
#line 240
    paddingLeft_ = cell->paddingLeft_;
    
#line 241
    paddingRight_ = cell->paddingRight_;
    
#line 242
    paddingTop_ = cell->paddingTop_;
    
#line 243
    paddingBottom_ = cell->paddingBottom_;
    
#line 244
    phrase_ = cell->phrase_;
    
#line 245
    fixedHeight_ = cell->fixedHeight_;
    
#line 246
    minimumHeight_ = cell->minimumHeight_;
    
#line 247
    noWrap_ = cell->noWrap_;
    
#line 248
    colspan_ = cell->colspan_;
    
#line 249
    rowspan_ = cell->rowspan_;
    
#line 250
    if (cell->table_ != nil)
#line 251
    table_ = [[ComItextpdfTextPdfPdfPTable alloc] initWithComItextpdfTextPdfPdfPTable:cell->table_];
    
#line 252
    image_ = [ComItextpdfTextImage getInstanceWithComItextpdfTextImage:cell->image_];
    
#line 253
    cellEvent_ = cell->cellEvent_;
    
#line 254
    useDescender_ = cell->useDescender_;
    
#line 255
    column_ = [ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:cell->column_];
    
#line 256
    useBorderPadding_ = cell->useBorderPadding_;
    
#line 257
    rotation_PdfPCell_ = cell->rotation_PdfPCell_;
    
#line 258
    id__ = cell->id__;
    
#line 259
    role_ = cell->role_;
    
#line 260
    if (cell->accessibleAttributes_ != nil)
#line 261
    accessibleAttributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:cell->accessibleAttributes_];
    
#line 262
    headers_ = cell->headers_;
  }
  return self;
}


#line 270
- (void)addElementWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element {
  
#line 271
  if (table_ != nil) {
    table_ = nil;
    [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setTextWithComItextpdfTextPhrase:nil];
  }
  if ([(id) element isKindOfClass:[ComItextpdfTextPdfPdfPTable class]]) {
    [((ComItextpdfTextPdfPdfPTable *) nil_chk(((ComItextpdfTextPdfPdfPTable *) check_class_cast(element, [ComItextpdfTextPdfPdfPTable class])))) setSplitLateWithBoolean:NO];
  }
  else
#line 277
  if ([(id) element isKindOfClass:[ComItextpdfTextPdfPdfDiv class]]) {
    for (id<ComItextpdfTextElement> __strong divChildElement in nil_chk([((ComItextpdfTextPdfPdfDiv *) nil_chk(((ComItextpdfTextPdfPdfDiv *) check_class_cast(element, [ComItextpdfTextPdfPdfDiv class])))) getContent])) {
      if ([(id) divChildElement isKindOfClass:[ComItextpdfTextPdfPdfPTable class]]) {
        [((ComItextpdfTextPdfPdfPTable *) nil_chk(((ComItextpdfTextPdfPdfPTable *) check_class_cast(divChildElement, [ComItextpdfTextPdfPdfPTable class])))) setSplitLateWithBoolean:NO];
      }
    }
  }
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) addElementWithComItextpdfTextElement:element];
}

- (ComItextpdfTextPhrase *)getPhrase {
  
#line 293
  return phrase_;
}


#line 301
- (void)setPhraseWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  
#line 302
  table_ = nil;
  image_ = nil;
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setTextWithComItextpdfTextPhrase:self->phrase_ = phrase];
}


#line 312
- (jint)getHorizontalAlignment {
  
#line 313
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getAlignment];
}


#line 322
- (void)setHorizontalAlignmentWithInt:(jint)horizontalAlignment {
  
#line 323
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setAlignmentWithInt:horizontalAlignment];
}


#line 331
- (jint)getVerticalAlignment {
  
#line 332
  return verticalAlignment_;
}


#line 341
- (void)setVerticalAlignmentWithInt:(jint)verticalAlignment {
  
#line 342
  if (table_ != nil)
#line 343
  [table_ setExtendLastRowWithBoolean:verticalAlignment == ComItextpdfTextElement_ALIGN_TOP];
  self->verticalAlignment_ = verticalAlignment;
}


#line 354
- (jfloat)getEffectivePaddingLeft {
  
#line 355
  if ([self isUseBorderPadding]) {
    jfloat border = [self getBorderWidthLeft] / ([self isUseVariableBorders] ? 1.0f : 2.0f);
    return paddingLeft_ + border;
  }
  return paddingLeft_;
}


#line 365
- (jfloat)getPaddingLeft {
  
#line 366
  return paddingLeft_;
}


#line 374
- (void)setPaddingLeftWithFloat:(jfloat)paddingLeft {
  
#line 375
  self->paddingLeft_ = paddingLeft;
}


#line 384
- (jfloat)getEffectivePaddingRight {
  
#line 385
  if ([self isUseBorderPadding]) {
    jfloat border = [self getBorderWidthRight] / ([self isUseVariableBorders] ? 1.0f : 2.0f);
    return paddingRight_ + border;
  }
  return paddingRight_;
}


#line 397
- (jfloat)getPaddingRight {
  
#line 398
  return paddingRight_;
}


#line 406
- (void)setPaddingRightWithFloat:(jfloat)paddingRight {
  
#line 407
  self->paddingRight_ = paddingRight;
}


#line 416
- (jfloat)getEffectivePaddingTop {
  
#line 417
  if ([self isUseBorderPadding]) {
    jfloat border = [self getBorderWidthTop] / ([self isUseVariableBorders] ? 1.0f : 2.0f);
    return paddingTop_ + border;
  }
  return paddingTop_;
}


#line 429
- (jfloat)getPaddingTop {
  
#line 430
  return paddingTop_;
}


#line 438
- (void)setPaddingTopWithFloat:(jfloat)paddingTop {
  
#line 439
  self->paddingTop_ = paddingTop;
}


#line 449
- (jfloat)getEffectivePaddingBottom {
  
#line 450
  if ([self isUseBorderPadding]) {
    jfloat border = [self getBorderWidthBottom] / ([self isUseVariableBorders] ? 1.0f : 2.0f);
    return paddingBottom_ + border;
  }
  return paddingBottom_;
}


#line 462
- (jfloat)getPaddingBottom {
  
#line 463
  return paddingBottom_;
}


#line 471
- (void)setPaddingBottomWithFloat:(jfloat)paddingBottom {
  
#line 472
  self->paddingBottom_ = paddingBottom;
}


#line 480
- (void)setPaddingWithFloat:(jfloat)padding {
  
#line 481
  paddingBottom_ = padding;
  paddingTop_ = padding;
  paddingLeft_ = padding;
  paddingRight_ = padding;
}


#line 492
- (jboolean)isUseBorderPadding {
  
#line 493
  return useBorderPadding_;
}


#line 501
- (void)setUseBorderPaddingWithBoolean:(jboolean)use {
  
#line 502
  useBorderPadding_ = use;
}


#line 514
- (void)setLeadingWithFloat:(jfloat)fixedLeading
                  withFloat:(jfloat)multipliedLeading {
  
#line 515
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setLeadingWithFloat:fixedLeading withFloat:multipliedLeading];
}


#line 523
- (jfloat)getLeading {
  
#line 524
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getLeading];
}


#line 532
- (jfloat)getMultipliedLeading {
  
#line 533
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getMultipliedLeading];
}


#line 541
- (void)setIndentWithFloat:(jfloat)indent {
  
#line 542
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setIndentWithFloat:indent];
}


#line 550
- (jfloat)getIndent {
  
#line 551
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getIndent];
}


#line 559
- (jfloat)getExtraParagraphSpace {
  
#line 560
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getExtraParagraphSpace];
}


#line 568
- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace {
  
#line 569
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setExtraParagraphSpaceWithFloat:extraParagraphSpace];
}


#line 578
- (void)setFixedHeightWithFloat:(jfloat)fixedHeight {
  
#line 579
  self->fixedHeight_ = fixedHeight;
  minimumHeight_ = 0;
}


#line 588
- (jfloat)getFixedHeight {
  
#line 589
  return fixedHeight_;
}


#line 598
- (jboolean)hasFixedHeight {
  
#line 599
  return [self getFixedHeight] > 0;
}


#line 608
- (void)setMinimumHeightWithFloat:(jfloat)minimumHeight {
  
#line 609
  self->minimumHeight_ = minimumHeight;
  fixedHeight_ = 0;
}


#line 618
- (jfloat)getMinimumHeight {
  
#line 619
  return minimumHeight_;
}


#line 628
- (jboolean)hasMinimumHeight {
  
#line 629
  return [self getMinimumHeight] > 0;
}


#line 637
- (jboolean)isNoWrap {
  
#line 638
  return noWrap_;
}


#line 646
- (void)setNoWrapWithBoolean:(jboolean)noWrap {
  
#line 647
  self->noWrap_ = noWrap;
}


#line 656
- (ComItextpdfTextPdfPdfPTable *)getTable {
  
#line 657
  return table_;
}


#line 660
- (void)setTableWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table {
  
#line 661
  self->table_ = table;
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setTextWithComItextpdfTextPhrase:nil];
  image_ = nil;
  if (table != nil) {
    [table setExtendLastRowWithBoolean:verticalAlignment_ == ComItextpdfTextElement_ALIGN_TOP];
    [column_ addElementWithComItextpdfTextElement:table];
    [table setWidthPercentageWithFloat:100];
  }
}


#line 676
- (jint)getColspan {
  
#line 677
  return colspan_;
}


#line 685
- (void)setColspanWithInt:(jint)colspan {
  
#line 686
  self->colspan_ = colspan;
}


#line 695
- (jint)getRowspan {
  
#line 696
  return rowspan_;
}


#line 705
- (void)setRowspanWithInt:(jint)rowspan {
  
#line 706
  self->rowspan_ = rowspan;
}


#line 714
- (void)setFollowingIndentWithFloat:(jfloat)indent {
  
#line 715
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setFollowingIndentWithFloat:indent];
}


#line 723
- (jfloat)getFollowingIndent {
  
#line 724
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getFollowingIndent];
}


#line 732
- (void)setRightIndentWithFloat:(jfloat)indent {
  
#line 733
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setRightIndentWithFloat:indent];
}


#line 741
- (jfloat)getRightIndent {
  
#line 742
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getRightIndent];
}


#line 750
- (jfloat)getSpaceCharRatio {
  
#line 751
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getSpaceCharRatio];
}


#line 763
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio {
  
#line 764
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setSpaceCharRatioWithFloat:spaceCharRatio];
}


#line 774
- (void)setRunDirectionWithInt:(jint)runDirection {
  
#line 775
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setRunDirectionWithInt:runDirection];
}


#line 785
- (jint)getRunDirection {
  
#line 786
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getRunDirection];
}


#line 794
- (ComItextpdfTextImage *)getImage {
  
#line 795
  return image_;
}


#line 803
- (void)setImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 804
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setTextWithComItextpdfTextPhrase:nil];
  table_ = nil;
  self->image_ = image;
}


#line 814
- (id<ComItextpdfTextPdfPdfPCellEvent>)getCellEvent {
  
#line 815
  return cellEvent_;
}


#line 823
- (void)setCellEventWithComItextpdfTextPdfPdfPCellEvent:(id<ComItextpdfTextPdfPdfPCellEvent>)cellEvent {
  
#line 824
  if (cellEvent == nil)
#line 825
  self->cellEvent_ = nil;
  else if (self->cellEvent_ == nil)
#line 827
  self->cellEvent_ = cellEvent;
  else if ([(id) self->cellEvent_ isKindOfClass:[ComItextpdfTextPdfEventsPdfPCellEventForwarder class]])
#line 829
  [((ComItextpdfTextPdfEventsPdfPCellEventForwarder *) check_class_cast(self->cellEvent_, [ComItextpdfTextPdfEventsPdfPCellEventForwarder class])) addCellEventWithComItextpdfTextPdfPdfPCellEvent:cellEvent];
  else {
    ComItextpdfTextPdfEventsPdfPCellEventForwarder *forward = [[ComItextpdfTextPdfEventsPdfPCellEventForwarder alloc] init];
    [forward addCellEventWithComItextpdfTextPdfPdfPCellEvent:self->cellEvent_];
    [forward addCellEventWithComItextpdfTextPdfPdfPCellEvent:cellEvent];
    self->cellEvent_ = forward;
  }
}

- (jint)getArabicOptions {
  
#line 844
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) getArabicOptions];
}


#line 853
- (void)setArabicOptionsWithInt:(jint)arabicOptions {
  
#line 854
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setArabicOptionsWithInt:arabicOptions];
}


#line 862
- (jboolean)isUseAscender {
  
#line 863
  return [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) isUseAscender];
}


#line 871
- (void)setUseAscenderWithBoolean:(jboolean)useAscender {
  
#line 872
  [((ComItextpdfTextPdfColumnText *) nil_chk(column_)) setUseAscenderWithBoolean:useAscender];
}


#line 881
- (jboolean)isUseDescender {
  
#line 882
  return useDescender_;
}


#line 890
- (void)setUseDescenderWithBoolean:(jboolean)useDescender {
  
#line 891
  self->useDescender_ = useDescender;
}


#line 899
- (ComItextpdfTextPdfColumnText *)getColumn {
  
#line 900
  return column_;
}


#line 909
- (id<JavaUtilList>)getCompositeElements {
  
#line 910
  return ((ComItextpdfTextPdfColumnText *) nil_chk([self getColumn]))->compositeElements_;
}


#line 918
- (void)setColumnWithComItextpdfTextPdfColumnText:(ComItextpdfTextPdfColumnText *)column {
  
#line 919
  self->column_ = column;
}


#line 928
- (jint)getRotation {
  
#line 929
  return rotation_PdfPCell_;
}


#line 938
- (void)setRotationWithInt:(jint)rotation {
  
#line 939
  rotation %= 360;
  if (rotation < 0)
#line 941
  rotation += 360;
  if (rotation % 90 != 0)
#line 943
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"rotation.must.be.a.multiple.of.90" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  self->rotation_PdfPCell_ = rotation;
}


#line 952
- (jfloat)getMaxHeight {
  
#line 953
  jboolean pivoted = [self getRotation] == 90 || [self getRotation] == 270;
  ComItextpdfTextImage *img = [self getImage];
  if (img != nil) {
    [img scalePercentWithFloat:100];
    jfloat refWidth = pivoted ? [img getScaledHeight] : [img getScaledWidth];
    jfloat scale_ = ([self getRight] - [self getEffectivePaddingRight] -
#line 959
    [self getEffectivePaddingLeft] - [self getLeft]) / refWidth;
    [img scalePercentWithFloat:scale_ * 100];
    jfloat refHeight = pivoted ? [img getScaledWidth] : [img getScaledHeight];
    [self setBottomWithFloat:[self getTop] - [self getEffectivePaddingTop] - [self getEffectivePaddingBottom] - refHeight];
  }
  else {
    if ((pivoted && [self hasFixedHeight]) || [self getColumn] == nil)
#line 966
    [self setBottomWithFloat:[self getTop] - [self getFixedHeight]];
    else {
      ComItextpdfTextPdfColumnText *ct = [ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:[self getColumn]];
      jfloat right, top, left, bottom;
      if (pivoted) {
        right = ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT;
        top = [self getRight] - [self getEffectivePaddingRight];
        left = 0;
        bottom = [self getLeft] + [self getEffectivePaddingLeft];
      }
      else {
        right = [self isNoWrap] ? ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT : [self getRight] - [self getEffectivePaddingRight];
        top = [self getTop] - [self getEffectivePaddingTop];
        left = [self getLeft] + [self getEffectivePaddingLeft];
        bottom = [self hasFixedHeight] ? [self getTop] + [self getEffectivePaddingBottom] - [self getFixedHeight] : ComItextpdfTextPdfPdfPRow_BOTTOM_LIMIT;
      }
      [ComItextpdfTextPdfPdfPRow setColumnWithComItextpdfTextPdfColumnText:ct withFloat:left withFloat:bottom withFloat:right withFloat:top];
      @try {
        [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) goWithBoolean:YES];
      }
      @catch (
#line 985
      ComItextpdfTextDocumentException *e) {
        @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
      }
      if (pivoted)
#line 989
      [self setBottomWithFloat:[self getTop] - [self getEffectivePaddingTop] - [self getEffectivePaddingBottom] - [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) getFilledWidth]];
      else {
        jfloat yLine = [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) getYLine];
        if ([self isUseDescender])
#line 993
        yLine += [ct getDescender];
        [self setBottomWithFloat:yLine - [self getEffectivePaddingBottom]];
      }
    }
  }
  jfloat height = [self getHeight];
  if (height == [self getEffectivePaddingTop] + [self getEffectivePaddingBottom])
#line 1000
  height = 0;
  if ([self hasFixedHeight])
#line 1002
  height = [self getFixedHeight];
  else if ([self hasMinimumHeight] && height < [self getMinimumHeight])
#line 1004
  height = [self getMinimumHeight];
  return height;
}


#line 1008
- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 1009
  if (accessibleAttributes_ != nil)
#line 1010
  return [accessibleAttributes_ getWithId:key];
  else
#line 1012
  return nil;
}


#line 1015
- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 1016
  if (accessibleAttributes_ == nil)
#line 1017
  accessibleAttributes_ = [[JavaUtilHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(accessibleAttributes_)) putWithId:key withId:value];
}


#line 1021
- (JavaUtilHashMap *)getAccessibleAttributes {
  
#line 1022
  return accessibleAttributes_;
}


#line 1025
- (ComItextpdfTextPdfPdfName *)getRole {
  
#line 1026
  return role_;
}


#line 1029
- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role {
  
#line 1030
  self->role_ = role;
}


#line 1033
- (ComItextpdfTextAccessibleElementId *)getId {
  
#line 1034
  return id__;
}


#line 1037
- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_ {
  
#line 1038
  self->id__ = id_;
}


#line 1041
- (jboolean)isInline {
  
#line 1042
  return NO;
}


#line 1045
- (void)addHeaderWithComItextpdfTextPdfPdfPHeaderCell:(ComItextpdfTextPdfPdfPHeaderCell *)header {
  
#line 1046
  if (headers_ == nil)
#line 1047
  headers_ = [[JavaUtilArrayList alloc] init];
  [((JavaUtilArrayList *) nil_chk(headers_)) addWithId:header];
}


#line 1051
- (JavaUtilArrayList *)getHeaders {
  
#line 1052
  return headers_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfPCell *)other {
  [super copyAllFieldsTo:other];
  other->accessibleAttributes_ = accessibleAttributes_;
  other->cellEvent_ = cellEvent_;
  other->colspan_ = colspan_;
  other->column_ = column_;
  other->fixedHeight_ = fixedHeight_;
  other->headers_ = headers_;
  other->id__ = id__;
  other->image_ = image_;
  other->minimumHeight_ = minimumHeight_;
  other->noWrap_ = noWrap_;
  other->paddingBottom_ = paddingBottom_;
  other->paddingLeft_ = paddingLeft_;
  other->paddingRight_ = paddingRight_;
  other->paddingTop_ = paddingTop_;
  other->phrase_ = phrase_;
  other->role_ = role_;
  other->rotation_PdfPCell_ = rotation_PdfPCell_;
  other->rowspan_ = rowspan_;
  other->table_ = table_;
  other->useBorderPadding_ = useBorderPadding_;
  other->useDescender_ = useDescender_;
  other->verticalAlignment_ = verticalAlignment_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfPCell", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPhrase:", "PdfPCell", NULL, 0x1, NULL },
    { "initWithComItextpdfTextImage:", "PdfPCell", NULL, 0x1, NULL },
    { "initWithComItextpdfTextImage:withBoolean:", "PdfPCell", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfPTable:", "PdfPCell", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfPTable:withComItextpdfTextPdfPdfPCell:", "PdfPCell", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfPCell:", "PdfPCell", NULL, 0x1, NULL },
    { "addElementWithComItextpdfTextElement:", "addElement", "V", 0x1, NULL },
    { "getPhrase", NULL, "Lcom.itextpdf.text.Phrase;", 0x1, NULL },
    { "setPhraseWithComItextpdfTextPhrase:", "setPhrase", "V", 0x1, NULL },
    { "getHorizontalAlignment", NULL, "I", 0x1, NULL },
    { "setHorizontalAlignmentWithInt:", "setHorizontalAlignment", "V", 0x1, NULL },
    { "getVerticalAlignment", NULL, "I", 0x1, NULL },
    { "setVerticalAlignmentWithInt:", "setVerticalAlignment", "V", 0x1, NULL },
    { "getEffectivePaddingLeft", NULL, "F", 0x1, NULL },
    { "getPaddingLeft", NULL, "F", 0x1, NULL },
    { "setPaddingLeftWithFloat:", "setPaddingLeft", "V", 0x1, NULL },
    { "getEffectivePaddingRight", NULL, "F", 0x1, NULL },
    { "getPaddingRight", NULL, "F", 0x1, NULL },
    { "setPaddingRightWithFloat:", "setPaddingRight", "V", 0x1, NULL },
    { "getEffectivePaddingTop", NULL, "F", 0x1, NULL },
    { "getPaddingTop", NULL, "F", 0x1, NULL },
    { "setPaddingTopWithFloat:", "setPaddingTop", "V", 0x1, NULL },
    { "getEffectivePaddingBottom", NULL, "F", 0x1, NULL },
    { "getPaddingBottom", NULL, "F", 0x1, NULL },
    { "setPaddingBottomWithFloat:", "setPaddingBottom", "V", 0x1, NULL },
    { "setPaddingWithFloat:", "setPadding", "V", 0x1, NULL },
    { "isUseBorderPadding", NULL, "Z", 0x1, NULL },
    { "setUseBorderPaddingWithBoolean:", "setUseBorderPadding", "V", 0x1, NULL },
    { "setLeadingWithFloat:withFloat:", "setLeading", "V", 0x1, NULL },
    { "getLeading", NULL, "F", 0x1, NULL },
    { "getMultipliedLeading", NULL, "F", 0x1, NULL },
    { "setIndentWithFloat:", "setIndent", "V", 0x1, NULL },
    { "getIndent", NULL, "F", 0x1, NULL },
    { "getExtraParagraphSpace", NULL, "F", 0x1, NULL },
    { "setExtraParagraphSpaceWithFloat:", "setExtraParagraphSpace", "V", 0x1, NULL },
    { "setFixedHeightWithFloat:", "setFixedHeight", "V", 0x1, NULL },
    { "getFixedHeight", NULL, "F", 0x1, NULL },
    { "hasFixedHeight", NULL, "Z", 0x1, NULL },
    { "setMinimumHeightWithFloat:", "setMinimumHeight", "V", 0x1, NULL },
    { "getMinimumHeight", NULL, "F", 0x1, NULL },
    { "hasMinimumHeight", NULL, "Z", 0x1, NULL },
    { "isNoWrap", NULL, "Z", 0x1, NULL },
    { "setNoWrapWithBoolean:", "setNoWrap", "V", 0x1, NULL },
    { "getTable", NULL, "Lcom.itextpdf.text.pdf.PdfPTable;", 0x1, NULL },
    { "setTableWithComItextpdfTextPdfPdfPTable:", "setTable", "V", 0x0, NULL },
    { "getColspan", NULL, "I", 0x1, NULL },
    { "setColspanWithInt:", "setColspan", "V", 0x1, NULL },
    { "getRowspan", NULL, "I", 0x1, NULL },
    { "setRowspanWithInt:", "setRowspan", "V", 0x1, NULL },
    { "setFollowingIndentWithFloat:", "setFollowingIndent", "V", 0x1, NULL },
    { "getFollowingIndent", NULL, "F", 0x1, NULL },
    { "setRightIndentWithFloat:", "setRightIndent", "V", 0x1, NULL },
    { "getRightIndent", NULL, "F", 0x1, NULL },
    { "getSpaceCharRatio", NULL, "F", 0x1, NULL },
    { "setSpaceCharRatioWithFloat:", "setSpaceCharRatio", "V", 0x1, NULL },
    { "setRunDirectionWithInt:", "setRunDirection", "V", 0x1, NULL },
    { "getRunDirection", NULL, "I", 0x1, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x1, NULL },
    { "setImageWithComItextpdfTextImage:", "setImage", "V", 0x1, NULL },
    { "getCellEvent", NULL, "Lcom.itextpdf.text.pdf.PdfPCellEvent;", 0x1, NULL },
    { "setCellEventWithComItextpdfTextPdfPdfPCellEvent:", "setCellEvent", "V", 0x1, NULL },
    { "getArabicOptions", NULL, "I", 0x1, NULL },
    { "setArabicOptionsWithInt:", "setArabicOptions", "V", 0x1, NULL },
    { "isUseAscender", NULL, "Z", 0x1, NULL },
    { "setUseAscenderWithBoolean:", "setUseAscender", "V", 0x1, NULL },
    { "isUseDescender", NULL, "Z", 0x1, NULL },
    { "setUseDescenderWithBoolean:", "setUseDescender", "V", 0x1, NULL },
    { "getColumn", NULL, "Lcom.itextpdf.text.pdf.ColumnText;", 0x1, NULL },
    { "getCompositeElements", NULL, "Ljava.util.List;", 0x1, NULL },
    { "setColumnWithComItextpdfTextPdfColumnText:", "setColumn", "V", 0x1, NULL },
    { "getRotation", NULL, "I", 0x1, NULL },
    { "setRotationWithInt:", "setRotation", "V", 0x1, NULL },
    { "getMaxHeight", NULL, "F", 0x1, NULL },
    { "getAccessibleAttributeWithComItextpdfTextPdfPdfName:", "getAccessibleAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAccessibleAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAccessibleAttribute", "V", 0x1, NULL },
    { "getAccessibleAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getRole", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "setRoleWithComItextpdfTextPdfPdfName:", "setRole", "V", 0x1, NULL },
    { "getId", NULL, "Lcom.itextpdf.text.AccessibleElementId;", 0x1, NULL },
    { "setIdWithComItextpdfTextAccessibleElementId:", "setId", "V", 0x1, NULL },
    { "isInline", NULL, "Z", 0x1, NULL },
    { "addHeaderWithComItextpdfTextPdfPdfPHeaderCell:", "addHeader", "V", 0x1, NULL },
    { "getHeaders", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "column_", NULL, 0x2, "Lcom.itextpdf.text.pdf.ColumnText;", NULL,  },
    { "verticalAlignment_", NULL, 0x2, "I", NULL,  },
    { "paddingLeft_", NULL, 0x2, "F", NULL,  },
    { "paddingRight_", NULL, 0x2, "F", NULL,  },
    { "paddingTop_", NULL, 0x2, "F", NULL,  },
    { "paddingBottom_", NULL, 0x2, "F", NULL,  },
    { "fixedHeight_", NULL, 0x2, "F", NULL,  },
    { "minimumHeight_", NULL, 0x2, "F", NULL,  },
    { "noWrap_", NULL, 0x2, "Z", NULL,  },
    { "table_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfPTable;", NULL,  },
    { "colspan_", NULL, 0x2, "I", NULL,  },
    { "rowspan_", NULL, 0x2, "I", NULL,  },
    { "image_", NULL, 0x2, "Lcom.itextpdf.text.Image;", NULL,  },
    { "cellEvent_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfPCellEvent;", NULL,  },
    { "useDescender_", NULL, 0x2, "Z", NULL,  },
    { "useBorderPadding_", NULL, 0x2, "Z", NULL,  },
    { "phrase_", NULL, 0x4, "Lcom.itextpdf.text.Phrase;", NULL,  },
    { "rotation_PdfPCell_", "rotation", 0x2, "I", NULL,  },
    { "role_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "accessibleAttributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "id__", "id", 0x4, "Lcom.itextpdf.text.AccessibleElementId;", NULL,  },
    { "headers_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfPCell = { "PdfPCell", "com.itextpdf.text.pdf", NULL, 0x1, 84, methods, 22, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfPCell;
}

@end
