//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/SignaturePermissions.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/SignaturePermissions.java"

#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/security/SignaturePermissions.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


#line 59
@implementation ComItextpdfTextPdfSecuritySignaturePermissions


#line 99
- (instancetype)initWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)sigDict
     withComItextpdfTextPdfSecuritySignaturePermissions:(ComItextpdfTextPdfSecuritySignaturePermissions *)previous {
  if (self = [super init]) {
    certification_ =
#line 86
    NO;
    fillInAllowed_ =
#line 88
    YES;
    annotationsAllowed_ =
#line 90
    YES;
    fieldLocks_ =
#line 92
    [[JavaUtilArrayList alloc] init];
    
#line 100
    if (previous != nil) {
      annotationsAllowed_ &= [previous isAnnotationsAllowed];
      fillInAllowed_ &= [previous isFillInAllowed];
      [fieldLocks_ addAllWithJavaUtilCollection:[previous getFieldLocks]];
    }
    
#line 105
    ComItextpdfTextPdfPdfArray *ref = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(sigDict)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REFERENCE_()];
    
#line 106
    if (ref != nil) {
      for (jint i = 0; i < [ref size]; i++) {
        ComItextpdfTextPdfPdfDictionary *dict = [ref getAsDictWithInt:i];
        ComItextpdfTextPdfPdfDictionary *params = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dict)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANSFORMPARAMS_()];
        if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_DOCMDP_())) isEqual:[dict getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANSFORMMETHOD_()]]) {
          certification_ = YES;
        }
        ComItextpdfTextPdfPdfName *action = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(params)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACTION_()];
        if (action != nil) {
          [fieldLocks_ addWithId:[[ComItextpdfTextPdfSecuritySignaturePermissions_FieldLock alloc] initWithComItextpdfTextPdfSecuritySignaturePermissions:self withComItextpdfTextPdfPdfName:action withComItextpdfTextPdfPdfArray:[params getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_()]]];
        }
        ComItextpdfTextPdfPdfNumber *p = [params getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_P_()];
        if (p == nil)
#line 119
        continue;
        switch ([((ComItextpdfTextPdfPdfNumber *) nil_chk(p)) intValue]) {
          default:
          break;
          case 1:
          fillInAllowed_ &= NO;
          case 2:
          annotationsAllowed_ &= NO;
        }
      }
    }
  }
  return self;
}


#line 136
- (jboolean)isCertification {
  
#line 137
  return certification_;
}


#line 143
- (jboolean)isFillInAllowed {
  
#line 144
  return fillInAllowed_;
}


#line 150
- (jboolean)isAnnotationsAllowed {
  
#line 151
  return annotationsAllowed_;
}


#line 157
- (id<JavaUtilList>)getFieldLocks {
  
#line 158
  return fieldLocks_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfSecuritySignaturePermissions *)other {
  [super copyAllFieldsTo:other];
  other->annotationsAllowed_ = annotationsAllowed_;
  other->certification_ = certification_;
  other->fieldLocks_ = fieldLocks_;
  other->fillInAllowed_ = fillInAllowed_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfSecuritySignaturePermissions:", "SignaturePermissions", NULL, 0x1, NULL },
    { "isCertification", NULL, "Z", 0x1, NULL },
    { "isFillInAllowed", NULL, "Z", 0x1, NULL },
    { "isAnnotationsAllowed", NULL, "Z", 0x1, NULL },
    { "getFieldLocks", NULL, "Ljava.util.List;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "certification_", NULL, 0x0, "Z", NULL,  },
    { "fillInAllowed_", NULL, 0x0, "Z", NULL,  },
    { "annotationsAllowed_", NULL, 0x0, "Z", NULL,  },
    { "fieldLocks_", NULL, 0x0, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecuritySignaturePermissions = { "SignaturePermissions", "com.itextpdf.text.pdf.security", NULL, 0x1, 5, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfSecuritySignaturePermissions;
}

@end


#line 65
@implementation ComItextpdfTextPdfSecuritySignaturePermissions_FieldLock


#line 71
- (instancetype)initWithComItextpdfTextPdfSecuritySignaturePermissions:(ComItextpdfTextPdfSecuritySignaturePermissions *)outer$
                                         withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)action
                                        withComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)fields {
  if (self = [super init]) {
    
#line 72
    self->action_ = action;
    
#line 73
    self->fields_ = fields;
  }
  return self;
}


#line 76
- (ComItextpdfTextPdfPdfName *)getAction {
  
#line 76
  return action_;
}


#line 78
- (ComItextpdfTextPdfPdfArray *)getFields {
  
#line 78
  return fields_;
}

- (NSString *)description {
  
#line 81
  return JreStrcat("$$", [((ComItextpdfTextPdfPdfName *) nil_chk(action_)) description], (fields_ == nil ? @"" : [fields_ description]));
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfSecuritySignaturePermissions_FieldLock *)other {
  [super copyAllFieldsTo:other];
  other->action_ = action_;
  other->fields_ = fields_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfSecuritySignaturePermissions:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfArray:", "FieldLock", NULL, 0x1, NULL },
    { "getAction", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "getFields", NULL, "Lcom.itextpdf.text.pdf.PdfArray;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "action_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "fields_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfArray;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecuritySignaturePermissions_FieldLock = { "FieldLock", "com.itextpdf.text.pdf.security", "SignaturePermissions", 0x1, 4, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfSecuritySignaturePermissions_FieldLock;
}

@end
