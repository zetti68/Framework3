//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/MakeSignature.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/MakeSignature.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/io/RASInputStream.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/io/StreamUtil.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/log/LoggerFactory.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDate.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfSignature.h"
#include "com/itextpdf/text/pdf/PdfSignatureAppearance.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/security/CrlClient.h"
#include "com/itextpdf/text/pdf/security/ExternalDigest.h"
#include "com/itextpdf/text/pdf/security/ExternalSignature.h"
#include "com/itextpdf/text/pdf/security/ExternalSignatureContainer.h"
#include "com/itextpdf/text/pdf/security/MakeSignature.h"
#include "com/itextpdf/text/pdf/security/OcspClient.h"
#include "com/itextpdf/text/pdf/security/TSAClient.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"

BOOL ComItextpdfTextPdfSecurityMakeSignature_initialized = NO;


#line 82
@implementation ComItextpdfTextPdfSecurityMakeSignature

id<ComItextpdfTextLogLogger> ComItextpdfTextPdfSecurityMakeSignature_LOGGER_;


#line 108
+ (void)signDetachedWithComItextpdfTextPdfPdfSignatureAppearance:(ComItextpdfTextPdfPdfSignatureAppearance *)sap
                    withComItextpdfTextPdfSecurityExternalDigest:(id<ComItextpdfTextPdfSecurityExternalDigest>)externalDigest
                 withComItextpdfTextPdfSecurityExternalSignature:(id<ComItextpdfTextPdfSecurityExternalSignature>)externalSignature
                            withJavaSecurityCertCertificateArray:(IOSObjectArray *)chain
                                          withJavaUtilCollection:(id<JavaUtilCollection>)crlList
                        withComItextpdfTextPdfSecurityOcspClient:(id<ComItextpdfTextPdfSecurityOcspClient>)ocspClient
                         withComItextpdfTextPdfSecurityTSAClient:(id<ComItextpdfTextPdfSecurityTSAClient>)tsaClient
                                                         withInt:(jint)estimatedSize
  withComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum:(ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum *)sigtype {
}


#line 176
+ (id<JavaUtilCollection>)processCrlWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                                             withJavaUtilCollection:(id<JavaUtilCollection>)crlList {
  
#line 177
  if (crlList == nil)
#line 178
  return nil;
  JavaUtilArrayList *crlBytes = [[JavaUtilArrayList alloc] init];
  for (id<ComItextpdfTextPdfSecurityCrlClient> __strong cc in nil_chk(crlList)) {
    if (cc == nil)
#line 182
    continue;
    [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfSecurityMakeSignature_LOGGER_)) infoWithNSString:JreStrcat("$$", @"Processing ", [[((id<ComItextpdfTextPdfSecurityCrlClient>) nil_chk(cc)) getClass] getName])];
    id<JavaUtilCollection> b = [cc getEncodedWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *) check_class_cast(cert, [JavaSecurityCertX509Certificate class]) withNSString:nil];
    if (b == nil)
#line 186
    continue;
    [crlBytes addAllWithJavaUtilCollection:b];
  }
  if ([crlBytes isEmpty])
#line 190
  return nil;
  else
#line 192
  return crlBytes;
}


#line 205
+ (void)signExternalContainerWithComItextpdfTextPdfPdfSignatureAppearance:(ComItextpdfTextPdfPdfSignatureAppearance *)sap
                 withComItextpdfTextPdfSecurityExternalSignatureContainer:(id<ComItextpdfTextPdfSecurityExternalSignatureContainer>)externalSignatureContainer
                                                                  withInt:(jint)estimatedSize {
  
#line 206
  ComItextpdfTextPdfPdfSignature *dic = [[ComItextpdfTextPdfPdfSignature alloc] initWithComItextpdfTextPdfPdfName:nil withComItextpdfTextPdfPdfName:nil];
  [dic setReasonWithNSString:[((ComItextpdfTextPdfPdfSignatureAppearance *) nil_chk(sap)) getReason]];
  [dic setLocationWithNSString:[sap getLocation]];
  [dic setSignatureCreatorWithNSString:[sap getSignatureCreator]];
  [dic setContactWithNSString:[sap getContact]];
  [dic setDateWithComItextpdfTextPdfPdfDate:[[ComItextpdfTextPdfPdfDate alloc] initWithJavaUtilCalendar:[sap getSignDate]]];
  [((id<ComItextpdfTextPdfSecurityExternalSignatureContainer>) nil_chk(externalSignatureContainer)) modifySigningDictionaryWithComItextpdfTextPdfPdfDictionary:dic];
  [sap setCryptoDictionaryWithComItextpdfTextPdfPdfDictionary:dic];
  
#line 215
  JavaUtilHashMap *exc = [[JavaUtilHashMap alloc] init];
  (void) [exc putWithId:ComItextpdfTextPdfPdfName_get_CONTENTS_() withId:[[JavaLangInteger alloc] initWithInt:estimatedSize * 2 + 2]];
  [sap preCloseWithJavaUtilHashMap:exc];
  
#line 219
  JavaIoInputStream *data = [sap getRangeStream];
  IOSByteArray *encodedSig = [externalSignatureContainer signWithJavaIoInputStream:data];
  
#line 222
  if (estimatedSize < ((IOSByteArray *) nil_chk(encodedSig))->size_)
#line 223
  @throw [[JavaIoIOException alloc] initWithNSString:@"Not enough space"];
  
#line 225
  IOSByteArray *paddedSig = [IOSByteArray arrayWithLength:estimatedSize];
  [JavaLangSystem arraycopyWithId:encodedSig withInt:0 withId:paddedSig withInt:0 withInt:encodedSig->size_];
  
#line 228
  ComItextpdfTextPdfPdfDictionary *dic2 = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [dic2 putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfString *) [[ComItextpdfTextPdfPdfString alloc] initWithByteArray:paddedSig]) setHexWritingWithBoolean:YES]];
  [sap closeWithComItextpdfTextPdfPdfDictionary:dic2];
}


#line 244
+ (void)signDeferredWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                       withNSString:(NSString *)fieldName
                             withJavaIoOutputStream:(JavaIoOutputStream *)outs
withComItextpdfTextPdfSecurityExternalSignatureContainer:(id<ComItextpdfTextPdfSecurityExternalSignatureContainer>)externalSignatureContainer {
  
#line 245
  ComItextpdfTextPdfAcroFields *af = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getAcroFields];
  ComItextpdfTextPdfPdfDictionary *v = [((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getSignatureDictionaryWithNSString:fieldName];
  if (v == nil)
#line 248
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:@"No field"];
  if (![af signatureCoversWholeDocumentWithNSString:fieldName])
#line 250
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:@"Not the last signature"];
  ComItextpdfTextPdfPdfArray *b = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(v)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BYTERANGE_()];
  IOSLongArray *gaps = [((ComItextpdfTextPdfPdfArray *) nil_chk(b)) asLongArray];
  if ([b size] != 4 || IOSLongArray_Get(nil_chk(gaps), 0) != 0)
#line 254
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:@"Single exclusion space supported"];
  id<ComItextpdfTextIoRandomAccessSource> readerSource = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk([reader getSafeFile])) createSourceView];
  JavaIoInputStream *rg = [[ComItextpdfTextIoRASInputStream alloc] initWithComItextpdfTextIoRandomAccessSource:[((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createRangedWithComItextpdfTextIoRandomAccessSource:readerSource withLongArray:gaps]];
  IOSByteArray *signedContent = [((id<ComItextpdfTextPdfSecurityExternalSignatureContainer>) nil_chk(externalSignatureContainer)) signWithJavaIoInputStream:rg];
  jint spaceAvailable = (jint) (IOSLongArray_Get(nil_chk(gaps), 2) - IOSLongArray_Get(gaps, 1)) - 2;
  if ((spaceAvailable & 1) != 0)
#line 260
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:@"Gap is not a multiple of 2"];
  spaceAvailable /= 2;
  if (spaceAvailable < ((IOSByteArray *) nil_chk(signedContent))->size_)
#line 263
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:@"Not enough space"];
  [ComItextpdfTextIoStreamUtil CopyBytesWithComItextpdfTextIoRandomAccessSource:readerSource withLong:0 withLong:IOSLongArray_Get(gaps, 1) + 1 withJavaIoOutputStream:outs];
  ComItextpdfTextPdfByteBuffer *bb = [[ComItextpdfTextPdfByteBuffer alloc] initWithInt:spaceAvailable * 2];
  {
    IOSByteArray *a__ =
#line 266
    signedContent;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte bi = *b__++;
      
#line 267
      (void) [bb appendHexWithByte:bi];
    }
  }
  
#line 269
  jint remain = (spaceAvailable - signedContent->size_) * 2;
  for (jint k = 0; k < remain; ++k) {
    (void) [bb appendWithByte:(jbyte) 48];
  }
  [bb writeToWithJavaIoOutputStream:outs];
  [ComItextpdfTextIoStreamUtil CopyBytesWithComItextpdfTextIoRandomAccessSource:readerSource withLong:IOSLongArray_Get(gaps, 2) - 1 withLong:IOSLongArray_Get(gaps, 3) + 1 withJavaIoOutputStream:outs];
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfSecurityMakeSignature class]) {
    ComItextpdfTextPdfSecurityMakeSignature_LOGGER_ =
#line 85
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfSecurityMakeSignature class]]];
    ComItextpdfTextPdfSecurityMakeSignature_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "signDetachedWithComItextpdfTextPdfPdfSignatureAppearance:withComItextpdfTextPdfSecurityExternalDigest:withComItextpdfTextPdfSecurityExternalSignature:withJavaSecurityCertCertificateArray:withJavaUtilCollection:withComItextpdfTextPdfSecurityOcspClient:withComItextpdfTextPdfSecurityTSAClient:withInt:withComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum:", "signDetached", "V", 0x9, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;Ljava.security.GeneralSecurityException;" },
    { "processCrlWithJavaSecurityCertCertificate:withJavaUtilCollection:", "processCrl", "Ljava.util.Collection;", 0x9, NULL },
    { "signExternalContainerWithComItextpdfTextPdfPdfSignatureAppearance:withComItextpdfTextPdfSecurityExternalSignatureContainer:withInt:", "signExternalContainer", "V", 0x9, "Ljava.security.GeneralSecurityException;Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "signDeferredWithComItextpdfTextPdfPdfReader:withNSString:withJavaIoOutputStream:withComItextpdfTextPdfSecurityExternalSignatureContainer:", "signDeferred", "V", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;Ljava.security.GeneralSecurityException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER_", NULL, 0x1a, "Lcom.itextpdf.text.log.Logger;", &ComItextpdfTextPdfSecurityMakeSignature_LOGGER_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecurityMakeSignature = { "MakeSignature", "com.itextpdf.text.pdf.security", NULL, 0x1, 5, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfSecurityMakeSignature;
}

@end

#line 87

BOOL ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_initialized = NO;

ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum *ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_values_[2];

@implementation ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

FOUNDATION_EXPORT IOSObjectArray *ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_values() {
  return [IOSObjectArray arrayWithObjects:ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_values_ count:2 type:[IOSClass classWithClass:[ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum class]]];
}
+ (IOSObjectArray *)values {
  return ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_values();
}

+ (ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum *)valueOfWithNSString:(NSString *)name {
  return ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_valueOfWithNSString_(name);
}

ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum *ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_valueOfWithNSString_(NSString *name) {
  for (int i = 0; i < 2; i++) {
    ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum *e = ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum class]) {
    ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_CMS = [[ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum alloc] initWithNSString:@"CMS" withInt:0];
    ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_CADES = [[ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum alloc] initWithNSString:@"CADES" withInt:1];
    ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "init", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CMS", "CMS", 0x4019, "Lcom.itextpdf.text.pdf.security.MakeSignature$CryptoStandard;", &ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_CMS,  },
    { "CADES", "CADES", 0x4019, "Lcom.itextpdf.text.pdf.security.MakeSignature$CryptoStandard;", &ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum_CADES,  },
  };
  static const char *superclass_type_args[] = {"Lcom.itextpdf.text.pdf.security.MakeSignature$CryptoStandard;"};
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum = { "CryptoStandard", "com.itextpdf.text.pdf.security", "MakeSignature", 0x4019, 1, methods, 2, fields, 1, superclass_type_args};
  return &_ComItextpdfTextPdfSecurityMakeSignature_CryptoStandardEnum;
}

@end
