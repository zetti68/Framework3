//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/LtvTimestamp.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/LtvTimestamp.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/pdf/PdfDeveloperExtension.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfSignature.h"
#include "com/itextpdf/text/pdf/PdfSignatureAppearance.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/security/LtvTimestamp.h"
#include "com/itextpdf/text/pdf/security/TSAClient.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/MessageDigest.h"
#include "java/util/HashMap.h"


#line 66
@implementation ComItextpdfTextPdfSecurityLtvTimestamp


#line 77
+ (void)timestampWithComItextpdfTextPdfPdfSignatureAppearance:(ComItextpdfTextPdfPdfSignatureAppearance *)sap
                      withComItextpdfTextPdfSecurityTSAClient:(id<ComItextpdfTextPdfSecurityTSAClient>)tsa
                                                 withNSString:(NSString *)signatureName {
  
#line 78
  jint contentEstimated = [((id<ComItextpdfTextPdfSecurityTSAClient>) nil_chk(tsa)) getTokenSizeEstimate];
  [((ComItextpdfTextPdfPdfSignatureAppearance *) nil_chk(sap)) addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:ComItextpdfTextPdfPdfDeveloperExtension_get_ESIC_1_7_EXTENSIONLEVEL5_()];
  [sap setVisibleSignatureWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:0 withFloat:0 withFloat:0 withFloat:0] withInt:1 withNSString:signatureName];
  
#line 82
  ComItextpdfTextPdfPdfSignature *dic = [[ComItextpdfTextPdfPdfSignature alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ADOBE_PPKLITE_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ETSI_RFC3161_()];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DOCTIMESTAMP_()];
  [sap setCryptoDictionaryWithComItextpdfTextPdfPdfDictionary:dic];
  
#line 86
  JavaUtilHashMap *exc = [[JavaUtilHashMap alloc] init];
  (void) [exc putWithId:ComItextpdfTextPdfPdfName_get_CONTENTS_() withId:[[JavaLangInteger alloc] initWithInt:contentEstimated * 2 + 2]];
  [sap preCloseWithJavaUtilHashMap:exc];
  JavaIoInputStream *data = [sap getRangeStream];
  JavaSecurityMessageDigest *messageDigest = [tsa getMessageDigest];
  IOSByteArray *buf = [IOSByteArray arrayWithLength:4096];
  jint n;
  while ((n = [((JavaIoInputStream *) nil_chk(data)) readWithByteArray:buf]) > 0) {
    [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) updateWithByteArray:buf withInt:0 withInt:n];
  }
  IOSByteArray *tsImprint = [((JavaSecurityMessageDigest *) nil_chk(messageDigest)) digest];
  IOSByteArray *tsToken;
  @try {
    tsToken = [tsa getTimeStampTokenWithByteArray:tsImprint];
  }
  @catch (JavaLangException *e) {
    @throw [[JavaSecurityGeneralSecurityException alloc] initWithJavaLangThrowable:e];
  }
  
#line 105
  if (contentEstimated + 2 < ((IOSByteArray *) nil_chk(tsToken))->size_)
#line 106
  @throw [[JavaIoIOException alloc] initWithNSString:@"Not enough space"];
  
#line 108
  IOSByteArray *paddedSig = [IOSByteArray arrayWithLength:contentEstimated];
  [JavaLangSystem arraycopyWithId:tsToken withInt:0 withId:paddedSig withInt:0 withInt:tsToken->size_];
  
#line 111
  ComItextpdfTextPdfPdfDictionary *dic2 = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [dic2 putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfString *) [[ComItextpdfTextPdfPdfString alloc] initWithByteArray:paddedSig]) setHexWritingWithBoolean:YES]];
  [sap closeWithComItextpdfTextPdfPdfDictionary:dic2];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "timestampWithComItextpdfTextPdfPdfSignatureAppearance:withComItextpdfTextPdfSecurityTSAClient:withNSString:", "timestamp", "V", 0x9, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;Ljava.security.GeneralSecurityException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecurityLtvTimestamp = { "LtvTimestamp", "com.itextpdf.text.pdf.security", NULL, 0x1, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfSecurityLtvTimestamp;
}

@end
