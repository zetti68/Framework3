//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/CertificateUtil.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/CertificateUtil.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/security/CertificateUtil.h"
#include "com/itextpdf/text/pdf/security/SecurityIDs.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/net/URL.h"
#include "java/security/cert/CRL.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"


#line 61
@implementation ComItextpdfTextPdfSecurityCertificateUtil


#line 74
+ (JavaSecurityCertCRL *)getCRLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  
#line 76
  return [ComItextpdfTextPdfSecurityCertificateUtil getCRLWithNSString:[ComItextpdfTextPdfSecurityCertificateUtil getCRLURLWithJavaSecurityCertX509Certificate:certificate]];
}


#line 88
+ (NSString *)getCRLURLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  
#line 108
  return nil;
}


#line 121
+ (JavaSecurityCertCRL *)getCRLWithNSString:(NSString *)url {
  
#line 123
  if (url == nil)
#line 124
  return nil;
  JavaIoInputStream *is = [((JavaNetURL *) [[JavaNetURL alloc] initWithNSString:url]) openStream];
  JavaSecurityCertCertificateFactory *cf = [JavaSecurityCertCertificateFactory getInstanceWithNSString:@"X.509"];
  return (JavaSecurityCertCRL *) check_class_cast([((JavaSecurityCertCertificateFactory *) nil_chk(cf)) generateCRLWithJavaIoInputStream:is], [JavaSecurityCertCRL class]);
}


#line 140
+ (NSString *)getOCSPURLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  
#line 157
  return nil;
}


#line 170
+ (NSString *)getTSAURLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)certificate {
  
#line 171
  IOSByteArray *der = [((JavaSecurityCertX509Certificate *) nil_chk(certificate)) getExtensionValueWithNSString:ComItextpdfTextPdfSecuritySecurityIDs_get_ID_TSA_()];
  if (der == nil)
#line 173
  return nil;
  
#line 183
  return nil;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCRLWithJavaSecurityCertX509Certificate:", "getCRL", "Ljava.security.cert.CRL;", 0x9, "Ljava.security.cert.CertificateException;Ljava.security.cert.CRLException;Ljava.io.IOException;" },
    { "getCRLURLWithJavaSecurityCertX509Certificate:", "getCRLURL", "Ljava.lang.String;", 0x9, "Ljava.security.cert.CertificateParsingException;" },
    { "getCRLWithNSString:", "getCRL", "Ljava.security.cert.CRL;", 0x9, "Ljava.io.IOException;Ljava.security.cert.CertificateException;Ljava.security.cert.CRLException;" },
    { "getOCSPURLWithJavaSecurityCertX509Certificate:", "getOCSPURL", "Ljava.lang.String;", 0x9, NULL },
    { "getTSAURLWithJavaSecurityCertX509Certificate:", "getTSAURL", "Ljava.lang.String;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecurityCertificateUtil = { "CertificateUtil", "com.itextpdf.text.pdf.security", NULL, 0x1, 6, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfSecurityCertificateUtil;
}

@end
