//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/CertificateVerifier.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/CertificateVerifier.java"

#include "IOSClass.h"
#include "com/itextpdf/text/pdf/security/CertificateVerifier.h"
#include "java/io/IOException.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"


#line 60
@implementation ComItextpdfTextPdfSecurityCertificateVerifier


#line 72
- (instancetype)initWithComItextpdfTextPdfSecurityCertificateVerifier:(ComItextpdfTextPdfSecurityCertificateVerifier *)verifier {
  if (self = [super init]) {
    onlineCheckingAllowed_ =
#line 66
    YES;
    
#line 73
    self->verifier_ = verifier;
  }
  return self;
}


#line 80
- (void)setOnlineCheckingAllowedWithBoolean:(jboolean)onlineCheckingAllowed {
  
#line 81
  self->onlineCheckingAllowed_ = onlineCheckingAllowed;
}


#line 95
- (id<JavaUtilList>)verifyWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)signCert
                          withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)issuerCert
                                             withJavaUtilDate:(JavaUtilDate *)signDate {
  
#line 98
  if (signDate != nil)
#line 99
  [((JavaSecurityCertX509Certificate *) nil_chk(signCert)) checkValidityWithJavaUtilDate:signDate];
  
#line 101
  if (issuerCert != nil) {
    [((JavaSecurityCertX509Certificate *) nil_chk(signCert)) verifyWithJavaSecurityPublicKey:[issuerCert getPublicKey]];
  }
  else {
    
#line 106
    [signCert verifyWithJavaSecurityPublicKey:[((JavaSecurityCertX509Certificate *) nil_chk(signCert)) getPublicKey]];
  }
  id<JavaUtilList> result = [[JavaUtilArrayList alloc] init];
  if (verifier_ != nil)
#line 110
  [result addAllWithJavaUtilCollection:[verifier_ verifyWithJavaSecurityCertX509Certificate:signCert withJavaSecurityCertX509Certificate:issuerCert withJavaUtilDate:signDate]];
  return result;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfSecurityCertificateVerifier *)other {
  [super copyAllFieldsTo:other];
  other->onlineCheckingAllowed_ = onlineCheckingAllowed_;
  other->verifier_ = verifier_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfSecurityCertificateVerifier:", "CertificateVerifier", NULL, 0x1, NULL },
    { "setOnlineCheckingAllowedWithBoolean:", "setOnlineCheckingAllowed", "V", 0x1, NULL },
    { "verifyWithJavaSecurityCertX509Certificate:withJavaSecurityCertX509Certificate:withJavaUtilDate:", "verify", "Ljava.util.List;", 0x1, "Ljava.security.GeneralSecurityException;Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "verifier_", NULL, 0x4, "Lcom.itextpdf.text.pdf.security.CertificateVerifier;", NULL,  },
    { "onlineCheckingAllowed_", NULL, 0x4, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecurityCertificateVerifier = { "CertificateVerifier", "com.itextpdf.text.pdf.security", NULL, 0x1, 3, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfSecurityCertificateVerifier;
}

@end
