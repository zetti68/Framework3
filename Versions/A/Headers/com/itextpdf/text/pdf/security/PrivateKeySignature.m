//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/PrivateKeySignature.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/PrivateKeySignature.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/security/DigestAlgorithms.h"
#include "com/itextpdf/text/pdf/security/PrivateKeySignature.h"
#include "java/lang/IllegalStateException.h"
#include "java/security/GeneralSecurityException.h"


#line 56
@implementation ComItextpdfTextPdfSecurityPrivateKeySignature


#line 73
- (instancetype)initWithId:(id)pk
              withNSString:(NSString *)hashAlgorithm
              withNSString:(NSString *)provider {
  if (self = [super init]) {
    
#line 74
    self->pk_ = pk;
    
#line 75
    self->provider_ = provider;
    
#line 76
    self->hashAlgorithm_ = [ComItextpdfTextPdfSecurityDigestAlgorithms getDigestWithNSString:[ComItextpdfTextPdfSecurityDigestAlgorithms getAllowedDigestsWithNSString:hashAlgorithm]];
    
#line 77
    encryptionAlgorithm_ = nil;
    
#line 78
    if ([((NSString *) nil_chk(encryptionAlgorithm_)) hasPrefix:@"EC"]) {
      encryptionAlgorithm_ = @"ECDSA";
    }
  }
  return self;
}


#line 88
- (NSString *)getHashAlgorithm {
  
#line 89
  return hashAlgorithm_;
}


#line 97
- (NSString *)getEncryptionAlgorithm {
  
#line 98
  return encryptionAlgorithm_;
}


#line 108
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)b {
  
#line 109
  @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"Not implemented"];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfSecurityPrivateKeySignature *)other {
  [super copyAllFieldsTo:other];
  other->encryptionAlgorithm_ = encryptionAlgorithm_;
  other->hashAlgorithm_ = hashAlgorithm_;
  other->pk_ = pk_;
  other->provider_ = provider_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithId:withNSString:withNSString:", "PrivateKeySignature", NULL, 0x1, NULL },
    { "getHashAlgorithm", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getEncryptionAlgorithm", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "signWithByteArray:", "sign", "[B", 0x1, "Ljava.security.GeneralSecurityException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pk_", NULL, 0x2, "Ljava.lang.Object;", NULL,  },
    { "hashAlgorithm_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "encryptionAlgorithm_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "provider_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecurityPrivateKeySignature = { "PrivateKeySignature", "com.itextpdf.text.pdf.security", NULL, 0x1, 4, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfSecurityPrivateKeySignature;
}

@end
