//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/CRLVerifier.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/CRLVerifier.java"

#include "IOSClass.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/log/LoggerFactory.h"
#include "com/itextpdf/text/pdf/security/CRLVerifier.h"
#include "com/itextpdf/text/pdf/security/CertificateUtil.h"
#include "com/itextpdf/text/pdf/security/CertificateVerifier.h"
#include "com/itextpdf/text/pdf/security/VerificationException.h"
#include "com/itextpdf/text/pdf/security/VerificationOK.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/net/URL.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CRL.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "javax/security/auth/x500/X500Principal.h"

BOOL ComItextpdfTextPdfSecurityCRLVerifier_initialized = NO;


#line 65
@implementation ComItextpdfTextPdfSecurityCRLVerifier

id<ComItextpdfTextLogLogger> ComItextpdfTextPdfSecurityCRLVerifier_LOGGER_;


#line 78
- (instancetype)initWithComItextpdfTextPdfSecurityCertificateVerifier:(ComItextpdfTextPdfSecurityCertificateVerifier *)verifier
                                                     withJavaUtilList:(id<JavaUtilList>)crls {
  if (self =
#line 79
  [super initWithComItextpdfTextPdfSecurityCertificateVerifier:verifier]) {
    
#line 80
    self->crls_ = crls;
  }
  return self;
}


#line 93
- (id<JavaUtilList>)verifyWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)signCert
                          withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)issuerCert
                                             withJavaUtilDate:(JavaUtilDate *)signDate {
  
#line 95
  id<JavaUtilList> result = [[JavaUtilArrayList alloc] init];
  jint validCrlsFound = 0;
  
#line 98
  if (crls_ != nil) {
    for (JavaSecurityCertX509CRL * __strong crl in crls_) {
      if ([self verifyWithJavaSecurityCertX509CRL:crl withJavaSecurityCertX509Certificate:signCert withJavaSecurityCertX509Certificate:issuerCert withJavaUtilDate:signDate])
#line 101
      validCrlsFound++;
    }
  }
  
#line 105
  jboolean online = NO;
  if (onlineCheckingAllowed_ && validCrlsFound == 0) {
    if ([self verifyWithJavaSecurityCertX509CRL:[self getCRLWithJavaSecurityCertX509Certificate:signCert withJavaSecurityCertX509Certificate:issuerCert] withJavaSecurityCertX509Certificate:signCert withJavaSecurityCertX509Certificate:issuerCert withJavaUtilDate:signDate]) {
      validCrlsFound++;
      online = YES;
    }
  }
  
#line 113
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfSecurityCRLVerifier_LOGGER_)) infoWithNSString:JreStrcat("$I", @"Valid CRLs found: ", validCrlsFound)];
  if (validCrlsFound > 0) {
    [result addWithId:[[ComItextpdfTextPdfSecurityVerificationOK alloc] initWithJavaSecurityCertX509Certificate:signCert withIOSClass:[self getClass] withNSString:JreStrcat("$I$", @"Valid CRLs found: ", validCrlsFound, (online ? @" (online)" : @""))]];
  }
  if (verifier_ != nil)
#line 118
  [result addAllWithJavaUtilCollection:[verifier_ verifyWithJavaSecurityCertX509Certificate:signCert withJavaSecurityCertX509Certificate:issuerCert withJavaUtilDate:signDate]];
  
#line 120
  return result;
}

- (jboolean)verifyWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
          withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)signCert
          withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)issuerCert
                             withJavaUtilDate:(JavaUtilDate *)signDate {
  
#line 133
  if (crl == nil || signDate == nil)
#line 134
  return NO;
  
#line 136
  if ([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509CRL *) nil_chk(crl)) getIssuerX500Principal])) isEqual:[((JavaSecurityCertX509Certificate *) nil_chk(signCert)) getIssuerX500Principal]] &&
#line 137
  [((JavaUtilDate *) nil_chk(signDate)) afterWithJavaUtilDate:[crl getThisUpdate]] && [signDate beforeWithJavaUtilDate:[crl getNextUpdate]]) {
    
#line 139
    if ([self isSignatureValidWithJavaSecurityCertX509CRL:crl withJavaSecurityCertX509Certificate:issuerCert] && [crl isRevokedWithJavaSecurityCertCertificate:signCert]) {
      @throw [[ComItextpdfTextPdfSecurityVerificationException alloc] initWithJavaSecurityCertCertificate:signCert withNSString:@"The certificate has been revoked."];
    }
    return YES;
  }
  return NO;
}


#line 153
- (JavaSecurityCertX509CRL *)getCRLWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)signCert
                                   withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)issuerCert {
  
#line 154
  if (issuerCert == nil)
#line 155
  issuerCert = signCert;
  @try {
    
#line 158
    NSString *crlurl = [ComItextpdfTextPdfSecurityCertificateUtil getCRLURLWithJavaSecurityCertX509Certificate:signCert];
    if (crlurl == nil)
#line 160
    return nil;
    [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfSecurityCRLVerifier_LOGGER_)) infoWithNSString:JreStrcat("$$", @"Getting CRL from ", crlurl)];
    JavaSecurityCertCertificateFactory *cf = [JavaSecurityCertCertificateFactory getInstanceWithNSString:@"X.509"];
    
#line 164
    return (JavaSecurityCertX509CRL *) check_class_cast([((JavaSecurityCertCertificateFactory *) nil_chk(cf)) generateCRLWithJavaIoInputStream:[((JavaNetURL *) [[JavaNetURL alloc] initWithNSString:crlurl]) openStream]], [JavaSecurityCertX509CRL class]);
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
  @catch (JavaSecurityGeneralSecurityException *e) {
    return nil;
  }
}


#line 180
- (jboolean)isSignatureValidWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                    withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)crlIssuer {
  
#line 182
  if (crlIssuer != nil) {
    @try {
      [((JavaSecurityCertX509CRL *) nil_chk(crl)) verifyWithJavaSecurityPublicKey:[crlIssuer getPublicKey]];
      return YES;
    }
    @catch (
#line 186
    JavaSecurityGeneralSecurityException *e) {
      [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfSecurityCRLVerifier_LOGGER_)) warnWithNSString:@"CRL not issued by the same authority as the certificate that is being checked"];
    }
  }
  
#line 213
  return NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfSecurityCRLVerifier *)other {
  [super copyAllFieldsTo:other];
  other->crls_ = crls_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfSecurityCRLVerifier class]) {
    ComItextpdfTextPdfSecurityCRLVerifier_LOGGER_ =
#line 68
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfSecurityCRLVerifier class]]];
    ComItextpdfTextPdfSecurityCRLVerifier_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfSecurityCertificateVerifier:withJavaUtilList:", "CRLVerifier", NULL, 0x1, NULL },
    { "verifyWithJavaSecurityCertX509Certificate:withJavaSecurityCertX509Certificate:withJavaUtilDate:", "verify", "Ljava.util.List;", 0x1, "Ljava.security.GeneralSecurityException;Ljava.io.IOException;" },
    { "verifyWithJavaSecurityCertX509CRL:withJavaSecurityCertX509Certificate:withJavaSecurityCertX509Certificate:withJavaUtilDate:", "verify", "Z", 0x1, "Ljava.security.GeneralSecurityException;" },
    { "getCRLWithJavaSecurityCertX509Certificate:withJavaSecurityCertX509Certificate:", "getCRL", "Ljava.security.cert.X509CRL;", 0x1, NULL },
    { "isSignatureValidWithJavaSecurityCertX509CRL:withJavaSecurityCertX509Certificate:", "isSignatureValid", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER_", NULL, 0x1c, "Lcom.itextpdf.text.log.Logger;", &ComItextpdfTextPdfSecurityCRLVerifier_LOGGER_,  },
    { "crls_", NULL, 0x0, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecurityCRLVerifier = { "CRLVerifier", "com.itextpdf.text.pdf.security", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfSecurityCRLVerifier;
}

@end
