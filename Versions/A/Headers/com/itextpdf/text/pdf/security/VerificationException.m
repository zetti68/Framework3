//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/VerificationException.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/security/VerificationException.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/pdf/security/VerificationException.h"
#include "java/security/Principal.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"


#line 54
@implementation ComItextpdfTextPdfSecurityVerificationException


#line 62
- (instancetype)initWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                                       withNSString:(NSString *)message {
  return
#line 63
  [super initWithNSString:[NSString formatWithNSString:@"Certificate %s failed: %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ cert == nil ? @"Unknown" : [((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) check_class_cast(cert, [JavaSecurityCertX509Certificate class])) getSubjectDN])) getName], message } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaSecurityCertCertificate:withNSString:", "VerificationException", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfTextPdfSecurityVerificationException_serialVersionUID },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSecurityVerificationException = { "VerificationException", "com.itextpdf.text.pdf.security", NULL, 0x1, 1, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfSecurityVerificationException;
}

@end
