//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/DocumentFont.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/DocumentFont.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/CJKFont.h"
#include "com/itextpdf/text/pdf/DocumentFont.h"
#include "com/itextpdf/text/pdf/GlyphList.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PRTokeniser.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfContentParser.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapParserEx.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapToUnicode.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CidLocationFromByte.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfDocumentFont_initialized = NO;


#line 61
@implementation ComItextpdfTextPdfDocumentFont

IOSIntArray * ComItextpdfTextPdfDocumentFont_stdEnc_;


#line 106
- (instancetype)initWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)font {
  if (self = [super init]) {
    metrics_ =
#line 63
    [[JavaUtilHashMap alloc] init];
    uni2byte_ =
#line 67
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    byte2uni_ =
#line 68
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    ascender_ =
#line 70
    800;
    capHeight_ =
#line 71
    700;
    descender_ =
#line 72
    -200;
    italicAngle_ =
#line 73
    0;
    fontWeight_ =
#line 74
    0;
    llx_ =
#line 75
    -50;
    lly_ =
#line 76
    -200;
    urx_ =
#line 77
    100;
    ury_ =
#line 78
    900;
    isType0_ =
#line 79
    NO;
    defaultWidth_ =
#line 80
    1000;
    
#line 107
    self->refFont_ = nil;
    
#line 108
    self->font_ = font;
    
#line 109
    [self init__];
  }
  return self;
}


#line 112
- (instancetype)initWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)refFont {
  if (self = [super init]) {
    metrics_ =
#line 63
    [[JavaUtilHashMap alloc] init];
    uni2byte_ =
#line 67
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    byte2uni_ =
#line 68
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    ascender_ =
#line 70
    800;
    capHeight_ =
#line 71
    700;
    descender_ =
#line 72
    -200;
    italicAngle_ =
#line 73
    0;
    fontWeight_ =
#line 74
    0;
    llx_ =
#line 75
    -50;
    lly_ =
#line 76
    -200;
    urx_ =
#line 77
    100;
    ury_ =
#line 78
    900;
    isType0_ =
#line 79
    NO;
    defaultWidth_ =
#line 80
    1000;
    
#line 113
    self->refFont_ = refFont;
    
#line 114
    font_ = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:refFont], [ComItextpdfTextPdfPdfDictionary class]);
    
#line 115
    [self init__];
  }
  return self;
}


#line 118
- (ComItextpdfTextPdfPdfDictionary *)getFontDictionary {
  
#line 119
  return font_;
}


#line 122
- (void)init__ {
  
#line 123
  encoding_ = @"";
  fontSpecific_ = NO;
  fontType_ = ComItextpdfTextPdfBaseFont_FONT_TYPE_DOCUMENT;
  ComItextpdfTextPdfPdfName *baseFont = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(font_)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_()];
  fontName_ = baseFont != nil ? [ComItextpdfTextPdfPdfName decodeNameWithNSString:[baseFont description]] : @"Unspecified Font Name";
  ComItextpdfTextPdfPdfName *subType = [font_ getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()];
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TYPE1_())) isEqual:subType] || [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TRUETYPE_())) isEqual:subType])
#line 130
  [self doType1TT];
  else {
    ComItextpdfTextPdfPdfName *encodingName = [font_ getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_()];
    if (encodingName != nil) {
      NSString *enc = [ComItextpdfTextPdfPdfName decodeNameWithNSString:[encodingName description]];
      NSString *ffontname = [ComItextpdfTextPdfCJKFont GetCompatibleFontWithNSString:enc];
      if (ffontname != nil) {
        @try {
          cjkMirror_ = [ComItextpdfTextPdfBaseFont createFontWithNSString:ffontname withNSString:enc withBoolean:NO];
        }
        @catch (JavaLangException *e) {
          @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
        }
        cjkEncoding_ = enc;
        uniMap_ = [((ComItextpdfTextPdfCJKFont *) nil_chk(((ComItextpdfTextPdfCJKFont *) check_class_cast(cjkMirror_, [ComItextpdfTextPdfCJKFont class])))) getUniMap];
      }
      if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TYPE0_())) isEqual:subType]) {
        isType0_ = YES;
        if (![((NSString *) nil_chk(enc)) isEqual:@"Identity-H"] && cjkMirror_ != nil) {
          ComItextpdfTextPdfPdfArray *df = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[font_ getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENDANTFONTS_()]], [ComItextpdfTextPdfPdfArray class]);
          ComItextpdfTextPdfPdfDictionary *cidft = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfArray *) nil_chk(df)) getPdfObjectWithInt:0]], [ComItextpdfTextPdfPdfDictionary class]);
          ComItextpdfTextPdfPdfNumber *dwo = (ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(cidft)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DW_()]], [ComItextpdfTextPdfPdfNumber class]);
          if (dwo != nil)
#line 153
          defaultWidth_ = [dwo intValue];
          hMetrics_ = [self readWidthsWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[cidft getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_W_()]], [ComItextpdfTextPdfPdfArray class])];
          
#line 156
          ComItextpdfTextPdfPdfDictionary *fontDesc = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[cidft getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()]], [ComItextpdfTextPdfPdfDictionary class]);
          [self fillFontDescWithComItextpdfTextPdfPdfDictionary:fontDesc];
        }
        else {
          
#line 159
          [self processType0WithComItextpdfTextPdfPdfDictionary:font_];
        }
      }
    }
  }
}


#line 166
- (void)processType0WithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)font {
  
#line 167
  @try {
    ComItextpdfTextPdfPdfObject *toUniObject = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(font)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TOUNICODE_()]];
    ComItextpdfTextPdfPdfArray *df = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[font getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENDANTFONTS_()]], [ComItextpdfTextPdfPdfArray class]);
    ComItextpdfTextPdfPdfDictionary *cidft = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfArray *) nil_chk(df)) getPdfObjectWithInt:0]], [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfNumber *dwo = (ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(cidft)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DW_()]], [ComItextpdfTextPdfPdfNumber class]);
    jint dw = 1000;
    if (dwo != nil)
#line 174
    dw = [dwo intValue];
    ComItextpdfTextPdfIntHashtable *widths = [self readWidthsWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[cidft getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_W_()]], [ComItextpdfTextPdfPdfArray class])];
    ComItextpdfTextPdfPdfDictionary *fontDesc = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[cidft getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()]], [ComItextpdfTextPdfPdfDictionary class]);
    [self fillFontDescWithComItextpdfTextPdfPdfDictionary:fontDesc];
    if ([toUniObject isKindOfClass:[ComItextpdfTextPdfPRStream class]]) {
      [self fillMetricsWithByteArray:[ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(toUniObject, [ComItextpdfTextPdfPRStream class])] withComItextpdfTextPdfIntHashtable:widths withInt:dw];
    }
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 187
- (ComItextpdfTextPdfIntHashtable *)readWidthsWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)ws {
  
#line 188
  ComItextpdfTextPdfIntHashtable *hh = [[ComItextpdfTextPdfIntHashtable alloc] init];
  if (ws == nil)
#line 190
  return hh;
  for (jint k = 0; k < [((ComItextpdfTextPdfPdfArray *) nil_chk(ws)) size]; ++k) {
    jint c1 = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[ws getPdfObjectWithInt:k]], [ComItextpdfTextPdfPdfNumber class])))) intValue];
    ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[ws getPdfObjectWithInt:++k]];
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isArray]) {
      ComItextpdfTextPdfPdfArray *a2 = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
      for (jint j = 0; j < [a2 size]; ++j) {
        jint c2 = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[a2 getPdfObjectWithInt:j]], [ComItextpdfTextPdfPdfNumber class])))) intValue];
        [hh putWithInt:c1++ withInt:c2];
      }
    }
    else {
      jint c2 = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) intValue];
      jint w = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[ws getPdfObjectWithInt:++k]], [ComItextpdfTextPdfPdfNumber class])))) intValue];
      for (; c1 <= c2; ++c1)
#line 205
      [hh putWithInt:c1 withInt:w];
    }
  }
  return hh;
}


#line 211
- (NSString *)decodeStringWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *)ps {
  
#line 212
  if ([((ComItextpdfTextPdfPdfString *) nil_chk(ps)) isHexWriting])
#line 213
  return [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:[ps getBytes] withNSString:@"UnicodeBigUnmarked"];
  else
#line 215
  return [ps toUnicodeString];
}


#line 218
- (void)fillMetricsWithByteArray:(IOSByteArray *)touni
withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)widths
                         withInt:(jint)dw {
  
#line 219
  @try {
    ComItextpdfTextPdfPdfContentParser *ps = [[ComItextpdfTextPdfPdfContentParser alloc] initWithComItextpdfTextPdfPRTokeniser:[[ComItextpdfTextPdfPRTokeniser alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createSourceWithByteArray:touni]]]];
    ComItextpdfTextPdfPdfObject *ob = nil;
    jboolean notFound = YES;
    jint nestLevel = 0;
    jint maxExc = 50;
    while ((notFound || nestLevel > 0)) {
      @try {
        ob = [ps readPRObject];
      }
      @catch (JavaLangException *ex) {
        if (--maxExc < 0)
#line 231
        break;
        continue;
      }
      if (ob == nil)
#line 235
      break;
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(ob)) type] == ComItextpdfTextPdfPdfContentParser_COMMAND_TYPE) {
        if ([((NSString *) nil_chk([ob description])) isEqual:@"begin"]) {
          notFound = NO;
          nestLevel++;
        }
        else if ([((NSString *) nil_chk([ob description])) isEqual:@"end"]) {
          nestLevel--;
        }
        else if ([((NSString *) nil_chk([ob description])) isEqual:@"beginbfchar"]) {
          while (YES) {
            ComItextpdfTextPdfPdfObject *nx = [ps readPRObject];
            if ([((NSString *) nil_chk([((ComItextpdfTextPdfPdfObject *) nil_chk(nx)) description])) isEqual:@"endbfchar"])
#line 248
            break;
            NSString *cid = [self decodeStringWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *) check_class_cast(nx, [ComItextpdfTextPdfPdfString class])];
            NSString *uni = [self decodeStringWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *) check_class_cast([ps readPRObject], [ComItextpdfTextPdfPdfString class])];
            if (((jint) [((NSString *) nil_chk(uni)) length]) == 1) {
              jint cidc = [((NSString *) nil_chk(cid)) charAtWithInt:0];
              jint unic = [uni charAtWithInt:((jint) [uni length]) - 1];
              jint w = dw;
              if ([((ComItextpdfTextPdfIntHashtable *) nil_chk(widths)) containsKeyWithInt:cidc])
#line 256
              w = [widths getWithInt:cidc];
              (void) [((JavaUtilHashMap *) nil_chk(metrics_)) putWithId:[JavaLangInteger valueOfWithInt:unic] withId:[IOSIntArray arrayWithInts:(jint[]){ cidc, w } count:2]];
            }
          }
        }
        else if ([((NSString *) nil_chk([ob description])) isEqual:@"beginbfrange"]) {
          while (YES) {
            ComItextpdfTextPdfPdfObject *nx = [ps readPRObject];
            if ([((NSString *) nil_chk([((ComItextpdfTextPdfPdfObject *) nil_chk(nx)) description])) isEqual:@"endbfrange"])
#line 265
            break;
            NSString *cid1 = [self decodeStringWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *) check_class_cast(nx, [ComItextpdfTextPdfPdfString class])];
            NSString *cid2 = [self decodeStringWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *) check_class_cast([ps readPRObject], [ComItextpdfTextPdfPdfString class])];
            jint cid1c = [((NSString *) nil_chk(cid1)) charAtWithInt:0];
            jint cid2c = [((NSString *) nil_chk(cid2)) charAtWithInt:0];
            ComItextpdfTextPdfPdfObject *ob2 = [ps readPRObject];
            if ([((ComItextpdfTextPdfPdfObject *) nil_chk(ob2)) isString]) {
              NSString *uni = [self decodeStringWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *) check_class_cast(ob2, [ComItextpdfTextPdfPdfString class])];
              if (((jint) [((NSString *) nil_chk(uni)) length]) == 1) {
                jint unic = [uni charAtWithInt:((jint) [uni length]) - 1];
                for (; cid1c <= cid2c; cid1c++, unic++) {
                  jint w = dw;
                  if ([((ComItextpdfTextPdfIntHashtable *) nil_chk(widths)) containsKeyWithInt:cid1c])
#line 278
                  w = [widths getWithInt:cid1c];
                  (void) [((JavaUtilHashMap *) nil_chk(metrics_)) putWithId:[JavaLangInteger valueOfWithInt:unic] withId:[IOSIntArray arrayWithInts:(jint[]){ cid1c, w } count:2]];
                }
              }
            }
            else {
              ComItextpdfTextPdfPdfArray *a = (ComItextpdfTextPdfPdfArray *) check_class_cast(ob2, [ComItextpdfTextPdfPdfArray class]);
              for (jint j = 0; j < [a size]; ++j, ++cid1c) {
                NSString *uni = [self decodeStringWithComItextpdfTextPdfPdfString:[a getAsStringWithInt:j]];
                if (((jint) [((NSString *) nil_chk(uni)) length]) == 1) {
                  jint unic = [uni charAtWithInt:((jint) [uni length]) - 1];
                  jint w = dw;
                  if ([((ComItextpdfTextPdfIntHashtable *) nil_chk(widths)) containsKeyWithInt:cid1c])
#line 291
                  w = [widths getWithInt:cid1c];
                  (void) [((JavaUtilHashMap *) nil_chk(metrics_)) putWithId:[JavaLangInteger valueOfWithInt:unic] withId:[IOSIntArray arrayWithInts:(jint[]){ cid1c, w } count:2]];
                }
              }
            }
          }
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 306
- (void)doType1TT {
  
#line 307
  ComItextpdfTextPdfFontsCmapsCMapToUnicode *toUnicode = nil;
  ComItextpdfTextPdfPdfObject *enc = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(font_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_()]];
  if (enc == nil) {
    [self fillEncodingWithComItextpdfTextPdfPdfName:nil];
    @try {
      toUnicode = [self processToUnicode];
      if (toUnicode != nil) {
        id<JavaUtilMap> rm = [toUnicode createReverseMapping];
        for (id<JavaUtilMap_Entry> __strong kv in nil_chk([((id<JavaUtilMap>) nil_chk(rm)) entrySet])) {
          [((ComItextpdfTextPdfIntHashtable *) nil_chk(uni2byte_)) putWithInt:[((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(kv)) getKey])) intValue] withInt:[((JavaLangInteger *) nil_chk([kv getValue])) intValue]];
          [((ComItextpdfTextPdfIntHashtable *) nil_chk(byte2uni_)) putWithInt:[((JavaLangInteger *) nil_chk([kv getValue])) intValue] withInt:[((JavaLangInteger *) nil_chk([kv getKey])) intValue]];
        }
      }
    }
    @catch (JavaLangException *ex) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ex];
    }
  }
  else {
    if ([enc isName])
#line 327
    [self fillEncodingWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *) check_class_cast(enc, [ComItextpdfTextPdfPdfName class])];
    else if ([enc isDictionary]) {
      ComItextpdfTextPdfPdfDictionary *encDic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(enc, [ComItextpdfTextPdfPdfDictionary class]);
      enc = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[encDic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEENCODING_()]];
      if (enc == nil)
#line 332
      [self fillEncodingWithComItextpdfTextPdfPdfName:nil];
      else
#line 334
      [self fillEncodingWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *) check_class_cast(enc, [ComItextpdfTextPdfPdfName class])];
      ComItextpdfTextPdfPdfArray *diffs = [encDic getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DIFFERENCES_()];
      if (diffs != nil) {
        diffmap_ = [[ComItextpdfTextPdfIntHashtable alloc] init];
        jint currentNumber = 0;
        for (jint k = 0; k < [diffs size]; ++k) {
          ComItextpdfTextPdfPdfObject *obj = [diffs getPdfObjectWithInt:k];
          if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isNumber])
#line 342
          currentNumber = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) intValue];
          else {
            IOSIntArray *c = [ComItextpdfTextPdfGlyphList nameToUnicodeWithNSString:[ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfName *) check_class_cast(obj, [ComItextpdfTextPdfPdfName class])) description]]];
            if (c != nil && c->size_ > 0) {
              [((ComItextpdfTextPdfIntHashtable *) nil_chk(uni2byte_)) putWithInt:IOSIntArray_Get(c, 0) withInt:currentNumber];
              [((ComItextpdfTextPdfIntHashtable *) nil_chk(byte2uni_)) putWithInt:currentNumber withInt:IOSIntArray_Get(c, 0)];
              [diffmap_ putWithInt:IOSIntArray_Get(c, 0) withInt:currentNumber];
            }
            else {
              if (toUnicode == nil) {
                toUnicode = [self processToUnicode];
                if (toUnicode == nil) {
                  toUnicode = [[ComItextpdfTextPdfFontsCmapsCMapToUnicode alloc] init];
                }
              }
              NSString *unicode = [((ComItextpdfTextPdfFontsCmapsCMapToUnicode *) nil_chk(toUnicode)) lookupWithByteArray:[IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) currentNumber } count:1] withInt:0 withInt:1];
              if ((unicode != nil) && (((jint) [unicode length]) == 1)) {
                [((ComItextpdfTextPdfIntHashtable *) nil_chk(self->uni2byte_)) putWithInt:[unicode charAtWithInt:0] withInt:currentNumber];
                [((ComItextpdfTextPdfIntHashtable *) nil_chk(self->byte2uni_)) putWithInt:currentNumber withInt:[unicode charAtWithInt:0]];
                [self->diffmap_ putWithInt:[unicode charAtWithInt:0] withInt:currentNumber];
              }
            }
            ++currentNumber;
          }
        }
      }
    }
  }
  ComItextpdfTextPdfPdfArray *newWidths = [font_ getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIDTHS_()];
  ComItextpdfTextPdfPdfNumber *first = [font_ getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRSTCHAR_()];
  ComItextpdfTextPdfPdfNumber *last = [font_ getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LASTCHAR_()];
  if ([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfBaseFont_get_BuiltinFonts14_())) containsKeyWithId:fontName_]) {
    ComItextpdfTextPdfBaseFont *bf;
    @try {
      bf = [ComItextpdfTextPdfBaseFont createFontWithNSString:fontName_ withNSString:ComItextpdfTextPdfBaseFont_get_WINANSI_() withBoolean:NO];
    }
    @catch (JavaLangException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
    IOSIntArray *e = [((ComItextpdfTextPdfIntHashtable *) nil_chk(uni2byte_)) toOrderedKeys];
    for (jint k = 0; k < ((IOSIntArray *) nil_chk(e))->size_; ++k) {
      jint n = [uni2byte_ getWithInt:IOSIntArray_Get(e, k)];
      *IOSIntArray_GetRef(nil_chk(widths_), n) = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getRawWidthWithInt:n withNSString:[ComItextpdfTextPdfGlyphList unicodeToNameWithInt:IOSIntArray_Get(e, k)]];
    }
    if (diffmap_ != nil) {
      e = [diffmap_ toOrderedKeys];
      for (jint k = 0; k < ((IOSIntArray *) nil_chk(e))->size_; ++k) {
        jint n = [diffmap_ getWithInt:IOSIntArray_Get(e, k)];
        *IOSIntArray_GetRef(nil_chk(widths_), n) = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getRawWidthWithInt:n withNSString:[ComItextpdfTextPdfGlyphList unicodeToNameWithInt:IOSIntArray_Get(e, k)]];
      }
      diffmap_ = nil;
    }
    ascender_ = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:1000];
    capHeight_ = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_CAPHEIGHT withFloat:1000];
    descender_ = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:1000];
    italicAngle_ = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ITALICANGLE withFloat:1000];
    fontWeight_ = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_FONT_WEIGHT withFloat:1000];
    llx_ = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXLLX withFloat:1000];
    lly_ = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXLLY withFloat:1000];
    urx_ = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXURX withFloat:1000];
    ury_ = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXURY withFloat:1000];
  }
  if (first != nil && last != nil && newWidths != nil) {
    jint f = [first intValue];
    jint nSize = f + [newWidths size];
    if (((IOSIntArray *) nil_chk(widths_))->size_ < nSize) {
      IOSIntArray *tmp = [IOSIntArray arrayWithLength:nSize];
      [JavaLangSystem arraycopyWithId:widths_ withInt:0 withId:tmp withInt:0 withInt:f];
      widths_ = tmp;
    }
    for (jint k = 0; k < [newWidths size]; ++k) {
      *IOSIntArray_GetRef(widths_, f + k) = [((ComItextpdfTextPdfPdfNumber *) nil_chk([newWidths getAsNumberWithInt:k])) intValue];
    }
  }
  [self fillFontDescWithComItextpdfTextPdfPdfDictionary:[font_ getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()]];
}


#line 419
- (ComItextpdfTextPdfFontsCmapsCMapToUnicode *)processToUnicode {
  
#line 420
  ComItextpdfTextPdfFontsCmapsCMapToUnicode *cmapRet = nil;
  ComItextpdfTextPdfPdfObject *toUni = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(self->font_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TOUNICODE_()]];
  if ([toUni isKindOfClass:[ComItextpdfTextPdfPRStream class]]) {
    @try {
      IOSByteArray *touni = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(toUni, [ComItextpdfTextPdfPRStream class])];
      ComItextpdfTextPdfFontsCmapsCidLocationFromByte *lb = [[ComItextpdfTextPdfFontsCmapsCidLocationFromByte alloc] initWithByteArray:touni];
      cmapRet = [[ComItextpdfTextPdfFontsCmapsCMapToUnicode alloc] init];
      [ComItextpdfTextPdfFontsCmapsCMapParserEx parseCidWithNSString:@"" withComItextpdfTextPdfFontsCmapsAbstractCMap:cmapRet withComItextpdfTextPdfFontsCmapsCidLocation:lb];
    }
    @catch (
#line 428
    JavaLangException *e) {
      cmapRet = nil;
    }
  }
  return cmapRet;
}


#line 435
- (void)fillFontDescWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)fontDesc {
  
#line 436
  if (fontDesc == nil)
#line 437
  return;
  ComItextpdfTextPdfPdfNumber *v = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(fontDesc)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ASCENT_()];
  if (v != nil)
#line 440
  ascender_ = [v floatValue];
  v = [fontDesc getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CAPHEIGHT_()];
  if (v != nil)
#line 443
  capHeight_ = [v floatValue];
  v = [fontDesc getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENT_()];
  if (v != nil)
#line 446
  descender_ = [v floatValue];
  v = [fontDesc getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ITALICANGLE_()];
  if (v != nil)
#line 449
  italicAngle_ = [v floatValue];
  v = [fontDesc getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTWEIGHT_()];
  if (v != nil) {
    fontWeight_ = [v floatValue];
  }
  ComItextpdfTextPdfPdfArray *bbox = [fontDesc getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTBBOX_()];
  if (bbox != nil) {
    llx_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk([bbox getAsNumberWithInt:0])) floatValue];
    lly_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk([bbox getAsNumberWithInt:1])) floatValue];
    urx_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk([bbox getAsNumberWithInt:2])) floatValue];
    ury_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk([bbox getAsNumberWithInt:3])) floatValue];
    if (llx_ > urx_) {
      jfloat t = llx_;
      llx_ = urx_;
      urx_ = t;
    }
    if (lly_ > ury_) {
      jfloat t = lly_;
      lly_ = ury_;
      ury_ = t;
    }
  }
  jfloat maxAscent = [JavaLangMath maxWithFloat:ury_ withFloat:ascender_];
  jfloat minDescent = [JavaLangMath minWithFloat:lly_ withFloat:descender_];
  ascender_ = maxAscent * 1000 / (maxAscent - minDescent);
  descender_ = minDescent * 1000 / (maxAscent - minDescent);
}


#line 477
- (void)fillEncodingWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)encoding {
  
#line 478
  if (encoding == nil && [self isSymbolic]) {
    for (jint k = 0; k < 256; ++k) {
      [((ComItextpdfTextPdfIntHashtable *) nil_chk(uni2byte_)) putWithInt:k withInt:k];
      [((ComItextpdfTextPdfIntHashtable *) nil_chk(byte2uni_)) putWithInt:k withInt:k];
    }
  }
  else
#line 483
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_MAC_ROMAN_ENCODING_())) isEqual:encoding] || [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_WIN_ANSI_ENCODING_())) isEqual:encoding]) {
    IOSByteArray *b = [IOSByteArray arrayWithLength:256];
    for (jint k = 0; k < 256; ++k)
#line 486
    *IOSByteArray_GetRef(b, k) = (jbyte) k;
    NSString *enc = ComItextpdfTextPdfBaseFont_get_WINANSI_();
    if ([ComItextpdfTextPdfPdfName_get_MAC_ROMAN_ENCODING_() isEqual:encoding])
#line 489
    enc = ComItextpdfTextPdfBaseFont_get_MACROMAN_();
    NSString *cv = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:b withNSString:enc];
    IOSCharArray *arr = [((NSString *) nil_chk(cv)) toCharArray];
    for (jint k = 0; k < 256; ++k) {
      [((ComItextpdfTextPdfIntHashtable *) nil_chk(uni2byte_)) putWithInt:IOSCharArray_Get(nil_chk(arr), k) withInt:k];
      [((ComItextpdfTextPdfIntHashtable *) nil_chk(byte2uni_)) putWithInt:k withInt:IOSCharArray_Get(arr, k)];
    }
  }
  else {
    for (jint k = 0; k < 256; ++k) {
      [((ComItextpdfTextPdfIntHashtable *) nil_chk(uni2byte_)) putWithInt:IOSIntArray_Get(nil_chk(ComItextpdfTextPdfDocumentFont_stdEnc_), k) withInt:k];
      [((ComItextpdfTextPdfIntHashtable *) nil_chk(byte2uni_)) putWithInt:k withInt:IOSIntArray_Get(ComItextpdfTextPdfDocumentFont_stdEnc_, k)];
    }
  }
}


#line 515
- (IOSObjectArray *)getFamilyFontName {
  
#line 516
  return [self getFullFontName];
}


#line 529
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  
#line 530
  if (cjkMirror_ != nil)
#line 531
  return [cjkMirror_ getFontDescriptorWithInt:key withFloat:fontSize];
  switch (key) {
    case ComItextpdfTextPdfBaseFont_AWT_ASCENT:
    case ComItextpdfTextPdfBaseFont_ASCENT:
    return ascender_ * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_CAPHEIGHT:
    return capHeight_ * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_AWT_DESCENT:
    case ComItextpdfTextPdfBaseFont_DESCENT:
    return descender_ * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_ITALICANGLE:
    return italicAngle_;
    case ComItextpdfTextPdfBaseFont_BBOXLLX:
    return llx_ * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_BBOXLLY:
    return lly_ * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_BBOXURX:
    return urx_ * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_BBOXURY:
    return ury_ * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_AWT_LEADING:
    return 0;
    case ComItextpdfTextPdfBaseFont_AWT_MAXADVANCE:
    return (urx_ - llx_) * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_FONT_WEIGHT:
    return fontWeight_ * fontSize / 1000;
  }
  return 0;
}


#line 571
- (IOSObjectArray *)getFullFontName {
  
#line 572
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"", @"", @"", fontName_ } count:4 type:[IOSClass classWithClass:[NSString class]]] } count:1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
}


#line 585
- (IOSObjectArray *)getAllNameEntries {
  
#line 586
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"4", @"", @"", @"", fontName_ } count:5 type:[IOSClass classWithClass:[NSString class]]] } count:1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
}


#line 596
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  
#line 597
  return 0;
}


#line 605
- (NSString *)getPostscriptFontName {
  
#line 606
  return fontName_;
}


#line 617
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  
#line 618
  return 0;
}


#line 626
- (jboolean)hasKernPairs {
  
#line 627
  return NO;
}


#line 639
- (void)writeFontWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                               withNSObjectArray:(IOSObjectArray *)params {
}


#line 648
- (ComItextpdfTextPdfPdfStream *)getFullFontStream {
  
#line 649
  return nil;
}


#line 658
- (jint)getWidthWithInt:(jint)char1 {
  
#line 659
  if (isType0_) {
    if (hMetrics_ != nil && cjkMirror_ != nil && ![cjkMirror_ isVertical]) {
      jint c = [cjkMirror_ getCidCodeWithInt:char1];
      jint v = [hMetrics_ getWithInt:c];
      if (v > 0)
#line 664
      return v;
      else
#line 666
      return defaultWidth_;
    }
    else {
      
#line 668
      IOSIntArray *ws = [((JavaUtilHashMap *) nil_chk(metrics_)) getWithId:[JavaLangInteger valueOfWithInt:char1]];
      if (ws != nil)
#line 670
      return IOSIntArray_Get(ws, 1);
      else
#line 672
      return 0;
    }
  }
  if (cjkMirror_ != nil)
#line 676
  return [cjkMirror_ getWidthWithInt:char1];
  return [super getWidthWithInt:char1];
}


#line 681
- (jint)getWidthWithNSString:(NSString *)text {
  
#line 682
  if (isType0_) {
    jint total = 0;
    if (hMetrics_ != nil && cjkMirror_ != nil && ![cjkMirror_ isVertical]) {
      if ([((ComItextpdfTextPdfCJKFont *) check_class_cast(cjkMirror_, [ComItextpdfTextPdfCJKFont class])) isIdentity]) {
        for (jint k = 0; k < ((jint) [((NSString *) nil_chk(text)) length]); ++k) {
          total += [self getWidthWithInt:[text charAtWithInt:k]];
        }
      }
      else {
        for (jint k = 0; k < ((jint) [((NSString *) nil_chk(text)) length]); ++k) {
          jint val;
          if ([ComItextpdfTextUtilities isSurrogatePairWithNSString:text withInt:k]) {
            val = [ComItextpdfTextUtilities convertToUtf32WithNSString:text withInt:k];
            k++;
          }
          else {
            val = [text charAtWithInt:k];
          }
          total += [self getWidthWithInt:val];
        }
      }
    }
    else {
      
#line 704
      IOSCharArray *chars = [((NSString *) nil_chk(text)) toCharArray];
      jint len = ((IOSCharArray *) nil_chk(chars))->size_;
      for (jint k = 0; k < len; ++k) {
        IOSIntArray *ws = [((JavaUtilHashMap *) nil_chk(metrics_)) getWithId:[JavaLangInteger valueOfWithInt:IOSCharArray_Get(chars, k)]];
        if (ws != nil)
#line 709
        total += IOSIntArray_Get(ws, 1);
      }
    }
    return total;
  }
  if (cjkMirror_ != nil)
#line 715
  return [cjkMirror_ getWidthWithNSString:text];
  return [super getWidthWithNSString:text];
}


#line 720
- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  
#line 721
  if (cjkMirror_ != nil)
#line 722
  return [cjkMirror_ convertToBytesWithNSString:text];
  else if (isType0_) {
    IOSCharArray *chars = [((NSString *) nil_chk(text)) toCharArray];
    jint len = ((IOSCharArray *) nil_chk(chars))->size_;
    IOSByteArray *b = [IOSByteArray arrayWithLength:len * 2];
    jint bptr = 0;
    for (jint k = 0; k < len; ++k) {
      IOSIntArray *ws = [((JavaUtilHashMap *) nil_chk(metrics_)) getWithId:[JavaLangInteger valueOfWithInt:IOSCharArray_Get(chars, k)]];
      if (ws != nil) {
        jint g = IOSIntArray_Get(ws, 0);
        *IOSByteArray_GetRef(b, bptr++) = (jbyte) (g / 256);
        *IOSByteArray_GetRef(b, bptr++) = (jbyte) g;
      }
    }
    if (bptr == b->size_)
#line 737
    return b;
    else {
      IOSByteArray *nb = [IOSByteArray arrayWithLength:bptr];
      [JavaLangSystem arraycopyWithId:b withInt:0 withId:nb withInt:0 withInt:bptr];
      return nb;
    }
  }
  else {
    IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
    IOSByteArray *b = [IOSByteArray arrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
    jint ptr = 0;
    for (jint k = 0; k < cc->size_; ++k) {
      if ([((ComItextpdfTextPdfIntHashtable *) nil_chk(uni2byte_)) containsKeyWithInt:IOSCharArray_Get(cc, k)])
#line 750
      *IOSByteArray_GetRef(b, ptr++) = (jbyte) [uni2byte_ getWithInt:IOSCharArray_Get(cc, k)];
    }
    if (ptr == b->size_)
#line 753
    return b;
    else {
      IOSByteArray *b2 = [IOSByteArray arrayWithLength:ptr];
      [JavaLangSystem arraycopyWithId:b withInt:0 withId:b2 withInt:0 withInt:ptr];
      return b2;
    }
  }
}


#line 763
- (IOSByteArray *)convertToBytesWithInt:(jint)char1 {
  
#line 764
  if (cjkMirror_ != nil)
#line 765
  return [cjkMirror_ convertToBytesWithInt:char1];
  else if (isType0_) {
    IOSIntArray *ws = [((JavaUtilHashMap *) nil_chk(metrics_)) getWithId:[JavaLangInteger valueOfWithInt:char1]];
    if (ws != nil) {
      jint g = IOSIntArray_Get(ws, 0);
      return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) (g / 256), (jbyte) g } count:2];
    }
    else
#line 773
    return [IOSByteArray arrayWithLength:0];
  }
  else {
    if ([((ComItextpdfTextPdfIntHashtable *) nil_chk(uni2byte_)) containsKeyWithInt:char1])
#line 777
    return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) [uni2byte_ getWithInt:char1] } count:1];
    else
#line 779
    return [IOSByteArray arrayWithLength:0];
  }
}


#line 783
- (ComItextpdfTextPdfPdfIndirectReference *)getIndirectReference {
  
#line 784
  if (refFont_ == nil)
#line 785
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Font reuse not allowed with direct font objects."];
  return refFont_;
}


#line 790
- (jboolean)charExistsWithInt:(jint)c {
  
#line 791
  if (cjkMirror_ != nil)
#line 792
  return [cjkMirror_ charExistsWithInt:c];
  else if (isType0_) {
    return [((JavaUtilHashMap *) nil_chk(metrics_)) containsKeyWithId:[JavaLangInteger valueOfWithInt:c]];
  }
  else
#line 797
  return [super charExistsWithInt:c];
}


#line 806
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
}


#line 810
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  
#line 811
  return NO;
}


#line 815
- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  
#line 816
  return nil;
}


#line 820
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  return nil;
}

- (jboolean)isVertical {
  
#line 826
  if (cjkMirror_ != nil)
#line 827
  return [cjkMirror_ isVertical];
  else
#line 829
  return [super isVertical];
}


#line 837
- (ComItextpdfTextPdfIntHashtable *)getUni2Byte {
  
#line 838
  return uni2byte_;
}


#line 846
- (ComItextpdfTextPdfIntHashtable *)getByte2Uni {
  
#line 847
  return byte2uni_;
}


#line 855
- (ComItextpdfTextPdfIntHashtable *)getDiffmap {
  
#line 856
  return diffmap_;
}


#line 859
- (jboolean)isSymbolic {
  
#line 860
  ComItextpdfTextPdfPdfDictionary *fontDescriptor = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(font_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()];
  if (fontDescriptor == nil)
#line 862
  return NO;
  ComItextpdfTextPdfPdfNumber *flags = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(fontDescriptor)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FLAGS_()];
  if (flags == nil)
#line 865
  return NO;
  return ([((ComItextpdfTextPdfPdfNumber *) nil_chk(flags)) intValue] & (jint) 0x04) != 0;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfDocumentFont *)other {
  [super copyAllFieldsTo:other];
  other->ascender_ = ascender_;
  other->byte2uni_ = byte2uni_;
  other->capHeight_ = capHeight_;
  other->cjkEncoding_ = cjkEncoding_;
  other->cjkMirror_ = cjkMirror_;
  other->defaultWidth_ = defaultWidth_;
  other->descender_ = descender_;
  other->diffmap_ = diffmap_;
  other->font_ = font_;
  other->fontName_ = fontName_;
  other->fontWeight_ = fontWeight_;
  other->hMetrics_ = hMetrics_;
  other->isType0_ = isType0_;
  other->italicAngle_ = italicAngle_;
  other->llx_ = llx_;
  other->lly_ = lly_;
  other->metrics_ = metrics_;
  other->refFont_ = refFont_;
  other->uni2byte_ = uni2byte_;
  other->uniMap_ = uniMap_;
  other->urx_ = urx_;
  other->ury_ = ury_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfDocumentFont class]) {
    ComItextpdfTextPdfDocumentFont_stdEnc_ = [IOSIntArray arrayWithInts:(jint[]){
#line 88
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 89
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 90
      32, 33, 34, 35, 36, 37, 38, 8217, 40, 41, 42, 43, 44, 45, 46, 47,
#line 91
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
#line 92
      64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
#line 93
      80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#line 94
      8216, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
#line 95
      112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 0,
#line 96
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 97
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 98
      0, 161, 162, 163, 8260, 165, 402, 167, 164, 39, 8220, 171, 8249, 8250, 64257, 64258,
#line 99
      0, 8211, 8224, 8225, 183, 0, 182, 8226, 8218, 8222, 8221, 187, 8230, 8240, 0, 191,
#line 100
      0, 96, 180, 710, 732, 175, 728, 729, 168, 0, 730, 184, 0, 733, 731, 711,
#line 101
      8212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 102
      0, 198, 0, 170, 0, 0, 0, 0, 321, 216, 338, 186, 0, 0, 0, 0,
#line 103
      0, 230, 0, 0, 0, 305, 0, 0, 322, 248, 339, 223, 0, 0, 0, 0 } count:256];
      ComItextpdfTextPdfDocumentFont_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfDictionary:", "DocumentFont", NULL, 0x0, NULL },
    { "initWithComItextpdfTextPdfPRIndirectReference:", "DocumentFont", NULL, 0x0, NULL },
    { "getFontDictionary", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "init__", "init", "V", 0x2, NULL },
    { "processType0WithComItextpdfTextPdfPdfDictionary:", "processType0", "V", 0x2, NULL },
    { "readWidthsWithComItextpdfTextPdfPdfArray:", "readWidths", "Lcom.itextpdf.text.pdf.IntHashtable;", 0x2, NULL },
    { "decodeStringWithComItextpdfTextPdfPdfString:", "decodeString", "Ljava.lang.String;", 0x2, NULL },
    { "fillMetricsWithByteArray:withComItextpdfTextPdfIntHashtable:withInt:", "fillMetrics", "V", 0x2, NULL },
    { "doType1TT", NULL, "V", 0x2, NULL },
    { "processToUnicode", NULL, "Lcom.itextpdf.text.pdf.fonts.cmaps.CMapToUnicode;", 0x2, NULL },
    { "fillFontDescWithComItextpdfTextPdfPdfDictionary:", "fillFontDesc", "V", 0x2, NULL },
    { "fillEncodingWithComItextpdfTextPdfPdfName:", "fillEncoding", "V", 0x2, NULL },
    { "getFamilyFontName", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getFontDescriptorWithInt:withFloat:", "getFontDescriptor", "F", 0x1, NULL },
    { "getFullFontName", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getAllNameEntries", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getKerningWithInt:withInt:", "getKerning", "I", 0x1, NULL },
    { "getPostscriptFontName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getRawWidthWithInt:withNSString:", "getRawWidth", "I", 0x0, NULL },
    { "hasKernPairs", NULL, "Z", 0x1, NULL },
    { "writeFontWithComItextpdfTextPdfPdfWriter:withComItextpdfTextPdfPdfIndirectReference:withNSObjectArray:", "writeFont", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getFullFontStream", NULL, "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, NULL },
    { "getWidthWithInt:", "getWidth", "I", 0x1, NULL },
    { "getWidthWithNSString:", "getWidth", "I", 0x1, NULL },
    { "convertToBytesWithNSString:", "convertToBytes", "[B", 0x1, NULL },
    { "convertToBytesWithInt:", "convertToBytes", "[B", 0x0, NULL },
    { "getIndirectReference", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, NULL },
    { "charExistsWithInt:", "charExists", "Z", 0x1, NULL },
    { "setPostscriptFontNameWithNSString:", "setPostscriptFontName", "V", 0x1, NULL },
    { "setKerningWithInt:withInt:withInt:", "setKerning", "Z", 0x1, NULL },
    { "getCharBBoxWithInt:", "getCharBBox", "[I", 0x1, NULL },
    { "getRawCharBBoxWithInt:withNSString:", "getRawCharBBox", "[I", 0x4, NULL },
    { "isVertical", NULL, "Z", 0x1, NULL },
    { "getUni2Byte", NULL, "Lcom.itextpdf.text.pdf.IntHashtable;", 0x0, NULL },
    { "getByte2Uni", NULL, "Lcom.itextpdf.text.pdf.IntHashtable;", 0x0, NULL },
    { "getDiffmap", NULL, "Lcom.itextpdf.text.pdf.IntHashtable;", 0x0, NULL },
    { "isSymbolic", NULL, "Z", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "metrics_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "fontName_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "refFont_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PRIndirectReference;", NULL,  },
    { "font_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "uni2byte_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "byte2uni_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "diffmap_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "ascender_", NULL, 0x2, "F", NULL,  },
    { "capHeight_", NULL, 0x2, "F", NULL,  },
    { "descender_", NULL, 0x2, "F", NULL,  },
    { "italicAngle_", NULL, 0x2, "F", NULL,  },
    { "fontWeight_", NULL, 0x2, "F", NULL,  },
    { "llx_", NULL, 0x2, "F", NULL,  },
    { "lly_", NULL, 0x2, "F", NULL,  },
    { "urx_", NULL, 0x2, "F", NULL,  },
    { "ury_", NULL, 0x2, "F", NULL,  },
    { "isType0_", NULL, 0x4, "Z", NULL,  },
    { "defaultWidth_", NULL, 0x4, "I", NULL,  },
    { "hMetrics_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "cjkEncoding_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "uniMap_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "cjkMirror_", NULL, 0x2, "Lcom.itextpdf.text.pdf.BaseFont;", NULL,  },
    { "stdEnc_", NULL, 0x1a, "[I", &ComItextpdfTextPdfDocumentFont_stdEnc_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfDocumentFont = { "DocumentFont", "com.itextpdf.text.pdf", NULL, 0x1, 37, methods, 23, fields, 0, NULL};
  return &_ComItextpdfTextPdfDocumentFont;
}

@end
