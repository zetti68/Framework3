//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPTable.java
//

#ifndef _ComItextpdfTextPdfPdfPTable_H_
#define _ComItextpdfTextPdfPdfPTable_H_

#include "J2ObjC_header.h"
#include "com/itextpdf/text/LargeElement.h"
#include "com/itextpdf/text/api/Spaceable.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"

@class ComItextpdfTextAccessibleElementId;
@class ComItextpdfTextImage;
@class ComItextpdfTextPdfPdfContentByte;
@class ComItextpdfTextPdfPdfName;
@class ComItextpdfTextPdfPdfObject;
@class ComItextpdfTextPdfPdfPCell;
@class ComItextpdfTextPdfPdfPRow;
@class ComItextpdfTextPdfPdfPTableBody;
@class ComItextpdfTextPdfPdfPTableFooter;
@class ComItextpdfTextPdfPdfPTableHeader;
@class ComItextpdfTextPdfPdfPTable_FittingRows;
@class ComItextpdfTextPhrase;
@class ComItextpdfTextRectangle;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilArrayList;
@class JavaUtilHashMap;
@protocol ComItextpdfTextElementListener;
@protocol ComItextpdfTextPdfPdfPTableEvent;
@protocol JavaUtilList;
@protocol JavaUtilMap;

#define ComItextpdfTextPdfPdfPTable_BASECANVAS 0
#define ComItextpdfTextPdfPdfPTable_BACKGROUNDCANVAS 1
#define ComItextpdfTextPdfPdfPTable_LINECANVAS 2
#define ComItextpdfTextPdfPdfPTable_TEXTCANVAS 3

@interface ComItextpdfTextPdfPdfPTable : NSObject < ComItextpdfTextLargeElement, ComItextpdfTextApiSpaceable, ComItextpdfTextPdfInterfacesIAccessibleElement > {
 @public
  JavaUtilArrayList *rows_;
  jfloat totalHeight_;
  IOSObjectArray *currentRow_;
  jint currentColIdx_;
  ComItextpdfTextPdfPdfPCell *defaultCell_;
  jfloat totalWidth_;
  IOSFloatArray *relativeWidths_;
  IOSFloatArray *absoluteWidths_;
  id<ComItextpdfTextPdfPdfPTableEvent> tableEvent_;
  jint headerRows_;
  jfloat widthPercentage_;
  jboolean isColspan_;
  jint runDirection_;
  jfloat spacingBefore__;
  jfloat spacingAfter__;
  jboolean complete_;
  jboolean rowCompleted_;
  jboolean loopCheck_;
  jboolean rowsNotChecked_;
  ComItextpdfTextPdfPdfName *role_;
  JavaUtilHashMap *accessibleAttributes_;
  ComItextpdfTextAccessibleElementId *id__;
}

#pragma mark Public

- (instancetype)initWithFloatArray:(IOSFloatArray *)relativeWidths;

- (instancetype)initWithInt:(jint)numColumns;

- (instancetype)initWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table;

- (void)addCellWithComItextpdfTextImage:(ComItextpdfTextImage *)image;

- (ComItextpdfTextPdfPdfPCell *)addCellWithComItextpdfTextPdfPdfPCell:(ComItextpdfTextPdfPdfPCell *)cell;

- (void)addCellWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table;

- (void)addCellWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase;

- (void)addCellWithNSString:(NSString *)text;

+ (IOSObjectArray *)beginWritingRowsWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas;

- (jfloat)calculateHeights;

- (void)completeRow;

- (void)deleteBodyRows;

- (jboolean)deleteLastRow;

- (jboolean)deleteRowWithInt:(jint)rowNumber;

+ (void)endWritingRowsWithComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

- (void)flushContent;

- (IOSFloatArray *)getAbsoluteWidths;

- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key;

- (JavaUtilHashMap *)getAccessibleAttributes;

- (ComItextpdfTextPdfPdfPTableBody *)getBody;

- (jint)getCellStartRowIndexWithInt:(jint)rowIdx
                            withInt:(jint)colIdx;

- (id<JavaUtilList>)getChunks;

- (ComItextpdfTextPdfPdfPCell *)getDefaultCell;

- (ComItextpdfTextPdfPdfPTable_FittingRows *)getFittingRowsWithFloat:(jfloat)availableHeight
                                                             withInt:(jint)startIdx;

- (ComItextpdfTextPdfPdfPTableFooter *)getFooter;

- (jfloat)getFooterHeight;

- (jint)getFooterRows;

- (ComItextpdfTextPdfPdfPTableHeader *)getHeader;

- (jfloat)getHeaderHeight;

- (jint)getHeaderRows;

- (jint)getHorizontalAlignment;

- (ComItextpdfTextAccessibleElementId *)getId;

- (jboolean)getKeepTogether;

- (jint)getLastCompletedRowIndex;

- (jint)getNumberOfColumns;

- (ComItextpdfTextPdfPdfName *)getRole;

- (ComItextpdfTextPdfPdfPRow *)getRowWithInt:(jint)idx;

- (jfloat)getRowHeightWithInt:(jint)idx;

- (JavaUtilArrayList *)getRows;

- (JavaUtilArrayList *)getRowsWithInt:(jint)start
                              withInt:(jint)end;

- (jfloat)getRowspanHeightWithInt:(jint)rowIndex
                          withInt:(jint)cellIndex;

- (jint)getRunDirection;

- (jfloat)getSpacingAfter;

- (jfloat)getSpacingBefore;

- (id<ComItextpdfTextPdfPdfPTableEvent>)getTableEvent;

- (jfloat)getTotalHeight;

- (jfloat)getTotalWidth;

- (jfloat)getWidthPercentage;

- (jboolean)hasRowspanWithInt:(jint)rowIdx;

- (jboolean)isComplete;

- (jboolean)isContent;

- (jboolean)isExtendLastRow;

- (jboolean)isExtendLastRowWithBoolean:(jboolean)newPageFollows;

- (jboolean)isHeadersInEvent;

- (jboolean)isInline;

- (jboolean)isLockedWidth;

- (jboolean)isLoopCheck;

- (jboolean)isNestable;

- (jboolean)isSkipFirstHeader;

- (jboolean)isSkipLastFooter;

- (jboolean)isSplitLate;

- (jboolean)isSplitRows;

- (void)keepRowsTogetherWithInt:(jint)start;

- (void)keepRowsTogetherWithInt:(jint)start
                        withInt:(jint)end;

- (void)keepRowsTogetherWithIntArray:(IOSIntArray *)rows;

- (void)normalizeHeadersFooters;

- (jboolean)processWithComItextpdfTextElementListener:(id<ComItextpdfTextElementListener>)listener;

- (void)resetColumnCountWithInt:(jint)newColCount;

- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value;

- (void)setBreakPointsWithIntArray:(IOSIntArray *)breakPoints;

- (void)setCompleteWithBoolean:(jboolean)complete;

- (void)setExtendLastRowWithBoolean:(jboolean)extendLastRows;

- (void)setExtendLastRowWithBoolean:(jboolean)extendLastRows
                        withBoolean:(jboolean)extendFinalRow;

- (void)setFooterRowsWithInt:(jint)footerRows;

- (void)setHeaderRowsWithInt:(jint)headerRows;

- (void)setHeadersInEventWithBoolean:(jboolean)headersInEvent;

- (void)setHorizontalAlignmentWithInt:(jint)horizontalAlignment;

- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_;

- (void)setKeepTogetherWithBoolean:(jboolean)keepTogether;

- (void)setLockedWidthWithBoolean:(jboolean)lockedWidth;

- (void)setLoopCheckWithBoolean:(jboolean)loopCheck;

- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role;

- (void)setRunDirectionWithInt:(jint)runDirection;

- (void)setSkipFirstHeaderWithBoolean:(jboolean)skipFirstHeader;

- (void)setSkipLastFooterWithBoolean:(jboolean)skipLastFooter;

- (void)setSpacingAfterWithFloat:(jfloat)spacing;

- (void)setSpacingBeforeWithFloat:(jfloat)spacing;

- (void)setSplitLateWithBoolean:(jboolean)splitLate;

- (void)setSplitRowsWithBoolean:(jboolean)splitRows;

- (void)setTableEventWithComItextpdfTextPdfPdfPTableEvent:(id<ComItextpdfTextPdfPdfPTableEvent>)event;

- (void)setTotalWidthWithFloat:(jfloat)totalWidth;

- (void)setTotalWidthWithFloatArray:(IOSFloatArray *)columnWidth;

- (void)setWidthPercentageWithFloat:(jfloat)widthPercentage;

- (void)setWidthPercentageWithFloatArray:(IOSFloatArray *)columnWidth
            withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize;

- (void)setWidthsWithFloatArray:(IOSFloatArray *)relativeWidths;

- (void)setWidthsWithIntArray:(IOSIntArray *)relativeWidths;

+ (ComItextpdfTextPdfPdfPTable *)shallowCopyWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table;

- (jint)size;

- (jfloat)spacingAfter;

- (jfloat)spacingBefore;

- (jint)type;

- (jfloat)writeSelectedRowsWithInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas;

- (jfloat)writeSelectedRowsWithInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas;

- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas
                       withBoolean:(jboolean)reusable;

- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases
                       withBoolean:(jboolean)reusable;

#pragma mark Protected

- (instancetype)init;

- (ComItextpdfTextPdfPdfPRow *)adjustCellsInRowWithInt:(jint)start
                                               withInt:(jint)end;

- (void)calculateWidths;

- (void)copyFormatWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)sourceTable OBJC_METHOD_FAMILY_NONE;

- (jfloat)getRowHeightWithInt:(jint)idx
                  withBoolean:(jboolean)firsttime;

#pragma mark Package-Private

- (ComItextpdfTextPdfPdfPCell *)cellAtWithInt:(jint)row
                                      withInt:(jint)col;

- (IOSObjectArray *)getEventWidthsWithFloat:(jfloat)xPos
                                    withInt:(jint)firstRow
                                    withInt:(jint)lastRow
                                withBoolean:(jboolean)includeHeaders;

- (jboolean)rowSpanAboveWithInt:(jint)currRow
                        withInt:(jint)currCol;

@end

J2OBJC_EMPTY_STATIC_INIT(ComItextpdfTextPdfPdfPTable)

J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, rows_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, currentRow_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, defaultCell_, ComItextpdfTextPdfPdfPCell *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, relativeWidths_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, absoluteWidths_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, tableEvent_, id<ComItextpdfTextPdfPdfPTableEvent>)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, role_, ComItextpdfTextPdfPdfName *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, accessibleAttributes_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfPTable, id__, ComItextpdfTextAccessibleElementId *)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfPdfPTable, BASECANVAS, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfPdfPTable, BACKGROUNDCANVAS, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfPdfPTable, LINECANVAS, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfPdfPTable, TEXTCANVAS, jint)

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfPTable_init(ComItextpdfTextPdfPdfPTable *self);

FOUNDATION_EXPORT ComItextpdfTextPdfPdfPTable *new_ComItextpdfTextPdfPdfPTable_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfPTable_initWithFloatArray_(ComItextpdfTextPdfPdfPTable *self, IOSFloatArray *relativeWidths);

FOUNDATION_EXPORT ComItextpdfTextPdfPdfPTable *new_ComItextpdfTextPdfPdfPTable_initWithFloatArray_(IOSFloatArray *relativeWidths) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfPTable_initWithInt_(ComItextpdfTextPdfPdfPTable *self, jint numColumns);

FOUNDATION_EXPORT ComItextpdfTextPdfPdfPTable *new_ComItextpdfTextPdfPdfPTable_initWithInt_(jint numColumns) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfPTable_initWithComItextpdfTextPdfPdfPTable_(ComItextpdfTextPdfPdfPTable *self, ComItextpdfTextPdfPdfPTable *table);

FOUNDATION_EXPORT ComItextpdfTextPdfPdfPTable *new_ComItextpdfTextPdfPdfPTable_initWithComItextpdfTextPdfPdfPTable_(ComItextpdfTextPdfPdfPTable *table) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComItextpdfTextPdfPdfPTable *ComItextpdfTextPdfPdfPTable_shallowCopyWithComItextpdfTextPdfPdfPTable_(ComItextpdfTextPdfPdfPTable *table);

FOUNDATION_EXPORT IOSObjectArray *ComItextpdfTextPdfPdfPTable_beginWritingRowsWithComItextpdfTextPdfPdfContentByte_(ComItextpdfTextPdfPdfContentByte *canvas);

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfPTable_endWritingRowsWithComItextpdfTextPdfPdfContentByteArray_(IOSObjectArray *canvases);

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextPdfPdfPTable)

@interface ComItextpdfTextPdfPdfPTable_FittingRows : NSObject {
 @public
  jint firstRow_, lastRow_;
  jfloat height_, completedRowsHeight_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)firstRow
                    withInt:(jint)lastRow
                  withFloat:(jfloat)height
                  withFloat:(jfloat)completedRowsHeight
            withJavaUtilMap:(id<JavaUtilMap>)correctedHeightsForLastRow;

- (void)correctLastRowChosenWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table
                                                    withInt:(jint)k;

@end

J2OBJC_EMPTY_STATIC_INIT(ComItextpdfTextPdfPdfPTable_FittingRows)

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfPTable_FittingRows_initWithInt_withInt_withFloat_withFloat_withJavaUtilMap_(ComItextpdfTextPdfPdfPTable_FittingRows *self, jint firstRow, jint lastRow, jfloat height, jfloat completedRowsHeight, id<JavaUtilMap> correctedHeightsForLastRow);

FOUNDATION_EXPORT ComItextpdfTextPdfPdfPTable_FittingRows *new_ComItextpdfTextPdfPdfPTable_FittingRows_initWithInt_withInt_withFloat_withFloat_withJavaUtilMap_(jint firstRow, jint lastRow, jfloat height, jfloat completedRowsHeight, id<JavaUtilMap> correctedHeightsForLastRow) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextPdfPdfPTable_FittingRows)

@interface ComItextpdfTextPdfPdfPTable_ColumnMeasurementState : NSObject {
 @public
  jfloat height_;
  jint rowspan_, colspan_;
}

#pragma mark Public

- (instancetype)init;

- (void)beginCellWithComItextpdfTextPdfPdfPCell:(ComItextpdfTextPdfPdfPCell *)cell
                                      withFloat:(jfloat)completedRowsHeight
                                      withFloat:(jfloat)rowHeight;

- (jboolean)cellEnds;

- (void)consumeRowspanWithFloat:(jfloat)completedRowsHeight
                      withFloat:(jfloat)rowHeight;

@end

J2OBJC_EMPTY_STATIC_INIT(ComItextpdfTextPdfPdfPTable_ColumnMeasurementState)

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfPTable_ColumnMeasurementState_init(ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *self);

FOUNDATION_EXPORT ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *new_ComItextpdfTextPdfPdfPTable_ColumnMeasurementState_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextPdfPdfPTable_ColumnMeasurementState)

#endif // _ComItextpdfTextPdfPdfPTable_H_
