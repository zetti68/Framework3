//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPTableBody.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPTableBody.java"

#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfPTableBody.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"


#line 53
@implementation ComItextpdfTextPdfPdfPTableBody


#line 60
- (instancetype)init {
  if (self = [super init]) {
    id__ =
#line 55
    [[ComItextpdfTextAccessibleElementId alloc] init];
    rows_ =
#line 56
    nil;
    role_ = ComItextpdfTextPdfPdfName_get_TBODY_();
    accessibleAttributes_ =
#line 58
    nil;
  }
  return self;
}


#line 64
- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 65
  if (accessibleAttributes_ != nil)
#line 66
  return [accessibleAttributes_ getWithId:key];
  else
#line 68
  return nil;
}


#line 71
- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 72
  if (accessibleAttributes_ == nil)
#line 73
  accessibleAttributes_ = [[JavaUtilHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(accessibleAttributes_)) putWithId:key withId:value];
}


#line 77
- (JavaUtilHashMap *)getAccessibleAttributes {
  
#line 78
  return accessibleAttributes_;
}


#line 81
- (ComItextpdfTextPdfPdfName *)getRole {
  
#line 82
  return role_;
}


#line 85
- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role {
  
#line 86
  self->role_ = role;
}


#line 89
- (ComItextpdfTextAccessibleElementId *)getId {
  
#line 90
  return id__;
}


#line 93
- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_ {
  
#line 94
  self->id__ = id_;
}


#line 97
- (jboolean)isInline {
  
#line 98
  return NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfPTableBody *)other {
  [super copyAllFieldsTo:other];
  other->accessibleAttributes_ = accessibleAttributes_;
  other->id__ = id__;
  other->role_ = role_;
  other->rows_ = rows_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfPTableBody", NULL, 0x1, NULL },
    { "getAccessibleAttributeWithComItextpdfTextPdfPdfName:", "getAccessibleAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAccessibleAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAccessibleAttribute", "V", 0x1, NULL },
    { "getAccessibleAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getRole", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "setRoleWithComItextpdfTextPdfPdfName:", "setRole", "V", 0x1, NULL },
    { "getId", NULL, "Lcom.itextpdf.text.AccessibleElementId;", 0x1, NULL },
    { "setIdWithComItextpdfTextAccessibleElementId:", "setId", "V", 0x1, NULL },
    { "isInline", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "id", 0x4, "Lcom.itextpdf.text.AccessibleElementId;", NULL,  },
    { "rows_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "role_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "accessibleAttributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfPTableBody = { "PdfPTableBody", "com.itextpdf.text.pdf", NULL, 0x1, 9, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfPTableBody;
}

@end
