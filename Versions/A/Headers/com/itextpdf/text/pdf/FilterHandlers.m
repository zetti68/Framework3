//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/FilterHandlers.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/FilterHandlers.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/UnsupportedPdfException.h"
#include "com/itextpdf/text/pdf/FilterHandlers.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/codec/TIFFConstants.h"
#include "com/itextpdf/text/pdf/codec/TIFFFaxDecoder.h"
#include "com/itextpdf/text/pdf/codec/TIFFFaxDecompressor.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

BOOL ComItextpdfTextPdfFilterHandlers_initialized = NO;


#line 68
@implementation ComItextpdfTextPdfFilterHandlers

id<JavaUtilMap> ComItextpdfTextPdfFilterHandlers_defaults_;


#line 99
+ (id<JavaUtilMap>)getDefaultFilterHandlers {
  
#line 100
  return ComItextpdfTextPdfFilterHandlers_defaults_;
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfFilterHandlers class]) {
    {
      
#line 80
      JavaUtilHashMap *map = [[JavaUtilHashMap alloc] init];
      
#line 82
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_FLATEDECODE_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_FLATEDECODE alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_FL_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_FLATEDECODE alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_ASCIIHEXDECODE_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_ASCIIHEXDECODE alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_AHX_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_ASCIIHEXDECODE alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_ASCII85DECODE_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_ASCII85DECODE alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_A85_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_ASCII85DECODE alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_LZWDECODE_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_LZWDECODE alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_CCITTFAXDECODE_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_CCITTFAXDECODE alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_CRYPT_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_DoNothing alloc] init]];
      (void) [map putWithId:ComItextpdfTextPdfPdfName_get_RUNLENGTHDECODE_() withId:[[ComItextpdfTextPdfFilterHandlers_Filter_RUNLENGTHDECODE alloc] init]];
      
#line 93
      ComItextpdfTextPdfFilterHandlers_defaults_ = [JavaUtilCollections unmodifiableMapWithJavaUtilMap:map];
    }
    ComItextpdfTextPdfFilterHandlers_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDefaultFilterHandlers", NULL, "Ljava.util.Map;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaults_", NULL, 0x1a, "Ljava.util.Map;", &ComItextpdfTextPdfFilterHandlers_defaults_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers = { "FilterHandlers", "com.itextpdf.text.pdf", NULL, 0x11, 2, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers;
}

@end

@interface ComItextpdfTextPdfFilterHandlers_FilterHandler : NSObject
@end

@implementation ComItextpdfTextPdfFilterHandlers_FilterHandler

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x401, "Ljava.io.IOException;" },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers_FilterHandler = { "FilterHandler", "com.itextpdf.text.pdf", "FilterHandlers", 0x209, 1, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers_FilterHandler;
}

@end



#line 106
@implementation ComItextpdfTextPdfFilterHandlers_Filter_FLATEDECODE


#line 107
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)b
        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)filterName
      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)decodeParams
  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  b = [ComItextpdfTextPdfPdfReader FlateDecodeWithByteArray:b];
  b = [ComItextpdfTextPdfPdfReader decodePredictorWithByteArray:b withComItextpdfTextPdfPdfObject:decodeParams];
  return b;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers_Filter_FLATEDECODE = { "Filter_FLATEDECODE", "com.itextpdf.text.pdf", "FilterHandlers", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers_Filter_FLATEDECODE;
}

@end


#line 117
@implementation ComItextpdfTextPdfFilterHandlers_Filter_ASCIIHEXDECODE


#line 118
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)b
        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)filterName
      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)decodeParams
  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  b = [ComItextpdfTextPdfPdfReader ASCIIHexDecodeWithByteArray:b];
  return b;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers_Filter_ASCIIHEXDECODE = { "Filter_ASCIIHEXDECODE", "com.itextpdf.text.pdf", "FilterHandlers", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers_Filter_ASCIIHEXDECODE;
}

@end


#line 127
@implementation ComItextpdfTextPdfFilterHandlers_Filter_ASCII85DECODE


#line 128
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)b
        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)filterName
      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)decodeParams
  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  b = [ComItextpdfTextPdfPdfReader ASCII85DecodeWithByteArray:b];
  return b;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers_Filter_ASCII85DECODE = { "Filter_ASCII85DECODE", "com.itextpdf.text.pdf", "FilterHandlers", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers_Filter_ASCII85DECODE;
}

@end


#line 137
@implementation ComItextpdfTextPdfFilterHandlers_Filter_LZWDECODE


#line 138
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)b
        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)filterName
      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)decodeParams
  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  b = [ComItextpdfTextPdfPdfReader LZWDecodeWithByteArray:b];
  b = [ComItextpdfTextPdfPdfReader decodePredictorWithByteArray:b withComItextpdfTextPdfPdfObject:decodeParams];
  return b;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers_Filter_LZWDECODE = { "Filter_LZWDECODE", "com.itextpdf.text.pdf", "FilterHandlers", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers_Filter_LZWDECODE;
}

@end


#line 149
@implementation ComItextpdfTextPdfFilterHandlers_Filter_CCITTFAXDECODE


#line 150
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)b
        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)filterName
      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)decodeParams
  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  ComItextpdfTextPdfPdfNumber *wn = (ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(streamDictionary)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIDTH_()]], [ComItextpdfTextPdfPdfNumber class]);
  ComItextpdfTextPdfPdfNumber *hn = (ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[streamDictionary getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HEIGHT_()]], [ComItextpdfTextPdfPdfNumber class]);
  if (wn == nil || hn == nil)
#line 154
  @throw [[ComItextpdfTextExceptionsUnsupportedPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"filter.ccittfaxdecode.is.only.supported.for.images" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  jint width = [((ComItextpdfTextPdfPdfNumber *) nil_chk(wn)) intValue];
  jint height = [((ComItextpdfTextPdfPdfNumber *) nil_chk(hn)) intValue];
  
#line 158
  ComItextpdfTextPdfPdfDictionary *param = [decodeParams isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]] ? (ComItextpdfTextPdfPdfDictionary *) check_class_cast(decodeParams, [ComItextpdfTextPdfPdfDictionary class]) : nil;
  jint k = 0;
  jboolean blackIs1 = NO;
  jboolean byteAlign = NO;
  if (param != nil) {
    ComItextpdfTextPdfPdfNumber *kn = [param getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
    if (kn != nil)
#line 165
    k = [kn intValue];
    ComItextpdfTextPdfPdfBoolean *bo = [param getAsBooleanWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BLACKIS1_()];
    if (bo != nil)
#line 168
    blackIs1 = [bo booleanValue];
    bo = [param getAsBooleanWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODEDBYTEALIGN_()];
    if (bo != nil)
#line 171
    byteAlign = [bo booleanValue];
  }
  IOSByteArray *outBuf = [IOSByteArray arrayWithLength:(width + 7) / 8 * height];
  ComItextpdfTextPdfCodecTIFFFaxDecompressor *decoder = [[ComItextpdfTextPdfCodecTIFFFaxDecompressor alloc] init];
  if (k == 0 || k > 0) {
    jint tiffT4Options = k > 0 ? ComItextpdfTextPdfCodecTIFFConstants_GROUP3OPT_2DENCODING : 0;
    tiffT4Options |= byteAlign ? ComItextpdfTextPdfCodecTIFFConstants_GROUP3OPT_FILLBITS : 0;
    [decoder SetOptionsWithInt:1 withInt:ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX3 withInt:tiffT4Options withInt:0];
    [decoder decodeRawWithByteArray:outBuf withByteArray:b withInt:width withInt:height];
    if (decoder->fails_ > 0) {
      IOSByteArray *outBuf2 = [IOSByteArray arrayWithLength:(width + 7) / 8 * height];
      jint oldFails = decoder->fails_;
      [decoder SetOptionsWithInt:1 withInt:ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLE withInt:tiffT4Options withInt:0];
      [decoder decodeRawWithByteArray:outBuf2 withByteArray:b withInt:width withInt:height];
      if (decoder->fails_ < oldFails) {
        outBuf = outBuf2;
      }
    }
  }
  else {
    ComItextpdfTextPdfCodecTIFFFaxDecoder *deca = [[ComItextpdfTextPdfCodecTIFFFaxDecoder alloc] initWithInt:1 withInt:width withInt:height];
    [deca decodeT6WithByteArray:outBuf withByteArray:b withInt:0 withInt:height withLong:0];
  }
  if (!blackIs1) {
    jint len = outBuf->size_;
    for (jint t = 0; t < len; ++t) {
      *IOSByteArray_GetRef(outBuf, t) ^= (jint) 0xff;
    }
  }
  b = outBuf;
  return b;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers_Filter_CCITTFAXDECODE = { "Filter_CCITTFAXDECODE", "com.itextpdf.text.pdf", "FilterHandlers", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers_Filter_CCITTFAXDECODE;
}

@end


#line 208
@implementation ComItextpdfTextPdfFilterHandlers_Filter_DoNothing


#line 209
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)b
        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)filterName
      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)decodeParams
  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  return b;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers_Filter_DoNothing = { "Filter_DoNothing", "com.itextpdf.text.pdf", "FilterHandlers", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers_Filter_DoNothing;
}

@end


#line 217
@implementation ComItextpdfTextPdfFilterHandlers_Filter_RUNLENGTHDECODE

- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)b
        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)filterName
      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)decodeParams
  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  
#line 221
  JavaIoByteArrayOutputStream *baos = [[JavaIoByteArrayOutputStream alloc] init];
  jbyte dupCount = -1;
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(b))->size_; i++) {
    dupCount = IOSByteArray_Get(b, i);
    if (dupCount == -128) break;
    
#line 227
    if (dupCount >= 0 && dupCount <= 127) {
      jint bytesToCopy = dupCount + 1;
      [baos writeWithByteArray:b withInt:i withInt:bytesToCopy];
      i += bytesToCopy;
    }
    else {
      i++;
      for (jint j = 0; j < 1 - (jint) (dupCount); j++) {
        [baos writeWithInt:IOSByteArray_Get(b, i)];
      }
    }
  }
  
#line 240
  return [baos toByteArray];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFilterHandlers_Filter_RUNLENGTHDECODE = { "Filter_RUNLENGTHDECODE", "com.itextpdf.text.pdf", "FilterHandlers", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfFilterHandlers_Filter_RUNLENGTHDECODE;
}

@end
