//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfString.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfString.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfEncryption.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/internal/PdfIsoKeys.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"


#line 70
@implementation ComItextpdfTextPdfPdfString


#line 93
- (instancetype)init {
  if (self =
#line 94
  [super initWithInt:ComItextpdfTextPdfPdfObject_STRING]) {
    value_ = ComItextpdfTextPdfPdfObject_get_NOTHING_();
    originalValue_ =
#line 77
    nil;
    encoding_ = ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_();
    objNum_ =
#line 82
    0;
    objGen_ =
#line 84
    0;
    hexWriting_ =
#line 86
    NO;
  }
  return self;
}


#line 103
- (instancetype)initWithNSString:(NSString *)value {
  if (self =
#line 104
  [super initWithInt:ComItextpdfTextPdfPdfObject_STRING]) {
    value_ = ComItextpdfTextPdfPdfObject_get_NOTHING_();
    originalValue_ =
#line 77
    nil;
    encoding_ = ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_();
    objNum_ =
#line 82
    0;
    objGen_ =
#line 84
    0;
    hexWriting_ =
#line 86
    NO;
    
#line 105
    self->value_ = value;
  }
  return self;
}


#line 115
- (instancetype)initWithNSString:(NSString *)value
                    withNSString:(NSString *)encoding {
  if (self =
#line 116
  [super initWithInt:ComItextpdfTextPdfPdfObject_STRING]) {
    value_ = ComItextpdfTextPdfPdfObject_get_NOTHING_();
    originalValue_ =
#line 77
    nil;
    encoding_ = ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_();
    objNum_ =
#line 82
    0;
    objGen_ =
#line 84
    0;
    hexWriting_ =
#line 86
    NO;
    
#line 117
    self->value_ = value;
    
#line 118
    self->encoding_ = encoding;
  }
  return self;
}


#line 126
- (instancetype)initWithByteArray:(IOSByteArray *)bytes {
  if (self =
#line 127
  [super initWithInt:ComItextpdfTextPdfPdfObject_STRING]) {
    value_ = ComItextpdfTextPdfPdfObject_get_NOTHING_();
    originalValue_ =
#line 77
    nil;
    encoding_ = ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_();
    objNum_ =
#line 82
    0;
    objGen_ =
#line 84
    0;
    hexWriting_ =
#line 86
    NO;
    
#line 128
    value_ = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:bytes withNSString:nil];
    
#line 129
    encoding_ = ComItextpdfTextPdfPdfObject_get_NOTHING_();
  }
  return self;
}


#line 141
- (void)toPdfWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                      withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 142
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_OBJECT withId:self];
  IOSByteArray *b = [self getBytes];
  ComItextpdfTextPdfPdfEncryption *crypto = nil;
  if (writer != nil)
#line 146
  crypto = [writer getEncryption];
  if (crypto != nil && ![crypto isEmbeddedFilesOnly])
#line 148
  b = [crypto encryptByteArrayWithByteArray:b];
  if (hexWriting_) {
    ComItextpdfTextPdfByteBuffer *buf = [[ComItextpdfTextPdfByteBuffer alloc] init];
    (void) [buf appendWithChar:'<'];
    jint len = ((IOSByteArray *) nil_chk(b))->size_;
    for (jint k = 0; k < len; ++k)
#line 154
    (void) [buf appendHexWithByte:IOSByteArray_Get(b, k)];
    (void) [buf appendWithChar:'>'];
    [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[buf toByteArray]];
  }
  else
#line 159
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[ComItextpdfTextPdfPdfContentByte escapeStringWithByteArray:b]];
}

- (NSString *)description {
  
#line 168
  return value_;
}


#line 171
- (IOSByteArray *)getBytes {
  
#line 172
  if (bytes_ == nil) {
    if (encoding_ != nil && [encoding_ isEqual:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()] && [ComItextpdfTextPdfPdfEncodings isPdfDocEncodingWithNSString:value_])
#line 174
    bytes_ = [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:value_ withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_()];
    else
#line 176
    bytes_ = [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:value_ withNSString:encoding_];
  }
  return bytes_;
}


#line 189
- (NSString *)toUnicodeString {
  
#line 190
  if (encoding_ != nil && ((jint) [encoding_ length]) != 0)
#line 191
  return value_;
  (void) [self getBytes];
  if (((IOSByteArray *) nil_chk(bytes_))->size_ >= 2 && IOSByteArray_Get(bytes_, 0) == (jbyte) 254 && IOSByteArray_Get(bytes_, 1) == (jbyte) 255)
#line 194
  return [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:bytes_ withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()];
  else
#line 196
  return [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:bytes_ withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_()];
}

- (NSString *)getEncoding {
  
#line 205
  return encoding_;
}


#line 208
- (void)setObjNumWithInt:(jint)objNum
                 withInt:(jint)objGen {
  
#line 209
  self->objNum_ = objNum;
  self->objGen_ = objGen;
}

- (void)decryptWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 217
  ComItextpdfTextPdfPdfEncryption *decrypt = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getDecrypt];
  if (decrypt != nil) {
    originalValue_ = value_;
    [decrypt setHashKeyWithInt:objNum_ withInt:objGen_];
    bytes_ = [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:value_ withNSString:nil];
    bytes_ = [decrypt decryptByteArrayWithByteArray:bytes_];
    value_ = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:bytes_ withNSString:nil];
  }
}


#line 227
- (IOSByteArray *)getOriginalBytes {
  
#line 228
  if (originalValue_ == nil)
#line 229
  return [self getBytes];
  return [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:originalValue_ withNSString:nil];
}


#line 233
- (ComItextpdfTextPdfPdfString *)setHexWritingWithBoolean:(jboolean)hexWriting {
  
#line 234
  self->hexWriting_ = hexWriting;
  return self;
}


#line 238
- (jboolean)isHexWriting {
  
#line 239
  return hexWriting_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfString *)other {
  [super copyAllFieldsTo:other];
  other->encoding_ = encoding_;
  other->hexWriting_ = hexWriting_;
  other->objGen_ = objGen_;
  other->objNum_ = objNum_;
  other->originalValue_ = originalValue_;
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfString", NULL, 0x1, NULL },
    { "initWithNSString:", "PdfString", NULL, 0x1, NULL },
    { "initWithNSString:withNSString:", "PdfString", NULL, 0x1, NULL },
    { "initWithByteArray:", "PdfString", NULL, 0x1, NULL },
    { "toPdfWithComItextpdfTextPdfPdfWriter:withJavaIoOutputStream:", "toPdf", "V", 0x1, "Ljava.io.IOException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getBytes", NULL, "[B", 0x1, NULL },
    { "toUnicodeString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getEncoding", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setObjNumWithInt:withInt:", "setObjNum", "V", 0x0, NULL },
    { "decryptWithComItextpdfTextPdfPdfReader:", "decrypt", "V", 0x0, NULL },
    { "getOriginalBytes", NULL, "[B", 0x1, NULL },
    { "setHexWritingWithBoolean:", "setHexWriting", "Lcom.itextpdf.text.pdf.PdfString;", 0x1, NULL },
    { "isHexWriting", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "originalValue_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "encoding_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "objNum_", NULL, 0x4, "I", NULL,  },
    { "objGen_", NULL, 0x4, "I", NULL,  },
    { "hexWriting_", NULL, 0x4, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfString = { "PdfString", "com.itextpdf.text.pdf", NULL, 0x1, 14, methods, 6, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfString;
}

@end
