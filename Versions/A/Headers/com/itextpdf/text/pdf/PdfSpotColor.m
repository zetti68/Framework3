//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfSpotColor.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfSpotColor.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/CMYKColor.h"
#include "com/itextpdf/text/pdf/ExtendedColor.h"
#include "com/itextpdf/text/pdf/GrayColor.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfFunction.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfSpotColor.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/lang/RuntimeException.h"


#line 56
@implementation ComItextpdfTextPdfPdfSpotColor


#line 72
- (instancetype)initWithNSString:(NSString *)name
    withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)altcs {
  if (self = [super init]) {
    
#line 73
    self->name_ = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:name];
    
#line 74
    self->altcs_ = altcs;
  }
  return self;
}


#line 81
- (ComItextpdfTextBaseColor *)getAlternativeCS {
  
#line 82
  return altcs_;
}


#line 85
- (ComItextpdfTextPdfPdfObject *)getSpotObjectWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 86
  ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_SEPARATION_()];
  [array addWithComItextpdfTextPdfPdfObject:name_];
  ComItextpdfTextPdfPdfFunction *func = nil;
  if ([altcs_ isKindOfClass:[ComItextpdfTextPdfExtendedColor class]]) {
    jint type = ((ComItextpdfTextPdfExtendedColor *) nil_chk(((ComItextpdfTextPdfExtendedColor *) check_class_cast(altcs_, [ComItextpdfTextPdfExtendedColor class]))))->type_;
    {
      
#line 98
      ComItextpdfTextPdfCMYKColor *cmyk;
      
#line 91
      switch (type) {
        case ComItextpdfTextPdfExtendedColor_TYPE_GRAY:
        [array addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()];
        func = [ComItextpdfTextPdfPdfFunction type2WithComItextpdfTextPdfPdfWriter:writer withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 1 } count:2] withFloatArray:nil withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0 } count:1] withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ [((ComItextpdfTextPdfGrayColor *) nil_chk(((ComItextpdfTextPdfGrayColor *) check_class_cast(altcs_, [ComItextpdfTextPdfGrayColor class])))) getGray] } count:1] withFloat:1];
        break;
        case ComItextpdfTextPdfExtendedColor_TYPE_CMYK:
        [array addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICECMYK_()];
        cmyk = (ComItextpdfTextPdfCMYKColor *) check_class_cast(altcs_, [ComItextpdfTextPdfCMYKColor class]);
        func = [ComItextpdfTextPdfPdfFunction type2WithComItextpdfTextPdfPdfWriter:writer withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 1 } count:2] withFloatArray:nil withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 0, 0, 0 } count:4] withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){
#line 100
          [((ComItextpdfTextPdfCMYKColor *) nil_chk(cmyk)) getCyan], [cmyk getMagenta], [cmyk getYellow], [cmyk getBlack] } count:4] withFloat:1];
          break;
          default:
          @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"only.rgb.gray.and.cmyk.are.supported.as.alternative.color.spaces" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
        }
      }
    }
    else {
      
#line 107
      [array addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
      func = [ComItextpdfTextPdfPdfFunction type2WithComItextpdfTextPdfPdfWriter:writer withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 1 } count:2] withFloatArray:nil withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 1, 1, 1 } count:3] withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){
#line 109
        (jfloat) [((ComItextpdfTextBaseColor *) nil_chk(altcs_)) getRed] / 255, (jfloat) [altcs_ getGreen] / 255, (jfloat) [altcs_ getBlue] / 255 } count:3] withFloat:1];
      }
      [array addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfFunction *) nil_chk(func)) getReference]];
      return array;
    }

- (jboolean)isEqual:(id)obj {
  
#line 116
  return [obj isKindOfClass:[ComItextpdfTextPdfPdfSpotColor class]] && ((ComItextpdfTextPdfPdfSpotColor *) nil_chk(((ComItextpdfTextPdfPdfSpotColor *) check_class_cast(obj, [ComItextpdfTextPdfPdfSpotColor class]))))->name_ == self->name_ && ((ComItextpdfTextPdfPdfSpotColor *) nil_chk(((ComItextpdfTextPdfPdfSpotColor *) check_class_cast(obj, [ComItextpdfTextPdfPdfSpotColor class]))))->altcs_ == self->altcs_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfSpotColor *)other {
  [super copyAllFieldsTo:other];
  other->altcs_ = altcs_;
  other->name_ = name_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withComItextpdfTextBaseColor:", "PdfSpotColor", NULL, 0x1, NULL },
    { "getAlternativeCS", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
    { "getSpotObjectWithComItextpdfTextPdfPdfWriter:", "getSpotObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x4, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x1, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "altcs_", NULL, 0x1, "Lcom.itextpdf.text.BaseColor;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfSpotColor = { "PdfSpotColor", "com.itextpdf.text.pdf", NULL, 0x1, 4, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfSpotColor;
}

@end
