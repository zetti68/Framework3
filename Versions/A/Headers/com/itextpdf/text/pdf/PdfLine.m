//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfLine.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfLine.java"

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/ListItem.h"
#include "com/itextpdf/text/TabStop.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfChunk.h"
#include "com/itextpdf/text/pdf/PdfFont.h"
#include "com/itextpdf/text/pdf/PdfLine.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"


#line 57
@implementation ComItextpdfTextPdfPdfLine


#line 109
- (instancetype)initWithFloat:(jfloat)left
                    withFloat:(jfloat)right
                      withInt:(jint)alignment
                    withFloat:(jfloat)height {
  if (self = [super init]) {
    newlineSplit_ =
#line 83
    NO;
    isRTL__ =
#line 88
    NO;
    listItem__ =
#line 90
    nil;
    tabStop_ =
#line 92
    nil;
    tabStopAnchorPosition_ =
#line 94
    JavaLangFloat_NaN;
    tabPosition_ =
#line 96
    JavaLangFloat_NaN;
    
#line 110
    self->left_ = left;
    
#line 111
    self->width_ = right - left;
    
#line 112
    self->originalWidth_ = self->width_;
    
#line 113
    self->alignment_ = alignment;
    
#line 114
    self->height__ = height;
    
#line 115
    self->line_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}


#line 128
- (instancetype)initWithFloat:(jfloat)left
                    withFloat:(jfloat)originalWidth
                    withFloat:(jfloat)remainingWidth
                      withInt:(jint)alignment
                  withBoolean:(jboolean)newlineSplit
        withJavaUtilArrayList:(JavaUtilArrayList *)line
                  withBoolean:(jboolean)isRTL {
  if (self = [super init]) {
    newlineSplit_ =
#line 83
    NO;
    isRTL__ =
#line 88
    NO;
    listItem__ =
#line 90
    nil;
    tabStop_ =
#line 92
    nil;
    tabStopAnchorPosition_ =
#line 94
    JavaLangFloat_NaN;
    tabPosition_ =
#line 96
    JavaLangFloat_NaN;
    
#line 129
    self->left_ = left;
    
#line 130
    self->originalWidth_ = originalWidth;
    
#line 131
    self->width_ = remainingWidth;
    
#line 132
    self->alignment_ = alignment;
    
#line 133
    self->line_ = line;
    
#line 134
    self->newlineSplit_ = newlineSplit;
    
#line 135
    self->isRTL__ = isRTL;
  }
  return self;
}


#line 149
- (ComItextpdfTextPdfPdfChunk *)addWithComItextpdfTextPdfPdfChunk:(ComItextpdfTextPdfPdfChunk *)chunk {
  
#line 151
  if (chunk == nil || [((NSString *) nil_chk([chunk description])) isEqual:@""]) {
    return nil;
  }
  
#line 156
  ComItextpdfTextPdfPdfChunk *overflow = [((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk)) splitWithFloat:width_];
  newlineSplit_ = ([chunk isNewlineSplit] || overflow == nil);
  if ([chunk isTab]) {
    IOSObjectArray *tab = (IOSObjectArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_TAB_()], [IOSObjectArray class]);
    if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_TABSETTINGS_()]) {
      jboolean isWhiteSpace = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(nil_chk(tab), 1), [JavaLangBoolean class]))) booleanValue];
      if (!isWhiteSpace || ![((JavaUtilArrayList *) nil_chk(line_)) isEmpty]) {
        [self flush];
        tabStopAnchorPosition_ = JavaLangFloat_NaN;
        tabStop_ = [ComItextpdfTextPdfPdfChunk getTabStopWithComItextpdfTextPdfPdfChunk:chunk withFloat:originalWidth_ - width_];
        if ([((ComItextpdfTextTabStop *) nil_chk(tabStop_)) getPosition] > originalWidth_) {
          width_ = 0;
          if (isWhiteSpace)
#line 169
          return nil;
          else
#line 171
          return chunk;
        }
        [tabStop_ setPositionWithFloat:[tabStop_ getPosition]];
        [chunk setTabStopWithComItextpdfTextTabStop:tabStop_];
        if ([tabStop_ getAlignment] == ComItextpdfTextTabStop_AlignmentEnum_get_LEFT()) {
          width_ = originalWidth_ - [tabStop_ getPosition];
          tabStop_ = nil;
          tabPosition_ = JavaLangFloat_NaN;
        }
        else tabPosition_ = originalWidth_ - width_;
      }
      else return nil;
    }
    else {
      JavaLangFloat *tabStopPosition = [JavaLangFloat valueOfWithFloat:[((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(nil_chk(tab), 1), [JavaLangFloat class])))) floatValue]];
      jboolean newline = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(tab, 2), [JavaLangBoolean class])))) booleanValue];
      if (newline && tabPosition_ < originalWidth_ - width_) {
        return chunk;
      }
      [chunk adjustLeftWithFloat:left_];
      width_ = originalWidth_ - [tabStopPosition floatValue];
    }
    [self addToLineWithComItextpdfTextPdfPdfChunk:chunk];
  }
  else
#line 196
  if ([chunk length] > 0 || [chunk isImage]) {
    if (overflow != nil)
#line 198
    [chunk trimLastSpace];
    width_ -= [chunk width];
    [self addToLineWithComItextpdfTextPdfPdfChunk:chunk];
  }
  else
#line 204
  if ([((JavaUtilArrayList *) nil_chk(line_)) size] < 1) {
    chunk = overflow;
    overflow = [((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk)) truncateWithFloat:width_];
    width_ -= [chunk width];
    if ([chunk length] > 0) {
      [self addToLineWithComItextpdfTextPdfPdfChunk:chunk];
      return overflow;
    }
    else {
      
#line 214
      if (overflow != nil)
#line 215
      [self addToLineWithComItextpdfTextPdfPdfChunk:overflow];
      return nil;
    }
  }
  else {
    width_ += [((ComItextpdfTextPdfPdfChunk *) nil_chk(([line_ getWithInt:[line_ size] - 1]))) trimLastSpace];
  }
  return overflow;
}


#line 225
- (void)addToLineWithComItextpdfTextPdfPdfChunk:(ComItextpdfTextPdfPdfChunk *)chunk {
  
#line 226
  if (((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk))->changeLeading__) {
    jfloat f;
    if ([chunk isImage]) {
      ComItextpdfTextImage *img = [chunk getImage];
      f = [chunk getImageHeight] + [chunk getImageOffsetY] +
#line 231
      [((ComItextpdfTextImage *) nil_chk(img)) getBorderWidthTop] + [img getSpacingBefore];
    }
    else {
      f = [chunk getLeading];
    }
    if (f > height__) height__ = f;
  }
  if (tabStop_ != nil && [tabStop_ getAlignment] == ComItextpdfTextTabStop_AlignmentEnum_get_ANCHOR() && [JavaLangFloat isNaNWithFloat:tabStopAnchorPosition_]) {
    NSString *value = [chunk description];
    jint anchorIndex = [((NSString *) nil_chk(value)) indexOf:[tabStop_ getAnchorChar]];
    if (anchorIndex != -1) {
      jfloat subWidth = [chunk widthWithNSString:[value substring:anchorIndex endIndex:((jint) [value length])]];
      tabStopAnchorPosition_ = originalWidth_ - width_ - subWidth;
    }
  }
  [((JavaUtilArrayList *) nil_chk(line_)) addWithId:chunk];
}


#line 257
- (jint)size {
  
#line 258
  return [((JavaUtilArrayList *) nil_chk(line_)) size];
}


#line 267
- (id<JavaUtilIterator>)iterator {
  
#line 268
  return [((JavaUtilArrayList *) nil_chk(line_)) iterator];
}


#line 277
- (jfloat)height {
  
#line 278
  return height__;
}


#line 287
- (jfloat)indentLeft {
  
#line 288
  if (isRTL__) {
    switch (alignment_) {
      case ComItextpdfTextElement_ALIGN_LEFT:
      return left_ + width_;
      case ComItextpdfTextElement_ALIGN_CENTER:
      return left_ + width_ / 2.0f;
      default:
      return left_;
    }
  }
  else if ([self getSeparatorCount] <= 0) {
    switch (alignment_) {
      case ComItextpdfTextElement_ALIGN_RIGHT:
      return left_ + width_;
      case ComItextpdfTextElement_ALIGN_CENTER:
      return left_ + width_ / 2.0f;
    }
  }
  return left_;
}


#line 315
- (jboolean)hasToBeJustified {
  
#line 316
  return ((alignment_ == ComItextpdfTextElement_ALIGN_JUSTIFIED && !newlineSplit_) || alignment_ == ComItextpdfTextElement_ALIGN_JUSTIFIED_ALL) && width_ != 0;
}


#line 326
- (void)resetAlignment {
  
#line 327
  if (alignment_ == ComItextpdfTextElement_ALIGN_JUSTIFIED) {
    alignment_ = ComItextpdfTextElement_ALIGN_LEFT;
  }
}


#line 333
- (void)setExtraIndentWithFloat:(jfloat)extra {
  left_ += extra;
  width_ -= extra;
  originalWidth_ -= extra;
}


#line 345
- (jfloat)widthLeft {
  
#line 346
  return width_;
}


#line 355
- (jint)numberOfSpaces {
  
#line 356
  jint numberOfSpaces = 0;
  for (ComItextpdfTextPdfPdfChunk * __strong pdfChunk in nil_chk(line_)) {
    NSString *tmp = [((ComItextpdfTextPdfPdfChunk *) nil_chk(pdfChunk)) description];
    jint length = ((jint) [((NSString *) nil_chk(tmp)) length]);
    for (jint i = 0; i < length; i++) {
      if ([tmp charAtWithInt:i] == ' ') {
        numberOfSpaces++;
      }
    }
  }
  return numberOfSpaces;
}


#line 377
- (void)setListItemWithComItextpdfTextListItem:(ComItextpdfTextListItem *)listItem {
  
#line 378
  self->listItem__ = listItem;
}


#line 389
- (ComItextpdfTextChunk *)listSymbol {
  
#line 390
  return listItem__ != nil ? [listItem__ getListSymbol] : nil;
}


#line 399
- (jfloat)listIndent {
  
#line 400
  return listItem__ != nil ? [listItem__ getIndentationLeft] : 0;
}


#line 403
- (ComItextpdfTextListItem *)listItem {
  
#line 404
  return listItem__;
}

- (NSString *)description {
  
#line 415
  JavaLangStringBuffer *tmp = [[JavaLangStringBuffer alloc] init];
  for (ComItextpdfTextPdfPdfChunk * __strong pdfChunk in nil_chk(line_)) {
    (void) [tmp appendWithNSString:[((ComItextpdfTextPdfPdfChunk *) nil_chk((pdfChunk))) description]];
  }
  return [tmp description];
}


#line 427
- (jint)getLineLengthUtf32 {
  
#line 428
  jint total = 0;
  for (id __strong element in nil_chk(line_)) {
    total += [((ComItextpdfTextPdfPdfChunk *) nil_chk(((ComItextpdfTextPdfPdfChunk *) check_class_cast(element, [ComItextpdfTextPdfPdfChunk class])))) lengthUtf32];
  }
  return total;
}


#line 439
- (jboolean)isNewlineSplit {
  
#line 440
  return newlineSplit_ && alignment_ != ComItextpdfTextElement_ALIGN_JUSTIFIED_ALL;
}


#line 447
- (jint)getLastStrokeChunk {
  
#line 448
  jint lastIdx = [((JavaUtilArrayList *) nil_chk(line_)) size] - 1;
  for (; lastIdx >= 0; --lastIdx) {
    ComItextpdfTextPdfPdfChunk *chunk = [line_ getWithInt:lastIdx];
    if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk)) isStroked])
#line 452
    break;
  }
  return lastIdx;
}


#line 462
- (ComItextpdfTextPdfPdfChunk *)getChunkWithInt:(jint)idx {
  
#line 463
  if (idx < 0 || idx >= [((JavaUtilArrayList *) nil_chk(line_)) size])
#line 464
  return nil;
  return [((JavaUtilArrayList *) nil_chk(line_)) getWithInt:idx];
}


#line 472
- (jfloat)getOriginalWidth {
  
#line 473
  return originalWidth_;
}


#line 502
- (IOSFloatArray *)getMaxSizeWithFloat:(jfloat)fixedLeading
                             withFloat:(jfloat)multipliedLeading {
  
#line 503
  jfloat normal_leading = 0;
  jfloat image_leading = -10000;
  ComItextpdfTextPdfPdfChunk *chunk;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(line_)) size]; ++k) {
    chunk = [line_ getWithInt:k];
    if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk)) isImage]) {
      ComItextpdfTextImage *img = [chunk getImage];
      if ([chunk changeLeading]) {
        jfloat height = [chunk getImageHeight] + [chunk getImageOffsetY] + [((ComItextpdfTextImage *) nil_chk(img)) getSpacingBefore];
        image_leading = [JavaLangMath maxWithFloat:height withFloat:image_leading];
      }
    }
    else {
      
#line 515
      if ([chunk changeLeading])
#line 516
      normal_leading = [JavaLangMath maxWithFloat:[chunk getLeading] withFloat:normal_leading];
      else
#line 518
      normal_leading = [JavaLangMath maxWithFloat:fixedLeading + multipliedLeading * [((ComItextpdfTextPdfPdfFont *) nil_chk([chunk font])) size] withFloat:normal_leading];
    }
  }
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ normal_leading > 0 ? normal_leading : fixedLeading, image_leading } count:2];
}


#line 524
- (jboolean)isRTL {
  
#line 525
  return isRTL__;
}


#line 534
- (jint)getSeparatorCount {
  
#line 535
  jint s = 0;
  ComItextpdfTextPdfPdfChunk *ck;
  for (id __strong element in nil_chk(line_)) {
    ck = (ComItextpdfTextPdfPdfChunk *) check_class_cast(element, [ComItextpdfTextPdfPdfChunk class]);
    if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) isTab]) {
      if ([ck isAttributeWithNSString:ComItextpdfTextChunk_get_TABSETTINGS_()])
#line 541
      continue;
      
#line 543
      return -1;
    }
    if ([ck isHorizontalSeparator]) {
      s++;
    }
  }
  return s;
}


#line 558
- (jfloat)getWidthCorrectedWithFloat:(jfloat)charSpacing
                           withFloat:(jfloat)wordSpacing {
  
#line 559
  jfloat total = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(line_)) size]; ++k) {
    ComItextpdfTextPdfPdfChunk *ck = [line_ getWithInt:k];
    total += [((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) getWidthCorrectedWithFloat:charSpacing withFloat:wordSpacing];
  }
  return total;
}


#line 572
- (jfloat)getAscender {
  
#line 573
  jfloat ascender = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(line_)) size]; ++k) {
    ComItextpdfTextPdfPdfChunk *ck = [line_ getWithInt:k];
    if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) isImage])
#line 577
    ascender = [JavaLangMath maxWithFloat:ascender withFloat:[ck getImageHeight] + [ck getImageOffsetY]];
    else {
      ComItextpdfTextPdfPdfFont *font = [ck font];
      jfloat textRise = [ck getTextRise];
      ascender = [JavaLangMath maxWithFloat:ascender withFloat:(textRise > 0 ? textRise : 0) + [((ComItextpdfTextPdfBaseFont *) nil_chk([((ComItextpdfTextPdfPdfFont *) nil_chk(font)) getFont])) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:[font size]]];
    }
  }
  return ascender;
}


#line 592
- (jfloat)getDescender {
  
#line 593
  jfloat descender = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(line_)) size]; ++k) {
    ComItextpdfTextPdfPdfChunk *ck = [line_ getWithInt:k];
    if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) isImage])
#line 597
    descender = [JavaLangMath minWithFloat:descender withFloat:[ck getImageOffsetY]];
    else {
      ComItextpdfTextPdfPdfFont *font = [ck font];
      jfloat textRise = [ck getTextRise];
      descender = [JavaLangMath minWithFloat:descender withFloat:(textRise < 0 ? textRise : 0) + [((ComItextpdfTextPdfBaseFont *) nil_chk([((ComItextpdfTextPdfPdfFont *) nil_chk(font)) getFont])) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:[font size]]];
    }
  }
  return descender;
}


#line 607
- (void)flush {
  
#line 608
  if (tabStop_ != nil) {
    jfloat textWidth = originalWidth_ - width_ - tabPosition_;
    jfloat tabStopPosition = [tabStop_ getPositionWithFloat:tabPosition_ withFloat:originalWidth_ - width_ withFloat:tabStopAnchorPosition_];
    width_ = originalWidth_ - tabStopPosition - textWidth;
    if (width_ < 0)
#line 613
    tabStopPosition += width_;
    [tabStop_ setPositionWithFloat:tabStopPosition];
    tabStop_ = nil;
    tabPosition_ = JavaLangFloat_NaN;
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfLine *)other {
  [super copyAllFieldsTo:other];
  other->alignment_ = alignment_;
  other->height__ = height__;
  other->isRTL__ = isRTL__;
  other->left_ = left_;
  other->line_ = line_;
  other->listItem__ = listItem__;
  other->newlineSplit_ = newlineSplit_;
  other->originalWidth_ = originalWidth_;
  other->tabPosition_ = tabPosition_;
  other->tabStop_ = tabStop_;
  other->tabStopAnchorPosition_ = tabStopAnchorPosition_;
  other->width_ = width_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithFloat:withFloat:withInt:withFloat:", "PdfLine", NULL, 0x0, NULL },
    { "initWithFloat:withFloat:withFloat:withInt:withBoolean:withJavaUtilArrayList:withBoolean:", "PdfLine", NULL, 0x0, NULL },
    { "addWithComItextpdfTextPdfPdfChunk:", "add", "Lcom.itextpdf.text.pdf.PdfChunk;", 0x0, NULL },
    { "addToLineWithComItextpdfTextPdfPdfChunk:", "addToLine", "V", 0x2, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "height", NULL, "F", 0x0, NULL },
    { "indentLeft", NULL, "F", 0x0, NULL },
    { "hasToBeJustified", NULL, "Z", 0x1, NULL },
    { "resetAlignment", NULL, "V", 0x1, NULL },
    { "setExtraIndentWithFloat:", "setExtraIndent", "V", 0x0, NULL },
    { "widthLeft", NULL, "F", 0x0, NULL },
    { "numberOfSpaces", NULL, "I", 0x0, NULL },
    { "setListItemWithComItextpdfTextListItem:", "setListItem", "V", 0x1, NULL },
    { "listSymbol", NULL, "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "listIndent", NULL, "F", 0x1, NULL },
    { "listItem", NULL, "Lcom.itextpdf.text.ListItem;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getLineLengthUtf32", NULL, "I", 0x1, NULL },
    { "isNewlineSplit", NULL, "Z", 0x1, NULL },
    { "getLastStrokeChunk", NULL, "I", 0x1, NULL },
    { "getChunkWithInt:", "getChunk", "Lcom.itextpdf.text.pdf.PdfChunk;", 0x1, NULL },
    { "getOriginalWidth", NULL, "F", 0x1, NULL },
    { "getMaxSizeWithFloat:withFloat:", "getMaxSize", "[F", 0x0, NULL },
    { "isRTL", NULL, "Z", 0x0, NULL },
    { "getSeparatorCount", NULL, "I", 0x0, NULL },
    { "getWidthCorrectedWithFloat:withFloat:", "getWidthCorrected", "F", 0x1, NULL },
    { "getAscender", NULL, "F", 0x1, NULL },
    { "getDescender", NULL, "F", 0x1, NULL },
    { "flush", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "line_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "left_", NULL, 0x4, "F", NULL,  },
    { "width_", NULL, 0x4, "F", NULL,  },
    { "alignment_", NULL, 0x4, "I", NULL,  },
    { "height__", "height", 0x4, "F", NULL,  },
    { "newlineSplit_", NULL, 0x4, "Z", NULL,  },
    { "originalWidth_", NULL, 0x4, "F", NULL,  },
    { "isRTL__", "isRTL", 0x4, "Z", NULL,  },
    { "listItem__", "listItem", 0x4, "Lcom.itextpdf.text.ListItem;", NULL,  },
    { "tabStop_", NULL, 0x4, "Lcom.itextpdf.text.TabStop;", NULL,  },
    { "tabStopAnchorPosition_", NULL, 0x4, "F", NULL,  },
    { "tabPosition_", NULL, 0x4, "F", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfLine = { "PdfLine", "com.itextpdf.text.pdf", NULL, 0x1, 30, methods, 12, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfLine;
}

@end
