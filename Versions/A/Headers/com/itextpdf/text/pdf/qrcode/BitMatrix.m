//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/BitMatrix.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/BitMatrix.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/qrcode/BitArray.h"
#include "com/itextpdf/text/pdf/qrcode/BitMatrix.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"


#line 35
@implementation ComItextpdfTextPdfQrcodeBitMatrix


#line 44
- (instancetype)initWithInt:(jint)dimension {
  return
#line 45
  [self initComItextpdfTextPdfQrcodeBitMatrixWithInt:dimension withInt:dimension];
}


#line 48
- (instancetype)initComItextpdfTextPdfQrcodeBitMatrixWithInt:(jint)width
                                                     withInt:(jint)height {
  if (self = [super init]) {
    if (width < 1 || height < 1) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Both dimensions must be greater than 0"];
    }
    
#line 52
    self->width_ = width;
    
#line 53
    self->height_ = height;
    
#line 54
    jint rowSize = RShift32(width, 5);
    
#line 55
    if ((width & (jint) 0x1f) != 0) {
      rowSize++;
    }
    
#line 58
    self->rowSize_ = rowSize;
    
#line 59
    bits_ = [IOSIntArray arrayWithLength:rowSize * height];
  }
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  return [self initComItextpdfTextPdfQrcodeBitMatrixWithInt:
#line 48
width withInt:height];
}


#line 69
- (jboolean)getWithInt:(jint)x
               withInt:(jint)y {
  
#line 70
  jint offset = y * rowSize_ + (RShift32(x, 5));
  return ((URShift32(IOSIntArray_Get(nil_chk(bits_), offset), (x & (jint) 0x1f))) & 1) != 0;
}


#line 80
- (void)setWithInt:(jint)x
           withInt:(jint)y {
  
#line 81
  jint offset = y * rowSize_ + (RShift32(x, 5));
  *IOSIntArray_GetRef(nil_chk(bits_), offset) |= LShift32(1, (x & (jint) 0x1f));
}


#line 91
- (void)flipWithInt:(jint)x
            withInt:(jint)y {
  
#line 92
  jint offset = y * rowSize_ + (RShift32(x, 5));
  *IOSIntArray_GetRef(nil_chk(bits_), offset) ^= LShift32(1, (x & (jint) 0x1f));
}

- (void)clear {
  
#line 100
  jint max = ((IOSIntArray *) nil_chk(bits_))->size_;
  for (jint i = 0; i < max; i++) {
    *IOSIntArray_GetRef(bits_, i) = 0;
  }
}


#line 114
- (void)setRegionWithInt:(jint)left
                 withInt:(jint)top
                 withInt:(jint)width
                 withInt:(jint)height {
  
#line 115
  if (top < 0 || left < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Left and top must be nonnegative"];
  }
  if (height < 1 || width < 1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Height and width must be at least 1"];
  }
  jint right = left + width;
  jint bottom = top + height;
  if (bottom > self->height_ || right > self->width_) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The region must fit inside the matrix"];
  }
  for (jint y = top; y < bottom; y++) {
    jint offset = y * rowSize_;
    for (jint x = left; x < right; x++) {
      *IOSIntArray_GetRef(nil_chk(bits_), offset + (RShift32(x, 5))) |= LShift32(1, (x & (jint) 0x1f));
    }
  }
}


#line 142
- (ComItextpdfTextPdfQrcodeBitArray *)getRowWithInt:(jint)y
               withComItextpdfTextPdfQrcodeBitArray:(ComItextpdfTextPdfQrcodeBitArray *)row {
  
#line 143
  if (row == nil || [row getSize] < width_) {
    row = [[ComItextpdfTextPdfQrcodeBitArray alloc] initWithInt:width_];
  }
  jint offset = y * rowSize_;
  for (jint x = 0; x < rowSize_; x++) {
    [((ComItextpdfTextPdfQrcodeBitArray *) nil_chk(row)) setBulkWithInt:LShift32(x, 5) withInt:IOSIntArray_Get(nil_chk(bits_), offset + x)];
  }
  return row;
}

- (jint)getWidth {
  
#line 157
  return width_;
}


#line 163
- (jint)getHeight {
  
#line 164
  return height_;
}


#line 173
- (jint)getDimension {
  
#line 174
  if (width_ != height_) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:@"Can't call getDimension() on a non-square matrix"];
  }
  return width_;
}

- (NSString *)description {
  
#line 181
  JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] initWithInt:height_ * (width_ + 1)];
  for (jint y = 0; y < height_; y++) {
    for (jint x = 0; x < width_; x++) {
      (void) [result appendWithNSString:[self getWithInt:x withInt:y] ? @"X " : @"  "];
    }
    (void) [result appendWithChar:0x000a];
  }
  return [result description];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfQrcodeBitMatrix *)other {
  [super copyAllFieldsTo:other];
  other->bits_ = bits_;
  other->height_ = height_;
  other->rowSize_ = rowSize_;
  other->width_ = width_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "BitMatrix", NULL, 0x1, NULL },
    { "initWithInt:withInt:", "BitMatrix", NULL, 0x1, NULL },
    { "getWithInt:withInt:", "get", "Z", 0x1, NULL },
    { "setWithInt:withInt:", "set", "V", 0x1, NULL },
    { "flipWithInt:withInt:", "flip", "V", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "setRegionWithInt:withInt:withInt:withInt:", "setRegion", "V", 0x1, NULL },
    { "getRowWithInt:withComItextpdfTextPdfQrcodeBitArray:", "getRow", "Lcom.itextpdf.text.pdf.qrcode.BitArray;", 0x1, NULL },
    { "getWidth", NULL, "I", 0x1, NULL },
    { "getHeight", NULL, "I", 0x1, NULL },
    { "getDimension", NULL, "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "width_", NULL, 0x11, "I", NULL,  },
    { "height_", NULL, 0x11, "I", NULL,  },
    { "rowSize_", NULL, 0x11, "I", NULL,  },
    { "bits_", NULL, 0x11, "[I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfQrcodeBitMatrix = { "BitMatrix", "com.itextpdf.text.pdf.qrcode", NULL, 0x11, 12, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfQrcodeBitMatrix;
}

@end
