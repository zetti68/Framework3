//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/GF256Poly.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/GF256Poly.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/qrcode/GF256.h"
#include "com/itextpdf/text/pdf/qrcode/GF256Poly.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"


#line 29
@implementation ComItextpdfTextPdfQrcodeGF256Poly


#line 43
- (instancetype)initWithComItextpdfTextPdfQrcodeGF256:(ComItextpdfTextPdfQrcodeGF256 *)field
                                         withIntArray:(IOSIntArray *)coefficients {
  if (self = [super init]) {
    
#line 44
    if (coefficients == nil || coefficients->size_ == 0) {
      @throw [[JavaLangIllegalArgumentException alloc] init];
    }
    
#line 47
    self->field_ = field;
    
#line 48
    jint coefficientsLength = ((IOSIntArray *) nil_chk(coefficients))->size_;
    
#line 49
    if (coefficientsLength > 1 && IOSIntArray_Get(coefficients, 0) == 0) {
      
#line 51
      jint firstNonZero = 1;
      while (firstNonZero < coefficientsLength && IOSIntArray_Get(coefficients, firstNonZero) == 0) {
        firstNonZero++;
      }
      if (firstNonZero == coefficientsLength) {
        self->coefficients_ = ((ComItextpdfTextPdfQrcodeGF256Poly *) nil_chk([((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field)) getZero]))->coefficients_;
      }
      else {
        
#line 58
        self->coefficients_ = [IOSIntArray arrayWithLength:coefficientsLength - firstNonZero];
        [JavaLangSystem arraycopyWithId:coefficients withInt:
#line 60
        firstNonZero withId:
#line 61
        self->coefficients_ withInt:
#line 62
        0 withInt:
#line 63
        self->coefficients_->size_];
      }
    }
    else {
      
#line 66
      self->coefficients_ = coefficients;
    }
  }
  return self;
}


#line 70
- (IOSIntArray *)getCoefficients {
  
#line 71
  return coefficients_;
}


#line 77
- (jint)getDegree {
  
#line 78
  return ((IOSIntArray *) nil_chk(coefficients_))->size_ - 1;
}


#line 84
- (jboolean)isZero {
  
#line 85
  return IOSIntArray_Get(nil_chk(coefficients_), 0) == 0;
}


#line 91
- (jint)getCoefficientWithInt:(jint)degree {
  
#line 92
  return IOSIntArray_Get(coefficients_, ((IOSIntArray *) nil_chk(coefficients_))->size_ - 1 - degree);
}


#line 98
- (jint)evaluateAtWithInt:(jint)a {
  
#line 99
  if (a == 0) {
    
#line 101
    return [self getCoefficientWithInt:0];
  }
  jint size = ((IOSIntArray *) nil_chk(coefficients_))->size_;
  if (a == 1) {
    
#line 106
    jint result = 0;
    for (jint i = 0; i < size; i++) {
      result = [ComItextpdfTextPdfQrcodeGF256 addOrSubtractWithInt:result withInt:IOSIntArray_Get(coefficients_, i)];
    }
    return result;
  }
  jint result = IOSIntArray_Get(coefficients_, 0);
  for (jint i = 1; i < size; i++) {
    result = [ComItextpdfTextPdfQrcodeGF256 addOrSubtractWithInt:[((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) multiplyWithInt:a withInt:result] withInt:IOSIntArray_Get(coefficients_, i)];
  }
  return result;
}


#line 119
- (ComItextpdfTextPdfQrcodeGF256Poly *)addOrSubtractWithComItextpdfTextPdfQrcodeGF256Poly:(ComItextpdfTextPdfQrcodeGF256Poly *)other {
  
#line 120
  if (![((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) isEqual:((ComItextpdfTextPdfQrcodeGF256Poly *) nil_chk(other))->field_]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"GF256Polys do not have same GF256 field"];
  }
  if ([self isZero]) {
    return other;
  }
  if ([other isZero]) {
    return self;
  }
  
#line 130
  IOSIntArray *smallerCoefficients = self->coefficients_;
  IOSIntArray *largerCoefficients = other->coefficients_;
  if (((IOSIntArray *) nil_chk(smallerCoefficients))->size_ > ((IOSIntArray *) nil_chk(largerCoefficients))->size_) {
    IOSIntArray *temp = smallerCoefficients;
    smallerCoefficients = largerCoefficients;
    largerCoefficients = temp;
  }
  IOSIntArray *sumDiff = [IOSIntArray arrayWithLength:largerCoefficients->size_];
  jint lengthDiff = largerCoefficients->size_ - smallerCoefficients->size_;
  
#line 140
  [JavaLangSystem arraycopyWithId:largerCoefficients withInt:0 withId:sumDiff withInt:0 withInt:lengthDiff];
  
#line 142
  for (jint i = lengthDiff; i < largerCoefficients->size_; i++) {
    *IOSIntArray_GetRef(sumDiff, i) = [ComItextpdfTextPdfQrcodeGF256 addOrSubtractWithInt:IOSIntArray_Get(smallerCoefficients, i - lengthDiff) withInt:IOSIntArray_Get(largerCoefficients, i)];
  }
  
#line 146
  return [[ComItextpdfTextPdfQrcodeGF256Poly alloc] initWithComItextpdfTextPdfQrcodeGF256:field_ withIntArray:sumDiff];
}


#line 149
- (ComItextpdfTextPdfQrcodeGF256Poly *)multiplyWithComItextpdfTextPdfQrcodeGF256Poly:(ComItextpdfTextPdfQrcodeGF256Poly *)other {
  
#line 150
  if (![((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) isEqual:((ComItextpdfTextPdfQrcodeGF256Poly *) nil_chk(other))->field_]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"GF256Polys do not have same GF256 field"];
  }
  if ([self isZero] || [other isZero]) {
    return [field_ getZero];
  }
  IOSIntArray *aCoefficients = self->coefficients_;
  jint aLength = ((IOSIntArray *) nil_chk(aCoefficients))->size_;
  IOSIntArray *bCoefficients = other->coefficients_;
  jint bLength = ((IOSIntArray *) nil_chk(bCoefficients))->size_;
  IOSIntArray *product = [IOSIntArray arrayWithLength:aLength + bLength - 1];
  for (jint i = 0; i < aLength; i++) {
    jint aCoeff = IOSIntArray_Get(aCoefficients, i);
    for (jint j = 0; j < bLength; j++) {
      *IOSIntArray_GetRef(product, i + j) = [ComItextpdfTextPdfQrcodeGF256 addOrSubtractWithInt:IOSIntArray_Get(product, i + j) withInt:
#line 165
      [field_ multiplyWithInt:aCoeff withInt:IOSIntArray_Get(bCoefficients, j)]];
    }
  }
  return [[ComItextpdfTextPdfQrcodeGF256Poly alloc] initWithComItextpdfTextPdfQrcodeGF256:field_ withIntArray:product];
}


#line 171
- (ComItextpdfTextPdfQrcodeGF256Poly *)multiplyWithInt:(jint)scalar {
  
#line 172
  if (scalar == 0) {
    return [((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) getZero];
  }
  if (scalar == 1) {
    return self;
  }
  jint size = ((IOSIntArray *) nil_chk(coefficients_))->size_;
  IOSIntArray *product = [IOSIntArray arrayWithLength:size];
  for (jint i = 0; i < size; i++) {
    *IOSIntArray_GetRef(product, i) = [((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) multiplyWithInt:IOSIntArray_Get(coefficients_, i) withInt:scalar];
  }
  return [[ComItextpdfTextPdfQrcodeGF256Poly alloc] initWithComItextpdfTextPdfQrcodeGF256:field_ withIntArray:product];
}


#line 186
- (ComItextpdfTextPdfQrcodeGF256Poly *)multiplyByMonomialWithInt:(jint)degree
                                                         withInt:(jint)coefficient {
  
#line 187
  if (degree < 0) {
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
  if (coefficient == 0) {
    return [((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) getZero];
  }
  jint size = ((IOSIntArray *) nil_chk(coefficients_))->size_;
  IOSIntArray *product = [IOSIntArray arrayWithLength:size + degree];
  for (jint i = 0; i < size; i++) {
    *IOSIntArray_GetRef(product, i) = [((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) multiplyWithInt:IOSIntArray_Get(coefficients_, i) withInt:coefficient];
  }
  return [[ComItextpdfTextPdfQrcodeGF256Poly alloc] initWithComItextpdfTextPdfQrcodeGF256:field_ withIntArray:product];
}


#line 201
- (IOSObjectArray *)divideWithComItextpdfTextPdfQrcodeGF256Poly:(ComItextpdfTextPdfQrcodeGF256Poly *)other {
  
#line 202
  if (![((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) isEqual:((ComItextpdfTextPdfQrcodeGF256Poly *) nil_chk(other))->field_]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"GF256Polys do not have same GF256 field"];
  }
  if ([other isZero]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Divide by 0"];
  }
  
#line 209
  ComItextpdfTextPdfQrcodeGF256Poly *quotient = [field_ getZero];
  ComItextpdfTextPdfQrcodeGF256Poly *remainder = self;
  
#line 212
  jint denominatorLeadingTerm = [other getCoefficientWithInt:[other getDegree]];
  jint inverseDenominatorLeadingTerm = [field_ inverseWithInt:denominatorLeadingTerm];
  
#line 215
  while ([remainder getDegree] >= [other getDegree] && ![remainder isZero]) {
    jint degreeDifference = [remainder getDegree] - [other getDegree];
    jint scale_ = [field_ multiplyWithInt:[remainder getCoefficientWithInt:[remainder getDegree]] withInt:inverseDenominatorLeadingTerm];
    ComItextpdfTextPdfQrcodeGF256Poly *term = [other multiplyByMonomialWithInt:degreeDifference withInt:scale_];
    ComItextpdfTextPdfQrcodeGF256Poly *iterationQuotient = [field_ buildMonomialWithInt:degreeDifference withInt:scale_];
    quotient = [((ComItextpdfTextPdfQrcodeGF256Poly *) nil_chk(quotient)) addOrSubtractWithComItextpdfTextPdfQrcodeGF256Poly:iterationQuotient];
    remainder = [remainder addOrSubtractWithComItextpdfTextPdfQrcodeGF256Poly:term];
  }
  
#line 224
  return [IOSObjectArray arrayWithObjects:(id[]){ quotient, remainder } count:2 type:[IOSClass classWithClass:[ComItextpdfTextPdfQrcodeGF256Poly class]]];
}

- (NSString *)description {
  
#line 228
  JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] initWithInt:8 * [self getDegree]];
  for (jint degree = [self getDegree]; degree >= 0; degree--) {
    jint coefficient = [self getCoefficientWithInt:degree];
    if (coefficient != 0) {
      if (coefficient < 0) {
        (void) [result appendWithNSString:@" - "];
        coefficient = -coefficient;
      }
      else {
        
#line 236
        if ([result sequenceLength] > 0) {
          (void) [result appendWithNSString:@" + "];
        }
      }
      if (degree == 0 || coefficient != 1) {
        jint alphaPower = [((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) logWithInt:coefficient];
        if (alphaPower == 0) {
          (void) [result appendWithChar:'1'];
        }
        else
#line 244
        if (alphaPower == 1) {
          (void) [result appendWithChar:'a'];
        }
        else {
          
#line 247
          (void) [result appendWithNSString:@"a^"];
          (void) [result appendWithInt:alphaPower];
        }
      }
      if (degree != 0) {
        if (degree == 1) {
          (void) [result appendWithChar:'x'];
        }
        else {
          
#line 255
          (void) [result appendWithNSString:@"x^"];
          (void) [result appendWithInt:degree];
        }
      }
    }
  }
  return [result description];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfQrcodeGF256Poly *)other {
  [super copyAllFieldsTo:other];
  other->coefficients_ = coefficients_;
  other->field_ = field_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfQrcodeGF256:withIntArray:", "GF256Poly", NULL, 0x0, NULL },
    { "getCoefficients", NULL, "[I", 0x0, NULL },
    { "getDegree", NULL, "I", 0x0, NULL },
    { "isZero", NULL, "Z", 0x0, NULL },
    { "getCoefficientWithInt:", "getCoefficient", "I", 0x0, NULL },
    { "evaluateAtWithInt:", "evaluateAt", "I", 0x0, NULL },
    { "addOrSubtractWithComItextpdfTextPdfQrcodeGF256Poly:", "addOrSubtract", "Lcom.itextpdf.text.pdf.qrcode.GF256Poly;", 0x0, NULL },
    { "multiplyWithComItextpdfTextPdfQrcodeGF256Poly:", "multiply", "Lcom.itextpdf.text.pdf.qrcode.GF256Poly;", 0x0, NULL },
    { "multiplyWithInt:", "multiply", "Lcom.itextpdf.text.pdf.qrcode.GF256Poly;", 0x0, NULL },
    { "multiplyByMonomialWithInt:withInt:", "multiplyByMonomial", "Lcom.itextpdf.text.pdf.qrcode.GF256Poly;", 0x0, NULL },
    { "divideWithComItextpdfTextPdfQrcodeGF256Poly:", "divide", "[Lcom.itextpdf.text.pdf.qrcode.GF256Poly;", 0x0, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "field_", NULL, 0x12, "Lcom.itextpdf.text.pdf.qrcode.GF256;", NULL,  },
    { "coefficients_", NULL, 0x12, "[I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfQrcodeGF256Poly = { "GF256Poly", "com.itextpdf.text.pdf.qrcode", NULL, 0x10, 12, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfQrcodeGF256Poly;
}

@end
