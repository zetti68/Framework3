//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/ReedSolomonEncoder.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/ReedSolomonEncoder.java"

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/qrcode/GF256.h"
#include "com/itextpdf/text/pdf/qrcode/GF256Poly.h"
#include "com/itextpdf/text/pdf/qrcode/ReedSolomonEncoder.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"


#line 28
@implementation ComItextpdfTextPdfQrcodeReedSolomonEncoder


#line 33
- (instancetype)initWithComItextpdfTextPdfQrcodeGF256:(ComItextpdfTextPdfQrcodeGF256 *)field {
  if (self = [super init]) {
    
#line 34
    if (![((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(ComItextpdfTextPdfQrcodeGF256_get_QR_CODE_FIELD_())) isEqual:field]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Only QR Code is supported at this time"];
    }
    
#line 37
    self->field_ = field;
    
#line 38
    self->cachedGenerators_ = [[JavaUtilArrayList alloc] init];
    
#line 39
    [cachedGenerators_ addWithId:[[ComItextpdfTextPdfQrcodeGF256Poly alloc] initWithComItextpdfTextPdfQrcodeGF256:field withIntArray:[IOSIntArray arrayWithInts:(jint[]){ 1 } count:1]]];
  }
  return self;
}


#line 42
- (ComItextpdfTextPdfQrcodeGF256Poly *)buildGeneratorWithInt:(jint)degree {
  
#line 43
  if (degree >= [((JavaUtilArrayList *) nil_chk(cachedGenerators_)) size]) {
    ComItextpdfTextPdfQrcodeGF256Poly *lastGenerator = [cachedGenerators_ getWithInt:[cachedGenerators_ size] - 1];
    for (jint d = [cachedGenerators_ size]; d <= degree; d++) {
      ComItextpdfTextPdfQrcodeGF256Poly *nextGenerator = [((ComItextpdfTextPdfQrcodeGF256Poly *) nil_chk(lastGenerator)) multiplyWithComItextpdfTextPdfQrcodeGF256Poly:[[ComItextpdfTextPdfQrcodeGF256Poly alloc] initWithComItextpdfTextPdfQrcodeGF256:field_ withIntArray:[IOSIntArray arrayWithInts:(jint[]){ 1, [((ComItextpdfTextPdfQrcodeGF256 *) nil_chk(field_)) expWithInt:d - 1] } count:2]]];
      [cachedGenerators_ addWithId:nextGenerator];
      lastGenerator = nextGenerator;
    }
  }
  return (ComItextpdfTextPdfQrcodeGF256Poly *) check_class_cast([cachedGenerators_ getWithInt:degree], [ComItextpdfTextPdfQrcodeGF256Poly class]);
}


#line 54
- (void)encodeWithIntArray:(IOSIntArray *)toEncode
                   withInt:(jint)ecBytes {
  
#line 55
  if (ecBytes == 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No error correction bytes"];
  }
  jint dataBytes = ((IOSIntArray *) nil_chk(toEncode))->size_ - ecBytes;
  if (dataBytes <= 0) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"No data bytes provided"];
  }
  ComItextpdfTextPdfQrcodeGF256Poly *generator = [self buildGeneratorWithInt:ecBytes];
  IOSIntArray *infoCoefficients = [IOSIntArray arrayWithLength:dataBytes];
  [JavaLangSystem arraycopyWithId:toEncode withInt:0 withId:infoCoefficients withInt:0 withInt:dataBytes];
  ComItextpdfTextPdfQrcodeGF256Poly *info = [[ComItextpdfTextPdfQrcodeGF256Poly alloc] initWithComItextpdfTextPdfQrcodeGF256:field_ withIntArray:infoCoefficients];
  info = [info multiplyByMonomialWithInt:ecBytes withInt:1];
  ComItextpdfTextPdfQrcodeGF256Poly *remainder = IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfQrcodeGF256Poly *) nil_chk(info)) divideWithComItextpdfTextPdfQrcodeGF256Poly:generator]), 1);
  IOSIntArray *coefficients = [((ComItextpdfTextPdfQrcodeGF256Poly *) nil_chk(remainder)) getCoefficients];
  jint numZeroCoefficients = ecBytes - ((IOSIntArray *) nil_chk(coefficients))->size_;
  for (jint i = 0; i < numZeroCoefficients; i++) {
    *IOSIntArray_GetRef(toEncode, dataBytes + i) = 0;
  }
  [JavaLangSystem arraycopyWithId:coefficients withInt:0 withId:toEncode withInt:dataBytes + numZeroCoefficients withInt:coefficients->size_];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfQrcodeReedSolomonEncoder *)other {
  [super copyAllFieldsTo:other];
  other->cachedGenerators_ = cachedGenerators_;
  other->field_ = field_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfQrcodeGF256:", "ReedSolomonEncoder", NULL, 0x1, NULL },
    { "buildGeneratorWithInt:", "buildGenerator", "Lcom.itextpdf.text.pdf.qrcode.GF256Poly;", 0x2, NULL },
    { "encodeWithIntArray:withInt:", "encode", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "field_", NULL, 0x12, "Lcom.itextpdf.text.pdf.qrcode.GF256;", NULL,  },
    { "cachedGenerators_", NULL, 0x12, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfQrcodeReedSolomonEncoder = { "ReedSolomonEncoder", "com.itextpdf.text.pdf.qrcode", NULL, 0x11, 3, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfQrcodeReedSolomonEncoder;
}

@end
