//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/FormatInformation.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/FormatInformation.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/qrcode/ErrorCorrectionLevel.h"
#include "com/itextpdf/text/pdf/qrcode/FormatInformation.h"
#include "java/lang/Integer.h"

BOOL ComItextpdfTextPdfQrcodeFormatInformation_initialized = NO;


#line 27
@implementation ComItextpdfTextPdfQrcodeFormatInformation

IOSObjectArray * ComItextpdfTextPdfQrcodeFormatInformation_FORMAT_INFO_DECODE_LOOKUP_;
IOSIntArray * ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_;


#line 78
- (instancetype)initWithInt:(jint)formatInfo {
  if (self = [super init]) {
    
#line 80
    errorCorrectionLevel_ = [ComItextpdfTextPdfQrcodeErrorCorrectionLevel forBitsWithInt:(RShift32(formatInfo, 3)) & (jint) 0x03];
    
#line 82
    dataMask_ = (jbyte) (formatInfo & (jint) 0x07);
  }
  return self;
}


#line 85
+ (jint)numBitsDifferingWithInt:(jint)a
                        withInt:(jint)b {
  
#line 86
  a ^= b;
  
#line 88
  return IOSIntArray_Get(nil_chk(ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_), a & (jint) 0x0F) + IOSIntArray_Get(
#line 89
  ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_, ((URShift32(a, 4)) & (jint) 0x0F)) + IOSIntArray_Get(
#line 90
  ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_, ((URShift32(a, 8)) & (jint) 0x0F)) + IOSIntArray_Get(
#line 91
  ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_, ((URShift32(a, 12)) & (jint) 0x0F)) + IOSIntArray_Get(
#line 92
  ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_, ((URShift32(a, 16)) & (jint) 0x0F)) + IOSIntArray_Get(
#line 93
  ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_, ((URShift32(a, 20)) & (jint) 0x0F)) + IOSIntArray_Get(
#line 94
  ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_, ((URShift32(a, 24)) & (jint) 0x0F)) + IOSIntArray_Get(
#line 95
  ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_, ((URShift32(a, 28)) & (jint) 0x0F));
}


#line 105
+ (ComItextpdfTextPdfQrcodeFormatInformation *)decodeFormatInformationWithInt:(jint)maskedFormatInfo1
                                                                      withInt:(jint)maskedFormatInfo2 {
  
#line 106
  ComItextpdfTextPdfQrcodeFormatInformation *formatInfo = [ComItextpdfTextPdfQrcodeFormatInformation doDecodeFormatInformationWithInt:maskedFormatInfo1 withInt:maskedFormatInfo2];
  if (formatInfo != nil) {
    return formatInfo;
  }
  
#line 113
  return [ComItextpdfTextPdfQrcodeFormatInformation doDecodeFormatInformationWithInt:maskedFormatInfo1 ^ ComItextpdfTextPdfQrcodeFormatInformation_FORMAT_INFO_MASK_QR withInt:
#line 114
  maskedFormatInfo2 ^ ComItextpdfTextPdfQrcodeFormatInformation_FORMAT_INFO_MASK_QR];
}


#line 117
+ (ComItextpdfTextPdfQrcodeFormatInformation *)doDecodeFormatInformationWithInt:(jint)maskedFormatInfo1
                                                                        withInt:(jint)maskedFormatInfo2 {
  
#line 119
  jint bestDifference = JavaLangInteger_MAX_VALUE;
  jint bestFormatInfo = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ComItextpdfTextPdfQrcodeFormatInformation_FORMAT_INFO_DECODE_LOOKUP_))->size_; i++) {
    IOSIntArray *decodeInfo = IOSObjectArray_Get(ComItextpdfTextPdfQrcodeFormatInformation_FORMAT_INFO_DECODE_LOOKUP_, i);
    jint targetInfo = IOSIntArray_Get(nil_chk(decodeInfo), 0);
    if (targetInfo == maskedFormatInfo1 || targetInfo == maskedFormatInfo2) {
      
#line 126
      return [[ComItextpdfTextPdfQrcodeFormatInformation alloc] initWithInt:IOSIntArray_Get(decodeInfo, 1)];
    }
    jint bitsDifference = [ComItextpdfTextPdfQrcodeFormatInformation numBitsDifferingWithInt:maskedFormatInfo1 withInt:targetInfo];
    if (bitsDifference < bestDifference) {
      bestFormatInfo = IOSIntArray_Get(decodeInfo, 1);
      bestDifference = bitsDifference;
    }
    if (maskedFormatInfo1 != maskedFormatInfo2) {
      
#line 135
      bitsDifference = [ComItextpdfTextPdfQrcodeFormatInformation numBitsDifferingWithInt:maskedFormatInfo2 withInt:targetInfo];
      if (bitsDifference < bestDifference) {
        bestFormatInfo = IOSIntArray_Get(decodeInfo, 1);
        bestDifference = bitsDifference;
      }
    }
  }
  
#line 144
  if (bestDifference <= 3) {
    return [[ComItextpdfTextPdfQrcodeFormatInformation alloc] initWithInt:bestFormatInfo];
  }
  return nil;
}


#line 150
- (ComItextpdfTextPdfQrcodeErrorCorrectionLevel *)getErrorCorrectionLevel {
  
#line 151
  return errorCorrectionLevel_;
}


#line 154
- (jbyte)getDataMask {
  
#line 155
  return dataMask_;
}

- (NSUInteger)hash {
  
#line 159
  return (LShift32([((ComItextpdfTextPdfQrcodeErrorCorrectionLevel *) nil_chk(errorCorrectionLevel_)) ordinal], 3)) | (jint) dataMask_;
}

- (jboolean)isEqual:(id)o {
  
#line 163
  if (!([o isKindOfClass:[ComItextpdfTextPdfQrcodeFormatInformation class]])) {
    return NO;
  }
  ComItextpdfTextPdfQrcodeFormatInformation *other = (ComItextpdfTextPdfQrcodeFormatInformation *) check_class_cast(o, [ComItextpdfTextPdfQrcodeFormatInformation class]);
  return self->errorCorrectionLevel_ == ((ComItextpdfTextPdfQrcodeFormatInformation *) nil_chk(other))->errorCorrectionLevel_ &&
#line 168
  self->dataMask_ == other->dataMask_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfQrcodeFormatInformation *)other {
  [super copyAllFieldsTo:other];
  other->dataMask_ = dataMask_;
  other->errorCorrectionLevel_ = errorCorrectionLevel_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfQrcodeFormatInformation class]) {
    ComItextpdfTextPdfQrcodeFormatInformation_FORMAT_INFO_DECODE_LOOKUP_ = [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(jint[]){
#line 35
      (jint) 0x5412, (jint) 0x00 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 36
        (jint) 0x5125, (jint) 0x01 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 37
          (jint) 0x5E7C, (jint) 0x02 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 38
            (jint) 0x5B4B, (jint) 0x03 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 39
              (jint) 0x45F9, (jint) 0x04 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 40
                (jint) 0x40CE, (jint) 0x05 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 41
                  (jint) 0x4F97, (jint) 0x06 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 42
                    (jint) 0x4AA0, (jint) 0x07 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 43
                      (jint) 0x77C4, (jint) 0x08 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 44
                        (jint) 0x72F3, (jint) 0x09 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 45
                          (jint) 0x7DAA, (jint) 0x0A } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 46
                            (jint) 0x789D, (jint) 0x0B } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 47
                              (jint) 0x662F, (jint) 0x0C } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 48
                                (jint) 0x6318, (jint) 0x0D } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 49
                                  (jint) 0x6C41, (jint) 0x0E } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 50
                                    (jint) 0x6976, (jint) 0x0F } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 51
                                      (jint) 0x1689, (jint) 0x10 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 52
                                        (jint) 0x13BE, (jint) 0x11 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 53
                                          (jint) 0x1CE7, (jint) 0x12 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 54
                                            (jint) 0x19D0, (jint) 0x13 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 55
                                              (jint) 0x0762, (jint) 0x14 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 56
                                                (jint) 0x0255, (jint) 0x15 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 57
                                                  (jint) 0x0D0C, (jint) 0x16 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 58
                                                    (jint) 0x083B, (jint) 0x17 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 59
                                                      (jint) 0x355F, (jint) 0x18 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 60
                                                        (jint) 0x3068, (jint) 0x19 } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 61
                                                          (jint) 0x3F31, (jint) 0x1A } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 62
                                                            (jint) 0x3A06, (jint) 0x1B } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 63
                                                              (jint) 0x24B4, (jint) 0x1C } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 64
                                                                (jint) 0x2183, (jint) 0x1D } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 65
                                                                  (jint) 0x2EDA, (jint) 0x1E } count:2], [IOSIntArray arrayWithInts:(jint[]){
#line 66
                                                                    (jint) 0x2BED, (jint) 0x1F } count:2] } count:32 type:[IOSIntArray iosClass]];
                                                                    ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_ = [IOSIntArray arrayWithInts:(jint[]){
#line 73
                                                                      0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4 } count:16];
                                                                      ComItextpdfTextPdfQrcodeFormatInformation_initialized = YES;
                                                                    }
                                                                  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "FormatInformation", NULL, 0x2, NULL },
    { "numBitsDifferingWithInt:withInt:", "numBitsDiffering", "I", 0x8, NULL },
    { "decodeFormatInformationWithInt:withInt:", "decodeFormatInformation", "Lcom.itextpdf.text.pdf.qrcode.FormatInformation;", 0x8, NULL },
    { "doDecodeFormatInformationWithInt:withInt:", "doDecodeFormatInformation", "Lcom.itextpdf.text.pdf.qrcode.FormatInformation;", 0xa, NULL },
    { "getErrorCorrectionLevel", NULL, "Lcom.itextpdf.text.pdf.qrcode.ErrorCorrectionLevel;", 0x0, NULL },
    { "getDataMask", NULL, "B", 0x0, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FORMAT_INFO_MASK_QR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfQrcodeFormatInformation_FORMAT_INFO_MASK_QR },
    { "FORMAT_INFO_DECODE_LOOKUP_", NULL, 0x1a, "[[I", &ComItextpdfTextPdfQrcodeFormatInformation_FORMAT_INFO_DECODE_LOOKUP_,  },
    { "BITS_SET_IN_HALF_BYTE_", NULL, 0x1a, "[I", &ComItextpdfTextPdfQrcodeFormatInformation_BITS_SET_IN_HALF_BYTE_,  },
    { "errorCorrectionLevel_", NULL, 0x12, "Lcom.itextpdf.text.pdf.qrcode.ErrorCorrectionLevel;", NULL,  },
    { "dataMask_", NULL, 0x12, "B", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfQrcodeFormatInformation = { "FormatInformation", "com.itextpdf.text.pdf.qrcode", NULL, 0x10, 8, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfQrcodeFormatInformation;
}

@end
