//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/ByteArray.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/ByteArray.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/qrcode/ByteArray.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"


#line 25
@implementation ComItextpdfTextPdfQrcodeByteArray


#line 32
- (instancetype)init {
  if (self = [super init]) {
    
#line 33
    bytes_ = nil;
    
#line 34
    size__ = 0;
  }
  return self;
}


#line 37
- (instancetype)initWithInt:(jint)size {
  if (self = [super init]) {
    
#line 38
    bytes_ = [IOSByteArray arrayWithLength:size];
    
#line 39
    self->size__ = size;
  }
  return self;
}


#line 42
- (instancetype)initWithByteArray:(IOSByteArray *)byteArray {
  if (self = [super init]) {
    
#line 43
    bytes_ = byteArray;
    
#line 44
    size__ = ((IOSByteArray *) nil_chk(bytes_))->size_;
  }
  return self;
}


#line 52
- (jint)atWithInt:(jint)index {
  
#line 53
  return IOSByteArray_Get(nil_chk(bytes_), index) & (jint) 0xff;
}


#line 56
- (void)setWithInt:(jint)index
           withInt:(jint)value {
  
#line 57
  *IOSByteArray_GetRef(nil_chk(bytes_), index) = (jbyte) value;
}


#line 60
- (jint)size {
  
#line 61
  return size__;
}


#line 64
- (jboolean)isEmpty {
  
#line 65
  return size__ == 0;
}


#line 68
- (void)appendByteWithInt:(jint)value {
  
#line 69
  if (size__ == 0 || size__ >= ((IOSByteArray *) nil_chk(bytes_))->size_) {
    jint newSize = [JavaLangMath maxWithInt:ComItextpdfTextPdfQrcodeByteArray_INITIAL_SIZE withInt:LShift32(size__, 1)];
    [self reserveWithInt:newSize];
  }
  *IOSByteArray_GetRef(nil_chk(bytes_), size__) = (jbyte) value;
  size__++;
}


#line 77
- (void)reserveWithInt:(jint)capacity {
  
#line 78
  if (bytes_ == nil || bytes_->size_ < capacity) {
    IOSByteArray *newArray = [IOSByteArray arrayWithLength:capacity];
    if (bytes_ != nil) {
      [JavaLangSystem arraycopyWithId:bytes_ withInt:0 withId:newArray withInt:0 withInt:bytes_->size_];
    }
    bytes_ = newArray;
  }
}


#line 88
- (void)setWithByteArray:(IOSByteArray *)source
                 withInt:(jint)offset
                 withInt:(jint)count {
  bytes_ = [IOSByteArray arrayWithLength:count];
  size__ = count;
  for (jint x = 0; x < count; x++) {
    *IOSByteArray_GetRef(bytes_, x) = IOSByteArray_Get(nil_chk(source), offset + x);
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfQrcodeByteArray *)other {
  [super copyAllFieldsTo:other];
  other->bytes_ = bytes_;
  other->size__ = size__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ByteArray", NULL, 0x1, NULL },
    { "initWithInt:", "ByteArray", NULL, 0x1, NULL },
    { "initWithByteArray:", "ByteArray", NULL, 0x1, NULL },
    { "atWithInt:", "at", "I", 0x1, NULL },
    { "setWithInt:withInt:", "set", "V", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "appendByteWithInt:", "appendByte", "V", 0x1, NULL },
    { "reserveWithInt:", "reserve", "V", 0x1, NULL },
    { "setWithByteArray:withInt:withInt:", "set", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INITIAL_SIZE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfQrcodeByteArray_INITIAL_SIZE },
    { "bytes_", NULL, 0x2, "[B", NULL,  },
    { "size__", "size", 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfQrcodeByteArray = { "ByteArray", "com.itextpdf.text.pdf.qrcode", NULL, 0x11, 10, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfQrcodeByteArray;
}

@end
