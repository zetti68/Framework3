//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/Encoder.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/Encoder.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/qrcode/BitVector.h"
#include "com/itextpdf/text/pdf/qrcode/BlockPair.h"
#include "com/itextpdf/text/pdf/qrcode/ByteArray.h"
#include "com/itextpdf/text/pdf/qrcode/ByteMatrix.h"
#include "com/itextpdf/text/pdf/qrcode/CharacterSetECI.h"
#include "com/itextpdf/text/pdf/qrcode/EncodeHintType.h"
#include "com/itextpdf/text/pdf/qrcode/Encoder.h"
#include "com/itextpdf/text/pdf/qrcode/ErrorCorrectionLevel.h"
#include "com/itextpdf/text/pdf/qrcode/GF256.h"
#include "com/itextpdf/text/pdf/qrcode/MaskUtil.h"
#include "com/itextpdf/text/pdf/qrcode/MatrixUtil.h"
#include "com/itextpdf/text/pdf/qrcode/Mode.h"
#include "com/itextpdf/text/pdf/qrcode/QRCode.h"
#include "com/itextpdf/text/pdf/qrcode/ReedSolomonEncoder.h"
#include "com/itextpdf/text/pdf/qrcode/Version.h"
#include "com/itextpdf/text/pdf/qrcode/WriterException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"

BOOL ComItextpdfTextPdfQrcodeEncoder_initialized = NO;


#line 28
@implementation ComItextpdfTextPdfQrcodeEncoder

IOSIntArray * ComItextpdfTextPdfQrcodeEncoder_ALPHANUMERIC_TABLE_;
NSString * ComItextpdfTextPdfQrcodeEncoder_DEFAULT_BYTE_MODE_ENCODING_ = 
#line 40
@"ISO-8859-1";


#line 42
- (instancetype)init {
  return [super init];
}


#line 47
+ (jint)calculateMaskPenaltyWithComItextpdfTextPdfQrcodeByteMatrix:(ComItextpdfTextPdfQrcodeByteMatrix *)matrix {
  
#line 48
  jint penalty = 0;
  penalty += [ComItextpdfTextPdfQrcodeMaskUtil applyMaskPenaltyRule1WithComItextpdfTextPdfQrcodeByteMatrix:matrix];
  penalty += [ComItextpdfTextPdfQrcodeMaskUtil applyMaskPenaltyRule2WithComItextpdfTextPdfQrcodeByteMatrix:matrix];
  penalty += [ComItextpdfTextPdfQrcodeMaskUtil applyMaskPenaltyRule3WithComItextpdfTextPdfQrcodeByteMatrix:matrix];
  penalty += [ComItextpdfTextPdfQrcodeMaskUtil applyMaskPenaltyRule4WithComItextpdfTextPdfQrcodeByteMatrix:matrix];
  return penalty;
}


#line 67
+ (void)encodeWithNSString:(NSString *)content
withComItextpdfTextPdfQrcodeErrorCorrectionLevel:(ComItextpdfTextPdfQrcodeErrorCorrectionLevel *)ecLevel
withComItextpdfTextPdfQrcodeQRCode:(ComItextpdfTextPdfQrcodeQRCode *)qrCode {
  
#line 69
  [ComItextpdfTextPdfQrcodeEncoder encodeWithNSString:content withComItextpdfTextPdfQrcodeErrorCorrectionLevel:ecLevel withJavaUtilMap:nil withComItextpdfTextPdfQrcodeQRCode:qrCode];
}


#line 72
+ (void)encodeWithNSString:(NSString *)content
withComItextpdfTextPdfQrcodeErrorCorrectionLevel:(ComItextpdfTextPdfQrcodeErrorCorrectionLevel *)ecLevel
           withJavaUtilMap:(id<JavaUtilMap>)hints
withComItextpdfTextPdfQrcodeQRCode:(ComItextpdfTextPdfQrcodeQRCode *)qrCode {
  NSString *encoding = hints == nil ? nil : (NSString *) check_class_cast([hints getWithId:ComItextpdfTextPdfQrcodeEncodeHintType_get_CHARACTER_SET_()], [NSString class]);
  if (encoding == nil) {
    encoding = ComItextpdfTextPdfQrcodeEncoder_DEFAULT_BYTE_MODE_ENCODING_;
  }
  
#line 81
  ComItextpdfTextPdfQrcodeMode *mode = [ComItextpdfTextPdfQrcodeEncoder chooseModeWithNSString:content withNSString:encoding];
  
#line 84
  ComItextpdfTextPdfQrcodeBitVector *dataBits = [[ComItextpdfTextPdfQrcodeBitVector alloc] init];
  [ComItextpdfTextPdfQrcodeEncoder appendBytesWithNSString:content withComItextpdfTextPdfQrcodeMode:mode withComItextpdfTextPdfQrcodeBitVector:dataBits withNSString:encoding];
  
#line 87
  jint numInputBytes = [dataBits sizeInBytes];
  [ComItextpdfTextPdfQrcodeEncoder initQRCodeWithInt:numInputBytes withComItextpdfTextPdfQrcodeErrorCorrectionLevel:ecLevel withComItextpdfTextPdfQrcodeMode:mode withComItextpdfTextPdfQrcodeQRCode:qrCode];
  
#line 91
  ComItextpdfTextPdfQrcodeBitVector *headerAndDataBits = [[ComItextpdfTextPdfQrcodeBitVector alloc] init];
  
#line 94
  if (mode == ComItextpdfTextPdfQrcodeMode_get_BYTE_() && ![((NSString *) nil_chk(ComItextpdfTextPdfQrcodeEncoder_DEFAULT_BYTE_MODE_ENCODING_)) isEqual:encoding]) {
    ComItextpdfTextPdfQrcodeCharacterSetECI *eci = [ComItextpdfTextPdfQrcodeCharacterSetECI getCharacterSetECIByNameWithNSString:encoding];
    if (eci != nil) {
      [ComItextpdfTextPdfQrcodeEncoder appendECIWithComItextpdfTextPdfQrcodeCharacterSetECI:eci withComItextpdfTextPdfQrcodeBitVector:headerAndDataBits];
    }
  }
  
#line 101
  [ComItextpdfTextPdfQrcodeEncoder appendModeInfoWithComItextpdfTextPdfQrcodeMode:mode withComItextpdfTextPdfQrcodeBitVector:headerAndDataBits];
  
#line 103
  jint numLetters = [((ComItextpdfTextPdfQrcodeMode *) nil_chk(mode)) isEqual:ComItextpdfTextPdfQrcodeMode_get_BYTE_()] ? [dataBits sizeInBytes] : ((jint) [((NSString *) nil_chk(content)) length]);
  [ComItextpdfTextPdfQrcodeEncoder appendLengthInfoWithInt:numLetters withInt:[((ComItextpdfTextPdfQrcodeQRCode *) nil_chk(qrCode)) getVersion] withComItextpdfTextPdfQrcodeMode:mode withComItextpdfTextPdfQrcodeBitVector:headerAndDataBits];
  [headerAndDataBits appendBitVectorWithComItextpdfTextPdfQrcodeBitVector:dataBits];
  
#line 108
  [ComItextpdfTextPdfQrcodeEncoder terminateBitsWithInt:[qrCode getNumDataBytes] withComItextpdfTextPdfQrcodeBitVector:headerAndDataBits];
  
#line 111
  ComItextpdfTextPdfQrcodeBitVector *finalBits = [[ComItextpdfTextPdfQrcodeBitVector alloc] init];
  [ComItextpdfTextPdfQrcodeEncoder interleaveWithECBytesWithComItextpdfTextPdfQrcodeBitVector:headerAndDataBits withInt:[qrCode getNumTotalBytes] withInt:[qrCode getNumDataBytes] withInt:
#line 113
  [qrCode getNumRSBlocks] withComItextpdfTextPdfQrcodeBitVector:finalBits];
  
#line 116
  ComItextpdfTextPdfQrcodeByteMatrix *matrix = [[ComItextpdfTextPdfQrcodeByteMatrix alloc] initWithInt:[qrCode getMatrixWidth] withInt:[qrCode getMatrixWidth]];
  [qrCode setMaskPatternWithInt:[ComItextpdfTextPdfQrcodeEncoder chooseMaskPatternWithComItextpdfTextPdfQrcodeBitVector:finalBits withComItextpdfTextPdfQrcodeErrorCorrectionLevel:[qrCode getECLevel] withInt:[qrCode getVersion] withComItextpdfTextPdfQrcodeByteMatrix:
#line 118
  matrix]];
  
#line 121
  [ComItextpdfTextPdfQrcodeMatrixUtil buildMatrixWithComItextpdfTextPdfQrcodeBitVector:finalBits withComItextpdfTextPdfQrcodeErrorCorrectionLevel:[qrCode getECLevel] withInt:[qrCode getVersion] withInt:
#line 122
  [qrCode getMaskPattern] withComItextpdfTextPdfQrcodeByteMatrix:matrix];
  [qrCode setMatrixWithComItextpdfTextPdfQrcodeByteMatrix:matrix];
  
#line 125
  if (![qrCode isValid]) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:JreStrcat("$$", @"Invalid QR code: ", [qrCode description])];
  }
}


#line 134
+ (jint)getAlphanumericCodeWithInt:(jint)code {
  
#line 135
  if (code < ((IOSIntArray *) nil_chk(ComItextpdfTextPdfQrcodeEncoder_ALPHANUMERIC_TABLE_))->size_) {
    return IOSIntArray_Get(ComItextpdfTextPdfQrcodeEncoder_ALPHANUMERIC_TABLE_, code);
  }
  return -1;
}


#line 141
+ (ComItextpdfTextPdfQrcodeMode *)chooseModeWithNSString:(NSString *)content {
  
#line 142
  return [ComItextpdfTextPdfQrcodeEncoder chooseModeWithNSString:content withNSString:nil];
}


#line 149
+ (ComItextpdfTextPdfQrcodeMode *)chooseModeWithNSString:(NSString *)content
                                            withNSString:(NSString *)encoding {
  
#line 150
  if ([@"Shift_JIS" isEqual:encoding]) {
    
#line 152
    return [ComItextpdfTextPdfQrcodeEncoder isOnlyDoubleByteKanjiWithNSString:content] ? ComItextpdfTextPdfQrcodeMode_get_KANJI_() : ComItextpdfTextPdfQrcodeMode_get_BYTE_();
  }
  jboolean hasNumeric = NO;
  jboolean hasAlphanumeric = NO;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(content)) length]); ++i) {
    jchar c = [content charAtWithInt:i];
    if (c >= '0' && c <= '9') {
      hasNumeric = YES;
    }
    else
#line 160
    if ([ComItextpdfTextPdfQrcodeEncoder getAlphanumericCodeWithInt:c] != -1) {
      hasAlphanumeric = YES;
    }
    else {
      
#line 163
      return ComItextpdfTextPdfQrcodeMode_get_BYTE_();
    }
  }
  if (hasAlphanumeric) {
    return ComItextpdfTextPdfQrcodeMode_get_ALPHANUMERIC_();
  }
  else
#line 168
  if (hasNumeric) {
    return ComItextpdfTextPdfQrcodeMode_get_NUMERIC_();
  }
  return ComItextpdfTextPdfQrcodeMode_get_BYTE_();
}


#line 174
+ (jboolean)isOnlyDoubleByteKanjiWithNSString:(NSString *)content {
  
#line 175
  IOSByteArray *bytes;
  @try {
    bytes = [((NSString *) nil_chk(content)) getBytesWithCharsetName:@"Shift_JIS"];
  }
  @catch (
#line 178
  JavaIoUnsupportedEncodingException *uee) {
    return NO;
  }
  jint length = ((IOSByteArray *) nil_chk(bytes))->size_;
  if (length % 2 != 0) {
    return NO;
  }
  for (jint i = 0; i < length; i += 2) {
    jint byte1 = IOSByteArray_Get(bytes, i) & (jint) 0xFF;
    if ((byte1 < (jint) 0x81 || byte1 > (jint) 0x9F) && (byte1 < (jint) 0xE0 || byte1 > (jint) 0xEB)) {
      return NO;
    }
  }
  return YES;
}


#line 194
+ (jint)chooseMaskPatternWithComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits
              withComItextpdfTextPdfQrcodeErrorCorrectionLevel:(ComItextpdfTextPdfQrcodeErrorCorrectionLevel *)ecLevel
                                                       withInt:(jint)version_
                        withComItextpdfTextPdfQrcodeByteMatrix:(ComItextpdfTextPdfQrcodeByteMatrix *)matrix {
  
#line 197
  jint minPenalty = JavaLangInteger_MAX_VALUE;
  jint bestMaskPattern = -1;
  
#line 200
  for (jint maskPattern = 0; maskPattern < ComItextpdfTextPdfQrcodeQRCode_NUM_MASK_PATTERNS; maskPattern++) {
    [ComItextpdfTextPdfQrcodeMatrixUtil buildMatrixWithComItextpdfTextPdfQrcodeBitVector:bits withComItextpdfTextPdfQrcodeErrorCorrectionLevel:ecLevel withInt:version_ withInt:maskPattern withComItextpdfTextPdfQrcodeByteMatrix:matrix];
    jint penalty = [ComItextpdfTextPdfQrcodeEncoder calculateMaskPenaltyWithComItextpdfTextPdfQrcodeByteMatrix:matrix];
    if (penalty < minPenalty) {
      minPenalty = penalty;
      bestMaskPattern = maskPattern;
    }
  }
  return bestMaskPattern;
}

+ (void)initQRCodeWithInt:(jint)numInputBytes
withComItextpdfTextPdfQrcodeErrorCorrectionLevel:(ComItextpdfTextPdfQrcodeErrorCorrectionLevel *)ecLevel
withComItextpdfTextPdfQrcodeMode:(ComItextpdfTextPdfQrcodeMode *)mode
withComItextpdfTextPdfQrcodeQRCode:(ComItextpdfTextPdfQrcodeQRCode *)qrCode {
  
#line 217
  [((ComItextpdfTextPdfQrcodeQRCode *) nil_chk(qrCode)) setECLevelWithComItextpdfTextPdfQrcodeErrorCorrectionLevel:ecLevel];
  [qrCode setModeWithComItextpdfTextPdfQrcodeMode:mode];
  
#line 221
  for (jint versionNum = 1; versionNum <= 40; versionNum++) {
    ComItextpdfTextPdfQrcodeVersion *version_ = [ComItextpdfTextPdfQrcodeVersion getVersionForNumberWithInt:versionNum];
    
#line 224
    jint numBytes = [((ComItextpdfTextPdfQrcodeVersion *) nil_chk(version_)) getTotalCodewords];
    
#line 226
    ComItextpdfTextPdfQrcodeVersion_ECBlocks *ecBlocks = [version_ getECBlocksForLevelWithComItextpdfTextPdfQrcodeErrorCorrectionLevel:ecLevel];
    jint numEcBytes = [((ComItextpdfTextPdfQrcodeVersion_ECBlocks *) nil_chk(ecBlocks)) getTotalECCodewords];
    
#line 229
    jint numRSBlocks = [ecBlocks getNumBlocks];
    
#line 231
    jint numDataBytes = numBytes - numEcBytes;
    
#line 235
    if (numDataBytes >= numInputBytes + 3) {
      
#line 237
      [qrCode setVersionWithInt:versionNum];
      [qrCode setNumTotalBytesWithInt:numBytes];
      [qrCode setNumDataBytesWithInt:numDataBytes];
      [qrCode setNumRSBlocksWithInt:numRSBlocks];
      
#line 242
      [qrCode setNumECBytesWithInt:numEcBytes];
      
#line 244
      [qrCode setMatrixWidthWithInt:[version_ getDimensionForVersion]];
      return;
    }
  }
  @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"Cannot find proper rs block info (input data too big?)"];
}


#line 254
+ (void)terminateBitsWithInt:(jint)numDataBytes
withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits {
  
#line 255
  jint capacity = LShift32(numDataBytes, 3);
  if ([((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) size] > capacity) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:JreStrcat("$I$I", @"data bits cannot fit in the QR Code", [bits size], @" > ",
#line 258
    capacity)];
  }
  
#line 264
  for (jint i = 0; i < 4 && [bits size] < capacity; ++i) {
    [bits appendBitWithInt:0];
  }
  jint numBitsInLastByte = [bits size] % 8;
  
#line 269
  if (numBitsInLastByte > 0) {
    jint numPaddingBits = 8 - numBitsInLastByte;
    for (jint i = 0; i < numPaddingBits; ++i) {
      [bits appendBitWithInt:0];
    }
  }
  
#line 276
  if ([bits size] % 8 != 0) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"Number of bits is not a multiple of 8"];
  }
  
#line 280
  jint numPaddingBytes = numDataBytes - [bits sizeInBytes];
  for (jint i = 0; i < numPaddingBytes; ++i) {
    if (i % 2 == 0) {
      [bits appendBitsWithInt:(jint) 0xec withInt:8];
    }
    else {
      
#line 285
      [bits appendBitsWithInt:(jint) 0x11 withInt:8];
    }
  }
  if ([bits size] != capacity) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"Bits size does not equal capacity"];
  }
}


#line 298
+ (void)getNumDataBytesAndNumECBytesForBlockIDWithInt:(jint)numTotalBytes
                                              withInt:(jint)numDataBytes
                                              withInt:(jint)numRSBlocks
                                              withInt:(jint)blockID
                                         withIntArray:(IOSIntArray *)numDataBytesInBlock
                                         withIntArray:(IOSIntArray *)numECBytesInBlock {
  if (blockID >= numRSBlocks) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"Block ID too large"];
  }
  
#line 305
  jint numRsBlocksInGroup2 = numTotalBytes % numRSBlocks;
  
#line 307
  jint numRsBlocksInGroup1 = numRSBlocks - numRsBlocksInGroup2;
  
#line 309
  jint numTotalBytesInGroup1 = numTotalBytes / numRSBlocks;
  
#line 311
  jint numTotalBytesInGroup2 = numTotalBytesInGroup1 + 1;
  
#line 313
  jint numDataBytesInGroup1 = numDataBytes / numRSBlocks;
  
#line 315
  jint numDataBytesInGroup2 = numDataBytesInGroup1 + 1;
  
#line 317
  jint numEcBytesInGroup1 = numTotalBytesInGroup1 - numDataBytesInGroup1;
  
#line 319
  jint numEcBytesInGroup2 = numTotalBytesInGroup2 - numDataBytesInGroup2;
  
#line 322
  if (numEcBytesInGroup1 != numEcBytesInGroup2) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"EC bytes mismatch"];
  }
  
#line 326
  if (numRSBlocks != numRsBlocksInGroup1 + numRsBlocksInGroup2) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"RS blocks mismatch"];
  }
  
#line 330
  if (numTotalBytes !=
#line 331
  ((numDataBytesInGroup1 + numEcBytesInGroup1) *
#line 332
  numRsBlocksInGroup1) +
#line 333
  ((numDataBytesInGroup2 + numEcBytesInGroup2) *
#line 334
  numRsBlocksInGroup2)) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"Total bytes mismatch"];
  }
  
#line 338
  if (blockID < numRsBlocksInGroup1) {
    *IOSIntArray_GetRef(nil_chk(numDataBytesInBlock), 0) = numDataBytesInGroup1;
    *IOSIntArray_GetRef(nil_chk(numECBytesInBlock), 0) = numEcBytesInGroup1;
  }
  else {
    
#line 342
    *IOSIntArray_GetRef(nil_chk(numDataBytesInBlock), 0) = numDataBytesInGroup2;
    *IOSIntArray_GetRef(nil_chk(numECBytesInBlock), 0) = numEcBytesInGroup2;
  }
}


#line 351
+ (void)interleaveWithECBytesWithComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits
                                                           withInt:(jint)numTotalBytes
                                                           withInt:(jint)numDataBytes
                                                           withInt:(jint)numRSBlocks
                             withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)result {
  
#line 355
  if ([((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) sizeInBytes] != numDataBytes) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"Number of bits and data bytes does not match"];
  }
  
#line 361
  jint dataBytesOffset = 0;
  jint maxNumDataBytes = 0;
  jint maxNumEcBytes = 0;
  
#line 366
  JavaUtilArrayList *blocks = [[JavaUtilArrayList alloc] initWithInt:numRSBlocks];
  
#line 368
  for (jint i = 0; i < numRSBlocks; ++i) {
    IOSIntArray *numDataBytesInBlock = [IOSIntArray arrayWithLength:1];
    IOSIntArray *numEcBytesInBlock = [IOSIntArray arrayWithLength:1];
    [ComItextpdfTextPdfQrcodeEncoder getNumDataBytesAndNumECBytesForBlockIDWithInt:
#line 372
    numTotalBytes withInt:numDataBytes withInt:numRSBlocks withInt:i withIntArray:
#line 373
    numDataBytesInBlock withIntArray:numEcBytesInBlock];
    
#line 375
    ComItextpdfTextPdfQrcodeByteArray *dataBytes = [[ComItextpdfTextPdfQrcodeByteArray alloc] init];
    [dataBytes setWithByteArray:[bits getArray] withInt:dataBytesOffset withInt:IOSIntArray_Get(numDataBytesInBlock, 0)];
    ComItextpdfTextPdfQrcodeByteArray *ecBytes = [ComItextpdfTextPdfQrcodeEncoder generateECBytesWithComItextpdfTextPdfQrcodeByteArray:dataBytes withInt:IOSIntArray_Get(numEcBytesInBlock, 0)];
    [blocks addWithId:[[ComItextpdfTextPdfQrcodeBlockPair alloc] initWithComItextpdfTextPdfQrcodeByteArray:dataBytes withComItextpdfTextPdfQrcodeByteArray:ecBytes]];
    
#line 380
    maxNumDataBytes = [JavaLangMath maxWithInt:maxNumDataBytes withInt:[dataBytes size]];
    maxNumEcBytes = [JavaLangMath maxWithInt:maxNumEcBytes withInt:[((ComItextpdfTextPdfQrcodeByteArray *) nil_chk(ecBytes)) size]];
    dataBytesOffset += IOSIntArray_Get(numDataBytesInBlock, 0);
  }
  if (numDataBytes != dataBytesOffset) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"Data bytes does not match offset"];
  }
  
#line 389
  for (jint i = 0; i < maxNumDataBytes; ++i) {
    for (jint j = 0; j < [blocks size]; ++j) {
      ComItextpdfTextPdfQrcodeByteArray *dataBytes = [((ComItextpdfTextPdfQrcodeBlockPair *) nil_chk([blocks getWithInt:j])) getDataBytes];
      if (i < [((ComItextpdfTextPdfQrcodeByteArray *) nil_chk(dataBytes)) size]) {
        [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(result)) appendBitsWithInt:[dataBytes atWithInt:i] withInt:8];
      }
    }
  }
  
#line 398
  for (jint i = 0; i < maxNumEcBytes; ++i) {
    for (jint j = 0; j < [blocks size]; ++j) {
      ComItextpdfTextPdfQrcodeByteArray *ecBytes = [((ComItextpdfTextPdfQrcodeBlockPair *) nil_chk([blocks getWithInt:j])) getErrorCorrectionBytes];
      if (i < [((ComItextpdfTextPdfQrcodeByteArray *) nil_chk(ecBytes)) size]) {
        [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(result)) appendBitsWithInt:[ecBytes atWithInt:i] withInt:8];
      }
    }
  }
  if (numTotalBytes != [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(result)) sizeInBytes]) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:JreStrcat("$I$I$", @"Interleaving error: ", numTotalBytes, @" and ",
#line 408
    [result sizeInBytes], @" differ.")];
  }
}


#line 412
+ (ComItextpdfTextPdfQrcodeByteArray *)generateECBytesWithComItextpdfTextPdfQrcodeByteArray:(ComItextpdfTextPdfQrcodeByteArray *)dataBytes
                                                                                    withInt:(jint)numEcBytesInBlock {
  
#line 413
  jint numDataBytes = [((ComItextpdfTextPdfQrcodeByteArray *) nil_chk(dataBytes)) size];
  IOSIntArray *toEncode = [IOSIntArray arrayWithLength:numDataBytes + numEcBytesInBlock];
  for (jint i = 0; i < numDataBytes; i++) {
    *IOSIntArray_GetRef(toEncode, i) = [dataBytes atWithInt:i];
  }
  [((ComItextpdfTextPdfQrcodeReedSolomonEncoder *) [[ComItextpdfTextPdfQrcodeReedSolomonEncoder alloc] initWithComItextpdfTextPdfQrcodeGF256:ComItextpdfTextPdfQrcodeGF256_get_QR_CODE_FIELD_()]) encodeWithIntArray:toEncode withInt:numEcBytesInBlock];
  
#line 420
  ComItextpdfTextPdfQrcodeByteArray *ecBytes = [[ComItextpdfTextPdfQrcodeByteArray alloc] initWithInt:numEcBytesInBlock];
  for (jint i = 0; i < numEcBytesInBlock; i++) {
    [ecBytes setWithInt:i withInt:IOSIntArray_Get(toEncode, numDataBytes + i)];
  }
  return ecBytes;
}


#line 430
+ (void)appendModeInfoWithComItextpdfTextPdfQrcodeMode:(ComItextpdfTextPdfQrcodeMode *)mode
                 withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits {
  [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:[((ComItextpdfTextPdfQrcodeMode *) nil_chk(mode)) getBits] withInt:4];
}


#line 438
+ (void)appendLengthInfoWithInt:(jint)numLetters
                        withInt:(jint)version_
withComItextpdfTextPdfQrcodeMode:(ComItextpdfTextPdfQrcodeMode *)mode
withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits {
  
#line 440
  jint numBits = [((ComItextpdfTextPdfQrcodeMode *) nil_chk(mode)) getCharacterCountBitsWithComItextpdfTextPdfQrcodeVersion:[ComItextpdfTextPdfQrcodeVersion getVersionForNumberWithInt:version_]];
  if (numLetters > ((LShift32(1, numBits)) - 1)) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:JreStrcat("I$I", numLetters, @"is bigger than", ((LShift32(1, numBits)) - 1))];
  }
  [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:numLetters withInt:numBits];
}


#line 450
+ (void)appendBytesWithNSString:(NSString *)content
withComItextpdfTextPdfQrcodeMode:(ComItextpdfTextPdfQrcodeMode *)mode
withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits
                   withNSString:(NSString *)encoding {
  
#line 452
  if ([((ComItextpdfTextPdfQrcodeMode *) nil_chk(mode)) isEqual:ComItextpdfTextPdfQrcodeMode_get_NUMERIC_()]) {
    [ComItextpdfTextPdfQrcodeEncoder appendNumericBytesWithNSString:content withComItextpdfTextPdfQrcodeBitVector:bits];
  }
  else
#line 454
  if ([mode isEqual:ComItextpdfTextPdfQrcodeMode_get_ALPHANUMERIC_()]) {
    [ComItextpdfTextPdfQrcodeEncoder appendAlphanumericBytesWithNSString:content withComItextpdfTextPdfQrcodeBitVector:bits];
  }
  else
#line 456
  if ([mode isEqual:ComItextpdfTextPdfQrcodeMode_get_BYTE_()]) {
    [ComItextpdfTextPdfQrcodeEncoder append8BitBytesWithNSString:content withComItextpdfTextPdfQrcodeBitVector:bits withNSString:encoding];
  }
  else
#line 458
  if ([mode isEqual:ComItextpdfTextPdfQrcodeMode_get_KANJI_()]) {
    [ComItextpdfTextPdfQrcodeEncoder appendKanjiBytesWithNSString:content withComItextpdfTextPdfQrcodeBitVector:bits];
  }
  else {
    
#line 461
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:JreStrcat("$@", @"Invalid mode: ", mode)];
  }
}


#line 465
+ (void)appendNumericBytesWithNSString:(NSString *)content
 withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits {
  
#line 466
  jint length = ((jint) [((NSString *) nil_chk(content)) length]);
  jint i = 0;
  while (i < length) {
    jint num1 = [content charAtWithInt:i] - '0';
    if (i + 2 < length) {
      
#line 472
      jint num2 = [content charAtWithInt:i + 1] - '0';
      jint num3 = [content charAtWithInt:i + 2] - '0';
      [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:num1 * 100 + num2 * 10 + num3 withInt:10];
      i += 3;
    }
    else
#line 476
    if (i + 1 < length) {
      
#line 478
      jint num2 = [content charAtWithInt:i + 1] - '0';
      [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:num1 * 10 + num2 withInt:7];
      i += 2;
    }
    else {
      [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:num1 withInt:4];
      i++;
    }
  }
}


#line 489
+ (void)appendAlphanumericBytesWithNSString:(NSString *)content
      withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits {
  
#line 490
  jint length = ((jint) [((NSString *) nil_chk(content)) length]);
  jint i = 0;
  while (i < length) {
    jint code1 = [ComItextpdfTextPdfQrcodeEncoder getAlphanumericCodeWithInt:[content charAtWithInt:i]];
    if (code1 == -1) {
      @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] init];
    }
    if (i + 1 < length) {
      jint code2 = [ComItextpdfTextPdfQrcodeEncoder getAlphanumericCodeWithInt:[content charAtWithInt:i + 1]];
      if (code2 == -1) {
        @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] init];
      }
      
#line 503
      [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:code1 * 45 + code2 withInt:11];
      i += 2;
    }
    else {
      [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:code1 withInt:6];
      i++;
    }
  }
}


#line 513
+ (void)append8BitBytesWithNSString:(NSString *)content
withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits
                       withNSString:(NSString *)encoding {
  
#line 515
  IOSByteArray *bytes;
  @try {
    bytes = [((NSString *) nil_chk(content)) getBytesWithCharsetName:encoding];
  }
  @catch (
#line 518
  JavaIoUnsupportedEncodingException *uee) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:[((JavaIoUnsupportedEncodingException *) nil_chk(uee)) description]];
  }
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(bytes))->size_; ++i) {
    [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:IOSByteArray_Get(bytes, i) withInt:8];
  }
}


#line 526
+ (void)appendKanjiBytesWithNSString:(NSString *)content
withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits {
  
#line 527
  IOSByteArray *bytes;
  @try {
    bytes = [((NSString *) nil_chk(content)) getBytesWithCharsetName:@"Shift_JIS"];
  }
  @catch (
#line 530
  JavaIoUnsupportedEncodingException *uee) {
    @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:[((JavaIoUnsupportedEncodingException *) nil_chk(uee)) description]];
  }
  jint length = ((IOSByteArray *) nil_chk(bytes))->size_;
  for (jint i = 0; i < length; i += 2) {
    jint byte1 = IOSByteArray_Get(bytes, i) & (jint) 0xFF;
    jint byte2 = IOSByteArray_Get(bytes, i + 1) & (jint) 0xFF;
    jint code = (LShift32(byte1, 8)) | byte2;
    jint subtracted = -1;
    if (code >= (jint) 0x8140 && code <= (jint) 0x9ffc) {
      subtracted = code - (jint) 0x8140;
    }
    else
#line 541
    if (code >= (jint) 0xe040 && code <= (jint) 0xebbf) {
      subtracted = code - (jint) 0xc140;
    }
    if (subtracted == -1) {
      @throw [[ComItextpdfTextPdfQrcodeWriterException alloc] initWithNSString:@"Invalid byte sequence"];
    }
    jint encoded = ((RShift32(subtracted, 8)) * (jint) 0xc0) + (subtracted & (jint) 0xff);
    [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:encoded withInt:13];
  }
}


#line 552
+ (void)appendECIWithComItextpdfTextPdfQrcodeCharacterSetECI:(ComItextpdfTextPdfQrcodeCharacterSetECI *)eci
                       withComItextpdfTextPdfQrcodeBitVector:(ComItextpdfTextPdfQrcodeBitVector *)bits {
  
#line 553
  [((ComItextpdfTextPdfQrcodeBitVector *) nil_chk(bits)) appendBitsWithInt:[((ComItextpdfTextPdfQrcodeMode *) nil_chk(ComItextpdfTextPdfQrcodeMode_get_ECI_())) getBits] withInt:4];
  
#line 555
  [bits appendBitsWithInt:[((ComItextpdfTextPdfQrcodeCharacterSetECI *) nil_chk(eci)) getValue] withInt:8];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfQrcodeEncoder class]) {
    ComItextpdfTextPdfQrcodeEncoder_ALPHANUMERIC_TABLE_ = [IOSIntArray arrayWithInts:(jint[]){
#line 32
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 33
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
#line 34
      36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43,
#line 35
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1, -1, -1, -1, -1,
#line 36
      -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
#line 37
      25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, -1, -1, -1, -1, -1 } count:96];
      ComItextpdfTextPdfQrcodeEncoder_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Encoder", NULL, 0x2, NULL },
    { "calculateMaskPenaltyWithComItextpdfTextPdfQrcodeByteMatrix:", "calculateMaskPenalty", "I", 0xa, NULL },
    { "encodeWithNSString:withComItextpdfTextPdfQrcodeErrorCorrectionLevel:withComItextpdfTextPdfQrcodeQRCode:", "encode", "V", 0x9, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "encodeWithNSString:withComItextpdfTextPdfQrcodeErrorCorrectionLevel:withJavaUtilMap:withComItextpdfTextPdfQrcodeQRCode:", "encode", "V", 0x9, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "getAlphanumericCodeWithInt:", "getAlphanumericCode", "I", 0x8, NULL },
    { "chooseModeWithNSString:", "chooseMode", "Lcom.itextpdf.text.pdf.qrcode.Mode;", 0x9, NULL },
    { "chooseModeWithNSString:withNSString:", "chooseMode", "Lcom.itextpdf.text.pdf.qrcode.Mode;", 0x9, NULL },
    { "isOnlyDoubleByteKanjiWithNSString:", "isOnlyDoubleByteKanji", "Z", 0xa, NULL },
    { "chooseMaskPatternWithComItextpdfTextPdfQrcodeBitVector:withComItextpdfTextPdfQrcodeErrorCorrectionLevel:withInt:withComItextpdfTextPdfQrcodeByteMatrix:", "chooseMaskPattern", "I", 0xa, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "initQRCodeWithInt:withComItextpdfTextPdfQrcodeErrorCorrectionLevel:withComItextpdfTextPdfQrcodeMode:withComItextpdfTextPdfQrcodeQRCode:", "initQRCode", "V", 0xa, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "terminateBitsWithInt:withComItextpdfTextPdfQrcodeBitVector:", "terminateBits", "V", 0x8, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "getNumDataBytesAndNumECBytesForBlockIDWithInt:withInt:withInt:withInt:withIntArray:withIntArray:", "getNumDataBytesAndNumECBytesForBlockID", "V", 0x8, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "interleaveWithECBytesWithComItextpdfTextPdfQrcodeBitVector:withInt:withInt:withInt:withComItextpdfTextPdfQrcodeBitVector:", "interleaveWithECBytes", "V", 0x8, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "generateECBytesWithComItextpdfTextPdfQrcodeByteArray:withInt:", "generateECBytes", "Lcom.itextpdf.text.pdf.qrcode.ByteArray;", 0x8, NULL },
    { "appendModeInfoWithComItextpdfTextPdfQrcodeMode:withComItextpdfTextPdfQrcodeBitVector:", "appendModeInfo", "V", 0x8, NULL },
    { "appendLengthInfoWithInt:withInt:withComItextpdfTextPdfQrcodeMode:withComItextpdfTextPdfQrcodeBitVector:", "appendLengthInfo", "V", 0x8, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "appendBytesWithNSString:withComItextpdfTextPdfQrcodeMode:withComItextpdfTextPdfQrcodeBitVector:withNSString:", "appendBytes", "V", 0x8, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "appendNumericBytesWithNSString:withComItextpdfTextPdfQrcodeBitVector:", "appendNumericBytes", "V", 0x8, NULL },
    { "appendAlphanumericBytesWithNSString:withComItextpdfTextPdfQrcodeBitVector:", "appendAlphanumericBytes", "V", 0x8, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "append8BitBytesWithNSString:withComItextpdfTextPdfQrcodeBitVector:withNSString:", "append8BitBytes", "V", 0x8, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "appendKanjiBytesWithNSString:withComItextpdfTextPdfQrcodeBitVector:", "appendKanjiBytes", "V", 0x8, "Lcom.itextpdf.text.pdf.qrcode.WriterException;" },
    { "appendECIWithComItextpdfTextPdfQrcodeCharacterSetECI:withComItextpdfTextPdfQrcodeBitVector:", "appendECI", "V", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ALPHANUMERIC_TABLE_", NULL, 0x1a, "[I", &ComItextpdfTextPdfQrcodeEncoder_ALPHANUMERIC_TABLE_,  },
    { "DEFAULT_BYTE_MODE_ENCODING_", NULL, 0x18, "Ljava.lang.String;", &ComItextpdfTextPdfQrcodeEncoder_DEFAULT_BYTE_MODE_ENCODING_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfQrcodeEncoder = { "Encoder", "com.itextpdf.text.pdf.qrcode", NULL, 0x11, 22, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfQrcodeEncoder;
}

@end
