//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/Mode.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/qrcode/Mode.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/qrcode/Mode.h"
#include "com/itextpdf/text/pdf/qrcode/Version.h"
#include "java/lang/IllegalArgumentException.h"

BOOL ComItextpdfTextPdfQrcodeMode_initialized = NO;


#line 26
@implementation ComItextpdfTextPdfQrcodeMode

ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_TERMINATOR_;
ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_NUMERIC_;
ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_ALPHANUMERIC_;
ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_STRUCTURED_APPEND_;
ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_BYTE_;
ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_ECI_;
ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_KANJI_;
ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_FNC1_FIRST_POSITION_;
ComItextpdfTextPdfQrcodeMode * ComItextpdfTextPdfQrcodeMode_FNC1_SECOND_POSITION_;


#line 44
- (instancetype)initWithIntArray:(IOSIntArray *)characterCountBitsForVersions
                         withInt:(jint)bits
                    withNSString:(NSString *)name {
  if (self = [super init]) {
    
#line 45
    self->characterCountBitsForVersions_ = characterCountBitsForVersions;
    
#line 46
    self->bits_ = bits;
    
#line 47
    self->name_ = name;
  }
  return self;
}


#line 55
+ (ComItextpdfTextPdfQrcodeMode *)forBitsWithInt:(jint)bits {
  
#line 56
  switch (bits) {
    case (jint) 0x0:
    return ComItextpdfTextPdfQrcodeMode_TERMINATOR_;
    case (jint) 0x1:
    return ComItextpdfTextPdfQrcodeMode_NUMERIC_;
    case (jint) 0x2:
    return ComItextpdfTextPdfQrcodeMode_ALPHANUMERIC_;
    case (jint) 0x3:
    return ComItextpdfTextPdfQrcodeMode_STRUCTURED_APPEND_;
    case (jint) 0x4:
    return ComItextpdfTextPdfQrcodeMode_BYTE_;
    case (jint) 0x5:
    return ComItextpdfTextPdfQrcodeMode_FNC1_FIRST_POSITION_;
    case (jint) 0x7:
    return ComItextpdfTextPdfQrcodeMode_ECI_;
    case (jint) 0x8:
    return ComItextpdfTextPdfQrcodeMode_KANJI_;
    case (jint) 0x9:
    return ComItextpdfTextPdfQrcodeMode_FNC1_SECOND_POSITION_;
    default:
    @throw [[JavaLangIllegalArgumentException alloc] init];
  }
}


#line 85
- (jint)getCharacterCountBitsWithComItextpdfTextPdfQrcodeVersion:(ComItextpdfTextPdfQrcodeVersion *)version_ {
  
#line 86
  if (characterCountBitsForVersions_ == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Character count doesn't apply to this mode"];
  }
  jint number = [((ComItextpdfTextPdfQrcodeVersion *) nil_chk(version_)) getVersionNumber];
  jint offset;
  if (number <= 9) {
    offset = 0;
  }
  else
#line 93
  if (number <= 26) {
    offset = 1;
  }
  else {
    
#line 96
    offset = 2;
  }
  return IOSIntArray_Get(nil_chk(characterCountBitsForVersions_), offset);
}


#line 101
- (jint)getBits {
  
#line 102
  return bits_;
}


#line 105
- (NSString *)getName {
  
#line 106
  return name_;
}

- (NSString *)description {
  
#line 110
  return name_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfQrcodeMode *)other {
  [super copyAllFieldsTo:other];
  other->bits_ = bits_;
  other->characterCountBitsForVersions_ = characterCountBitsForVersions_;
  other->name_ = name_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfQrcodeMode class]) {
    ComItextpdfTextPdfQrcodeMode_TERMINATOR_ =
#line 30
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ 0, 0, 0 } count:3] withInt:(jint) 0x00 withNSString:@"TERMINATOR"];
    ComItextpdfTextPdfQrcodeMode_NUMERIC_ =
#line 31
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ 10, 12, 14 } count:3] withInt:(jint) 0x01 withNSString:@"NUMERIC"];
    ComItextpdfTextPdfQrcodeMode_ALPHANUMERIC_ =
#line 32
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ 9, 11, 13 } count:3] withInt:(jint) 0x02 withNSString:@"ALPHANUMERIC"];
    ComItextpdfTextPdfQrcodeMode_STRUCTURED_APPEND_ =
#line 33
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ 0, 0, 0 } count:3] withInt:(jint) 0x03 withNSString:@"STRUCTURED_APPEND"];
    ComItextpdfTextPdfQrcodeMode_BYTE_ =
#line 34
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ 8, 16, 16 } count:3] withInt:(jint) 0x04 withNSString:@"BYTE"];
    ComItextpdfTextPdfQrcodeMode_ECI_ =
#line 35
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:nil withInt:(jint) 0x07 withNSString:@"ECI"];
    ComItextpdfTextPdfQrcodeMode_KANJI_ =
#line 36
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ 8, 10, 12 } count:3] withInt:(jint) 0x08 withNSString:@"KANJI"];
    ComItextpdfTextPdfQrcodeMode_FNC1_FIRST_POSITION_ =
#line 37
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:nil withInt:(jint) 0x05 withNSString:@"FNC1_FIRST_POSITION"];
    ComItextpdfTextPdfQrcodeMode_FNC1_SECOND_POSITION_ =
#line 38
    [[ComItextpdfTextPdfQrcodeMode alloc] initWithIntArray:nil withInt:(jint) 0x09 withNSString:@"FNC1_SECOND_POSITION"];
    ComItextpdfTextPdfQrcodeMode_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIntArray:withInt:withNSString:", "Mode", NULL, 0x2, NULL },
    { "forBitsWithInt:", "forBits", "Lcom.itextpdf.text.pdf.qrcode.Mode;", 0x9, NULL },
    { "getCharacterCountBitsWithComItextpdfTextPdfQrcodeVersion:", "getCharacterCountBits", "I", 0x1, NULL },
    { "getBits", NULL, "I", 0x1, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TERMINATOR_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_TERMINATOR_,  },
    { "NUMERIC_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_NUMERIC_,  },
    { "ALPHANUMERIC_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_ALPHANUMERIC_,  },
    { "STRUCTURED_APPEND_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_STRUCTURED_APPEND_,  },
    { "BYTE_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_BYTE_,  },
    { "ECI_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_ECI_,  },
    { "KANJI_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_KANJI_,  },
    { "FNC1_FIRST_POSITION_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_FNC1_FIRST_POSITION_,  },
    { "FNC1_SECOND_POSITION_", NULL, 0x19, "Lcom.itextpdf.text.pdf.qrcode.Mode;", &ComItextpdfTextPdfQrcodeMode_FNC1_SECOND_POSITION_,  },
    { "characterCountBitsForVersions_", NULL, 0x12, "[I", NULL,  },
    { "bits_", NULL, 0x12, "I", NULL,  },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfQrcodeMode = { "Mode", "com.itextpdf.text.pdf.qrcode", NULL, 0x11, 6, methods, 12, fields, 0, NULL};
  return &_ComItextpdfTextPdfQrcodeMode;
}

@end
