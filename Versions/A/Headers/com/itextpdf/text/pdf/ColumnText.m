//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/ColumnText.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/ColumnText.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/List.h"
#include "com/itextpdf/text/ListBody.h"
#include "com/itextpdf/text/ListItem.h"
#include "com/itextpdf/text/ListLabel.h"
#include "com/itextpdf/text/Paragraph.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/TabSettings.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/log/LoggerFactory.h"
#include "com/itextpdf/text/pdf/BidiLine.h"
#include "com/itextpdf/text/pdf/ColumnText.h"
#include "com/itextpdf/text/pdf/FloatLayout.h"
#include "com/itextpdf/text/pdf/PdfChunk.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDocument.h"
#include "com/itextpdf/text/pdf/PdfFont.h"
#include "com/itextpdf/text/pdf/PdfLine.h"
#include "com/itextpdf/text/pdf/PdfPCell.h"
#include "com/itextpdf/text/pdf/PdfPRow.h"
#include "com/itextpdf/text/pdf/PdfPTable.h"
#include "com/itextpdf/text/pdf/PdfPTableBody.h"
#include "com/itextpdf/text/pdf/PdfPTableEvent.h"
#include "com/itextpdf/text/pdf/PdfPTableEventAfterSplit.h"
#include "com/itextpdf/text/pdf/PdfPTableEventSplit.h"
#include "com/itextpdf/text/pdf/PdfPTableFooter.h"
#include "com/itextpdf/text/pdf/PdfPTableHeader.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/draw/DrawInterface.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"
#include "com/itextpdf/text/pdf/languages/ArabicLigaturizer.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Stack.h"


#line 86
@implementation ComItextpdfTextPdfColumnText


#line 283
- (instancetype)initWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  if (self = [super init]) {
    LOGGER_ =
#line 88
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfColumnText class]]];
    runDirection_ =
#line 138
    ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
    alignment_ =
#line 172
    ComItextpdfTextElement_ALIGN_LEFT;
    currentLeading_ =
#line 194
    16;
    fixedLeading_ =
#line 197
    16;
    multipliedLeading_ =
#line 200
    0;
    indent_ =
#line 211
    0;
    followingIndent_ =
#line 214
    0;
    rightIndent_ =
#line 217
    0;
    extraParagraphSpace_ =
#line 220
    0;
    rectangularWidth_ =
#line 223
    -1;
    rectangularMode_ =
#line 225
    NO;
    spaceCharRatio_ =
#line 227
    ComItextpdfTextPdfColumnText_GLOBAL_SPACE_CHAR_RATIO;
    lastWasNewline_ =
#line 229
    YES;
    repeatFirstLineIndent_ =
#line 230
    YES;
    firstLineYDone_ =
#line 236
    NO;
    arabicOptions_ =
#line 239
    0;
    composite_ =
#line 243
    NO;
    listIdx_ =
#line 249
    0;
    rowIdx_ =
#line 254
    0;
    splittedRow_ =
#line 260
    -1;
    useAscender_ =
#line 265
    NO;
    adjustFirstLine_ =
#line 270
    YES;
    inheritGraphicState_ =
#line 275
    NO;
    
#line 284
    self->canvas_ = canvas;
  }
  return self;
}


#line 293
+ (ComItextpdfTextPdfColumnText *)duplicateWithComItextpdfTextPdfColumnText:(ComItextpdfTextPdfColumnText *)org {
  
#line 294
  ComItextpdfTextPdfColumnText *ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
  (void) [ct setACopyWithComItextpdfTextPdfColumnText:org];
  return ct;
}


#line 305
- (ComItextpdfTextPdfColumnText *)setACopyWithComItextpdfTextPdfColumnText:(ComItextpdfTextPdfColumnText *)org {
  
#line 306
  [self setSimpleVarsWithComItextpdfTextPdfColumnText:org];
  if (((ComItextpdfTextPdfColumnText *) nil_chk(org))->bidiLine_ != nil)
#line 308
  bidiLine_ = [[ComItextpdfTextPdfBidiLine alloc] initWithComItextpdfTextPdfBidiLine:org->bidiLine_];
  return self;
}


#line 312
- (void)setSimpleVarsWithComItextpdfTextPdfColumnText:(ComItextpdfTextPdfColumnText *)org {
  
#line 313
  maxY_ = ((ComItextpdfTextPdfColumnText *) nil_chk(org))->maxY_;
  minY_ = org->minY_;
  alignment_ = org->alignment_;
  leftWall_ = nil;
  if (org->leftWall_ != nil)
#line 318
  leftWall_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:org->leftWall_];
  rightWall_ = nil;
  if (org->rightWall_ != nil)
#line 321
  rightWall_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:org->rightWall_];
  yLine_ = org->yLine_;
  currentLeading_ = org->currentLeading_;
  fixedLeading_ = org->fixedLeading_;
  multipliedLeading_ = org->multipliedLeading_;
  canvas_ = org->canvas_;
  canvases_ = org->canvases_;
  lineStatus_ = org->lineStatus_;
  indent_ = org->indent_;
  followingIndent_ = org->followingIndent_;
  rightIndent_ = org->rightIndent_;
  extraParagraphSpace_ = org->extraParagraphSpace_;
  rectangularWidth_ = org->rectangularWidth_;
  rectangularMode_ = org->rectangularMode_;
  spaceCharRatio_ = org->spaceCharRatio_;
  lastWasNewline_ = org->lastWasNewline_;
  repeatFirstLineIndent_ = org->repeatFirstLineIndent_;
  linesWritten_ = org->linesWritten_;
  arabicOptions_ = org->arabicOptions_;
  runDirection_ = org->runDirection_;
  descender_ = org->descender_;
  composite_ = org->composite_;
  splittedRow_ = org->splittedRow_;
  if (org->composite_) {
    compositeElements_ = [[JavaUtilLinkedList alloc] init];
    for (id<ComItextpdfTextElement> __strong element in org->compositeElements_) {
      if ([(id) element isKindOfClass:[ComItextpdfTextPdfPdfPTable class]]) {
        [compositeElements_ addWithId:[[ComItextpdfTextPdfPdfPTable alloc] initWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *) check_class_cast(element, [ComItextpdfTextPdfPdfPTable class])]];
      }
      else {
        
#line 350
        [compositeElements_ addWithId:element];
      }
    }
    if (org->compositeColumn_ != nil)
#line 354
    compositeColumn_ = [ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:org->compositeColumn_];
  }
  listIdx_ = org->listIdx_;
  rowIdx_ = org->rowIdx_;
  firstLineY_ = org->firstLineY_;
  leftX_ = org->leftX_;
  rightX_ = org->rightX_;
  firstLineYDone_ = org->firstLineYDone_;
  waitPhrase_ = org->waitPhrase_;
  useAscender_ = org->useAscender_;
  filledWidth_ = org->filledWidth_;
  adjustFirstLine_ = org->adjustFirstLine_;
  inheritGraphicState_ = org->inheritGraphicState_;
}


#line 369
- (void)addWaitingPhrase {
  
#line 370
  if (bidiLine_ == nil && waitPhrase_ != nil) {
    bidiLine_ = [[ComItextpdfTextPdfBidiLine alloc] init];
    for (ComItextpdfTextChunk * __strong c in nil_chk([waitPhrase_ getChunks])) {
      [bidiLine_ addChunkWithComItextpdfTextPdfPdfChunk:[[ComItextpdfTextPdfPdfChunk alloc] initWithComItextpdfTextChunk:c withComItextpdfTextPdfPdfAction:nil withComItextpdfTextTabSettings:[waitPhrase_ getTabSettings]]];
    }
    waitPhrase_ = nil;
  }
}


#line 385
- (void)addTextWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  
#line 386
  if (phrase == nil || composite_)
#line 387
  return;
  [self addWaitingPhrase];
  if (bidiLine_ == nil) {
    waitPhrase_ = phrase;
    return;
  }
  for (id __strong element in nil_chk([((ComItextpdfTextPhrase *) nil_chk(phrase)) getChunks])) {
    [((ComItextpdfTextPdfBidiLine *) nil_chk(bidiLine_)) addChunkWithComItextpdfTextPdfPdfChunk:[[ComItextpdfTextPdfPdfChunk alloc] initWithComItextpdfTextChunk:(ComItextpdfTextChunk *) check_class_cast(element, [ComItextpdfTextChunk class]) withComItextpdfTextPdfPdfAction:nil withComItextpdfTextTabSettings:[phrase getTabSettings]]];
  }
}


#line 404
- (void)setTextWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  
#line 405
  bidiLine_ = nil;
  composite_ = NO;
  compositeColumn_ = nil;
  compositeElements_ = nil;
  listIdx_ = 0;
  rowIdx_ = 0;
  splittedRow_ = -1;
  waitPhrase_ = phrase;
}


#line 421
- (void)addTextWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk {
  
#line 422
  if (chunk == nil || composite_)
#line 423
  return;
  [self addTextWithComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithComItextpdfTextChunk:chunk]];
}


#line 437
- (void)addElementWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element {
  
#line 438
  if (element == nil)
#line 439
  return;
  if ([(id) element isKindOfClass:[ComItextpdfTextImage class]]) {
    ComItextpdfTextImage *img = (ComItextpdfTextImage *) check_class_cast(element, [ComItextpdfTextImage class]);
    ComItextpdfTextPdfPdfPTable *t = [[ComItextpdfTextPdfPdfPTable alloc] initWithInt:1];
    jfloat w = [((ComItextpdfTextImage *) nil_chk(img)) getWidthPercentage];
    if (w == 0) {
      [t setTotalWidthWithFloat:[img getScaledWidth]];
      [t setLockedWidthWithBoolean:YES];
    }
    else
#line 449
    [t setWidthPercentageWithFloat:w];
    [t setSpacingAfterWithFloat:[img getSpacingAfter]];
    [t setSpacingBeforeWithFloat:[img getSpacingBefore]];
    switch ([img getAlignment]) {
      case ComItextpdfTextImage_LEFT:
      [t setHorizontalAlignmentWithInt:ComItextpdfTextElement_ALIGN_LEFT];
      break;
      case ComItextpdfTextImage_RIGHT:
      [t setHorizontalAlignmentWithInt:ComItextpdfTextElement_ALIGN_RIGHT];
      break;
      default:
      [t setHorizontalAlignmentWithInt:ComItextpdfTextElement_ALIGN_CENTER];
      break;
    }
    ComItextpdfTextPdfPdfPCell *c = [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextImage:img withBoolean:YES];
    [c setPaddingWithFloat:0];
    [c setBorderWithInt:[img getBorder]];
    [c setBorderColorWithComItextpdfTextBaseColor:[img getBorderColor]];
    [c setBorderWidthWithFloat:[img getBorderWidth]];
    [c setBackgroundColorWithComItextpdfTextBaseColor:[img getBackgroundColor]];
    (void) [t addCellWithComItextpdfTextPdfPdfPCell:c];
    element = t;
  }
  if ([((id<ComItextpdfTextElement>) nil_chk(element)) type] == ComItextpdfTextElement_CHUNK) {
    element = [[ComItextpdfTextParagraph alloc] initWithComItextpdfTextChunk:(ComItextpdfTextChunk *) check_class_cast(element, [ComItextpdfTextChunk class])];
  }
  else if ([element type] == ComItextpdfTextElement_PHRASE) {
    element = [[ComItextpdfTextParagraph alloc] initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *) check_class_cast(element, [ComItextpdfTextPhrase class])];
  }
  if ([element type] != ComItextpdfTextElement_PARAGRAPH && [element type] != ComItextpdfTextElement_LIST && [element type] != ComItextpdfTextElement_PTABLE && [element type] != ComItextpdfTextElement_YMARK && [element type] != ComItextpdfTextElement_DIV)
#line 479
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"element.not.allowed" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (!composite_) {
    composite_ = YES;
    compositeElements_ = [[JavaUtilLinkedList alloc] init];
    bidiLine_ = nil;
    waitPhrase_ = nil;
  }
  if ([element type] == ComItextpdfTextElement_PARAGRAPH) {
    ComItextpdfTextParagraph *p = (ComItextpdfTextParagraph *) check_class_cast(element, [ComItextpdfTextParagraph class]);
    [((JavaUtilLinkedList *) nil_chk(compositeElements_)) addAllWithJavaUtilCollection:[p breakUp]];
    return;
  }
  [((JavaUtilLinkedList *) nil_chk(compositeElements_)) addWithId:element];
}


#line 494
+ (jboolean)isAllowedElementWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element {
  
#line 495
  jint type = [((id<ComItextpdfTextElement>) nil_chk(element)) type];
  if (type == ComItextpdfTextElement_CHUNK || type == ComItextpdfTextElement_PHRASE || type == ComItextpdfTextElement_DIV ||
#line 497
  type == ComItextpdfTextElement_PARAGRAPH || type == ComItextpdfTextElement_LIST ||
#line 498
  type == ComItextpdfTextElement_YMARK || type == ComItextpdfTextElement_PTABLE) return YES;
  if ([(id) element isKindOfClass:[ComItextpdfTextImage class]]) return YES;
  return NO;
}


#line 513
- (JavaUtilArrayList *)convertColumnWithFloatArray:(IOSFloatArray *)cLine {
  
#line 514
  if (((IOSFloatArray *) nil_chk(cLine))->size_ < 4)
#line 515
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"no.valid.column.line.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  JavaUtilArrayList *cc = [[JavaUtilArrayList alloc] init];
  for (jint k = 0; k < cLine->size_ - 2; k += 2) {
    jfloat x1 = IOSFloatArray_Get(cLine, k);
    jfloat y1 = IOSFloatArray_Get(cLine, k + 1);
    jfloat x2 = IOSFloatArray_Get(cLine, k + 2);
    jfloat y2 = IOSFloatArray_Get(cLine, k + 3);
    if (y1 == y2)
#line 523
    continue;
    
#line 525
    jfloat a = (x1 - x2) / (y1 - y2);
    jfloat b = x1 - a * y1;
    IOSFloatArray *r = [IOSFloatArray arrayWithLength:4];
    *IOSFloatArray_GetRef(r, 0) = [JavaLangMath minWithFloat:y1 withFloat:y2];
    *IOSFloatArray_GetRef(r, 1) = [JavaLangMath maxWithFloat:y1 withFloat:y2];
    *IOSFloatArray_GetRef(r, 2) = a;
    *IOSFloatArray_GetRef(r, 3) = b;
    [cc addWithId:r];
    maxY_ = [JavaLangMath maxWithFloat:maxY_ withFloat:IOSFloatArray_Get(r, 1)];
    minY_ = [JavaLangMath minWithFloat:minY_ withFloat:IOSFloatArray_Get(r, 0)];
  }
  if ([cc isEmpty])
#line 537
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"no.valid.column.line.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  return cc;
}


#line 548
- (jfloat)findLimitsPointWithJavaUtilArrayList:(JavaUtilArrayList *)wall {
  
#line 549
  lineStatus_ = ComItextpdfTextPdfColumnText_LINE_STATUS_OK;
  if (yLine_ < minY_ || yLine_ > maxY_) {
    lineStatus_ = ComItextpdfTextPdfColumnText_LINE_STATUS_OFFLIMITS;
    return 0;
  }
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(wall)) size]; ++k) {
    IOSFloatArray *r = [wall getWithInt:k];
    if (yLine_ < IOSFloatArray_Get(nil_chk(r), 0) || yLine_ > IOSFloatArray_Get(r, 1))
#line 557
    continue;
    return IOSFloatArray_Get(r, 2) * yLine_ + IOSFloatArray_Get(r, 3);
  }
  lineStatus_ = ComItextpdfTextPdfColumnText_LINE_STATUS_NOLINE;
  return 0;
}


#line 570
- (IOSFloatArray *)findLimitsOneLine {
  
#line 571
  jfloat x1 = [self findLimitsPointWithJavaUtilArrayList:leftWall_];
  if (lineStatus_ == ComItextpdfTextPdfColumnText_LINE_STATUS_OFFLIMITS || lineStatus_ == ComItextpdfTextPdfColumnText_LINE_STATUS_NOLINE)
#line 573
  return nil;
  jfloat x2 = [self findLimitsPointWithJavaUtilArrayList:rightWall_];
  if (lineStatus_ == ComItextpdfTextPdfColumnText_LINE_STATUS_NOLINE)
#line 576
  return nil;
  return [IOSFloatArray arrayWithFloats:(jfloat[]){ x1, x2 } count:2];
}


#line 587
- (IOSFloatArray *)findLimitsTwoLines {
  
#line 588
  jboolean repeat = NO;
  for (; ; ) {
    if (repeat && currentLeading_ == 0)
#line 591
    return nil;
    repeat = YES;
    IOSFloatArray *x1 = [self findLimitsOneLine];
    if (lineStatus_ == ComItextpdfTextPdfColumnText_LINE_STATUS_OFFLIMITS)
#line 595
    return nil;
    yLine_ -= currentLeading_;
    if (lineStatus_ == ComItextpdfTextPdfColumnText_LINE_STATUS_NOLINE) {
      continue;
    }
    IOSFloatArray *x2 = [self findLimitsOneLine];
    if (lineStatus_ == ComItextpdfTextPdfColumnText_LINE_STATUS_OFFLIMITS)
#line 602
    return nil;
    if (lineStatus_ == ComItextpdfTextPdfColumnText_LINE_STATUS_NOLINE) {
      yLine_ -= currentLeading_;
      continue;
    }
    if (IOSFloatArray_Get(nil_chk(x1), 0) >= IOSFloatArray_Get(nil_chk(x2), 1) || IOSFloatArray_Get(x2, 0) >= IOSFloatArray_Get(x1, 1))
#line 608
    continue;
    return [IOSFloatArray arrayWithFloats:(jfloat[]){ IOSFloatArray_Get(x1, 0), IOSFloatArray_Get(x1, 1), IOSFloatArray_Get(x2, 0), IOSFloatArray_Get(x2, 1) } count:4];
  }
}


#line 621
- (void)setColumnsWithFloatArray:(IOSFloatArray *)leftLine
                  withFloatArray:(IOSFloatArray *)rightLine {
  
#line 622
  maxY_ = -10e20f;
  minY_ = 10e20f;
  [self setYLineWithFloat:[JavaLangMath maxWithFloat:IOSFloatArray_Get(nil_chk(leftLine), 1) withFloat:IOSFloatArray_Get(leftLine, leftLine->size_ - 1)]];
  rightWall_ = [self convertColumnWithFloatArray:rightLine];
  leftWall_ = [self convertColumnWithFloatArray:leftLine];
  rectangularWidth_ = -1;
  rectangularMode_ = NO;
}


#line 642
- (void)setSimpleColumnWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase
                                       withFloat:(jfloat)llx
                                       withFloat:(jfloat)lly
                                       withFloat:(jfloat)urx
                                       withFloat:(jfloat)ury
                                       withFloat:(jfloat)leading
                                         withInt:(jint)alignment {
  
#line 643
  [self addTextWithComItextpdfTextPhrase:phrase];
  [self setSimpleColumnWithFloat:llx withFloat:lly withFloat:urx withFloat:ury withFloat:leading withInt:alignment];
}


#line 657
- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury
                       withFloat:(jfloat)leading
                         withInt:(jint)alignment {
  
#line 658
  [self setLeadingWithFloat:leading];
  self->alignment_ = alignment;
  [self setSimpleColumnWithFloat:llx withFloat:lly withFloat:urx withFloat:ury];
}


#line 671
- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury {
  
#line 672
  leftX_ = [JavaLangMath minWithFloat:llx withFloat:urx];
  maxY_ = [JavaLangMath maxWithFloat:lly withFloat:ury];
  minY_ = [JavaLangMath minWithFloat:lly withFloat:ury];
  rightX_ = [JavaLangMath maxWithFloat:llx withFloat:urx];
  yLine_ = maxY_;
  rectangularWidth_ = rightX_ - leftX_;
  if (rectangularWidth_ < 0)
#line 679
  rectangularWidth_ = 0;
  rectangularMode_ = YES;
}


#line 687
- (void)setSimpleColumnWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rect {
  
#line 688
  [self setSimpleColumnWithFloat:[((ComItextpdfTextRectangle *) nil_chk(rect)) getLeft] withFloat:[rect getBottom] withFloat:[rect getRight] withFloat:[rect getTop]];
}


#line 696
- (void)setLeadingWithFloat:(jfloat)leading {
  
#line 697
  fixedLeading_ = leading;
  multipliedLeading_ = 0;
}


#line 709
- (void)setLeadingWithFloat:(jfloat)fixedLeading
                  withFloat:(jfloat)multipliedLeading {
  
#line 710
  self->fixedLeading_ = fixedLeading;
  self->multipliedLeading_ = multipliedLeading;
}


#line 719
- (jfloat)getLeading {
  
#line 720
  return fixedLeading_;
}


#line 728
- (jfloat)getMultipliedLeading {
  
#line 729
  return multipliedLeading_;
}


#line 737
- (void)setYLineWithFloat:(jfloat)yLine {
  
#line 738
  self->yLine_ = yLine;
}


#line 746
- (jfloat)getYLine {
  
#line 747
  return yLine_;
}


#line 753
- (jint)getRowsDrawn {
  
#line 754
  return rowIdx_;
}


#line 762
- (void)setAlignmentWithInt:(jint)alignment {
  
#line 763
  self->alignment_ = alignment;
}


#line 771
- (jint)getAlignment {
  
#line 772
  return alignment_;
}


#line 780
- (void)setIndentWithFloat:(jfloat)indent {
  
#line 781
  [self setIndentWithFloat:indent withBoolean:YES];
}


#line 789
- (void)setIndentWithFloat:(jfloat)indent
               withBoolean:(jboolean)repeatFirstLineIndent {
  
#line 790
  self->indent_ = indent;
  lastWasNewline_ = YES;
  self->repeatFirstLineIndent_ = repeatFirstLineIndent;
}


#line 800
- (jfloat)getIndent {
  
#line 801
  return indent_;
}


#line 809
- (void)setFollowingIndentWithFloat:(jfloat)indent {
  
#line 810
  self->followingIndent_ = indent;
  lastWasNewline_ = YES;
}


#line 819
- (jfloat)getFollowingIndent {
  
#line 820
  return followingIndent_;
}


#line 828
- (void)setRightIndentWithFloat:(jfloat)indent {
  
#line 829
  self->rightIndent_ = indent;
  lastWasNewline_ = YES;
}


#line 838
- (jfloat)getRightIndent {
  
#line 839
  return rightIndent_;
}


#line 847
- (jfloat)getCurrentLeading {
  
#line 848
  return currentLeading_;
}


#line 851
- (jboolean)getInheritGraphicState {
  
#line 852
  return inheritGraphicState_;
}


#line 855
- (void)setInheritGraphicStateWithBoolean:(jboolean)inheritGraphicState {
  
#line 856
  self->inheritGraphicState_ = inheritGraphicState;
}


#line 866
- (jint)go {
  
#line 867
  return [self goWithBoolean:NO];
}


#line 877
- (jint)goWithBoolean:(jboolean)simulate {
  
#line 878
  return [self goWithBoolean:simulate withComItextpdfTextPdfInterfacesIAccessibleElement:nil];
}


#line 881
- (jint)goWithBoolean:(jboolean)simulate
withComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)elementToGo {
  
#line 882
  if (composite_)
#line 883
  return [self goCompositeWithBoolean:simulate];
  
#line 885
  ComItextpdfTextListBody *lBody = nil;
  if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_] && [(id) elementToGo isKindOfClass:[ComItextpdfTextListItem class]]) {
    lBody = [((ComItextpdfTextListItem *) nil_chk(((ComItextpdfTextListItem *) check_class_cast(elementToGo, [ComItextpdfTextListItem class])))) getListBody];
  }
  
#line 890
  [self addWaitingPhrase];
  if (bidiLine_ == nil)
#line 892
  return ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
  descender_ = 0;
  linesWritten_ = 0;
  lastX_ = 0;
  jboolean dirty = NO;
  jfloat ratio = spaceCharRatio_;
  IOSObjectArray *currentValues = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[NSObject class]]];
  ComItextpdfTextPdfPdfFont *currentFont = nil;
  JavaLangFloat *lastBaseFactor = [[JavaLangFloat alloc] initWithFloat:0];
  IOSObjectArray_Set(currentValues, 1, lastBaseFactor);
  ComItextpdfTextPdfPdfDocument *pdf = nil;
  ComItextpdfTextPdfPdfContentByte *graphics = nil;
  ComItextpdfTextPdfPdfContentByte *text = nil;
  firstLineY_ = JavaLangFloat_NaN;
  jint localRunDirection = ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
  if (runDirection_ != ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT)
#line 908
  localRunDirection = runDirection_;
  if (canvas_ != nil) {
    graphics = canvas_;
    pdf = [canvas_ getPdfDocument];
    if (![ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_])
#line 913
    text = [canvas_ getDuplicateWithBoolean:inheritGraphicState_];
    else
#line 915
    text = canvas_;
  }
  else if (!simulate)
#line 918
  @throw [[JavaLangNullPointerException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"columntext.go.with.simulate.eq.eq.false.and.text.eq.eq.null" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (!simulate) {
    if (ratio == ComItextpdfTextPdfColumnText_GLOBAL_SPACE_CHAR_RATIO)
#line 921
    ratio = [((ComItextpdfTextPdfPdfWriter *) nil_chk([((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) getPdfWriter])) getSpaceCharRatio];
    else if (ratio < 0.001f)
#line 923
    ratio = 0.001f;
  }
  if (!rectangularMode_) {
    jfloat max = 0;
    for (ComItextpdfTextPdfPdfChunk * __strong c in nil_chk(((ComItextpdfTextPdfBidiLine *) nil_chk(bidiLine_))->chunks_)) {
      max = [JavaLangMath maxWithFloat:max withFloat:[((ComItextpdfTextPdfPdfChunk *) nil_chk(c)) height]];
    }
    currentLeading_ = fixedLeading_ + max * multipliedLeading_;
  }
  jfloat firstIndent = 0;
  ComItextpdfTextPdfPdfLine *line;
  jfloat x1;
  jint status = 0;
  while (YES) {
    firstIndent = lastWasNewline_ ? indent_ : followingIndent_;
    if (rectangularMode_) {
      if (rectangularWidth_ <= firstIndent + rightIndent_) {
        status = ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
        if ([((ComItextpdfTextPdfBidiLine *) nil_chk(bidiLine_)) isEmpty])
#line 942
        status |= ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
        break;
      }
      if ([((ComItextpdfTextPdfBidiLine *) nil_chk(bidiLine_)) isEmpty]) {
        status = ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
        break;
      }
      line = [bidiLine_ processLineWithFloat:leftX_ withFloat:rectangularWidth_ - firstIndent - rightIndent_ withInt:alignment_ withInt:localRunDirection withInt:arabicOptions_ withFloat:minY_ withFloat:yLine_ withFloat:descender_];
      if (line == nil) {
        status = ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
        break;
      }
      IOSFloatArray *maxSize = [((ComItextpdfTextPdfPdfLine *) nil_chk(line)) getMaxSizeWithFloat:fixedLeading_ withFloat:multipliedLeading_];
      if ([self isUseAscender] && [JavaLangFloat isNaNWithFloat:firstLineY_])
#line 956
      currentLeading_ = [line getAscender];
      else
#line 958
      currentLeading_ = [JavaLangMath maxWithFloat:IOSFloatArray_Get(nil_chk(maxSize), 0) withFloat:IOSFloatArray_Get(maxSize, 1) - descender_];
      if (yLine_ > maxY_ || yLine_ - currentLeading_ < minY_) {
        status = ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
        [bidiLine_ restore];
        break;
      }
      yLine_ -= currentLeading_;
      if (!simulate && !dirty) {
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) beginText];
        dirty = YES;
      }
      if ([JavaLangFloat isNaNWithFloat:firstLineY_])
#line 970
      firstLineY_ = yLine_;
      [self updateFilledWidthWithFloat:rectangularWidth_ - [line widthLeft]];
      x1 = leftX_;
    }
    else {
      jfloat yTemp = yLine_ - currentLeading_;
      IOSFloatArray *xx = [self findLimitsTwoLines];
      if (xx == nil) {
        status = ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
        if ([((ComItextpdfTextPdfBidiLine *) nil_chk(bidiLine_)) isEmpty])
#line 980
        status |= ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
        yLine_ = yTemp;
        break;
      }
      if ([((ComItextpdfTextPdfBidiLine *) nil_chk(bidiLine_)) isEmpty]) {
        status = ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
        yLine_ = yTemp;
        break;
      }
      x1 = [JavaLangMath maxWithFloat:IOSFloatArray_Get(nil_chk(xx), 0) withFloat:IOSFloatArray_Get(xx, 2)];
      jfloat x2 = [JavaLangMath minWithFloat:IOSFloatArray_Get(xx, 1) withFloat:IOSFloatArray_Get(xx, 3)];
      if (x2 - x1 <= firstIndent + rightIndent_)
#line 992
      continue;
      if (!simulate && !dirty) {
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) beginText];
        dirty = YES;
      }
      line = [bidiLine_ processLineWithFloat:x1 withFloat:x2 - x1 - firstIndent - rightIndent_ withInt:alignment_ withInt:localRunDirection withInt:arabicOptions_ withFloat:minY_ withFloat:yLine_ withFloat:descender_];
      if (line == nil) {
        status = ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
        yLine_ = yTemp;
        break;
      }
    }
    if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_] && [(id) elementToGo isKindOfClass:[ComItextpdfTextListItem class]]) {
      if (![JavaLangFloat isNaNWithFloat:firstLineY_] && !firstLineYDone_) {
        if (!simulate) {
          ComItextpdfTextListLabel *lbl = [((ComItextpdfTextListItem *) nil_chk(((ComItextpdfTextListItem *) check_class_cast(elementToGo, [ComItextpdfTextListItem class])))) getListLabel];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:lbl];
          ComItextpdfTextChunk *symbol = [[ComItextpdfTextChunk alloc] initWithComItextpdfTextChunk:[((ComItextpdfTextListItem *) nil_chk(((ComItextpdfTextListItem *) check_class_cast(elementToGo, [ComItextpdfTextListItem class])))) getListSymbol]];
          [symbol setRoleWithComItextpdfTextPdfPdfName:nil];
          [ComItextpdfTextPdfColumnText showTextAlignedWithComItextpdfTextPdfPdfContentByte:canvas_ withInt:ComItextpdfTextElement_ALIGN_LEFT withComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithComItextpdfTextChunk:symbol] withFloat:leftX_ + [((ComItextpdfTextListLabel *) nil_chk(lbl)) getIndentation] withFloat:firstLineY_ withFloat:0];
          [canvas_ closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:lbl];
        }
        firstLineYDone_ = YES;
      }
    }
    if (!simulate) {
      if (lBody != nil) {
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:lBody];
        lBody = nil;
      }
      IOSObjectArray_Set(currentValues, 0, currentFont);
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) setTextMatrixWithFloat:x1 + ([((ComItextpdfTextPdfPdfLine *) nil_chk(line)) isRTL] ? rightIndent_ : firstIndent) + [line indentLeft] withFloat:yLine_];
      lastX_ = [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf)) writeLineToContentWithComItextpdfTextPdfPdfLine:line withComItextpdfTextPdfPdfContentByte:text withComItextpdfTextPdfPdfContentByte:graphics withNSObjectArray:currentValues withFloat:ratio];
      currentFont = (ComItextpdfTextPdfPdfFont *) check_class_cast(IOSObjectArray_Get(currentValues, 0), [ComItextpdfTextPdfPdfFont class]);
    }
    lastWasNewline_ = (repeatFirstLineIndent_ && [((ComItextpdfTextPdfPdfLine *) nil_chk(line)) isNewlineSplit]);
    yLine_ -= [((ComItextpdfTextPdfPdfLine *) nil_chk(line)) isNewlineSplit] ? extraParagraphSpace_ : 0;
    ++linesWritten_;
    descender_ = [line getDescender];
  }
  if (dirty) {
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) endText];
    if (canvas_ != text)
#line 1035
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) addWithComItextpdfTextPdfPdfContentByte:text];
  }
  return status;
}


#line 1045
- (jfloat)getExtraParagraphSpace {
  
#line 1046
  return extraParagraphSpace_;
}


#line 1054
- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace {
  
#line 1055
  self->extraParagraphSpace_ = extraParagraphSpace;
}


#line 1062
- (void)clearChunks {
  
#line 1063
  if (bidiLine_ != nil)
#line 1064
  [bidiLine_ clearChunks];
}


#line 1072
- (jfloat)getSpaceCharRatio {
  
#line 1073
  return spaceCharRatio_;
}


#line 1086
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio {
  
#line 1087
  self->spaceCharRatio_ = spaceCharRatio;
}


#line 1095
- (void)setRunDirectionWithInt:(jint)runDirection {
  
#line 1096
  if (runDirection < ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT || runDirection > ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL)
#line 1097
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.run.direction.1" withInt:runDirection]];
  self->runDirection_ = runDirection;
}


#line 1106
- (jint)getRunDirection {
  
#line 1107
  return runDirection_;
}


#line 1115
- (jint)getLinesWritten {
  
#line 1116
  return self->linesWritten_;
}


#line 1124
- (jfloat)getLastX {
  
#line 1125
  return lastX_;
}


#line 1133
- (jint)getArabicOptions {
  
#line 1134
  return self->arabicOptions_;
}


#line 1143
- (void)setArabicOptionsWithInt:(jint)arabicOptions {
  
#line 1144
  self->arabicOptions_ = arabicOptions;
}


#line 1152
- (jfloat)getDescender {
  
#line 1153
  return descender_;
}


#line 1165
+ (jfloat)getWidthWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase
                                    withInt:(jint)runDirection
                                    withInt:(jint)arabicOptions {
  
#line 1166
  ComItextpdfTextPdfColumnText *ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
  [ct addTextWithComItextpdfTextPhrase:phrase];
  [ct addWaitingPhrase];
  ComItextpdfTextPdfPdfLine *line = [((ComItextpdfTextPdfBidiLine *) nil_chk(ct->bidiLine_)) processLineWithFloat:0 withFloat:20000 withInt:ComItextpdfTextElement_ALIGN_LEFT withInt:runDirection withInt:arabicOptions withFloat:0 withFloat:0 withFloat:0];
  if (line == nil)
#line 1171
  return 0;
  else
#line 1173
  return 20000 - [line widthLeft];
}


#line 1183
+ (jfloat)getWidthWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  
#line 1184
  return [ComItextpdfTextPdfColumnText getWidthWithComItextpdfTextPhrase:phrase withInt:ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI withInt:0];
}


#line 1199
+ (void)showTextAlignedWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas
                                                    withInt:(jint)alignment
                                  withComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase
                                                  withFloat:(jfloat)x
                                                  withFloat:(jfloat)y
                                                  withFloat:(jfloat)rotation
                                                    withInt:(jint)runDirection
                                                    withInt:(jint)arabicOptions {
  
#line 1200
  if (alignment != ComItextpdfTextElement_ALIGN_LEFT && alignment != ComItextpdfTextElement_ALIGN_CENTER &&
#line 1201
  alignment != ComItextpdfTextElement_ALIGN_RIGHT)
#line 1202
  alignment = ComItextpdfTextElement_ALIGN_LEFT;
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas)) saveState];
  ComItextpdfTextPdfColumnText *ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:canvas];
  jfloat lly = -1;
  jfloat ury = 2;
  jfloat llx;
  jfloat urx;
  switch (alignment) {
    case ComItextpdfTextElement_ALIGN_LEFT:
    llx = 0;
    urx = 20000;
    break;
    case ComItextpdfTextElement_ALIGN_RIGHT:
    llx = -20000;
    urx = 0;
    break;
    default:
    llx = -20000;
    urx = 20000;
    break;
  }
  if (rotation == 0) {
    llx += x;
    lly += y;
    urx += x;
    ury += y;
  }
  else {
    jdouble alpha = rotation * JavaLangMath_PI / 180.0;
    jfloat cos = (jfloat) [JavaLangMath cosWithDouble:alpha];
    jfloat sin = (jfloat) [JavaLangMath sinWithDouble:alpha];
    [canvas concatCTMWithFloat:cos withFloat:sin withFloat:-sin withFloat:cos withFloat:x withFloat:y];
  }
  [ct setSimpleColumnWithComItextpdfTextPhrase:phrase withFloat:llx withFloat:lly withFloat:urx withFloat:ury withFloat:2 withInt:alignment];
  if (runDirection == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL) {
    if (alignment == ComItextpdfTextElement_ALIGN_LEFT)
#line 1238
    alignment = ComItextpdfTextElement_ALIGN_RIGHT;
    else if (alignment == ComItextpdfTextElement_ALIGN_RIGHT)
#line 1240
    alignment = ComItextpdfTextElement_ALIGN_LEFT;
  }
  [ct setAlignmentWithInt:alignment];
  [ct setArabicOptionsWithInt:arabicOptions];
  [ct setRunDirectionWithInt:runDirection];
  @try {
    [ct go];
  }
  @catch (ComItextpdfTextDocumentException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
  [canvas restoreState];
}


#line 1264
+ (void)showTextAlignedWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas
                                                    withInt:(jint)alignment
                                  withComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase
                                                  withFloat:(jfloat)x
                                                  withFloat:(jfloat)y
                                                  withFloat:(jfloat)rotation {
  
#line 1265
  [ComItextpdfTextPdfColumnText showTextAlignedWithComItextpdfTextPdfPdfContentByte:canvas withInt:alignment withComItextpdfTextPhrase:phrase withFloat:x withFloat:y withFloat:rotation withInt:ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI withInt:0];
}


#line 1277
+ (jfloat)fitTextWithComItextpdfTextFont:(ComItextpdfTextFont *)font
                            withNSString:(NSString *)text
            withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rect
                               withFloat:(jfloat)maxFontSize
                                 withInt:(jint)runDirection {
  
#line 1278
  @try {
    ComItextpdfTextPdfColumnText *ct = nil;
    jint status = 0;
    if (maxFontSize <= 0) {
      jint cr = 0;
      jint lf = 0;
      IOSCharArray *t = [((NSString *) nil_chk(text)) toCharArray];
      for (jint k = 0; k < ((IOSCharArray *) nil_chk(t))->size_; ++k) {
        if (IOSCharArray_Get(t, k) == 0x000a)
#line 1287
        ++lf;
        else if (IOSCharArray_Get(t, k) == 0x000d)
#line 1289
        ++cr;
      }
      jint minLines = [JavaLangMath maxWithInt:cr withInt:lf] + 1;
      maxFontSize = [JavaLangMath absWithFloat:[((ComItextpdfTextRectangle *) nil_chk(rect)) getHeight]] / minLines - 0.001f;
    }
    [((ComItextpdfTextFont *) nil_chk(font)) setSizeWithFloat:maxFontSize];
    ComItextpdfTextPhrase *ph = [[ComItextpdfTextPhrase alloc] initWithNSString:text withComItextpdfTextFont:font];
    ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
    [ct setSimpleColumnWithComItextpdfTextPhrase:ph withFloat:[((ComItextpdfTextRectangle *) nil_chk(rect)) getLeft] withFloat:[rect getBottom] withFloat:[rect getRight] withFloat:[rect getTop] withFloat:maxFontSize withInt:ComItextpdfTextElement_ALIGN_LEFT];
    [ct setRunDirectionWithInt:runDirection];
    status = [ct goWithBoolean:YES];
    if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) != 0)
#line 1301
    return maxFontSize;
    jfloat precision = 0.1f;
    jfloat min = 0;
    jfloat max = maxFontSize;
    jfloat size = maxFontSize;
    for (jint k = 0; k < 50; ++k) {
      size = (min + max) / 2;
      ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
      [font setSizeWithFloat:size];
      [ct setSimpleColumnWithComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithNSString:text withComItextpdfTextFont:font] withFloat:[rect getLeft] withFloat:[rect getBottom] withFloat:[rect getRight] withFloat:[rect getTop] withFloat:size withInt:ComItextpdfTextElement_ALIGN_LEFT];
      [ct setRunDirectionWithInt:runDirection];
      status = [ct goWithBoolean:YES];
      if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) != 0) {
        if (max - min < size * precision)
#line 1315
        return size;
        min = size;
      }
      else
#line 1319
      max = size;
    }
    return size;
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 1329
- (jint)goCompositeWithBoolean:(jboolean)simulate {
  
#line 1330
  ComItextpdfTextPdfPdfDocument *pdf = nil;
  if (canvas_ != nil)
#line 1332
  pdf = canvas_->pdf_;
  if (!rectangularMode_)
#line 1334
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"irregular.columns.are.not.supported.in.composite.mode" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  linesWritten_ = 0;
  descender_ = 0;
  jboolean firstPass = YES;
  
#line 1339
  while (YES) {
    {
      
#line 1340
      if ([((JavaUtilLinkedList *) nil_chk(compositeElements_)) isEmpty])
#line 1341
      return ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
      id<ComItextpdfTextElement> element = [compositeElements_ getFirst];
      if ([((id<ComItextpdfTextElement>) nil_chk(element)) type] == ComItextpdfTextElement_PARAGRAPH) {
        ComItextpdfTextParagraph *para = (ComItextpdfTextParagraph *) check_class_cast(element, [ComItextpdfTextParagraph class]);
        jint status = 0;
        for (jint keep = 0; keep < 2; ++keep) {
          jfloat lastY = yLine_;
          jboolean createHere = NO;
          if (compositeColumn_ == nil) {
            compositeColumn_ = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:canvas_];
            [compositeColumn_ setAlignmentWithInt:[para getAlignment]];
            [compositeColumn_ setIndentWithFloat:[para getIndentationLeft] + [para getFirstLineIndent] withBoolean:NO];
            [compositeColumn_ setExtraParagraphSpaceWithFloat:[para getExtraParagraphSpace]];
            [compositeColumn_ setFollowingIndentWithFloat:[para getIndentationLeft]];
            [compositeColumn_ setRightIndentWithFloat:[para getIndentationRight]];
            [compositeColumn_ setLeadingWithFloat:[para getLeading] withFloat:[para getMultipliedLeading]];
            [compositeColumn_ setRunDirectionWithInt:runDirection_];
            [compositeColumn_ setArabicOptionsWithInt:arabicOptions_];
            [compositeColumn_ setSpaceCharRatioWithFloat:spaceCharRatio_];
            [compositeColumn_ addTextWithComItextpdfTextPhrase:para];
            if (!(firstPass && adjustFirstLine_)) {
              yLine_ -= [para getSpacingBefore];
            }
            createHere = YES;
          }
          [((ComItextpdfTextPdfColumnText *) nil_chk(compositeColumn_)) setUseAscenderWithBoolean:(firstPass || descender_ == 0) && adjustFirstLine_ ? useAscender_ : NO];
          [compositeColumn_ setInheritGraphicStateWithBoolean:inheritGraphicState_];
          compositeColumn_->leftX_ = leftX_;
          compositeColumn_->rightX_ = rightX_;
          compositeColumn_->yLine_ = yLine_;
          compositeColumn_->rectangularWidth_ = rectangularWidth_;
          compositeColumn_->rectangularMode_ = rectangularMode_;
          compositeColumn_->minY_ = minY_;
          compositeColumn_->maxY_ = maxY_;
          jboolean keepCandidate = [para getKeepTogether] && createHere && !(firstPass && adjustFirstLine_);
          jboolean s = simulate || (keepCandidate && keep == 0);
          if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_] && !s) {
            [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:para];
          }
          status = [compositeColumn_ goWithBoolean:s];
          if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_] && !s) {
            [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:para];
          }
          lastX_ = [compositeColumn_ getLastX];
          [self updateFilledWidthWithFloat:compositeColumn_->filledWidth_];
          if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0 && keepCandidate) {
            compositeColumn_ = nil;
            yLine_ = lastY;
            return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
          }
          if (simulate || !keepCandidate)
#line 1392
          break;
          if (keep == 0) {
            compositeColumn_ = nil;
            yLine_ = lastY;
          }
        }
        firstPass = NO;
        if ([((ComItextpdfTextPdfColumnText *) nil_chk(compositeColumn_)) getLinesWritten] > 0) {
          yLine_ = compositeColumn_->yLine_;
          linesWritten_ += compositeColumn_->linesWritten_;
          descender_ = compositeColumn_->descender_;
        }
        currentLeading_ = compositeColumn_->currentLeading_;
        if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) != 0) {
          compositeColumn_ = nil;
          (void) [compositeElements_ removeFirst];
          yLine_ -= [para getSpacingAfter];
        }
        if ((status & ComItextpdfTextPdfColumnText_NO_MORE_COLUMN) != 0) {
          return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
        }
      }
      else if ([element type] == ComItextpdfTextElement_LIST) {
        ComItextpdfTextList *list = (ComItextpdfTextList *) check_class_cast(element, [ComItextpdfTextList class]);
        JavaUtilArrayList *items = [list getItems];
        ComItextpdfTextListItem *item = nil;
        jfloat listIndentation = [list getIndentationLeft];
        jint count = 0;
        JavaUtilStack *stack = [[JavaUtilStack alloc] init];
        for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(items)) size]; ++k) {
          id obj = [items getWithInt:k];
          if ([obj isKindOfClass:[ComItextpdfTextListItem class]]) {
            if (count == listIdx_) {
              item = (ComItextpdfTextListItem *) check_class_cast(obj, [ComItextpdfTextListItem class]);
              break;
            }
            else ++count;
          }
          else if ([obj isKindOfClass:[ComItextpdfTextList class]]) {
            (void) [stack pushWithId:[IOSObjectArray arrayWithObjects:(id[]){ list, [JavaLangInteger valueOfWithInt:k], [[JavaLangFloat alloc] initWithFloat:listIndentation] } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
            list = (ComItextpdfTextList *) check_class_cast(obj, [ComItextpdfTextList class]);
            items = [((ComItextpdfTextList *) nil_chk(list)) getItems];
            listIndentation += [list getIndentationLeft];
            k = -1;
            continue;
          }
          if (k == [((JavaUtilArrayList *) nil_chk(items)) size] - 1) {
            if (![stack isEmpty]) {
              IOSObjectArray *objs = [stack pop];
              list = (ComItextpdfTextList *) check_class_cast(IOSObjectArray_Get(nil_chk(objs), 0), [ComItextpdfTextList class]);
              items = [((ComItextpdfTextList *) nil_chk(list)) getItems];
              k = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(objs, 1), [JavaLangInteger class])))) intValue];
              listIndentation = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(objs, 2), [JavaLangFloat class])))) floatValue];
            }
          }
        }
        jint status = 0;
        for (jint keep = 0; keep < 2; ++keep) {
          jfloat lastY = yLine_;
          jboolean createHere = NO;
          if (compositeColumn_ == nil) {
            if (item == nil) {
              listIdx_ = 0;
              (void) [compositeElements_ removeFirst];
              goto continue_main_loop;
            }
            compositeColumn_ = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:canvas_];
            [compositeColumn_ setUseAscenderWithBoolean:(firstPass || descender_ == 0) && adjustFirstLine_ ? useAscender_ : NO];
            [compositeColumn_ setInheritGraphicStateWithBoolean:inheritGraphicState_];
            [compositeColumn_ setAlignmentWithInt:[((ComItextpdfTextListItem *) nil_chk(item)) getAlignment]];
            [compositeColumn_ setIndentWithFloat:[item getIndentationLeft] + listIndentation + [item getFirstLineIndent] withBoolean:NO];
            [compositeColumn_ setExtraParagraphSpaceWithFloat:[item getExtraParagraphSpace]];
            [compositeColumn_ setFollowingIndentWithFloat:[compositeColumn_ getIndent]];
            [compositeColumn_ setRightIndentWithFloat:[item getIndentationRight] + [((ComItextpdfTextList *) nil_chk(list)) getIndentationRight]];
            [compositeColumn_ setLeadingWithFloat:[item getLeading] withFloat:[item getMultipliedLeading]];
            [compositeColumn_ setRunDirectionWithInt:runDirection_];
            [compositeColumn_ setArabicOptionsWithInt:arabicOptions_];
            [compositeColumn_ setSpaceCharRatioWithFloat:spaceCharRatio_];
            [compositeColumn_ addTextWithComItextpdfTextPhrase:item];
            if (!(firstPass && adjustFirstLine_)) {
              yLine_ -= [item getSpacingBefore];
            }
            createHere = YES;
          }
          ((ComItextpdfTextPdfColumnText *) nil_chk(compositeColumn_))->leftX_ = leftX_;
          compositeColumn_->rightX_ = rightX_;
          compositeColumn_->yLine_ = yLine_;
          compositeColumn_->rectangularWidth_ = rectangularWidth_;
          compositeColumn_->rectangularMode_ = rectangularMode_;
          compositeColumn_->minY_ = minY_;
          compositeColumn_->maxY_ = maxY_;
          jboolean keepCandidate = [((ComItextpdfTextListItem *) nil_chk(item)) getKeepTogether] && createHere && !(firstPass && adjustFirstLine_);
          jboolean s = simulate || (keepCandidate && keep == 0);
          if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_] && !s) {
            [((ComItextpdfTextListLabel *) nil_chk([item getListLabel])) setIndentationWithFloat:listIndentation];
            if ([((ComItextpdfTextList *) nil_chk(list)) getFirstItem] == item || (compositeColumn_ != nil && compositeColumn_->bidiLine_ != nil))
#line 1488
            [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:list];
            [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:item];
          }
          status = [compositeColumn_ goWithBoolean:simulate || (keepCandidate && keep == 0) withComItextpdfTextPdfInterfacesIAccessibleElement:item];
          if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_] && !s) {
            [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:[item getListBody]];
            [canvas_ closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:item];
            if (([((ComItextpdfTextList *) nil_chk(list)) getLastItem] == item && (status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) != 0) || (status & ComItextpdfTextPdfColumnText_NO_MORE_COLUMN) != 0)
#line 1496
            [canvas_ closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:list];
          }
          lastX_ = [compositeColumn_ getLastX];
          [self updateFilledWidthWithFloat:compositeColumn_->filledWidth_];
          if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0 && keepCandidate) {
            compositeColumn_ = nil;
            yLine_ = lastY;
            return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
          }
          if (simulate || !keepCandidate)
#line 1506
          break;
          if (keep == 0) {
            compositeColumn_ = nil;
            yLine_ = lastY;
          }
        }
        firstPass = NO;
        yLine_ = ((ComItextpdfTextPdfColumnText *) nil_chk(compositeColumn_))->yLine_;
        linesWritten_ += compositeColumn_->linesWritten_;
        descender_ = compositeColumn_->descender_;
        currentLeading_ = compositeColumn_->currentLeading_;
        if (![ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_]) {
          if (![JavaLangFloat isNaNWithFloat:compositeColumn_->firstLineY_] && !compositeColumn_->firstLineYDone_) {
            if (!simulate) {
              [ComItextpdfTextPdfColumnText showTextAlignedWithComItextpdfTextPdfPdfContentByte:canvas_ withInt:ComItextpdfTextElement_ALIGN_LEFT withComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithComItextpdfTextChunk:[((ComItextpdfTextListItem *) nil_chk(item)) getListSymbol]] withFloat:compositeColumn_->leftX_ + listIndentation withFloat:compositeColumn_->firstLineY_ withFloat:0];
            }
            compositeColumn_->firstLineYDone_ = YES;
          }
        }
        if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) != 0) {
          compositeColumn_ = nil;
          ++listIdx_;
          yLine_ -= [((ComItextpdfTextListItem *) nil_chk(item)) getSpacingAfter];
        }
        if ((status & ComItextpdfTextPdfColumnText_NO_MORE_COLUMN) != 0)
#line 1531
        return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
      }
      else if ([element type] == ComItextpdfTextElement_PTABLE) {
        
#line 1538
        ComItextpdfTextPdfPdfPTable *table = (ComItextpdfTextPdfPdfPTable *) check_class_cast(element, [ComItextpdfTextPdfPdfPTable class]);
        
#line 1541
        if ([table size] <= [table getHeaderRows]) {
          (void) [compositeElements_ removeFirst];
          continue;
        }
        
#line 1547
        jfloat yTemp = yLine_;
        yTemp += descender_;
        if (rowIdx_ == 0 && adjustFirstLine_)
#line 1550
        yTemp -= [table spacingBefore];
        
#line 1553
        if (yTemp < minY_ || yTemp > maxY_)
#line 1554
        return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
        
#line 1557
        jfloat yLineWrite = yTemp;
        jfloat x1 = leftX_;
        currentLeading_ = 0;
        
#line 1561
        jfloat tableWidth;
        if ([table isLockedWidth]) {
          tableWidth = [table getTotalWidth];
          [self updateFilledWidthWithFloat:tableWidth];
        }
        else {
          tableWidth = rectangularWidth_ * [table getWidthPercentage] / 100.0f;
          [table setTotalWidthWithFloat:tableWidth];
        }
        
#line 1573
        [table normalizeHeadersFooters];
        jint headerRows = [table getHeaderRows];
        jint footerRows = [table getFooterRows];
        jint realHeaderRows = headerRows - footerRows;
        jfloat headerHeight = [table getHeaderHeight];
        jfloat footerHeight = [table getFooterHeight];
        
#line 1581
        jboolean skipHeader = [table isSkipFirstHeader] && rowIdx_ <= realHeaderRows && ([table isComplete] || rowIdx_ != realHeaderRows);
        
#line 1583
        if (!skipHeader) {
          yTemp -= headerHeight;
          if (yTemp < minY_ || yTemp > maxY_) {
            return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
          }
        }
        
#line 1593
        jint k = 0;
        if (rowIdx_ < headerRows) {
          rowIdx_ = headerRows;
        }
        
#line 1598
        if (![table isComplete])
#line 1599
        yTemp -= footerHeight;
        
#line 1602
        ComItextpdfTextPdfPdfPTable_FittingRows *fittingRows = [table getFittingRowsWithFloat:yTemp - minY_ withInt:rowIdx_];
        k = ((ComItextpdfTextPdfPdfPTable_FittingRows *) nil_chk(fittingRows))->lastRow_ + 1;
        yTemp -= fittingRows->height_;
        
#line 1607
        [((id<ComItextpdfTextLogLogger>) nil_chk(LOGGER_)) infoWithNSString:JreStrcat("$I", @"Want to split at row ", k)];
        jint kTemp = k;
        while (kTemp > rowIdx_ && kTemp < [table size] && [((ComItextpdfTextPdfPdfPRow *) nil_chk([table getRowWithInt:kTemp])) isMayNotBreak]) {
          kTemp--;
        }
        if ((kTemp > rowIdx_ && kTemp < k) || (kTemp == 0 && [((ComItextpdfTextPdfPdfPRow *) nil_chk([table getRowWithInt:0])) isMayNotBreak] && [table isLoopCheck])) {
          yTemp = minY_;
          k = kTemp;
          [table setLoopCheckWithBoolean:NO];
        }
        [LOGGER_ infoWithNSString:JreStrcat("$I", @"Will split at row ", k)];
        
#line 1620
        if ([table isSplitLate] && k > 0) {
          [fittingRows correctLastRowChosenWithComItextpdfTextPdfPdfPTable:table withInt:k - 1];
        }
        
#line 1626
        if (![table isComplete])
#line 1627
        yTemp += footerHeight;
        
#line 1630
        if (![table isSplitRows]) {
          splittedRow_ = -1;
          if (k == rowIdx_) {
            
#line 1634
            if (k == [table size]) {
              (void) [compositeElements_ removeFirst];
              continue;
            }
            else {
              
#line 1640
              (void) [((JavaUtilArrayList *) nil_chk([table getRows])) removeWithInt:k];
              return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
            }
          }
        }
        else
#line 1648
        if ([table isSplitLate] && rowIdx_ < k) {
          splittedRow_ = -1;
        }
        else
#line 1652
        if (k < [table size]) {
          
#line 1656
          yTemp -= fittingRows->completedRowsHeight_ - fittingRows->height_;
          
#line 1659
          jfloat h = yTemp - minY_;
          
#line 1661
          ComItextpdfTextPdfPdfPRow *newRow = [((ComItextpdfTextPdfPdfPRow *) nil_chk([table getRowWithInt:k])) splitRowWithComItextpdfTextPdfPdfPTable:table withInt:k withFloat:h];
          
#line 1663
          if (newRow == nil) {
            [LOGGER_ infoWithNSString:@"Didn't split row!"];
            splittedRow_ = -1;
            if (rowIdx_ == k)
#line 1667
            return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
          }
          else {
            
#line 1671
            if (k != splittedRow_) {
              splittedRow_ = k + 1;
              table = [[ComItextpdfTextPdfPdfPTable alloc] initWithComItextpdfTextPdfPdfPTable:table];
              (void) [compositeElements_ setWithInt:0 withId:table];
              JavaUtilArrayList *rows = [table getRows];
              for (jint i = headerRows; i < rowIdx_; ++i)
#line 1677
              (void) [((JavaUtilArrayList *) nil_chk(rows)) setWithInt:i withId:nil];
            }
            yTemp = minY_;
            [((JavaUtilArrayList *) nil_chk([table getRows])) addWithInt:++k withId:newRow];
            [LOGGER_ infoWithNSString:JreStrcat("$I", @"Inserting row at position ", k)];
          }
        }
        
#line 1686
        firstPass = NO;
        
#line 1689
        if (!simulate) {
          
#line 1691
          switch ([table getHorizontalAlignment]) {
            case ComItextpdfTextElement_ALIGN_LEFT:
            break;
            case ComItextpdfTextElement_ALIGN_RIGHT:
            x1 += rectangularWidth_ - tableWidth;
            break;
            default:
            x1 += (rectangularWidth_ - tableWidth) / 2.0f;
          }
          
#line 1701
          ComItextpdfTextPdfPdfPTable *nt = [ComItextpdfTextPdfPdfPTable shallowCopyWithComItextpdfTextPdfPdfPTable:table];
          JavaUtilArrayList *sub = [((ComItextpdfTextPdfPdfPTable *) nil_chk(nt)) getRows];
          
#line 1704
          if (!skipHeader && realHeaderRows > 0) {
            JavaUtilArrayList *rows = [table getRowsWithInt:0 withInt:realHeaderRows];
            if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_])
#line 1707
            ((ComItextpdfTextPdfPdfPTableHeader *) nil_chk([nt getHeader]))->rows_ = rows;
            [((JavaUtilArrayList *) nil_chk(sub)) addAllWithJavaUtilCollection:rows];
          }
          else
#line 1711
          [nt setHeaderRowsWithInt:footerRows];
          {
            
#line 1715
            JavaUtilArrayList *rows = [table getRowsWithInt:rowIdx_ withInt:k];
            if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_]) {
              ((ComItextpdfTextPdfPdfPTableBody *) nil_chk([nt getBody]))->rows_ = rows;
            }
            [((JavaUtilArrayList *) nil_chk(sub)) addAllWithJavaUtilCollection:rows];
          }
          
#line 1722
          jboolean showFooter = ![table isSkipLastFooter];
          jboolean newPageFollows = NO;
          if (k < [table size]) {
            [nt setCompleteWithBoolean:YES];
            showFooter = YES;
            newPageFollows = YES;
          }
          
#line 1730
          if (footerRows > 0 && [nt isComplete] && showFooter) {
            JavaUtilArrayList *rows = [table getRowsWithInt:realHeaderRows withInt:realHeaderRows + footerRows];
            if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_]) {
              ((ComItextpdfTextPdfPdfPTableFooter *) nil_chk([nt getFooter]))->rows_ = rows;
            }
            [sub addAllWithJavaUtilCollection:rows];
          }
          else {
            footerRows = 0;
          }
          
#line 1742
          jfloat rowHeight = 0;
          jint lastIdx = [sub size] - 1 - footerRows;
          ComItextpdfTextPdfPdfPRow *last = [sub getWithInt:lastIdx];
          if ([table isExtendLastRowWithBoolean:newPageFollows]) {
            rowHeight = [((ComItextpdfTextPdfPdfPRow *) nil_chk(last)) getMaxHeights];
            [last setMaxHeightsWithFloat:yTemp - minY_ + rowHeight];
            yTemp = minY_;
          }
          
#line 1752
          if (newPageFollows) {
            id<ComItextpdfTextPdfPdfPTableEvent> tableEvent = [table getTableEvent];
            if ([(id) tableEvent conformsToProtocol: @protocol(ComItextpdfTextPdfPdfPTableEventSplit)]) {
              [((id<ComItextpdfTextPdfPdfPTableEventSplit>) nil_chk(((id<ComItextpdfTextPdfPdfPTableEventSplit>) check_protocol_cast(tableEvent, @protocol(ComItextpdfTextPdfPdfPTableEventSplit))))) splitTableWithComItextpdfTextPdfPdfPTable:table];
            }
          }
          
#line 1760
          if (canvases_ != nil) {
            if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases_, ComItextpdfTextPdfPdfPTable_TEXTCANVAS)]) {
              [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases_, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:table];
            }
            [nt writeSelectedRowsWithInt:0 withInt:-1 withInt:0 withInt:-1 withFloat:x1 withFloat:yLineWrite withComItextpdfTextPdfPdfContentByteArray:canvases_ withBoolean:NO];
            if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases_, ComItextpdfTextPdfPdfPTable_TEXTCANVAS)]) {
              [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases_, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:table];
            }
          }
          else {
            if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_]) {
              [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:table];
            }
            [nt writeSelectedRowsWithInt:0 withInt:-1 withInt:0 withInt:-1 withFloat:x1 withFloat:yLineWrite withComItextpdfTextPdfPdfContentByte:canvas_ withBoolean:NO];
            if ([ComItextpdfTextPdfColumnText isTaggedWithComItextpdfTextPdfPdfContentByte:canvas_]) {
              [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas_)) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:table];
            }
          }
          
#line 1781
          if (splittedRow_ == k && k < [table size]) {
            ComItextpdfTextPdfPdfPRow *splitted = [((JavaUtilArrayList *) nil_chk([table getRows])) getWithInt:k];
            [((ComItextpdfTextPdfPdfPRow *) nil_chk(splitted)) copyRowContentWithComItextpdfTextPdfPdfPTable:nt withInt:lastIdx];
          }
          else
#line 1786
          if (k > 0 && k < [table size]) {
            
#line 1789
            ComItextpdfTextPdfPdfPRow *row = [table getRowWithInt:k];
            [((ComItextpdfTextPdfPdfPRow *) nil_chk(row)) splitRowspansWithComItextpdfTextPdfPdfPTable:table withInt:k - 1 withComItextpdfTextPdfPdfPTable:nt withInt:lastIdx];
          }
          
#line 1795
          if ([table isExtendLastRowWithBoolean:newPageFollows]) {
            [((ComItextpdfTextPdfPdfPRow *) nil_chk(last)) setMaxHeightsWithFloat:rowHeight];
          }
          
#line 1801
          if (newPageFollows) {
            id<ComItextpdfTextPdfPdfPTableEvent> tableEvent = [table getTableEvent];
            if ([(id) tableEvent conformsToProtocol: @protocol(ComItextpdfTextPdfPdfPTableEventAfterSplit)]) {
              ComItextpdfTextPdfPdfPRow *row = [table getRowWithInt:k];
              [((id<ComItextpdfTextPdfPdfPTableEventAfterSplit>) nil_chk(((id<ComItextpdfTextPdfPdfPTableEventAfterSplit>) check_protocol_cast(tableEvent, @protocol(ComItextpdfTextPdfPdfPTableEventAfterSplit))))) afterSplitTableWithComItextpdfTextPdfPdfPTable:table withComItextpdfTextPdfPdfPRow:row withInt:k];
            }
          }
        }
        else
#line 1810
        if ([table isExtendLastRow] && minY_ > ComItextpdfTextPdfPdfPRow_BOTTOM_LIMIT) {
          yTemp = minY_;
        }
        
#line 1814
        yLine_ = yTemp;
        descender_ = 0;
        currentLeading_ = 0;
        if (!(skipHeader || [table isComplete]))
#line 1818
        yLine_ += footerHeight;
        while (k < [table size]) {
          if ([table getRowHeightWithInt:k] > 0 || [table hasRowspanWithInt:k]) {
            break;
          }
          k++;
        }
        if (k >= [table size]) {
          
#line 1827
          if (yLine_ - [table spacingAfter] < minY_) {
            yLine_ = minY_;
          }
          else {
            yLine_ -= [table spacingAfter];
          }
          (void) [compositeElements_ removeFirst];
          splittedRow_ = -1;
          rowIdx_ = 0;
        }
        else {
          if (splittedRow_ != -1) {
            JavaUtilArrayList *rows = [table getRows];
            for (jint i = rowIdx_; i < k; ++i)
#line 1841
            (void) [((JavaUtilArrayList *) nil_chk(rows)) setWithInt:i withId:nil];
          }
          rowIdx_ = k;
          return ComItextpdfTextPdfColumnText_NO_MORE_COLUMN;
        }
      }
      else if ([element type] == ComItextpdfTextElement_YMARK) {
        if (!simulate) {
          id<ComItextpdfTextPdfDrawDrawInterface> zh = (id<ComItextpdfTextPdfDrawDrawInterface>) check_protocol_cast(element, @protocol(ComItextpdfTextPdfDrawDrawInterface));
          [zh drawWithComItextpdfTextPdfPdfContentByte:canvas_ withFloat:leftX_ withFloat:minY_ withFloat:rightX_ withFloat:maxY_ withFloat:yLine_];
        }
        (void) [compositeElements_ removeFirst];
      }
      else
#line 1853
      if ([element type] == ComItextpdfTextElement_DIV) {
        JavaUtilArrayList *floatingElements = [[JavaUtilArrayList alloc] init];
        do {
          [floatingElements addWithId:element];
          (void) [compositeElements_ removeFirst];
          element = ![compositeElements_ isEmpty] ? [compositeElements_ getFirst] : nil;
        }
        while (
#line 1859
        element != nil && [element type] == ComItextpdfTextElement_DIV);
        
#line 1861
        ComItextpdfTextPdfFloatLayout *fl = [[ComItextpdfTextPdfFloatLayout alloc] initWithJavaUtilList:floatingElements withBoolean:useAscender_];
        [fl setSimpleColumnWithFloat:leftX_ withFloat:minY_ withFloat:rightX_ withFloat:yLine_];
        jint status = [fl layoutWithComItextpdfTextPdfPdfContentByte:canvas_ withBoolean:simulate];
        
#line 1866
        yLine_ = [fl getYLine];
        descender_ = 0;
        if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0) {
          [compositeElements_ addAllWithJavaUtilCollection:floatingElements];
          return status;
        }
      }
      else (void) [compositeElements_ removeFirst];
    }
    continue_main_loop: ;
  }
}


#line 1883
- (ComItextpdfTextPdfPdfContentByte *)getCanvas {
  
#line 1884
  return canvas_;
}


#line 1893
- (void)setCanvasWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  
#line 1894
  self->canvas_ = canvas;
  self->canvases_ = nil;
  if (compositeColumn_ != nil)
#line 1897
  [compositeColumn_ setCanvasWithComItextpdfTextPdfPdfContentByte:canvas];
}


#line 1905
- (void)setCanvasesWithComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 1906
  self->canvases_ = canvases;
  self->canvas_ = IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_TEXTCANVAS);
  if (compositeColumn_ != nil)
#line 1909
  [compositeColumn_ setCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases];
}


#line 1917
- (IOSObjectArray *)getCanvases {
  
#line 1918
  return canvases_;
}


#line 1927
- (jboolean)zeroHeightElement {
  
#line 1928
  return composite_ && ![((JavaUtilLinkedList *) nil_chk(compositeElements_)) isEmpty] && [((id<ComItextpdfTextElement>) nil_chk([compositeElements_ getFirst])) type] == ComItextpdfTextElement_YMARK;
}


#line 1931
- (id<JavaUtilList>)getCompositeElements {
  
#line 1932
  return compositeElements_;
}


#line 1940
- (jboolean)isUseAscender {
  
#line 1941
  return useAscender_;
}


#line 1949
- (void)setUseAscenderWithBoolean:(jboolean)useAscender {
  
#line 1950
  self->useAscender_ = useAscender;
}


#line 1956
+ (jboolean)hasMoreTextWithInt:(jint)status {
  
#line 1957
  return (status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0;
}


#line 1965
- (jfloat)getFilledWidth {
  
#line 1966
  return filledWidth_;
}


#line 1975
- (void)setFilledWidthWithFloat:(jfloat)filledWidth {
  
#line 1976
  self->filledWidth_ = filledWidth;
}


#line 1984
- (void)updateFilledWidthWithFloat:(jfloat)w {
  
#line 1985
  if (w > filledWidth_)
#line 1986
  filledWidth_ = w;
}


#line 1995
- (jboolean)isAdjustFirstLine {
  
#line 1996
  return adjustFirstLine_;
}


#line 2009
- (void)setAdjustFirstLineWithBoolean:(jboolean)adjustFirstLine {
  
#line 2010
  self->adjustFirstLine_ = adjustFirstLine;
}


#line 2013
+ (jboolean)isTaggedWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  
#line 2014
  return (canvas != nil) && (canvas->pdf_ != nil) && (canvas->writer_ != nil) && [canvas->writer_ isTagged];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfColumnText *)other {
  [super copyAllFieldsTo:other];
  other->LOGGER_ = LOGGER_;
  other->adjustFirstLine_ = adjustFirstLine_;
  other->alignment_ = alignment_;
  other->arabicOptions_ = arabicOptions_;
  other->bidiLine_ = bidiLine_;
  other->canvas_ = canvas_;
  other->canvases_ = canvases_;
  other->composite_ = composite_;
  other->compositeColumn_ = compositeColumn_;
  other->compositeElements_ = compositeElements_;
  other->currentLeading_ = currentLeading_;
  other->descender_ = descender_;
  other->extraParagraphSpace_ = extraParagraphSpace_;
  other->filledWidth_ = filledWidth_;
  other->firstLineY_ = firstLineY_;
  other->firstLineYDone_ = firstLineYDone_;
  other->fixedLeading_ = fixedLeading_;
  other->followingIndent_ = followingIndent_;
  other->indent_ = indent_;
  other->inheritGraphicState_ = inheritGraphicState_;
  other->lastWasNewline_ = lastWasNewline_;
  other->lastX_ = lastX_;
  other->leftWall_ = leftWall_;
  other->leftX_ = leftX_;
  other->lineStatus_ = lineStatus_;
  other->linesWritten_ = linesWritten_;
  other->listIdx_ = listIdx_;
  other->maxY_ = maxY_;
  other->minY_ = minY_;
  other->multipliedLeading_ = multipliedLeading_;
  other->rectangularMode_ = rectangularMode_;
  other->rectangularWidth_ = rectangularWidth_;
  other->repeatFirstLineIndent_ = repeatFirstLineIndent_;
  other->rightIndent_ = rightIndent_;
  other->rightWall_ = rightWall_;
  other->rightX_ = rightX_;
  other->rowIdx_ = rowIdx_;
  other->runDirection_ = runDirection_;
  other->spaceCharRatio_ = spaceCharRatio_;
  other->splittedRow_ = splittedRow_;
  other->useAscender_ = useAscender_;
  other->waitPhrase_ = waitPhrase_;
  other->yLine_ = yLine_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfContentByte:", "ColumnText", NULL, 0x1, NULL },
    { "duplicateWithComItextpdfTextPdfColumnText:", "duplicate", "Lcom.itextpdf.text.pdf.ColumnText;", 0x9, NULL },
    { "setACopyWithComItextpdfTextPdfColumnText:", "setACopy", "Lcom.itextpdf.text.pdf.ColumnText;", 0x1, NULL },
    { "setSimpleVarsWithComItextpdfTextPdfColumnText:", "setSimpleVars", "V", 0x4, NULL },
    { "addWaitingPhrase", NULL, "V", 0x2, NULL },
    { "addTextWithComItextpdfTextPhrase:", "addText", "V", 0x1, NULL },
    { "setTextWithComItextpdfTextPhrase:", "setText", "V", 0x1, NULL },
    { "addTextWithComItextpdfTextChunk:", "addText", "V", 0x1, NULL },
    { "addElementWithComItextpdfTextElement:", "addElement", "V", 0x1, NULL },
    { "isAllowedElementWithComItextpdfTextElement:", "isAllowedElement", "Z", 0x9, NULL },
    { "convertColumnWithFloatArray:", "convertColumn", "Ljava.util.ArrayList;", 0x4, NULL },
    { "findLimitsPointWithJavaUtilArrayList:", "findLimitsPoint", "F", 0x4, NULL },
    { "findLimitsOneLine", NULL, "[F", 0x4, NULL },
    { "findLimitsTwoLines", NULL, "[F", 0x4, NULL },
    { "setColumnsWithFloatArray:withFloatArray:", "setColumns", "V", 0x1, NULL },
    { "setSimpleColumnWithComItextpdfTextPhrase:withFloat:withFloat:withFloat:withFloat:withFloat:withInt:", "setSimpleColumn", "V", 0x1, NULL },
    { "setSimpleColumnWithFloat:withFloat:withFloat:withFloat:withFloat:withInt:", "setSimpleColumn", "V", 0x1, NULL },
    { "setSimpleColumnWithFloat:withFloat:withFloat:withFloat:", "setSimpleColumn", "V", 0x1, NULL },
    { "setSimpleColumnWithComItextpdfTextRectangle:", "setSimpleColumn", "V", 0x1, NULL },
    { "setLeadingWithFloat:", "setLeading", "V", 0x1, NULL },
    { "setLeadingWithFloat:withFloat:", "setLeading", "V", 0x1, NULL },
    { "getLeading", NULL, "F", 0x1, NULL },
    { "getMultipliedLeading", NULL, "F", 0x1, NULL },
    { "setYLineWithFloat:", "setYLine", "V", 0x1, NULL },
    { "getYLine", NULL, "F", 0x1, NULL },
    { "getRowsDrawn", NULL, "I", 0x1, NULL },
    { "setAlignmentWithInt:", "setAlignment", "V", 0x1, NULL },
    { "getAlignment", NULL, "I", 0x1, NULL },
    { "setIndentWithFloat:", "setIndent", "V", 0x1, NULL },
    { "setIndentWithFloat:withBoolean:", "setIndent", "V", 0x1, NULL },
    { "getIndent", NULL, "F", 0x1, NULL },
    { "setFollowingIndentWithFloat:", "setFollowingIndent", "V", 0x1, NULL },
    { "getFollowingIndent", NULL, "F", 0x1, NULL },
    { "setRightIndentWithFloat:", "setRightIndent", "V", 0x1, NULL },
    { "getRightIndent", NULL, "F", 0x1, NULL },
    { "getCurrentLeading", NULL, "F", 0x1, NULL },
    { "getInheritGraphicState", NULL, "Z", 0x1, NULL },
    { "setInheritGraphicStateWithBoolean:", "setInheritGraphicState", "V", 0x1, NULL },
    { "go", NULL, "I", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "goWithBoolean:", "go", "I", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "goWithBoolean:withComItextpdfTextPdfInterfacesIAccessibleElement:", "go", "I", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "getExtraParagraphSpace", NULL, "F", 0x1, NULL },
    { "setExtraParagraphSpaceWithFloat:", "setExtraParagraphSpace", "V", 0x1, NULL },
    { "clearChunks", NULL, "V", 0x1, NULL },
    { "getSpaceCharRatio", NULL, "F", 0x1, NULL },
    { "setSpaceCharRatioWithFloat:", "setSpaceCharRatio", "V", 0x1, NULL },
    { "setRunDirectionWithInt:", "setRunDirection", "V", 0x1, NULL },
    { "getRunDirection", NULL, "I", 0x1, NULL },
    { "getLinesWritten", NULL, "I", 0x1, NULL },
    { "getLastX", NULL, "F", 0x1, NULL },
    { "getArabicOptions", NULL, "I", 0x1, NULL },
    { "setArabicOptionsWithInt:", "setArabicOptions", "V", 0x1, NULL },
    { "getDescender", NULL, "F", 0x1, NULL },
    { "getWidthWithComItextpdfTextPhrase:withInt:withInt:", "getWidth", "F", 0x9, NULL },
    { "getWidthWithComItextpdfTextPhrase:", "getWidth", "F", 0x9, NULL },
    { "showTextAlignedWithComItextpdfTextPdfPdfContentByte:withInt:withComItextpdfTextPhrase:withFloat:withFloat:withFloat:withInt:withInt:", "showTextAligned", "V", 0x9, NULL },
    { "showTextAlignedWithComItextpdfTextPdfPdfContentByte:withInt:withComItextpdfTextPhrase:withFloat:withFloat:withFloat:", "showTextAligned", "V", 0x9, NULL },
    { "fitTextWithComItextpdfTextFont:withNSString:withComItextpdfTextRectangle:withFloat:withInt:", "fitText", "F", 0x9, NULL },
    { "goCompositeWithBoolean:", "goComposite", "I", 0x4, "Lcom.itextpdf.text.DocumentException;" },
    { "getCanvas", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "setCanvasWithComItextpdfTextPdfPdfContentByte:", "setCanvas", "V", 0x1, NULL },
    { "setCanvasesWithComItextpdfTextPdfPdfContentByteArray:", "setCanvases", "V", 0x1, NULL },
    { "getCanvases", NULL, "[Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "zeroHeightElement", NULL, "Z", 0x1, NULL },
    { "getCompositeElements", NULL, "Ljava.util.List;", 0x1, NULL },
    { "isUseAscender", NULL, "Z", 0x1, NULL },
    { "setUseAscenderWithBoolean:", "setUseAscender", "V", 0x1, NULL },
    { "hasMoreTextWithInt:", "hasMoreText", "Z", 0x9, NULL },
    { "getFilledWidth", NULL, "F", 0x1, NULL },
    { "setFilledWidthWithFloat:", "setFilledWidth", "V", 0x1, NULL },
    { "updateFilledWidthWithFloat:", "updateFilledWidth", "V", 0x1, NULL },
    { "isAdjustFirstLine", NULL, "Z", 0x1, NULL },
    { "setAdjustFirstLineWithBoolean:", "setAdjustFirstLine", "V", 0x1, NULL },
    { "isTaggedWithComItextpdfTextPdfPdfContentByte:", "isTagged", "Z", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER_", NULL, 0x12, "Lcom.itextpdf.text.log.Logger;", NULL,  },
    { "AR_NOVOWEL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_AR_NOVOWEL },
    { "AR_COMPOSEDTASHKEEL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_AR_COMPOSEDTASHKEEL },
    { "AR_LIG_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_AR_LIG },
    { "DIGITS_EN2AN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_DIGITS_EN2AN },
    { "DIGITS_AN2EN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_DIGITS_AN2EN },
    { "DIGITS_EN2AN_INIT_LR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_DIGITS_EN2AN_INIT_LR },
    { "DIGITS_EN2AN_INIT_AL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_DIGITS_EN2AN_INIT_AL },
    { "DIGIT_TYPE_AN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_DIGIT_TYPE_AN },
    { "DIGIT_TYPE_AN_EXTENDED_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_DIGIT_TYPE_AN_EXTENDED },
    { "runDirection_", NULL, 0x4, "I", NULL,  },
    { "GLOBAL_SPACE_CHAR_RATIO_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfColumnText_GLOBAL_SPACE_CHAR_RATIO },
    { "START_COLUMN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_START_COLUMN },
    { "NO_MORE_TEXT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_NO_MORE_TEXT },
    { "NO_MORE_COLUMN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_NO_MORE_COLUMN },
    { "LINE_STATUS_OK_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_LINE_STATUS_OK },
    { "LINE_STATUS_OFFLIMITS_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_LINE_STATUS_OFFLIMITS },
    { "LINE_STATUS_NOLINE_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfColumnText_LINE_STATUS_NOLINE },
    { "maxY_", NULL, 0x4, "F", NULL,  },
    { "minY_", NULL, 0x4, "F", NULL,  },
    { "leftX_", NULL, 0x4, "F", NULL,  },
    { "rightX_", NULL, 0x4, "F", NULL,  },
    { "alignment_", NULL, 0x4, "I", NULL,  },
    { "leftWall_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "rightWall_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "bidiLine_", NULL, 0x4, "Lcom.itextpdf.text.pdf.BidiLine;", NULL,  },
    { "yLine_", NULL, 0x4, "F", NULL,  },
    { "lastX_", NULL, 0x4, "F", NULL,  },
    { "currentLeading_", NULL, 0x4, "F", NULL,  },
    { "fixedLeading_", NULL, 0x4, "F", NULL,  },
    { "multipliedLeading_", NULL, 0x4, "F", NULL,  },
    { "canvas_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
    { "canvases_", NULL, 0x4, "[Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
    { "lineStatus_", NULL, 0x4, "I", NULL,  },
    { "indent_", NULL, 0x4, "F", NULL,  },
    { "followingIndent_", NULL, 0x4, "F", NULL,  },
    { "rightIndent_", NULL, 0x4, "F", NULL,  },
    { "extraParagraphSpace_", NULL, 0x4, "F", NULL,  },
    { "rectangularWidth_", NULL, 0x4, "F", NULL,  },
    { "rectangularMode_", NULL, 0x4, "Z", NULL,  },
    { "spaceCharRatio_", NULL, 0x2, "F", NULL,  },
    { "lastWasNewline_", NULL, 0x2, "Z", NULL,  },
    { "repeatFirstLineIndent_", NULL, 0x2, "Z", NULL,  },
    { "linesWritten_", NULL, 0x2, "I", NULL,  },
    { "firstLineY_", NULL, 0x2, "F", NULL,  },
    { "firstLineYDone_", NULL, 0x2, "Z", NULL,  },
    { "arabicOptions_", NULL, 0x2, "I", NULL,  },
    { "descender_", NULL, 0x4, "F", NULL,  },
    { "composite_", NULL, 0x4, "Z", NULL,  },
    { "compositeColumn_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ColumnText;", NULL,  },
    { "compositeElements_", NULL, 0x4, "Ljava.util.LinkedList;", NULL,  },
    { "listIdx_", NULL, 0x4, "I", NULL,  },
    { "rowIdx_", NULL, 0x4, "I", NULL,  },
    { "splittedRow_", NULL, 0x2, "I", NULL,  },
    { "waitPhrase_", NULL, 0x4, "Lcom.itextpdf.text.Phrase;", NULL,  },
    { "useAscender_", NULL, 0x2, "Z", NULL,  },
    { "filledWidth_", NULL, 0x2, "F", NULL,  },
    { "adjustFirstLine_", NULL, 0x2, "Z", NULL,  },
    { "inheritGraphicState_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfColumnText = { "ColumnText", "com.itextpdf.text.pdf", NULL, 0x1, 74, methods, 59, fields, 0, NULL};
  return &_ComItextpdfTextPdfColumnText;
}

@end
