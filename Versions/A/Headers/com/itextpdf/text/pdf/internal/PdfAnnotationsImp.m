//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/internal/PdfAnnotationsImp.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/internal/PdfAnnotationsImp.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Annotation.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/pdf/PdfAcroForm.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfFileSpecification.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfRectangle.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/internal/PdfAnnotationsImp.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"


#line 68
@implementation ComItextpdfTextPdfInternalPdfAnnotationsImp


#line 88
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self = [super init]) {
    delayedAnnotations_ =
#line 85
    [[JavaUtilArrayList alloc] init];
    
#line 89
    acroForm_ = [[ComItextpdfTextPdfPdfAcroForm alloc] initWithComItextpdfTextPdfPdfWriter:writer];
  }
  return self;
}


#line 95
- (jboolean)hasValidAcroForm {
  
#line 96
  return [((ComItextpdfTextPdfPdfAcroForm *) nil_chk(acroForm_)) isValid];
}


#line 103
- (ComItextpdfTextPdfPdfAcroForm *)getAcroForm {
  
#line 104
  return acroForm_;
}


#line 107
- (void)setSigFlagsWithInt:(jint)f {
  
#line 108
  [((ComItextpdfTextPdfPdfAcroForm *) nil_chk(acroForm_)) setSigFlagsWithInt:f];
}


#line 111
- (void)addCalculationOrderWithComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)formField {
  
#line 112
  [((ComItextpdfTextPdfPdfAcroForm *) nil_chk(acroForm_)) addCalculationOrderWithComItextpdfTextPdfPdfFormField:formField];
}


#line 115
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
  
#line 116
  if ([((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) isForm]) {
    ComItextpdfTextPdfPdfFormField *field = (ComItextpdfTextPdfPdfFormField *) check_class_cast(annot, [ComItextpdfTextPdfPdfFormField class]);
    if ([field getParent] == nil)
#line 119
    [self addFormFieldRawWithComItextpdfTextPdfPdfFormField:field];
  }
  else
#line 122
  [((JavaUtilArrayList *) nil_chk(annotations_)) addWithId:annot];
}


#line 125
- (void)addPlainAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
  
#line 126
  [((JavaUtilArrayList *) nil_chk(annotations_)) addWithId:annot];
}


#line 129
- (void)addFormFieldRawWithComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)field {
  
#line 130
  [((JavaUtilArrayList *) nil_chk(annotations_)) addWithId:field];
  JavaUtilArrayList *kids = [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) getKids];
  if (kids != nil) {
    for (jint k = 0; k < [kids size]; ++k)
#line 134
    [self addFormFieldRawWithComItextpdfTextPdfPdfFormField:[kids getWithInt:k]];
  }
}


#line 138
- (jboolean)hasUnusedAnnotations {
  
#line 139
  return ![((JavaUtilArrayList *) nil_chk(annotations_)) isEmpty];
}


#line 142
- (void)resetAnnotations {
  
#line 143
  annotations_ = delayedAnnotations_;
  delayedAnnotations_ = [[JavaUtilArrayList alloc] init];
}


#line 147
- (ComItextpdfTextPdfPdfArray *)rotateAnnotationsWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                    withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize {
  
#line 148
  ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] init];
  jint rotation = [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRotation] % 360;
  jint currentPage = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getCurrentPageNumber];
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(annotations_)) size]; ++k) {
    ComItextpdfTextPdfPdfAnnotation *dic = [annotations_ getWithInt:k];
    jint page = [((ComItextpdfTextPdfPdfAnnotation *) nil_chk(dic)) getPlaceInPage];
    if (page > currentPage) {
      [((JavaUtilArrayList *) nil_chk(delayedAnnotations_)) addWithId:dic];
      continue;
    }
    if ([dic isForm]) {
      if (![dic isUsed]) {
        JavaUtilHashSet *templates = [dic getTemplates];
        if (templates != nil)
#line 162
        [((ComItextpdfTextPdfPdfAcroForm *) nil_chk(acroForm_)) addFieldTemplatesWithJavaUtilHashSet:templates];
      }
      ComItextpdfTextPdfPdfFormField *field = (ComItextpdfTextPdfPdfFormField *) check_class_cast(dic, [ComItextpdfTextPdfPdfFormField class]);
      if ([field getParent] == nil)
#line 166
      [((ComItextpdfTextPdfPdfAcroForm *) nil_chk(acroForm_)) addDocumentFieldWithComItextpdfTextPdfPdfIndirectReference:[field getIndirectReference]];
    }
    if ([dic isAnnotation]) {
      [array addWithComItextpdfTextPdfPdfObject:[dic getIndirectReference]];
      if (![dic isUsed]) {
        ComItextpdfTextPdfPdfArray *tmp = [dic getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_()];
        ComItextpdfTextPdfPdfRectangle *rect;
        if ([((ComItextpdfTextPdfPdfArray *) nil_chk(tmp)) size] == 4) {
          rect = [[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([tmp getAsNumberWithInt:0])) floatValue] withFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([tmp getAsNumberWithInt:1])) floatValue] withFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([tmp getAsNumberWithInt:2])) floatValue] withFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([tmp getAsNumberWithInt:3])) floatValue]];
        }
        else {
          rect = [[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([tmp getAsNumberWithInt:0])) floatValue] withFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([tmp getAsNumberWithInt:1])) floatValue]];
        }
        if (rect != nil) {
          switch (rotation) {
            case 90:
            [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 183
            [pageSize getTop] - [rect bottom] withFloat:
#line 184
            [rect left] withFloat:
#line 185
            [pageSize getTop] - [rect top] withFloat:
#line 186
            [rect right]]];
            break;
            case 180:
            [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 190
            [pageSize getRight] - [rect left] withFloat:
#line 191
            [pageSize getTop] - [rect bottom] withFloat:
#line 192
            [pageSize getRight] - [rect right] withFloat:
#line 193
            [pageSize getTop] - [rect top]]];
            break;
            case 270:
            [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 197
            [rect bottom] withFloat:
#line 198
            [pageSize getRight] - [rect left] withFloat:
#line 199
            [rect top] withFloat:
#line 200
            [pageSize getRight] - [rect right]]];
            break;
          }
        }
      }
    }
    if (![dic isUsed]) {
      [dic setUsed];
      @try {
        (void) [writer addToBodyWithComItextpdfTextPdfPdfObject:dic withComItextpdfTextPdfPdfIndirectReference:[dic getIndirectReference]];
      }
      @catch (JavaIoIOException *e) {
        @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
      }
    }
  }
  return array;
}


#line 219
+ (ComItextpdfTextPdfPdfAnnotation *)convertAnnotationWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                        withComItextpdfTextAnnotation:(ComItextpdfTextAnnotation *)annot
                                                         withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)defaultRect {
  {
    
#line 228
    IOSBooleanArray *sparams;
    NSString *fname;
    NSString *mimetype;
    ComItextpdfTextPdfPdfFileSpecification *fs;
    
#line 236
    ComItextpdfTextPdfPdfAnnotation *ann;
    
#line 220
    switch ([((ComItextpdfTextAnnotation *) nil_chk(annot)) annotationType]) {
      case ComItextpdfTextAnnotation_URL_NET:
      return [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer withFloat:[annot llx] withFloat:[annot lly] withFloat:[annot urx] withFloat:[annot ury] withComItextpdfTextPdfPdfAction:[[ComItextpdfTextPdfPdfAction alloc] initWithJavaNetURL:(JavaNetURL *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_URL_()], [JavaNetURL class])]];
      case ComItextpdfTextAnnotation_URL_AS_STRING:
      return [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer withFloat:[annot llx] withFloat:[annot lly] withFloat:[annot urx] withFloat:[annot ury] withComItextpdfTextPdfPdfAction:[[ComItextpdfTextPdfPdfAction alloc] initWithNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_FILE__()], [NSString class])]];
      case ComItextpdfTextAnnotation_FILE_DEST:
      return [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer withFloat:[annot llx] withFloat:[annot lly] withFloat:[annot urx] withFloat:[annot ury] withComItextpdfTextPdfPdfAction:[[ComItextpdfTextPdfPdfAction alloc] initWithNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_FILE__()], [NSString class]) withNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_DESTINATION_()], [NSString class])]];
      case ComItextpdfTextAnnotation_SCREEN:
      sparams = (IOSBooleanArray *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_PARAMETERS_()], [IOSBooleanArray class]);
      fname = (NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_FILE__()], [NSString class]);
      mimetype = (NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_MIMETYPE_()], [NSString class]);
      
#line 232
      if (IOSBooleanArray_Get(nil_chk(sparams), 0))
#line 233
      fs = [ComItextpdfTextPdfPdfFileSpecification fileEmbeddedWithComItextpdfTextPdfPdfWriter:writer withNSString:fname withNSString:fname withByteArray:nil];
      else
#line 235
      fs = [ComItextpdfTextPdfPdfFileSpecification fileExternWithComItextpdfTextPdfPdfWriter:writer withNSString:fname];
      ann = [ComItextpdfTextPdfPdfAnnotation createScreenWithComItextpdfTextPdfPdfWriter:writer withComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:[annot llx] withFloat:[annot lly] withFloat:[annot urx] withFloat:[annot ury]] withNSString:
#line 237
      fname withComItextpdfTextPdfPdfFileSpecification:fs withNSString:mimetype withBoolean:IOSBooleanArray_Get(sparams, 1)];
      return ann;
      case ComItextpdfTextAnnotation_FILE_PAGE:
      return [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer withFloat:[annot llx] withFloat:[annot lly] withFloat:[annot urx] withFloat:[annot ury] withComItextpdfTextPdfPdfAction:[[ComItextpdfTextPdfPdfAction alloc] initWithNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_FILE__()], [NSString class]) withInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_PAGE_()], [JavaLangInteger class])))) intValue]]];
      case ComItextpdfTextAnnotation_NAMED_DEST:
      return [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer withFloat:[annot llx] withFloat:[annot lly] withFloat:[annot urx] withFloat:[annot ury] withComItextpdfTextPdfPdfAction:[[ComItextpdfTextPdfPdfAction alloc] initWithInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_NAMED_()], [JavaLangInteger class])))) intValue]]];
      case ComItextpdfTextAnnotation_LAUNCH:
      return [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer withFloat:[annot llx] withFloat:[annot lly] withFloat:[annot urx] withFloat:[annot ury] withComItextpdfTextPdfPdfAction:[[ComItextpdfTextPdfPdfAction alloc] initWithNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_APPLICATION_()], [NSString class]) withNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_PARAMETERS_()], [NSString class]) withNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_OPERATION_()], [NSString class]) withNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([annot attributes])) getWithId:ComItextpdfTextAnnotation_get_DEFAULTDIR_()], [NSString class])]];
      default:
      return [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer withFloat:[((ComItextpdfTextRectangle *) nil_chk(defaultRect)) getLeft] withFloat:[defaultRect getBottom] withFloat:[defaultRect getRight] withFloat:[defaultRect getTop] withComItextpdfTextPdfPdfString:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:[annot title] withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()] withComItextpdfTextPdfPdfString:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:[annot content] withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfInternalPdfAnnotationsImp *)other {
  [super copyAllFieldsTo:other];
  other->acroForm_ = acroForm_;
  other->annotations_ = annotations_;
  other->delayedAnnotations_ = delayedAnnotations_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:", "PdfAnnotationsImp", NULL, 0x1, NULL },
    { "hasValidAcroForm", NULL, "Z", 0x1, NULL },
    { "getAcroForm", NULL, "Lcom.itextpdf.text.pdf.PdfAcroForm;", 0x1, NULL },
    { "setSigFlagsWithInt:", "setSigFlags", "V", 0x1, NULL },
    { "addCalculationOrderWithComItextpdfTextPdfPdfFormField:", "addCalculationOrder", "V", 0x1, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addAnnotation", "V", 0x1, NULL },
    { "addPlainAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addPlainAnnotation", "V", 0x1, NULL },
    { "addFormFieldRawWithComItextpdfTextPdfPdfFormField:", "addFormFieldRaw", "V", 0x0, NULL },
    { "hasUnusedAnnotations", NULL, "Z", 0x1, NULL },
    { "resetAnnotations", NULL, "V", 0x1, NULL },
    { "rotateAnnotationsWithComItextpdfTextPdfPdfWriter:withComItextpdfTextRectangle:", "rotateAnnotations", "Lcom.itextpdf.text.pdf.PdfArray;", 0x1, NULL },
    { "convertAnnotationWithComItextpdfTextPdfPdfWriter:withComItextpdfTextAnnotation:withComItextpdfTextRectangle:", "convertAnnotation", "Lcom.itextpdf.text.pdf.PdfAnnotation;", 0x9, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "acroForm_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfAcroForm;", NULL,  },
    { "annotations_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "delayedAnnotations_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfInternalPdfAnnotationsImp = { "PdfAnnotationsImp", "com.itextpdf.text.pdf.internal", NULL, 0x1, 12, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfInternalPdfAnnotationsImp;
}

@end
