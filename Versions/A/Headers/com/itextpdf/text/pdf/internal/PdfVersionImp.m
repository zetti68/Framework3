//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/internal/PdfVersionImp.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/internal/PdfVersionImp.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocWriter.h"
#include "com/itextpdf/text/pdf/OutputStreamCounter.h"
#include "com/itextpdf/text/pdf/PdfDeveloperExtension.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/internal/PdfVersionImp.h"
#include "java/io/IOException.h"

BOOL ComItextpdfTextPdfInternalPdfVersionImp_initialized = NO;


#line 63
@implementation ComItextpdfTextPdfInternalPdfVersionImp

IOSObjectArray * ComItextpdfTextPdfInternalPdfVersionImp_HEADER_;


#line 92
- (void)setPdfVersionWithChar:(jchar)version_ {
  
#line 93
  self->version__ = version_;
  if (headerWasWritten_ || appendmode_) {
    [self setPdfVersionWithComItextpdfTextPdfPdfName:[self getVersionAsNameWithChar:version_]];
  }
  else {
    self->header_version_ = version_;
  }
}


#line 105
- (void)setAtLeastPdfVersionWithChar:(jchar)version_ {
  
#line 106
  if (version_ > header_version_) {
    [self setPdfVersionWithChar:version_];
  }
}


#line 114
- (void)setPdfVersionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)version_ {
  
#line 115
  if (catalog_version_ == nil || [catalog_version_ compareToWithId:version_] < 0) {
    self->catalog_version_ = version_;
  }
}


#line 123
- (void)setAppendmodeWithBoolean:(jboolean)appendmode {
  
#line 124
  self->appendmode_ = appendmode;
}


#line 131
- (void)writeHeaderWithComItextpdfTextPdfOutputStreamCounter:(ComItextpdfTextPdfOutputStreamCounter *)os {
  
#line 132
  if (appendmode_) {
    [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os)) writeWithByteArray:IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfInternalPdfVersionImp_HEADER_), 0)];
  }
  else {
    [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os)) writeWithByteArray:IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfInternalPdfVersionImp_HEADER_), 1)];
    [os writeWithByteArray:[self getVersionAsByteArrayWithChar:header_version_]];
    [os writeWithByteArray:IOSObjectArray_Get(ComItextpdfTextPdfInternalPdfVersionImp_HEADER_, 2)];
    headerWasWritten_ = YES;
  }
}


#line 147
- (ComItextpdfTextPdfPdfName *)getVersionAsNameWithChar:(jchar)version_ {
  
#line 148
  switch (version_) {
    case ComItextpdfTextPdfPdfWriter_VERSION_1_2:
    return ComItextpdfTextPdfPdfWriter_get_PDF_VERSION_1_2_();
    case ComItextpdfTextPdfPdfWriter_VERSION_1_3:
    return ComItextpdfTextPdfPdfWriter_get_PDF_VERSION_1_3_();
    case ComItextpdfTextPdfPdfWriter_VERSION_1_4:
    return ComItextpdfTextPdfPdfWriter_get_PDF_VERSION_1_4_();
    case ComItextpdfTextPdfPdfWriter_VERSION_1_5:
    return ComItextpdfTextPdfPdfWriter_get_PDF_VERSION_1_5_();
    case ComItextpdfTextPdfPdfWriter_VERSION_1_6:
    return ComItextpdfTextPdfPdfWriter_get_PDF_VERSION_1_6_();
    case ComItextpdfTextPdfPdfWriter_VERSION_1_7:
    return ComItextpdfTextPdfPdfWriter_get_PDF_VERSION_1_7_();
    default:
    return ComItextpdfTextPdfPdfWriter_get_PDF_VERSION_1_4_();
  }
}


#line 170
- (IOSByteArray *)getVersionAsByteArrayWithChar:(jchar)version_ {
  
#line 171
  return [ComItextpdfTextDocWriter getISOBytesWithNSString:[((NSString *) nil_chk([((ComItextpdfTextPdfPdfName *) nil_chk([self getVersionAsNameWithChar:version_])) description])) substring:1]];
}


#line 175
- (void)addToCatalogWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)catalog {
  if (catalog_version_ != nil) {
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_VERSION_() withComItextpdfTextPdfPdfObject:catalog_version_];
  }
  if (extensions_ != nil) {
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EXTENSIONS_() withComItextpdfTextPdfPdfObject:extensions_];
  }
}


#line 188
- (void)addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:(ComItextpdfTextPdfPdfDeveloperExtension *)de {
  
#line 189
  if (extensions_ == nil) {
    extensions_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  }
  else {
    ComItextpdfTextPdfPdfDictionary *extension = [extensions_ getAsDictWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfPdfDeveloperExtension *) nil_chk(de)) getPrefix]];
    if (extension != nil) {
      jint diff = [((ComItextpdfTextPdfPdfName *) nil_chk([de getBaseversion])) compareToWithId:[extension getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEVERSION_()]];
      if (diff < 0)
#line 197
      return;
      diff = [de getExtensionLevel] - [((ComItextpdfTextPdfPdfNumber *) nil_chk([extension getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EXTENSIONLEVEL_()])) intValue];
      if (diff <= 0)
#line 200
      return;
    }
  }
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(extensions_)) putWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfPdfDeveloperExtension *) nil_chk(de)) getPrefix] withComItextpdfTextPdfPdfObject:[de getDeveloperExtensions]];
}


#line 206
- (jchar)getVersion {
  
#line 207
  return version__;
}

- (instancetype)init {
  if (self = [super init]) {
    headerWasWritten_ =
#line 73
    NO;
    appendmode_ =
#line 75
    NO;
    header_version_ =
#line 77
    ComItextpdfTextPdfPdfWriter_VERSION_1_4;
    catalog_version_ =
#line 79
    nil;
    version__ =
#line 81
    ComItextpdfTextPdfPdfWriter_VERSION_1_4;
    extensions_ =
#line 87
    nil;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfInternalPdfVersionImp *)other {
  [super copyAllFieldsTo:other];
  other->appendmode_ = appendmode_;
  other->catalog_version_ = catalog_version_;
  other->extensions_ = extensions_;
  other->headerWasWritten_ = headerWasWritten_;
  other->header_version_ = header_version_;
  other->version__ = version__;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfInternalPdfVersionImp class]) {
    ComItextpdfTextPdfInternalPdfVersionImp_HEADER_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 67
      [ComItextpdfTextDocWriter getISOBytesWithNSString:@"\n"],
#line 68
      [ComItextpdfTextDocWriter getISOBytesWithNSString:@"%PDF-"],
#line 69
      [ComItextpdfTextDocWriter getISOBytesWithNSString:@"\n%\u00e2\u00e3\u00cf\u00d3\n"] } count:3 type:[IOSByteArray iosClass]];
      ComItextpdfTextPdfInternalPdfVersionImp_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setPdfVersionWithChar:", "setPdfVersion", "V", 0x1, NULL },
    { "setAtLeastPdfVersionWithChar:", "setAtLeastPdfVersion", "V", 0x1, NULL },
    { "setPdfVersionWithComItextpdfTextPdfPdfName:", "setPdfVersion", "V", 0x1, NULL },
    { "setAppendmodeWithBoolean:", "setAppendmode", "V", 0x1, NULL },
    { "writeHeaderWithComItextpdfTextPdfOutputStreamCounter:", "writeHeader", "V", 0x1, "Ljava.io.IOException;" },
    { "getVersionAsNameWithChar:", "getVersionAsName", "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "getVersionAsByteArrayWithChar:", "getVersionAsByteArray", "[B", 0x1, NULL },
    { "addToCatalogWithComItextpdfTextPdfPdfDictionary:", "addToCatalog", "V", 0x1, NULL },
    { "addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:", "addDeveloperExtension", "V", 0x1, NULL },
    { "getVersion", NULL, "C", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HEADER_", NULL, 0x19, "[[B", &ComItextpdfTextPdfInternalPdfVersionImp_HEADER_,  },
    { "headerWasWritten_", NULL, 0x4, "Z", NULL,  },
    { "appendmode_", NULL, 0x4, "Z", NULL,  },
    { "header_version_", NULL, 0x4, "C", NULL,  },
    { "catalog_version_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "version__", "version", 0x4, "C", NULL,  },
    { "extensions_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfInternalPdfVersionImp = { "PdfVersionImp", "com.itextpdf.text.pdf.internal", NULL, 0x1, 11, methods, 7, fields, 0, NULL};
  return &_ComItextpdfTextPdfInternalPdfVersionImp;
}

@end
