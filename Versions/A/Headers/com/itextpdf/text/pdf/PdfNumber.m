//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfNumber.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfNumber.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "java/lang/Double.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"


#line 60
@implementation ComItextpdfTextPdfPdfNumber


#line 77
- (instancetype)initWithNSString:(NSString *)content {
  if (self =
#line 78
  [super initWithInt:ComItextpdfTextPdfPdfObject_NUMBER]) {
    
#line 79
    @try {
      value_ = [JavaLangDouble parseDoubleWithNSString:[((NSString *) nil_chk(content)) trim]];
      [self setContentWithNSString:content];
    }
    @catch (JavaLangNumberFormatException *nfe) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.is.not.a.valid.number.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ content, [((JavaLangNumberFormatException *) nil_chk(nfe)) description] } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  return self;
}


#line 93
- (instancetype)initWithInt:(jint)value {
  if (self =
#line 94
  [super initWithInt:ComItextpdfTextPdfPdfObject_NUMBER]) {
    
#line 95
    self->value_ = value;
    
#line 96
    [self setContentWithNSString:[NSString valueOfInt:value]];
  }
  return self;
}


#line 104
- (instancetype)initWithLong:(jlong)value {
  if (self =
#line 105
  [super initWithInt:ComItextpdfTextPdfPdfObject_NUMBER]) {
    self->value_ = value;
    
#line 107
    [self setContentWithNSString:[NSString valueOfLong:value]];
  }
  return self;
}


#line 115
- (instancetype)initComItextpdfTextPdfPdfNumberWithDouble:(jdouble)value {
  if (self =
#line 116
  [super initWithInt:ComItextpdfTextPdfPdfObject_NUMBER]) {
    
#line 117
    self->value_ = value;
    
#line 118
    [self setContentWithNSString:[ComItextpdfTextPdfByteBuffer formatDoubleWithDouble:value]];
  }
  return self;
}

- (instancetype)initWithDouble:(jdouble)value {
  return [self initComItextpdfTextPdfPdfNumberWithDouble:
#line 115
value];
}


#line 126
- (instancetype)initWithFloat:(jfloat)value {
  return
#line 127
  [self initComItextpdfTextPdfPdfNumberWithDouble:(jdouble) value];
}


#line 137
- (jint)intValue {
  
#line 138
  return J2ObjCFpToInt(value_);
}


#line 146
- (jlong)longValue {
  
#line 147
  return J2ObjCFpToLong(value_);
}


#line 155
- (jdouble)doubleValue {
  
#line 156
  return value_;
}


#line 164
- (jfloat)floatValue {
  
#line 165
  return (jfloat) value_;
}


#line 173
- (void)increment {
  
#line 174
  value_ += 1.0;
  [self setContentWithNSString:[ComItextpdfTextPdfByteBuffer formatDoubleWithDouble:value_]];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfNumber *)other {
  [super copyAllFieldsTo:other];
  other->value_ = value_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "PdfNumber", NULL, 0x1, NULL },
    { "initWithInt:", "PdfNumber", NULL, 0x1, NULL },
    { "initWithLong:", "PdfNumber", NULL, 0x1, NULL },
    { "initWithDouble:", "PdfNumber", NULL, 0x1, NULL },
    { "initWithFloat:", "PdfNumber", NULL, 0x1, NULL },
    { "intValue", NULL, "I", 0x1, NULL },
    { "longValue", NULL, "J", 0x1, NULL },
    { "doubleValue", NULL, "D", 0x1, NULL },
    { "floatValue", NULL, "F", 0x1, NULL },
    { "increment", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x2, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfNumber = { "PdfNumber", "com.itextpdf.text.pdf", NULL, 0x1, 10, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfNumber;
}

@end
