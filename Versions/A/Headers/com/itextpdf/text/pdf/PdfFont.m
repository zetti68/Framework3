//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfFont.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfFont.java"

#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfFont.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"


#line 65
@implementation ComItextpdfTextPdfPdfFont


#line 78
- (instancetype)initWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf
                                         withFloat:(jfloat)size {
  if (self = [super init]) {
    hScale_ =
#line 74
    1;
    
#line 79
    self->size__ = size;
    
#line 80
    font_ = bf;
  }
  return self;
}


#line 92
- (jint)compareToWithId:(ComItextpdfTextPdfPdfFont *)pdfFont {
  if (pdfFont != nil && ![pdfFont isKindOfClass:[ComItextpdfTextPdfPdfFont class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  
#line 93
  if (pdfFont == nil) {
    return -1;
  }
  @try {
    if (font_ != ((ComItextpdfTextPdfPdfFont *) nil_chk(pdfFont))->font_) {
      return 1;
    }
    if ([self size] != [pdfFont size]) {
      return 2;
    }
    return 0;
  }
  @catch (JavaLangClassCastException *cce) {
    return -2;
  }
}


#line 116
- (jfloat)size {
  
#line 117
  return size__;
}


#line 126
- (jfloat)width {
  
#line 127
  return [self widthWithInt:' '];
}


#line 137
- (jfloat)widthWithInt:(jint)character {
  
#line 138
  return [((ComItextpdfTextPdfBaseFont *) nil_chk(font_)) getWidthPointWithInt:character withFloat:size__] * hScale_;
}


#line 141
- (jfloat)widthWithNSString:(NSString *)s {
  
#line 142
  return [((ComItextpdfTextPdfBaseFont *) nil_chk(font_)) getWidthPointWithNSString:s withFloat:size__] * hScale_;
}


#line 145
- (ComItextpdfTextPdfBaseFont *)getFont {
  
#line 146
  return font_;
}


#line 149
+ (ComItextpdfTextPdfPdfFont *)getDefaultFont {
  
#line 150
  @try {
    ComItextpdfTextPdfBaseFont *bf = [ComItextpdfTextPdfBaseFont createFontWithNSString:ComItextpdfTextPdfBaseFont_get_HELVETICA_() withNSString:ComItextpdfTextPdfBaseFont_get_WINANSI_() withBoolean:NO];
    return [[ComItextpdfTextPdfPdfFont alloc] initWithComItextpdfTextPdfBaseFont:bf withFloat:12];
  }
  @catch (JavaLangException *ee) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ee];
  }
}


#line 158
- (void)setHorizontalScalingWithFloat:(jfloat)hScale {
  
#line 159
  self->hScale_ = hScale;
}


#line 165
- (jfloat)getHorizontalScaling {
  
#line 166
  return hScale_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfFont *)other {
  [super copyAllFieldsTo:other];
  other->font_ = font_;
  other->hScale_ = hScale_;
  other->size__ = size__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfBaseFont:withFloat:", "PdfFont", NULL, 0x0, NULL },
    { "compareToWithComItextpdfTextPdfPdfFont:", "compareTo", "I", 0x1, NULL },
    { "size", NULL, "F", 0x0, NULL },
    { "width", NULL, "F", 0x0, NULL },
    { "widthWithInt:", "width", "F", 0x0, NULL },
    { "widthWithNSString:", "width", "F", 0x0, NULL },
    { "getFont", NULL, "Lcom.itextpdf.text.pdf.BaseFont;", 0x0, NULL },
    { "getDefaultFont", NULL, "Lcom.itextpdf.text.pdf.PdfFont;", 0x8, NULL },
    { "setHorizontalScalingWithFloat:", "setHorizontalScaling", "V", 0x0, NULL },
    { "getHorizontalScaling", NULL, "F", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "font_", NULL, 0x2, "Lcom.itextpdf.text.pdf.BaseFont;", NULL,  },
    { "size__", "size", 0x2, "F", NULL,  },
    { "hScale_", NULL, 0x4, "F", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfFont = { "PdfFont", "com.itextpdf.text.pdf", NULL, 0x0, 10, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfFont;
}

@end
