//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/Pfm2afm.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/Pfm2afm.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/Pfm2afm.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintWriter.h"
#include "java/lang/StringBuffer.h"


#line 150
@implementation ComItextpdfTextPdfPfm2afm


#line 155
- (instancetype)initWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)inArg
                                           withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if (self = [super init]) {
    Win2PSStd_ = [IOSIntArray arrayWithInts:(jint[]){
#line 504
      0, 0, 0, 0, 197, 198, 199, 0, 202, 0, 205, 206, 207, 0, 0, 0,
#line 505
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 506
      32, 33, 34, 35, 36, 37, 38, 169, 40, 41, 42, 43, 44, 45, 46, 47,
#line 507
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
#line 508
      64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
#line 509
      80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#line 510
      193, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
#line 511
      112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
#line 512
      128, 0, 184, 166, 185, 188, 178, 179, 195, 189, 0, 172, 234, 0, 0, 0,
#line 513
      0, 96, 0, 170, 186, 183, 177, 208, 196, 0, 0, 173, 250, 0, 0, 0,
#line 514
      0, 161, 162, 163, 168, 165, 0, 167, 200, 0, 227, 171, 0, 0, 0, 197,
#line 515
      0, 0, 0, 0, 194, 0, 182, 180, 203, 0, 235, 187, 0, 0, 0, 191,
#line 516
      0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 517
      0, 0, 0, 0, 0, 0, 0, 0, 233, 0, 0, 0, 0, 0, 0, 251,
#line 518
      0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 519
      0, 0, 0, 0, 0, 0, 0, 0, 249, 0, 0, 0, 0, 0, 0, 0 } count:256];
      WinClass_ = [IOSIntArray arrayWithInts:(jint[]){
#line 528
        0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0,
#line 529
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 530
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 531
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 532
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 533
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 534
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 535
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
#line 536
        0, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0,
#line 537
        0, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2,
#line 538
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 539
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 540
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 541
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 542
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
#line 543
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } count:256];
        WinChars_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 551
          @"W00",
#line 552
          @"W01",
#line 553
          @"W02",
#line 554
          @"W03",
#line 555
          @"macron",
#line 556
          @"breve",
#line 557
          @"dotaccent",
#line 558
          @"W07",
#line 559
          @"ring",
#line 560
          @"W09",
#line 561
          @"W0a",
#line 562
          @"W0b",
#line 563
          @"W0c",
#line 564
          @"W0d",
#line 565
          @"W0e",
#line 566
          @"W0f",
#line 567
          @"hungarumlaut",
#line 568
          @"ogonek",
#line 569
          @"caron",
#line 570
          @"W13",
#line 571
          @"W14",
#line 572
          @"W15",
#line 573
          @"W16",
#line 574
          @"W17",
#line 575
          @"W18",
#line 576
          @"W19",
#line 577
          @"W1a",
#line 578
          @"W1b",
#line 579
          @"W1c",
#line 580
          @"W1d",
#line 581
          @"W1e",
#line 582
          @"W1f",
#line 583
          @"space",
#line 584
          @"exclam",
#line 585
          @"quotedbl",
#line 586
          @"numbersign",
#line 587
          @"dollar",
#line 588
          @"percent",
#line 589
          @"ampersand",
#line 590
          @"quotesingle",
#line 591
          @"parenleft",
#line 592
          @"parenright",
#line 593
          @"asterisk",
#line 594
          @"plus",
#line 595
          @"comma",
#line 596
          @"hyphen",
#line 597
          @"period",
#line 598
          @"slash",
#line 599
          @"zero",
#line 600
          @"one",
#line 601
          @"two",
#line 602
          @"three",
#line 603
          @"four",
#line 604
          @"five",
#line 605
          @"six",
#line 606
          @"seven",
#line 607
          @"eight",
#line 608
          @"nine",
#line 609
          @"colon",
#line 610
          @"semicolon",
#line 611
          @"less",
#line 612
          @"equal",
#line 613
          @"greater",
#line 614
          @"question",
#line 615
          @"at",
#line 616
          @"A",
#line 617
          @"B",
#line 618
          @"C",
#line 619
          @"D",
#line 620
          @"E",
#line 621
          @"F",
#line 622
          @"G",
#line 623
          @"H",
#line 624
          @"I",
#line 625
          @"J",
#line 626
          @"K",
#line 627
          @"L",
#line 628
          @"M",
#line 629
          @"N",
#line 630
          @"O",
#line 631
          @"P",
#line 632
          @"Q",
#line 633
          @"R",
#line 634
          @"S",
#line 635
          @"T",
#line 636
          @"U",
#line 637
          @"V",
#line 638
          @"W",
#line 639
          @"X",
#line 640
          @"Y",
#line 641
          @"Z",
#line 642
          @"bracketleft",
#line 643
          @"backslash",
#line 644
          @"bracketright",
#line 645
          @"asciicircum",
#line 646
          @"underscore",
#line 647
          @"grave",
#line 648
          @"a",
#line 649
          @"b",
#line 650
          @"c",
#line 651
          @"d",
#line 652
          @"e",
#line 653
          @"f",
#line 654
          @"g",
#line 655
          @"h",
#line 656
          @"i",
#line 657
          @"j",
#line 658
          @"k",
#line 659
          @"l",
#line 660
          @"m",
#line 661
          @"n",
#line 662
          @"o",
#line 663
          @"p",
#line 664
          @"q",
#line 665
          @"r",
#line 666
          @"s",
#line 667
          @"t",
#line 668
          @"u",
#line 669
          @"v",
#line 670
          @"w",
#line 671
          @"x",
#line 672
          @"y",
#line 673
          @"z",
#line 674
          @"braceleft",
#line 675
          @"bar",
#line 676
          @"braceright",
#line 677
          @"asciitilde",
#line 678
          @"W7f",
#line 679
          @"euro",
#line 680
          @"W81",
#line 681
          @"quotesinglbase",
#line 682
          @"florin",
#line 683
          @"quotedblbase",
#line 684
          @"ellipsis",
#line 685
          @"dagger",
#line 686
          @"daggerdbl",
#line 687
          @"circumflex",
#line 688
          @"perthousand",
#line 689
          @"Scaron",
#line 690
          @"guilsinglleft",
#line 691
          @"OE",
#line 692
          @"W8d",
#line 693
          @"Zcaron",
#line 694
          @"W8f",
#line 695
          @"W90",
#line 696
          @"quoteleft",
#line 697
          @"quoteright",
#line 698
          @"quotedblleft",
#line 699
          @"quotedblright",
#line 700
          @"bullet",
#line 701
          @"endash",
#line 702
          @"emdash",
#line 703
          @"tilde",
#line 704
          @"trademark",
#line 705
          @"scaron",
#line 706
          @"guilsinglright",
#line 707
          @"oe",
#line 708
          @"W9d",
#line 709
          @"zcaron",
#line 710
          @"Ydieresis",
#line 711
          @"reqspace",
#line 712
          @"exclamdown",
#line 713
          @"cent",
#line 714
          @"sterling",
#line 715
          @"currency",
#line 716
          @"yen",
#line 717
          @"brokenbar",
#line 718
          @"section",
#line 719
          @"dieresis",
#line 720
          @"copyright",
#line 721
          @"ordfeminine",
#line 722
          @"guillemotleft",
#line 723
          @"logicalnot",
#line 724
          @"syllable",
#line 725
          @"registered",
#line 726
          @"macron",
#line 727
          @"degree",
#line 728
          @"plusminus",
#line 729
          @"twosuperior",
#line 730
          @"threesuperior",
#line 731
          @"acute",
#line 732
          @"mu",
#line 733
          @"paragraph",
#line 734
          @"periodcentered",
#line 735
          @"cedilla",
#line 736
          @"onesuperior",
#line 737
          @"ordmasculine",
#line 738
          @"guillemotright",
#line 739
          @"onequarter",
#line 740
          @"onehalf",
#line 741
          @"threequarters",
#line 742
          @"questiondown",
#line 743
          @"Agrave",
#line 744
          @"Aacute",
#line 745
          @"Acircumflex",
#line 746
          @"Atilde",
#line 747
          @"Adieresis",
#line 748
          @"Aring",
#line 749
          @"AE",
#line 750
          @"Ccedilla",
#line 751
          @"Egrave",
#line 752
          @"Eacute",
#line 753
          @"Ecircumflex",
#line 754
          @"Edieresis",
#line 755
          @"Igrave",
#line 756
          @"Iacute",
#line 757
          @"Icircumflex",
#line 758
          @"Idieresis",
#line 759
          @"Eth",
#line 760
          @"Ntilde",
#line 761
          @"Ograve",
#line 762
          @"Oacute",
#line 763
          @"Ocircumflex",
#line 764
          @"Otilde",
#line 765
          @"Odieresis",
#line 766
          @"multiply",
#line 767
          @"Oslash",
#line 768
          @"Ugrave",
#line 769
          @"Uacute",
#line 770
          @"Ucircumflex",
#line 771
          @"Udieresis",
#line 772
          @"Yacute",
#line 773
          @"Thorn",
#line 774
          @"germandbls",
#line 775
          @"agrave",
#line 776
          @"aacute",
#line 777
          @"acircumflex",
#line 778
          @"atilde",
#line 779
          @"adieresis",
#line 780
          @"aring",
#line 781
          @"ae",
#line 782
          @"ccedilla",
#line 783
          @"egrave",
#line 784
          @"eacute",
#line 785
          @"ecircumflex",
#line 786
          @"edieresis",
#line 787
          @"igrave",
#line 788
          @"iacute",
#line 789
          @"icircumflex",
#line 790
          @"idieresis",
#line 791
          @"eth",
#line 792
          @"ntilde",
#line 793
          @"ograve",
#line 794
          @"oacute",
#line 795
          @"ocircumflex",
#line 796
          @"otilde",
#line 797
          @"odieresis",
#line 798
          @"divide",
#line 799
          @"oslash",
#line 800
          @"ugrave",
#line 801
          @"uacute",
#line 802
          @"ucircumflex",
#line 803
          @"udieresis",
#line 804
          @"yacute",
#line 805
          @"thorn",
#line 806
          @"ydieresis" } count:256 type:[IOSClass classWithClass:[NSString class]]];
          
#line 156
          self->in_ = inArg;
          
#line 157
          self->out_ = [[JavaIoPrintWriter alloc] initWithJavaIoWriter:[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:outArg withNSString:@"ISO-8859-1"]];
        }
        return self;
      }


#line 166
+ (void)convertWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)inArg
                                      withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  
#line 167
  ComItextpdfTextPdfPfm2afm *p = [[ComItextpdfTextPdfPfm2afm alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:inArg withJavaIoOutputStream:outArg];
  [p openpfm];
  [p putheader];
  [p putchartab];
  [p putkerntab];
  [p puttrailer];
  [((JavaIoPrintWriter *) nil_chk(p->out_)) flush];
}


#line 191
- (NSString *)readStringWithInt:(jint)n {
  
#line 192
  IOSByteArray *b = [IOSByteArray arrayWithLength:n];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(in_)) readFullyWithByteArray:b];
  jint k;
  for (k = 0; k < b->size_; ++k) {
    if (IOSByteArray_Get(b, k) == 0)
#line 197
    break;
  }
  return [NSString stringWithBytes:b offset:0 length:k charsetName:@"ISO-8859-1"];
}


#line 202
- (NSString *)readString {
  
#line 203
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  while (YES) {
    jint c = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(in_)) read];
    if (c <= 0)
#line 207
    break;
    (void) [buf appendWithChar:(jchar) c];
  }
  return [buf description];
}


#line 213
- (void)outvalWithInt:(jint)n {
  
#line 214
  [((JavaIoPrintWriter *) nil_chk(out_)) printWithChar:' '];
  [out_ printWithInt:n];
}


#line 221
- (void)outcharWithInt:(jint)code
               withInt:(jint)width
          withNSString:(NSString *)name {
  
#line 222
  [((JavaIoPrintWriter *) nil_chk(out_)) printWithNSString:@"C "];
  [self outvalWithInt:code];
  [out_ printWithNSString:@" ; WX "];
  [self outvalWithInt:width];
  if (name != nil) {
    [out_ printWithNSString:@" ; N "];
    [out_ printWithNSString:name];
  }
  [out_ printWithNSString:@" ;\n"];
}


#line 233
- (void)openpfm {
  
#line 234
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(in_)) seekWithLong:0];
  vers_ = [in_ readShortLE];
  h_len_ = [in_ readIntLE];
  copyright_ = [self readStringWithInt:60];
  type_ = [in_ readShortLE];
  points_ = [in_ readShortLE];
  verres_ = [in_ readShortLE];
  horres_ = [in_ readShortLE];
  ascent_ = [in_ readShortLE];
  intleading_ = [in_ readShortLE];
  extleading_ = [in_ readShortLE];
  italic_ = (jbyte) [in_ read];
  uline_ = (jbyte) [in_ read];
  overs_ = (jbyte) [in_ read];
  weight_ = [in_ readShortLE];
  charset_ = (jbyte) [in_ read];
  pixwidth_ = [in_ readShortLE];
  pixheight_ = [in_ readShortLE];
  kind_ = (jbyte) [in_ read];
  avgwidth_ = [in_ readShortLE];
  maxwidth_ = [in_ readShortLE];
  firstchar_ = [in_ read];
  lastchar_ = [in_ read];
  defchar_ = (jbyte) [in_ read];
  brkchar_ = (jbyte) [in_ read];
  widthby_ = [in_ readShortLE];
  device_ = [in_ readIntLE];
  face_ = [in_ readIntLE];
  bits_ = [in_ readIntLE];
  bitoff_ = [in_ readIntLE];
  extlen_ = [in_ readShortLE];
  psext_ = [in_ readIntLE];
  chartab_ = [in_ readIntLE];
  res1_ = [in_ readIntLE];
  kernpairs_ = [in_ readIntLE];
  res2_ = [in_ readIntLE];
  fontname_ = [in_ readIntLE];
  if (h_len_ != [in_ length] || extlen_ != 30 || fontname_ < 75 || fontname_ > 512)
#line 272
  @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"not.a.valid.pfm.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [in_ seekWithLong:psext_ + 14];
  capheight_ = [in_ readShortLE];
  xheight_ = [in_ readShortLE];
  ascender_ = [in_ readShortLE];
  descender_ = [in_ readShortLE];
}


#line 280
- (void)putheader {
  
#line 281
  [((JavaIoPrintWriter *) nil_chk(out_)) printWithNSString:@"StartFontMetrics 2.0\n"];
  if (((jint) [((NSString *) nil_chk(copyright_)) length]) > 0)
#line 283
  [out_ printWithNSString:JreStrcat("$$C", @"Comment ", copyright_, 0x000a)];
  [out_ printWithNSString:@"FontName "];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(in_)) seekWithLong:fontname_];
  NSString *fname = [self readString];
  [out_ printWithNSString:fname];
  [out_ printWithNSString:@"\nEncodingScheme "];
  if (charset_ != 0)
#line 290
  [out_ printWithNSString:@"FontSpecific\n"];
  else
#line 292
  [out_ printWithNSString:@"AdobeStandardEncoding\n"];
  
#line 298
  [out_ printWithNSString:JreStrcat("$$", @"FullName ", [((NSString *) nil_chk(fname)) replace:'-' withChar:' '])];
  if (face_ != 0) {
    [in_ seekWithLong:face_];
    [out_ printWithNSString:JreStrcat("$$", @"\nFamilyName ", [self readString])];
  }
  
#line 304
  [out_ printWithNSString:@"\nWeight "];
  if (weight_ > 475 || [((NSString *) nil_chk([fname lowercaseString])) indexOfString:@"bold"] >= 0)
#line 306
  [out_ printWithNSString:@"Bold"];
  else if ((weight_ < 325 && weight_ != 0) || [((NSString *) nil_chk([fname lowercaseString])) indexOfString:@"light"] >= 0)
#line 308
  [out_ printWithNSString:@"Light"];
  else if ([((NSString *) nil_chk([fname lowercaseString])) indexOfString:@"black"] >= 0)
#line 310
  [out_ printWithNSString:@"Black"];
  else
#line 312
  [out_ printWithNSString:@"Medium"];
  
#line 314
  [out_ printWithNSString:@"\nItalicAngle "];
  if (italic_ != 0 || [((NSString *) nil_chk([fname lowercaseString])) indexOfString:@"italic"] >= 0)
#line 316
  [out_ printWithNSString:@"-12.00"];
  else
#line 320
  [out_ printWithNSString:@"0"];
  
#line 326
  [out_ printWithNSString:@"\nIsFixedPitch "];
  if ((kind_ & 1) == 0 ||
#line 328
  avgwidth_ == maxwidth_) {
    [out_ printWithNSString:@"true"];
    isMono_ = YES;
  }
  else {
    [out_ printWithNSString:@"false"];
    isMono_ = NO;
  }
  
#line 342
  [out_ printWithNSString:@"\nFontBBox"];
  if (isMono_)
#line 344
  [self outvalWithInt:-20];
  else
#line 346
  [self outvalWithInt:-100];
  [self outvalWithInt:-(descender_ + 5)];
  [self outvalWithInt:maxwidth_ + 10];
  [self outvalWithInt:ascent_ + 5];
  
#line 354
  [out_ printWithNSString:@"\nCapHeight"];
  [self outvalWithInt:capheight_];
  [out_ printWithNSString:@"\nXHeight"];
  [self outvalWithInt:xheight_];
  [out_ printWithNSString:@"\nDescender"];
  [self outvalWithInt:-descender_];
  [out_ printWithNSString:@"\nAscender"];
  [self outvalWithInt:ascender_];
  [out_ printWithChar:0x000a];
}


#line 365
- (void)putchartab {
  
#line 366
  jint count = lastchar_ - firstchar_ + 1;
  IOSIntArray *ctabs = [IOSIntArray arrayWithLength:count];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(in_)) seekWithLong:chartab_];
  for (jint k = 0; k < count; ++k)
#line 370
  *IOSIntArray_GetRef(ctabs, k) = [in_ readUnsignedShortLE];
  IOSIntArray *back = [IOSIntArray arrayWithLength:256];
  if (charset_ == 0) {
    for (jint i = firstchar_; i <= lastchar_; ++i) {
      if (IOSIntArray_Get(nil_chk(Win2PSStd_), i) != 0)
#line 375
      *IOSIntArray_GetRef(back, IOSIntArray_Get(Win2PSStd_, i)) = i;
    }
  }
  
#line 379
  [((JavaIoPrintWriter *) nil_chk(out_)) printWithNSString:@"StartCharMetrics"];
  [self outvalWithInt:count];
  [out_ printWithChar:0x000a];
  
#line 384
  if (charset_ != 0) {
    
#line 389
    for (jint i = firstchar_; i <= lastchar_; i++) {
      if (IOSIntArray_Get(ctabs, i - firstchar_) != 0) {
        [self outcharWithInt:i withInt:IOSIntArray_Get(ctabs, i - firstchar_) withNSString:nil];
      }
    }
  }
  else {
    for (jint i = 0; i < 256; i++) {
      jint j = IOSIntArray_Get(back, i);
      if (j != 0) {
        [self outcharWithInt:i withInt:IOSIntArray_Get(ctabs, j - firstchar_) withNSString:IOSObjectArray_Get(nil_chk(WinChars_), j)];
        *IOSIntArray_GetRef(ctabs, j - firstchar_) = 0;
      }
    }
    
#line 404
    for (jint i = firstchar_; i <= lastchar_; i++) {
      if (IOSIntArray_Get(ctabs, i - firstchar_) != 0) {
        [self outcharWithInt:-1 withInt:IOSIntArray_Get(ctabs, i - firstchar_) withNSString:IOSObjectArray_Get(nil_chk(WinChars_), i)];
      }
    }
  }
  
#line 411
  [out_ printWithNSString:@"EndCharMetrics\n"];
}


#line 415
- (void)putkerntab {
  
#line 416
  if (kernpairs_ == 0)
#line 417
  return;
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(in_)) seekWithLong:kernpairs_];
  jint count = [in_ readUnsignedShortLE];
  jint nzero = 0;
  IOSIntArray *kerns = [IOSIntArray arrayWithLength:count * 3];
  for (jint k = 0; k < kerns->size_; ) {
    *IOSIntArray_GetRef(kerns, k++) = [in_ read];
    *IOSIntArray_GetRef(kerns, k++) = [in_ read];
    if ((*IOSIntArray_GetRef(kerns, k++) = [in_ readShortLE]) != 0)
#line 426
    ++nzero;
  }
  if (nzero == 0)
#line 429
  return;
  [((JavaIoPrintWriter *) nil_chk(out_)) printWithNSString:@"StartKernData\nStartKernPairs"];
  [self outvalWithInt:nzero];
  [out_ printWithChar:0x000a];
  for (jint k = 0; k < kerns->size_; k += 3) {
    if (IOSIntArray_Get(kerns, k + 2) != 0) {
      [out_ printWithNSString:@"KPX "];
      [out_ printWithNSString:IOSObjectArray_Get(nil_chk(WinChars_), IOSIntArray_Get(kerns, k))];
      [out_ printWithChar:' '];
      [out_ printWithNSString:IOSObjectArray_Get(WinChars_, IOSIntArray_Get(kerns, k + 1))];
      [self outvalWithInt:IOSIntArray_Get(kerns, k + 2)];
      [out_ printWithChar:0x000a];
    }
  }
  
#line 444
  [out_ printWithNSString:@"EndKernPairs\nEndKernData\n"];
}


#line 448
- (void)puttrailer {
  
#line 449
  [((JavaIoPrintWriter *) nil_chk(out_)) printWithNSString:@"EndFontMetrics\n"];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPfm2afm *)other {
  [super copyAllFieldsTo:other];
  other->Win2PSStd_ = Win2PSStd_;
  other->WinChars_ = WinChars_;
  other->WinClass_ = WinClass_;
  other->ascender_ = ascender_;
  other->ascent_ = ascent_;
  other->avgwidth_ = avgwidth_;
  other->bitoff_ = bitoff_;
  other->bits_ = bits_;
  other->brkchar_ = brkchar_;
  other->capheight_ = capheight_;
  other->charset_ = charset_;
  other->chartab_ = chartab_;
  other->copyright_ = copyright_;
  other->defchar_ = defchar_;
  other->descender_ = descender_;
  other->device_ = device_;
  other->extleading_ = extleading_;
  other->extlen_ = extlen_;
  other->face_ = face_;
  other->firstchar_ = firstchar_;
  other->fontname_ = fontname_;
  other->h_len_ = h_len_;
  other->horres_ = horres_;
  other->in_ = in_;
  other->intleading_ = intleading_;
  other->isMono_ = isMono_;
  other->italic_ = italic_;
  other->kernpairs_ = kernpairs_;
  other->kind_ = kind_;
  other->lastchar_ = lastchar_;
  other->maxwidth_ = maxwidth_;
  other->out_ = out_;
  other->overs_ = overs_;
  other->pixheight_ = pixheight_;
  other->pixwidth_ = pixwidth_;
  other->points_ = points_;
  other->psext_ = psext_;
  other->res1_ = res1_;
  other->res2_ = res2_;
  other->type_ = type_;
  other->uline_ = uline_;
  other->verres_ = verres_;
  other->vers_ = vers_;
  other->weight_ = weight_;
  other->widthby_ = widthby_;
  other->xheight_ = xheight_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfRandomAccessFileOrArray:withJavaIoOutputStream:", "Pfm2afm", NULL, 0x2, "Ljava.io.IOException;" },
    { "convertWithComItextpdfTextPdfRandomAccessFileOrArray:withJavaIoOutputStream:", "convert", "V", 0x9, "Ljava.io.IOException;" },
    { "readStringWithInt:", "readString", "Ljava.lang.String;", 0x2, "Ljava.io.IOException;" },
    { "readString", NULL, "Ljava.lang.String;", 0x2, "Ljava.io.IOException;" },
    { "outvalWithInt:", "outval", "V", 0x2, NULL },
    { "outcharWithInt:withInt:withNSString:", "outchar", "V", 0x2, NULL },
    { "openpfm", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "putheader", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "putchartab", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "putkerntab", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "puttrailer", NULL, "V", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "in_", NULL, 0x2, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "out_", NULL, 0x2, "Ljava.io.PrintWriter;", NULL,  },
    { "vers_", NULL, 0x2, "S", NULL,  },
    { "h_len_", NULL, 0x2, "I", NULL,  },
    { "copyright_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "type_", NULL, 0x2, "S", NULL,  },
    { "points_", NULL, 0x2, "S", NULL,  },
    { "verres_", NULL, 0x2, "S", NULL,  },
    { "horres_", NULL, 0x2, "S", NULL,  },
    { "ascent_", NULL, 0x2, "S", NULL,  },
    { "intleading_", NULL, 0x2, "S", NULL,  },
    { "extleading_", NULL, 0x2, "S", NULL,  },
    { "italic_", NULL, 0x2, "B", NULL,  },
    { "uline_", NULL, 0x2, "B", NULL,  },
    { "overs_", NULL, 0x2, "B", NULL,  },
    { "weight_", NULL, 0x2, "S", NULL,  },
    { "charset_", NULL, 0x2, "B", NULL,  },
    { "pixwidth_", NULL, 0x2, "S", NULL,  },
    { "pixheight_", NULL, 0x2, "S", NULL,  },
    { "kind_", NULL, 0x2, "B", NULL,  },
    { "avgwidth_", NULL, 0x2, "S", NULL,  },
    { "maxwidth_", NULL, 0x2, "S", NULL,  },
    { "firstchar_", NULL, 0x2, "I", NULL,  },
    { "lastchar_", NULL, 0x2, "I", NULL,  },
    { "defchar_", NULL, 0x2, "B", NULL,  },
    { "brkchar_", NULL, 0x2, "B", NULL,  },
    { "widthby_", NULL, 0x2, "S", NULL,  },
    { "device_", NULL, 0x2, "I", NULL,  },
    { "face_", NULL, 0x2, "I", NULL,  },
    { "bits_", NULL, 0x2, "I", NULL,  },
    { "bitoff_", NULL, 0x2, "I", NULL,  },
    { "extlen_", NULL, 0x2, "S", NULL,  },
    { "psext_", NULL, 0x2, "I", NULL,  },
    { "chartab_", NULL, 0x2, "I", NULL,  },
    { "res1_", NULL, 0x2, "I", NULL,  },
    { "kernpairs_", NULL, 0x2, "I", NULL,  },
    { "res2_", NULL, 0x2, "I", NULL,  },
    { "fontname_", NULL, 0x2, "I", NULL,  },
    { "capheight_", NULL, 0x2, "S", NULL,  },
    { "xheight_", NULL, 0x2, "S", NULL,  },
    { "ascender_", NULL, 0x2, "S", NULL,  },
    { "descender_", NULL, 0x2, "S", NULL,  },
    { "isMono_", NULL, 0x2, "Z", NULL,  },
    { "Win2PSStd_", NULL, 0x2, "[I", NULL,  },
    { "WinClass_", NULL, 0x2, "[I", NULL,  },
    { "WinChars_", NULL, 0x2, "[Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPfm2afm = { "Pfm2afm", "com.itextpdf.text.pdf", NULL, 0x11, 11, methods, 46, fields, 0, NULL};
  return &_ComItextpdfTextPdfPfm2afm;
}

@end
