//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/SimpleBookmark.java
//

#ifndef _ComItextpdfTextPdfSimpleBookmark_H_
#define _ComItextpdfTextPdfSimpleBookmark_H_

#include "J2ObjC_header.h"
#include "com/itextpdf/text/xml/simpleparser/SimpleXMLDocHandler.h"

@class ComItextpdfTextPdfPdfDictionary;
@class ComItextpdfTextPdfPdfIndirectReference;
@class ComItextpdfTextPdfPdfReader;
@class ComItextpdfTextPdfPdfWriter;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaUtilHashMap;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface ComItextpdfTextPdfSimpleBookmark : NSObject < ComItextpdfTextXmlSimpleparserSimpleXMLDocHandler >

#pragma mark Public

+ (void)eliminatePagesWithJavaUtilList:(id<JavaUtilList>)list
                          withIntArray:(IOSIntArray *)pageRange;

- (void)endDocument;

- (void)endElementWithNSString:(NSString *)tag;

+ (void)exportToXMLWithJavaUtilList:(id<JavaUtilList>)list
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                       withNSString:(NSString *)encoding
                        withBoolean:(jboolean)onlyASCII;

+ (void)exportToXMLWithJavaUtilList:(id<JavaUtilList>)list
                   withJavaIoWriter:(JavaIoWriter *)wrt
                       withNSString:(NSString *)encoding
                        withBoolean:(jboolean)onlyASCII;

+ (void)exportToXMLNodeWithJavaUtilList:(id<JavaUtilList>)list
                       withJavaIoWriter:(JavaIoWriter *)outArg
                                withInt:(jint)indent
                            withBoolean:(jboolean)onlyASCII;

+ (id<JavaUtilList>)getBookmarkWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader;

+ (id<JavaUtilList>)getBookmarkWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                           withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)outline
                                                   withBoolean:(jboolean)includeRoot;

+ (id<JavaUtilList>)importFromXMLWithJavaIoInputStream:(JavaIoInputStream *)inArg;

+ (id<JavaUtilList>)importFromXMLWithJavaIoReader:(JavaIoReader *)inArg;

+ (IOSObjectArray *)iterateOutlinesWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                        withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)parent
                                                  withJavaUtilList:(id<JavaUtilList>)kids
                                                       withBoolean:(jboolean)namedAsNames;

+ (void)shiftPageNumbersWithJavaUtilList:(id<JavaUtilList>)list
                                 withInt:(jint)pageShift
                            withIntArray:(IOSIntArray *)pageRange;

- (void)startDocument;

- (void)startElementWithNSString:(NSString *)tag
                 withJavaUtilMap:(id<JavaUtilMap>)h;

- (void)textWithNSString:(NSString *)str;

#pragma mark Package-Private

+ (void)createOutlineActionWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)outline
                                           withJavaUtilHashMap:(JavaUtilHashMap *)map
                               withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                   withBoolean:(jboolean)namedAsNames;

@end

J2OBJC_EMPTY_STATIC_INIT(ComItextpdfTextPdfSimpleBookmark)

FOUNDATION_EXPORT id<JavaUtilList> ComItextpdfTextPdfSimpleBookmark_getBookmarkWithComItextpdfTextPdfPdfReader_(ComItextpdfTextPdfPdfReader *reader);

FOUNDATION_EXPORT id<JavaUtilList> ComItextpdfTextPdfSimpleBookmark_getBookmarkWithComItextpdfTextPdfPdfReader_withComItextpdfTextPdfPdfDictionary_withBoolean_(ComItextpdfTextPdfPdfReader *reader, ComItextpdfTextPdfPdfDictionary *outline, jboolean includeRoot);

FOUNDATION_EXPORT void ComItextpdfTextPdfSimpleBookmark_eliminatePagesWithJavaUtilList_withIntArray_(id<JavaUtilList> list, IOSIntArray *pageRange);

FOUNDATION_EXPORT void ComItextpdfTextPdfSimpleBookmark_shiftPageNumbersWithJavaUtilList_withInt_withIntArray_(id<JavaUtilList> list, jint pageShift, IOSIntArray *pageRange);

FOUNDATION_EXPORT void ComItextpdfTextPdfSimpleBookmark_createOutlineActionWithComItextpdfTextPdfPdfDictionary_withJavaUtilHashMap_withComItextpdfTextPdfPdfWriter_withBoolean_(ComItextpdfTextPdfPdfDictionary *outline, JavaUtilHashMap *map, ComItextpdfTextPdfPdfWriter *writer, jboolean namedAsNames);

FOUNDATION_EXPORT IOSObjectArray *ComItextpdfTextPdfSimpleBookmark_iterateOutlinesWithComItextpdfTextPdfPdfWriter_withComItextpdfTextPdfPdfIndirectReference_withJavaUtilList_withBoolean_(ComItextpdfTextPdfPdfWriter *writer, ComItextpdfTextPdfPdfIndirectReference *parent, id<JavaUtilList> kids, jboolean namedAsNames);

FOUNDATION_EXPORT void ComItextpdfTextPdfSimpleBookmark_exportToXMLNodeWithJavaUtilList_withJavaIoWriter_withInt_withBoolean_(id<JavaUtilList> list, JavaIoWriter *outArg, jint indent, jboolean onlyASCII);

FOUNDATION_EXPORT void ComItextpdfTextPdfSimpleBookmark_exportToXMLWithJavaUtilList_withJavaIoOutputStream_withNSString_withBoolean_(id<JavaUtilList> list, JavaIoOutputStream *outArg, NSString *encoding, jboolean onlyASCII);

FOUNDATION_EXPORT void ComItextpdfTextPdfSimpleBookmark_exportToXMLWithJavaUtilList_withJavaIoWriter_withNSString_withBoolean_(id<JavaUtilList> list, JavaIoWriter *wrt, NSString *encoding, jboolean onlyASCII);

FOUNDATION_EXPORT id<JavaUtilList> ComItextpdfTextPdfSimpleBookmark_importFromXMLWithJavaIoInputStream_(JavaIoInputStream *inArg);

FOUNDATION_EXPORT id<JavaUtilList> ComItextpdfTextPdfSimpleBookmark_importFromXMLWithJavaIoReader_(JavaIoReader *inArg);

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextPdfSimpleBookmark)

#endif // _ComItextpdfTextPdfSimpleBookmark_H_
