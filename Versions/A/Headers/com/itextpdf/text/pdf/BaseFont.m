//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BaseFont.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BaseFont.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/CJKFont.h"
#include "com/itextpdf/text/pdf/DocumentFont.h"
#include "com/itextpdf/text/pdf/EnumerateTTC.h"
#include "com/itextpdf/text/pdf/GlyphList.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/TrueTypeFont.h"
#include "com/itextpdf/text/pdf/TrueTypeFontUnicode.h"
#include "com/itextpdf/text/pdf/Type1Font.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"

BOOL ComItextpdfTextPdfBaseFont_initialized = NO;


#line 60
@implementation ComItextpdfTextPdfBaseFont

NSString * ComItextpdfTextPdfBaseFont_COURIER_ = 
#line 63
@"Courier";
NSString * ComItextpdfTextPdfBaseFont_COURIER_BOLD_ = 
#line 66
@"Courier-Bold";
NSString * ComItextpdfTextPdfBaseFont_COURIER_OBLIQUE_ = 
#line 69
@"Courier-Oblique";
NSString * ComItextpdfTextPdfBaseFont_COURIER_BOLDOBLIQUE_ = 
#line 72
@"Courier-BoldOblique";
NSString * ComItextpdfTextPdfBaseFont_HELVETICA_ = 
#line 75
@"Helvetica";
NSString * ComItextpdfTextPdfBaseFont_HELVETICA_BOLD_ = 
#line 78
@"Helvetica-Bold";
NSString * ComItextpdfTextPdfBaseFont_HELVETICA_OBLIQUE_ = 
#line 81
@"Helvetica-Oblique";
NSString * ComItextpdfTextPdfBaseFont_HELVETICA_BOLDOBLIQUE_ = 
#line 84
@"Helvetica-BoldOblique";
NSString * ComItextpdfTextPdfBaseFont_SYMBOL_ = 
#line 87
@"Symbol";
NSString * ComItextpdfTextPdfBaseFont_TIMES_ROMAN_ = 
#line 90
@"Times-Roman";
NSString * ComItextpdfTextPdfBaseFont_TIMES_BOLD_ = 
#line 93
@"Times-Bold";
NSString * ComItextpdfTextPdfBaseFont_TIMES_ITALIC_ = 
#line 96
@"Times-Italic";
NSString * ComItextpdfTextPdfBaseFont_TIMES_BOLDITALIC_ = 
#line 99
@"Times-BoldItalic";
NSString * ComItextpdfTextPdfBaseFont_ZAPFDINGBATS_ = 
#line 102
@"ZapfDingbats";
NSString * ComItextpdfTextPdfBaseFont_IDENTITY_H_ = 
#line 211
@"Identity-H";
NSString * ComItextpdfTextPdfBaseFont_IDENTITY_V_ = 
#line 214
@"Identity-V";
NSString * ComItextpdfTextPdfBaseFont_CP1250_ = 
#line 217
@"Cp1250";
NSString * ComItextpdfTextPdfBaseFont_CP1252_ = 
#line 220
@"Cp1252";
NSString * ComItextpdfTextPdfBaseFont_CP1257_ = 
#line 223
@"Cp1257";
NSString * ComItextpdfTextPdfBaseFont_WINANSI_ = 
#line 226
@"Cp1252";
NSString * ComItextpdfTextPdfBaseFont_MACROMAN_ = 
#line 229
@"MacRoman";
IOSIntArray * ComItextpdfTextPdfBaseFont_CHAR_RANGE_LATIN_;
IOSIntArray * ComItextpdfTextPdfBaseFont_CHAR_RANGE_ARABIC_;
IOSIntArray * ComItextpdfTextPdfBaseFont_CHAR_RANGE_HEBREW_;
IOSIntArray * ComItextpdfTextPdfBaseFont_CHAR_RANGE_CYRILLIC_;
NSString * ComItextpdfTextPdfBaseFont_RESOURCE_PATH_ = 
#line 247
@"com/itextpdf/text/pdf/fonts/";
NSString * ComItextpdfTextPdfBaseFont_notdef_ = 
#line 263
@".notdef";
JavaUtilHashMap * ComItextpdfTextPdfBaseFont_fontCache_;
JavaUtilHashMap * ComItextpdfTextPdfBaseFont_BuiltinFonts14_;


#line 393
- (instancetype)init {
  if (self = [super init]) {
    widths_ = [IOSIntArray arrayWithLength:
#line 266
    256];
    differences_ = [IOSObjectArray arrayWithLength:
#line 269
    256 type:[IOSClass classWithClass:[NSString class]]];
    unicodeDifferences_ = [IOSCharArray arrayWithLength:
#line 271
    256];
    charBBoxes_ = [IOSObjectArray arrayWithLength:
#line 273
    256 type:[IOSIntArray iosClass]];
    compressionLevel_ =
#line 284
    ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION;
    fontSpecific_ =
#line 291
    YES;
    forceWidthsOutput_ =
#line 302
    NO;
    directTextToByte_ =
#line 307
    NO;
    subset_ =
#line 312
    YES;
    fastWinansi_ =
#line 314
    NO;
    vertical_ =
#line 322
    NO;
  }
  return self;
}


#line 404
+ (ComItextpdfTextPdfBaseFont *)createFont {
  
#line 405
  return [ComItextpdfTextPdfBaseFont createFontWithNSString:ComItextpdfTextPdfBaseFont_HELVETICA_ withNSString:ComItextpdfTextPdfBaseFont_WINANSI_ withBoolean:ComItextpdfTextPdfBaseFont_NOT_EMBEDDED];
}


#line 456
+ (ComItextpdfTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                          withNSString:(NSString *)encoding
                                           withBoolean:(jboolean)embedded {
  
#line 457
  return [ComItextpdfTextPdfBaseFont createFontWithNSString:name withNSString:encoding withBoolean:embedded withBoolean:YES withByteArray:nil withByteArray:nil withBoolean:NO];
}


#line 510
+ (ComItextpdfTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                          withNSString:(NSString *)encoding
                                           withBoolean:(jboolean)embedded
                                           withBoolean:(jboolean)forceRead {
  
#line 511
  return [ComItextpdfTextPdfBaseFont createFontWithNSString:name withNSString:encoding withBoolean:embedded withBoolean:YES withByteArray:nil withByteArray:nil withBoolean:forceRead];
}


#line 564
+ (ComItextpdfTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                          withNSString:(NSString *)encoding
                                           withBoolean:(jboolean)embedded
                                           withBoolean:(jboolean)cached
                                         withByteArray:(IOSByteArray *)ttfAfm
                                         withByteArray:(IOSByteArray *)pfb {
  
#line 565
  return [ComItextpdfTextPdfBaseFont createFontWithNSString:name withNSString:encoding withBoolean:embedded withBoolean:cached withByteArray:ttfAfm withByteArray:pfb withBoolean:NO];
}


#line 621
+ (ComItextpdfTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                          withNSString:(NSString *)encoding
                                           withBoolean:(jboolean)embedded
                                           withBoolean:(jboolean)cached
                                         withByteArray:(IOSByteArray *)ttfAfm
                                         withByteArray:(IOSByteArray *)pfb
                                           withBoolean:(jboolean)noThrow {
  
#line 622
  return [ComItextpdfTextPdfBaseFont createFontWithNSString:name withNSString:encoding withBoolean:embedded withBoolean:cached withByteArray:ttfAfm withByteArray:pfb withBoolean:noThrow withBoolean:NO];
}


#line 679
+ (ComItextpdfTextPdfBaseFont *)createFontWithNSString:(NSString *)name
                                          withNSString:(NSString *)encoding
                                           withBoolean:(jboolean)embedded
                                           withBoolean:(jboolean)cached
                                         withByteArray:(IOSByteArray *)ttfAfm
                                         withByteArray:(IOSByteArray *)pfb
                                           withBoolean:(jboolean)noThrow
                                           withBoolean:(jboolean)forceRead {
  
#line 680
  NSString *nameBase = [ComItextpdfTextPdfBaseFont getBaseNameWithNSString:name];
  encoding = [ComItextpdfTextPdfBaseFont normalizeEncodingWithNSString:encoding];
  jboolean isBuiltinFonts14 = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfBaseFont_BuiltinFonts14_)) containsKeyWithId:name];
  jboolean isCJKFont = isBuiltinFonts14 ? NO : [ComItextpdfTextPdfCJKFont isCJKFontWithNSString:nameBase withNSString:encoding];
  if (isBuiltinFonts14 || isCJKFont)
#line 685
  embedded = NO;
  else if ([((NSString *) nil_chk(encoding)) isEqual:ComItextpdfTextPdfBaseFont_IDENTITY_H_] || [encoding isEqual:ComItextpdfTextPdfBaseFont_IDENTITY_V_])
#line 687
  embedded = YES;
  ComItextpdfTextPdfBaseFont *fontFound = nil;
  ComItextpdfTextPdfBaseFont *fontBuilt = nil;
  NSString *key = JreStrcat("$C$CZ", name, 0x000a, encoding, 0x000a, embedded);
  if (cached) {
    @synchronized(ComItextpdfTextPdfBaseFont_fontCache_) {
      fontFound = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfBaseFont_fontCache_)) getWithId:key];
    }
    if (fontFound != nil)
#line 696
    return fontFound;
  }
  if (isBuiltinFonts14 || [((NSString *) nil_chk([((NSString *) nil_chk(name)) lowercaseString])) hasSuffix:@".afm"] || [((NSString *) nil_chk([name lowercaseString])) hasSuffix:@".pfm"]) {
    fontBuilt = [[ComItextpdfTextPdfType1Font alloc] initWithNSString:name withNSString:encoding withBoolean:embedded withByteArray:ttfAfm withByteArray:pfb withBoolean:forceRead];
    fontBuilt->fastWinansi_ = [((NSString *) nil_chk(encoding)) isEqual:ComItextpdfTextPdfBaseFont_CP1252_];
  }
  else if ([((NSString *) nil_chk([((NSString *) nil_chk(nameBase)) lowercaseString])) hasSuffix:@".ttf"] || [((NSString *) nil_chk([nameBase lowercaseString])) hasSuffix:@".otf"] || [((NSString *) nil_chk([nameBase lowercaseString])) indexOfString:@".ttc,"] > 0) {
    if ([((NSString *) nil_chk(encoding)) isEqual:ComItextpdfTextPdfBaseFont_IDENTITY_H_] || [encoding isEqual:ComItextpdfTextPdfBaseFont_IDENTITY_V_])
#line 704
    fontBuilt = [[ComItextpdfTextPdfTrueTypeFontUnicode alloc] initWithNSString:name withNSString:encoding withBoolean:embedded withByteArray:ttfAfm withBoolean:forceRead];
    else {
      fontBuilt = [[ComItextpdfTextPdfTrueTypeFont alloc] initWithNSString:name withNSString:encoding withBoolean:embedded withByteArray:ttfAfm withBoolean:NO withBoolean:forceRead];
      fontBuilt->fastWinansi_ = [encoding isEqual:ComItextpdfTextPdfBaseFont_CP1252_];
    }
  }
  else if (isCJKFont)
#line 711
  fontBuilt = [[ComItextpdfTextPdfCJKFont alloc] initWithNSString:name withNSString:encoding withBoolean:embedded];
  else if (noThrow)
#line 713
  return nil;
  else
#line 715
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"font.1.with.2.is.not.recognized" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name, encoding } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (cached) {
    @synchronized(ComItextpdfTextPdfBaseFont_fontCache_) {
      fontFound = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfBaseFont_fontCache_)) getWithId:key];
      if (fontFound != nil)
#line 720
      return fontFound;
      (void) [ComItextpdfTextPdfBaseFont_fontCache_ putWithId:key withId:fontBuilt];
    }
  }
  return fontBuilt;
}


#line 733
+ (ComItextpdfTextPdfBaseFont *)createFontWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)fontRef {
  
#line 734
  return [[ComItextpdfTextPdfDocumentFont alloc] initWithComItextpdfTextPdfPRIndirectReference:fontRef];
}


#line 741
- (jboolean)isVertical {
  
#line 742
  return vertical_;
}


#line 750
+ (NSString *)getBaseNameWithNSString:(NSString *)name {
  
#line 751
  if ([((NSString *) nil_chk(name)) hasSuffix:@",Bold"])
#line 752
  return [name substring:0 endIndex:((jint) [name length]) - 5];
  else if ([name hasSuffix:@",Italic"])
#line 754
  return [name substring:0 endIndex:((jint) [name length]) - 7];
  else if ([name hasSuffix:@",BoldItalic"])
#line 756
  return [name substring:0 endIndex:((jint) [name length]) - 11];
  else
#line 758
  return name;
}

+ (NSString *)normalizeEncodingWithNSString:(NSString *)enc {
  
#line 768
  if ([((NSString *) nil_chk(enc)) isEqual:@"winansi"] || [enc isEqual:@""])
#line 769
  return ComItextpdfTextPdfBaseFont_CP1252_;
  else if ([enc isEqual:@"macroman"])
#line 771
  return ComItextpdfTextPdfBaseFont_MACROMAN_;
  else
#line 773
  return enc;
}


#line 779
- (void)createEncoding {
  
#line 780
  if ([((NSString *) nil_chk(encoding_)) hasPrefix:@"#"]) {
    specialMap_ = [[ComItextpdfTextPdfIntHashtable alloc] init];
    JavaUtilStringTokenizer *tok = [[JavaUtilStringTokenizer alloc] initWithNSString:[encoding_ substring:1] withNSString:@" ,\t\n\x0d\x0c"];
    if ([((NSString *) nil_chk([tok nextToken])) isEqual:@"full"]) {
      while ([tok hasMoreTokens]) {
        NSString *order = [tok nextToken];
        NSString *name = [tok nextToken];
        jchar uni = (jchar) [JavaLangInteger parseIntWithNSString:[tok nextToken] withInt:16];
        jint orderK;
        if ([((NSString *) nil_chk(order)) hasPrefix:@"'"])
#line 790
        orderK = [order charAtWithInt:1];
        else
#line 792
        orderK = [JavaLangInteger parseIntWithNSString:order];
        orderK %= 256;
        [specialMap_ putWithInt:uni withInt:orderK];
        IOSObjectArray_Set(nil_chk(differences_), orderK, name);
        *IOSCharArray_GetRef(nil_chk(unicodeDifferences_), orderK) = uni;
        *IOSIntArray_GetRef(nil_chk(widths_), orderK) = [self getRawWidthWithInt:uni withNSString:name];
        IOSObjectArray_Set(nil_chk(charBBoxes_), orderK, [self getRawCharBBoxWithInt:uni withNSString:name]);
      }
    }
    else {
      jint k = 0;
      if ([tok hasMoreTokens])
#line 804
      k = [JavaLangInteger parseIntWithNSString:[tok nextToken]];
      while ([tok hasMoreTokens] && k < 256) {
        NSString *hex = [tok nextToken];
        jint uni = [JavaLangInteger parseIntWithNSString:hex withInt:16] % (jint) 0x10000;
        NSString *name = [ComItextpdfTextPdfGlyphList unicodeToNameWithInt:uni];
        if (name != nil) {
          [specialMap_ putWithInt:uni withInt:k];
          IOSObjectArray_Set(nil_chk(differences_), k, name);
          *IOSCharArray_GetRef(nil_chk(unicodeDifferences_), k) = (jchar) uni;
          *IOSIntArray_GetRef(nil_chk(widths_), k) = [self getRawWidthWithInt:uni withNSString:name];
          IOSObjectArray_Set(nil_chk(charBBoxes_), k, [self getRawCharBBoxWithInt:uni withNSString:name]);
          ++k;
        }
      }
    }
    for (jint k = 0; k < 256; ++k) {
      if (IOSObjectArray_Get(nil_chk(differences_), k) == nil) {
        IOSObjectArray_Set(differences_, k, ComItextpdfTextPdfBaseFont_notdef_);
      }
    }
  }
  else if (fontSpecific_) {
    for (jint k = 0; k < 256; ++k) {
      *IOSIntArray_GetRef(nil_chk(widths_), k) = [self getRawWidthWithInt:k withNSString:nil];
      IOSObjectArray_Set(nil_chk(charBBoxes_), k, [self getRawCharBBoxWithInt:k withNSString:nil]);
    }
  }
  else {
    NSString *s;
    NSString *name;
    jchar c;
    IOSByteArray *b = [IOSByteArray arrayWithLength:1];
    for (jint k = 0; k < 256; ++k) {
      *IOSByteArray_GetRef(b, 0) = (jbyte) k;
      s = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:b withNSString:encoding_];
      if (((jint) [((NSString *) nil_chk(s)) length]) > 0) {
        c = [s charAtWithInt:0];
      }
      else {
        c = '?';
      }
      name = [ComItextpdfTextPdfGlyphList unicodeToNameWithInt:c];
      if (name == nil)
#line 847
      name = ComItextpdfTextPdfBaseFont_notdef_;
      IOSObjectArray_Set(nil_chk(differences_), k, name);
      *IOSCharArray_GetRef(nil_chk(unicodeDifferences_), k) = c;
      *IOSIntArray_GetRef(nil_chk(widths_), k) = [self getRawWidthWithInt:c withNSString:name];
      IOSObjectArray_Set(nil_chk(charBBoxes_), k, [self getRawCharBBoxWithInt:c withNSString:name]);
    }
  }
}


#line 863
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 871
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 880
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 887
- (jint)getWidthWithInt:(jint)char1 {
  if (fastWinansi_) {
    if (char1 < 128 || (char1 >= 160 && char1 <= 255))
#line 890
    return IOSIntArray_Get(nil_chk(widths_), char1);
    else
#line 892
    return IOSIntArray_Get(nil_chk(widths_), [((ComItextpdfTextPdfIntHashtable *) nil_chk(ComItextpdfTextPdfPdfEncodings_get_winansi_())) getWithInt:char1]);
  }
  else {
    jint total = 0;
    IOSByteArray *mbytes = [self convertToBytesWithInt:(jchar) char1];
    for (jint k = 0; k < ((IOSByteArray *) nil_chk(mbytes))->size_; ++k)
#line 898
    total += IOSIntArray_Get(nil_chk(widths_), (jint) 0xff & IOSByteArray_Get(mbytes, k));
    return total;
  }
}


#line 908
- (jint)getWidthWithNSString:(NSString *)text {
  
#line 909
  jint total = 0;
  if (fastWinansi_) {
    jint len = ((jint) [((NSString *) nil_chk(text)) length]);
    for (jint k = 0; k < len; ++k) {
      jchar char1 = [text charAtWithInt:k];
      if (char1 < 128 || (char1 >= 160 && char1 <= 255))
#line 915
      total += IOSIntArray_Get(nil_chk(widths_), char1);
      else
#line 917
      total += IOSIntArray_Get(nil_chk(widths_), [((ComItextpdfTextPdfIntHashtable *) nil_chk(ComItextpdfTextPdfPdfEncodings_get_winansi_())) getWithInt:char1]);
    }
    return total;
  }
  else {
    IOSByteArray *mbytes = [self convertToBytesWithNSString:text];
    for (jint k = 0; k < ((IOSByteArray *) nil_chk(mbytes))->size_; ++k)
#line 924
    total += IOSIntArray_Get(nil_chk(widths_), (jint) 0xff & IOSByteArray_Get(mbytes, k));
  }
  return total;
}


#line 935
- (jint)getDescentWithNSString:(NSString *)text {
  
#line 936
  jint min = 0;
  IOSCharArray *chars = [((NSString *) nil_chk(text)) toCharArray];
  for (jint k = 0; k < ((IOSCharArray *) nil_chk(chars))->size_; ++k) {
    IOSIntArray *bbox = [self getCharBBoxWithInt:IOSCharArray_Get(chars, k)];
    if (bbox != nil && IOSIntArray_Get(bbox, 1) < min)
#line 941
    min = IOSIntArray_Get(bbox, 1);
  }
  return min;
}


#line 952
- (jint)getAscentWithNSString:(NSString *)text {
  
#line 953
  jint max = 0;
  IOSCharArray *chars = [((NSString *) nil_chk(text)) toCharArray];
  for (jint k = 0; k < ((IOSCharArray *) nil_chk(chars))->size_; ++k) {
    IOSIntArray *bbox = [self getCharBBoxWithInt:IOSCharArray_Get(chars, k)];
    if (bbox != nil && IOSIntArray_Get(bbox, 3) > max)
#line 958
    max = IOSIntArray_Get(bbox, 3);
  }
  return max;
}


#line 970
- (jfloat)getDescentPointWithNSString:(NSString *)text
                            withFloat:(jfloat)fontSize {
  
#line 972
  return [self getDescentWithNSString:text] * 0.001f * fontSize;
}


#line 982
- (jfloat)getAscentPointWithNSString:(NSString *)text
                           withFloat:(jfloat)fontSize {
  
#line 984
  return [self getAscentWithNSString:text] * 0.001f * fontSize;
}


#line 995
- (jfloat)getWidthPointKernedWithNSString:(NSString *)text
                                withFloat:(jfloat)fontSize {
  
#line 996
  jfloat size = [self getWidthWithNSString:text] * 0.001f * fontSize;
  if (![self hasKernPairs])
#line 998
  return size;
  jint len = ((jint) [((NSString *) nil_chk(text)) length]) - 1;
  jint kern = 0;
  IOSCharArray *c = [text toCharArray];
  for (jint k = 0; k < len; ++k) {
    kern += [self getKerningWithInt:IOSCharArray_Get(nil_chk(c), k) withInt:IOSCharArray_Get(c, k + 1)];
  }
  return size + kern * 0.001f * fontSize;
}


#line 1014
- (jfloat)getWidthPointWithNSString:(NSString *)text
                          withFloat:(jfloat)fontSize {
  
#line 1015
  return [self getWidthWithNSString:text] * 0.001f * fontSize;
}


#line 1024
- (jfloat)getWidthPointWithInt:(jint)char1
                     withFloat:(jfloat)fontSize {
  
#line 1025
  return [self getWidthWithInt:char1] * 0.001f * fontSize;
}


#line 1034
- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  
#line 1035
  if (directTextToByte_)
#line 1036
  return [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:text withNSString:nil];
  if (specialMap_ != nil) {
    IOSByteArray *b = [IOSByteArray arrayWithLength:((jint) [((NSString *) nil_chk(text)) length])];
    jint ptr = 0;
    jint length = ((jint) [text length]);
    for (jint k = 0; k < length; ++k) {
      jchar c = [text charAtWithInt:k];
      if ([specialMap_ containsKeyWithInt:c])
#line 1044
      *IOSByteArray_GetRef(b, ptr++) = (jbyte) [specialMap_ getWithInt:c];
    }
    if (ptr < length) {
      IOSByteArray *b2 = [IOSByteArray arrayWithLength:ptr];
      [JavaLangSystem arraycopyWithId:b withInt:0 withId:b2 withInt:0 withInt:ptr];
      return b2;
    }
    else
#line 1052
    return b;
  }
  return [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:text withNSString:encoding_];
}


#line 1063
- (IOSByteArray *)convertToBytesWithInt:(jint)char1 {
  
#line 1064
  if (directTextToByte_)
#line 1065
  return [ComItextpdfTextPdfPdfEncodings convertToBytesWithChar:(jchar) char1 withNSString:nil];
  if (specialMap_ != nil) {
    if ([specialMap_ containsKeyWithInt:char1])
#line 1068
    return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) [specialMap_ getWithInt:char1] } count:1];
    else
#line 1070
    return [IOSByteArray arrayWithLength:0];
  }
  return [ComItextpdfTextPdfPdfEncodings convertToBytesWithChar:(jchar) char1 withNSString:encoding_];
}


#line 1082
- (void)writeFontWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                               withNSObjectArray:(IOSObjectArray *)params {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 1091
- (ComItextpdfTextPdfPdfStream *)getFullFontStream {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1096
- (NSString *)getEncoding {
  return encoding_;
}


#line 1109
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1119
- (void)setFontDescriptorWithInt:(jint)key
                       withFloat:(jfloat)value {
}


#line 1125
- (jint)getFontType {
  
#line 1126
  return fontType_;
}


#line 1132
- (jboolean)isEmbedded {
  
#line 1133
  return embedded_;
}


#line 1139
- (jboolean)isFontSpecific {
  
#line 1140
  return fontSpecific_;
}


#line 1146
+ (NSString *)createSubsetPrefix {
  
#line 1147
  JavaLangStringBuilder *s = [[JavaLangStringBuilder alloc] initWithNSString:@""];
  for (jint k = 0; k < 6; ++k)
#line 1149
  (void) [s appendWithChar:J2ObjCFpToUnichar(([JavaLangMath random] * 26 + 'A'))];
  return JreStrcat("@C", s, '+');
}


#line 1157
- (jchar)getUnicodeDifferencesWithInt:(jint)index {
  
#line 1158
  return IOSCharArray_Get(nil_chk(unicodeDifferences_), index);
}


#line 1164
- (NSString *)getPostscriptFontName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1171
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 1181
- (IOSObjectArray *)getFullFontName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1192
- (IOSObjectArray *)getAllNameEntries {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1207
+ (IOSObjectArray *)getFullFontNameWithNSString:(NSString *)name
                                   withNSString:(NSString *)encoding
                                  withByteArray:(IOSByteArray *)ttfAfm {
  
#line 1208
  NSString *nameBase = [ComItextpdfTextPdfBaseFont getBaseNameWithNSString:name];
  ComItextpdfTextPdfBaseFont *fontBuilt = nil;
  if ([((NSString *) nil_chk([((NSString *) nil_chk(nameBase)) lowercaseString])) hasSuffix:@".ttf"] || [((NSString *) nil_chk([nameBase lowercaseString])) hasSuffix:@".otf"] || [((NSString *) nil_chk([nameBase lowercaseString])) indexOfString:@".ttc,"] > 0)
#line 1211
  fontBuilt = [[ComItextpdfTextPdfTrueTypeFont alloc] initWithNSString:name withNSString:ComItextpdfTextPdfBaseFont_CP1252_ withBoolean:NO withByteArray:ttfAfm withBoolean:YES withBoolean:NO];
  else
#line 1213
  fontBuilt = [ComItextpdfTextPdfBaseFont createFontWithNSString:name withNSString:encoding withBoolean:NO withBoolean:NO withByteArray:ttfAfm withByteArray:nil];
  return [((ComItextpdfTextPdfBaseFont *) nil_chk(fontBuilt)) getFullFontName];
}


#line 1225
+ (IOSObjectArray *)getAllFontNamesWithNSString:(NSString *)name
                                   withNSString:(NSString *)encoding
                                  withByteArray:(IOSByteArray *)ttfAfm {
  
#line 1226
  NSString *nameBase = [ComItextpdfTextPdfBaseFont getBaseNameWithNSString:name];
  ComItextpdfTextPdfBaseFont *fontBuilt = nil;
  if ([((NSString *) nil_chk([((NSString *) nil_chk(nameBase)) lowercaseString])) hasSuffix:@".ttf"] || [((NSString *) nil_chk([nameBase lowercaseString])) hasSuffix:@".otf"] || [((NSString *) nil_chk([nameBase lowercaseString])) indexOfString:@".ttc,"] > 0)
#line 1229
  fontBuilt = [[ComItextpdfTextPdfTrueTypeFont alloc] initWithNSString:name withNSString:ComItextpdfTextPdfBaseFont_CP1252_ withBoolean:NO withByteArray:ttfAfm withBoolean:YES withBoolean:NO];
  else
#line 1231
  fontBuilt = [ComItextpdfTextPdfBaseFont createFontWithNSString:name withNSString:encoding withBoolean:NO withBoolean:NO withByteArray:ttfAfm withByteArray:nil];
  return [IOSObjectArray arrayWithObjects:(id[]){ [((ComItextpdfTextPdfBaseFont *) nil_chk(fontBuilt)) getPostscriptFontName], [fontBuilt getFamilyFontName], [fontBuilt getFullFontName] } count:3 type:[IOSClass classWithClass:[NSObject class]]];
}


#line 1244
+ (IOSObjectArray *)getAllNameEntriesWithNSString:(NSString *)name
                                     withNSString:(NSString *)encoding
                                    withByteArray:(IOSByteArray *)ttfAfm {
  
#line 1245
  NSString *nameBase = [ComItextpdfTextPdfBaseFont getBaseNameWithNSString:name];
  ComItextpdfTextPdfBaseFont *fontBuilt = nil;
  if ([((NSString *) nil_chk([((NSString *) nil_chk(nameBase)) lowercaseString])) hasSuffix:@".ttf"] || [((NSString *) nil_chk([nameBase lowercaseString])) hasSuffix:@".otf"] || [((NSString *) nil_chk([nameBase lowercaseString])) indexOfString:@".ttc,"] > 0)
#line 1248
  fontBuilt = [[ComItextpdfTextPdfTrueTypeFont alloc] initWithNSString:name withNSString:ComItextpdfTextPdfBaseFont_CP1252_ withBoolean:NO withByteArray:ttfAfm withBoolean:YES withBoolean:NO];
  else
#line 1250
  fontBuilt = [ComItextpdfTextPdfBaseFont createFontWithNSString:name withNSString:encoding withBoolean:NO withBoolean:NO withByteArray:ttfAfm withByteArray:nil];
  return [((ComItextpdfTextPdfBaseFont *) nil_chk(fontBuilt)) getAllNameEntries];
}


#line 1262
- (IOSObjectArray *)getFamilyFontName {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getCodePagesSupported {
  
#line 1269
  return [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]];
}


#line 1279
+ (IOSObjectArray *)enumerateTTCNamesWithNSString:(NSString *)ttcFile {
  
#line 1280
  return [((ComItextpdfTextPdfEnumerateTTC *) [[ComItextpdfTextPdfEnumerateTTC alloc] initWithNSString:ttcFile]) getNames];
}


#line 1290
+ (IOSObjectArray *)enumerateTTCNamesWithByteArray:(IOSByteArray *)ttcArray {
  
#line 1291
  return [((ComItextpdfTextPdfEnumerateTTC *) [[ComItextpdfTextPdfEnumerateTTC alloc] initWithByteArray:ttcArray]) getNames];
}


#line 1297
- (IOSIntArray *)getWidths {
  
#line 1298
  return widths_;
}


#line 1304
- (IOSObjectArray *)getDifferences {
  
#line 1305
  return differences_;
}


#line 1311
- (IOSCharArray *)getUnicodeDifferences {
  
#line 1312
  return unicodeDifferences_;
}


#line 1318
- (jboolean)isForceWidthsOutput {
  
#line 1319
  return forceWidthsOutput_;
}


#line 1327
- (void)setForceWidthsOutputWithBoolean:(jboolean)forceWidthsOutput {
  
#line 1328
  self->forceWidthsOutput_ = forceWidthsOutput;
}


#line 1335
- (jboolean)isDirectTextToByte {
  
#line 1336
  return directTextToByte_;
}


#line 1344
- (void)setDirectTextToByteWithBoolean:(jboolean)directTextToByte {
  
#line 1345
  self->directTextToByte_ = directTextToByte;
}


#line 1352
- (jboolean)isSubset {
  
#line 1353
  return subset_;
}


#line 1363
- (void)setSubsetWithBoolean:(jboolean)subset {
  
#line 1364
  self->subset_ = subset;
}


#line 1373
- (jint)getUnicodeEquivalentWithInt:(jint)c {
  
#line 1374
  return c;
}


#line 1382
- (jint)getCidCodeWithInt:(jint)c {
  
#line 1383
  return c;
}


#line 1389
- (jboolean)hasKernPairs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1397
- (jboolean)charExistsWithInt:(jint)c {
  
#line 1398
  IOSByteArray *b = [self convertToBytesWithInt:c];
  return ((IOSByteArray *) nil_chk(b))->size_ > 0;
}


#line 1409
- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance {
  
#line 1410
  IOSByteArray *b = [self convertToBytesWithInt:c];
  if (((IOSByteArray *) nil_chk(b))->size_ == 0)
#line 1412
  return NO;
  *IOSIntArray_GetRef(nil_chk(widths_), (jint) 0xff & IOSByteArray_Get(b, 0)) = advance;
  return YES;
}


#line 1417
+ (void)addFontWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)fontRef
                      withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)hits
                                   withJavaUtilArrayList:(JavaUtilArrayList *)fonts {
  
#line 1418
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:fontRef];
  if (obj == nil || ![obj isDictionary])
#line 1420
  return;
  ComItextpdfTextPdfPdfDictionary *font = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
  ComItextpdfTextPdfPdfName *subtype = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(font)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()];
  if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TYPE1_())) isEqual:subtype] && ![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TRUETYPE_())) isEqual:subtype] && ![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TYPE0_())) isEqual:subtype])
#line 1424
  return;
  ComItextpdfTextPdfPdfName *name = [font getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_()];
  [((JavaUtilArrayList *) nil_chk(fonts)) addWithId:[IOSObjectArray arrayWithObjects:(id[]){ [ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfName *) nil_chk(name)) description]], fontRef } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  [((ComItextpdfTextPdfIntHashtable *) nil_chk(hits)) putWithInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(fontRef)) getNumber] withInt:1];
}


#line 1430
+ (void)recourseFontsWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)page
                      withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)hits
                                   withJavaUtilArrayList:(JavaUtilArrayList *)fonts
                                                 withInt:(jint)level {
  
#line 1431
  ++level;
  if (level > 50)
#line 1433
  return;
  if (page == nil)
#line 1435
  return;
  ComItextpdfTextPdfPdfDictionary *resources = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()];
  if (resources == nil)
#line 1438
  return;
  ComItextpdfTextPdfPdfDictionary *font = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(resources)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  if (font != nil) {
    for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([font getKeys])) {
      ComItextpdfTextPdfPdfObject *ft = [font getWithComItextpdfTextPdfPdfName:key];
      if (ft == nil || ![ft isIndirect])
#line 1444
      continue;
      jint hit = [((ComItextpdfTextPdfPRIndirectReference *) nil_chk(((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(ft, [ComItextpdfTextPdfPRIndirectReference class])))) getNumber];
      if ([((ComItextpdfTextPdfIntHashtable *) nil_chk(hits)) containsKeyWithInt:hit])
#line 1447
      continue;
      [ComItextpdfTextPdfBaseFont addFontWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(ft, [ComItextpdfTextPdfPRIndirectReference class]) withComItextpdfTextPdfIntHashtable:hits withJavaUtilArrayList:fonts];
    }
  }
  ComItextpdfTextPdfPdfDictionary *xobj = [resources getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XOBJECT_()];
  if (xobj != nil) {
    for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([xobj getKeys])) {
      ComItextpdfTextPdfPdfObject *po = [xobj getDirectObjectWithComItextpdfTextPdfPdfName:key];
      if ([po isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]])
#line 1456
      [ComItextpdfTextPdfBaseFont recourseFontsWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(po, [ComItextpdfTextPdfPdfDictionary class]) withComItextpdfTextPdfIntHashtable:hits withJavaUtilArrayList:fonts withInt:level];
    }
  }
}


#line 1468
+ (JavaUtilArrayList *)getDocumentFontsWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 1469
  ComItextpdfTextPdfIntHashtable *hits = [[ComItextpdfTextPdfIntHashtable alloc] init];
  JavaUtilArrayList *fonts = [[JavaUtilArrayList alloc] init];
  jint npages = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getNumberOfPages];
  for (jint k = 1; k <= npages; ++k)
#line 1473
  [ComItextpdfTextPdfBaseFont recourseFontsWithComItextpdfTextPdfPdfDictionary:[reader getPageNWithInt:k] withComItextpdfTextPdfIntHashtable:hits withJavaUtilArrayList:fonts withInt:1];
  return fonts;
}


#line 1485
+ (JavaUtilArrayList *)getDocumentFontsWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                               withInt:(jint)page {
  
#line 1486
  ComItextpdfTextPdfIntHashtable *hits = [[ComItextpdfTextPdfIntHashtable alloc] init];
  JavaUtilArrayList *fonts = [[JavaUtilArrayList alloc] init];
  [ComItextpdfTextPdfBaseFont recourseFontsWithComItextpdfTextPdfPdfDictionary:[((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getPageNWithInt:page] withComItextpdfTextPdfIntHashtable:hits withJavaUtilArrayList:fonts withInt:1];
  return fonts;
}


#line 1501
- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  
#line 1502
  IOSByteArray *b = [self convertToBytesWithInt:c];
  if (((IOSByteArray *) nil_chk(b))->size_ == 0)
#line 1504
  return nil;
  else
#line 1506
  return IOSObjectArray_Get(nil_chk(charBBoxes_), IOSByteArray_Get(b, 0) & (jint) 0xff);
}


#line 1509
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 1518
- (void)correctArabicAdvance {
  
#line 1519
  for (jchar c = 0x064b; c <= 0x0658; ++c)
#line 1520
  [self setCharAdvanceWithInt:c withInt:0];
  [self setCharAdvanceWithInt:0x0670 withInt:0];
  for (jchar c = 0x06d6; c <= 0x06dc; ++c)
#line 1523
  [self setCharAdvanceWithInt:c withInt:0];
  for (jchar c = 0x06df; c <= 0x06e4; ++c)
#line 1525
  [self setCharAdvanceWithInt:c withInt:0];
  for (jchar c = 0x06e7; c <= 0x06e8; ++c)
#line 1527
  [self setCharAdvanceWithInt:c withInt:0];
  for (jchar c = 0x06ea; c <= 0x06ed; ++c)
#line 1529
  [self setCharAdvanceWithInt:c withInt:0];
}


#line 1538
- (void)addSubsetRangeWithIntArray:(IOSIntArray *)range {
  if (subsetRanges_ == nil)
#line 1540
  subsetRanges_ = [[JavaUtilArrayList alloc] init];
  [((JavaUtilArrayList *) nil_chk(subsetRanges_)) addWithId:range];
}


#line 1549
- (jint)getCompressionLevel {
  
#line 1550
  return compressionLevel_;
}


#line 1558
- (void)setCompressionLevelWithInt:(jint)compressionLevel {
  
#line 1559
  if (compressionLevel < ComItextpdfTextPdfPdfStream_NO_COMPRESSION || compressionLevel > ComItextpdfTextPdfPdfStream_BEST_COMPRESSION)
#line 1560
  self->compressionLevel_ = ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION;
  else
#line 1562
  self->compressionLevel_ = compressionLevel;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfBaseFont *)other {
  [super copyAllFieldsTo:other];
  other->charBBoxes_ = charBBoxes_;
  other->compressionLevel_ = compressionLevel_;
  other->differences_ = differences_;
  other->directTextToByte_ = directTextToByte_;
  other->embedded_ = embedded_;
  other->encoding_ = encoding_;
  other->fastWinansi_ = fastWinansi_;
  other->fontSpecific_ = fontSpecific_;
  other->fontType_ = fontType_;
  other->forceWidthsOutput_ = forceWidthsOutput_;
  other->specialMap_ = specialMap_;
  other->subset_ = subset_;
  other->subsetRanges_ = subsetRanges_;
  other->unicodeDifferences_ = unicodeDifferences_;
  other->vertical_ = vertical_;
  other->widths_ = widths_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfBaseFont class]) {
    ComItextpdfTextPdfBaseFont_CHAR_RANGE_LATIN_ = [IOSIntArray arrayWithInts:(jint[]){
#line 231
      0, (jint) 0x17f, (jint) 0x2000, (jint) 0x206f, (jint) 0x20a0, (jint) 0x20cf, (jint) 0xfb00, (jint) 0xfb06 } count:8];
      ComItextpdfTextPdfBaseFont_CHAR_RANGE_ARABIC_ = [IOSIntArray arrayWithInts:(jint[]){
#line 232
        0, (jint) 0x7f, (jint) 0x0600, (jint) 0x067f, (jint) 0x20a0, (jint) 0x20cf, (jint) 0xfb50, (jint) 0xfbff, (jint) 0xfe70, (jint) 0xfeff } count:10];
        ComItextpdfTextPdfBaseFont_CHAR_RANGE_HEBREW_ = [IOSIntArray arrayWithInts:(jint[]){
#line 233
          0, (jint) 0x7f, (jint) 0x0590, (jint) 0x05ff, (jint) 0x20a0, (jint) 0x20cf, (jint) 0xfb1d, (jint) 0xfb4f } count:8];
          ComItextpdfTextPdfBaseFont_CHAR_RANGE_CYRILLIC_ = [IOSIntArray arrayWithInts:(jint[]){
#line 234
            0, (jint) 0x7f, (jint) 0x0400, (jint) 0x052f, (jint) 0x2000, (jint) 0x206f, (jint) 0x20a0, (jint) 0x20cf } count:8];
            ComItextpdfTextPdfBaseFont_fontCache_ =
#line 294
            [[JavaUtilHashMap alloc] init];
            ComItextpdfTextPdfBaseFont_BuiltinFonts14_ =
#line 297
            [[JavaUtilHashMap alloc] init];
            {
              
#line 325
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_COURIER_ withId:ComItextpdfTextPdfPdfName_get_COURIER_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_COURIER_BOLD_ withId:ComItextpdfTextPdfPdfName_get_COURIER_BOLD_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_COURIER_BOLDOBLIQUE_ withId:ComItextpdfTextPdfPdfName_get_COURIER_BOLDOBLIQUE_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_COURIER_OBLIQUE_ withId:ComItextpdfTextPdfPdfName_get_COURIER_OBLIQUE_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_HELVETICA_ withId:ComItextpdfTextPdfPdfName_get_HELVETICA_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_HELVETICA_BOLD_ withId:ComItextpdfTextPdfPdfName_get_HELVETICA_BOLD_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_HELVETICA_BOLDOBLIQUE_ withId:ComItextpdfTextPdfPdfName_get_HELVETICA_BOLDOBLIQUE_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_HELVETICA_OBLIQUE_ withId:ComItextpdfTextPdfPdfName_get_HELVETICA_OBLIQUE_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_SYMBOL_ withId:ComItextpdfTextPdfPdfName_get_SYMBOL_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_TIMES_ROMAN_ withId:ComItextpdfTextPdfPdfName_get_TIMES_ROMAN_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_TIMES_BOLD_ withId:ComItextpdfTextPdfPdfName_get_TIMES_BOLD_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_TIMES_BOLDITALIC_ withId:ComItextpdfTextPdfPdfName_get_TIMES_BOLDITALIC_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_TIMES_ITALIC_ withId:ComItextpdfTextPdfPdfName_get_TIMES_ITALIC_()];
              (void) [ComItextpdfTextPdfBaseFont_BuiltinFonts14_ putWithId:ComItextpdfTextPdfBaseFont_ZAPFDINGBATS_ withId:ComItextpdfTextPdfPdfName_get_ZAPFDINGBATS_()];
            }
            ComItextpdfTextPdfBaseFont_initialized = YES;
          }
        }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BaseFont", NULL, 0x4, NULL },
    { "createFont", NULL, "Lcom.itextpdf.text.pdf.BaseFont;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createFontWithNSString:withNSString:withBoolean:", "createFont", "Lcom.itextpdf.text.pdf.BaseFont;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createFontWithNSString:withNSString:withBoolean:withBoolean:", "createFont", "Lcom.itextpdf.text.pdf.BaseFont;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createFontWithNSString:withNSString:withBoolean:withBoolean:withByteArray:withByteArray:", "createFont", "Lcom.itextpdf.text.pdf.BaseFont;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createFontWithNSString:withNSString:withBoolean:withBoolean:withByteArray:withByteArray:withBoolean:", "createFont", "Lcom.itextpdf.text.pdf.BaseFont;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createFontWithNSString:withNSString:withBoolean:withBoolean:withByteArray:withByteArray:withBoolean:withBoolean:", "createFont", "Lcom.itextpdf.text.pdf.BaseFont;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createFontWithComItextpdfTextPdfPRIndirectReference:", "createFont", "Lcom.itextpdf.text.pdf.BaseFont;", 0x9, NULL },
    { "isVertical", NULL, "Z", 0x1, NULL },
    { "getBaseNameWithNSString:", "getBaseName", "Ljava.lang.String;", 0xc, NULL },
    { "normalizeEncodingWithNSString:", "normalizeEncoding", "Ljava.lang.String;", 0xc, NULL },
    { "createEncoding", NULL, "V", 0x4, NULL },
    { "getRawWidthWithInt:withNSString:", "getRawWidth", "I", 0x400, NULL },
    { "getKerningWithInt:withInt:", "getKerning", "I", 0x401, NULL },
    { "setKerningWithInt:withInt:withInt:", "setKerning", "Z", 0x401, NULL },
    { "getWidthWithInt:", "getWidth", "I", 0x1, NULL },
    { "getWidthWithNSString:", "getWidth", "I", 0x1, NULL },
    { "getDescentWithNSString:", "getDescent", "I", 0x1, NULL },
    { "getAscentWithNSString:", "getAscent", "I", 0x1, NULL },
    { "getDescentPointWithNSString:withFloat:", "getDescentPoint", "F", 0x1, NULL },
    { "getAscentPointWithNSString:withFloat:", "getAscentPoint", "F", 0x1, NULL },
    { "getWidthPointKernedWithNSString:withFloat:", "getWidthPointKerned", "F", 0x1, NULL },
    { "getWidthPointWithNSString:withFloat:", "getWidthPoint", "F", 0x1, NULL },
    { "getWidthPointWithInt:withFloat:", "getWidthPoint", "F", 0x1, NULL },
    { "convertToBytesWithNSString:", "convertToBytes", "[B", 0x1, NULL },
    { "convertToBytesWithInt:", "convertToBytes", "[B", 0x0, NULL },
    { "writeFontWithComItextpdfTextPdfPdfWriter:withComItextpdfTextPdfPdfIndirectReference:withNSObjectArray:", "writeFont", "V", 0x400, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getFullFontStream", NULL, "Lcom.itextpdf.text.pdf.PdfStream;", 0x400, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getEncoding", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getFontDescriptorWithInt:withFloat:", "getFontDescriptor", "F", 0x401, NULL },
    { "setFontDescriptorWithInt:withFloat:", "setFontDescriptor", "V", 0x1, NULL },
    { "getFontType", NULL, "I", 0x1, NULL },
    { "isEmbedded", NULL, "Z", 0x1, NULL },
    { "isFontSpecific", NULL, "Z", 0x1, NULL },
    { "createSubsetPrefix", NULL, "Ljava.lang.String;", 0x9, NULL },
    { "getUnicodeDifferencesWithInt:", "getUnicodeDifferences", "C", 0x0, NULL },
    { "getPostscriptFontName", NULL, "Ljava.lang.String;", 0x401, NULL },
    { "setPostscriptFontNameWithNSString:", "setPostscriptFontName", "V", 0x401, NULL },
    { "getFullFontName", NULL, "[[Ljava.lang.String;", 0x401, NULL },
    { "getAllNameEntries", NULL, "[[Ljava.lang.String;", 0x401, NULL },
    { "getFullFontNameWithNSString:withNSString:withByteArray:", "getFullFontName", "[[Ljava.lang.String;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getAllFontNamesWithNSString:withNSString:withByteArray:", "getAllFontNames", "[Ljava.lang.Object;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getAllNameEntriesWithNSString:withNSString:withByteArray:", "getAllNameEntries", "[[Ljava.lang.String;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getFamilyFontName", NULL, "[[Ljava.lang.String;", 0x401, NULL },
    { "getCodePagesSupported", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "enumerateTTCNamesWithNSString:", "enumerateTTCNames", "[Ljava.lang.String;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "enumerateTTCNamesWithByteArray:", "enumerateTTCNames", "[Ljava.lang.String;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getWidths", NULL, "[I", 0x1, NULL },
    { "getDifferences", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "getUnicodeDifferences", NULL, "[C", 0x1, NULL },
    { "isForceWidthsOutput", NULL, "Z", 0x1, NULL },
    { "setForceWidthsOutputWithBoolean:", "setForceWidthsOutput", "V", 0x1, NULL },
    { "isDirectTextToByte", NULL, "Z", 0x1, NULL },
    { "setDirectTextToByteWithBoolean:", "setDirectTextToByte", "V", 0x1, NULL },
    { "isSubset", NULL, "Z", 0x1, NULL },
    { "setSubsetWithBoolean:", "setSubset", "V", 0x1, NULL },
    { "getUnicodeEquivalentWithInt:", "getUnicodeEquivalent", "I", 0x1, NULL },
    { "getCidCodeWithInt:", "getCidCode", "I", 0x1, NULL },
    { "hasKernPairs", NULL, "Z", 0x401, NULL },
    { "charExistsWithInt:", "charExists", "Z", 0x1, NULL },
    { "setCharAdvanceWithInt:withInt:", "setCharAdvance", "Z", 0x1, NULL },
    { "addFontWithComItextpdfTextPdfPRIndirectReference:withComItextpdfTextPdfIntHashtable:withJavaUtilArrayList:", "addFont", "V", 0xa, NULL },
    { "recourseFontsWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfIntHashtable:withJavaUtilArrayList:withInt:", "recourseFonts", "V", 0xa, NULL },
    { "getDocumentFontsWithComItextpdfTextPdfPdfReader:", "getDocumentFonts", "Ljava.util.ArrayList;", 0x9, NULL },
    { "getDocumentFontsWithComItextpdfTextPdfPdfReader:withInt:", "getDocumentFonts", "Ljava.util.ArrayList;", 0x9, NULL },
    { "getCharBBoxWithInt:", "getCharBBox", "[I", 0x1, NULL },
    { "getRawCharBBoxWithInt:withNSString:", "getRawCharBBox", "[I", 0x404, NULL },
    { "correctArabicAdvance", NULL, "V", 0x1, NULL },
    { "addSubsetRangeWithIntArray:", "addSubsetRange", "V", 0x1, NULL },
    { "getCompressionLevel", NULL, "I", 0x1, NULL },
    { "setCompressionLevelWithInt:", "setCompressionLevel", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "COURIER_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_COURIER_,  },
    { "COURIER_BOLD_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_COURIER_BOLD_,  },
    { "COURIER_OBLIQUE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_COURIER_OBLIQUE_,  },
    { "COURIER_BOLDOBLIQUE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_COURIER_BOLDOBLIQUE_,  },
    { "HELVETICA_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_HELVETICA_,  },
    { "HELVETICA_BOLD_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_HELVETICA_BOLD_,  },
    { "HELVETICA_OBLIQUE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_HELVETICA_OBLIQUE_,  },
    { "HELVETICA_BOLDOBLIQUE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_HELVETICA_BOLDOBLIQUE_,  },
    { "SYMBOL_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_SYMBOL_,  },
    { "TIMES_ROMAN_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_TIMES_ROMAN_,  },
    { "TIMES_BOLD_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_TIMES_BOLD_,  },
    { "TIMES_ITALIC_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_TIMES_ITALIC_,  },
    { "TIMES_BOLDITALIC_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_TIMES_BOLDITALIC_,  },
    { "ZAPFDINGBATS_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_ZAPFDINGBATS_,  },
    { "ASCENT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_ASCENT },
    { "CAPHEIGHT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_CAPHEIGHT },
    { "DESCENT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_DESCENT },
    { "ITALICANGLE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_ITALICANGLE },
    { "BBOXLLX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_BBOXLLX },
    { "BBOXLLY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_BBOXLLY },
    { "BBOXURX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_BBOXURX },
    { "BBOXURY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_BBOXURY },
    { "AWT_ASCENT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_AWT_ASCENT },
    { "AWT_DESCENT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_AWT_DESCENT },
    { "AWT_LEADING_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_AWT_LEADING },
    { "AWT_MAXADVANCE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_AWT_MAXADVANCE },
    { "UNDERLINE_POSITION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_UNDERLINE_POSITION },
    { "UNDERLINE_THICKNESS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_UNDERLINE_THICKNESS },
    { "STRIKETHROUGH_POSITION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_STRIKETHROUGH_POSITION },
    { "STRIKETHROUGH_THICKNESS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_STRIKETHROUGH_THICKNESS },
    { "SUBSCRIPT_SIZE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_SUBSCRIPT_SIZE },
    { "SUBSCRIPT_OFFSET_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_SUBSCRIPT_OFFSET },
    { "SUPERSCRIPT_SIZE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_SUPERSCRIPT_SIZE },
    { "SUPERSCRIPT_OFFSET_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_SUPERSCRIPT_OFFSET },
    { "WEIGHT_CLASS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_WEIGHT_CLASS },
    { "WIDTH_CLASS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_WIDTH_CLASS },
    { "FONT_WEIGHT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_FONT_WEIGHT },
    { "FONT_TYPE_T1_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_FONT_TYPE_T1 },
    { "FONT_TYPE_TT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_FONT_TYPE_TT },
    { "FONT_TYPE_CJK_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_FONT_TYPE_CJK },
    { "FONT_TYPE_TTUNI_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_FONT_TYPE_TTUNI },
    { "FONT_TYPE_DOCUMENT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_FONT_TYPE_DOCUMENT },
    { "FONT_TYPE_T3_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseFont_FONT_TYPE_T3 },
    { "IDENTITY_H_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_IDENTITY_H_,  },
    { "IDENTITY_V_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_IDENTITY_V_,  },
    { "CP1250_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_CP1250_,  },
    { "CP1252_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_CP1252_,  },
    { "CP1257_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_CP1257_,  },
    { "WINANSI_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_WINANSI_,  },
    { "MACROMAN_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_MACROMAN_,  },
    { "CHAR_RANGE_LATIN_", NULL, 0x19, "[I", &ComItextpdfTextPdfBaseFont_CHAR_RANGE_LATIN_,  },
    { "CHAR_RANGE_ARABIC_", NULL, 0x19, "[I", &ComItextpdfTextPdfBaseFont_CHAR_RANGE_ARABIC_,  },
    { "CHAR_RANGE_HEBREW_", NULL, 0x19, "[I", &ComItextpdfTextPdfBaseFont_CHAR_RANGE_HEBREW_,  },
    { "CHAR_RANGE_CYRILLIC_", NULL, 0x19, "[I", &ComItextpdfTextPdfBaseFont_CHAR_RANGE_CYRILLIC_,  },
    { "EMBEDDED_", NULL, 0x19, "Z", NULL, .constantValue.asBOOL = ComItextpdfTextPdfBaseFont_EMBEDDED },
    { "NOT_EMBEDDED_", NULL, 0x19, "Z", NULL, .constantValue.asBOOL = ComItextpdfTextPdfBaseFont_NOT_EMBEDDED },
    { "CACHED_", NULL, 0x19, "Z", NULL, .constantValue.asBOOL = ComItextpdfTextPdfBaseFont_CACHED },
    { "NOT_CACHED_", NULL, 0x19, "Z", NULL, .constantValue.asBOOL = ComItextpdfTextPdfBaseFont_NOT_CACHED },
    { "RESOURCE_PATH_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_RESOURCE_PATH_,  },
    { "CID_NEWLINE_", NULL, 0x19, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfBaseFont_CID_NEWLINE },
    { "PARAGRAPH_SEPARATOR_", NULL, 0x19, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfBaseFont_PARAGRAPH_SEPARATOR },
    { "subsetRanges_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "fontType_", NULL, 0x0, "I", NULL,  },
    { "notdef_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfBaseFont_notdef_,  },
    { "widths_", NULL, 0x4, "[I", NULL,  },
    { "differences_", NULL, 0x4, "[Ljava.lang.String;", NULL,  },
    { "unicodeDifferences_", NULL, 0x4, "[C", NULL,  },
    { "charBBoxes_", NULL, 0x4, "[[I", NULL,  },
    { "encoding_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "embedded_", NULL, 0x4, "Z", NULL,  },
    { "compressionLevel_", NULL, 0x4, "I", NULL,  },
    { "fontSpecific_", NULL, 0x4, "Z", NULL,  },
    { "fontCache_", NULL, 0xc, "Ljava.util.HashMap;", &ComItextpdfTextPdfBaseFont_fontCache_,  },
    { "BuiltinFonts14_", NULL, 0x1c, "Ljava.util.HashMap;", &ComItextpdfTextPdfBaseFont_BuiltinFonts14_,  },
    { "forceWidthsOutput_", NULL, 0x4, "Z", NULL,  },
    { "directTextToByte_", NULL, 0x4, "Z", NULL,  },
    { "subset_", NULL, 0x4, "Z", NULL,  },
    { "fastWinansi_", NULL, 0x4, "Z", NULL,  },
    { "specialMap_", NULL, 0x4, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "vertical_", NULL, 0x4, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfBaseFont = { "BaseFont", "com.itextpdf.text.pdf", NULL, 0x401, 71, methods, 80, fields, 0, NULL};
  return &_ComItextpdfTextPdfBaseFont;
}

@end


#line 344
@implementation ComItextpdfTextPdfBaseFont_StreamFont


#line 354
- (instancetype)initWithByteArray:(IOSByteArray *)contents
                     withIntArray:(IOSIntArray *)lengths
                          withInt:(jint)compressionLevel {
  if (self = [super init]) {
    
#line 355
    @try {
      bytes_ = contents;
      [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:((IOSByteArray *) nil_chk(bytes_))->size_]];
      for (jint k = 0; k < ((IOSIntArray *) nil_chk(lengths))->size_; ++k) {
        [self putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$I", @"Length", (k + 1))] withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:IOSIntArray_Get(lengths, k)]];
      }
      [self flateCompressWithInt:compressionLevel];
    }
    @catch (JavaLangException *e) {
      @throw [[ComItextpdfTextDocumentException alloc] initWithJavaLangException:e];
    }
  }
  return self;
}


#line 376
- (instancetype)initWithByteArray:(IOSByteArray *)contents
                     withNSString:(NSString *)subType
                          withInt:(jint)compressionLevel {
  if (self = [super init]) {
    
#line 377
    @try {
      bytes_ = contents;
      [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:((IOSByteArray *) nil_chk(bytes_))->size_]];
      if (subType != nil)
#line 381
      [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:subType]];
      [self flateCompressWithInt:compressionLevel];
    }
    @catch (JavaLangException *e) {
      @throw [[ComItextpdfTextDocumentException alloc] initWithJavaLangException:e];
    }
  }
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithByteArray:withIntArray:withInt:", "StreamFont", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "initWithByteArray:withNSString:withInt:", "StreamFont", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;" },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfBaseFont_StreamFont = { "StreamFont", "com.itextpdf.text.pdf", "BaseFont", 0x8, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfBaseFont_StreamFont;
}

@end
