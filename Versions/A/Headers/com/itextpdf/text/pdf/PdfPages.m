//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPages.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPages.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfPages.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


#line 65
@implementation ComItextpdfTextPdfPdfPages


#line 79
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self = [super init]) {
    pages_ =
#line 67
    [[JavaUtilArrayList alloc] init];
    parents_ =
#line 68
    [[JavaUtilArrayList alloc] init];
    leafSize_ =
#line 69
    10;
    
#line 80
    self->writer_ = writer;
  }
  return self;
}


#line 83
- (void)addPageWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)page {
  
#line 84
  @try {
    if ([((JavaUtilArrayList *) nil_chk(pages_)) size] % leafSize_ == 0)
#line 86
    [((JavaUtilArrayList *) nil_chk(parents_)) addWithId:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPdfIndirectReference]];
    ComItextpdfTextPdfPdfIndirectReference *parent = [parents_ getWithInt:[((JavaUtilArrayList *) nil_chk(parents_)) size] - 1];
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:parent];
    ComItextpdfTextPdfPdfIndirectReference *current = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getCurrentPage];
    (void) [writer_ addToBodyWithComItextpdfTextPdfPdfObject:page withComItextpdfTextPdfPdfIndirectReference:current];
    [pages_ addWithId:current];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 98
- (ComItextpdfTextPdfPdfIndirectReference *)addPageRefWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)pageRef {
  
#line 99
  @try {
    if ([((JavaUtilArrayList *) nil_chk(pages_)) size] % leafSize_ == 0)
#line 101
    [((JavaUtilArrayList *) nil_chk(parents_)) addWithId:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPdfIndirectReference]];
    [pages_ addWithId:pageRef];
    return [parents_ getWithInt:[((JavaUtilArrayList *) nil_chk(parents_)) size] - 1];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 111
- (ComItextpdfTextPdfPdfIndirectReference *)writePageTree {
  
#line 112
  if ([((JavaUtilArrayList *) nil_chk(pages_)) isEmpty])
#line 113
  @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.has.no.pages" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  jint leaf = 1;
  JavaUtilArrayList *tParents = parents_;
  JavaUtilArrayList *tPages = pages_;
  JavaUtilArrayList *nextParents = [[JavaUtilArrayList alloc] init];
  while (YES) {
    leaf *= leafSize_;
    jint stdCount = leafSize_;
    jint rightCount = [tPages size] % leafSize_;
    if (rightCount == 0)
#line 123
    rightCount = leafSize_;
    for (jint p = 0; p < [((JavaUtilArrayList *) nil_chk(tParents)) size]; ++p) {
      jint count;
      jint thisLeaf = leaf;
      if (p == [tParents size] - 1) {
        count = rightCount;
        thisLeaf = [pages_ size] % leaf;
        if (thisLeaf == 0)
#line 131
        thisLeaf = leaf;
      }
      else
#line 134
      count = stdCount;
      ComItextpdfTextPdfPdfDictionary *top = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGES_()];
      [top putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:thisLeaf]];
      ComItextpdfTextPdfPdfArray *kids = [[ComItextpdfTextPdfPdfArray alloc] init];
      JavaUtilArrayList *internal = [kids getArrayList];
      [((JavaUtilArrayList *) nil_chk(internal)) addAllWithJavaUtilCollection:[tPages subListWithInt:p * stdCount withInt:p * stdCount + count]];
      [top putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:kids];
      if ([tParents size] > 1) {
        if (p % leafSize_ == 0)
#line 143
        [nextParents addWithId:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPdfIndirectReference]];
        [top putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:[nextParents getWithInt:p / leafSize_]];
      }
      (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:top withComItextpdfTextPdfPdfIndirectReference:[tParents getWithInt:p]];
    }
    if ([tParents size] == 1) {
      topParent_ = [tParents getWithInt:0];
      return topParent_;
    }
    tPages = tParents;
    tParents = nextParents;
    nextParents = [[JavaUtilArrayList alloc] init];
  }
}


#line 158
- (ComItextpdfTextPdfPdfIndirectReference *)getTopParent {
  
#line 159
  return topParent_;
}


#line 162
- (void)setLinearModeWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)topParent {
  
#line 163
  if ([((JavaUtilArrayList *) nil_chk(parents_)) size] > 1)
#line 164
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"linear.page.mode.can.only.be.called.with.a.single.parent" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (topParent != nil) {
    self->topParent_ = topParent;
    [parents_ clear];
    [parents_ addWithId:topParent];
  }
  leafSize_ = 10000000;
}


#line 173
- (void)addPageWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)page {
  
#line 174
  [((JavaUtilArrayList *) nil_chk(pages_)) addWithId:page];
}


#line 177
- (jint)reorderPagesWithIntArray:(IOSIntArray *)order {
  
#line 178
  if (order == nil)
#line 179
  return [((JavaUtilArrayList *) nil_chk(pages_)) size];
  if ([((JavaUtilArrayList *) nil_chk(parents_)) size] > 1)
#line 181
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"page.reordering.requires.a.single.parent.in.the.page.tree.call.pdfwriter.setlinearmode.after.open" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (((IOSIntArray *) nil_chk(order))->size_ != [((JavaUtilArrayList *) nil_chk(pages_)) size])
#line 183
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"page.reordering.requires.an.array.with.the.same.size.as.the.number.of.pages" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  jint max = [pages_ size];
  IOSBooleanArray *temp = [IOSBooleanArray arrayWithLength:max];
  for (jint k = 0; k < max; ++k) {
    jint p = IOSIntArray_Get(order, k);
    if (p < 1 || p > max)
#line 189
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"page.reordering.requires.pages.between.1.and.1.found.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:max], [NSString valueOfInt:p] } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
    if (IOSBooleanArray_Get(temp, p - 1))
#line 191
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"page.reordering.requires.no.page.repetition.page.1.is.repeated" withInt:p]];
    *IOSBooleanArray_GetRef(temp, p - 1) = YES;
  }
  IOSObjectArray *copy_ = [pages_ toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[pages_ size] type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfIndirectReference class]]]];
  for (jint k = 0; k < max; ++k) {
    (void) [pages_ setWithInt:k withId:IOSObjectArray_Get(nil_chk(copy_), IOSIntArray_Get(order, k) - 1)];
  }
  return max;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfPages *)other {
  [super copyAllFieldsTo:other];
  other->leafSize_ = leafSize_;
  other->pages_ = pages_;
  other->parents_ = parents_;
  other->topParent_ = topParent_;
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:", "PdfPages", NULL, 0x0, NULL },
    { "addPageWithComItextpdfTextPdfPdfDictionary:", "addPage", "V", 0x0, NULL },
    { "addPageRefWithComItextpdfTextPdfPdfIndirectReference:", "addPageRef", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, NULL },
    { "writePageTree", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, "Ljava.io.IOException;" },
    { "getTopParent", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, NULL },
    { "setLinearModeWithComItextpdfTextPdfPdfIndirectReference:", "setLinearMode", "V", 0x0, NULL },
    { "addPageWithComItextpdfTextPdfPdfIndirectReference:", "addPage", "V", 0x0, NULL },
    { "reorderPagesWithIntArray:", "reorderPages", "I", 0x0, "Lcom.itextpdf.text.DocumentException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pages_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "parents_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "leafSize_", NULL, 0x2, "I", NULL,  },
    { "writer_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "topParent_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfPages = { "PdfPages", "com.itextpdf.text.pdf", NULL, 0x1, 8, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfPages;
}

@end
