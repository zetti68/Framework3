//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfStamper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfStamper.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocWriter.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/FdfReader.h"
#include "com/itextpdf/text/pdf/PdfAcroForm.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfException.h"
#include "com/itextpdf/text/pdf/PdfFileSpecification.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfImportedPage.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfSignatureAppearance.h"
#include "com/itextpdf/text/pdf/PdfStamper.h"
#include "com/itextpdf/text/pdf/PdfStamperImp.h"
#include "com/itextpdf/text/pdf/PdfTransition.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/XmlSignatureAppearance.h"
#include "com/itextpdf/text/pdf/collection/PdfCollection.h"
#include "com/itextpdf/text/xml/xmp/XmpWriter.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/util/List.h"
#include "java/util/Map.h"


#line 75
@implementation ComItextpdfTextPdfPdfStamper


#line 95
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                             withJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self = [super init]) {
    
#line 96
    stamper_ = [[ComItextpdfTextPdfPdfStamperImp alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os withChar:0x0000 withBoolean:NO];
  }
  return self;
}


#line 111
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                             withJavaIoOutputStream:(JavaIoOutputStream *)os
                                           withChar:(jchar)pdfVersion {
  if (self = [super init]) {
    
#line 112
    stamper_ = [[ComItextpdfTextPdfPdfStamperImp alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os withChar:pdfVersion withBoolean:NO];
  }
  return self;
}


#line 129
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                             withJavaIoOutputStream:(JavaIoOutputStream *)os
                                           withChar:(jchar)pdfVersion
                                        withBoolean:(jboolean)append {
  if (self = [super init]) {
    
#line 130
    stamper_ = [[ComItextpdfTextPdfPdfStamperImp alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os withChar:pdfVersion withBoolean:append];
  }
  return self;
}


#line 138
- (id<JavaUtilMap>)getMoreInfo {
  
#line 139
  return self->moreInfo_;
}


#line 148
- (void)setMoreInfoWithJavaUtilMap:(id<JavaUtilMap>)moreInfo {
  
#line 149
  self->moreInfo_ = moreInfo;
}


#line 161
- (void)replacePageWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)r
                                           withInt:(jint)pageImported
                                           withInt:(jint)pageReplaced {
  
#line 162
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) replacePageWithComItextpdfTextPdfPdfReader:r withInt:pageImported withInt:pageReplaced];
}


#line 172
- (void)insertPageWithInt:(jint)pageNumber
withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)mediabox {
  
#line 173
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) insertPageWithInt:pageNumber withComItextpdfTextRectangle:mediabox];
}


#line 180
- (ComItextpdfTextPdfPdfSignatureAppearance *)getSignatureAppearance {
  
#line 181
  return sigApp_;
}


#line 188
- (ComItextpdfTextPdfXmlSignatureAppearance *)getXmlSignatureAppearance {
  
#line 189
  return sigXmlApp_;
}


#line 201
- (void)close {
  
#line 202
  if (((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_))->closed_)
#line 203
  return;
  if (!hasSignature_) {
    [stamper_ closeWithJavaUtilMap:moreInfo_];
  }
  else {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:@"Signature defined. Must be closed in PdfSignatureAppearance."];
  }
}


#line 218
- (ComItextpdfTextPdfPdfContentByte *)getUnderContentWithInt:(jint)pageNum {
  
#line 219
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) getUnderContentWithInt:pageNum];
}


#line 228
- (ComItextpdfTextPdfPdfContentByte *)getOverContentWithInt:(jint)pageNum {
  
#line 229
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) getOverContentWithInt:pageNum];
}


#line 236
- (jboolean)isRotateContents {
  
#line 237
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) isRotateContents];
}


#line 245
- (void)setRotateContentsWithBoolean:(jboolean)rotateContents {
  
#line 246
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setRotateContentsWithBoolean:rotateContents];
}


#line 261
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                       withBoolean:(jboolean)strength128Bits {
  
#line 262
  if ([((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) isAppend])
#line 263
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"append.mode.does.not.support.changing.the.encryption.status" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if ([stamper_ isContentWritten])
#line 265
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"content.was.already.written.to.the.output" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [stamper_ setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withInt:strength128Bits ? ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_128 : ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_40];
}


#line 282
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                           withInt:(jint)encryptionType {
  
#line 283
  if ([((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) isAppend])
#line 284
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"append.mode.does.not.support.changing.the.encryption.status" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if ([stamper_ isContentWritten])
#line 286
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"content.was.already.written.to.the.output" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [stamper_ setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withInt:encryptionType];
}


#line 303
- (void)setEncryptionWithBoolean:(jboolean)strength
                    withNSString:(NSString *)userPassword
                    withNSString:(NSString *)ownerPassword
                         withInt:(jint)permissions {
  
#line 304
  [self setEncryptionWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:userPassword] withByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:ownerPassword] withInt:permissions withBoolean:strength];
}


#line 321
- (void)setEncryptionWithInt:(jint)encryptionType
                withNSString:(NSString *)userPassword
                withNSString:(NSString *)ownerPassword
                     withInt:(jint)permissions {
  
#line 322
  [self setEncryptionWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:userPassword] withByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:ownerPassword] withInt:permissions withInt:encryptionType];
}


#line 338
- (void)setEncryptionWithJavaSecurityCertCertificateArray:(IOSObjectArray *)certs
                                             withIntArray:(IOSIntArray *)permissions
                                                  withInt:(jint)encryptionType {
  
#line 339
  if ([((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) isAppend])
#line 340
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"append.mode.does.not.support.changing.the.encryption.status" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if ([stamper_ isContentWritten])
#line 342
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"content.was.already.written.to.the.output" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [stamper_ setEncryptionWithJavaSecurityCertCertificateArray:certs withIntArray:permissions withInt:encryptionType];
}

- (ComItextpdfTextPdfPdfImportedPage *)getImportedPageWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                                              withInt:(jint)pageNumber {
  
#line 353
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) getImportedPageWithComItextpdfTextPdfPdfReader:reader withInt:pageNumber];
}

- (ComItextpdfTextPdfPdfWriter *)getWriter {
  
#line 360
  return stamper_;
}


#line 366
- (ComItextpdfTextPdfPdfReader *)getReader {
  
#line 367
  return ((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_))->reader_;
}


#line 374
- (ComItextpdfTextPdfAcroFields *)getAcroFields {
  
#line 375
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) getAcroFields];
}


#line 383
- (void)setFormFlatteningWithBoolean:(jboolean)flat {
  
#line 384
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setFormFlatteningWithBoolean:flat];
}


#line 391
- (void)setFreeTextFlatteningWithBoolean:(jboolean)flat {
  
#line 392
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setFreeTextFlatteningWithBoolean:flat];
}


#line 401
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot
                                                 withInt:(jint)page {
  
#line 402
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot withInt:page];
}


#line 416
- (ComItextpdfTextPdfPdfFormField *)addSignatureWithNSString:(NSString *)name
                                                     withInt:(jint)page
                                                   withFloat:(jfloat)llx
                                                   withFloat:(jfloat)lly
                                                   withFloat:(jfloat)urx
                                                   withFloat:(jfloat)ury {
  
#line 417
  ComItextpdfTextPdfPdfAcroForm *acroForm = [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) getAcroForm];
  ComItextpdfTextPdfPdfFormField *signature = [ComItextpdfTextPdfPdfFormField createSignatureWithComItextpdfTextPdfPdfWriter:stamper_];
  [((ComItextpdfTextPdfPdfAcroForm *) nil_chk(acroForm)) setSignatureParamsWithComItextpdfTextPdfPdfFormField:signature withNSString:name withFloat:llx withFloat:lly withFloat:urx withFloat:ury];
  [acroForm drawSignatureAppearencesWithComItextpdfTextPdfPdfFormField:signature withFloat:llx withFloat:lly withFloat:urx withFloat:ury];
  [self addAnnotationWithComItextpdfTextPdfPdfAnnotation:signature withInt:page];
  return signature;
}


#line 430
- (void)addCommentsWithComItextpdfTextPdfFdfReader:(ComItextpdfTextPdfFdfReader *)fdf {
  
#line 431
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) addCommentsWithComItextpdfTextPdfFdfReader:fdf];
}


#line 439
- (void)setOutlinesWithJavaUtilList:(id<JavaUtilList>)outlines {
  
#line 440
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setOutlinesWithJavaUtilList:outlines];
}


#line 450
- (void)setThumbnailWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                                     withInt:(jint)page {
  
#line 451
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setThumbnailWithComItextpdfTextImage:image withInt:page];
}


#line 464
- (jboolean)partialFormFlatteningWithNSString:(NSString *)name {
  
#line 465
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) partialFormFlatteningWithNSString:name];
}


#line 472
- (void)addJavaScriptWithNSString:(NSString *)js {
  
#line 473
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) addJavaScriptWithNSString:js withBoolean:![ComItextpdfTextPdfPdfEncodings isPdfDocEncodingWithNSString:js]];
}


#line 485
- (void)addFileAttachmentWithNSString:(NSString *)description_
                        withByteArray:(IOSByteArray *)fileStore
                         withNSString:(NSString *)file
                         withNSString:(NSString *)fileDisplay {
  
#line 486
  [self addFileAttachmentWithNSString:description_ withComItextpdfTextPdfPdfFileSpecification:[ComItextpdfTextPdfPdfFileSpecification fileEmbeddedWithComItextpdfTextPdfPdfWriter:stamper_ withNSString:file withNSString:fileDisplay withByteArray:fileStore]];
}

- (void)addFileAttachmentWithNSString:(NSString *)description_
withComItextpdfTextPdfPdfFileSpecification:(ComItextpdfTextPdfPdfFileSpecification *)fs {
  
#line 495
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) addFileAttachmentWithNSString:description_ withComItextpdfTextPdfPdfFileSpecification:fs];
}


#line 511
- (void)makePackageWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)initialView {
  
#line 512
  ComItextpdfTextPdfCollectionPdfCollection *collection = [[ComItextpdfTextPdfCollectionPdfCollection alloc] initWithInt:0];
  [collection putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_VIEW_() withComItextpdfTextPdfPdfObject:initialView];
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) makePackageWithComItextpdfTextPdfCollectionPdfCollection:collection];
}


#line 521
- (void)makePackageWithComItextpdfTextPdfCollectionPdfCollection:(ComItextpdfTextPdfCollectionPdfCollection *)collection {
  
#line 522
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) makePackageWithComItextpdfTextPdfCollectionPdfCollection:collection];
}


#line 530
- (void)setViewerPreferencesWithInt:(jint)preferences {
  
#line 531
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setViewerPreferencesWithInt:preferences];
}


#line 540
- (void)addViewerPreferenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                         withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 541
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) addViewerPreferenceWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
}


#line 549
- (void)setXmpMetadataWithByteArray:(IOSByteArray *)xmp {
  
#line 550
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setXmpMetadataWithByteArray:xmp];
}


#line 553
- (void)createXmpMetadata {
  
#line 554
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) createXmpMetadata];
}


#line 557
- (ComItextpdfTextXmlXmpXmpWriter *)getXmpWriter {
  
#line 558
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) getXmpWriter];
}


#line 565
- (jboolean)isFullCompression {
  
#line 566
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) isFullCompression];
}


#line 573
- (void)setFullCompression {
  
#line 574
  if ([((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) isAppend])
#line 575
  return;
  stamper_->fullCompression_ = YES;
  [stamper_ setAtLeastPdfVersionWithChar:ComItextpdfTextPdfPdfWriter_VERSION_1_5];
}


#line 588
- (void)setPageActionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)actionType
                   withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action
                                           withInt:(jint)page {
  
#line 589
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setPageActionWithComItextpdfTextPdfPdfName:actionType withComItextpdfTextPdfPdfAction:action withInt:page];
}


#line 597
- (void)setDurationWithInt:(jint)seconds
                   withInt:(jint)page {
  
#line 598
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setDurationWithInt:seconds withInt:page];
}


#line 606
- (void)setTransitionWithComItextpdfTextPdfPdfTransition:(ComItextpdfTextPdfPdfTransition *)transition
                                                 withInt:(jint)page {
  
#line 607
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) setTransitionWithComItextpdfTextPdfPdfTransition:transition withInt:page];
}


#line 649
+ (ComItextpdfTextPdfPdfStamper *)createSignatureWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                          withJavaIoOutputStream:(JavaIoOutputStream *)os
                                                                        withChar:(jchar)pdfVersion
                                                                  withJavaIoFile:(JavaIoFile *)tempFile
                                                                     withBoolean:(jboolean)append {
  
#line 650
  ComItextpdfTextPdfPdfStamper *stp;
  if (tempFile == nil) {
    ComItextpdfTextPdfByteBuffer *bout = [[ComItextpdfTextPdfByteBuffer alloc] init];
    stp = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:bout withChar:pdfVersion withBoolean:append];
    stp->sigApp_ = [[ComItextpdfTextPdfPdfSignatureAppearance alloc] initWithComItextpdfTextPdfPdfStamperImp:stp->stamper_];
    [stp->sigApp_ setSigoutWithComItextpdfTextPdfByteBuffer:bout];
  }
  else {
    if ([tempFile isDirectory])
#line 659
    tempFile = [JavaIoFile createTempFileWithNSString:@"pdf" withNSString:nil withJavaIoFile:tempFile];
    JavaIoFileOutputStream *fout = [[JavaIoFileOutputStream alloc] initWithJavaIoFile:tempFile];
    stp = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:fout withChar:pdfVersion withBoolean:append];
    stp->sigApp_ = [[ComItextpdfTextPdfPdfSignatureAppearance alloc] initWithComItextpdfTextPdfPdfStamperImp:stp->stamper_];
    [stp->sigApp_ setTempFileWithJavaIoFile:tempFile];
  }
  [((ComItextpdfTextPdfPdfSignatureAppearance *) nil_chk(((ComItextpdfTextPdfPdfStamper *) nil_chk(stp))->sigApp_)) setOriginaloutWithJavaIoOutputStream:os];
  [stp->sigApp_ setStamperWithComItextpdfTextPdfPdfStamper:stp];
  stp->hasSignature_ = YES;
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *acroForm = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()] withComItextpdfTextPdfPdfObject:catalog], [ComItextpdfTextPdfPdfDictionary class]);
  if (acroForm != nil) {
    [acroForm removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEEDAPPEARANCES_()];
    [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stp->stamper_)) markUsedWithComItextpdfTextPdfPdfObject:acroForm];
  }
  return stp;
}


#line 710
+ (ComItextpdfTextPdfPdfStamper *)createSignatureWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                          withJavaIoOutputStream:(JavaIoOutputStream *)os
                                                                        withChar:(jchar)pdfVersion {
  
#line 711
  return [ComItextpdfTextPdfPdfStamper createSignatureWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os withChar:pdfVersion withJavaIoFile:nil withBoolean:NO];
}


#line 749
+ (ComItextpdfTextPdfPdfStamper *)createSignatureWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                          withJavaIoOutputStream:(JavaIoOutputStream *)os
                                                                        withChar:(jchar)pdfVersion
                                                                  withJavaIoFile:(JavaIoFile *)tempFile {
  
#line 750
  return [ComItextpdfTextPdfPdfStamper createSignatureWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os withChar:pdfVersion withJavaIoFile:tempFile withBoolean:NO];
}


#line 753
+ (ComItextpdfTextPdfPdfStamper *)createXmlSignatureWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                             withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 754
  ComItextpdfTextPdfPdfStamper *stp = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os];
  stp->sigXmlApp_ = [[ComItextpdfTextPdfXmlSignatureAppearance alloc] initWithComItextpdfTextPdfPdfStamperImp:stp->stamper_];
  
#line 758
  [stp->sigXmlApp_ setStamperWithComItextpdfTextPdfPdfStamper:stp];
  
#line 760
  return stp;
}


#line 769
- (id<JavaUtilMap>)getPdfLayers {
  
#line 770
  return [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) getPdfLayers];
}


#line 773
- (void)markUsedWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 774
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper_)) markUsedWithComItextpdfTextPdfPdfObject:obj];
}


#line 777
- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfStamper *)other {
  [super copyAllFieldsTo:other];
  other->hasSignature_ = hasSignature_;
  other->moreInfo_ = moreInfo_;
  other->sigApp_ = sigApp_;
  other->sigXmlApp_ = sigXmlApp_;
  other->stamper_ = stamper_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:", "PdfStamper", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "initWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withChar:", "PdfStamper", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "initWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withChar:withBoolean:", "PdfStamper", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getMoreInfo", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "setMoreInfoWithJavaUtilMap:", "setMoreInfo", "V", 0x1, NULL },
    { "replacePageWithComItextpdfTextPdfPdfReader:withInt:withInt:", "replacePage", "V", 0x1, NULL },
    { "insertPageWithInt:withComItextpdfTextRectangle:", "insertPage", "V", 0x1, NULL },
    { "getSignatureAppearance", NULL, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance;", 0x1, NULL },
    { "getXmlSignatureAppearance", NULL, "Lcom.itextpdf.text.pdf.XmlSignatureAppearance;", 0x1, NULL },
    { "close", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getUnderContentWithInt:", "getUnderContent", "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getOverContentWithInt:", "getOverContent", "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "isRotateContents", NULL, "Z", 0x1, NULL },
    { "setRotateContentsWithBoolean:", "setRotateContents", "V", 0x1, NULL },
    { "setEncryptionWithByteArray:withByteArray:withInt:withBoolean:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithByteArray:withByteArray:withInt:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithBoolean:withNSString:withNSString:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithInt:withNSString:withNSString:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithJavaSecurityCertCertificateArray:withIntArray:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "getImportedPageWithComItextpdfTextPdfPdfReader:withInt:", "getImportedPage", "Lcom.itextpdf.text.pdf.PdfImportedPage;", 0x1, NULL },
    { "getWriter", NULL, "Lcom.itextpdf.text.pdf.PdfWriter;", 0x1, NULL },
    { "getReader", NULL, "Lcom.itextpdf.text.pdf.PdfReader;", 0x1, NULL },
    { "getAcroFields", NULL, "Lcom.itextpdf.text.pdf.AcroFields;", 0x1, NULL },
    { "setFormFlatteningWithBoolean:", "setFormFlattening", "V", 0x1, NULL },
    { "setFreeTextFlatteningWithBoolean:", "setFreeTextFlattening", "V", 0x1, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:withInt:", "addAnnotation", "V", 0x1, NULL },
    { "addSignatureWithNSString:withInt:withFloat:withFloat:withFloat:withFloat:", "addSignature", "Lcom.itextpdf.text.pdf.PdfFormField;", 0x1, NULL },
    { "addCommentsWithComItextpdfTextPdfFdfReader:", "addComments", "V", 0x1, "Ljava.io.IOException;" },
    { "setOutlinesWithJavaUtilList:", "setOutlines", "V", 0x1, NULL },
    { "setThumbnailWithComItextpdfTextImage:withInt:", "setThumbnail", "V", 0x1, "Lcom.itextpdf.text.pdf.PdfException;Lcom.itextpdf.text.DocumentException;" },
    { "partialFormFlatteningWithNSString:", "partialFormFlattening", "Z", 0x1, NULL },
    { "addJavaScriptWithNSString:", "addJavaScript", "V", 0x1, NULL },
    { "addFileAttachmentWithNSString:withByteArray:withNSString:withNSString:", "addFileAttachment", "V", 0x1, "Ljava.io.IOException;" },
    { "addFileAttachmentWithNSString:withComItextpdfTextPdfPdfFileSpecification:", "addFileAttachment", "V", 0x1, "Ljava.io.IOException;" },
    { "makePackageWithComItextpdfTextPdfPdfName:", "makePackage", "V", 0x1, NULL },
    { "makePackageWithComItextpdfTextPdfCollectionPdfCollection:", "makePackage", "V", 0x1, NULL },
    { "setViewerPreferencesWithInt:", "setViewerPreferences", "V", 0x1, NULL },
    { "addViewerPreferenceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "addViewerPreference", "V", 0x1, NULL },
    { "setXmpMetadataWithByteArray:", "setXmpMetadata", "V", 0x1, NULL },
    { "createXmpMetadata", NULL, "V", 0x1, NULL },
    { "getXmpWriter", NULL, "Lcom.itextpdf.text.xml.xmp.XmpWriter;", 0x1, NULL },
    { "isFullCompression", NULL, "Z", 0x1, NULL },
    { "setFullCompression", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setPageActionWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfAction:withInt:", "setPageAction", "V", 0x1, "Lcom.itextpdf.text.pdf.PdfException;" },
    { "setDurationWithInt:withInt:", "setDuration", "V", 0x1, NULL },
    { "setTransitionWithComItextpdfTextPdfPdfTransition:withInt:", "setTransition", "V", 0x1, NULL },
    { "createSignatureWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withChar:withJavaIoFile:withBoolean:", "createSignature", "Lcom.itextpdf.text.pdf.PdfStamper;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createSignatureWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withChar:", "createSignature", "Lcom.itextpdf.text.pdf.PdfStamper;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createSignatureWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withChar:withJavaIoFile:", "createSignature", "Lcom.itextpdf.text.pdf.PdfStamper;", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "createXmlSignatureWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:", "createXmlSignature", "Lcom.itextpdf.text.pdf.PdfStamper;", 0x9, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getPdfLayers", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "markUsedWithComItextpdfTextPdfPdfObject:", "markUsed", "V", 0x1, NULL },
    { "init", "PdfStamper", NULL, 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "stamper_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfStamperImp;", NULL,  },
    { "moreInfo_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "hasSignature_", NULL, 0x4, "Z", NULL,  },
    { "sigApp_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance;", NULL,  },
    { "sigXmlApp_", NULL, 0x4, "Lcom.itextpdf.text.pdf.XmlSignatureAppearance;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfStamper = { "PdfStamper", "com.itextpdf.text.pdf", NULL, 0x1, 53, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfStamper;
}

@end
