//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TrueTypeFontSubSet.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TrueTypeFontSubSet.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/TrueTypeFontSubSet.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

BOOL ComItextpdfTextPdfTrueTypeFontSubSet_initialized = NO;


#line 62
@implementation ComItextpdfTextPdfTrueTypeFontSubSet

IOSObjectArray * ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesSimple_;
IOSObjectArray * ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesCmap_;
IOSObjectArray * ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesExtra_;
IOSIntArray * ComItextpdfTextPdfTrueTypeFontSubSet_entrySelectors_;


#line 116
- (instancetype)initWithNSString:(NSString *)fileName
withComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)rf
             withJavaUtilHashSet:(JavaUtilHashSet *)glyphsUsed
                         withInt:(jint)directoryOffset
                     withBoolean:(jboolean)includeCmap
                     withBoolean:(jboolean)includeExtras {
  if (self = [super init]) {
    
#line 117
    self->fileName_ = fileName;
    
#line 118
    self->rf_ = rf;
    
#line 119
    self->glyphsUsed_ = glyphsUsed;
    
#line 120
    self->includeCmap_ = includeCmap;
    
#line 121
    self->includeExtras_ = includeExtras;
    
#line 122
    self->directoryOffset_ = directoryOffset;
    
#line 123
    glyphsInList_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:glyphsUsed];
  }
  return self;
}


#line 131
- (IOSByteArray *)process {
  
#line 132
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) reOpen];
    [self createTableDirectory];
    [self readLoca];
    [self flatGlyphs];
    [self createNewGlyphTables];
    [self locaTobytes];
    [self assembleFont];
    return outFont_;
  }
  @finally {
    @try {
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
}


#line 152
- (void)assembleFont {
  IOSIntArray *tableLocation;
  jint fullFontSize = 0;
  IOSObjectArray *tableNames;
  if (includeExtras_)
#line 157
  tableNames = ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesExtra_;
  else {
    if (includeCmap_)
#line 160
    tableNames = ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesCmap_;
    else
#line 162
    tableNames = ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesSimple_;
  }
  jint tablesUsed = 2;
  jint len = 0;
  for (jint k = 0; k < ((IOSObjectArray *) nil_chk(tableNames))->size_; ++k) {
    NSString *name = IOSObjectArray_Get(tableNames, k);
    if ([((NSString *) nil_chk(name)) isEqual:@"glyf"] || [name isEqual:@"loca"])
#line 169
    continue;
    tableLocation = [((JavaUtilHashMap *) nil_chk(tableDirectory_)) getWithId:name];
    if (tableLocation == nil)
#line 172
    continue;
    ++tablesUsed;
    fullFontSize += (IOSIntArray_Get(nil_chk(tableLocation), ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_LENGTH) + 3) & ~3;
  }
  fullFontSize += ((IOSByteArray *) nil_chk(newLocaTableOut_))->size_;
  fullFontSize += ((IOSByteArray *) nil_chk(newGlyfTable_))->size_;
  jint ref = 16 * tablesUsed + 12;
  fullFontSize += ref;
  outFont_ = [IOSByteArray arrayWithLength:fullFontSize];
  fontPtr_ = 0;
  [self writeFontIntWithInt:(jint) 0x00010000];
  [self writeFontShortWithInt:tablesUsed];
  jint selector = IOSIntArray_Get(nil_chk(ComItextpdfTextPdfTrueTypeFontSubSet_entrySelectors_), tablesUsed);
  [self writeFontShortWithInt:(LShift32(1, selector)) * 16];
  [self writeFontShortWithInt:selector];
  [self writeFontShortWithInt:(tablesUsed - (LShift32(1, selector))) * 16];
  for (jint k = 0; k < tableNames->size_; ++k) {
    NSString *name = IOSObjectArray_Get(tableNames, k);
    tableLocation = [((JavaUtilHashMap *) nil_chk(tableDirectory_)) getWithId:name];
    if (tableLocation == nil)
#line 192
    continue;
    [self writeFontStringWithNSString:name];
    if ([((NSString *) nil_chk(name)) isEqual:@"glyf"]) {
      [self writeFontIntWithInt:[self calculateChecksumWithByteArray:newGlyfTable_]];
      len = glyfTableRealSize_;
    }
    else if ([name isEqual:@"loca"]) {
      [self writeFontIntWithInt:[self calculateChecksumWithByteArray:newLocaTableOut_]];
      len = locaTableRealSize_;
    }
    else {
      [self writeFontIntWithInt:IOSIntArray_Get(nil_chk(tableLocation), ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_CHECKSUM)];
      len = IOSIntArray_Get(tableLocation, ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_LENGTH);
    }
    [self writeFontIntWithInt:ref];
    [self writeFontIntWithInt:len];
    ref += (len + 3) & ~3;
  }
  for (jint k = 0; k < tableNames->size_; ++k) {
    NSString *name = IOSObjectArray_Get(tableNames, k);
    tableLocation = [((JavaUtilHashMap *) nil_chk(tableDirectory_)) getWithId:name];
    if (tableLocation == nil)
#line 214
    continue;
    if ([((NSString *) nil_chk(name)) isEqual:@"glyf"]) {
      [JavaLangSystem arraycopyWithId:newGlyfTable_ withInt:0 withId:outFont_ withInt:fontPtr_ withInt:newGlyfTable_->size_];
      fontPtr_ += newGlyfTable_->size_;
      newGlyfTable_ = nil;
    }
    else if ([name isEqual:@"loca"]) {
      [JavaLangSystem arraycopyWithId:newLocaTableOut_ withInt:0 withId:outFont_ withInt:fontPtr_ withInt:newLocaTableOut_->size_];
      fontPtr_ += newLocaTableOut_->size_;
      newLocaTableOut_ = nil;
    }
    else {
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(tableLocation), ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_OFFSET)];
      [rf_ readFullyWithByteArray:outFont_ withInt:fontPtr_ withInt:IOSIntArray_Get(tableLocation, ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_LENGTH)];
      fontPtr_ += (IOSIntArray_Get(tableLocation, ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_LENGTH) + 3) & ~3;
    }
  }
}


#line 233
- (void)createTableDirectory {
  
#line 234
  tableDirectory_ = [[JavaUtilHashMap alloc] init];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:directoryOffset_];
  jint id_ = [rf_ readInt];
  if (id_ != (jint) 0x00010000)
#line 238
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.is.not.a.true.type.file" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fileName_ } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  jint num_tables = [rf_ readUnsignedShort];
  [rf_ skipBytesWithInt:6];
  for (jint k = 0; k < num_tables; ++k) {
    NSString *tag = [self readStandardStringWithInt:4];
    IOSIntArray *tableLocation = [IOSIntArray arrayWithLength:3];
    *IOSIntArray_GetRef(tableLocation, ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_CHECKSUM) = [rf_ readInt];
    *IOSIntArray_GetRef(tableLocation, ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_OFFSET) = [rf_ readInt];
    *IOSIntArray_GetRef(tableLocation, ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_LENGTH) = [rf_ readInt];
    (void) [tableDirectory_ putWithId:tag withId:tableLocation];
  }
}


#line 251
- (void)readLoca {
  
#line 252
  IOSIntArray *tableLocation;
  tableLocation = [((JavaUtilHashMap *) nil_chk(tableDirectory_)) getWithId:@"head"];
  if (tableLocation == nil)
#line 255
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"head", fileName_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:IOSIntArray_Get(nil_chk(tableLocation), ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_OFFSET) + ComItextpdfTextPdfTrueTypeFontSubSet_HEAD_LOCA_FORMAT_OFFSET];
  locaShortTable_ = ([rf_ readUnsignedShort] == 0);
  tableLocation = [tableDirectory_ getWithId:@"loca"];
  if (tableLocation == nil)
#line 260
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"loca", fileName_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  [rf_ seekWithLong:IOSIntArray_Get(nil_chk(tableLocation), ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_OFFSET)];
  if (locaShortTable_) {
    jint entries = IOSIntArray_Get(tableLocation, ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_LENGTH) / 2;
    locaTable_ = [IOSIntArray arrayWithLength:entries];
    for (jint k = 0; k < entries; ++k)
#line 266
    *IOSIntArray_GetRef(locaTable_, k) = [rf_ readUnsignedShort] * 2;
  }
  else {
    jint entries = IOSIntArray_Get(tableLocation, ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_LENGTH) / 4;
    locaTable_ = [IOSIntArray arrayWithLength:entries];
    for (jint k = 0; k < entries; ++k)
#line 272
    *IOSIntArray_GetRef(locaTable_, k) = [rf_ readInt];
  }
}


#line 276
- (void)createNewGlyphTables {
  
#line 277
  newLocaTable_ = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(locaTable_))->size_];
  IOSIntArray *activeGlyphs = [IOSIntArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(glyphsInList_)) size]];
  for (jint k = 0; k < activeGlyphs->size_; ++k)
#line 280
  *IOSIntArray_GetRef(activeGlyphs, k) = [((JavaLangInteger *) nil_chk([glyphsInList_ getWithInt:k])) intValue];
  [JavaUtilArrays sortWithIntArray:activeGlyphs];
  jint glyfSize = 0;
  for (jint k = 0; k < activeGlyphs->size_; ++k) {
    jint glyph = IOSIntArray_Get(activeGlyphs, k);
    glyfSize += IOSIntArray_Get(locaTable_, glyph + 1) - IOSIntArray_Get(locaTable_, glyph);
  }
  glyfTableRealSize_ = glyfSize;
  glyfSize = (glyfSize + 3) & ~3;
  newGlyfTable_ = [IOSByteArray arrayWithLength:glyfSize];
  jint glyfPtr = 0;
  jint listGlyf = 0;
  for (jint k = 0; k < newLocaTable_->size_; ++k) {
    *IOSIntArray_GetRef(newLocaTable_, k) = glyfPtr;
    if (listGlyf < activeGlyphs->size_ && IOSIntArray_Get(activeGlyphs, listGlyf) == k) {
      ++listGlyf;
      *IOSIntArray_GetRef(newLocaTable_, k) = glyfPtr;
      jint start = IOSIntArray_Get(locaTable_, k);
      jint len = IOSIntArray_Get(locaTable_, k + 1) - start;
      if (len > 0) {
        [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:tableGlyphOffset_ + start];
        [rf_ readFullyWithByteArray:newGlyfTable_ withInt:glyfPtr withInt:len];
        glyfPtr += len;
      }
    }
  }
}


#line 308
- (void)locaTobytes {
  
#line 309
  if (locaShortTable_)
#line 310
  locaTableRealSize_ = ((IOSIntArray *) nil_chk(newLocaTable_))->size_ * 2;
  else
#line 312
  locaTableRealSize_ = ((IOSIntArray *) nil_chk(newLocaTable_))->size_ * 4;
  newLocaTableOut_ = [IOSByteArray arrayWithLength:(locaTableRealSize_ + 3) & ~3];
  outFont_ = newLocaTableOut_;
  fontPtr_ = 0;
  for (jint k = 0; k < ((IOSIntArray *) nil_chk(newLocaTable_))->size_; ++k) {
    if (locaShortTable_)
#line 318
    [self writeFontShortWithInt:IOSIntArray_Get(newLocaTable_, k) / 2];
    else
#line 320
    [self writeFontIntWithInt:IOSIntArray_Get(newLocaTable_, k)];
  }
}


#line 325
- (void)flatGlyphs {
  
#line 326
  IOSIntArray *tableLocation;
  tableLocation = [((JavaUtilHashMap *) nil_chk(tableDirectory_)) getWithId:@"glyf"];
  if (tableLocation == nil)
#line 329
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"table.1.does.not.exist.in.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"glyf", fileName_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  JavaLangInteger *glyph0 = [JavaLangInteger valueOfWithInt:0];
  if (![((JavaUtilHashSet *) nil_chk(glyphsUsed_)) containsWithId:glyph0]) {
    [glyphsUsed_ addWithId:glyph0];
    [((JavaUtilArrayList *) nil_chk(glyphsInList_)) addWithId:glyph0];
  }
  tableGlyphOffset_ = IOSIntArray_Get(nil_chk(tableLocation), ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_OFFSET);
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(glyphsInList_)) size]; ++k) {
    jint glyph = [((JavaLangInteger *) nil_chk([glyphsInList_ getWithInt:k])) intValue];
    [self checkGlyphCompositeWithInt:glyph];
  }
}


#line 342
- (void)checkGlyphCompositeWithInt:(jint)glyph {
  
#line 343
  jint start = IOSIntArray_Get(nil_chk(locaTable_), glyph);
  if (start == IOSIntArray_Get(locaTable_, glyph + 1))
#line 345
  return;
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:tableGlyphOffset_ + start];
  jint numContours = [rf_ readShort];
  if (numContours >= 0)
#line 349
  return;
  [rf_ skipBytesWithInt:8];
  for (; ; ) {
    jint flags = [rf_ readUnsignedShort];
    JavaLangInteger *cGlyph = [JavaLangInteger valueOfWithInt:[rf_ readUnsignedShort]];
    if (![((JavaUtilHashSet *) nil_chk(glyphsUsed_)) containsWithId:cGlyph]) {
      [glyphsUsed_ addWithId:cGlyph];
      [((JavaUtilArrayList *) nil_chk(glyphsInList_)) addWithId:cGlyph];
    }
    if ((flags & ComItextpdfTextPdfTrueTypeFontSubSet_MORE_COMPONENTS) == 0)
#line 359
    return;
    jint skip;
    if ((flags & ComItextpdfTextPdfTrueTypeFontSubSet_ARG_1_AND_2_ARE_WORDS) != 0)
#line 362
    skip = 4;
    else
#line 364
    skip = 2;
    if ((flags & ComItextpdfTextPdfTrueTypeFontSubSet_WE_HAVE_A_SCALE) != 0)
#line 366
    skip += 2;
    else if ((flags & ComItextpdfTextPdfTrueTypeFontSubSet_WE_HAVE_AN_X_AND_Y_SCALE) != 0)
#line 368
    skip += 4;
    if ((flags & ComItextpdfTextPdfTrueTypeFontSubSet_WE_HAVE_A_TWO_BY_TWO) != 0)
#line 370
    skip += 8;
    [rf_ skipBytesWithInt:skip];
  }
}


#line 381
- (NSString *)readStandardStringWithInt:(jint)length {
  
#line 382
  IOSByteArray *buf = [IOSByteArray arrayWithLength:length];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) readFullyWithByteArray:buf];
  @try {
    return [NSString stringWithBytes:buf charsetName:ComItextpdfTextPdfBaseFont_get_WINANSI_()];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 392
- (void)writeFontShortWithInt:(jint)n {
  
#line 393
  *IOSByteArray_GetRef(nil_chk(outFont_), fontPtr_++) = (jbyte) (RShift32(n, 8));
  *IOSByteArray_GetRef(outFont_, fontPtr_++) = (jbyte) n;
}


#line 397
- (void)writeFontIntWithInt:(jint)n {
  
#line 398
  *IOSByteArray_GetRef(nil_chk(outFont_), fontPtr_++) = (jbyte) (RShift32(n, 24));
  *IOSByteArray_GetRef(outFont_, fontPtr_++) = (jbyte) (RShift32(n, 16));
  *IOSByteArray_GetRef(outFont_, fontPtr_++) = (jbyte) (RShift32(n, 8));
  *IOSByteArray_GetRef(outFont_, fontPtr_++) = (jbyte) n;
}


#line 404
- (void)writeFontStringWithNSString:(NSString *)s {
  
#line 405
  IOSByteArray *b = [ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:s withNSString:ComItextpdfTextPdfBaseFont_get_WINANSI_()];
  [JavaLangSystem arraycopyWithId:b withInt:0 withId:outFont_ withInt:fontPtr_ withInt:((IOSByteArray *) nil_chk(b))->size_];
  fontPtr_ += b->size_;
}


#line 410
- (jint)calculateChecksumWithByteArray:(IOSByteArray *)b {
  
#line 411
  jint len = ((IOSByteArray *) nil_chk(b))->size_ / 4;
  jint v0 = 0;
  jint v1 = 0;
  jint v2 = 0;
  jint v3 = 0;
  jint ptr = 0;
  for (jint k = 0; k < len; ++k) {
    v3 += IOSByteArray_Get(b, ptr++) & (jint) 0xff;
    v2 += IOSByteArray_Get(b, ptr++) & (jint) 0xff;
    v1 += IOSByteArray_Get(b, ptr++) & (jint) 0xff;
    v0 += IOSByteArray_Get(b, ptr++) & (jint) 0xff;
  }
  return v0 + (LShift32(v1, 8)) + (LShift32(v2, 16)) + (LShift32(v3, 24));
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfTrueTypeFontSubSet *)other {
  [super copyAllFieldsTo:other];
  other->directoryOffset_ = directoryOffset_;
  other->fileName_ = fileName_;
  other->fontPtr_ = fontPtr_;
  other->glyfTableRealSize_ = glyfTableRealSize_;
  other->glyphsInList_ = glyphsInList_;
  other->glyphsUsed_ = glyphsUsed_;
  other->includeCmap_ = includeCmap_;
  other->includeExtras_ = includeExtras_;
  other->locaShortTable_ = locaShortTable_;
  other->locaTable_ = locaTable_;
  other->locaTableRealSize_ = locaTableRealSize_;
  other->newGlyfTable_ = newGlyfTable_;
  other->newLocaTable_ = newLocaTable_;
  other->newLocaTableOut_ = newLocaTableOut_;
  other->outFont_ = outFont_;
  other->rf_ = rf_;
  other->tableDirectory_ = tableDirectory_;
  other->tableGlyphOffset_ = tableGlyphOffset_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfTrueTypeFontSubSet class]) {
    ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesSimple_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 63
      @"cvt ", @"fpgm", @"glyf", @"head",
#line 64
      @"hhea", @"hmtx", @"loca", @"maxp", @"prep" } count:9 type:[IOSClass classWithClass:[NSString class]]];
      ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesCmap_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 65
        @"cmap", @"cvt ", @"fpgm", @"glyf", @"head",
#line 66
        @"hhea", @"hmtx", @"loca", @"maxp", @"prep" } count:10 type:[IOSClass classWithClass:[NSString class]]];
        ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesExtra_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 67
          @"OS/2", @"cmap", @"cvt ", @"fpgm", @"glyf", @"head",
#line 68
          @"hhea", @"hmtx", @"loca", @"maxp", @"name, prep" } count:11 type:[IOSClass classWithClass:[NSString class]]];
          ComItextpdfTextPdfTrueTypeFontSubSet_entrySelectors_ = [IOSIntArray arrayWithInts:(jint[]){
#line 69
            0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4 } count:21];
            ComItextpdfTextPdfTrueTypeFontSubSet_initialized = YES;
          }
        }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withComItextpdfTextPdfRandomAccessFileOrArray:withJavaUtilHashSet:withInt:withBoolean:withBoolean:", "TrueTypeFontSubSet", NULL, 0x0, NULL },
    { "process", NULL, "[B", 0x0, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "assembleFont", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "createTableDirectory", NULL, "V", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "readLoca", NULL, "V", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "createNewGlyphTables", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "locaTobytes", NULL, "V", 0x4, NULL },
    { "flatGlyphs", NULL, "V", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "checkGlyphCompositeWithInt:", "checkGlyphComposite", "V", 0x4, "Ljava.io.IOException;" },
    { "readStandardStringWithInt:", "readStandardString", "Ljava.lang.String;", 0x4, "Ljava.io.IOException;" },
    { "writeFontShortWithInt:", "writeFontShort", "V", 0x4, NULL },
    { "writeFontIntWithInt:", "writeFontInt", "V", 0x4, NULL },
    { "writeFontStringWithNSString:", "writeFontString", "V", 0x4, NULL },
    { "calculateChecksumWithByteArray:", "calculateChecksum", "I", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tableNamesSimple_", NULL, 0x18, "[Ljava.lang.String;", &ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesSimple_,  },
    { "tableNamesCmap_", NULL, 0x18, "[Ljava.lang.String;", &ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesCmap_,  },
    { "tableNamesExtra_", NULL, 0x18, "[Ljava.lang.String;", &ComItextpdfTextPdfTrueTypeFontSubSet_tableNamesExtra_,  },
    { "entrySelectors_", NULL, 0x18, "[I", &ComItextpdfTextPdfTrueTypeFontSubSet_entrySelectors_,  },
    { "TABLE_CHECKSUM_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_CHECKSUM },
    { "TABLE_OFFSET_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_OFFSET },
    { "TABLE_LENGTH_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_TABLE_LENGTH },
    { "HEAD_LOCA_FORMAT_OFFSET_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_HEAD_LOCA_FORMAT_OFFSET },
    { "ARG_1_AND_2_ARE_WORDS_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_ARG_1_AND_2_ARE_WORDS },
    { "WE_HAVE_A_SCALE_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_WE_HAVE_A_SCALE },
    { "MORE_COMPONENTS_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_MORE_COMPONENTS },
    { "WE_HAVE_AN_X_AND_Y_SCALE_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_WE_HAVE_AN_X_AND_Y_SCALE },
    { "WE_HAVE_A_TWO_BY_TWO_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfTrueTypeFontSubSet_WE_HAVE_A_TWO_BY_TWO },
    { "tableDirectory_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "rf_", NULL, 0x4, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "fileName_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "includeCmap_", NULL, 0x4, "Z", NULL,  },
    { "includeExtras_", NULL, 0x4, "Z", NULL,  },
    { "locaShortTable_", NULL, 0x4, "Z", NULL,  },
    { "locaTable_", NULL, 0x4, "[I", NULL,  },
    { "glyphsUsed_", NULL, 0x4, "Ljava.util.HashSet;", NULL,  },
    { "glyphsInList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "tableGlyphOffset_", NULL, 0x4, "I", NULL,  },
    { "newLocaTable_", NULL, 0x4, "[I", NULL,  },
    { "newLocaTableOut_", NULL, 0x4, "[B", NULL,  },
    { "newGlyfTable_", NULL, 0x4, "[B", NULL,  },
    { "glyfTableRealSize_", NULL, 0x4, "I", NULL,  },
    { "locaTableRealSize_", NULL, 0x4, "I", NULL,  },
    { "outFont_", NULL, 0x4, "[B", NULL,  },
    { "fontPtr_", NULL, 0x4, "I", NULL,  },
    { "directoryOffset_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfTrueTypeFontSubSet = { "TrueTypeFontSubSet", "com.itextpdf.text.pdf", NULL, 0x0, 14, methods, 31, fields, 0, NULL};
  return &_ComItextpdfTextPdfTrueTypeFontSubSet;
}

@end
