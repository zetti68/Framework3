//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/AcroFields.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/AcroFields.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/io/RASInputStream.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/io/WindowRandomAccessSource.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/BaseField.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/CMYKColor.h"
#include "com/itextpdf/text/pdf/DocumentFont.h"
#include "com/itextpdf/text/pdf/ExtendedColor.h"
#include "com/itextpdf/text/pdf/FdfReader.h"
#include "com/itextpdf/text/pdf/FdfWriter.h"
#include "com/itextpdf/text/pdf/FontDetails.h"
#include "com/itextpdf/text/pdf/GrayColor.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PRTokeniser.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfAppearance.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfBorderDictionary.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStamperImp.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/PushbuttonField.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/TextField.h"
#include "com/itextpdf/text/pdf/XfaForm.h"
#include "com/itextpdf/text/pdf/XfdfReader.h"
#include "com/itextpdf/text/pdf/codec/Base64.h"
#include "com/itextpdf/text/xml/XmlToTxt.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/w3c/dom/Node.h"

BOOL ComItextpdfTextPdfAcroFields_initialized = NO;


#line 83
@implementation ComItextpdfTextPdfAcroFields

JavaUtilHashMap * ComItextpdfTextPdfAcroFields_stdFieldFontNames_;
IOSObjectArray * ComItextpdfTextPdfAcroFields_buttonRemove_;


#line 148
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                    withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self = [super init]) {
    extensionFonts_ =
#line 94
    [[JavaUtilHashMap alloc] init];
    generateAppearances_ =
#line 140
    YES;
    localFonts_ =
#line 142
    [[JavaUtilHashMap alloc] init];
    
#line 149
    self->reader_ = reader;
    
#line 150
    self->writer_ = writer;
    
#line 151
    @try {
      xfa_ = [[ComItextpdfTextPdfXfaForm alloc] initWithComItextpdfTextPdfPdfReader:reader];
    }
    @catch (
#line 153
    JavaLangException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
    
#line 156
    if ([writer isKindOfClass:[ComItextpdfTextPdfPdfStamperImp class]]) {
      append_ = [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) check_class_cast(writer, [ComItextpdfTextPdfPdfStamperImp class])))) isAppend];
    }
    
#line 159
    [self fill];
  }
  return self;
}


#line 162
- (void)fill {
  
#line 163
  fields_ = [[JavaUtilHashMap alloc] init];
  ComItextpdfTextPdfPdfDictionary *top = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()]], [ComItextpdfTextPdfPdfDictionary class]);
  
#line 166
  if (top == nil) {
    return;
  }
  ComItextpdfTextPdfPdfBoolean *needappearances = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(top)) getAsBooleanWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEEDAPPEARANCES_()];
  if (needappearances == nil || ![needappearances booleanValue]) {
    [self setGenerateAppearancesWithBoolean:YES];
  }
  else {
    
#line 173
    [self setGenerateAppearancesWithBoolean:NO];
  }
  ComItextpdfTextPdfPdfArray *arrfds = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[top getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_()]], [ComItextpdfTextPdfPdfArray class]);
  if (arrfds == nil || [arrfds size] == 0) {
    return;
  }
  for (jint k = 1; k <= [reader_ getNumberOfPages]; ++k) {
    ComItextpdfTextPdfPdfDictionary *page = [reader_ getPageNReleaseWithInt:k];
    ComItextpdfTextPdfPdfArray *annots = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()] withComItextpdfTextPdfPdfObject:page], [ComItextpdfTextPdfPdfArray class]);
    if (annots == nil) {
      continue;
    }
    for (jint j = 0; j < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++j) {
      ComItextpdfTextPdfPdfDictionary *annot = [annots getAsDictWithInt:j];
      if (annot == nil) {
        [ComItextpdfTextPdfPdfReader releaseLastXrefPartialWithComItextpdfTextPdfPdfObject:[annots getAsIndirectObjectWithInt:j]];
        continue;
      }
      if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_WIDGET_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(annot)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()]]) {
        [ComItextpdfTextPdfPdfReader releaseLastXrefPartialWithComItextpdfTextPdfPdfObject:[annots getAsIndirectObjectWithInt:j]];
        continue;
      }
      ComItextpdfTextPdfPdfDictionary *widget = annot;
      ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [dic putAllWithComItextpdfTextPdfPdfDictionary:annot];
      NSString *name = @"";
      ComItextpdfTextPdfPdfDictionary *value = nil;
      ComItextpdfTextPdfPdfObject *lastV = nil;
      while (annot != nil) {
        [dic mergeDifferentWithComItextpdfTextPdfPdfDictionary:annot];
        ComItextpdfTextPdfPdfString *t = [annot getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_()];
        if (t != nil) {
          name = JreStrcat("$C$", [t toUnicodeString], '.', name);
        }
        if (lastV == nil && [annot getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()] != nil) {
          lastV = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[annot getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()]];
        }
        if (value == nil && t != nil) {
          value = annot;
          if ([annot getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()] == nil && lastV != nil) {
            [value putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:lastV];
          }
        }
        annot = [annot getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()];
      }
      if (((jint) [name length]) > 0) {
        name = [name substring:0 endIndex:((jint) [name length]) - 1];
      }
      ComItextpdfTextPdfAcroFields_Item *item = [fields_ getWithId:name];
      if (item == nil) {
        item = [[ComItextpdfTextPdfAcroFields_Item alloc] init];
        (void) [fields_ putWithId:name withId:item];
      }
      if (value == nil) {
        [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) addValueWithComItextpdfTextPdfPdfDictionary:widget];
      }
      else {
        
#line 229
        [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) addValueWithComItextpdfTextPdfPdfDictionary:value];
      }
      [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) addWidgetWithComItextpdfTextPdfPdfDictionary:widget];
      [item addWidgetRefWithComItextpdfTextPdfPdfIndirectReference:[annots getAsIndirectObjectWithInt:j]];
      if (top != nil) {
        [dic mergeDifferentWithComItextpdfTextPdfPdfDictionary:top];
      }
      [item addMergedWithComItextpdfTextPdfPdfDictionary:dic];
      [item addPageWithInt:k];
      [item addTabOrderWithInt:j];
    }
  }
  
#line 244
  ComItextpdfTextPdfPdfNumber *sigFlags = [top getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIGFLAGS_()];
  if (sigFlags == nil || ([sigFlags intValue] & 1) != 1) {
    return;
  }
  for (jint j = 0; j < [((ComItextpdfTextPdfPdfArray *) nil_chk(arrfds)) size]; ++j) {
    ComItextpdfTextPdfPdfDictionary *annot = [arrfds getAsDictWithInt:j];
    if (annot == nil) {
      [ComItextpdfTextPdfPdfReader releaseLastXrefPartialWithComItextpdfTextPdfPdfObject:[arrfds getAsIndirectObjectWithInt:j]];
      continue;
    }
    if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_WIDGET_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(annot)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()]]) {
      [ComItextpdfTextPdfPdfReader releaseLastXrefPartialWithComItextpdfTextPdfPdfObject:[arrfds getAsIndirectObjectWithInt:j]];
      continue;
    }
    ComItextpdfTextPdfPdfArray *kids = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[annot getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()]], [ComItextpdfTextPdfPdfArray class]);
    if (kids != nil) {
      continue;
    }
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [dic putAllWithComItextpdfTextPdfPdfDictionary:annot];
    ComItextpdfTextPdfPdfString *t = [annot getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_()];
    if (t == nil) {
      continue;
    }
    NSString *name = [((ComItextpdfTextPdfPdfString *) nil_chk(t)) toUnicodeString];
    if ([fields_ containsKeyWithId:name]) {
      continue;
    }
    ComItextpdfTextPdfAcroFields_Item *item = [[ComItextpdfTextPdfAcroFields_Item alloc] init];
    (void) [fields_ putWithId:name withId:item];
    [item addValueWithComItextpdfTextPdfPdfDictionary:dic];
    [item addWidgetWithComItextpdfTextPdfPdfDictionary:dic];
    [item addWidgetRefWithComItextpdfTextPdfPdfIndirectReference:[arrfds getAsIndirectObjectWithInt:j]];
    [item addMergedWithComItextpdfTextPdfPdfDictionary:dic];
    [item addPageWithInt:-1];
    [item addTabOrderWithInt:-1];
  }
}


#line 297
- (IOSObjectArray *)getAppearanceStatesWithNSString:(NSString *)fieldName {
  
#line 298
  ComItextpdfTextPdfAcroFields_Item *fd = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:fieldName];
  if (fd == nil) {
    return nil;
  }
  JavaUtilHashSet *names = [[JavaUtilLinkedHashSet alloc] init];
  ComItextpdfTextPdfPdfDictionary *vals = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(fd)) getValueWithInt:0];
  ComItextpdfTextPdfPdfString *stringOpt = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(vals)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPT_()];
  
#line 307
  if (stringOpt != nil) {
    [names addWithId:[stringOpt toUnicodeString]];
  }
  else {
    
#line 310
    ComItextpdfTextPdfPdfArray *arrayOpt = [vals getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPT_()];
    if (arrayOpt != nil) {
      for (jint k = 0; k < [arrayOpt size]; ++k) {
        ComItextpdfTextPdfPdfObject *pdfObject = [arrayOpt getDirectObjectWithInt:k];
        ComItextpdfTextPdfPdfString *valStr = nil;
        {
          
#line 318
          ComItextpdfTextPdfPdfArray *pdfArray;
          
#line 316
          switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(pdfObject)) type]) {
            case ComItextpdfTextPdfPdfObject_ARRAY:
            pdfArray = (ComItextpdfTextPdfPdfArray *) check_class_cast(pdfObject, [ComItextpdfTextPdfPdfArray class]);
            valStr = [pdfArray getAsStringWithInt:1];
            break;
            case ComItextpdfTextPdfPdfObject_STRING:
            valStr = (ComItextpdfTextPdfPdfString *) check_class_cast(pdfObject, [ComItextpdfTextPdfPdfString class]);
            break;
          }
        }
        if (valStr != nil) {
          [names addWithId:[valStr toUnicodeString]];
        }
      }
    }
  }
  for (jint k = 0; k < [fd size]; ++k) {
    ComItextpdfTextPdfPdfDictionary *dic = [fd getWidgetWithInt:k];
    dic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
    if (dic == nil) {
      continue;
    }
    dic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_()];
    if (dic == nil) {
      continue;
    }
    for (id __strong element in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getKeys])) {
      NSString *name = [ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfName *) nil_chk(((ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class])))) description]];
      [names addWithId:name];
    }
  }
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:[names size] type:[IOSClass classWithClass:[NSString class]]];
  return [names toArrayWithNSObjectArray:out];
}


#line 351
- (IOSObjectArray *)getListOptionWithNSString:(NSString *)fieldName
                                      withInt:(jint)idx {
  
#line 352
  ComItextpdfTextPdfAcroFields_Item *fd = [self getFieldItemWithNSString:fieldName];
  if (fd == nil) {
    return nil;
  }
  ComItextpdfTextPdfPdfArray *ar = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfAcroFields_Item *) nil_chk(fd)) getMergedWithInt:0])) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPT_()];
  if (ar == nil) {
    return nil;
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[((ComItextpdfTextPdfPdfArray *) nil_chk(ar)) size] type:[IOSClass classWithClass:[NSString class]]];
  for (jint k = 0; k < [ar size]; ++k) {
    ComItextpdfTextPdfPdfObject *obj = [ar getDirectObjectWithInt:k];
    @try {
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isArray]) {
        obj = [((ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class])) getDirectObjectWithInt:idx];
      }
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isString]) {
        IOSObjectArray_Set(ret, k, [((ComItextpdfTextPdfPdfString *) check_class_cast(obj, [ComItextpdfTextPdfPdfString class])) toUnicodeString]);
      }
      else {
        
#line 370
        IOSObjectArray_Set(ret, k, [obj description]);
      }
    }
    @catch (
#line 372
    JavaLangException *e) {
      IOSObjectArray_Set(ret, k, @"");
    }
  }
  return ret;
}

- (IOSObjectArray *)getListOptionExportWithNSString:(NSString *)fieldName {
  
#line 389
  return [self getListOptionWithNSString:fieldName withInt:0];
}


#line 401
- (IOSObjectArray *)getListOptionDisplayWithNSString:(NSString *)fieldName {
  
#line 402
  return [self getListOptionWithNSString:fieldName withInt:1];
}


#line 434
- (jboolean)setListOptionWithNSString:(NSString *)fieldName
                    withNSStringArray:(IOSObjectArray *)exportValues
                    withNSStringArray:(IOSObjectArray *)displayValues {
  
#line 435
  if (exportValues == nil && displayValues == nil) {
    return NO;
  }
  if (exportValues != nil && displayValues != nil &&
#line 439
  exportValues->size_ != displayValues->size_) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:
#line 441
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 442
    @"the.export.and.the.display.array.must.have.the.same.size" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  jint ftype = [self getFieldTypeWithNSString:fieldName];
  if (ftype != ComItextpdfTextPdfAcroFields_FIELD_TYPE_COMBO && ftype != ComItextpdfTextPdfAcroFields_FIELD_TYPE_LIST) {
    return NO;
  }
  ComItextpdfTextPdfAcroFields_Item *fd = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:fieldName];
  IOSObjectArray *sing = nil;
  if (exportValues == nil && displayValues != nil) {
    sing = displayValues;
  }
  else
#line 452
  if (exportValues != nil && displayValues == nil) {
    sing = exportValues;
  }
  ComItextpdfTextPdfPdfArray *opt = [[ComItextpdfTextPdfPdfArray alloc] init];
  if (sing != nil) {
    for (jint k = 0; k < sing->size_; ++k) {
      [opt addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(sing, k) withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
    }
  }
  else {
    
#line 461
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(exportValues))->size_; ++k) {
      ComItextpdfTextPdfPdfArray *a = [[ComItextpdfTextPdfPdfArray alloc] init];
      [a addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(exportValues, k) withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
      [a addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(nil_chk(displayValues), k) withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
      [opt addWithComItextpdfTextPdfPdfObject:a];
    }
  }
  [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(fd)) writeToAllWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPT_() withComItextpdfTextPdfPdfObject:opt withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE | ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED];
  return YES;
}


#line 486
- (jint)getFieldTypeWithNSString:(NSString *)fieldName {
  
#line 487
  ComItextpdfTextPdfAcroFields_Item *fd = [self getFieldItemWithNSString:fieldName];
  if (fd == nil) {
    return ComItextpdfTextPdfAcroFields_FIELD_TYPE_NONE;
  }
  ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(fd)) getMergedWithInt:0];
  ComItextpdfTextPdfPdfName *type = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()];
  if (type == nil) {
    return ComItextpdfTextPdfAcroFields_FIELD_TYPE_NONE;
  }
  jint ff = 0;
  ComItextpdfTextPdfPdfNumber *ffo = [merged getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
  if (ffo != nil) {
    ff = [ffo intValue];
  }
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_BTN_())) isEqual:type]) {
    if ((ff & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) != 0) {
      return ComItextpdfTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON;
    }
    if ((ff & ComItextpdfTextPdfPdfFormField_FF_RADIO) != 0) {
      return ComItextpdfTextPdfAcroFields_FIELD_TYPE_RADIOBUTTON;
    }
    else {
      
#line 508
      return ComItextpdfTextPdfAcroFields_FIELD_TYPE_CHECKBOX;
    }
  }
  else
#line 510
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TX_())) isEqual:type]) {
    return ComItextpdfTextPdfAcroFields_FIELD_TYPE_TEXT;
  }
  else
#line 512
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CH_())) isEqual:type]) {
    if ((ff & ComItextpdfTextPdfPdfFormField_FF_COMBO) != 0) {
      return ComItextpdfTextPdfAcroFields_FIELD_TYPE_COMBO;
    }
    else {
      
#line 516
      return ComItextpdfTextPdfAcroFields_FIELD_TYPE_LIST;
    }
  }
  else
#line 518
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_SIG_())) isEqual:type]) {
    return ComItextpdfTextPdfAcroFields_FIELD_TYPE_SIGNATURE;
  }
  return ComItextpdfTextPdfAcroFields_FIELD_TYPE_NONE;
}


#line 530
- (void)exportAsFdfWithComItextpdfTextPdfFdfWriter:(ComItextpdfTextPdfFdfWriter *)writer {
  
#line 531
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(fields_)) entrySet])) {
    ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    NSString *name = [entry_ getKey];
    ComItextpdfTextPdfPdfObject *v = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()];
    if (v == nil) {
      continue;
    }
    NSString *value = [self getFieldWithNSString:name];
    if (lastWasString_) {
      [((ComItextpdfTextPdfFdfWriter *) nil_chk(writer)) setFieldAsStringWithNSString:name withNSString:value];
    }
    else {
      
#line 542
      [((ComItextpdfTextPdfFdfWriter *) nil_chk(writer)) setFieldAsNameWithNSString:name withNSString:value];
    }
  }
}


#line 559
- (jboolean)renameFieldWithNSString:(NSString *)oldName
                       withNSString:(NSString *)newName {
  
#line 560
  jint idx1 = [((NSString *) nil_chk(oldName)) lastIndexOf:'.'] + 1;
  jint idx2 = [((NSString *) nil_chk(newName)) lastIndexOf:'.'] + 1;
  if (idx1 != idx2) {
    return NO;
  }
  if (![((NSString *) nil_chk([oldName substring:0 endIndex:idx1])) isEqual:[newName substring:0 endIndex:idx2]]) {
    return NO;
  }
  if ([((id<JavaUtilMap>) nil_chk(fields_)) containsKeyWithId:newName]) {
    return NO;
  }
  ComItextpdfTextPdfAcroFields_Item *item = [fields_ getWithId:oldName];
  if (item == nil) {
    return NO;
  }
  newName = [newName substring:idx2];
  ComItextpdfTextPdfPdfString *ss = [[ComItextpdfTextPdfPdfString alloc] initWithNSString:newName withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()];
  
#line 578
  [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) writeToAllWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_() withComItextpdfTextPdfPdfObject:ss withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE | ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED];
  [item markUsedWithComItextpdfTextPdfAcroFields:self withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE];
  
#line 581
  (void) [fields_ removeWithId:oldName];
  (void) [fields_ putWithId:newName withId:item];
  
#line 584
  return YES;
}


#line 587
+ (IOSObjectArray *)splitDAelementsWithNSString:(NSString *)da {
  
#line 588
  @try {
    ComItextpdfTextPdfPRTokeniser *tk = [[ComItextpdfTextPdfPRTokeniser alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:
#line 590
    [((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createSourceWithByteArray:[ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:da withNSString:nil]]]];
    JavaUtilArrayList *stack = [[JavaUtilArrayList alloc] init];
    IOSObjectArray *ret = [IOSObjectArray arrayWithLength:3 type:[IOSClass classWithClass:[NSObject class]]];
    while ([tk nextToken]) {
      if ([tk getTokenType] == ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_COMMENT()) {
        continue;
      }
      if ([tk getTokenType] == ComItextpdfTextPdfPRTokeniser_TokenTypeEnum_get_OTHER()) {
        NSString *operator_ = [tk getStringValue];
        if ([((NSString *) nil_chk(operator_)) isEqual:@"Tf"]) {
          if ([stack size] >= 2) {
            IOSObjectArray_Set(ret, ComItextpdfTextPdfAcroFields_DA_FONT, [stack getWithInt:[stack size] - 2]);
            IOSObjectArray_SetAndConsume(ret, ComItextpdfTextPdfAcroFields_DA_SIZE, [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 1]]);
          }
        }
        else
#line 604
        if ([operator_ isEqual:@"g"]) {
          if ([stack size] >= 1) {
            jfloat gray = [((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 1]]) floatValue];
            if (gray != 0) {
              IOSObjectArray_SetAndConsume(ret, ComItextpdfTextPdfAcroFields_DA_COLOR, [[ComItextpdfTextPdfGrayColor alloc] initWithFloat:gray]);
            }
          }
        }
        else
#line 611
        if ([operator_ isEqual:@"rg"]) {
          if ([stack size] >= 3) {
            jfloat red = [((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 3]]) floatValue];
            jfloat green = [((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 2]]) floatValue];
            jfloat blue = [((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 1]]) floatValue];
            IOSObjectArray_SetAndConsume(ret, ComItextpdfTextPdfAcroFields_DA_COLOR, [[ComItextpdfTextBaseColor alloc] initWithFloat:red withFloat:green withFloat:blue]);
          }
        }
        else
#line 618
        if ([operator_ isEqual:@"k"]) {
          if ([stack size] >= 4) {
            jfloat cyan = [((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 4]]) floatValue];
            jfloat magenta = [((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 3]]) floatValue];
            jfloat yellow = [((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 2]]) floatValue];
            jfloat black = [((JavaLangFloat *) [[JavaLangFloat alloc] initWithNSString:[stack getWithInt:[stack size] - 1]]) floatValue];
            IOSObjectArray_SetAndConsume(ret, ComItextpdfTextPdfAcroFields_DA_COLOR, [[ComItextpdfTextPdfCMYKColor alloc] initWithFloat:cyan withFloat:magenta withFloat:yellow withFloat:black]);
          }
        }
        [stack clear];
      }
      else {
        
#line 629
        [stack addWithId:[tk getStringValue]];
      }
    }
    return ret;
  }
  @catch (
#line 633
  JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
}


#line 638
- (void)decodeGenericDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)merged
                                   withComItextpdfTextPdfBaseField:(ComItextpdfTextPdfBaseField *)tx {
  
#line 640
  jint flags = 0;
  
#line 642
  ComItextpdfTextPdfPdfString *da = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_()];
  if (da != nil) {
    IOSObjectArray *dab = [ComItextpdfTextPdfAcroFields splitDAelementsWithNSString:[da toUnicodeString]];
    if (IOSObjectArray_Get(nil_chk(dab), ComItextpdfTextPdfAcroFields_DA_SIZE) != nil) {
      [((ComItextpdfTextPdfBaseField *) nil_chk(tx)) setFontSizeWithFloat:[((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(dab, ComItextpdfTextPdfAcroFields_DA_SIZE), [JavaLangFloat class])))) floatValue]];
    }
    if (IOSObjectArray_Get(dab, ComItextpdfTextPdfAcroFields_DA_COLOR) != nil) {
      [((ComItextpdfTextPdfBaseField *) nil_chk(tx)) setTextColorWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *) check_class_cast(IOSObjectArray_Get(dab, ComItextpdfTextPdfAcroFields_DA_COLOR), [ComItextpdfTextBaseColor class])];
    }
    if (IOSObjectArray_Get(dab, ComItextpdfTextPdfAcroFields_DA_FONT) != nil) {
      ComItextpdfTextPdfPdfDictionary *font = [merged getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_()];
      if (font != nil) {
        font = [font getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
        if (font != nil) {
          ComItextpdfTextPdfPdfObject *po = [font getWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:(NSString *) check_class_cast(IOSObjectArray_Get(dab, ComItextpdfTextPdfAcroFields_DA_FONT), [NSString class])]];
          if (po != nil && [po type] == ComItextpdfTextPdfPdfObject_INDIRECT) {
            ComItextpdfTextPdfPRIndirectReference *por = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(po, [ComItextpdfTextPdfPRIndirectReference class]);
            ComItextpdfTextPdfBaseFont *bp = [[ComItextpdfTextPdfDocumentFont alloc] initWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(po, [ComItextpdfTextPdfPRIndirectReference class])];
            [((ComItextpdfTextPdfBaseField *) nil_chk(tx)) setFontWithComItextpdfTextPdfBaseFont:bp];
            JavaLangInteger *porkey = [JavaLangInteger valueOfWithInt:[por getNumber]];
            ComItextpdfTextPdfBaseFont *porf = [((JavaUtilHashMap *) nil_chk(extensionFonts_)) getWithId:porkey];
            if (porf == nil) {
              if (![extensionFonts_ containsKeyWithId:porkey]) {
                ComItextpdfTextPdfPdfDictionary *fo = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:po], [ComItextpdfTextPdfPdfDictionary class]);
                ComItextpdfTextPdfPdfDictionary *fd = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(fo)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()];
                if (fd != nil) {
                  ComItextpdfTextPdfPRStream *prs = (ComItextpdfTextPdfPRStream *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[fd getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTFILE2_()]], [ComItextpdfTextPdfPRStream class]);
                  if (prs == nil) {
                    prs = (ComItextpdfTextPdfPRStream *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[fd getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTFILE3_()]], [ComItextpdfTextPdfPRStream class]);
                  }
                  if (prs == nil) {
                    (void) [extensionFonts_ putWithId:porkey withId:nil];
                  }
                  else {
                    
#line 675
                    @try {
                      porf = [ComItextpdfTextPdfBaseFont createFontWithNSString:@"font.ttf" withNSString:ComItextpdfTextPdfBaseFont_get_IDENTITY_H_() withBoolean:YES withBoolean:NO withByteArray:
#line 677
                      [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:prs] withByteArray:nil];
                    }
                    @catch (
#line 678
                    JavaLangException *e) {
                    }
                    (void) [extensionFonts_ putWithId:porkey withId:porf];
                  }
                }
              }
            }
            if ([tx isKindOfClass:[ComItextpdfTextPdfTextField class]]) {
              [((ComItextpdfTextPdfTextField *) check_class_cast(tx, [ComItextpdfTextPdfTextField class])) setExtensionFontWithComItextpdfTextPdfBaseFont:porf];
            }
          }
          else {
            
#line 689
            ComItextpdfTextPdfBaseFont *bf = [((JavaUtilHashMap *) nil_chk(localFonts_)) getWithId:IOSObjectArray_Get(dab, ComItextpdfTextPdfAcroFields_DA_FONT)];
            if (bf == nil) {
              IOSObjectArray *fn = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfAcroFields_stdFieldFontNames_)) getWithId:IOSObjectArray_Get(dab, ComItextpdfTextPdfAcroFields_DA_FONT)];
              if (fn != nil) {
                @try {
                  NSString *enc = @"winansi";
                  if (fn->size_ > 1) {
                    enc = IOSObjectArray_Get(fn, 1);
                  }
                  bf = [ComItextpdfTextPdfBaseFont createFontWithNSString:IOSObjectArray_Get(fn, 0) withNSString:enc withBoolean:NO];
                  [((ComItextpdfTextPdfBaseField *) nil_chk(tx)) setFontWithComItextpdfTextPdfBaseFont:bf];
                }
                @catch (
#line 700
                JavaLangException *e) {
                }
              }
            }
            else {
              [((ComItextpdfTextPdfBaseField *) nil_chk(tx)) setFontWithComItextpdfTextPdfBaseFont:bf];
            }
          }
        }
      }
    }
  }
  
#line 713
  ComItextpdfTextPdfPdfDictionary *mk = [merged getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MK_()];
  if (mk != nil) {
    ComItextpdfTextPdfPdfArray *ar = [mk getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BC_()];
    ComItextpdfTextBaseColor *border = [self getMKColorWithComItextpdfTextPdfPdfArray:ar];
    [((ComItextpdfTextPdfBaseField *) nil_chk(tx)) setBorderColorWithComItextpdfTextBaseColor:border];
    if (border != nil) {
      [tx setBorderWidthWithFloat:1];
    }
    ar = [mk getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BG_()];
    [tx setBackgroundColorWithComItextpdfTextBaseColor:[self getMKColorWithComItextpdfTextPdfPdfArray:ar]];
    ComItextpdfTextPdfPdfNumber *rotation = [mk getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_R_()];
    if (rotation != nil) {
      [tx setRotationWithInt:[rotation intValue]];
    }
  }
  
#line 729
  ComItextpdfTextPdfPdfNumber *nfl = [merged getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()];
  flags = 0;
  [((ComItextpdfTextPdfBaseField *) nil_chk(tx)) setVisibilityWithInt:ComItextpdfTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT];
  if (nfl != nil) {
    flags = [nfl intValue];
    if ((flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT) != 0 && (flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_HIDDEN) != 0) {
      [tx setVisibilityWithInt:ComItextpdfTextPdfBaseField_HIDDEN];
    }
    else
#line 736
    if ((flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT) != 0 &&
#line 737
    (flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_NOVIEW) != 0) {
      [tx setVisibilityWithInt:ComItextpdfTextPdfBaseField_HIDDEN_BUT_PRINTABLE];
    }
    else
#line 739
    if ((flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT) != 0) {
      [tx setVisibilityWithInt:ComItextpdfTextPdfBaseField_VISIBLE];
    }
  }
  
#line 744
  nfl = [merged getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
  flags = 0;
  if (nfl != nil) {
    flags = [nfl intValue];
  }
  [tx setOptionsWithInt:flags];
  if ((flags & ComItextpdfTextPdfPdfFormField_FF_COMB) != 0) {
    ComItextpdfTextPdfPdfNumber *maxLen = [merged getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MAXLEN_()];
    jint len = 0;
    if (maxLen != nil) {
      len = [maxLen intValue];
    }
    [tx setMaxCharacterLengthWithInt:len];
  }
  
#line 759
  nfl = [merged getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_Q_()];
  if (nfl != nil) {
    if ([nfl intValue] == ComItextpdfTextPdfPdfFormField_Q_CENTER) {
      [tx setAlignmentWithInt:ComItextpdfTextElement_ALIGN_CENTER];
    }
    else
#line 763
    if ([nfl intValue] == ComItextpdfTextPdfPdfFormField_Q_RIGHT) {
      [tx setAlignmentWithInt:ComItextpdfTextElement_ALIGN_RIGHT];
    }
  }
  
#line 768
  ComItextpdfTextPdfPdfDictionary *bs = [merged getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BS_()];
  if (bs != nil) {
    ComItextpdfTextPdfPdfNumber *w = [bs getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_W_()];
    if (w != nil) {
      [tx setBorderWidthWithFloat:[w floatValue]];
    }
    ComItextpdfTextPdfPdfName *s = [bs getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()];
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_D_())) isEqual:s]) {
      [tx setBorderStyleWithInt:ComItextpdfTextPdfPdfBorderDictionary_STYLE_DASHED];
    }
    else
#line 777
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_B_())) isEqual:s]) {
      [tx setBorderStyleWithInt:ComItextpdfTextPdfPdfBorderDictionary_STYLE_BEVELED];
    }
    else
#line 779
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_I_())) isEqual:s]) {
      [tx setBorderStyleWithInt:ComItextpdfTextPdfPdfBorderDictionary_STYLE_INSET];
    }
    else
#line 781
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_U_())) isEqual:s]) {
      [tx setBorderStyleWithInt:ComItextpdfTextPdfPdfBorderDictionary_STYLE_UNDERLINE];
    }
  }
  else {
    
#line 785
    ComItextpdfTextPdfPdfArray *bd = [merged getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BORDER_()];
    if (bd != nil) {
      if ([bd size] >= 3) {
        [tx setBorderWidthWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([bd getAsNumberWithInt:2])) floatValue]];
      }
      if ([bd size] >= 4) {
        [tx setBorderStyleWithInt:ComItextpdfTextPdfPdfBorderDictionary_STYLE_DASHED];
      }
    }
  }
}


#line 797
- (ComItextpdfTextPdfPdfAppearance *)getAppearanceWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)merged
                                                                    withNSStringArray:(IOSObjectArray *)values
                                                                         withNSString:(NSString *)fieldName {
  
#line 799
  topFirst_ = 0;
  NSString *text = ((IOSObjectArray *) nil_chk(values))->size_ > 0 ? IOSObjectArray_Get(values, 0) : nil;
  
#line 802
  ComItextpdfTextPdfTextField *tx = nil;
  if (fieldCache_ == nil || ![fieldCache_ containsKeyWithId:fieldName]) {
    tx = [[ComItextpdfTextPdfTextField alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextRectangle:nil withNSString:nil];
    [tx setExtraMarginWithFloat:extraMarginLeft_ withFloat:extraMarginTop_];
    [tx setBorderWidthWithFloat:0];
    [tx setSubstitutionFontsWithJavaUtilArrayList:substitutionFonts_];
    [self decodeGenericDictionaryWithComItextpdfTextPdfPdfDictionary:merged withComItextpdfTextPdfBaseField:tx];
    
#line 810
    ComItextpdfTextPdfPdfArray *rect = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_()];
    ComItextpdfTextRectangle *box = [ComItextpdfTextPdfPdfReader getNormalizedRectangleWithComItextpdfTextPdfPdfArray:rect];
    if ([tx getRotation] == 90 || [tx getRotation] == 270) {
      box = [((ComItextpdfTextRectangle *) nil_chk(box)) rotate];
    }
    [tx setBoxWithComItextpdfTextRectangle:box];
    if (fieldCache_ != nil) {
      (void) [fieldCache_ putWithId:fieldName withId:tx];
    }
  }
  else {
    
#line 820
    tx = [fieldCache_ getWithId:fieldName];
    [((ComItextpdfTextPdfTextField *) nil_chk(tx)) setWriterWithComItextpdfTextPdfPdfWriter:writer_];
  }
  ComItextpdfTextPdfPdfName *fieldType = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()];
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TX_())) isEqual:fieldType]) {
    if (values->size_ > 0 && IOSObjectArray_Get(values, 0) != nil) {
      [((ComItextpdfTextPdfTextField *) nil_chk(tx)) setTextWithNSString:IOSObjectArray_Get(values, 0)];
    }
    return [((ComItextpdfTextPdfTextField *) nil_chk(tx)) getAppearance];
  }
  if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CH_())) isEqual:fieldType]) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:
#line 832
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 833
    @"an.appearance.was.requested.without.a.variable.text.field" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  ComItextpdfTextPdfPdfArray *opt = [merged getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPT_()];
  jint flags = 0;
  ComItextpdfTextPdfPdfNumber *nfl = [merged getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
  if (nfl != nil) {
    flags = [nfl intValue];
  }
  if ((flags & ComItextpdfTextPdfPdfFormField_FF_COMBO) != 0 && opt == nil) {
    [((ComItextpdfTextPdfTextField *) nil_chk(tx)) setTextWithNSString:text];
    return [tx getAppearance];
  }
  if (opt != nil) {
    IOSObjectArray *choices = [IOSObjectArray arrayWithLength:[opt size] type:[IOSClass classWithClass:[NSString class]]];
    IOSObjectArray *choicesExp = [IOSObjectArray arrayWithLength:[opt size] type:[IOSClass classWithClass:[NSString class]]];
    for (jint k = 0; k < [opt size]; ++k) {
      ComItextpdfTextPdfPdfObject *obj = [opt getPdfObjectWithInt:k];
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isString]) {
        IOSObjectArray_Set(choices, k, IOSObjectArray_Set(choicesExp, k, [((ComItextpdfTextPdfPdfString *) check_class_cast(obj, [ComItextpdfTextPdfPdfString class])) toUnicodeString]));
      }
      else {
        
#line 853
        ComItextpdfTextPdfPdfArray *a = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
        IOSObjectArray_Set(choicesExp, k, [((ComItextpdfTextPdfPdfString *) nil_chk([a getAsStringWithInt:0])) toUnicodeString]);
        IOSObjectArray_Set(choices, k, [((ComItextpdfTextPdfPdfString *) nil_chk([a getAsStringWithInt:1])) toUnicodeString]);
      }
    }
    if ((flags & ComItextpdfTextPdfPdfFormField_FF_COMBO) != 0) {
      for (jint k = 0; k < choices->size_; ++k) {
        if ([text isEqual:IOSObjectArray_Get(choicesExp, k)]) {
          text = IOSObjectArray_Get(choices, k);
          break;
        }
      }
      [((ComItextpdfTextPdfTextField *) nil_chk(tx)) setTextWithNSString:text];
      return [tx getAppearance];
    }
    JavaUtilArrayList *indexes = [[JavaUtilArrayList alloc] init];
    for (jint k = 0; k < choicesExp->size_; ++k) {
      for (jint j = 0; j < values->size_; ++j) {
        NSString *val = IOSObjectArray_Get(values, j);
        if (val != nil && [val isEqual:IOSObjectArray_Get(choicesExp, k)]) {
          [indexes addWithId:[JavaLangInteger valueOfWithInt:k]];
          break;
        }
      }
    }
    [((ComItextpdfTextPdfTextField *) nil_chk(tx)) setChoicesWithNSStringArray:choices];
    [tx setChoiceExportsWithNSStringArray:choicesExp];
    [tx setChoiceSelectionsWithJavaUtilArrayList:indexes];
  }
  ComItextpdfTextPdfPdfAppearance *app = [((ComItextpdfTextPdfTextField *) nil_chk(tx)) getListAppearance];
  topFirst_ = [tx getTopFirst];
  return app;
}


#line 887
- (ComItextpdfTextPdfPdfAppearance *)getAppearanceWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)merged
                                                                         withNSString:(NSString *)text
                                                                         withNSString:(NSString *)fieldName {
  
#line 889
  IOSObjectArray *valueArr = [IOSObjectArray arrayWithLength:1 type:[IOSClass classWithClass:[NSString class]]];
  IOSObjectArray_Set(valueArr, 0, text);
  return [self getAppearanceWithComItextpdfTextPdfPdfDictionary:merged withNSStringArray:valueArr withNSString:fieldName];
}


#line 894
- (ComItextpdfTextBaseColor *)getMKColorWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)ar {
  
#line 895
  if (ar == nil) {
    return nil;
  }
  switch ([((ComItextpdfTextPdfPdfArray *) nil_chk(ar)) size]) {
    case 1:
    return [[ComItextpdfTextPdfGrayColor alloc] initWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:0])) floatValue]];
    case 3:
    return [[ComItextpdfTextBaseColor alloc] initWithFloat:
#line 903
    [ComItextpdfTextPdfExtendedColor normalizeWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:0])) floatValue]] withFloat:[ComItextpdfTextPdfExtendedColor normalizeWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:
#line 904
    1])) floatValue]] withFloat:[ComItextpdfTextPdfExtendedColor normalizeWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:2])) floatValue]]];
    
#line 906
    case 4:
    return [[ComItextpdfTextPdfCMYKColor alloc] initWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:0])) floatValue] withFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:1])) floatValue] withFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:
#line 908
    2])) floatValue] withFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([ar getAsNumberWithInt:3])) floatValue]];
    default:
    return nil;
  }
}


#line 921
- (NSString *)getFieldRichValueWithNSString:(NSString *)name {
  
#line 922
  if ([((ComItextpdfTextPdfXfaForm *) nil_chk(xfa_)) isXfaPresent]) {
    return nil;
  }
  
#line 926
  ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:name];
  if (item == nil) {
    return nil;
  }
  
#line 931
  ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  ComItextpdfTextPdfPdfString *rich = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RV_()];
  
#line 934
  NSString *markup = nil;
  if (rich != nil) {
    markup = [rich description];
  }
  
#line 939
  return markup;
}


#line 949
- (NSString *)getFieldWithNSString:(NSString *)name {
  
#line 950
  if ([((ComItextpdfTextPdfXfaForm *) nil_chk(xfa_)) isXfaPresent]) {
    name = [xfa_ findFieldNameWithNSString:name withComItextpdfTextPdfAcroFields:self];
    if (name == nil) {
      return nil;
    }
    name = [ComItextpdfTextPdfXfaForm_Xml2Som getShortNameWithNSString:name];
    return [ComItextpdfTextPdfXfaForm getNodeTextWithOrgW3cDomNode:[xfa_ findDatasetsNodeWithNSString:name]];
  }
  ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:name];
  if (item == nil) {
    return nil;
  }
  lastWasString_ = NO;
  ComItextpdfTextPdfPdfDictionary *mergedDict = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  
#line 968
  ComItextpdfTextPdfPdfObject *v = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(mergedDict)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()]];
  if (v == nil) {
    return @"";
  }
  if ([v isKindOfClass:[ComItextpdfTextPdfPRStream class]]) {
    IOSByteArray *valBytes;
    @try {
      valBytes = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(v, [ComItextpdfTextPdfPRStream class])];
      return [NSString stringWithBytes:valBytes];
    }
    @catch (
#line 977
    JavaIoIOException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
  }
  
#line 982
  ComItextpdfTextPdfPdfName *type = [mergedDict getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()];
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_BTN_())) isEqual:type]) {
    ComItextpdfTextPdfPdfNumber *ff = [mergedDict getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
    jint flags = 0;
    if (ff != nil) {
      flags = [ff intValue];
    }
    if ((flags & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) != 0) {
      return @"";
    }
    NSString *value = @"";
    if ([v isKindOfClass:[ComItextpdfTextPdfPdfName class]]) {
      value = [ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfObject *) nil_chk(v)) description]];
    }
    else
#line 995
    if ([v isKindOfClass:[ComItextpdfTextPdfPdfString class]]) {
      value = [((ComItextpdfTextPdfPdfString *) nil_chk(((ComItextpdfTextPdfPdfString *) check_class_cast(v, [ComItextpdfTextPdfPdfString class])))) toUnicodeString];
    }
    ComItextpdfTextPdfPdfArray *opts = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getValueWithInt:0])) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPT_()];
    if (opts != nil) {
      jint idx = 0;
      @try {
        idx = [JavaLangInteger parseIntWithNSString:value];
        ComItextpdfTextPdfPdfString *ps = [opts getAsStringWithInt:idx];
        value = [((ComItextpdfTextPdfPdfString *) nil_chk(ps)) toUnicodeString];
        lastWasString_ = YES;
      }
      @catch (
#line 1006
      JavaLangException *e) {
      }
    }
    return value;
  }
  if ([v isKindOfClass:[ComItextpdfTextPdfPdfString class]]) {
    lastWasString_ = YES;
    return [((ComItextpdfTextPdfPdfString *) nil_chk(((ComItextpdfTextPdfPdfString *) check_class_cast(v, [ComItextpdfTextPdfPdfString class])))) toUnicodeString];
  }
  else
#line 1014
  if ([v isKindOfClass:[ComItextpdfTextPdfPdfName class]]) {
    return [ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfObject *) nil_chk(v)) description]];
  }
  else {
    
#line 1017
    return @"";
  }
}


#line 1029
- (IOSObjectArray *)getListSelectionWithNSString:(NSString *)name {
  
#line 1030
  IOSObjectArray *ret;
  NSString *s = [self getFieldWithNSString:name];
  if (s == nil) {
    ret = [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:[IOSClass classWithClass:[NSString class]]];
  }
  else {
    
#line 1035
    ret = [IOSObjectArray arrayWithObjects:(id[]){ s } count:1 type:[IOSClass classWithClass:[NSString class]]];
  }
  ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:name];
  if (item == nil) {
    return ret;
  }
  
#line 1046
  ComItextpdfTextPdfPdfArray *values = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0])) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_I_()];
  if (values == nil) {
    return ret;
  }
  ret = [IOSObjectArray arrayWithLength:[((ComItextpdfTextPdfPdfArray *) nil_chk(values)) size] type:[IOSClass classWithClass:[NSString class]]];
  IOSObjectArray *options = [self getListOptionExportWithNSString:name];
  ComItextpdfTextPdfPdfNumber *n;
  jint idx = 0;
  for (id<JavaUtilIterator> i = [values listIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    n = (ComItextpdfTextPdfPdfNumber *) check_class_cast([i next], [ComItextpdfTextPdfPdfNumber class]);
    IOSObjectArray_Set(ret, idx++, IOSObjectArray_Get(nil_chk(options), [((ComItextpdfTextPdfPdfNumber *) nil_chk(n)) intValue]));
  }
  return ret;
}


#line 1090
- (jboolean)setFieldPropertyWithNSString:(NSString *)field
                            withNSString:(NSString *)name
                                  withId:(id)value
                            withIntArray:(IOSIntArray *)inst {
  
#line 1091
  if (writer_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 1093
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"this.acrofields.instance.is.read.only" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  @try {
    ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:field];
    if (item == nil) {
      return NO;
    }
    ComItextpdfTextPdfAcroFields_InstHit *hit = [[ComItextpdfTextPdfAcroFields_InstHit alloc] initWithIntArray:inst];
    ComItextpdfTextPdfPdfDictionary *merged;
    ComItextpdfTextPdfPdfString *da;
    if ([((NSString *) nil_chk(name)) equalsIgnoreCase:@"textfont"]) {
      for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
        if ([hit isHitWithInt:k]) {
          merged = [item getMergedWithInt:k];
          da = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_()];
          ComItextpdfTextPdfPdfDictionary *dr = [merged getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_()];
          if (da != nil) {
            if (dr == nil) {
              dr = [[ComItextpdfTextPdfPdfDictionary alloc] init];
              [merged putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_() withComItextpdfTextPdfPdfObject:dr];
            }
            IOSObjectArray *dao = [ComItextpdfTextPdfAcroFields splitDAelementsWithNSString:[da toUnicodeString]];
            ComItextpdfTextPdfPdfAppearance *cb = [[ComItextpdfTextPdfPdfAppearance alloc] init];
            if (IOSObjectArray_Get(nil_chk(dao), ComItextpdfTextPdfAcroFields_DA_FONT) != nil) {
              ComItextpdfTextPdfBaseFont *bf = (ComItextpdfTextPdfBaseFont *) check_class_cast(value, [ComItextpdfTextPdfBaseFont class]);
              ComItextpdfTextPdfPdfName *psn = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfPdfAppearance_get_stdFieldFontNames_())) getWithId:[((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getPostscriptFontName]];
              if (psn == nil) {
                psn = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:[bf getPostscriptFontName]];
              }
              ComItextpdfTextPdfPdfDictionary *fonts = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dr)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
              if (fonts == nil) {
                fonts = [[ComItextpdfTextPdfPdfDictionary alloc] init];
                [dr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_() withComItextpdfTextPdfPdfObject:fonts];
              }
              ComItextpdfTextPdfPdfIndirectReference *fref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(fonts)) getWithComItextpdfTextPdfPdfName:psn], [ComItextpdfTextPdfPdfIndirectReference class]);
              ComItextpdfTextPdfPdfDictionary *top = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
              [self markUsedWithComItextpdfTextPdfPdfObject:top];
              dr = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(top)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_()];
              if (dr == nil) {
                dr = [[ComItextpdfTextPdfPdfDictionary alloc] init];
                [top putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_() withComItextpdfTextPdfPdfObject:dr];
              }
              [self markUsedWithComItextpdfTextPdfPdfObject:dr];
              ComItextpdfTextPdfPdfDictionary *fontsTop = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dr)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
              if (fontsTop == nil) {
                fontsTop = [[ComItextpdfTextPdfPdfDictionary alloc] init];
                [dr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_() withComItextpdfTextPdfPdfObject:fontsTop];
              }
              [self markUsedWithComItextpdfTextPdfPdfObject:fontsTop];
              ComItextpdfTextPdfPdfIndirectReference *frefTop = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(fontsTop)) getWithComItextpdfTextPdfPdfName:psn], [ComItextpdfTextPdfPdfIndirectReference class]);
              if (frefTop != nil) {
                if (fref == nil) {
                  [fonts putWithComItextpdfTextPdfPdfName:psn withComItextpdfTextPdfPdfObject:frefTop];
                }
              }
              else
#line 1147
              if (fref == nil) {
                ComItextpdfTextPdfFontDetails *fd;
                if ([bf getFontType] == ComItextpdfTextPdfBaseFont_FONT_TYPE_DOCUMENT) {
                  fd = [[ComItextpdfTextPdfFontDetails alloc] initWithComItextpdfTextPdfPdfName:nil withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfDocumentFont *) check_class_cast(bf, [ComItextpdfTextPdfDocumentFont class])) getIndirectReference] withComItextpdfTextPdfBaseFont:bf];
                }
                else {
                  
#line 1152
                  [bf setSubsetWithBoolean:NO];
                  fd = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addSimpleWithComItextpdfTextPdfBaseFont:bf];
                  (void) [((JavaUtilHashMap *) nil_chk(localFonts_)) putWithId:[((NSString *) nil_chk([((ComItextpdfTextPdfPdfName *) nil_chk(psn)) description])) substring:1] withId:bf];
                }
                [fontsTop putWithComItextpdfTextPdfPdfName:psn withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfFontDetails *) nil_chk(fd)) getIndirectReference]];
                [fonts putWithComItextpdfTextPdfPdfName:psn withComItextpdfTextPdfPdfObject:[fd getIndirectReference]];
              }
              ComItextpdfTextPdfByteBuffer *buf = [cb getInternalBuffer];
              (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(buf)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) nil_chk(psn)) getBytes]])) appendWithChar:' '])) appendWithFloat:[((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(dao, ComItextpdfTextPdfAcroFields_DA_SIZE), [JavaLangFloat class])))) floatValue]])) appendWithNSString:
#line 1161
              @" Tf "];
              if (IOSObjectArray_Get(dao, ComItextpdfTextPdfAcroFields_DA_COLOR) != nil) {
                [cb setColorFillWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *) check_class_cast(IOSObjectArray_Get(dao, ComItextpdfTextPdfAcroFields_DA_COLOR), [ComItextpdfTextBaseColor class])];
              }
              ComItextpdfTextPdfPdfString *s = [[ComItextpdfTextPdfPdfString alloc] initWithNSString:[cb description]];
              [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:s];
              [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getWidgetWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:s];
              [self markUsedWithComItextpdfTextPdfPdfObject:[item getWidgetWithInt:k]];
            }
          }
        }
      }
    }
    else
#line 1173
    if ([name equalsIgnoreCase:@"textcolor"]) {
      for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
        if ([hit isHitWithInt:k]) {
          merged = [item getMergedWithInt:k];
          da = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_()];
          if (da != nil) {
            IOSObjectArray *dao = [ComItextpdfTextPdfAcroFields splitDAelementsWithNSString:[da toUnicodeString]];
            ComItextpdfTextPdfPdfAppearance *cb = [[ComItextpdfTextPdfPdfAppearance alloc] init];
            if (IOSObjectArray_Get(nil_chk(dao), ComItextpdfTextPdfAcroFields_DA_FONT) != nil) {
              ComItextpdfTextPdfByteBuffer *buf = [cb getInternalBuffer];
              (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(buf)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) [[ComItextpdfTextPdfPdfName alloc] initWithNSString:(NSString *) check_class_cast(IOSObjectArray_Get(dao, ComItextpdfTextPdfAcroFields_DA_FONT), [NSString class])]) getBytes]])) appendWithChar:' '])) appendWithFloat:
#line 1184
              [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(dao, ComItextpdfTextPdfAcroFields_DA_SIZE), [JavaLangFloat class])))) floatValue]])) appendWithNSString:@" Tf "];
              [cb setColorFillWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *) check_class_cast(value, [ComItextpdfTextBaseColor class])];
              ComItextpdfTextPdfPdfString *s = [[ComItextpdfTextPdfPdfString alloc] initWithNSString:[cb description]];
              [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:s];
              [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getWidgetWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:s];
              [self markUsedWithComItextpdfTextPdfPdfObject:[item getWidgetWithInt:k]];
            }
          }
        }
      }
    }
    else
#line 1194
    if ([name equalsIgnoreCase:@"textsize"]) {
      for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
        if ([hit isHitWithInt:k]) {
          merged = [item getMergedWithInt:k];
          da = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_()];
          if (da != nil) {
            IOSObjectArray *dao = [ComItextpdfTextPdfAcroFields splitDAelementsWithNSString:[da toUnicodeString]];
            ComItextpdfTextPdfPdfAppearance *cb = [[ComItextpdfTextPdfPdfAppearance alloc] init];
            if (IOSObjectArray_Get(nil_chk(dao), ComItextpdfTextPdfAcroFields_DA_FONT) != nil) {
              ComItextpdfTextPdfByteBuffer *buf = [cb getInternalBuffer];
              (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(buf)) appendWithByteArray:[((ComItextpdfTextPdfPdfName *) [[ComItextpdfTextPdfPdfName alloc] initWithNSString:(NSString *) check_class_cast(IOSObjectArray_Get(dao, ComItextpdfTextPdfAcroFields_DA_FONT), [NSString class])]) getBytes]])) appendWithChar:' '])) appendWithFloat:
#line 1205
              [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(value, [JavaLangFloat class])))) floatValue]])) appendWithNSString:@" Tf "];
              if (IOSObjectArray_Get(dao, ComItextpdfTextPdfAcroFields_DA_COLOR) != nil) {
                [cb setColorFillWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *) check_class_cast(IOSObjectArray_Get(dao, ComItextpdfTextPdfAcroFields_DA_COLOR), [ComItextpdfTextBaseColor class])];
              }
              ComItextpdfTextPdfPdfString *s = [[ComItextpdfTextPdfPdfString alloc] initWithNSString:[cb description]];
              [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:s];
              [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getWidgetWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:s];
              [self markUsedWithComItextpdfTextPdfPdfObject:[item getWidgetWithInt:k]];
            }
          }
        }
      }
    }
    else
#line 1217
    if ([name equalsIgnoreCase:@"bgcolor"] || [name equalsIgnoreCase:@"bordercolor"]) {
      ComItextpdfTextPdfPdfName *dname = [name equalsIgnoreCase:@"bgcolor"] ? ComItextpdfTextPdfPdfName_get_BG_() : ComItextpdfTextPdfPdfName_get_BC_();
      for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
        if ([hit isHitWithInt:k]) {
          merged = [item getMergedWithInt:k];
          ComItextpdfTextPdfPdfDictionary *mk = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MK_()];
          if (mk == nil) {
            if (value == nil) {
              return YES;
            }
            mk = [[ComItextpdfTextPdfPdfDictionary alloc] init];
            [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MK_() withComItextpdfTextPdfPdfObject:mk];
            [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getWidgetWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MK_() withComItextpdfTextPdfPdfObject:mk];
            [self markUsedWithComItextpdfTextPdfPdfObject:[item getWidgetWithInt:k]];
          }
          else {
            
#line 1232
            [self markUsedWithComItextpdfTextPdfPdfObject:mk];
          }
          if (value == nil) {
            [((ComItextpdfTextPdfPdfDictionary *) nil_chk(mk)) removeWithComItextpdfTextPdfPdfName:dname];
          }
          else {
            
#line 1237
            [((ComItextpdfTextPdfPdfDictionary *) nil_chk(mk)) putWithComItextpdfTextPdfPdfName:dname withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfAnnotation getMKColorWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *) check_class_cast(value, [ComItextpdfTextBaseColor class])]];
          }
        }
      }
    }
    else {
      
#line 1242
      return NO;
    }
    return YES;
  }
  @catch (
#line 1245
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 1287
- (jboolean)setFieldPropertyWithNSString:(NSString *)field
                            withNSString:(NSString *)name
                                 withInt:(jint)value
                            withIntArray:(IOSIntArray *)inst {
  
#line 1288
  if (writer_ == nil) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 1290
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"this.acrofields.instance.is.read.only" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:field];
  if (item == nil) {
    return NO;
  }
  ComItextpdfTextPdfAcroFields_InstHit *hit = [[ComItextpdfTextPdfAcroFields_InstHit alloc] initWithIntArray:inst];
  if ([((NSString *) nil_chk(name)) equalsIgnoreCase:@"flags"]) {
    ComItextpdfTextPdfPdfNumber *num = [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:value];
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      if ([hit isHitWithInt:k]) {
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:num];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getWidgetWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:num];
        [self markUsedWithComItextpdfTextPdfPdfObject:[item getWidgetWithInt:k]];
      }
    }
  }
  else
#line 1306
  if ([name equalsIgnoreCase:@"setflags"]) {
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      if ([hit isHitWithInt:k]) {
        ComItextpdfTextPdfPdfNumber *num = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getWidgetWithInt:k])) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()];
        jint val = 0;
        if (num != nil) {
          val = [num intValue];
        }
        num = [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:val | value];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:num];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getWidgetWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:num];
        [self markUsedWithComItextpdfTextPdfPdfObject:[item getWidgetWithInt:k]];
      }
    }
  }
  else
#line 1320
  if ([name equalsIgnoreCase:@"clrflags"]) {
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      if ([hit isHitWithInt:k]) {
        ComItextpdfTextPdfPdfDictionary *widget = [item getWidgetWithInt:k];
        ComItextpdfTextPdfPdfNumber *num = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widget)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()];
        jint val = 0;
        if (num != nil) {
          val = [num intValue];
        }
        num = [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:val & ~value];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:num];
        [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:num];
        [self markUsedWithComItextpdfTextPdfPdfObject:widget];
      }
    }
  }
  else
#line 1335
  if ([name equalsIgnoreCase:@"fflags"]) {
    ComItextpdfTextPdfPdfNumber *num = [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:value];
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      if ([hit isHitWithInt:k]) {
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_() withComItextpdfTextPdfPdfObject:num];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getValueWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_() withComItextpdfTextPdfPdfObject:num];
        [self markUsedWithComItextpdfTextPdfPdfObject:[item getValueWithInt:k]];
      }
    }
  }
  else
#line 1344
  if ([name equalsIgnoreCase:@"setfflags"]) {
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      if ([hit isHitWithInt:k]) {
        ComItextpdfTextPdfPdfDictionary *valDict = [item getValueWithInt:k];
        ComItextpdfTextPdfPdfNumber *num = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(valDict)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
        jint val = 0;
        if (num != nil) {
          val = [num intValue];
        }
        num = [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:val | value];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_() withComItextpdfTextPdfPdfObject:num];
        [valDict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_() withComItextpdfTextPdfPdfObject:num];
        [self markUsedWithComItextpdfTextPdfPdfObject:valDict];
      }
    }
  }
  else
#line 1359
  if ([name equalsIgnoreCase:@"clrfflags"]) {
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      if ([hit isHitWithInt:k]) {
        ComItextpdfTextPdfPdfDictionary *valDict = [item getValueWithInt:k];
        ComItextpdfTextPdfPdfNumber *num = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(valDict)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
        jint val = 0;
        if (num != nil) {
          val = [num intValue];
        }
        num = [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:val & ~value];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_() withComItextpdfTextPdfPdfObject:num];
        [valDict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_() withComItextpdfTextPdfPdfObject:num];
        [self markUsedWithComItextpdfTextPdfPdfObject:valDict];
      }
    }
  }
  else {
    
#line 1375
    return NO;
  }
  return YES;
}


#line 1390
- (void)mergeXfaDataWithOrgW3cDomNode:(id<OrgW3cDomNode>)n {
  
#line 1391
  ComItextpdfTextPdfXfaForm_Xml2SomDatasets *data = [[ComItextpdfTextPdfXfaForm_Xml2SomDatasets alloc] initWithOrgW3cDomNode:n];
  for (NSString * __strong string in nil_chk([data getOrder])) {
    NSString *name = string;
    NSString *text = [ComItextpdfTextPdfXfaForm getNodeTextWithOrgW3cDomNode:[((JavaUtilHashMap *) nil_chk([data getName2Node])) getWithId:name]];
    [self setFieldWithNSString:name withNSString:text];
  }
}


#line 1409
- (void)setFieldsWithComItextpdfTextPdfFdfReader:(ComItextpdfTextPdfFdfReader *)fdf {
  
#line 1410
  JavaUtilHashMap *fd = [((ComItextpdfTextPdfFdfReader *) nil_chk(fdf)) getFields];
  for (NSString * __strong f in nil_chk([((JavaUtilHashMap *) nil_chk(fd)) keySet])) {
    NSString *v = [fdf getFieldValueWithNSString:f];
    if (v != nil) {
      [self setFieldWithNSString:f withNSString:v];
    }
  }
}


#line 1429
- (void)setFieldsWithComItextpdfTextPdfXfdfReader:(ComItextpdfTextPdfXfdfReader *)xfdf {
  
#line 1430
  JavaUtilHashMap *fd = [((ComItextpdfTextPdfXfdfReader *) nil_chk(xfdf)) getFields];
  for (NSString * __strong f in nil_chk([((JavaUtilHashMap *) nil_chk(fd)) keySet])) {
    NSString *v = [xfdf getFieldValueWithNSString:f];
    if (v != nil) {
      [self setFieldWithNSString:f withNSString:v];
    }
    id<JavaUtilList> l = [xfdf getListValuesWithNSString:f];
    if (l != nil) {
      [self setListSelectionWithNSString:v withNSStringArray:[l toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[l size] type:[IOSClass classWithClass:[NSString class]]]]];
    }
  }
}


#line 1459
- (jboolean)regenerateFieldWithNSString:(NSString *)name {
  
#line 1460
  NSString *value = [self getFieldWithNSString:name];
  return [self setFieldWithNSString:name withNSString:value withNSString:value];
}


#line 1479
- (jboolean)setFieldWithNSString:(NSString *)name
                    withNSString:(NSString *)value {
  
#line 1480
  return [self setFieldWithNSString:name withNSString:value withNSString:nil];
}


#line 1503
- (jboolean)setFieldRichValueWithNSString:(NSString *)name
                             withNSString:(NSString *)richValue {
  
#line 1505
  if (writer_ == nil) {
    
#line 1507
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:
#line 1508
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"this.acrofields.instance.is.read.only" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  
#line 1511
  ComItextpdfTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:name];
  if (item == nil) {
    
#line 1514
    return NO;
  }
  
#line 1517
  if ([self getFieldTypeWithNSString:name] != ComItextpdfTextPdfAcroFields_FIELD_TYPE_TEXT) {
    
#line 1519
    return NO;
  }
  
#line 1522
  ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  ComItextpdfTextPdfPdfNumber *ffNum = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
  jint flagVal = 0;
  if (ffNum != nil) {
    flagVal = [ffNum intValue];
  }
  if ((flagVal & ComItextpdfTextPdfPdfFormField_FF_RICHTEXT) == 0) {
    
#line 1530
    return NO;
  }
  
#line 1533
  ComItextpdfTextPdfPdfString *richString = [[ComItextpdfTextPdfPdfString alloc] initWithNSString:richValue];
  [item writeToAllWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RV_() withComItextpdfTextPdfPdfObject:richString withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED | ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE];
  
#line 1536
  JavaIoInputStream *is = [[JavaIoByteArrayInputStream alloc] initWithByteArray:[((NSString *) nil_chk(richValue)) getBytes]];
  ComItextpdfTextPdfPdfString *valueString = [[ComItextpdfTextPdfPdfString alloc] initWithNSString:[ComItextpdfTextXmlXmlToTxt parseWithJavaIoInputStream:is]];
  [item writeToAllWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:valueString withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED | ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE];
  return YES;
}


#line 1562
- (jboolean)setFieldWithNSString:(NSString *)name
                    withNSString:(NSString *)value
                    withNSString:(NSString *)display {
  
#line 1564
  if (writer_ == nil) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:
#line 1566
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"this.acrofields.instance.is.read.only" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if ([((ComItextpdfTextPdfXfaForm *) nil_chk(xfa_)) isXfaPresent]) {
    name = [xfa_ findFieldNameWithNSString:name withComItextpdfTextPdfAcroFields:self];
    if (name == nil) {
      return NO;
    }
    NSString *shortName = [ComItextpdfTextPdfXfaForm_Xml2Som getShortNameWithNSString:name];
    id<OrgW3cDomNode> xn = [xfa_ findDatasetsNodeWithNSString:shortName];
    if (xn == nil) {
      xn = [((ComItextpdfTextPdfXfaForm_Xml2SomDatasets *) nil_chk([xfa_ getDatasetsSom])) insertNodeWithOrgW3cDomNode:[xfa_ getDatasetsNode] withNSString:shortName];
    }
    [xfa_ setNodeTextWithOrgW3cDomNode:xn withNSString:value];
  }
  ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:name];
  if (item == nil) {
    return NO;
  }
  ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  ComItextpdfTextPdfPdfName *type = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()];
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TX_())) isEqual:type]) {
    ComItextpdfTextPdfPdfNumber *maxLen = [merged getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MAXLEN_()];
    jint len = 0;
    if (maxLen != nil) {
      len = [maxLen intValue];
    }
    if (len > 0) {
      value = [value substring:0 endIndex:[JavaLangMath minWithInt:len withInt:((jint) [((NSString *) nil_chk(value)) length])]];
    }
  }
  if (display == nil) {
    display = value;
  }
  if ([ComItextpdfTextPdfPdfName_get_TX_() isEqual:type] || [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CH_())) isEqual:type]) {
    ComItextpdfTextPdfPdfString *v = [[ComItextpdfTextPdfPdfString alloc] initWithNSString:value withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()];
    for (jint idx = 0; idx < [item size]; ++idx) {
      ComItextpdfTextPdfPdfDictionary *valueDic = [item getValueWithInt:idx];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(valueDic)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:v];
      [valueDic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_I_()];
      [self markUsedWithComItextpdfTextPdfPdfObject:valueDic];
      merged = [item getMergedWithInt:idx];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_I_()];
      [merged putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:v];
      ComItextpdfTextPdfPdfDictionary *widget = [item getWidgetWithInt:idx];
      if (generateAppearances_) {
        ComItextpdfTextPdfPdfAppearance *app = [self getAppearanceWithComItextpdfTextPdfPdfDictionary:merged withNSString:display withNSString:name];
        if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CH_())) isEqual:type]) {
          ComItextpdfTextPdfPdfNumber *n = [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:topFirst_];
          [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widget)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TI_() withComItextpdfTextPdfPdfObject:n];
          [merged putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TI_() withComItextpdfTextPdfPdfObject:n];
        }
        ComItextpdfTextPdfPdfDictionary *appDic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widget)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
        if (appDic == nil) {
          appDic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
          [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_() withComItextpdfTextPdfPdfObject:appDic];
          [merged putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_() withComItextpdfTextPdfPdfObject:appDic];
        }
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(appDic)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) getIndirectReference]];
        [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) releaseTemplateWithComItextpdfTextPdfPdfTemplate:app];
      }
      else {
        
#line 1626
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widget)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
        [merged removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
      }
      [self markUsedWithComItextpdfTextPdfPdfObject:widget];
    }
    return YES;
  }
  else
#line 1632
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_BTN_())) isEqual:type]) {
    ComItextpdfTextPdfPdfNumber *ff = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getMergedWithInt:0])) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
    jint flags = 0;
    if (ff != nil) {
      flags = [ff intValue];
    }
    if ((flags & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) != 0) {
      
#line 1640
      ComItextpdfTextImage *img;
      @try {
        img = [ComItextpdfTextImage getInstanceWithByteArray:[ComItextpdfTextPdfCodecBase64 decodeWithNSString:value]];
      }
      @catch (
#line 1643
      JavaLangException *e) {
        return NO;
      }
      ComItextpdfTextPdfPushbuttonField *pb = [self getNewPushbuttonFromFieldWithNSString:name];
      [((ComItextpdfTextPdfPushbuttonField *) nil_chk(pb)) setImageWithComItextpdfTextImage:img];
      [self replacePushbuttonFieldWithNSString:name withComItextpdfTextPdfPdfFormField:[pb getField]];
      return YES;
    }
    ComItextpdfTextPdfPdfName *v = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:value];
    JavaUtilArrayList *lopt = [[JavaUtilArrayList alloc] init];
    ComItextpdfTextPdfPdfArray *opts = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([item getValueWithInt:0])) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPT_()];
    if (opts != nil) {
      for (jint k = 0; k < [opts size]; ++k) {
        ComItextpdfTextPdfPdfString *valStr = [opts getAsStringWithInt:k];
        if (valStr != nil) {
          [lopt addWithId:[valStr toUnicodeString]];
        }
        else {
          
#line 1660
          [lopt addWithId:nil];
        }
      }
    }
    jint vidx = [lopt indexOfWithId:value];
    ComItextpdfTextPdfPdfName *vt;
    if (vidx >= 0) {
      vt = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:[NSString valueOfInt:vidx]];
    }
    else {
      
#line 1669
      vt = v;
    }
    for (jint idx = 0; idx < [item size]; ++idx) {
      merged = [item getMergedWithInt:idx];
      ComItextpdfTextPdfPdfDictionary *widget = [item getWidgetWithInt:idx];
      ComItextpdfTextPdfPdfDictionary *valDict = [item getValueWithInt:idx];
      [self markUsedWithComItextpdfTextPdfPdfObject:[item getValueWithInt:idx]];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(valDict)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:vt];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:vt];
      [self markUsedWithComItextpdfTextPdfPdfObject:widget];
      if ([self isInAPWithComItextpdfTextPdfPdfDictionary:widget withComItextpdfTextPdfPdfName:vt]) {
        [merged putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:vt];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widget)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:vt];
      }
      else {
        
#line 1683
        [merged putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_Off_()];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widget)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_Off_()];
      }
    }
    return YES;
  }
  return NO;
}


#line 1703
- (jboolean)setListSelectionWithNSString:(NSString *)name
                       withNSStringArray:(IOSObjectArray *)value {
  
#line 1705
  ComItextpdfTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:name];
  if (item == nil) {
    return NO;
  }
  ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  ComItextpdfTextPdfPdfName *type = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()];
  if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CH_())) isEqual:type]) {
    return NO;
  }
  IOSObjectArray *options = [self getListOptionExportWithNSString:name];
  ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] init];
  {
    IOSObjectArray *a__ =
#line 1716
    value;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *element = *b__++;
      
#line 1717
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(options))->size_; j++) {
        if ([((NSString *) nil_chk(IOSObjectArray_Get(options, j))) isEqual:element]) {
          [array addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:j]];
          break;
        }
      }
    }
  }
  
#line 1724
  [item writeToAllWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_I_() withComItextpdfTextPdfPdfObject:array withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED | ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE];
  
#line 1726
  ComItextpdfTextPdfPdfArray *vals = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(value))->size_; ++i) {
    [vals addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(value, i)]];
  }
  [item writeToAllWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:vals withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED | ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE];
  
#line 1732
  ComItextpdfTextPdfPdfAppearance *app = [self getAppearanceWithComItextpdfTextPdfPdfDictionary:merged withNSStringArray:value withNSString:name];
  
#line 1734
  ComItextpdfTextPdfPdfDictionary *apDic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [apDic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) getIndirectReference]];
  [item writeToAllWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_() withComItextpdfTextPdfPdfObject:apDic withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED | ComItextpdfTextPdfAcroFields_Item_WRITE_WIDGET];
  
#line 1738
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) releaseTemplateWithComItextpdfTextPdfPdfTemplate:app];
  
#line 1740
  [item markUsedWithComItextpdfTextPdfAcroFields:self withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE | ComItextpdfTextPdfAcroFields_Item_WRITE_WIDGET];
  return YES;
}


#line 1744
- (jboolean)isInAPWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic
                        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)check {
  
#line 1745
  ComItextpdfTextPdfPdfDictionary *appDic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
  if (appDic == nil) {
    return NO;
  }
  ComItextpdfTextPdfPdfDictionary *NDic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(appDic)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_()];
  return NDic != nil && [NDic getWithComItextpdfTextPdfPdfName:check] != nil;
}


#line 1759
- (id<JavaUtilMap>)getFields {
  
#line 1760
  return fields_;
}


#line 1771
- (ComItextpdfTextPdfAcroFields_Item *)getFieldItemWithNSString:(NSString *)name {
  
#line 1772
  if ([((ComItextpdfTextPdfXfaForm *) nil_chk(xfa_)) isXfaPresent]) {
    name = [xfa_ findFieldNameWithNSString:name withComItextpdfTextPdfAcroFields:self];
    if (name == nil) {
      return nil;
    }
  }
  return [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:name];
}


#line 1788
- (NSString *)getTranslatedFieldNameWithNSString:(NSString *)name {
  
#line 1789
  if ([((ComItextpdfTextPdfXfaForm *) nil_chk(xfa_)) isXfaPresent]) {
    NSString *namex = [xfa_ findFieldNameWithNSString:name withComItextpdfTextPdfAcroFields:self];
    if (namex != nil) {
      name = namex;
    }
  }
  return name;
}


#line 1808
- (id<JavaUtilList>)getFieldPositionsWithNSString:(NSString *)name {
  
#line 1809
  ComItextpdfTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:name];
  if (item == nil) {
    return nil;
  }
  JavaUtilArrayList *ret = [[JavaUtilArrayList alloc] init];
  for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
    @try {
      ComItextpdfTextPdfPdfDictionary *wd = [item getWidgetWithInt:k];
      ComItextpdfTextPdfPdfArray *rect = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(wd)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_()];
      if (rect == nil) {
        continue;
      }
      ComItextpdfTextRectangle *r = [ComItextpdfTextPdfPdfReader getNormalizedRectangleWithComItextpdfTextPdfPdfArray:rect];
      jint page = [((JavaLangInteger *) nil_chk([item getPageWithInt:k])) intValue];
      jint rotation = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageRotationWithInt:page];
      ComItextpdfTextPdfAcroFields_FieldPosition *fp = [[ComItextpdfTextPdfAcroFields_FieldPosition alloc] init];
      fp->page_ = page;
      if (rotation != 0) {
        ComItextpdfTextRectangle *pageSize = [reader_ getPageSizeWithInt:page];
        switch (rotation) {
          case 270:
          r = [[ComItextpdfTextRectangle alloc] initWithFloat:[((ComItextpdfTextRectangle *) nil_chk(pageSize)) getTop] - [((ComItextpdfTextRectangle *) nil_chk(r)) getBottom] withFloat:[r getLeft] withFloat:[pageSize getTop] -
#line 1831
          [r getTop] withFloat:[r getRight]];
          break;
          case 180:
          r = [[ComItextpdfTextRectangle alloc] initWithFloat:[((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [((ComItextpdfTextRectangle *) nil_chk(r)) getLeft] withFloat:[pageSize getTop] -
#line 1835
          [r getBottom] withFloat:[pageSize getRight] - [r getRight] withFloat:[pageSize getTop] -
#line 1836
          [r getTop]];
          break;
          case 90:
          r = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 1840
          [((ComItextpdfTextRectangle *) nil_chk(r)) getBottom] withFloat:[((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [r getLeft] withFloat:[r getTop] withFloat:[pageSize getRight] -
#line 1841
          [r getRight]];
          break;
        }
        [((ComItextpdfTextRectangle *) nil_chk(r)) normalize];
      }
      fp->position_ = r;
      [ret addWithId:fp];
    }
    @catch (
#line 1848
    JavaLangException *e) {
    }
  }
  
#line 1852
  return ret;
}


#line 1855
- (jint)removeRefFromArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)array
                         withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)refo {
  
#line 1856
  if (refo == nil || ![refo isIndirect]) {
    return [((ComItextpdfTextPdfPdfArray *) nil_chk(array)) size];
  }
  ComItextpdfTextPdfPdfIndirectReference *ref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(refo, [ComItextpdfTextPdfPdfIndirectReference class]);
  for (jint j = 0; j < [((ComItextpdfTextPdfPdfArray *) nil_chk(array)) size]; ++j) {
    ComItextpdfTextPdfPdfObject *obj = [array getPdfObjectWithInt:j];
    if (![((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect]) {
      continue;
    }
    if ([((ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])) getNumber] == [((ComItextpdfTextPdfPdfIndirectReference *) nil_chk(ref)) getNumber]) {
      (void) [array removeWithInt:j--];
    }
  }
  return [array size];
}


#line 1880
- (jboolean)removeFieldsFromPageWithInt:(jint)page {
  
#line 1881
  if (page < 1) {
    return NO;
  }
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:[((id<JavaUtilMap>) nil_chk(fields_)) size] type:[IOSClass classWithClass:[NSString class]]];
  (void) [((id<JavaUtilSet>) nil_chk([fields_ keySet])) toArrayWithNSObjectArray:names];
  jboolean found = NO;
  for (jint k = 0; k < names->size_; ++k) {
    jboolean fr = [self removeFieldWithNSString:IOSObjectArray_Get(names, k) withInt:page];
    found = (found || fr);
  }
  return found;
}


#line 1906
- (jboolean)removeFieldWithNSString:(NSString *)name
                            withInt:(jint)page {
  
#line 1907
  ComItextpdfTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:name];
  if (item == nil) {
    return NO;
  }
  ComItextpdfTextPdfPdfDictionary *acroForm = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:
#line 1912
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()] withComItextpdfTextPdfPdfObject:[reader_ getCatalog]], [ComItextpdfTextPdfPdfDictionary class]);
  
#line 1914
  if (acroForm == nil) {
    return NO;
  }
  ComItextpdfTextPdfPdfArray *arrayf = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(acroForm)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_()];
  if (arrayf == nil) {
    return NO;
  }
  for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
    jint pageV = [((JavaLangInteger *) nil_chk([item getPageWithInt:k])) intValue];
    if (page != -1 && page != pageV) {
      continue;
    }
    ComItextpdfTextPdfPdfIndirectReference *ref = [item getWidgetRefWithInt:k];
    ComItextpdfTextPdfPdfDictionary *wd = [item getWidgetWithInt:k];
    ComItextpdfTextPdfPdfDictionary *pageDic = [reader_ getPageNWithInt:pageV];
    ComItextpdfTextPdfPdfArray *annots = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
    if (annots != nil) {
      if ([self removeRefFromArrayWithComItextpdfTextPdfPdfArray:annots withComItextpdfTextPdfPdfObject:ref] == 0) {
        [pageDic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
        [self markUsedWithComItextpdfTextPdfPdfObject:pageDic];
      }
      else {
        
#line 1935
        [self markUsedWithComItextpdfTextPdfPdfObject:annots];
      }
    }
    (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:ref];
    ComItextpdfTextPdfPdfIndirectReference *kid = ref;
    while ((ref = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(wd)) getAsIndirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()]) != nil) {
      wd = [wd getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()];
      ComItextpdfTextPdfPdfArray *kids = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(wd)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()];
      if ([self removeRefFromArrayWithComItextpdfTextPdfPdfArray:kids withComItextpdfTextPdfPdfObject:kid] != 0) {
        break;
      }
      kid = ref;
      (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:ref];
    }
    if (ref == nil) {
      [self removeRefFromArrayWithComItextpdfTextPdfPdfArray:arrayf withComItextpdfTextPdfPdfObject:kid];
      [self markUsedWithComItextpdfTextPdfPdfObject:arrayf];
    }
    if (page != -1) {
      [item removeWithInt:k];
      --k;
    }
  }
  if (page == -1 || [item size] == 0) {
    (void) [((id<JavaUtilMap>) nil_chk(fields_)) removeWithId:name];
  }
  return YES;
}


#line 1971
- (jboolean)removeFieldWithNSString:(NSString *)name {
  return [self removeFieldWithNSString:name withInt:-1];
}


#line 1980
- (jboolean)isGenerateAppearances {
  
#line 1981
  return generateAppearances_;
}


#line 1993
- (void)setGenerateAppearancesWithBoolean:(jboolean)generateAppearances {
  
#line 1994
  self->generateAppearances_ = generateAppearances;
  ComItextpdfTextPdfPdfDictionary *top = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
  if (generateAppearances) {
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(top)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEEDAPPEARANCES_()];
  }
  else {
    
#line 1999
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(top)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEEDAPPEARANCES_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
  }
}


#line 2331
- (jboolean)clearSignatureFieldWithNSString:(NSString *)name {
  
#line 2332
  sigNames_ = nil;
  (void) [self getSignatureNames];
  if (![((JavaUtilHashMap *) nil_chk(sigNames_)) containsKeyWithId:name]) {
    return NO;
  }
  ComItextpdfTextPdfAcroFields_Item *sig = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:name];
  [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(sig)) markUsedWithComItextpdfTextPdfAcroFields:self withInt:ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE | ComItextpdfTextPdfAcroFields_Item_WRITE_WIDGET];
  jint n = [sig size];
  for (jint k = 0; k < n; ++k) {
    [ComItextpdfTextPdfAcroFields clearSigDicWithComItextpdfTextPdfPdfDictionary:[sig getMergedWithInt:k]];
    [ComItextpdfTextPdfAcroFields clearSigDicWithComItextpdfTextPdfPdfDictionary:[sig getWidgetWithInt:k]];
    [ComItextpdfTextPdfAcroFields clearSigDicWithComItextpdfTextPdfPdfDictionary:[sig getValueWithInt:k]];
  }
  return YES;
}


#line 2348
+ (void)clearSigDicWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic {
  
#line 2349
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
  [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()];
  [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()];
  [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DV_()];
  [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SV_()];
  [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT]];
}


#line 2365
- (JavaUtilArrayList *)getSignatureNames {
  
#line 2366
  if (sigNames_ != nil) {
    return [[JavaUtilArrayList alloc] initWithJavaUtilCollection:orderedSignatureNames_];
  }
  sigNames_ = [[JavaUtilHashMap alloc] init];
  orderedSignatureNames_ = [[JavaUtilArrayList alloc] init];
  JavaUtilArrayList *sorter = [[JavaUtilArrayList alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(fields_)) entrySet])) {
    ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
    if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_SIG_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()]]) {
      continue;
    }
    ComItextpdfTextPdfPdfDictionary *v = [merged getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()];
    if (v == nil) {
      continue;
    }
    ComItextpdfTextPdfPdfString *contents = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(v)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()];
    if (contents == nil) {
      continue;
    }
    ComItextpdfTextPdfPdfArray *ro = [v getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BYTERANGE_()];
    if (ro == nil) {
      continue;
    }
    jint rangeSize = [((ComItextpdfTextPdfPdfArray *) nil_chk(ro)) size];
    if (rangeSize < 2) {
      continue;
    }
    jint length = [((ComItextpdfTextPdfPdfNumber *) nil_chk([ro getAsNumberWithInt:rangeSize - 1])) intValue] +
#line 2395
    [((ComItextpdfTextPdfPdfNumber *) nil_chk([ro getAsNumberWithInt:rangeSize - 2])) intValue];
    [sorter addWithId:[IOSObjectArray arrayWithObjects:(id[]){ [entry_ getKey], [IOSIntArray arrayWithInts:(jint[]){ length, 0 } count:2] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  }
  [JavaUtilCollections sortWithJavaUtilList:sorter withJavaUtilComparator:[[ComItextpdfTextPdfAcroFields_SorterComparator alloc] init]];
  if (![sorter isEmpty]) {
    if (IOSIntArray_Get(nil_chk(((IOSIntArray *) check_class_cast(IOSObjectArray_Get(nil_chk([sorter getWithInt:[sorter size] - 1]), 1), [IOSIntArray class]))), 0) == [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getFileLength]) {
      totalRevisions_ = [sorter size];
    }
    else {
      
#line 2403
      totalRevisions_ = [sorter size] + 1;
    }
    for (jint k = 0; k < [sorter size]; ++k) {
      IOSObjectArray *objs = [sorter getWithInt:k];
      NSString *name = (NSString *) check_class_cast(IOSObjectArray_Get(nil_chk(objs), 0), [NSString class]);
      IOSIntArray *p = (IOSIntArray *) check_class_cast(IOSObjectArray_Get(objs, 1), [IOSIntArray class]);
      *IOSIntArray_GetRef(nil_chk(p), 1) = k + 1;
      (void) [sigNames_ putWithId:name withId:p];
      [orderedSignatureNames_ addWithId:name];
    }
  }
  return [[JavaUtilArrayList alloc] initWithJavaUtilCollection:orderedSignatureNames_];
}


#line 2422
- (JavaUtilArrayList *)getBlankSignatureNames {
  (void) [self getSignatureNames];
  JavaUtilArrayList *sigs = [[JavaUtilArrayList alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(fields_)) entrySet])) {
    ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
    if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_SIG_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()]]) {
      continue;
    }
    if ([((JavaUtilHashMap *) nil_chk(sigNames_)) containsKeyWithId:[entry_ getKey]]) {
      continue;
    }
    [sigs addWithId:[entry_ getKey]];
  }
  return sigs;
}


#line 2447
- (ComItextpdfTextPdfPdfDictionary *)getSignatureDictionaryWithNSString:(NSString *)name {
  
#line 2448
  (void) [self getSignatureNames];
  name = [self getTranslatedFieldNameWithNSString:name];
  if (![((JavaUtilHashMap *) nil_chk(sigNames_)) containsKeyWithId:name]) {
    return nil;
  }
  ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:name];
  ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  return [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()];
}


#line 2466
- (ComItextpdfTextPdfPdfIndirectReference *)getNormalAppearanceWithNSString:(NSString *)name {
  
#line 2467
  (void) [self getSignatureNames];
  name = [self getTranslatedFieldNameWithNSString:name];
  ComItextpdfTextPdfAcroFields_Item *item = [((id<JavaUtilMap>) nil_chk(fields_)) getWithId:name];
  if (item == nil) {
    return nil;
  }
  ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  ComItextpdfTextPdfPdfDictionary *ap = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
  if (ap == nil) {
    return nil;
  }
  ComItextpdfTextPdfPdfIndirectReference *ref = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(ap)) getAsIndirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_()];
  if (ref == nil) {
    return nil;
  }
  return ref;
}


#line 2493
- (jboolean)signatureCoversWholeDocumentWithNSString:(NSString *)name {
  
#line 2494
  (void) [self getSignatureNames];
  name = [self getTranslatedFieldNameWithNSString:name];
  if (![((JavaUtilHashMap *) nil_chk(sigNames_)) containsKeyWithId:name]) {
    return NO;
  }
  return IOSIntArray_Get(nil_chk([sigNames_ getWithId:name]), 0) == [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getFileLength];
}


#line 2635
- (void)markUsedWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 2636
  if (!append_) {
    return;
  }
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) check_class_cast(writer_, [ComItextpdfTextPdfPdfStamperImp class])))) markUsedWithComItextpdfTextPdfPdfObject:obj];
}


#line 2647
- (jint)getTotalRevisions {
  
#line 2648
  (void) [self getSignatureNames];
  return totalRevisions_;
}


#line 2659
- (jint)getRevisionWithNSString:(NSString *)field {
  
#line 2660
  (void) [self getSignatureNames];
  field = [self getTranslatedFieldNameWithNSString:field];
  if (![((JavaUtilHashMap *) nil_chk(sigNames_)) containsKeyWithId:field]) {
    return 0;
  }
  return IOSIntArray_Get(nil_chk([sigNames_ getWithId:field]), 1);
}


#line 2678
- (JavaIoInputStream *)extractRevisionWithNSString:(NSString *)field {
  
#line 2679
  (void) [self getSignatureNames];
  field = [self getTranslatedFieldNameWithNSString:field];
  if (![((JavaUtilHashMap *) nil_chk(sigNames_)) containsKeyWithId:field]) {
    return nil;
  }
  jint length = IOSIntArray_Get(nil_chk([sigNames_ getWithId:field]), 0);
  ComItextpdfTextPdfRandomAccessFileOrArray *raf = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getSafeFile];
  return [[ComItextpdfTextIoRASInputStream alloc] initWithComItextpdfTextIoRandomAccessSource:[[ComItextpdfTextIoWindowRandomAccessSource alloc] initWithComItextpdfTextIoRandomAccessSource:[((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(raf)) createSourceView] withLong:0 withLong:length]];
}


#line 2695
- (id<JavaUtilMap>)getFieldCache {
  
#line 2696
  return fieldCache_;
}


#line 2727
- (void)setFieldCacheWithJavaUtilMap:(id<JavaUtilMap>)fieldCache {
  
#line 2728
  self->fieldCache_ = fieldCache;
}


#line 2739
- (void)setExtraMarginWithFloat:(jfloat)extraMarginLeft
                      withFloat:(jfloat)extraMarginTop {
  
#line 2740
  self->extraMarginLeft_ = extraMarginLeft;
  self->extraMarginTop_ = extraMarginTop;
}


#line 2751
- (void)addSubstitutionFontWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)font {
  
#line 2752
  if (substitutionFonts_ == nil) {
    substitutionFonts_ = [[JavaUtilArrayList alloc] init];
  }
  [((JavaUtilArrayList *) nil_chk(substitutionFonts_)) addWithId:font];
}


#line 2812
- (JavaUtilArrayList *)getSubstitutionFonts {
  
#line 2813
  return substitutionFonts_;
}


#line 2824
- (void)setSubstitutionFontsWithJavaUtilArrayList:(JavaUtilArrayList *)substitutionFonts {
  
#line 2825
  self->substitutionFonts_ = substitutionFonts;
}


#line 2833
- (ComItextpdfTextPdfXfaForm *)getXfa {
  
#line 2834
  return xfa_;
}


#line 2840
- (void)removeXfa {
  
#line 2841
  ComItextpdfTextPdfPdfDictionary *root = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *acroform = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(root)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(acroform)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XFA_()];
  @try {
    xfa_ = [[ComItextpdfTextPdfXfaForm alloc] initWithComItextpdfTextPdfPdfReader:reader_];
  }
  @catch (
#line 2846
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 2867
- (ComItextpdfTextPdfPushbuttonField *)getNewPushbuttonFromFieldWithNSString:(NSString *)field {
  
#line 2868
  return [self getNewPushbuttonFromFieldWithNSString:field withInt:0];
}


#line 2886
- (ComItextpdfTextPdfPushbuttonField *)getNewPushbuttonFromFieldWithNSString:(NSString *)field
                                                                     withInt:(jint)order {
  
#line 2887
  @try {
    if ([self getFieldTypeWithNSString:field] != ComItextpdfTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON) {
      return nil;
    }
    ComItextpdfTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:field];
    if (order >= [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]) {
      return nil;
    }
    id<JavaUtilList> pos = [self getFieldPositionsWithNSString:field];
    ComItextpdfTextRectangle *box = ((ComItextpdfTextPdfAcroFields_FieldPosition *) nil_chk([((id<JavaUtilList>) nil_chk(pos)) getWithInt:order]))->position_;
    ComItextpdfTextPdfPushbuttonField *newButton = [[ComItextpdfTextPdfPushbuttonField alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextRectangle:box withNSString:nil];
    ComItextpdfTextPdfPdfDictionary *dic = [item getMergedWithInt:order];
    [self decodeGenericDictionaryWithComItextpdfTextPdfPdfDictionary:dic withComItextpdfTextPdfBaseField:newButton];
    ComItextpdfTextPdfPdfDictionary *mk = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MK_()];
    if (mk != nil) {
      ComItextpdfTextPdfPdfString *text = [mk getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CA_()];
      if (text != nil) {
        [newButton setTextWithNSString:[text toUnicodeString]];
      }
      ComItextpdfTextPdfPdfNumber *tp = [mk getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TP_()];
      if (tp != nil) {
        [newButton setLayoutWithInt:[tp intValue] + 1];
      }
      ComItextpdfTextPdfPdfDictionary *ifit = [mk getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_IF_()];
      if (ifit != nil) {
        ComItextpdfTextPdfPdfName *sw = [ifit getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SW_()];
        if (sw != nil) {
          jint scale_ = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_ALWAYS;
          if ([sw isEqual:ComItextpdfTextPdfPdfName_get_B_()]) {
            scale_ = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_BIG;
          }
          else
#line 2917
          if ([sw isEqual:ComItextpdfTextPdfPdfName_get_S_()]) {
            scale_ = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_SMALL;
          }
          else
#line 2919
          if ([sw isEqual:ComItextpdfTextPdfPdfName_get_N_()]) {
            scale_ = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_NEVER;
          }
          [newButton setScaleIconWithInt:scale_];
        }
        sw = [ifit getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()];
        if (sw != nil) {
          if ([sw isEqual:ComItextpdfTextPdfPdfName_get_A_()]) {
            [newButton setProportionalIconWithBoolean:NO];
          }
        }
        ComItextpdfTextPdfPdfArray *aj = [ifit getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_()];
        if (aj != nil && [aj size] == 2) {
          jfloat left = [((ComItextpdfTextPdfPdfNumber *) nil_chk([aj getAsNumberWithInt:0])) floatValue];
          jfloat bottom = [((ComItextpdfTextPdfPdfNumber *) nil_chk([aj getAsNumberWithInt:1])) floatValue];
          [newButton setIconHorizontalAdjustmentWithFloat:left];
          [newButton setIconVerticalAdjustmentWithFloat:bottom];
        }
        ComItextpdfTextPdfPdfBoolean *fb = [ifit getAsBooleanWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FB_()];
        if (fb != nil && [fb booleanValue]) {
          [newButton setIconFitToBoundsWithBoolean:YES];
        }
      }
      ComItextpdfTextPdfPdfObject *i = [mk getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_I_()];
      if (i != nil && [i isIndirect]) {
        [newButton setIconReferenceWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(i, [ComItextpdfTextPdfPRIndirectReference class])];
      }
    }
    return newButton;
  }
  @catch (
#line 2948
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}

- (jboolean)replacePushbuttonFieldWithNSString:(NSString *)field
            withComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)button {
  
#line 2966
  return [self replacePushbuttonFieldWithNSString:field withComItextpdfTextPdfPdfFormField:button withInt:0];
}


#line 2985
- (jboolean)replacePushbuttonFieldWithNSString:(NSString *)field
            withComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)button
                                       withInt:(jint)order {
  
#line 2986
  if ([self getFieldTypeWithNSString:field] != ComItextpdfTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON) {
    return NO;
  }
  ComItextpdfTextPdfAcroFields_Item *item = [self getFieldItemWithNSString:field];
  if (order >= [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]) {
    return NO;
  }
  ComItextpdfTextPdfPdfDictionary *merged = [item getMergedWithInt:order];
  ComItextpdfTextPdfPdfDictionary *values = [item getValueWithInt:order];
  ComItextpdfTextPdfPdfDictionary *widgets = [item getWidgetWithInt:order];
  for (jint k = 0; k < ((IOSObjectArray *) nil_chk(ComItextpdfTextPdfAcroFields_buttonRemove_))->size_; ++k) {
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) removeWithComItextpdfTextPdfPdfName:IOSObjectArray_Get(ComItextpdfTextPdfAcroFields_buttonRemove_, k)];
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(values)) removeWithComItextpdfTextPdfPdfName:IOSObjectArray_Get(ComItextpdfTextPdfAcroFields_buttonRemove_, k)];
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widgets)) removeWithComItextpdfTextPdfPdfName:IOSObjectArray_Get(ComItextpdfTextPdfAcroFields_buttonRemove_, k)];
  }
  for (id __strong element in nil_chk([((ComItextpdfTextPdfPdfFormField *) nil_chk(button)) getKeys])) {
    ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(key)) isEqual:ComItextpdfTextPdfPdfName_get_T_()] || [key isEqual:ComItextpdfTextPdfPdfName_get_RECT_()]) {
      continue;
    }
    if ([key isEqual:ComItextpdfTextPdfPdfName_get_FF_()]) {
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(values)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[button getWithComItextpdfTextPdfPdfName:key]];
    }
    else {
      
#line 3009
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widgets)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[button getWithComItextpdfTextPdfPdfName:key]];
    }
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[button getWithComItextpdfTextPdfPdfName:key]];
    [self markUsedWithComItextpdfTextPdfPdfObject:values];
    [self markUsedWithComItextpdfTextPdfPdfObject:widgets];
  }
  return YES;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfAcroFields *)other {
  [super copyAllFieldsTo:other];
  other->append_ = append_;
  other->extensionFonts_ = extensionFonts_;
  other->extraMarginLeft_ = extraMarginLeft_;
  other->extraMarginTop_ = extraMarginTop_;
  other->fieldCache_ = fieldCache_;
  other->fields_ = fields_;
  other->generateAppearances_ = generateAppearances_;
  other->lastWasString_ = lastWasString_;
  other->localFonts_ = localFonts_;
  other->orderedSignatureNames_ = orderedSignatureNames_;
  other->reader_ = reader_;
  other->sigNames_ = sigNames_;
  other->substitutionFonts_ = substitutionFonts_;
  other->topFirst_ = topFirst_;
  other->totalRevisions_ = totalRevisions_;
  other->writer_ = writer_;
  other->xfa_ = xfa_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfAcroFields class]) {
    ComItextpdfTextPdfAcroFields_stdFieldFontNames_ =
#line 2758
    [[JavaUtilHashMap alloc] init];
    {
      
#line 2773
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"CoBO" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Courier-BoldOblique" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"CoBo" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Courier-Bold" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"CoOb" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Courier-Oblique" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"Cour" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Courier" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"HeBO" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Helvetica-BoldOblique" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"HeBo" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Helvetica-Bold" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"HeOb" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Helvetica-Oblique" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"Helv" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Helvetica" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"Symb" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Symbol" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"TiBI" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Times-BoldItalic" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"TiBo" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Times-Bold" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"TiIt" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Times-Italic" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"TiRo" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"Times-Roman" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"ZaDb" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"ZapfDingbats" } count:1 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"HySm" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"HYSMyeongJo-Medium", @"UniKS-UCS2-H" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"HyGo" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"HYGoThic-Medium", @"UniKS-UCS2-H" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"KaGo" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"HeiseiKakuGo-W5", @"UniKS-UCS2-H" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"KaMi" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"HeiseiMin-W3", @"UniJIS-UCS2-H" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"MHei" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"MHei-Medium", @"UniCNS-UCS2-H" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"MSun" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"MSung-Light", @"UniCNS-UCS2-H" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
      (void) [ComItextpdfTextPdfAcroFields_stdFieldFontNames_ putWithId:@"STSo" withId:[IOSObjectArray arrayWithObjects:(id[]){ @"STSong-Light", @"UniGB-UCS2-H" } count:2 type:[IOSClass classWithClass:[NSString class]]]];
    }
    ComItextpdfTextPdfAcroFields_buttonRemove_ = [IOSObjectArray arrayWithObjects:(id[]){ ComItextpdfTextPdfPdfName_get_MK_(), ComItextpdfTextPdfPdfName_get_F_(), ComItextpdfTextPdfPdfName_get_FF_(), ComItextpdfTextPdfPdfName_get_Q_(), ComItextpdfTextPdfPdfName_get_BS_(), ComItextpdfTextPdfPdfName_get_BORDER_() } count:6 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfName class]]];
    ComItextpdfTextPdfAcroFields_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfWriter:", "AcroFields", NULL, 0x0, NULL },
    { "fill", NULL, "V", 0x0, NULL },
    { "getAppearanceStatesWithNSString:", "getAppearanceStates", "[Ljava.lang.String;", 0x1, NULL },
    { "getListOptionWithNSString:withInt:", "getListOption", "[Ljava.lang.String;", 0x2, NULL },
    { "getListOptionExportWithNSString:", "getListOptionExport", "[Ljava.lang.String;", 0x1, NULL },
    { "getListOptionDisplayWithNSString:", "getListOptionDisplay", "[Ljava.lang.String;", 0x1, NULL },
    { "setListOptionWithNSString:withNSStringArray:withNSStringArray:", "setListOption", "Z", 0x1, NULL },
    { "getFieldTypeWithNSString:", "getFieldType", "I", 0x1, NULL },
    { "exportAsFdfWithComItextpdfTextPdfFdfWriter:", "exportAsFdf", "V", 0x1, NULL },
    { "renameFieldWithNSString:withNSString:", "renameField", "Z", 0x1, NULL },
    { "splitDAelementsWithNSString:", "splitDAelements", "[Ljava.lang.Object;", 0x9, NULL },
    { "decodeGenericDictionaryWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfBaseField:", "decodeGenericDictionary", "V", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getAppearanceWithComItextpdfTextPdfPdfDictionary:withNSStringArray:withNSString:", "getAppearance", "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x0, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getAppearanceWithComItextpdfTextPdfPdfDictionary:withNSString:withNSString:", "getAppearance", "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x0, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getMKColorWithComItextpdfTextPdfPdfArray:", "getMKColor", "Lcom.itextpdf.text.BaseColor;", 0x0, NULL },
    { "getFieldRichValueWithNSString:", "getFieldRichValue", "Ljava.lang.String;", 0x1, NULL },
    { "getFieldWithNSString:", "getField", "Ljava.lang.String;", 0x1, NULL },
    { "getListSelectionWithNSString:", "getListSelection", "[Ljava.lang.String;", 0x1, NULL },
    { "setFieldPropertyWithNSString:withNSString:withId:withIntArray:", "setFieldProperty", "Z", 0x1, NULL },
    { "setFieldPropertyWithNSString:withNSString:withInt:withIntArray:", "setFieldProperty", "Z", 0x1, NULL },
    { "mergeXfaDataWithOrgW3cDomNode:", "mergeXfaData", "V", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "setFieldsWithComItextpdfTextPdfFdfReader:", "setFields", "V", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "setFieldsWithComItextpdfTextPdfXfdfReader:", "setFields", "V", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "regenerateFieldWithNSString:", "regenerateField", "Z", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "setFieldWithNSString:withNSString:", "setField", "Z", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "setFieldRichValueWithNSString:withNSString:", "setFieldRichValue", "Z", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "setFieldWithNSString:withNSString:withNSString:", "setField", "Z", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "setListSelectionWithNSString:withNSStringArray:", "setListSelection", "Z", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "isInAPWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfName:", "isInAP", "Z", 0x0, NULL },
    { "getFields", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "getFieldItemWithNSString:", "getFieldItem", "Lcom.itextpdf.text.pdf.AcroFields$Item;", 0x1, NULL },
    { "getTranslatedFieldNameWithNSString:", "getTranslatedFieldName", "Ljava.lang.String;", 0x1, NULL },
    { "getFieldPositionsWithNSString:", "getFieldPositions", "Ljava.util.List;", 0x1, NULL },
    { "removeRefFromArrayWithComItextpdfTextPdfPdfArray:withComItextpdfTextPdfPdfObject:", "removeRefFromArray", "I", 0x2, NULL },
    { "removeFieldsFromPageWithInt:", "removeFieldsFromPage", "Z", 0x1, NULL },
    { "removeFieldWithNSString:withInt:", "removeField", "Z", 0x1, NULL },
    { "removeFieldWithNSString:", "removeField", "Z", 0x1, NULL },
    { "isGenerateAppearances", NULL, "Z", 0x1, NULL },
    { "setGenerateAppearancesWithBoolean:", "setGenerateAppearances", "V", 0x1, NULL },
    { "clearSignatureFieldWithNSString:", "clearSignatureField", "Z", 0x1, NULL },
    { "clearSigDicWithComItextpdfTextPdfPdfDictionary:", "clearSigDic", "V", 0xa, NULL },
    { "getSignatureNames", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getBlankSignatureNames", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getSignatureDictionaryWithNSString:", "getSignatureDictionary", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getNormalAppearanceWithNSString:", "getNormalAppearance", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "signatureCoversWholeDocumentWithNSString:", "signatureCoversWholeDocument", "Z", 0x1, NULL },
    { "markUsedWithComItextpdfTextPdfPdfObject:", "markUsed", "V", 0x2, NULL },
    { "getTotalRevisions", NULL, "I", 0x1, NULL },
    { "getRevisionWithNSString:", "getRevision", "I", 0x1, NULL },
    { "extractRevisionWithNSString:", "extractRevision", "Ljava.io.InputStream;", 0x1, "Ljava.io.IOException;" },
    { "getFieldCache", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "setFieldCacheWithJavaUtilMap:", "setFieldCache", "V", 0x1, NULL },
    { "setExtraMarginWithFloat:withFloat:", "setExtraMargin", "V", 0x1, NULL },
    { "addSubstitutionFontWithComItextpdfTextPdfBaseFont:", "addSubstitutionFont", "V", 0x1, NULL },
    { "getSubstitutionFonts", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "setSubstitutionFontsWithJavaUtilArrayList:", "setSubstitutionFonts", "V", 0x1, NULL },
    { "getXfa", NULL, "Lcom.itextpdf.text.pdf.XfaForm;", 0x1, NULL },
    { "removeXfa", NULL, "V", 0x1, NULL },
    { "getNewPushbuttonFromFieldWithNSString:", "getNewPushbuttonFromField", "Lcom.itextpdf.text.pdf.PushbuttonField;", 0x1, NULL },
    { "getNewPushbuttonFromFieldWithNSString:withInt:", "getNewPushbuttonFromField", "Lcom.itextpdf.text.pdf.PushbuttonField;", 0x1, NULL },
    { "replacePushbuttonFieldWithNSString:withComItextpdfTextPdfPdfFormField:", "replacePushbuttonField", "Z", 0x1, NULL },
    { "replacePushbuttonFieldWithNSString:withComItextpdfTextPdfPdfFormField:withInt:", "replacePushbuttonField", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "writer_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "fields_", NULL, 0x0, "Ljava.util.Map;", NULL,  },
    { "topFirst_", NULL, 0x2, "I", NULL,  },
    { "sigNames_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "append_", NULL, 0x2, "Z", NULL,  },
    { "DA_FONT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_DA_FONT },
    { "DA_SIZE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_DA_SIZE },
    { "DA_COLOR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_DA_COLOR },
    { "extensionFonts_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "xfa_", NULL, 0x2, "Lcom.itextpdf.text.pdf.XfaForm;", NULL,  },
    { "FIELD_TYPE_NONE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_FIELD_TYPE_NONE },
    { "FIELD_TYPE_PUSHBUTTON_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_FIELD_TYPE_PUSHBUTTON },
    { "FIELD_TYPE_CHECKBOX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_FIELD_TYPE_CHECKBOX },
    { "FIELD_TYPE_RADIOBUTTON_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_FIELD_TYPE_RADIOBUTTON },
    { "FIELD_TYPE_TEXT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_FIELD_TYPE_TEXT },
    { "FIELD_TYPE_LIST_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_FIELD_TYPE_LIST },
    { "FIELD_TYPE_COMBO_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_FIELD_TYPE_COMBO },
    { "FIELD_TYPE_SIGNATURE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_FIELD_TYPE_SIGNATURE },
    { "lastWasString_", NULL, 0x2, "Z", NULL,  },
    { "generateAppearances_", NULL, 0x2, "Z", NULL,  },
    { "localFonts_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "extraMarginLeft_", NULL, 0x2, "F", NULL,  },
    { "extraMarginTop_", NULL, 0x2, "F", NULL,  },
    { "substitutionFonts_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "orderedSignatureNames_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "stdFieldFontNames_", NULL, 0x1a, "Ljava.util.HashMap;", &ComItextpdfTextPdfAcroFields_stdFieldFontNames_,  },
    { "totalRevisions_", NULL, 0x2, "I", NULL,  },
    { "fieldCache_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "buttonRemove_", NULL, 0x1a, "[Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfAcroFields_buttonRemove_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfAcroFields = { "AcroFields", "com.itextpdf.text.pdf", NULL, 0x1, 62, methods, 30, fields, 0, NULL};
  return &_ComItextpdfTextPdfAcroFields;
}

@end


#line 2004
@implementation ComItextpdfTextPdfAcroFields_Item


#line 2041
- (void)writeToAllWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value
                                        withInt:(jint)writeFlags {
  
#line 2042
  jint i;
  ComItextpdfTextPdfPdfDictionary *curDict = nil;
  if ((writeFlags & ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED) != 0) {
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(merged_)) size]; ++i) {
      curDict = [self getMergedWithInt:i];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(curDict)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
    }
  }
  if ((writeFlags & ComItextpdfTextPdfAcroFields_Item_WRITE_WIDGET) != 0) {
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(widgets_)) size]; ++i) {
      curDict = [self getWidgetWithInt:i];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(curDict)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
    }
  }
  if ((writeFlags & ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE) != 0) {
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(values_)) size]; ++i) {
      curDict = [self getValueWithInt:i];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(curDict)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
    }
  }
}


#line 2071
- (void)markUsedWithComItextpdfTextPdfAcroFields:(ComItextpdfTextPdfAcroFields *)parentFields
                                         withInt:(jint)writeFlags {
  
#line 2072
  if ((writeFlags & ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE) != 0) {
    for (jint i = 0; i < [self size]; ++i) {
      [((ComItextpdfTextPdfAcroFields *) nil_chk(parentFields)) markUsedWithComItextpdfTextPdfPdfObject:[self getValueWithInt:i]];
    }
  }
  if ((writeFlags & ComItextpdfTextPdfAcroFields_Item_WRITE_WIDGET) != 0) {
    for (jint i = 0; i < [self size]; ++i) {
      [((ComItextpdfTextPdfAcroFields *) nil_chk(parentFields)) markUsedWithComItextpdfTextPdfPdfObject:[self getWidgetWithInt:i]];
    }
  }
}


#line 2134
- (jint)size {
  
#line 2135
  return [((JavaUtilArrayList *) nil_chk(values_)) size];
}


#line 2145
- (void)removeWithInt:(jint)killIdx {
  
#line 2146
  (void) [((JavaUtilArrayList *) nil_chk(values_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(widgets_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(widget_refs_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(merged_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(page_)) removeWithInt:killIdx];
  (void) [((JavaUtilArrayList *) nil_chk(tabOrder_)) removeWithInt:killIdx];
}


#line 2163
- (ComItextpdfTextPdfPdfDictionary *)getValueWithInt:(jint)idx {
  
#line 2164
  return [((JavaUtilArrayList *) nil_chk(values_)) getWithInt:idx];
}


#line 2174
- (void)addValueWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)value {
  
#line 2175
  [((JavaUtilArrayList *) nil_chk(values_)) addWithId:value];
}


#line 2186
- (ComItextpdfTextPdfPdfDictionary *)getWidgetWithInt:(jint)idx {
  
#line 2187
  return [((JavaUtilArrayList *) nil_chk(widgets_)) getWithInt:idx];
}


#line 2196
- (void)addWidgetWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)widget {
  
#line 2197
  [((JavaUtilArrayList *) nil_chk(widgets_)) addWithId:widget];
}


#line 2208
- (ComItextpdfTextPdfPdfIndirectReference *)getWidgetRefWithInt:(jint)idx {
  
#line 2209
  return [((JavaUtilArrayList *) nil_chk(widget_refs_)) getWithInt:idx];
}


#line 2218
- (void)addWidgetRefWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)widgRef {
  
#line 2219
  [((JavaUtilArrayList *) nil_chk(widget_refs_)) addWithId:widgRef];
}


#line 2233
- (ComItextpdfTextPdfPdfDictionary *)getMergedWithInt:(jint)idx {
  
#line 2234
  return [((JavaUtilArrayList *) nil_chk(merged_)) getWithInt:idx];
}


#line 2243
- (void)addMergedWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)mergeDict {
  
#line 2244
  [((JavaUtilArrayList *) nil_chk(merged_)) addWithId:mergeDict];
}


#line 2255
- (JavaLangInteger *)getPageWithInt:(jint)idx {
  
#line 2256
  return [((JavaUtilArrayList *) nil_chk(page_)) getWithInt:idx];
}


#line 2265
- (void)addPageWithInt:(jint)pg {
  
#line 2266
  [((JavaUtilArrayList *) nil_chk(page_)) addWithId:[JavaLangInteger valueOfWithInt:pg]];
}


#line 2275
- (void)forcePageWithInt:(jint)idx
                 withInt:(jint)pg {
  
#line 2276
  (void) [((JavaUtilArrayList *) nil_chk(page_)) setWithInt:idx withId:[JavaLangInteger valueOfWithInt:pg]];
}


#line 2286
- (JavaLangInteger *)getTabOrderWithInt:(jint)idx {
  
#line 2287
  return [((JavaUtilArrayList *) nil_chk(tabOrder_)) getWithInt:idx];
}


#line 2296
- (void)addTabOrderWithInt:(jint)order {
  
#line 2297
  [((JavaUtilArrayList *) nil_chk(tabOrder_)) addWithId:[JavaLangInteger valueOfWithInt:order]];
}

- (instancetype)init {
  if (self = [super init]) {
    values_ =
#line 2089
    [[JavaUtilArrayList alloc] init];
    widgets_ =
#line 2096
    [[JavaUtilArrayList alloc] init];
    widget_refs_ =
#line 2103
    [[JavaUtilArrayList alloc] init];
    merged_ =
#line 2111
    [[JavaUtilArrayList alloc] init];
    page_ =
#line 2119
    [[JavaUtilArrayList alloc] init];
    tabOrder_ =
#line 2126
    [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfAcroFields_Item *)other {
  [super copyAllFieldsTo:other];
  other->merged_ = merged_;
  other->page_ = page_;
  other->tabOrder_ = tabOrder_;
  other->values_ = values_;
  other->widget_refs_ = widget_refs_;
  other->widgets_ = widgets_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeToAllWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withInt:", "writeToAll", "V", 0x1, NULL },
    { "markUsedWithComItextpdfTextPdfAcroFields:withInt:", "markUsed", "V", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "removeWithInt:", "remove", "V", 0x0, NULL },
    { "getValueWithInt:", "getValue", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "addValueWithComItextpdfTextPdfPdfDictionary:", "addValue", "V", 0x0, NULL },
    { "getWidgetWithInt:", "getWidget", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "addWidgetWithComItextpdfTextPdfPdfDictionary:", "addWidget", "V", 0x0, NULL },
    { "getWidgetRefWithInt:", "getWidgetRef", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "addWidgetRefWithComItextpdfTextPdfPdfIndirectReference:", "addWidgetRef", "V", 0x0, NULL },
    { "getMergedWithInt:", "getMerged", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "addMergedWithComItextpdfTextPdfPdfDictionary:", "addMerged", "V", 0x0, NULL },
    { "getPageWithInt:", "getPage", "Ljava.lang.Integer;", 0x1, NULL },
    { "addPageWithInt:", "addPage", "V", 0x0, NULL },
    { "forcePageWithInt:withInt:", "forcePage", "V", 0x0, NULL },
    { "getTabOrderWithInt:", "getTabOrder", "Ljava.lang.Integer;", 0x1, NULL },
    { "addTabOrderWithInt:", "addTabOrder", "V", 0x0, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "WRITE_MERGED_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_Item_WRITE_MERGED },
    { "WRITE_WIDGET_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_Item_WRITE_WIDGET },
    { "WRITE_VALUE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfAcroFields_Item_WRITE_VALUE },
    { "values_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "widgets_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "widget_refs_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "merged_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "page_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "tabOrder_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfAcroFields_Item = { "Item", "com.itextpdf.text.pdf", "AcroFields", 0x9, 18, methods, 9, fields, 0, NULL};
  return &_ComItextpdfTextPdfAcroFields_Item;
}

@end


#line 2301
@implementation ComItextpdfTextPdfAcroFields_InstHit


#line 2304
- (instancetype)initWithIntArray:(IOSIntArray *)inst {
  if (self = [super init]) {
    
#line 2305
    if (inst == nil) {
      return self;
    }
    
#line 2308
    hits_ = [[ComItextpdfTextPdfIntHashtable alloc] init];
    
#line 2309
    for (jint k = 0; k < ((IOSIntArray *) nil_chk(inst))->size_; ++k) {
      [hits_ putWithInt:IOSIntArray_Get(inst, k) withInt:1];
    }
  }
  return self;
}


#line 2314
- (jboolean)isHitWithInt:(jint)n {
  
#line 2315
  if (hits_ == nil) {
    return YES;
  }
  return [((ComItextpdfTextPdfIntHashtable *) nil_chk(hits_)) containsKeyWithInt:n];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfAcroFields_InstHit *)other {
  [super copyAllFieldsTo:other];
  other->hits_ = hits_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithIntArray:", "InstHit", NULL, 0x1, NULL },
    { "isHitWithInt:", "isHit", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hits_", NULL, 0x0, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfAcroFields_InstHit = { "InstHit", "com.itextpdf.text.pdf", "AcroFields", 0xa, 2, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfAcroFields_InstHit;
}

@end


#line 2796
@implementation ComItextpdfTextPdfAcroFields_SorterComparator

- (jint)compareWithId:(IOSObjectArray *)o1
               withId:(IOSObjectArray *)o2 {
  
#line 2799
  jint n1 = IOSIntArray_Get(nil_chk(((IOSIntArray *) check_class_cast(IOSObjectArray_Get(nil_chk(o1), 1), [IOSIntArray class]))), 0);
  jint n2 = IOSIntArray_Get(nil_chk(((IOSIntArray *) check_class_cast(IOSObjectArray_Get(nil_chk(o2), 1), [IOSIntArray class]))), 0);
  return n1 - n2;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithNSObjectArray:withNSObjectArray:", "compare", "I", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfAcroFields_SorterComparator = { "SorterComparator", "com.itextpdf.text.pdf", "AcroFields", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfAcroFields_SorterComparator;
}

@end


#line 3023
@implementation ComItextpdfTextPdfAcroFields_FieldPosition

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfAcroFields_FieldPosition *)other {
  [super copyAllFieldsTo:other];
  other->page_ = page_;
  other->position_ = position_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "page_", NULL, 0x1, "I", NULL,  },
    { "position_", NULL, 0x1, "Lcom.itextpdf.text.Rectangle;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfAcroFields_FieldPosition = { "FieldPosition", "com.itextpdf.text.pdf", "AcroFields", 0x9, 1, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfAcroFields_FieldPosition;
}

@end
