//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CJKFont.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CJKFont.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/io/StreamUtil.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/CJKFont.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapCache.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapCidByte.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapCidUni.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapUniCid.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Enumeration.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"

BOOL ComItextpdfTextPdfCJKFont_initialized = NO;


#line 74
@implementation ComItextpdfTextPdfCJKFont

NSString * ComItextpdfTextPdfCJKFont_CJK_ENCODING_ = 
#line 77
@"UnicodeBigUnmarked";
JavaUtilProperties * ComItextpdfTextPdfCJKFont_cjkFonts_;
JavaUtilProperties * ComItextpdfTextPdfCJKFont_cjkEncodings_;
JavaUtilHashMap * ComItextpdfTextPdfCJKFont_allFonts_;
jboolean ComItextpdfTextPdfCJKFont_propertiesLoaded_ = 
#line 86
NO;
NSString * ComItextpdfTextPdfCJKFont_RESOURCE_PATH_CMAP_ = @"com/itextpdf/text/pdf/fonts/cmaps/";
JavaUtilHashMap * ComItextpdfTextPdfCJKFont_registryNames_;


#line 110
+ (void)loadProperties {
  
#line 111
  if (ComItextpdfTextPdfCJKFont_propertiesLoaded_)
#line 112
  return;
  @synchronized(ComItextpdfTextPdfCJKFont_allFonts_) {
    if (ComItextpdfTextPdfCJKFont_propertiesLoaded_)
#line 115
    return;
    @try {
      [ComItextpdfTextPdfCJKFont loadRegistry];
      for (NSString * __strong font in nil_chk([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_registryNames_)) getWithId:@"fonts"])) {
        (void) [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_allFonts_)) putWithId:font withId:[ComItextpdfTextPdfCJKFont readFontPropertiesWithNSString:font]];
      }
    }
    @catch (JavaLangException *e) {
    }
    ComItextpdfTextPdfCJKFont_propertiesLoaded_ = YES;
  }
}


#line 128
+ (void)loadRegistry {
  
#line 129
  JavaIoInputStream *is = [ComItextpdfTextIoStreamUtil getResourceStreamWithNSString:JreStrcat("$$", ComItextpdfTextPdfCJKFont_RESOURCE_PATH_CMAP_, @"cjk_registry.properties")];
  JavaUtilProperties *p = [[JavaUtilProperties alloc] init];
  [p load__WithJavaIoInputStream:is];
  [((JavaIoInputStream *) nil_chk(is)) close];
  for (id __strong key in nil_chk([p keySet])) {
    NSString *value = [p getPropertyWithNSString:(NSString *) check_class_cast(key, [NSString class])];
    IOSObjectArray *sp = [((NSString *) nil_chk(value)) split:@" "];
    id<JavaUtilSet> hs = [[JavaUtilHashSet alloc] init];
    {
      IOSObjectArray *a__ =
#line 137
      sp;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *s = *b__++;
        
#line 138
        if (((jint) [((NSString *) nil_chk(s)) length]) > 0)
#line 139
        [hs addWithId:s];
      }
    }
    
#line 141
    (void) [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_registryNames_)) putWithId:(NSString *) check_class_cast(key, [NSString class]) withId:hs];
  }
}


#line 151
- (instancetype)initWithNSString:(NSString *)fontName
                    withNSString:(NSString *)enc
                     withBoolean:(jboolean)emb {
  if (self = [super init]) {
    style_ =
#line 99
    @"";
    cidDirect_ =
#line 103
    NO;
    
#line 152
    [ComItextpdfTextPdfCJKFont loadProperties];
    
#line 153
    fontType_ = ComItextpdfTextPdfBaseFont_FONT_TYPE_CJK;
    
#line 154
    NSString *nameBase = [ComItextpdfTextPdfBaseFont getBaseNameWithNSString:fontName];
    
#line 155
    if (![ComItextpdfTextPdfCJKFont isCJKFontWithNSString:nameBase withNSString:enc])
#line 156
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"font.1.with.2.encoding.is.not.a.cjk.font" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fontName, enc } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
    
#line 157
    if (((jint) [((NSString *) nil_chk(nameBase)) length]) < ((jint) [((NSString *) nil_chk(fontName)) length])) {
      style_ = [fontName substring:((jint) [nameBase length])];
      fontName = nameBase;
    }
    
#line 161
    self->fontName_ = fontName;
    
#line 162
    encoding_ = ComItextpdfTextPdfCJKFont_CJK_ENCODING_;
    
#line 163
    vertical_ = [((NSString *) nil_chk(enc)) hasSuffix:@"V"];
    
#line 164
    CMap_ = enc;
    
#line 165
    if ([enc isEqual:ComItextpdfTextPdfBaseFont_get_IDENTITY_H_()] || [enc isEqual:ComItextpdfTextPdfBaseFont_get_IDENTITY_V_()])
#line 166
    cidDirect_ = YES;
    
#line 167
    [self loadCMaps];
  }
  return self;
}


#line 170
- (NSString *)getUniMap {
  
#line 171
  return uniMap_;
}


#line 174
- (void)loadCMaps {
  
#line 175
  @try {
    fontDesc_ = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_allFonts_)) getWithId:fontName_];
    hMetrics_ = (ComItextpdfTextPdfIntHashtable *) check_class_cast([((JavaUtilHashMap *) nil_chk(fontDesc_)) getWithId:@"W"], [ComItextpdfTextPdfIntHashtable class]);
    vMetrics_ = (ComItextpdfTextPdfIntHashtable *) check_class_cast([fontDesc_ getWithId:@"W2"], [ComItextpdfTextPdfIntHashtable class]);
    NSString *registry = (NSString *) check_class_cast([fontDesc_ getWithId:@"Registry"], [NSString class]);
    uniMap_ = @"";
    for (NSString * __strong name in nil_chk([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_registryNames_)) getWithId:JreStrcat("$$", registry, @"_Uni")])) {
      uniMap_ = name;
      if ([((NSString *) nil_chk(name)) hasSuffix:@"V"] && vertical_)
#line 184
      break;
      if (![name hasSuffix:@"V"] && !vertical_)
#line 186
      break;
    }
    if (cidDirect_) {
      cidUni_ = [ComItextpdfTextPdfFontsCmapsCMapCache getCachedCMapCidUniWithNSString:uniMap_];
    }
    else {
      uniCid_ = [ComItextpdfTextPdfFontsCmapsCMapCache getCachedCMapUniCidWithNSString:uniMap_];
      cidByte_ = [ComItextpdfTextPdfFontsCmapsCMapCache getCachedCMapCidByteWithNSString:CMap_];
    }
  }
  @catch (JavaLangException *ex) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithJavaLangException:ex];
  }
}


#line 206
+ (NSString *)GetCompatibleFontWithNSString:(NSString *)enc {
  
#line 207
  [ComItextpdfTextPdfCJKFont loadProperties];
  NSString *registry = nil;
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_registryNames_)) entrySet])) {
    if ([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getValue])) containsWithId:enc]) {
      registry = [e getKey];
      break;
    }
  }
  if (registry == nil)
#line 216
  return nil;
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_allFonts_)) entrySet])) {
    if ([((NSString *) nil_chk(registry)) isEqual:[((JavaUtilHashMap *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getValue])) getWithId:@"Registry"]])
#line 219
    return [e getKey];
  }
  return nil;
}


#line 229
+ (jboolean)isCJKFontWithNSString:(NSString *)fontName
                     withNSString:(NSString *)enc {
  
#line 230
  [ComItextpdfTextPdfCJKFont loadProperties];
  if (![((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_registryNames_)) containsKeyWithId:@"fonts"])
#line 232
  return NO;
  if (![((id<JavaUtilSet>) nil_chk([ComItextpdfTextPdfCJKFont_registryNames_ getWithId:@"fonts"])) containsWithId:fontName])
#line 234
  return NO;
  if ([((NSString *) nil_chk(enc)) isEqual:ComItextpdfTextPdfBaseFont_get_IDENTITY_H_()] || [enc isEqual:ComItextpdfTextPdfBaseFont_get_IDENTITY_V_()])
#line 236
  return YES;
  NSString *registry = (NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfCJKFont_allFonts_)) getWithId:fontName])) getWithId:@"Registry"], [NSString class]);
  id<JavaUtilSet> encodings = [ComItextpdfTextPdfCJKFont_registryNames_ getWithId:registry];
  return encodings != nil && [encodings containsWithId:enc];
}

- (jint)getWidthWithInt:(jint)char1 {
  
#line 249
  jint c = char1;
  if (!cidDirect_)
#line 251
  c = [((ComItextpdfTextPdfFontsCmapsCMapUniCid *) nil_chk(uniCid_)) lookupWithInt:char1];
  jint v;
  if (vertical_)
#line 254
  v = [((ComItextpdfTextPdfIntHashtable *) nil_chk(vMetrics_)) getWithInt:c];
  else
#line 256
  v = [((ComItextpdfTextPdfIntHashtable *) nil_chk(hMetrics_)) getWithInt:c];
  if (v > 0)
#line 258
  return v;
  else
#line 260
  return 1000;
}


#line 264
- (jint)getWidthWithNSString:(NSString *)text {
  
#line 265
  jint total = 0;
  if (cidDirect_) {
    for (jint k = 0; k < ((jint) [((NSString *) nil_chk(text)) length]); ++k) {
      total += [self getWidthWithInt:[text charAtWithInt:k]];
    }
  }
  else {
    for (jint k = 0; k < ((jint) [((NSString *) nil_chk(text)) length]); ++k) {
      jint val;
      if ([ComItextpdfTextUtilities isSurrogatePairWithNSString:text withInt:k]) {
        val = [ComItextpdfTextUtilities convertToUtf32WithNSString:text withInt:k];
        k++;
      }
      else {
        val = [text charAtWithInt:k];
      }
      total += [self getWidthWithInt:val];
    }
  }
  return total;
}


#line 288
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  return 0;
}

- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  
#line 294
  return 0;
}


#line 297
- (ComItextpdfTextPdfPdfDictionary *)getFontDescriptor {
  
#line 298
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_()];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ASCENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk(fontDesc_)) getWithId:@"Ascent"], [NSString class])]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CAPHEIGHT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:(NSString *) check_class_cast([fontDesc_ getWithId:@"CapHeight"], [NSString class])]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:(NSString *) check_class_cast([fontDesc_ getWithId:@"Descent"], [NSString class])]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FLAGS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:(NSString *) check_class_cast([fontDesc_ getWithId:@"Flags"], [NSString class])]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTBBOX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:(NSString *) check_class_cast([fontDesc_ getWithId:@"FontBBox"], [NSString class])]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTNAME_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$", fontName_, style_)]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ITALICANGLE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:(NSString *) check_class_cast([fontDesc_ getWithId:@"ItalicAngle"], [NSString class])]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STEMV_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:(NSString *) check_class_cast([fontDesc_ getWithId:@"StemV"], [NSString class])]];
  ComItextpdfTextPdfPdfDictionary *pdic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [pdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PANOSE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:(NSString *) check_class_cast([fontDesc_ getWithId:@"Panose"], [NSString class]) withNSString:nil]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STYLE_() withComItextpdfTextPdfPdfObject:pdic];
  return dic;
}


#line 313
- (ComItextpdfTextPdfPdfDictionary *)getCIDFontWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)fontDescriptor
                                                       withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)cjkTag {
  
#line 314
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CIDFONTTYPE0_()];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$", fontName_, style_)]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_() withComItextpdfTextPdfPdfObject:fontDescriptor];
  IOSIntArray *keys = [((ComItextpdfTextPdfIntHashtable *) nil_chk(cjkTag)) toOrderedKeys];
  NSString *w = [ComItextpdfTextPdfCJKFont convertToHCIDMetricsWithIntArray:keys withComItextpdfTextPdfIntHashtable:hMetrics_];
  if (w != nil)
#line 321
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_W_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:w]];
  if (vertical_) {
    w = [ComItextpdfTextPdfCJKFont convertToVCIDMetricsWithIntArray:keys withComItextpdfTextPdfIntHashtable:vMetrics_ withComItextpdfTextPdfIntHashtable:hMetrics_];
    if (w != nil)
#line 325
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_W2_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:w]];
  }
  else
#line 328
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DW_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:1000]];
  ComItextpdfTextPdfPdfDictionary *cdic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  if (cidDirect_) {
    [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REGISTRY_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:[((ComItextpdfTextPdfFontsCmapsCMapCidUni *) nil_chk(cidUni_)) getRegistry] withNSString:nil]];
    [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDERING_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:[cidUni_ getOrdering] withNSString:nil]];
    [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUPPLEMENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[cidUni_ getSupplement]]];
  }
  else {
    [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REGISTRY_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:[((ComItextpdfTextPdfFontsCmapsCMapCidByte *) nil_chk(cidByte_)) getRegistry] withNSString:nil]];
    [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDERING_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:[cidByte_ getOrdering] withNSString:nil]];
    [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUPPLEMENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[cidByte_ getSupplement]]];
  }
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CIDSYSTEMINFO_() withComItextpdfTextPdfPdfObject:cdic];
  return dic;
}


#line 344
- (ComItextpdfTextPdfPdfDictionary *)getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)CIDFont {
  
#line 345
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TYPE0_()];
  NSString *name = fontName_;
  if (((jint) [((NSString *) nil_chk(style_)) length]) > 0)
#line 349
  name = JreStrcat("$$", name, JreStrcat("C$", '-', [style_ substring:1]));
  name = JreStrcat("$$", name, JreStrcat("C$", '-', CMap_));
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:name]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:CMap_]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENDANTFONTS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:CIDFont]];
  return dic;
}


#line 358
- (void)writeFontWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                               withNSObjectArray:(IOSObjectArray *)params {
  
#line 359
  ComItextpdfTextPdfIntHashtable *cjkTag = (ComItextpdfTextPdfIntHashtable *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [ComItextpdfTextPdfIntHashtable class]);
  ComItextpdfTextPdfPdfIndirectReference *ind_font = nil;
  ComItextpdfTextPdfPdfObject *pobj = nil;
  ComItextpdfTextPdfPdfIndirectObject *obj = nil;
  pobj = [self getFontDescriptor];
  if (pobj != nil) {
    obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:pobj];
    ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  pobj = [self getCIDFontWithComItextpdfTextPdfPdfIndirectReference:ind_font withComItextpdfTextPdfIntHashtable:cjkTag];
  if (pobj != nil) {
    obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:pobj];
    ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  pobj = [self getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:ind_font];
  (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:pobj withComItextpdfTextPdfPdfIndirectReference:ref];
}


#line 384
- (ComItextpdfTextPdfPdfStream *)getFullFontStream {
  
#line 385
  return nil;
}


#line 388
- (jfloat)getDescNumberWithNSString:(NSString *)name {
  
#line 389
  return [JavaLangInteger parseIntWithNSString:(NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk(fontDesc_)) getWithId:name], [NSString class])];
}


#line 392
- (jfloat)getBBoxWithInt:(jint)idx {
  
#line 393
  NSString *s = (NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk(fontDesc_)) getWithId:@"FontBBox"], [NSString class]);
  JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:s withNSString:@" []\x0d\n\t\x0c"];
  NSString *ret = [tk nextToken];
  for (jint k = 0; k < idx; ++k)
#line 397
  ret = [tk nextToken];
  return [JavaLangInteger parseIntWithNSString:ret];
}


#line 409
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  
#line 410
  switch (key) {
    case ComItextpdfTextPdfBaseFont_AWT_ASCENT:
    case ComItextpdfTextPdfBaseFont_ASCENT:
    return [self getDescNumberWithNSString:@"Ascent"] * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_CAPHEIGHT:
    return [self getDescNumberWithNSString:@"CapHeight"] * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_AWT_DESCENT:
    case ComItextpdfTextPdfBaseFont_DESCENT:
    return [self getDescNumberWithNSString:@"Descent"] * fontSize / 1000;
    case ComItextpdfTextPdfBaseFont_ITALICANGLE:
    return [self getDescNumberWithNSString:@"ItalicAngle"];
    case ComItextpdfTextPdfBaseFont_BBOXLLX:
    return fontSize * [self getBBoxWithInt:0] / 1000;
    case ComItextpdfTextPdfBaseFont_BBOXLLY:
    return fontSize * [self getBBoxWithInt:1] / 1000;
    case ComItextpdfTextPdfBaseFont_BBOXURX:
    return fontSize * [self getBBoxWithInt:2] / 1000;
    case ComItextpdfTextPdfBaseFont_BBOXURY:
    return fontSize * [self getBBoxWithInt:3] / 1000;
    case ComItextpdfTextPdfBaseFont_AWT_LEADING:
    return 0;
    case ComItextpdfTextPdfBaseFont_AWT_MAXADVANCE:
    return fontSize * ([self getBBoxWithInt:2] - [self getBBoxWithInt:0]) / 1000;
  }
  return 0;
}


#line 438
- (NSString *)getPostscriptFontName {
  
#line 439
  return fontName_;
}


#line 451
- (IOSObjectArray *)getFullFontName {
  
#line 452
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"", @"", @"", fontName_ } count:4 type:[IOSClass classWithClass:[NSString class]]] } count:1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
}


#line 464
- (IOSObjectArray *)getAllNameEntries {
  
#line 465
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"4", @"", @"", @"", fontName_ } count:5 type:[IOSClass classWithClass:[NSString class]]] } count:1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
}


#line 477
- (IOSObjectArray *)getFamilyFontName {
  
#line 478
  return [self getFullFontName];
}


#line 497
+ (ComItextpdfTextPdfIntHashtable *)createMetricWithNSString:(NSString *)s {
  
#line 498
  ComItextpdfTextPdfIntHashtable *h = [[ComItextpdfTextPdfIntHashtable alloc] init];
  JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:s];
  while ([tk hasMoreTokens]) {
    jint n1 = [JavaLangInteger parseIntWithNSString:[tk nextToken]];
    [h putWithInt:n1 withInt:[JavaLangInteger parseIntWithNSString:[tk nextToken]]];
  }
  return h;
}


#line 507
+ (NSString *)convertToHCIDMetricsWithIntArray:(IOSIntArray *)keys
            withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)h {
  
#line 508
  if (((IOSIntArray *) nil_chk(keys))->size_ == 0)
#line 509
  return nil;
  jint lastCid = 0;
  jint lastValue = 0;
  jint start;
  for (start = 0; start < keys->size_; ++start) {
    lastCid = IOSIntArray_Get(keys, start);
    lastValue = [((ComItextpdfTextPdfIntHashtable *) nil_chk(h)) getWithInt:lastCid];
    if (lastValue != 0) {
      ++start;
      break;
    }
  }
  if (lastValue == 0)
#line 522
  return nil;
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  (void) [buf appendWithChar:'['];
  (void) [buf appendWithInt:lastCid];
  jint state = ComItextpdfTextPdfCJKFont_FIRST;
  for (jint k = start; k < keys->size_; ++k) {
    jint cid = IOSIntArray_Get(keys, k);
    jint value = [((ComItextpdfTextPdfIntHashtable *) nil_chk(h)) getWithInt:cid];
    if (value == 0)
#line 531
    continue;
    switch (state) {
      case ComItextpdfTextPdfCJKFont_FIRST:
      {
        
#line 534
        if (cid == lastCid + 1 && value == lastValue) {
          state = ComItextpdfTextPdfCJKFont_SERIAL;
        }
        else if (cid == lastCid + 1) {
          state = ComItextpdfTextPdfCJKFont_BRACKET;
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'['])) appendWithInt:lastValue];
        }
        else {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'['])) appendWithInt:lastValue])) appendWithChar:']'])) appendWithInt:cid];
        }
        break;
      }
      case ComItextpdfTextPdfCJKFont_BRACKET:
      {
        
#line 547
        if (cid == lastCid + 1 && value == lastValue) {
          state = ComItextpdfTextPdfCJKFont_SERIAL;
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:']'])) appendWithInt:lastCid];
        }
        else if (cid == lastCid + 1) {
          (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastValue];
        }
        else {
          state = ComItextpdfTextPdfCJKFont_FIRST;
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastValue])) appendWithChar:']'])) appendWithInt:cid];
        }
        break;
      }
      case ComItextpdfTextPdfCJKFont_SERIAL:
      {
        
#line 561
        if (cid != lastCid + 1 || value != lastValue) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:lastValue])) appendWithChar:' '])) appendWithInt:cid];
          state = ComItextpdfTextPdfCJKFont_FIRST;
        }
        break;
      }
    }
    lastValue = value;
    lastCid = cid;
  }
  switch (state) {
    case ComItextpdfTextPdfCJKFont_FIRST:
    {
      
#line 573
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:'['])) appendWithInt:lastValue])) appendWithNSString:@"]]"];
      break;
    }
    case ComItextpdfTextPdfCJKFont_BRACKET:
    {
      
#line 577
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastValue])) appendWithNSString:@"]]"];
      break;
    }
    case ComItextpdfTextPdfCJKFont_SERIAL:
    {
      
#line 581
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:lastValue])) appendWithChar:']'];
      break;
    }
  }
  return [buf description];
}


#line 588
+ (NSString *)convertToVCIDMetricsWithIntArray:(IOSIntArray *)keys
            withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)v
            withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)h {
  
#line 589
  if (((IOSIntArray *) nil_chk(keys))->size_ == 0)
#line 590
  return nil;
  jint lastCid = 0;
  jint lastValue = 0;
  jint lastHValue = 0;
  jint start;
  for (start = 0; start < keys->size_; ++start) {
    lastCid = IOSIntArray_Get(keys, start);
    lastValue = [((ComItextpdfTextPdfIntHashtable *) nil_chk(v)) getWithInt:lastCid];
    if (lastValue != 0) {
      ++start;
      break;
    }
    else
#line 603
    lastHValue = [((ComItextpdfTextPdfIntHashtable *) nil_chk(h)) getWithInt:lastCid];
  }
  if (lastValue == 0)
#line 606
  return nil;
  if (lastHValue == 0)
#line 608
  lastHValue = 1000;
  JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
  (void) [buf appendWithChar:'['];
  (void) [buf appendWithInt:lastCid];
  jint state = ComItextpdfTextPdfCJKFont_FIRST;
  for (jint k = start; k < keys->size_; ++k) {
    jint cid = IOSIntArray_Get(keys, k);
    jint value = [((ComItextpdfTextPdfIntHashtable *) nil_chk(v)) getWithInt:cid];
    if (value == 0)
#line 617
    continue;
    jint hValue = [((ComItextpdfTextPdfIntHashtable *) nil_chk(h)) getWithInt:lastCid];
    if (hValue == 0)
#line 620
    hValue = 1000;
    switch (state) {
      case ComItextpdfTextPdfCJKFont_FIRST:
      {
        
#line 623
        if (cid == lastCid + 1 && value == lastValue && hValue == lastHValue) {
          state = ComItextpdfTextPdfCJKFont_SERIAL;
        }
        else {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:-lastValue])) appendWithChar:' '])) appendWithInt:lastHValue / 2])) appendWithChar:' '])) appendWithInt:ComItextpdfTextPdfCJKFont_V1Y])) appendWithChar:' '])) appendWithInt:cid];
        }
        break;
      }
      case ComItextpdfTextPdfCJKFont_SERIAL:
      {
        
#line 632
        if (cid != lastCid + 1 || value != lastValue || hValue != lastHValue) {
          (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:-lastValue])) appendWithChar:' '])) appendWithInt:lastHValue / 2])) appendWithChar:' '])) appendWithInt:ComItextpdfTextPdfCJKFont_V1Y])) appendWithChar:' '])) appendWithInt:cid];
          state = ComItextpdfTextPdfCJKFont_FIRST;
        }
        break;
      }
    }
    lastValue = value;
    lastCid = cid;
    lastHValue = hValue;
  }
  (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:' '])) appendWithInt:lastCid])) appendWithChar:' '])) appendWithInt:-lastValue])) appendWithChar:' '])) appendWithInt:lastHValue / 2])) appendWithChar:' '])) appendWithInt:ComItextpdfTextPdfCJKFont_V1Y])) appendWithNSString:@" ]"];
  return [buf description];
}


#line 647
+ (JavaUtilHashMap *)readFontPropertiesWithNSString:(NSString *)name {
  
#line 648
  name = JreStrcat("$$", name, @".properties");
  JavaIoInputStream *is = [ComItextpdfTextIoStreamUtil getResourceStreamWithNSString:JreStrcat("$$", ComItextpdfTextPdfCJKFont_RESOURCE_PATH_CMAP_, name)];
  JavaUtilProperties *p = [[JavaUtilProperties alloc] init];
  [p load__WithJavaIoInputStream:is];
  [((JavaIoInputStream *) nil_chk(is)) close];
  ComItextpdfTextPdfIntHashtable *W = [ComItextpdfTextPdfCJKFont createMetricWithNSString:[p getPropertyWithNSString:@"W"]];
  (void) [p removeWithId:@"W"];
  ComItextpdfTextPdfIntHashtable *W2 = [ComItextpdfTextPdfCJKFont createMetricWithNSString:[p getPropertyWithNSString:@"W2"]];
  (void) [p removeWithId:@"W2"];
  JavaUtilHashMap *map = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilEnumeration> e = [p keys]; [((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]; ) {
    id obj = [e nextElement];
    (void) [map putWithId:(NSString *) check_class_cast(obj, [NSString class]) withId:[p getPropertyWithNSString:(NSString *) check_class_cast(obj, [NSString class])]];
  }
  (void) [map putWithId:@"W" withId:W];
  (void) [map putWithId:@"W2" withId:W2];
  return map;
}


#line 668
- (jint)getUnicodeEquivalentWithInt:(jint)c {
  if (cidDirect_) {
    if (c == ComItextpdfTextPdfBaseFont_CID_NEWLINE)
#line 671
    return 0x000a;
    return [((ComItextpdfTextPdfFontsCmapsCMapCidUni *) nil_chk(cidUni_)) lookupWithInt:c];
  }
  return c;
}

- (jint)getCidCodeWithInt:(jint)c {
  
#line 679
  if (cidDirect_)
#line 680
  return c;
  return [((ComItextpdfTextPdfFontsCmapsCMapUniCid *) nil_chk(uniCid_)) lookupWithInt:c];
}


#line 688
- (jboolean)hasKernPairs {
  
#line 689
  return NO;
}


#line 699
- (jboolean)charExistsWithInt:(jint)c {
  
#line 700
  if (cidDirect_)
#line 701
  return YES;
  return ((IOSByteArray *) nil_chk([((ComItextpdfTextPdfFontsCmapsCMapCidByte *) nil_chk(cidByte_)) lookupWithInt:[((ComItextpdfTextPdfFontsCmapsCMapUniCid *) nil_chk(uniCid_)) lookupWithInt:c]]))->size_ > 0;
}


#line 713
- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance {
  
#line 714
  return NO;
}


#line 723
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
  
#line 724
  fontName_ = name;
}


#line 728
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  return NO;
}


#line 733
- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  return nil;
}


#line 738
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  
#line 739
  return nil;
}


#line 749
- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  
#line 750
  if (cidDirect_)
#line 751
  return [super convertToBytesWithNSString:text];
  @try {
    if (((jint) [((NSString *) nil_chk(text)) length]) == 1)
#line 754
    return [self convertToBytesWithInt:(jint) [text charAtWithInt:0]];
    JavaIoByteArrayOutputStream *bout = [[JavaIoByteArrayOutputStream alloc] init];
    for (jint k = 0; k < ((jint) [text length]); ++k) {
      jint val;
      if ([ComItextpdfTextUtilities isSurrogatePairWithNSString:text withInt:k]) {
        val = [ComItextpdfTextUtilities convertToUtf32WithNSString:text withInt:k];
        k++;
      }
      else {
        val = [text charAtWithInt:k];
      }
      [bout writeWithByteArray:[self convertToBytesWithInt:val]];
    }
    return [bout toByteArray];
  }
  @catch (JavaLangException *ex) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ex];
  }
}


#line 781
- (IOSByteArray *)convertToBytesWithInt:(jint)char1 {
  
#line 782
  if (cidDirect_)
#line 783
  return [super convertToBytesWithInt:char1];
  return [((ComItextpdfTextPdfFontsCmapsCMapCidByte *) nil_chk(cidByte_)) lookupWithInt:[((ComItextpdfTextPdfFontsCmapsCMapUniCid *) nil_chk(uniCid_)) lookupWithInt:char1]];
}


#line 787
- (jboolean)isIdentity {
  
#line 788
  return cidDirect_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCJKFont *)other {
  [super copyAllFieldsTo:other];
  other->CMap_ = CMap_;
  other->cidByte_ = cidByte_;
  other->cidDirect_ = cidDirect_;
  other->cidUni_ = cidUni_;
  other->fontDesc_ = fontDesc_;
  other->fontName_ = fontName_;
  other->hMetrics_ = hMetrics_;
  other->style_ = style_;
  other->uniCid_ = uniCid_;
  other->uniMap_ = uniMap_;
  other->vMetrics_ = vMetrics_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfCJKFont class]) {
    ComItextpdfTextPdfCJKFont_cjkFonts_ =
#line 83
    [[JavaUtilProperties alloc] init];
    ComItextpdfTextPdfCJKFont_cjkEncodings_ =
#line 84
    [[JavaUtilProperties alloc] init];
    ComItextpdfTextPdfCJKFont_allFonts_ =
#line 85
    [[JavaUtilHashMap alloc] init];
    ComItextpdfTextPdfCJKFont_registryNames_ =
#line 90
    [[JavaUtilHashMap alloc] init];
    ComItextpdfTextPdfCJKFont_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "loadProperties", NULL, "V", 0xa, NULL },
    { "loadRegistry", NULL, "V", 0xa, "Ljava.io.IOException;" },
    { "initWithNSString:withNSString:withBoolean:", "CJKFont", NULL, 0x0, "Lcom.itextpdf.text.DocumentException;" },
    { "getUniMap", NULL, "Ljava.lang.String;", 0x0, NULL },
    { "loadCMaps", NULL, "V", 0x2, "Lcom.itextpdf.text.DocumentException;" },
    { "GetCompatibleFontWithNSString:", "GetCompatibleFont", "Ljava.lang.String;", 0x9, NULL },
    { "isCJKFontWithNSString:withNSString:", "isCJKFont", "Z", 0x9, NULL },
    { "getWidthWithInt:", "getWidth", "I", 0x1, NULL },
    { "getWidthWithNSString:", "getWidth", "I", 0x1, NULL },
    { "getRawWidthWithInt:withNSString:", "getRawWidth", "I", 0x0, NULL },
    { "getKerningWithInt:withInt:", "getKerning", "I", 0x1, NULL },
    { "getFontDescriptor", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x2, NULL },
    { "getCIDFontWithComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfIntHashtable:", "getCIDFont", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x2, NULL },
    { "getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:", "getFontBaseType", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x2, NULL },
    { "writeFontWithComItextpdfTextPdfPdfWriter:withComItextpdfTextPdfPdfIndirectReference:withNSObjectArray:", "writeFont", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getFullFontStream", NULL, "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, NULL },
    { "getDescNumberWithNSString:", "getDescNumber", "F", 0x2, NULL },
    { "getBBoxWithInt:", "getBBox", "F", 0x2, NULL },
    { "getFontDescriptorWithInt:withFloat:", "getFontDescriptor", "F", 0x1, NULL },
    { "getPostscriptFontName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getFullFontName", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getAllNameEntries", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getFamilyFontName", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "createMetricWithNSString:", "createMetric", "Lcom.itextpdf.text.pdf.IntHashtable;", 0x8, NULL },
    { "convertToHCIDMetricsWithIntArray:withComItextpdfTextPdfIntHashtable:", "convertToHCIDMetrics", "Ljava.lang.String;", 0x8, NULL },
    { "convertToVCIDMetricsWithIntArray:withComItextpdfTextPdfIntHashtable:withComItextpdfTextPdfIntHashtable:", "convertToVCIDMetrics", "Ljava.lang.String;", 0x8, NULL },
    { "readFontPropertiesWithNSString:", "readFontProperties", "Ljava.util.HashMap;", 0xa, "Ljava.io.IOException;" },
    { "getUnicodeEquivalentWithInt:", "getUnicodeEquivalent", "I", 0x1, NULL },
    { "getCidCodeWithInt:", "getCidCode", "I", 0x1, NULL },
    { "hasKernPairs", NULL, "Z", 0x1, NULL },
    { "charExistsWithInt:", "charExists", "Z", 0x1, NULL },
    { "setCharAdvanceWithInt:withInt:", "setCharAdvance", "Z", 0x1, NULL },
    { "setPostscriptFontNameWithNSString:", "setPostscriptFontName", "V", 0x1, NULL },
    { "setKerningWithInt:withInt:withInt:", "setKerning", "Z", 0x1, NULL },
    { "getCharBBoxWithInt:", "getCharBBox", "[I", 0x1, NULL },
    { "getRawCharBBoxWithInt:withNSString:", "getRawCharBBox", "[I", 0x4, NULL },
    { "convertToBytesWithNSString:", "convertToBytes", "[B", 0x1, NULL },
    { "convertToBytesWithInt:", "convertToBytes", "[B", 0x0, NULL },
    { "isIdentity", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CJK_ENCODING_", NULL, 0x18, "Ljava.lang.String;", &ComItextpdfTextPdfCJKFont_CJK_ENCODING_,  },
    { "FIRST_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCJKFont_FIRST },
    { "BRACKET_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCJKFont_BRACKET },
    { "SERIAL_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCJKFont_SERIAL },
    { "V1Y_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCJKFont_V1Y },
    { "cjkFonts_", NULL, 0x8, "Ljava.util.Properties;", &ComItextpdfTextPdfCJKFont_cjkFonts_,  },
    { "cjkEncodings_", NULL, 0x8, "Ljava.util.Properties;", &ComItextpdfTextPdfCJKFont_cjkEncodings_,  },
    { "allFonts_", NULL, 0x1a, "Ljava.util.HashMap;", &ComItextpdfTextPdfCJKFont_allFonts_,  },
    { "propertiesLoaded_", NULL, 0xa, "Z", &ComItextpdfTextPdfCJKFont_propertiesLoaded_,  },
    { "RESOURCE_PATH_CMAP_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCJKFont_RESOURCE_PATH_CMAP_,  },
    { "registryNames_", NULL, 0x1a, "Ljava.util.HashMap;", &ComItextpdfTextPdfCJKFont_registryNames_,  },
    { "cidByte_", NULL, 0x2, "Lcom.itextpdf.text.pdf.fonts.cmaps.CMapCidByte;", NULL,  },
    { "uniCid_", NULL, 0x2, "Lcom.itextpdf.text.pdf.fonts.cmaps.CMapUniCid;", NULL,  },
    { "cidUni_", NULL, 0x2, "Lcom.itextpdf.text.pdf.fonts.cmaps.CMapCidUni;", NULL,  },
    { "uniMap_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "fontName_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "style_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "CMap_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "cidDirect_", NULL, 0x2, "Z", NULL,  },
    { "vMetrics_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "hMetrics_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "fontDesc_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCJKFont = { "CJKFont", "com.itextpdf.text.pdf", NULL, 0x0, 39, methods, 22, fields, 0, NULL};
  return &_ComItextpdfTextPdfCJKFont;
}

@end
