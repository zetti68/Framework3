//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfStructureTreeRoot.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfStructureTreeRoot.java"

#include "IOSClass.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumberTree.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfStructureElement.h"
#include "com/itextpdf/text/pdf/PdfStructureTreeRoot.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 58
@implementation ComItextpdfTextPdfPdfStructureTreeRoot


#line 72
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self =
#line 73
  [super initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTTREEROOT_()]) {
    parentTree_ =
#line 60
    [[JavaUtilHashMap alloc] init];
    classMap_ =
#line 62
    nil;
    classes_ =
#line 63
    nil;
    numTree_ =
#line 64
    nil;
    
#line 74
    self->writer_ = writer;
    
#line 75
    reference_ = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getPdfIndirectReference];
  }
  return self;
}


#line 78
- (void)createNumTree {
  
#line 79
  if (numTree_ != nil) return;
  numTree_ = [[JavaUtilHashMap alloc] init];
  for (JavaLangInteger * __strong i in nil_chk([((JavaUtilHashMap *) nil_chk(parentTree_)) keySet])) {
    ComItextpdfTextPdfPdfObject *obj = [parentTree_ getWithId:i];
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isArray]) {
      ComItextpdfTextPdfPdfArray *ar = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
      (void) [numTree_ putWithId:i withId:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:ar])) getIndirectReference]];
    }
    else
#line 86
    if ([obj isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]]) {
      (void) [numTree_ putWithId:i withId:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])];
    }
  }
}


#line 98
- (void)mapRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)used
               withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)standard {
  
#line 99
  ComItextpdfTextPdfPdfDictionary *rm = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([self getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROLEMAP_()], [ComItextpdfTextPdfPdfDictionary class]);
  if (rm == nil) {
    rm = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROLEMAP_() withComItextpdfTextPdfPdfObject:rm];
  }
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(rm)) putWithComItextpdfTextPdfPdfName:used withComItextpdfTextPdfPdfObject:standard];
}


#line 107
- (void)mapClassWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)name
              withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 108
  if (classMap_ == nil) {
    classMap_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    classes_ = [[JavaUtilHashMap alloc] init];
  }
  (void) [((JavaUtilHashMap *) nil_chk(classes_)) putWithId:name withId:object];
}


#line 115
- (ComItextpdfTextPdfPdfObject *)getMappedClassWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)name {
  
#line 116
  if (classes_ == nil)
#line 117
  return nil;
  return [((JavaUtilHashMap *) nil_chk(classes_)) getWithId:name];
}


#line 125
- (ComItextpdfTextPdfPdfWriter *)getWriter {
  
#line 126
  return self->writer_;
}


#line 129
- (JavaUtilHashMap *)getNumTree {
  
#line 130
  if (numTree_ == nil) [self createNumTree];
  return numTree_;
}


#line 139
- (ComItextpdfTextPdfPdfIndirectReference *)getReference {
  
#line 140
  return self->reference_;
}


#line 143
- (void)setPageMarkWithInt:(jint)page
withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)struc {
  
#line 144
  JavaLangInteger *i = [JavaLangInteger valueOfWithInt:page];
  ComItextpdfTextPdfPdfArray *ar = (ComItextpdfTextPdfPdfArray *) check_class_cast([((JavaUtilHashMap *) nil_chk(parentTree_)) getWithId:i], [ComItextpdfTextPdfPdfArray class]);
  if (ar == nil) {
    ar = [[ComItextpdfTextPdfPdfArray alloc] init];
    (void) [parentTree_ putWithId:i withId:ar];
  }
  [((ComItextpdfTextPdfPdfArray *) nil_chk(ar)) addWithComItextpdfTextPdfPdfObject:struc];
}


#line 153
- (void)setAnnotationMarkWithInt:(jint)structParentIndex
withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)struc {
  
#line 154
  (void) [((JavaUtilHashMap *) nil_chk(parentTree_)) putWithId:[JavaLangInteger valueOfWithInt:structParentIndex] withId:struc];
}


#line 157
- (void)nodeProcessWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)struc
            withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)reference {
  
#line 158
  ComItextpdfTextPdfPdfObject *obj = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(struc)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
  if (obj != nil && [obj isArray]) {
    ComItextpdfTextPdfPdfArray *ar = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
    for (jint k = 0; k < [ar size]; ++k) {
      ComItextpdfTextPdfPdfDictionary *dictionary = [ar getAsDictWithInt:k];
      if (dictionary == nil)
#line 164
      continue;
      if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_STRUCTELEM_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dictionary)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()]])
#line 166
      continue;
      if ([[ar getPdfObjectWithInt:k] isKindOfClass:[ComItextpdfTextPdfPdfStructureElement class]]) {
        ComItextpdfTextPdfPdfStructureElement *e = (ComItextpdfTextPdfPdfStructureElement *) check_class_cast(dictionary, [ComItextpdfTextPdfPdfStructureElement class]);
        (void) [ar setWithInt:k withComItextpdfTextPdfPdfObject:[e getReference]];
        [self nodeProcessWithComItextpdfTextPdfPdfDictionary:e withComItextpdfTextPdfPdfIndirectReference:[e getReference]];
      }
    }
  }
  if (reference != nil)
#line 175
  (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:struc withComItextpdfTextPdfPdfIndirectReference:reference];
}


#line 178
- (void)buildTree {
  
#line 179
  [self createNumTree];
  ComItextpdfTextPdfPdfDictionary *dicTree = [ComItextpdfTextPdfPdfNumberTree writeTreeWithJavaUtilHashMap:numTree_ withComItextpdfTextPdfPdfWriter:writer_];
  if (dicTree != nil)
#line 182
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENTTREE_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:dicTree])) getIndirectReference]];
  if (classMap_ != nil && ![((JavaUtilHashMap *) nil_chk(classes_)) isEmpty]) {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([classes_ entrySet])) {
      ComItextpdfTextPdfPdfObject *value = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(value)) isDictionary])
#line 187
      [classMap_ putWithComItextpdfTextPdfPdfName:[entry_ getKey] withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:value])) getIndirectReference]];
      else if ([value isArray]) {
        ComItextpdfTextPdfPdfArray *newArray = [[ComItextpdfTextPdfPdfArray alloc] init];
        ComItextpdfTextPdfPdfArray *array = (ComItextpdfTextPdfPdfArray *) check_class_cast(value, [ComItextpdfTextPdfPdfArray class]);
        for (jint i = 0; i < [array size]; ++i) {
          if ([((ComItextpdfTextPdfPdfObject *) nil_chk([array getPdfObjectWithInt:i])) isDictionary])
#line 193
          [newArray addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:[array getAsDictWithInt:i]])) getIndirectReference]];
        }
        [classMap_ putWithComItextpdfTextPdfPdfName:[entry_ getKey] withComItextpdfTextPdfPdfObject:newArray];
      }
    }
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CLASSMAP_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:classMap_])) getIndirectReference]];
  }
  [self nodeProcessWithComItextpdfTextPdfPdfDictionary:self withComItextpdfTextPdfPdfIndirectReference:reference_];
}

- (ComItextpdfTextPdfPdfObject *)getAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)name {
  
#line 209
  ComItextpdfTextPdfPdfDictionary *attr = [self getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_()];
  if (attr != nil) {
    if ([attr containsWithComItextpdfTextPdfPdfName:name])
#line 212
    return [attr getWithComItextpdfTextPdfPdfName:name];
  }
  return nil;
}


#line 221
- (void)setAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)name
                  withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 222
  ComItextpdfTextPdfPdfDictionary *attr = [self getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_()];
  if (attr == nil) {
    attr = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_() withComItextpdfTextPdfPdfObject:attr];
  }
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(attr)) putWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfObject:obj];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfStructureTreeRoot *)other {
  [super copyAllFieldsTo:other];
  other->classMap_ = classMap_;
  other->classes_ = classes_;
  other->numTree_ = numTree_;
  other->parentTree_ = parentTree_;
  other->reference_ = reference_;
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:", "PdfStructureTreeRoot", NULL, 0x0, NULL },
    { "createNumTree", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "mapRoleWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfName:", "mapRole", "V", 0x1, NULL },
    { "mapClassWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "mapClass", "V", 0x1, NULL },
    { "getMappedClassWithComItextpdfTextPdfPdfName:", "getMappedClass", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "getWriter", NULL, "Lcom.itextpdf.text.pdf.PdfWriter;", 0x1, NULL },
    { "getNumTree", NULL, "Ljava.util.HashMap;", 0x1, "Ljava.io.IOException;" },
    { "getReference", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "setPageMarkWithInt:withComItextpdfTextPdfPdfIndirectReference:", "setPageMark", "V", 0x0, NULL },
    { "setAnnotationMarkWithInt:withComItextpdfTextPdfPdfIndirectReference:", "setAnnotationMark", "V", 0x0, NULL },
    { "nodeProcessWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfIndirectReference:", "nodeProcess", "V", 0x2, "Ljava.io.IOException;" },
    { "buildTree", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "getAttributeWithComItextpdfTextPdfPdfName:", "getAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAttribute", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parentTree_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "reference_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
    { "classMap_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "classes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "numTree_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "writer_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfStructureTreeRoot = { "PdfStructureTreeRoot", "com.itextpdf.text.pdf", NULL, 0x1, 14, methods, 6, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfStructureTreeRoot;
}

@end
