//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfDocument.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfDocument.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/Anchor.h"
#include "com/itextpdf/text/Annotation.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/List.h"
#include "com/itextpdf/text/ListBody.h"
#include "com/itextpdf/text/ListItem.h"
#include "com/itextpdf/text/ListLabel.h"
#include "com/itextpdf/text/MarkedObject.h"
#include "com/itextpdf/text/MarkedSection.h"
#include "com/itextpdf/text/Meta.h"
#include "com/itextpdf/text/Paragraph.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/Section.h"
#include "com/itextpdf/text/TabSettings.h"
#include "com/itextpdf/text/TabStop.h"
#include "com/itextpdf/text/Version.h"
#include "com/itextpdf/text/api/WriterOperation.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/ColumnText.h"
#include "com/itextpdf/text/pdf/FloatLayout.h"
#include "com/itextpdf/text/pdf/PageResources.h"
#include "com/itextpdf/text/pdf/PdfAcroForm.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfChunk.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfContents.h"
#include "com/itextpdf/text/pdf/PdfDate.h"
#include "com/itextpdf/text/pdf/PdfDestination.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfDiv.h"
#include "com/itextpdf/text/pdf/PdfDocument.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfEncryption.h"
#include "com/itextpdf/text/pdf/PdfException.h"
#include "com/itextpdf/text/pdf/PdfFileSpecification.h"
#include "com/itextpdf/text/pdf/PdfFont.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLine.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNameTree.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfOutline.h"
#include "com/itextpdf/text/pdf/PdfPCell.h"
#include "com/itextpdf/text/pdf/PdfPTable.h"
#include "com/itextpdf/text/pdf/PdfPage.h"
#include "com/itextpdf/text/pdf/PdfPageEvent.h"
#include "com/itextpdf/text/pdf/PdfPageLabels.h"
#include "com/itextpdf/text/pdf/PdfRectangle.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfStructureElement.h"
#include "com/itextpdf/text/pdf/PdfStructureTreeRoot.h"
#include "com/itextpdf/text/pdf/PdfTextArray.h"
#include "com/itextpdf/text/pdf/PdfTransition.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/PdfXConformanceException.h"
#include "com/itextpdf/text/pdf/collection/PdfCollection.h"
#include "com/itextpdf/text/pdf/draw/DrawInterface.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"
#include "com/itextpdf/text/pdf/internal/PdfAnnotationsImp.h"
#include "com/itextpdf/text/pdf/internal/PdfVersionImp.h"
#include "com/itextpdf/text/pdf/internal/PdfViewerPreferencesImp.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/text/DecimalFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/TreeMap.h"

BOOL ComItextpdfTextPdfPdfDocument_initialized = NO;


#line 102
@implementation ComItextpdfTextPdfPdfDocument

NSString * ComItextpdfTextPdfPdfDocument_hangingPunctuation_ = 
#line 1474
@".,;:'";
JavaTextDecimalFormat * ComItextpdfTextPdfPdfDocument_SIXTEEN_DIGITS_;


#line 348
- (instancetype)init {
  if (self =
#line 349
  [super init]) {
    structElements_ =
#line 357
    [[JavaUtilHashMap alloc] init];
    openMCDocument_ =
#line 359
    NO;
    structParentIndices_ =
#line 361
    [[JavaUtilHashMap alloc] init];
    markPoints_ =
#line 363
    [[JavaUtilHashMap alloc] init];
    leading_ =
#line 398
    0;
    alignment_ =
#line 422
    ComItextpdfTextElement_ALIGN_LEFT;
    currentHeight_ =
#line 425
    0;
    isSectionTitle_ =
#line 433
    NO;
    anchorAction_ =
#line 439
    nil;
    leadingStack_ =
#line 455
    [[JavaUtilStack alloc] init];
    firstPageEvent_ =
#line 1244
    YES;
    line_ =
#line 1312
    nil;
    lines_ =
#line 1314
    [[JavaUtilArrayList alloc] init];
    lastElementType_ =
#line 1388
    -1;
    indentation_ =
#line 1942
    [[ComItextpdfTextPdfPdfDocument_Indentation alloc] init];
    info_ =
#line 2062
    [[ComItextpdfTextPdfPdfDocument_PdfInfo alloc] init];
    viewerPreferences_ =
#line 2241
    [[ComItextpdfTextPdfInternalPdfViewerPreferencesImp alloc] init];
    localDestinations_ =
#line 2362
    [[JavaUtilTreeMap alloc] init];
    documentLevelJS_ =
#line 2411
    [[JavaUtilHashMap alloc] init];
    documentFileAttachment_ =
#line 2441
    [[JavaUtilHashMap alloc] init];
    nextPageSize_ =
#line 2550
    nil;
    thisBoxSize_ =
#line 2553
    [[JavaUtilHashMap alloc] init];
    boxSize_ =
#line 2558
    [[JavaUtilHashMap alloc] init];
    pageEmpty_ =
#line 2616
    YES;
    pageAA_ =
#line 2655
    nil;
    strictImageSequence_ =
#line 2683
    NO;
    imageEnd_ =
#line 2707
    -1;
    imageWait_ =
#line 2755
    nil;
    floatingElements_ =
#line 2891
    [[JavaUtilArrayList alloc] init];
    
#line 350
    [self addProducer];
    
#line 351
    [self addCreationDate];
  }
  return self;
}


#line 374
- (void)addWriterWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 375
  if (self->writer_ == nil) {
    self->writer_ = writer;
    annotationsImp_ = [[ComItextpdfTextPdfInternalPdfAnnotationsImp alloc] initWithComItextpdfTextPdfPdfWriter:writer];
    return;
  }
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:
#line 381
  [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"you.can.only.add.a.writer.to.a.pdfdocument.once" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 406
- (jfloat)getLeading {
  
#line 407
  return leading_;
}


#line 417
- (void)setLeadingWithFloat:(jfloat)leading {
  
#line 418
  self->leading_ = leading;
}


#line 460
- (void)pushLeading {
  
#line 461
  (void) [((JavaUtilStack *) nil_chk(leadingStack_)) pushWithId:[JavaLangFloat valueOfWithFloat:leading_]];
}


#line 467
- (void)popLeading {
  
#line 468
  leading_ = [((JavaLangFloat *) nil_chk([((JavaUtilStack *) nil_chk(leadingStack_)) pop])) floatValue];
  if ([leadingStack_ size] > 0)
#line 470
  leading_ = [((JavaLangFloat *) nil_chk([leadingStack_ peek])) floatValue];
}


#line 478
- (ComItextpdfTextTabSettings *)getTabSettings {
  
#line 479
  return tabSettings_;
}


#line 489
- (void)setTabSettingsWithComItextpdfTextTabSettings:(ComItextpdfTextTabSettings *)tabSettings {
  
#line 490
  self->tabSettings_ = tabSettings;
}


#line 505
- (jboolean)addWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element {
  
#line 506
  if (writer_ != nil && [writer_ isPaused]) {
    return NO;
  }
  @try {
    if ([((id<ComItextpdfTextElement>) nil_chk(element)) type] != ComItextpdfTextElement_DIV) {
      [self flushFloatingElements];
    }
    
#line 514
    switch ([element type]) {
      
#line 516
      case ComItextpdfTextElement_HEADER:
      [((ComItextpdfTextPdfPdfDocument_PdfInfo *) nil_chk(info_)) addkeyWithNSString:[((ComItextpdfTextMeta *) check_class_cast(element, [ComItextpdfTextMeta class])) getName] withNSString:[((ComItextpdfTextMeta *) check_class_cast(element, [ComItextpdfTextMeta class])) getContent]];
      break;
      case ComItextpdfTextElement_TITLE:
      [((ComItextpdfTextPdfPdfDocument_PdfInfo *) nil_chk(info_)) addTitleWithNSString:[((ComItextpdfTextMeta *) check_class_cast(element, [ComItextpdfTextMeta class])) getContent]];
      break;
      case ComItextpdfTextElement_SUBJECT:
      [((ComItextpdfTextPdfPdfDocument_PdfInfo *) nil_chk(info_)) addSubjectWithNSString:[((ComItextpdfTextMeta *) check_class_cast(element, [ComItextpdfTextMeta class])) getContent]];
      break;
      case ComItextpdfTextElement_KEYWORDS:
      [((ComItextpdfTextPdfPdfDocument_PdfInfo *) nil_chk(info_)) addKeywordsWithNSString:[((ComItextpdfTextMeta *) check_class_cast(element, [ComItextpdfTextMeta class])) getContent]];
      break;
      case ComItextpdfTextElement_AUTHOR:
      [((ComItextpdfTextPdfPdfDocument_PdfInfo *) nil_chk(info_)) addAuthorWithNSString:[((ComItextpdfTextMeta *) check_class_cast(element, [ComItextpdfTextMeta class])) getContent]];
      break;
      case ComItextpdfTextElement_CREATOR:
      [((ComItextpdfTextPdfPdfDocument_PdfInfo *) nil_chk(info_)) addCreatorWithNSString:[((ComItextpdfTextMeta *) check_class_cast(element, [ComItextpdfTextMeta class])) getContent]];
      break;
      case ComItextpdfTextElement_LANGUAGE:
      [self setLanguageWithNSString:[((ComItextpdfTextMeta *) check_class_cast(element, [ComItextpdfTextMeta class])) getContent]];
      break;
      case ComItextpdfTextElement_PRODUCER:
      
#line 539
      [((ComItextpdfTextPdfPdfDocument_PdfInfo *) nil_chk(info_)) addProducer];
      break;
      case ComItextpdfTextElement_CREATIONDATE:
      
#line 543
      [((ComItextpdfTextPdfPdfDocument_PdfInfo *) nil_chk(info_)) addCreationDate];
      break;
      
#line 546
      case ComItextpdfTextElement_CHUNK:
      {
        if (line_ == nil) {
          [self carriageReturn];
        }
        
#line 553
        ComItextpdfTextPdfPdfChunk *chunk = [[ComItextpdfTextPdfPdfChunk alloc] initWithComItextpdfTextChunk:(ComItextpdfTextChunk *) check_class_cast(element, [ComItextpdfTextChunk class]) withComItextpdfTextPdfPdfAction:anchorAction_ withComItextpdfTextTabSettings:tabSettings_];
        {
          
#line 556
          ComItextpdfTextPdfPdfChunk *overflow;
          while ((overflow = [((ComItextpdfTextPdfPdfLine *) nil_chk(line_)) addWithComItextpdfTextPdfPdfChunk:chunk]) != nil) {
            [self carriageReturn];
            jboolean newlineSplit = [chunk isNewlineSplit];
            chunk = overflow;
            if (!newlineSplit)
#line 562
            [((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk)) trimFirstSpace];
          }
        }
        
#line 566
        pageEmpty_ = NO;
        if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk)) isAttributeWithNSString:ComItextpdfTextChunk_get_NEWPAGE_()]) {
          [self newPage];
        }
        break;
      }
      case ComItextpdfTextElement_ANCHOR:
      {
        
#line 573
        ComItextpdfTextAnchor *anchor = (ComItextpdfTextAnchor *) check_class_cast(element, [ComItextpdfTextAnchor class]);
        NSString *url = [anchor getReference];
        leading_ = [anchor getLeading];
        [self pushLeading];
        if (url != nil) {
          anchorAction_ = [[ComItextpdfTextPdfPdfAction alloc] initWithNSString:url];
        }
        
#line 581
        [element processWithComItextpdfTextElementListener:self];
        anchorAction_ = nil;
        [self popLeading];
        break;
      }
      case ComItextpdfTextElement_ANNOTATION:
      {
        
#line 587
        if (line_ == nil) {
          [self carriageReturn];
        }
        ComItextpdfTextAnnotation *annot = (ComItextpdfTextAnnotation *) check_class_cast(element, [ComItextpdfTextAnnotation class]);
        ComItextpdfTextRectangle *rect = [[ComItextpdfTextRectangle alloc] initWithFloat:0 withFloat:0];
        if (line_ != nil)
#line 593
        rect = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 594
        [annot llxWithFloat:[self indentRight] - [line_ widthLeft]] withFloat:[annot uryWithFloat:[self indentTop] - currentHeight_ -
#line 595
        20] withFloat:[annot urxWithFloat:[self indentRight] - [line_ widthLeft] + 20] withFloat:[annot llyWithFloat:[self indentTop] -
#line 596
        currentHeight_]];
        ComItextpdfTextPdfPdfAnnotation *an = [ComItextpdfTextPdfInternalPdfAnnotationsImp convertAnnotationWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextAnnotation:annot withComItextpdfTextRectangle:rect];
        [((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) addPlainAnnotationWithComItextpdfTextPdfPdfAnnotation:an];
        pageEmpty_ = NO;
        break;
      }
      case ComItextpdfTextElement_PHRASE:
      {
        
#line 603
        ComItextpdfTextTabSettings *backupTabSettings = tabSettings_;
        if ([((ComItextpdfTextPhrase *) check_class_cast(element, [ComItextpdfTextPhrase class])) getTabSettings] != nil)
#line 605
        tabSettings_ = [((ComItextpdfTextPhrase *) check_class_cast(element, [ComItextpdfTextPhrase class])) getTabSettings];
        
#line 607
        leading_ = [((ComItextpdfTextPhrase *) check_class_cast(element, [ComItextpdfTextPhrase class])) getTotalLeading];
        [self pushLeading];
        
#line 610
        [element processWithComItextpdfTextElementListener:self];
        tabSettings_ = backupTabSettings;
        [self popLeading];
        break;
      }
      case ComItextpdfTextElement_PARAGRAPH:
      {
        
#line 616
        ComItextpdfTextTabSettings *backupTabSettings = tabSettings_;
        if ([((ComItextpdfTextPhrase *) check_class_cast(element, [ComItextpdfTextPhrase class])) getTabSettings] != nil)
#line 618
        tabSettings_ = [((ComItextpdfTextPhrase *) check_class_cast(element, [ComItextpdfTextPhrase class])) getTabSettings];
        
#line 620
        ComItextpdfTextParagraph *paragraph = (ComItextpdfTextParagraph *) check_class_cast(element, [ComItextpdfTextParagraph class]);
        if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
          [self flushLines];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:paragraph];
        }
        [self addSpacingWithFloat:[paragraph getSpacingBefore] withFloat:leading_ withComItextpdfTextFont:[paragraph getFont]];
        
#line 628
        alignment_ = [paragraph getAlignment];
        leading_ = [paragraph getTotalLeading];
        [self pushLeading];
        [self carriageReturn];
        
#line 634
        if (currentHeight_ + [((ComItextpdfTextPdfPdfLine *) nil_chk(line_)) height] + leading_ > [self indentTop] - [self indentBottom]) {
          [self newPage];
        }
        ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->indentLeft_ += [paragraph getIndentationLeft];
        indentation_->indentRight_ += [paragraph getIndentationRight];
        [self carriageReturn];
        
#line 641
        id<ComItextpdfTextPdfPdfPageEvent> pageEvent = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPageEvent];
        if (pageEvent != nil && !isSectionTitle_)
#line 643
        [pageEvent onParagraphWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self withFloat:[self indentTop] - currentHeight_];
        
#line 647
        if ([paragraph getKeepTogether]) {
          [self carriageReturn];
          ComItextpdfTextPdfPdfPTable *table = [[ComItextpdfTextPdfPdfPTable alloc] initWithInt:1];
          [table setKeepTogetherWithBoolean:[paragraph getKeepTogether]];
          [table setWidthPercentageWithFloat:100.0f];
          ComItextpdfTextPdfPdfPCell *cell = [[ComItextpdfTextPdfPdfPCell alloc] init];
          [cell addElementWithComItextpdfTextElement:paragraph];
          [cell setBorderWithInt:ComItextpdfTextRectangle_NO_BORDER];
          [cell setPaddingWithFloat:0];
          (void) [table addCellWithComItextpdfTextPdfPdfPCell:cell];
          indentation_->indentLeft_ -= [paragraph getIndentationLeft];
          indentation_->indentRight_ -= [paragraph getIndentationRight];
          [self addWithComItextpdfTextElement:table];
          indentation_->indentLeft_ += [paragraph getIndentationLeft];
          indentation_->indentRight_ += [paragraph getIndentationRight];
        }
        else {
          
#line 663
          [line_ setExtraIndentWithFloat:[paragraph getFirstLineIndent]];
          [element processWithComItextpdfTextElementListener:self];
          [self carriageReturn];
          [self addSpacingWithFloat:[paragraph getSpacingAfter] withFloat:[paragraph getTotalLeading] withComItextpdfTextFont:
#line 667
          [paragraph getFont]];
        }
        
#line 670
        if (pageEvent != nil && !isSectionTitle_)
#line 671
        [pageEvent onParagraphEndWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self withFloat:[self indentTop] - currentHeight_];
        
#line 673
        alignment_ = ComItextpdfTextElement_ALIGN_LEFT;
        indentation_->indentLeft_ -= [paragraph getIndentationLeft];
        indentation_->indentRight_ -= [paragraph getIndentationRight];
        [self carriageReturn];
        tabSettings_ = backupTabSettings;
        [self popLeading];
        if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
          [self flushLines];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:paragraph];
        }
        break;
      }
      case ComItextpdfTextElement_SECTION:
      case ComItextpdfTextElement_CHAPTER:
      {
        
#line 689
        ComItextpdfTextSection *section = (ComItextpdfTextSection *) check_class_cast(element, [ComItextpdfTextSection class]);
        id<ComItextpdfTextPdfPdfPageEvent> pageEvent = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPageEvent];
        
#line 692
        jboolean hasTitle = [section isNotAddedYet] && [section getTitle] != nil;
        
#line 695
        if ([section isTriggerNewPage]) {
          [self newPage];
        }
        
#line 699
        if (hasTitle) {
          jfloat fith = [self indentTop] - currentHeight_;
          jint rotation = [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getRotation];
          if (rotation == 90 || rotation == 180)
#line 703
          fith = [pageSize_ getHeight] - fith;
          ComItextpdfTextPdfPdfDestination *destination = [[ComItextpdfTextPdfPdfDestination alloc] initWithInt:ComItextpdfTextPdfPdfDestination_FITH withFloat:fith];
          while ([((ComItextpdfTextPdfPdfOutline *) nil_chk(currentOutline_)) level] >= [section getDepth]) {
            currentOutline_ = [currentOutline_ parent];
          }
          ComItextpdfTextPdfPdfOutline *outline = [[ComItextpdfTextPdfPdfOutline alloc] initWithComItextpdfTextPdfPdfOutline:
#line 709
          currentOutline_ withComItextpdfTextPdfPdfDestination:destination withComItextpdfTextParagraph:[section getBookmarkTitle] withBoolean:[section isBookmarkOpen]];
          currentOutline_ = outline;
        }
        
#line 714
        [self carriageReturn];
        ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->sectionIndentLeft_ += [section getIndentationLeft];
        indentation_->sectionIndentRight_ += [section getIndentationRight];
        
#line 718
        if ([section isNotAddedYet] && pageEvent != nil)
#line 719
        if ([element type] == ComItextpdfTextElement_CHAPTER)
#line 720
        [pageEvent onChapterWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self withFloat:[self indentTop] - currentHeight_ withComItextpdfTextParagraph:[section getTitle]];
        else
#line 722
        [pageEvent onSectionWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self withFloat:[self indentTop] - currentHeight_ withInt:[section getDepth] withComItextpdfTextParagraph:
#line 723
        [section getTitle]];
        
#line 726
        if (hasTitle) {
          isSectionTitle_ = YES;
          [self addWithComItextpdfTextElement:[section getTitle]];
          isSectionTitle_ = NO;
        }
        indentation_->sectionIndentLeft_ += [section getIndentation];
        
#line 733
        [element processWithComItextpdfTextElementListener:self];
        [self flushLines];
        
#line 736
        indentation_->sectionIndentLeft_ -= [section getIndentationLeft] + [section getIndentation];
        indentation_->sectionIndentRight_ -= [section getIndentationRight];
        
#line 739
        if ([section isComplete] && pageEvent != nil)
#line 740
        if ([element type] == ComItextpdfTextElement_CHAPTER)
#line 741
        [pageEvent onChapterEndWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self withFloat:[self indentTop] - currentHeight_];
        else
#line 743
        [pageEvent onSectionEndWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self withFloat:[self indentTop] - currentHeight_];
        
#line 745
        break;
      }
      case ComItextpdfTextElement_LIST:
      {
        ComItextpdfTextList *list = (ComItextpdfTextList *) check_class_cast(element, [ComItextpdfTextList class]);
        if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
          [self flushLines];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:list];
        }
        if ([list isAlignindent]) {
          [list normalizeIndentation];
        }
        
#line 758
        ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->listIndentLeft_ += [list getIndentationLeft];
        indentation_->indentRight_ += [list getIndentationRight];
        
#line 761
        [element processWithComItextpdfTextElementListener:self];
        
#line 764
        indentation_->listIndentLeft_ -= [list getIndentationLeft];
        indentation_->indentRight_ -= [list getIndentationRight];
        [self carriageReturn];
        if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
          [self flushLines];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:list];
        }
        break;
      }
      case ComItextpdfTextElement_LISTITEM:
      {
        ComItextpdfTextListItem *listItem = (ComItextpdfTextListItem *) check_class_cast(element, [ComItextpdfTextListItem class]);
        if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
          [self flushLines];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:listItem];
        }
        
#line 781
        [self addSpacingWithFloat:[listItem getSpacingBefore] withFloat:leading_ withComItextpdfTextFont:[listItem getFont]];
        
#line 784
        alignment_ = [listItem getAlignment];
        ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->listIndentLeft_ += [listItem getIndentationLeft];
        indentation_->indentRight_ += [listItem getIndentationRight];
        leading_ = [listItem getTotalLeading];
        [self pushLeading];
        [self carriageReturn];
        
#line 792
        [((ComItextpdfTextPdfPdfLine *) nil_chk(line_)) setListItemWithComItextpdfTextListItem:listItem];
        
#line 794
        [element processWithComItextpdfTextElementListener:self];
        [self addSpacingWithFloat:[listItem getSpacingAfter] withFloat:[listItem getTotalLeading] withComItextpdfTextFont:[listItem getFont]];
        
#line 798
        if ([line_ hasToBeJustified]) {
          [line_ resetAlignment];
        }
        
#line 802
        [self carriageReturn];
        indentation_->listIndentLeft_ -= [listItem getIndentationLeft];
        indentation_->indentRight_ -= [listItem getIndentationRight];
        [self popLeading];
        if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
          [self flushLines];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:[listItem getListBody]];
          [text_ closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:listItem];
        }
        break;
      }
      case ComItextpdfTextElement_RECTANGLE:
      {
        
#line 814
        ComItextpdfTextRectangle *rectangle = (ComItextpdfTextRectangle *) check_class_cast(element, [ComItextpdfTextRectangle class]);
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(graphics_)) rectangleWithComItextpdfTextRectangle:rectangle];
        pageEmpty_ = NO;
        break;
      }
      case ComItextpdfTextElement_PTABLE:
      {
        
#line 820
        ComItextpdfTextPdfPdfPTable *ptable = (ComItextpdfTextPdfPdfPTable *) check_class_cast(element, [ComItextpdfTextPdfPdfPTable class]);
        if ([ptable size] <= [ptable getHeaderRows])
#line 822
        break;
        
#line 825
        [self ensureNewLine];
        [self flushLines];
        
#line 828
        [self addPTableWithComItextpdfTextPdfPdfPTable:ptable];
        pageEmpty_ = NO;
        [self newLine];
        break;
      }
      case ComItextpdfTextElement_JPEG:
      case ComItextpdfTextElement_JPEG2000:
      case ComItextpdfTextElement_JBIG2:
      case ComItextpdfTextElement_IMGRAW:
      case ComItextpdfTextElement_IMGTEMPLATE:
      {
        if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
          [self flushLines];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:(ComItextpdfTextImage *) check_class_cast(element, [ComItextpdfTextImage class])];
        }
        [self addWithComItextpdfTextImage:(ComItextpdfTextImage *) check_class_cast(element, [ComItextpdfTextImage class])];
        if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
          [self flushLines];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:(ComItextpdfTextImage *) check_class_cast(element, [ComItextpdfTextImage class])];
        }
        break;
      }
      case ComItextpdfTextElement_YMARK:
      {
        
#line 851
        id<ComItextpdfTextPdfDrawDrawInterface> zh = (id<ComItextpdfTextPdfDrawDrawInterface>) check_protocol_cast(element, @protocol(ComItextpdfTextPdfDrawDrawInterface));
        [zh drawWithComItextpdfTextPdfPdfContentByte:graphics_ withFloat:[self indentLeft] withFloat:[self indentBottom] withFloat:[self indentRight] withFloat:[self indentTop] withFloat:[self indentTop] -
#line 853
        currentHeight_ - ([((JavaUtilStack *) nil_chk(leadingStack_)) size] > 0 ? leading_ : 0)];
        pageEmpty_ = NO;
        break;
      }
      case ComItextpdfTextElement_MARKED:
      {
        
#line 858
        ComItextpdfTextMarkedObject *mo;
        if ([(id) element isKindOfClass:[ComItextpdfTextMarkedSection class]]) {
          mo = [((ComItextpdfTextMarkedSection *) check_class_cast(element, [ComItextpdfTextMarkedSection class])) getTitle];
          if (mo != nil) {
            [mo processWithComItextpdfTextElementListener:self];
          }
        }
        mo = (ComItextpdfTextMarkedObject *) check_class_cast(element, [ComItextpdfTextMarkedObject class]);
        [mo processWithComItextpdfTextElementListener:self];
        break;
      }
      case ComItextpdfTextElement_WRITABLE_DIRECT:
      if (nil != writer_) {
        [((id<ComItextpdfTextApiWriterOperation>) check_protocol_cast(element, @protocol(ComItextpdfTextApiWriterOperation))) writeWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self];
      }
      break;
      case ComItextpdfTextElement_DIV:
      [self ensureNewLine];
      [self flushLines];
      [self addDivWithComItextpdfTextPdfPdfDiv:(ComItextpdfTextPdfPdfDiv *) check_class_cast(element, [ComItextpdfTextPdfPdfDiv class])];
      pageEmpty_ = NO;
      
#line 880
      break;
      default:
      return NO;
    }
    lastElementType_ = [element type];
    return YES;
  }
  @catch (
#line 886
  JavaLangException *e) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithJavaLangException:e];
  }
}


#line 900
- (void)open {
  
#line 901
  if (!open__) {
    [super open];
    [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) open];
    rootOutline_ = [[ComItextpdfTextPdfPdfOutline alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
    currentOutline_ = rootOutline_;
  }
  @try {
    [self initPage];
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
      openMCDocument_ = YES;
    }
  }
  @catch (
#line 912
  ComItextpdfTextDocumentException *de) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
}


#line 925
- (void)close {
  
#line 926
  if (close__) {
    return;
  }
  @try {
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
      [self flushFloatingElements];
      [self flushLines];
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getDirectContent])) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:self];
      [writer_ flushAcroFields];
      [writer_ flushTaggedObjects];
      if ([self isPageEmpty]) {
        jint pageReferenceCount = [((JavaUtilArrayList *) nil_chk(writer_->pageReferences_)) size];
        if (pageReferenceCount > 0 && writer_->currentPageNumber_ == pageReferenceCount) {
          (void) [writer_->pageReferences_ removeWithInt:pageReferenceCount - 1];
        }
      }
    }
    else [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) flushAcroFields];
    jboolean wasImage = imageWait_ != nil;
    [self newPage];
    if (imageWait_ != nil || wasImage)
#line 947
    [self newPage];
    if ([((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) hasUnusedAnnotations])
#line 949
    @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 950
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 951
    @"not.all.annotations.could.be.added.to.the.document.the.document.doesn.t.have.enough.pages" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    id<ComItextpdfTextPdfPdfPageEvent> pageEvent = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPageEvent];
    if (pageEvent != nil)
#line 954
    [pageEvent onCloseDocumentWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self];
    [super close];
    
#line 957
    [writer_ addLocalDestinationsWithJavaUtilTreeMap:localDestinations_];
    [self calculateOutlineCount];
    [self writeOutlines];
  }
  @catch (
#line 960
  JavaLangException *e) {
    @throw [ComItextpdfTextExceptionConverter convertExceptionWithJavaLangException:e];
  }
  
#line 964
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) close];
}


#line 978
- (void)setXmpMetadataWithByteArray:(IOSByteArray *)xmpMetadata {
  ComItextpdfTextPdfPdfStream *xmp = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:xmpMetadata];
  [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_METADATA_()];
  [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_XML_()];
  ComItextpdfTextPdfPdfEncryption *crypto = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getEncryption];
  if (crypto != nil && ![crypto isMetadataEncrypted]) {
    ComItextpdfTextPdfPdfArray *ar = [[ComItextpdfTextPdfPdfArray alloc] init];
    [ar addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CRYPT_()];
    [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ar];
  }
  [writer_ addPageDictEntryWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_METADATA_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer_ addToBodyWithComItextpdfTextPdfPdfObject:xmp])) getIndirectReference]];
}


#line 997
- (jboolean)newPage {
  
#line 998
  @try {
    [self flushFloatingElements];
  }
  @catch (
#line 1000
  ComItextpdfTextDocumentException *de) {
    
#line 1002
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
  lastElementType_ = -1;
  if ([self isPageEmpty]) {
    [self setNewPageSizeAndMargins];
    return NO;
  }
  if (!open__ || close__) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.is.not.open" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  id<ComItextpdfTextPdfPdfPageEvent> pageEvent = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPageEvent];
  if (pageEvent != nil)
#line 1014
  [pageEvent onEndPageWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self];
  
#line 1018
  [super newPage];
  
#line 1021
  ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->imageIndentLeft_ = 0;
  indentation_->imageIndentRight_ = 0;
  
#line 1024
  @try {
    
#line 1026
    [self flushLines];
    
#line 1031
    jint rotation = [((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getRotation];
    
#line 1034
    if ([writer_ isPdfIso]) {
      if ([((JavaUtilHashMap *) nil_chk(thisBoxSize_)) containsKeyWithId:@"art"] && [thisBoxSize_ containsKeyWithId:@"trim"])
#line 1036
      @throw [[ComItextpdfTextPdfPdfXConformanceException alloc] initWithNSString:
#line 1037
      [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 1038
      @"only.one.of.artbox.or.trimbox.can.exist.in.the.page" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      if (![thisBoxSize_ containsKeyWithId:@"art"] && ![thisBoxSize_ containsKeyWithId:@"trim"]) {
        if ([thisBoxSize_ containsKeyWithId:@"crop"])
#line 1041
        (void) [thisBoxSize_ putWithId:@"trim" withId:[thisBoxSize_ getWithId:@"crop"]];
        else
#line 1043
        (void) [thisBoxSize_ putWithId:@"trim" withId:[[ComItextpdfTextPdfPdfRectangle alloc] initWithComItextpdfTextRectangle:pageSize_ withInt:[pageSize_ getRotation]]];
      }
    }
    
#line 1048
    [((ComItextpdfTextPdfPageResources *) nil_chk(pageResources_)) addDefaultColorDiffWithComItextpdfTextPdfPdfDictionary:[writer_ getDefaultColorspace]];
    if ([writer_ isRgbTransparencyBlending]) {
      ComItextpdfTextPdfPdfDictionary *dcs = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [dcs putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CS_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
      [pageResources_ addDefaultColorDiffWithComItextpdfTextPdfPdfDictionary:dcs];
    }
    ComItextpdfTextPdfPdfDictionary *resources = [pageResources_ getResources];
    
#line 1058
    ComItextpdfTextPdfPdfPage *page = [[ComItextpdfTextPdfPdfPage alloc] initWithComItextpdfTextPdfPdfRectangle:
#line 1059
    [[ComItextpdfTextPdfPdfRectangle alloc] initWithComItextpdfTextRectangle:pageSize_ withInt:rotation] withJavaUtilHashMap:thisBoxSize_ withComItextpdfTextPdfPdfDictionary:resources withInt:rotation];
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
      [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TABS_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_S_()];
    }
    else {
      
#line 1063
      [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TABS_() withComItextpdfTextPdfPdfObject:[writer_ getTabs]];
    }
    [page putAllWithComItextpdfTextPdfPdfDictionary:[writer_ getPageDictEntries]];
    [writer_ resetPageDictEntries];
    
#line 1071
    if (pageAA_ != nil) {
      [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AA_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer_ addToBodyWithComItextpdfTextPdfPdfObject:pageAA_])) getIndirectReference]];
      pageAA_ = nil;
    }
    
#line 1077
    if ([((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) hasUnusedAnnotations]) {
      ComItextpdfTextPdfPdfArray *array = [annotationsImp_ rotateAnnotationsWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextRectangle:pageSize_];
      if ([((ComItextpdfTextPdfPdfArray *) nil_chk(array)) size] != 0)
#line 1080
      [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_() withComItextpdfTextPdfPdfObject:array];
    }
    
#line 1084
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_])
#line 1085
    [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTPARENTS_() withComItextpdfTextPdfPdfObject:
#line 1086
    [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[self getStructParentIndexWithId:[writer_ getCurrentPage]]]];
    
#line 1088
    if ([((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) size] > textEmptySize_ || [ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_])
#line 1089
    [text_ endText];
    else
#line 1091
    text_ = nil;
    
#line 1093
    JavaUtilArrayList *mcBlocks = nil;
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
      mcBlocks = [((ComItextpdfTextPdfPdfContentByte *) nil_chk([writer_ getDirectContent])) saveMCBlocks];
    }
    (void) [writer_ addWithComItextpdfTextPdfPdfPage:
#line 1098
    page withComItextpdfTextPdfPdfContents:
#line 1099
    [[ComItextpdfTextPdfPdfContents alloc] initWithComItextpdfTextPdfPdfContentByte:
#line 1100
    [writer_ getDirectContentUnder] withComItextpdfTextPdfPdfContentByte:graphics_ withComItextpdfTextPdfPdfContentByte:![ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_] ? text_ : nil withComItextpdfTextPdfPdfContentByte:[writer_ getDirectContent] withComItextpdfTextRectangle:
#line 1101
    pageSize_]];
    
#line 1103
    [self initPage];
    
#line 1105
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk([writer_ getDirectContentUnder])) restoreMCBlocksWithJavaUtilArrayList:mcBlocks];
    }
  }
  @catch (ComItextpdfTextDocumentException *de) {
    
#line 1111
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:de];
  }
  @catch (
#line 1112
  JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
  return YES;
}


#line 1128
- (jboolean)setPageSizeWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize {
  
#line 1129
  if (writer_ != nil && [writer_ isPaused]) {
    return NO;
  }
  nextPageSize_ = [[ComItextpdfTextRectangle alloc] initWithComItextpdfTextRectangle:pageSize];
  return YES;
}


#line 1175
- (jboolean)setMarginsWithFloat:(jfloat)marginLeft
                      withFloat:(jfloat)marginRight
                      withFloat:(jfloat)marginTop
                      withFloat:(jfloat)marginBottom {
  
#line 1177
  if (writer_ != nil && [writer_ isPaused]) {
    return NO;
  }
  nextMarginLeft_ = marginLeft;
  nextMarginRight_ = marginRight;
  nextMarginTop_ = marginTop;
  nextMarginBottom_ = marginBottom;
  return YES;
}


#line 1193
- (jboolean)setMarginMirroringWithBoolean:(jboolean)MarginMirroring {
  
#line 1194
  if (writer_ != nil && [writer_ isPaused]) {
    return NO;
  }
  return [super setMarginMirroringWithBoolean:MarginMirroring];
}


#line 1205
- (jboolean)setMarginMirroringTopBottomWithBoolean:(jboolean)MarginMirroringTopBottom {
  
#line 1206
  if (writer_ != nil && [writer_ isPaused]) {
    return NO;
  }
  return [super setMarginMirroringTopBottomWithBoolean:MarginMirroringTopBottom];
}


#line 1221
- (void)setPageCountWithInt:(jint)pageN {
  
#line 1222
  if (writer_ != nil && [writer_ isPaused]) {
    return;
  }
  [super setPageCountWithInt:pageN];
}


#line 1234
- (void)resetPageCount {
  
#line 1235
  if (writer_ != nil && [writer_ isPaused]) {
    return;
  }
  [super resetPageCount];
}


#line 1254
- (void)initPage {
  
#line 1256
  pageN_++;
  
#line 1259
  [((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) resetAnnotations];
  pageResources_ = [[ComItextpdfTextPdfPageResources alloc] init];
  
#line 1262
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) resetContent];
  if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
    graphics_ = [((ComItextpdfTextPdfPdfContentByte *) nil_chk([writer_ getDirectContentUnder])) getDuplicate];
    ((ComItextpdfTextPdfPdfContentByte *) nil_chk([writer_ getDirectContent]))->duplicatedFrom_ = graphics_;
  }
  else {
    
#line 1267
    graphics_ = [[ComItextpdfTextPdfPdfContentByte alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
  }
  
#line 1270
  [self setNewPageSizeAndMargins];
  imageEnd_ = -1;
  ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->imageIndentRight_ = 0;
  indentation_->imageIndentLeft_ = 0;
  indentation_->indentBottom_ = 0;
  indentation_->indentTop_ = 0;
  currentHeight_ = 0;
  
#line 1279
  thisBoxSize_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:boxSize_];
  if ([((ComItextpdfTextRectangle *) nil_chk(pageSize_)) getBackgroundColor] != nil || [pageSize_ hasBorders] ||
#line 1281
  [pageSize_ getBorderColor] != nil) {
    [self addWithComItextpdfTextElement:pageSize_];
  }
  
#line 1285
  jfloat oldleading = leading_;
  jint oldAlignment = alignment_;
  pageEmpty_ = YES;
  
#line 1289
  @try {
    if (imageWait_ != nil) {
      [self addWithComItextpdfTextImage:imageWait_];
      imageWait_ = nil;
    }
  }
  @catch (
#line 1294
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
  leading_ = oldleading;
  alignment_ = oldAlignment;
  [self carriageReturn];
  
#line 1301
  id<ComItextpdfTextPdfPdfPageEvent> pageEvent = [writer_ getPageEvent];
  if (pageEvent != nil) {
    if (firstPageEvent_) {
      [pageEvent onOpenDocumentWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self];
    }
    [pageEvent onStartPageWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self];
  }
  firstPageEvent_ = NO;
}


#line 1322
- (void)newLine {
  
#line 1323
  lastElementType_ = -1;
  [self carriageReturn];
  if (lines_ != nil && ![lines_ isEmpty]) {
    [lines_ addWithId:line_];
    currentHeight_ += [((ComItextpdfTextPdfPdfLine *) nil_chk(line_)) height];
  }
  line_ = [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:[self indentLeft] withFloat:[self indentRight] withInt:alignment_ withFloat:leading_];
}


#line 1336
- (void)carriageReturn {
  
#line 1338
  if (lines_ == nil) {
    lines_ = [[JavaUtilArrayList alloc] init];
  }
  
#line 1342
  if (line_ != nil && [line_ size] > 0) {
    
#line 1344
    if (currentHeight_ + [line_ height] + leading_ > [self indentTop] - [self indentBottom]) {
      
#line 1350
      ComItextpdfTextPdfPdfLine *overflowLine = line_;
      line_ = nil;
      [self newPage];
      line_ = overflowLine;
      
#line 1355
      overflowLine->left_ = [self indentLeft];
    }
    currentHeight_ += [((ComItextpdfTextPdfPdfLine *) nil_chk(line_)) height];
    [((JavaUtilArrayList *) nil_chk(lines_)) addWithId:line_];
    pageEmpty_ = NO;
  }
  if (imageEnd_ > -1 && currentHeight_ > imageEnd_) {
    imageEnd_ = -1;
    ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->imageIndentRight_ = 0;
    indentation_->imageIndentLeft_ = 0;
  }
  
#line 1367
  line_ = [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:[self indentLeft] withFloat:[self indentRight] withInt:alignment_ withFloat:leading_];
}


#line 1379
- (jfloat)getVerticalPositionWithBoolean:(jboolean)ensureNewLine {
  
#line 1381
  if (ensureNewLine) {
    [self ensureNewLine];
  }
  return [self top] - currentHeight_ - ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->indentTop_;
}


#line 1393
- (void)ensureNewLine {
  
#line 1394
  @try {
    if (lastElementType_ == ComItextpdfTextElement_PHRASE || lastElementType_ == ComItextpdfTextElement_CHUNK) {
      [self newLine];
      [self flushLines];
    }
  }
  @catch (
#line 1399
  ComItextpdfTextDocumentException *ex) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ex];
  }
}


#line 1411
- (jfloat)flushLines {
  
#line 1413
  if (lines_ == nil) {
    return 0;
  }
  
#line 1417
  if (line_ != nil && [line_ size] > 0) {
    [((JavaUtilArrayList *) nil_chk(lines_)) addWithId:line_];
    line_ = [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:[self indentLeft] withFloat:[self indentRight] withInt:alignment_ withFloat:leading_];
  }
  
#line 1423
  if ([((JavaUtilArrayList *) nil_chk(lines_)) isEmpty]) {
    return 0;
  }
  
#line 1428
  IOSObjectArray *currentValues = [IOSObjectArray arrayWithLength:2 type:[IOSClass classWithClass:[NSObject class]]];
  ComItextpdfTextPdfPdfFont *currentFont = nil;
  jfloat displacement = 0;
  JavaLangFloat *lastBaseFactor = [[JavaLangFloat alloc] initWithFloat:0];
  IOSObjectArray_Set(currentValues, 1, lastBaseFactor);
  
#line 1434
  for (ComItextpdfTextPdfPdfLine * __strong l in lines_) {
    jfloat moveTextX = [((ComItextpdfTextPdfPdfLine *) nil_chk(l)) indentLeft] - [self indentLeft] + ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->indentLeft_ +
#line 1436
    indentation_->listIndentLeft_ + indentation_->sectionIndentLeft_;
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) moveTextWithFloat:moveTextX withFloat:-[l height]];
    
#line 1439
    [l flush];
    
#line 1441
    if ([l listSymbol] != nil) {
      ComItextpdfTextListLabel *lbl = nil;
      ComItextpdfTextChunk *symbol = [l listSymbol];
      if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
        lbl = [((ComItextpdfTextListItem *) nil_chk([l listItem])) getListLabel];
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(graphics_)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:lbl];
        symbol = [[ComItextpdfTextChunk alloc] initWithComItextpdfTextChunk:symbol];
        [symbol setRoleWithComItextpdfTextPdfPdfName:nil];
      }
      [ComItextpdfTextPdfColumnText showTextAlignedWithComItextpdfTextPdfPdfContentByte:graphics_ withInt:ComItextpdfTextElement_ALIGN_LEFT withComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithComItextpdfTextChunk:symbol] withFloat:[text_ getXTLM] -
#line 1451
      [l listIndent] withFloat:[text_ getYTLM] withFloat:0];
      if (lbl != nil) {
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(graphics_)) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:lbl];
      }
    }
    
#line 1457
    IOSObjectArray_Set(currentValues, 0, currentFont);
    
#line 1459
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_] && [l listItem] != nil) {
      [text_ openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:[((ComItextpdfTextListItem *) nil_chk([l listItem])) getListBody]];
    }
    [self writeLineToContentWithComItextpdfTextPdfPdfLine:l withComItextpdfTextPdfPdfContentByte:text_ withComItextpdfTextPdfPdfContentByte:graphics_ withNSObjectArray:currentValues withFloat:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getSpaceCharRatio]];
    
#line 1464
    currentFont = (ComItextpdfTextPdfPdfFont *) check_class_cast(IOSObjectArray_Get(currentValues, 0), [ComItextpdfTextPdfPdfFont class]);
    displacement += [l height];
    [text_ moveTextWithFloat:-moveTextX withFloat:0];
  }
  
#line 1469
  lines_ = [[JavaUtilArrayList alloc] init];
  return displacement;
}


#line 1497
- (jfloat)writeLineToContentWithComItextpdfTextPdfPdfLine:(ComItextpdfTextPdfPdfLine *)line
                     withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)text
                     withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)graphics
                                        withNSObjectArray:(IOSObjectArray *)currentValues
                                                withFloat:(jfloat)ratio {
  
#line 1500
  ComItextpdfTextPdfPdfFont *currentFont = (ComItextpdfTextPdfPdfFont *) check_class_cast(IOSObjectArray_Get(nil_chk(currentValues), 0), [ComItextpdfTextPdfPdfFont class]);
  jfloat lastBaseFactor = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(currentValues, 1), [JavaLangFloat class])))) floatValue];
  ComItextpdfTextPdfPdfChunk *chunk;
  jint numberOfSpaces;
  jint lineLen;
  jboolean isJustified;
  jfloat hangingCorrection = 0;
  jfloat hScale = 1;
  jfloat lastHScale = JavaLangFloat_NaN;
  jfloat baseWordSpacing = 0;
  jfloat baseCharacterSpacing = 0;
  jfloat glueWidth = 0;
  jfloat lastX = [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) getXTLM] + [((ComItextpdfTextPdfPdfLine *) nil_chk(line)) getOriginalWidth];
  numberOfSpaces = [line numberOfSpaces];
  lineLen = [line getLineLengthUtf32];
  
#line 1516
  isJustified = ([line hasToBeJustified] && (numberOfSpaces != 0 || lineLen > 1));
  jint separatorCount = [line getSeparatorCount];
  if (separatorCount > 0) {
    glueWidth = [line widthLeft] / separatorCount;
  }
  else
#line 1520
  if (isJustified && separatorCount == 0) {
    if ([line isNewlineSplit] &&
#line 1522
    [line widthLeft] >= lastBaseFactor * (ratio * numberOfSpaces + lineLen - 1)) {
      if ([line isRTL]) {
        [text moveTextWithFloat:[line widthLeft] - lastBaseFactor * (ratio * numberOfSpaces + lineLen - 1) withFloat:
#line 1525
        0];
      }
      baseWordSpacing = ratio * lastBaseFactor;
      baseCharacterSpacing = lastBaseFactor;
    }
    else {
      
#line 1530
      jfloat width = [line widthLeft];
      ComItextpdfTextPdfPdfChunk *last = [line getChunkWithInt:[line size] - 1];
      if (last != nil) {
        NSString *s = [last description];
        jchar c;
        if (((jint) [((NSString *) nil_chk(s)) length]) > 0 && [((NSString *) nil_chk(ComItextpdfTextPdfPdfDocument_hangingPunctuation_)) indexOf:(c = [s charAtWithInt:((jint) [s length]) - 1])] >= 0) {
          jfloat oldWidth = width;
          width += [((ComItextpdfTextPdfPdfFont *) nil_chk([last font])) widthWithInt:c] * 0.4f;
          hangingCorrection = width - oldWidth;
        }
      }
      jfloat baseFactor = width / (ratio * numberOfSpaces + lineLen - 1);
      baseWordSpacing = ratio * baseFactor;
      baseCharacterSpacing = baseFactor;
      lastBaseFactor = baseFactor;
    }
  }
  else
#line 1546
  if (line->alignment_ == ComItextpdfTextElement_ALIGN_LEFT || line->alignment_ == ComItextpdfTextElement_ALIGN_UNDEFINED) {
    lastX -= [line widthLeft];
  }
  
#line 1550
  jint lastChunkStroke = [line getLastStrokeChunk];
  jint chunkStrokeIdx = 0;
  jfloat xMarker = [text getXTLM];
  jfloat baseXMarker = xMarker;
  jfloat yMarker = [text getYTLM];
  jboolean adjustMatrix = NO;
  jfloat tabPosition = 0;
  
#line 1559
  for (id<JavaUtilIterator> j = [line iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
    chunk = [j next];
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_] && ((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk))->accessibleElement_ != nil) {
      [text openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:chunk->accessibleElement_];
    }
    ComItextpdfTextBaseColor *color = [((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk)) color];
    jfloat fontSize = [((ComItextpdfTextPdfPdfFont *) nil_chk([chunk font])) size];
    jfloat ascender;
    jfloat descender;
    if ([chunk isImage]) {
      ascender = [chunk height];
      descender = 0;
    }
    else {
      
#line 1572
      ascender = [((ComItextpdfTextPdfBaseFont *) nil_chk([((ComItextpdfTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:fontSize];
      descender = [((ComItextpdfTextPdfBaseFont *) nil_chk([((ComItextpdfTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:fontSize];
    }
    hScale = 1;
    
#line 1577
    if (chunkStrokeIdx <= lastChunkStroke) {
      jfloat width;
      if (isJustified) {
        width = [chunk getWidthCorrectedWithFloat:baseCharacterSpacing withFloat:baseWordSpacing];
      }
      else {
        
#line 1582
        width = [chunk width];
      }
      if ([chunk isStroked]) {
        ComItextpdfTextPdfPdfChunk *nextChunk = [line getChunkWithInt:chunkStrokeIdx + 1];
        if ([chunk isSeparator]) {
          width = glueWidth;
          IOSObjectArray *sep = (IOSObjectArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_SEPARATOR_()], [IOSObjectArray class]);
          id<ComItextpdfTextPdfDrawDrawInterface> di = (id<ComItextpdfTextPdfDrawDrawInterface>) check_protocol_cast(IOSObjectArray_Get(nil_chk(sep), 0), @protocol(ComItextpdfTextPdfDrawDrawInterface));
          JavaLangBoolean *vertical = (JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(sep, 1), [JavaLangBoolean class]);
          if ([((JavaLangBoolean *) nil_chk(vertical)) booleanValue]) {
            [((id<ComItextpdfTextPdfDrawDrawInterface>) nil_chk(di)) drawWithComItextpdfTextPdfPdfContentByte:graphics withFloat:baseXMarker withFloat:yMarker + descender withFloat:
#line 1593
            baseXMarker + [line getOriginalWidth] withFloat:ascender - descender withFloat:yMarker];
          }
          else {
            
#line 1595
            [((id<ComItextpdfTextPdfDrawDrawInterface>) nil_chk(di)) drawWithComItextpdfTextPdfPdfContentByte:graphics withFloat:xMarker withFloat:yMarker + descender withFloat:xMarker + width withFloat:
#line 1596
            ascender - descender withFloat:yMarker];
          }
        }
        if ([chunk isTab]) {
          if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_TABSETTINGS_()]) {
            ComItextpdfTextTabStop *tabStop = [chunk getTabStop];
            if (tabStop != nil) {
              tabPosition = [tabStop getPosition] + baseXMarker;
              if ([tabStop getLeader] != nil)
#line 1605
              [((id<ComItextpdfTextPdfDrawDrawInterface>) nil_chk([tabStop getLeader])) drawWithComItextpdfTextPdfPdfContentByte:graphics withFloat:xMarker withFloat:yMarker + descender withFloat:tabPosition withFloat:
#line 1606
              ascender - descender withFloat:yMarker];
            }
            else {
              
#line 1608
              tabPosition = xMarker;
            }
          }
          else {
            IOSObjectArray *tab = (IOSObjectArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_TAB_()], [IOSObjectArray class]);
            id<ComItextpdfTextPdfDrawDrawInterface> di = (id<ComItextpdfTextPdfDrawDrawInterface>) check_protocol_cast(IOSObjectArray_Get(nil_chk(tab), 0), @protocol(ComItextpdfTextPdfDrawDrawInterface));
            tabPosition = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(tab, 1), [JavaLangFloat class])))) floatValue] + [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(tab, 3), [JavaLangFloat class])))) floatValue];
            if (tabPosition > xMarker) {
              [((id<ComItextpdfTextPdfDrawDrawInterface>) nil_chk(di)) drawWithComItextpdfTextPdfPdfContentByte:graphics withFloat:xMarker withFloat:yMarker + descender withFloat:tabPosition withFloat:ascender - descender withFloat:
#line 1617
              yMarker];
            }
          }
          jfloat tmp = xMarker;
          xMarker = tabPosition;
          tabPosition = tmp;
        }
        if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_BACKGROUND_()]) {
          jboolean inText = [((ComItextpdfTextPdfPdfContentByte *) nil_chk(graphics)) getInText];
          if (inText && [ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
            [graphics endText];
          }
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComItextpdfTextChunk_get_BACKGROUND_()])
#line 1631
          subtract = 0;
          if (nextChunk == nil)
#line 1633
          subtract += hangingCorrection;
          IOSObjectArray *bgr = (IOSObjectArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_BACKGROUND_()], [IOSObjectArray class]);
          [graphics setColorFillWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *) check_class_cast(IOSObjectArray_Get(nil_chk(bgr), 0), [ComItextpdfTextBaseColor class])];
          IOSFloatArray *extra = (IOSFloatArray *) check_class_cast(IOSObjectArray_Get(bgr, 1), [IOSFloatArray class]);
          [graphics rectangleWithFloat:xMarker - IOSFloatArray_Get(nil_chk(extra), 0) withFloat:
#line 1638
          yMarker + descender - IOSFloatArray_Get(extra, 1) + [chunk getTextRise] withFloat:width - subtract + IOSFloatArray_Get(extra, 0) + IOSFloatArray_Get(
#line 1639
          extra, 2) withFloat:ascender - descender + IOSFloatArray_Get(extra, 1) + IOSFloatArray_Get(extra, 3)];
          [graphics fill];
          [graphics setGrayFillWithFloat:0];
          if (inText && [ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
            [graphics beginTextWithBoolean:YES];
          }
        }
        if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_UNDERLINE_()] && ![chunk isNewlineSplit]) {
          jboolean inText = [((ComItextpdfTextPdfPdfContentByte *) nil_chk(graphics)) getInText];
          if (inText && [ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
            [graphics endText];
          }
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComItextpdfTextChunk_get_UNDERLINE_()])
#line 1653
          subtract = 0;
          if (nextChunk == nil)
#line 1655
          subtract += hangingCorrection;
          IOSObjectArray *unders = (IOSObjectArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_UNDERLINE_()], [IOSObjectArray class]);
          ComItextpdfTextBaseColor *scolor = nil;
          for (jint k = 0; k < ((IOSObjectArray *) nil_chk(unders))->size_; ++k) {
            IOSObjectArray *obj = IOSObjectArray_Get(unders, k);
            scolor = (ComItextpdfTextBaseColor *) check_class_cast(IOSObjectArray_Get(nil_chk(obj), 0), [ComItextpdfTextBaseColor class]);
            IOSFloatArray *ps = (IOSFloatArray *) check_class_cast(IOSObjectArray_Get(obj, 1), [IOSFloatArray class]);
            if (scolor == nil)
#line 1663
            scolor = color;
            if (scolor != nil)
#line 1665
            [graphics setColorStrokeWithComItextpdfTextBaseColor:scolor];
            [graphics setLineWidthWithFloat:IOSFloatArray_Get(nil_chk(ps), 0) + fontSize * IOSFloatArray_Get(ps, 1)];
            jfloat shift = IOSFloatArray_Get(ps, 2) + fontSize * IOSFloatArray_Get(ps, 3);
            jint cap2 = J2ObjCFpToInt(IOSFloatArray_Get(ps, 4));
            if (cap2 != 0)
#line 1670
            [graphics setLineCapWithInt:cap2];
            [graphics moveToWithFloat:xMarker withFloat:yMarker + shift];
            [graphics lineToWithFloat:xMarker + width - subtract withFloat:yMarker + shift];
            [graphics stroke];
            if (scolor != nil)
#line 1675
            [graphics resetGrayStroke];
            if (cap2 != 0)
#line 1677
            [graphics setLineCapWithInt:0];
          }
          [graphics setLineWidthWithFloat:1];
          if (inText && [ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
            [graphics beginTextWithBoolean:YES];
          }
        }
        if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_ACTION_()]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComItextpdfTextChunk_get_ACTION_()])
#line 1687
          subtract = 0;
          if (nextChunk == nil)
#line 1689
          subtract += hangingCorrection;
          ComItextpdfTextPdfPdfAnnotation *annot = nil;
          if ([chunk isImage]) {
            annot = [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:
#line 1693
            writer_ withFloat:xMarker withFloat:yMarker + [chunk getImageOffsetY] withFloat:xMarker + width - subtract withFloat:
#line 1694
            yMarker + [chunk getImageHeight] + [chunk getImageOffsetY] withComItextpdfTextPdfPdfAction:
#line 1695
            (ComItextpdfTextPdfPdfAction *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_ACTION_()], [ComItextpdfTextPdfPdfAction class])];
          }
          else {
            
#line 1697
            annot = [[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:
#line 1698
            writer_ withFloat:xMarker withFloat:yMarker + descender + [chunk getTextRise] withFloat:xMarker + width -
#line 1699
            subtract withFloat:yMarker + ascender + [chunk getTextRise] withComItextpdfTextPdfPdfAction:
#line 1700
            (ComItextpdfTextPdfPdfAction *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_ACTION_()], [ComItextpdfTextPdfPdfAction class])];
          }
          [text addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot withBoolean:YES];
          if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_] && chunk->accessibleElement_ != nil) {
            jint structParent = [self getStructParentIndexWithId:annot];
            [((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTPARENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:structParent]];
            ComItextpdfTextPdfPdfStructureElement *strucElem = [((JavaUtilHashMap *) nil_chk(structElements_)) getWithId:[chunk->accessibleElement_ getId]];
            if (strucElem != nil) {
              ComItextpdfTextPdfPdfArray *kArray = [strucElem getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
              if (kArray == nil) {
                kArray = [[ComItextpdfTextPdfPdfArray alloc] init];
                ComItextpdfTextPdfPdfObject *k = [strucElem getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
                if (k != nil) {
                  [kArray addWithComItextpdfTextPdfPdfObject:k];
                }
                [strucElem putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_() withComItextpdfTextPdfPdfObject:kArray];
              }
              ComItextpdfTextPdfPdfDictionary *dict = [[ComItextpdfTextPdfPdfDictionary alloc] init];
              [dict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_OBJR_()];
              [dict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OBJ_() withComItextpdfTextPdfPdfObject:[annot getIndirectReference]];
              [((ComItextpdfTextPdfPdfArray *) nil_chk(kArray)) addWithComItextpdfTextPdfPdfObject:dict];
              [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getStructureTreeRoot])) setAnnotationMarkWithInt:structParent withComItextpdfTextPdfPdfIndirectReference:
#line 1722
              [strucElem getReference]];
            }
          }
        }
        
#line 1727
        if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_REMOTEGOTO_()]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComItextpdfTextChunk_get_REMOTEGOTO_()])
#line 1730
          subtract = 0;
          if (nextChunk == nil)
#line 1732
          subtract += hangingCorrection;
          IOSObjectArray *obj = (IOSObjectArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_REMOTEGOTO_()], [IOSObjectArray class]);
          NSString *filename = (NSString *) check_class_cast(IOSObjectArray_Get(nil_chk(obj), 0), [NSString class]);
          if ([IOSObjectArray_Get(obj, 1) isKindOfClass:[NSString class]])
#line 1736
          [self remoteGotoWithNSString:filename withNSString:(NSString *) check_class_cast(IOSObjectArray_Get(obj, 1), [NSString class]) withFloat:xMarker withFloat:
#line 1737
          yMarker + descender + [chunk getTextRise] withFloat:xMarker + width - subtract withFloat:yMarker +
#line 1738
          ascender + [chunk getTextRise]];
          else
#line 1740
          [self remoteGotoWithNSString:filename withInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(obj, 1), [JavaLangInteger class])))) intValue] withFloat:xMarker withFloat:yMarker + descender +
#line 1741
          [chunk getTextRise] withFloat:xMarker + width - subtract withFloat:
#line 1742
          yMarker + ascender + [chunk getTextRise]];
        }
        if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_LOCALGOTO_()]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComItextpdfTextChunk_get_LOCALGOTO_()])
#line 1747
          subtract = 0;
          if (nextChunk == nil)
#line 1749
          subtract += hangingCorrection;
          [self localGotoWithNSString:(NSString *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_LOCALGOTO_()], [NSString class]) withFloat:xMarker withFloat:yMarker withFloat:xMarker +
#line 1751
          width - subtract withFloat:yMarker + fontSize];
        }
        if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_LOCALDESTINATION_()]) {
          
#line 1759
          [self localDestinationWithNSString:(NSString *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_LOCALDESTINATION_()], [NSString class]) withComItextpdfTextPdfPdfDestination:
#line 1760
          [[ComItextpdfTextPdfPdfDestination alloc] initWithInt:ComItextpdfTextPdfPdfDestination_XYZ withFloat:xMarker withFloat:yMarker + fontSize withFloat:0]];
        }
        if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_GENERICTAG_()]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComItextpdfTextChunk_get_GENERICTAG_()])
#line 1765
          subtract = 0;
          if (nextChunk == nil)
#line 1767
          subtract += hangingCorrection;
          ComItextpdfTextRectangle *rect = [[ComItextpdfTextRectangle alloc] initWithFloat:xMarker withFloat:yMarker withFloat:xMarker + width - subtract withFloat:yMarker +
#line 1769
          fontSize];
          id<ComItextpdfTextPdfPdfPageEvent> pev = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPageEvent];
          if (pev != nil)
#line 1772
          [pev onGenericTagWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextDocument:self withComItextpdfTextRectangle:rect withNSString:(NSString *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_GENERICTAG_()], [NSString class])];
        }
        if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_PDFANNOTATION_()]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComItextpdfTextChunk_get_PDFANNOTATION_()])
#line 1777
          subtract = 0;
          if (nextChunk == nil)
#line 1779
          subtract += hangingCorrection;
          ComItextpdfTextPdfPdfAnnotation *annot = [ComItextpdfTextPdfPdfFormField shallowDuplicateWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_PDFANNOTATION_()], [ComItextpdfTextPdfPdfAnnotation class])];
          
#line 1782
          [((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:xMarker withFloat:yMarker + descender withFloat:xMarker + width -
#line 1783
          subtract withFloat:yMarker + ascender]];
          [text addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot withBoolean:YES];
        }
        IOSFloatArray *params = (IOSFloatArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_SKEW_()], [IOSFloatArray class]);
        JavaLangFloat *hs = (JavaLangFloat *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_HSCALE_()], [JavaLangFloat class]);
        if (params != nil || hs != nil) {
          jfloat b = 0, c = 0;
          if (params != nil) {
            b = IOSFloatArray_Get(params, 0);
            c = IOSFloatArray_Get(params, 1);
          }
          if (hs != nil)
#line 1795
          hScale = [hs floatValue];
          [text setTextMatrixWithFloat:hScale withFloat:b withFloat:c withFloat:1 withFloat:xMarker withFloat:yMarker];
        }
        if (!isJustified) {
          if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_WORD_SPACING_()]) {
            JavaLangFloat *ws = (JavaLangFloat *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_WORD_SPACING_()], [JavaLangFloat class]);
            [text setWordSpacingWithFloat:[((JavaLangFloat *) nil_chk(ws)) floatValue]];
          }
          
#line 1804
          if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_CHAR_SPACING_()]) {
            JavaLangFloat *cs = (JavaLangFloat *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_CHAR_SPACING_()], [JavaLangFloat class]);
            [text setCharacterSpacingWithFloat:[((JavaLangFloat *) nil_chk(cs)) floatValue]];
          }
        }
        if ([chunk isImage]) {
          ComItextpdfTextImage *image = [chunk getImage];
          width = [chunk getImageWidth];
          IOSFloatArray *matrix = [((ComItextpdfTextImage *) nil_chk(image)) matrixWithFloat:[chunk getImageScalePercentage]];
          *IOSFloatArray_GetRef(nil_chk(matrix), ComItextpdfTextImage_CX) = xMarker + [chunk getImageOffsetX] - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CX);
          *IOSFloatArray_GetRef(matrix, ComItextpdfTextImage_CY) = yMarker + [chunk getImageOffsetY] - IOSFloatArray_Get(matrix, ComItextpdfTextImage_CY);
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(graphics)) addImageWithComItextpdfTextImage:image withFloat:IOSFloatArray_Get(matrix, 0) withFloat:IOSFloatArray_Get(matrix, 1) withFloat:IOSFloatArray_Get(matrix, 2) withFloat:IOSFloatArray_Get(matrix, 3) withFloat:IOSFloatArray_Get(matrix, 4) withFloat:IOSFloatArray_Get(
#line 1816
          matrix, 5)];
          [text moveTextWithFloat:xMarker + lastBaseFactor + [chunk getImageWidth] - [text getXTLM] withFloat:0];
        }
      }
      
#line 1821
      xMarker += width;
      ++chunkStrokeIdx;
    }
    
#line 1825
    if (![chunk isImage] && [((ComItextpdfTextPdfPdfFont *) nil_chk([chunk font])) compareToWithId:currentFont] != 0) {
      currentFont = [chunk font];
      [text setFontAndSizeWithComItextpdfTextPdfBaseFont:[((ComItextpdfTextPdfPdfFont *) nil_chk(currentFont)) getFont] withFloat:[currentFont size]];
    }
    jfloat rise = 0;
    IOSObjectArray *textRender = (IOSObjectArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_TEXTRENDERMODE_()], [IOSObjectArray class]);
    jint tr = 0;
    jfloat strokeWidth = 1;
    ComItextpdfTextBaseColor *strokeColor = nil;
    JavaLangFloat *fr = (JavaLangFloat *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_SUBSUPSCRIPT_()], [JavaLangFloat class]);
    if (textRender != nil) {
      tr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(textRender, 0), [JavaLangInteger class])))) intValue] & 3;
      if (tr != ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL)
#line 1838
      [text setTextRenderingModeWithInt:tr];
      if (tr == ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_STROKE ||
#line 1840
      tr == ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE) {
        strokeWidth = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(textRender, 1), [JavaLangFloat class])))) floatValue];
        if (strokeWidth != 1)
#line 1843
        [text setLineWidthWithFloat:strokeWidth];
        strokeColor = (ComItextpdfTextBaseColor *) check_class_cast(IOSObjectArray_Get(textRender, 2), [ComItextpdfTextBaseColor class]);
        if (strokeColor == nil)
#line 1846
        strokeColor = color;
        if (strokeColor != nil)
#line 1848
        [text setColorStrokeWithComItextpdfTextBaseColor:strokeColor];
      }
    }
    if (fr != nil)
#line 1852
    rise = [fr floatValue];
    if (color != nil)
#line 1854
    [text setColorFillWithComItextpdfTextBaseColor:color];
    if (rise != 0)
#line 1856
    [text setTextRiseWithFloat:rise];
    if ([chunk isImage]) {
      adjustMatrix = YES;
    }
    else
#line 1859
    if ([chunk isHorizontalSeparator]) {
      ComItextpdfTextPdfPdfTextArray *array = [[ComItextpdfTextPdfPdfTextArray alloc] init];
      [array addWithFloat:-glueWidth * 1000.0f / [((ComItextpdfTextPdfPdfFont *) nil_chk(chunk->font__)) size] / hScale];
      [text showTextWithComItextpdfTextPdfPdfTextArray:array];
    }
    else
#line 1863
    if ([chunk isTab] && tabPosition != xMarker) {
      ComItextpdfTextPdfPdfTextArray *array = [[ComItextpdfTextPdfPdfTextArray alloc] init];
      [array addWithFloat:(tabPosition - xMarker) * 1000.0f / [((ComItextpdfTextPdfPdfFont *) nil_chk(chunk->font__)) size] / hScale];
      [text showTextWithComItextpdfTextPdfPdfTextArray:array];
    }
    else
#line 1870
    if (isJustified && numberOfSpaces > 0 && [chunk isSpecialEncoding]) {
      if (hScale != lastHScale) {
        lastHScale = hScale;
        [text setWordSpacingWithFloat:baseWordSpacing / hScale];
        [text setCharacterSpacingWithFloat:baseCharacterSpacing / hScale + [text getCharacterSpacing]];
      }
      NSString *s = [chunk description];
      jint idx = [((NSString *) nil_chk(s)) indexOf:' '];
      if (idx < 0)
#line 1879
      [text showTextWithNSString:s];
      else {
        jfloat spaceCorrection = -baseWordSpacing * 1000.0f / [((ComItextpdfTextPdfPdfFont *) nil_chk(chunk->font__)) size] / hScale;
        ComItextpdfTextPdfPdfTextArray *textArray = [[ComItextpdfTextPdfPdfTextArray alloc] initWithNSString:[s substring:0 endIndex:idx]];
        jint lastIdx = idx;
        while ((idx = [s indexOf:' ' fromIndex:lastIdx + 1]) >= 0) {
          [textArray addWithFloat:spaceCorrection];
          [textArray addWithNSString:[s substring:lastIdx endIndex:idx]];
          lastIdx = idx;
        }
        [textArray addWithFloat:spaceCorrection];
        [textArray addWithNSString:[s substring:lastIdx]];
        [text showTextWithComItextpdfTextPdfPdfTextArray:textArray];
      }
    }
    else {
      
#line 1894
      if (isJustified && hScale != lastHScale) {
        lastHScale = hScale;
        [text setWordSpacingWithFloat:baseWordSpacing / hScale];
        [text setCharacterSpacingWithFloat:baseCharacterSpacing / hScale + [text getCharacterSpacing]];
      }
      [text showTextWithNSString:[chunk description]];
    }
    
#line 1902
    if (rise != 0)
#line 1903
    [text setTextRiseWithFloat:0];
    if (color != nil)
#line 1905
    [text resetRGBColorFill];
    if (tr != ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL)
#line 1907
    [text setTextRenderingModeWithInt:ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL];
    if (strokeColor != nil)
#line 1909
    [text resetRGBColorStroke];
    if (strokeWidth != 1)
#line 1911
    [text setLineWidthWithFloat:1];
    if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_SKEW_()] || [chunk isAttributeWithNSString:ComItextpdfTextChunk_get_HSCALE_()]) {
      adjustMatrix = YES;
      [text setTextMatrixWithFloat:xMarker withFloat:yMarker];
    }
    if (!isJustified) {
      if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_CHAR_SPACING_()]) {
        [text setCharacterSpacingWithFloat:baseCharacterSpacing];
      }
      if ([chunk isAttributeWithNSString:ComItextpdfTextChunk_get_WORD_SPACING_()]) {
        [text setWordSpacingWithFloat:baseWordSpacing];
      }
    }
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_] && chunk->accessibleElement_ != nil) {
      [text closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:chunk->accessibleElement_];
    }
  }
  
#line 1929
  if (isJustified) {
    [text setWordSpacingWithFloat:0];
    [text setCharacterSpacingWithFloat:0];
    if ([line isNewlineSplit])
#line 1933
    lastBaseFactor = 0;
  }
  if (adjustMatrix)
#line 1936
  [text moveTextWithFloat:baseXMarker - [text getXTLM] withFloat:0];
  IOSObjectArray_Set(currentValues, 0, currentFont);
  IOSObjectArray_SetAndConsume(currentValues, 1, [[JavaLangFloat alloc] initWithFloat:lastBaseFactor]);
  return lastX;
}


#line 1998
- (jfloat)indentLeft {
  
#line 1999
  return [self leftWithFloat:((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->indentLeft_ + indentation_->listIndentLeft_ + indentation_->imageIndentLeft_ +
#line 2000
  indentation_->sectionIndentLeft_];
}


#line 2009
- (jfloat)indentRight {
  
#line 2010
  return [self rightWithFloat:((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->indentRight_ + indentation_->sectionIndentRight_ +
#line 2011
  indentation_->imageIndentRight_];
}


#line 2020
- (jfloat)indentTop {
  
#line 2021
  return [self topWithFloat:((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->indentTop_];
}


#line 2030
- (jfloat)indentBottom {
  
#line 2031
  return [self bottomWithFloat:((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->indentBottom_];
}


#line 2037
- (void)addSpacingWithFloat:(jfloat)extraspace
                  withFloat:(jfloat)oldleading
    withComItextpdfTextFont:(ComItextpdfTextFont *)f {
  
#line 2038
  if (extraspace == 0)
#line 2039
  return;
  if (pageEmpty_)
#line 2041
  return;
  if (currentHeight_ + [((ComItextpdfTextPdfPdfLine *) nil_chk(line_)) height] + leading_ > [self indentTop] - [self indentBottom])
#line 2043
  return;
  leading_ = extraspace;
  [self carriageReturn];
  if ([((ComItextpdfTextFont *) nil_chk(f)) isUnderlined] || [f isStrikethru]) {
    f = [[ComItextpdfTextFont alloc] initWithComItextpdfTextFont:f];
    jint style = [f getStyle];
    style &= ~ComItextpdfTextFont_UNDERLINE;
    style &= ~ComItextpdfTextFont_STRIKETHRU;
    [f setStyleWithInt:style];
  }
  ComItextpdfTextChunk *space = [[ComItextpdfTextChunk alloc] initWithNSString:@" " withComItextpdfTextFont:f];
  [space processWithComItextpdfTextElementListener:self];
  [self carriageReturn];
  leading_ = oldleading;
}


#line 2070
- (ComItextpdfTextPdfPdfDocument_PdfInfo *)getInfo {
  
#line 2071
  return info_;
}


#line 2082
- (ComItextpdfTextPdfPdfDocument_PdfCatalog *)getCatalogWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)pages {
  
#line 2083
  ComItextpdfTextPdfPdfDocument_PdfCatalog *catalog = [[ComItextpdfTextPdfPdfDocument_PdfCatalog alloc] initWithComItextpdfTextPdfPdfIndirectReference:pages withComItextpdfTextPdfPdfWriter:writer_];
  
#line 2086
  if ([((JavaUtilArrayList *) nil_chk([((ComItextpdfTextPdfPdfOutline *) nil_chk(rootOutline_)) getKids])) size] > 0) {
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGEMODE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_USEOUTLINES_()];
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTLINES_() withComItextpdfTextPdfPdfObject:[rootOutline_ indirectReference]];
  }
  
#line 2092
  [((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPdfVersion])) addToCatalogWithComItextpdfTextPdfPdfDictionary:catalog];
  
#line 2095
  [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk(viewerPreferences_)) addToCatalogWithComItextpdfTextPdfPdfDictionary:catalog];
  
#line 2098
  if (pageLabels_ != nil) {
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGELABELS_() withComItextpdfTextPdfPdfObject:[pageLabels_ getDictionaryWithComItextpdfTextPdfPdfWriter:writer_]];
  }
  
#line 2103
  [catalog addNamesWithJavaUtilTreeMap:localDestinations_ withJavaUtilHashMap:[self getDocumentLevelJS] withJavaUtilHashMap:documentFileAttachment_ withComItextpdfTextPdfPdfWriter:writer_];
  
#line 2106
  if (openActionName_ != nil) {
    ComItextpdfTextPdfPdfAction *action = [self getLocalGotoActionWithNSString:openActionName_];
    [catalog setOpenActionWithComItextpdfTextPdfPdfAction:action];
  }
  else
#line 2109
  if (openActionAction_ != nil)
#line 2110
  [catalog setOpenActionWithComItextpdfTextPdfPdfAction:openActionAction_];
  if (additionalActions_ != nil) {
    [catalog setAdditionalActionsWithComItextpdfTextPdfPdfDictionary:additionalActions_];
  }
  
#line 2116
  if (collection_ != nil) {
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLLECTION_() withComItextpdfTextPdfPdfObject:collection_];
  }
  
#line 2121
  if ([((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) hasValidAcroForm]) {
    @try {
      [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer_ addToBodyWithComItextpdfTextPdfPdfObject:[annotationsImp_ getAcroForm]])) getIndirectReference]];
    }
    @catch (JavaIoIOException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
  }
  
#line 2130
  if (language_ != nil) {
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LANG_() withComItextpdfTextPdfPdfObject:language_];
  }
  
#line 2134
  return catalog;
}


#line 2153
- (void)addOutlineWithComItextpdfTextPdfPdfOutline:(ComItextpdfTextPdfPdfOutline *)outline
                                      withNSString:(NSString *)name {
  
#line 2154
  [self localDestinationWithNSString:name withComItextpdfTextPdfPdfDestination:[((ComItextpdfTextPdfPdfOutline *) nil_chk(outline)) getPdfDestination]];
}


#line 2163
- (ComItextpdfTextPdfPdfOutline *)getRootOutline {
  
#line 2164
  return rootOutline_;
}


#line 2170
- (void)calculateOutlineCount {
  
#line 2171
  if ([((JavaUtilArrayList *) nil_chk([((ComItextpdfTextPdfPdfOutline *) nil_chk(rootOutline_)) getKids])) size] == 0)
#line 2172
  return;
  [self traverseOutlineCountWithComItextpdfTextPdfPdfOutline:rootOutline_];
}

- (void)traverseOutlineCountWithComItextpdfTextPdfPdfOutline:(ComItextpdfTextPdfPdfOutline *)outline {
  
#line 2180
  JavaUtilArrayList *kids = [((ComItextpdfTextPdfPdfOutline *) nil_chk(outline)) getKids];
  ComItextpdfTextPdfPdfOutline *parent = [outline parent];
  if ([((JavaUtilArrayList *) nil_chk(kids)) isEmpty]) {
    if (parent != nil) {
      [parent setCountWithInt:[parent getCount] + 1];
    }
  }
  else {
    
#line 2187
    for (jint k = 0; k < [kids size]; ++k) {
      [self traverseOutlineCountWithComItextpdfTextPdfPdfOutline:[kids getWithInt:k]];
    }
    if (parent != nil) {
      if ([outline isOpen]) {
        [parent setCountWithInt:[outline getCount] + [parent getCount] + 1];
      }
      else {
        
#line 2194
        [parent setCountWithInt:[parent getCount] + 1];
        [outline setCountWithInt:-[outline getCount]];
      }
    }
  }
}


#line 2204
- (void)writeOutlines {
  
#line 2205
  if ([((JavaUtilArrayList *) nil_chk([((ComItextpdfTextPdfPdfOutline *) nil_chk(rootOutline_)) getKids])) size] == 0)
#line 2206
  return;
  [self outlineTreeWithComItextpdfTextPdfPdfOutline:rootOutline_];
  (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:rootOutline_ withComItextpdfTextPdfPdfIndirectReference:[rootOutline_ indirectReference]];
}

- (void)outlineTreeWithComItextpdfTextPdfPdfOutline:(ComItextpdfTextPdfPdfOutline *)outline {
  
#line 2215
  [((ComItextpdfTextPdfPdfOutline *) nil_chk(outline)) setIndirectReferenceWithComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPdfIndirectReference]];
  if ([outline parent] != nil)
#line 2217
  [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfOutline *) nil_chk([outline parent])) indirectReference]];
  JavaUtilArrayList *kids = [outline getKids];
  jint size = [((JavaUtilArrayList *) nil_chk(kids)) size];
  for (jint k = 0; k < size; ++k)
#line 2221
  [self outlineTreeWithComItextpdfTextPdfPdfOutline:[kids getWithInt:k]];
  for (jint k = 0; k < size; ++k) {
    if (k > 0)
#line 2224
    [((ComItextpdfTextPdfPdfOutline *) nil_chk([kids getWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PREV_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfOutline *) nil_chk([kids getWithInt:k - 1])) indirectReference]];
    if (k < size - 1)
#line 2226
    [((ComItextpdfTextPdfPdfOutline *) nil_chk([kids getWithInt:k])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEXT_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfOutline *) nil_chk([kids getWithInt:k + 1])) indirectReference]];
  }
  if (size > 0) {
    [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfOutline *) nil_chk([kids getWithInt:0])) indirectReference]];
    [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LAST_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfOutline *) nil_chk([kids getWithInt:size - 1])) indirectReference]];
  }
  for (jint k = 0; k < size; ++k) {
    ComItextpdfTextPdfPdfOutline *kid = [kids getWithInt:k];
    (void) [writer_ addToBodyWithComItextpdfTextPdfPdfObject:kid withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfOutline *) nil_chk(kid)) indirectReference]];
  }
}

- (void)setViewerPreferencesWithInt:(jint)preferences {
  
#line 2245
  [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) setViewerPreferencesWithInt:preferences];
}


#line 2252
- (void)addViewerPreferenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                         withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 2253
  [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) addViewerPreferenceWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
}


#line 2266
- (void)setPageLabelsWithComItextpdfTextPdfPdfPageLabels:(ComItextpdfTextPdfPdfPageLabels *)pageLabels {
  
#line 2267
  self->pageLabels_ = pageLabels;
}


#line 2270
- (ComItextpdfTextPdfPdfPageLabels *)getPageLabels {
  
#line 2271
  return self->pageLabels_;
}


#line 2291
- (void)localGotoWithNSString:(NSString *)name
                    withFloat:(jfloat)llx
                    withFloat:(jfloat)lly
                    withFloat:(jfloat)urx
                    withFloat:(jfloat)ury {
  
#line 2293
  ComItextpdfTextPdfPdfAction *action = [self getLocalGotoActionWithNSString:name];
  [((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) addPlainAnnotationWithComItextpdfTextPdfPdfAnnotation:[[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withFloat:llx withFloat:lly withFloat:urx withFloat:ury withComItextpdfTextPdfPdfAction:action]];
}


#line 2313
- (void)remoteGotoWithNSString:(NSString *)filename
                  withNSString:(NSString *)name
                     withFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury {
  
#line 2315
  [((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) addPlainAnnotationWithComItextpdfTextPdfPdfAnnotation:[[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withFloat:llx withFloat:lly withFloat:urx withFloat:ury withComItextpdfTextPdfPdfAction:[[ComItextpdfTextPdfPdfAction alloc] initWithNSString:
#line 2316
  filename withNSString:name]]];
}


#line 2335
- (void)remoteGotoWithNSString:(NSString *)filename
                       withInt:(jint)page
                     withFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury {
  
#line 2337
  [self addAnnotationWithComItextpdfTextPdfPdfAnnotation:[[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withFloat:llx withFloat:lly withFloat:urx withFloat:ury withComItextpdfTextPdfPdfAction:[[ComItextpdfTextPdfPdfAction alloc] initWithNSString:filename withInt:page]]];
}


#line 2354
- (void)setActionWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action
                                       withFloat:(jfloat)llx
                                       withFloat:(jfloat)lly
                                       withFloat:(jfloat)urx
                                       withFloat:(jfloat)ury {
  
#line 2356
  [self addAnnotationWithComItextpdfTextPdfPdfAnnotation:[[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withFloat:llx withFloat:lly withFloat:urx withFloat:ury withComItextpdfTextPdfPdfAction:action]];
}

- (ComItextpdfTextPdfPdfAction *)getLocalGotoActionWithNSString:(NSString *)name {
  
#line 2365
  ComItextpdfTextPdfPdfAction *action;
  ComItextpdfTextPdfPdfDocument_Destination *dest = [((JavaUtilTreeMap *) nil_chk(localDestinations_)) getWithId:name];
  if (dest == nil)
#line 2368
  dest = [[ComItextpdfTextPdfPdfDocument_Destination alloc] initWithComItextpdfTextPdfPdfDocument:self];
  if (((ComItextpdfTextPdfPdfDocument_Destination *) nil_chk(dest))->action_ == nil) {
    if (dest->reference_ == nil) {
      dest->reference_ = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getPdfIndirectReference];
    }
    action = [[ComItextpdfTextPdfPdfAction alloc] initWithComItextpdfTextPdfPdfIndirectReference:dest->reference_];
    dest->action_ = action;
    (void) [localDestinations_ putWithId:name withId:dest];
  }
  else {
    
#line 2377
    action = dest->action_;
  }
  return action;
}


#line 2394
- (jboolean)localDestinationWithNSString:(NSString *)name
    withComItextpdfTextPdfPdfDestination:(ComItextpdfTextPdfPdfDestination *)destination {
  
#line 2395
  ComItextpdfTextPdfPdfDocument_Destination *dest = [((JavaUtilTreeMap *) nil_chk(localDestinations_)) getWithId:name];
  if (dest == nil)
#line 2397
  dest = [[ComItextpdfTextPdfPdfDocument_Destination alloc] initWithComItextpdfTextPdfPdfDocument:self];
  if (((ComItextpdfTextPdfPdfDocument_Destination *) nil_chk(dest))->destination_ != nil)
#line 2399
  return NO;
  dest->destination_ = destination;
  (void) [localDestinations_ putWithId:name withId:dest];
  if (![((ComItextpdfTextPdfPdfDestination *) nil_chk(destination)) hasPage])
#line 2403
  [destination addPageWithComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getCurrentPage]];
  return YES;
}


#line 2414
- (void)addJavaScriptWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)js {
  
#line 2415
  if ([((ComItextpdfTextPdfPdfAction *) nil_chk(js)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JS_()] == nil)
#line 2416
  @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 2417
  [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"only.javascript.actions.are.allowed" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  @try {
    (void) [((JavaUtilHashMap *) nil_chk(documentLevelJS_)) putWithId:[((JavaTextDecimalFormat *) nil_chk(ComItextpdfTextPdfPdfDocument_SIXTEEN_DIGITS_)) formatWithLong:jsCounter_++] withId:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:js])) getIndirectReference]];
  }
  @catch (JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 2426
- (void)addJavaScriptWithNSString:(NSString *)name
  withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)js {
  
#line 2427
  if ([((ComItextpdfTextPdfPdfAction *) nil_chk(js)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JS_()] == nil)
#line 2428
  @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 2429
  [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"only.javascript.actions.are.allowed" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  @try {
    (void) [((JavaUtilHashMap *) nil_chk(documentLevelJS_)) putWithId:name withId:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:js])) getIndirectReference]];
  }
  @catch (
#line 2432
  JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 2437
- (JavaUtilHashMap *)getDocumentLevelJS {
  
#line 2438
  return documentLevelJS_;
}

- (void)addFileAttachmentWithNSString:(NSString *)description_
withComItextpdfTextPdfPdfFileSpecification:(ComItextpdfTextPdfPdfFileSpecification *)fs {
  
#line 2444
  if (description_ == nil) {
    ComItextpdfTextPdfPdfString *desc = (ComItextpdfTextPdfPdfString *) check_class_cast([((ComItextpdfTextPdfPdfFileSpecification *) nil_chk(fs)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESC_()], [ComItextpdfTextPdfPdfString class]);
    if (desc == nil) {
      description_ = @"";
    }
    else {
      
#line 2449
      description_ = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:[desc getBytes] withNSString:nil];
    }
  }
  [((ComItextpdfTextPdfPdfFileSpecification *) nil_chk(fs)) addDescriptionWithNSString:description_ withBoolean:YES];
  if (((jint) [((NSString *) nil_chk(description_)) length]) == 0)
#line 2454
  description_ = @"Unnamed";
  NSString *fn = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:
#line 2456
  [((ComItextpdfTextPdfPdfString *) [[ComItextpdfTextPdfPdfString alloc] initWithNSString:description_ withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]) getBytes] withNSString:nil];
  jint k = 0;
  while ([((JavaUtilHashMap *) nil_chk(documentFileAttachment_)) containsKeyWithId:fn]) {
    ++k;
    fn = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:
#line 2461
    [((ComItextpdfTextPdfPdfString *) [[ComItextpdfTextPdfPdfString alloc] initWithNSString:JreStrcat("$CI", description_, ' ', k) withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]) getBytes] withNSString:nil];
  }
  (void) [documentFileAttachment_ putWithId:fn withId:[fs getReference]];
}


#line 2466
- (JavaUtilHashMap *)getDocumentFileAttachment {
  
#line 2467
  return documentFileAttachment_;
}


#line 2474
- (void)setOpenActionWithNSString:(NSString *)name {
  
#line 2475
  openActionName_ = name;
  openActionAction_ = nil;
}

- (void)setOpenActionWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 2482
  openActionAction_ = action;
  openActionName_ = nil;
}

- (void)addAdditionalActionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)actionType
                         withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 2489
  if (additionalActions_ == nil) {
    additionalActions_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  }
  if (action == nil)
#line 2493
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(additionalActions_)) removeWithComItextpdfTextPdfPdfName:actionType];
  else
#line 2495
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(additionalActions_)) putWithComItextpdfTextPdfPdfName:actionType withComItextpdfTextPdfPdfObject:action];
  if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(additionalActions_)) size] == 0)
#line 2497
  additionalActions_ = nil;
}


#line 2510
- (void)setCollectionWithComItextpdfTextPdfCollectionPdfCollection:(ComItextpdfTextPdfCollectionPdfCollection *)collection {
  
#line 2511
  self->collection_ = collection;
}


#line 2523
- (ComItextpdfTextPdfPdfAcroForm *)getAcroForm {
  
#line 2524
  return [((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) getAcroForm];
}


#line 2527
- (void)setSigFlagsWithInt:(jint)f {
  
#line 2528
  [((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) setSigFlagsWithInt:f];
}


#line 2531
- (void)addCalculationOrderWithComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)formField {
  
#line 2532
  [((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) addCalculationOrderWithComItextpdfTextPdfPdfFormField:formField];
}


#line 2535
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
  
#line 2536
  pageEmpty_ = NO;
  [((ComItextpdfTextPdfInternalPdfAnnotationsImp *) nil_chk(annotationsImp_)) addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot];
}

- (void)setLanguageWithNSString:(NSString *)language {
  
#line 2543
  self->language_ = [[ComItextpdfTextPdfPdfString alloc] initWithNSString:language];
}


#line 2560
- (void)setCropBoxSizeWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)crop {
  
#line 2561
  [self setBoxSizeWithNSString:@"crop" withComItextpdfTextRectangle:crop];
}


#line 2564
- (void)setBoxSizeWithNSString:(NSString *)boxName
  withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)size {
  
#line 2565
  if (size == nil)
#line 2566
  (void) [((JavaUtilHashMap *) nil_chk(boxSize_)) removeWithId:boxName];
  else
#line 2568
  (void) [((JavaUtilHashMap *) nil_chk(boxSize_)) putWithId:boxName withId:[[ComItextpdfTextPdfPdfRectangle alloc] initWithComItextpdfTextRectangle:size]];
}


#line 2571
- (void)setNewPageSizeAndMargins {
  
#line 2572
  pageSize_ = nextPageSize_;
  if (marginMirroring_ && ([self getPageNumber] & 1) == 0) {
    marginRight_ = nextMarginLeft_;
    marginLeft_ = nextMarginRight_;
  }
  else {
    
#line 2577
    marginLeft_ = nextMarginLeft_;
    marginRight_ = nextMarginRight_;
  }
  if (marginMirroringTopBottom_ && ([self getPageNumber] & 1) == 0) {
    marginTop_ = nextMarginBottom_;
    marginBottom_ = nextMarginTop_;
  }
  else {
    
#line 2584
    marginTop_ = nextMarginTop_;
    marginBottom_ = nextMarginBottom_;
  }
  if (![ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
    text_ = [[ComItextpdfTextPdfPdfContentByte alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
    [text_ reset];
  }
  else {
    
#line 2591
    text_ = graphics_;
  }
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) beginText];
  
#line 2595
  [text_ moveTextWithFloat:[self left] withFloat:[self top]];
  if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_])
#line 2597
  textEmptySize_ = [text_ size];
}


#line 2606
- (ComItextpdfTextRectangle *)getBoxSizeWithNSString:(NSString *)boxName {
  
#line 2607
  ComItextpdfTextPdfPdfRectangle *r = [((JavaUtilHashMap *) nil_chk(thisBoxSize_)) getWithId:boxName];
  if (r != nil)
#line 2609
  return [r getRectangle];
  return nil;
}


#line 2618
- (void)setPageEmptyWithBoolean:(jboolean)pageEmpty {
  
#line 2619
  self->pageEmpty_ = pageEmpty;
}


#line 2622
- (jboolean)isPageEmpty {
  
#line 2623
  if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
    return writer_ == nil || ([((ComItextpdfTextPdfPdfContentByte *) nil_chk([writer_ getDirectContent])) sizeWithBoolean:NO] == 0 &&
#line 2625
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk([writer_ getDirectContentUnder])) sizeWithBoolean:NO] == 0 &&
#line 2626
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) sizeWithBoolean:NO] - textEmptySize_ == 0 && (pageEmpty_ || [writer_ isPaused]));
  }
  else return writer_ == nil || ([((ComItextpdfTextPdfPdfContentByte *) nil_chk([writer_ getDirectContent])) size] == 0 &&
#line 2629
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk([writer_ getDirectContentUnder])) size] == 0 && (pageEmpty_ || [writer_ isPaused]));
}


#line 2640
- (void)setDurationWithInt:(jint)seconds {
  
#line 2641
  if (seconds > 0)
#line 2642
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addPageDictEntryWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DUR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:seconds]];
}


#line 2651
- (void)setTransitionWithComItextpdfTextPdfPdfTransition:(ComItextpdfTextPdfPdfTransition *)transition {
  
#line 2652
  [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addPageDictEntryWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfTransition *) nil_chk(transition)) getTransitionDictionary]];
}

- (void)setPageActionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)actionType
                   withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 2658
  if (pageAA_ == nil) {
    pageAA_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  }
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageAA_)) putWithComItextpdfTextPdfPdfName:actionType withComItextpdfTextPdfPdfObject:action];
}


#line 2666
- (void)setThumbnailWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  [writer_ addPageDictEntryWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_THUMB_() withComItextpdfTextPdfPdfObject:
#line 2668
  [writer_ getImageReferenceWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectImageSimpleWithComItextpdfTextImage:image]]];
}


#line 2676
- (ComItextpdfTextPdfPageResources *)getPageResources {
  
#line 2677
  return pageResources_;
}


#line 2691
- (jboolean)isStrictImageSequence {
  
#line 2692
  return self->strictImageSequence_;
}


#line 2702
- (void)setStrictImageSequenceWithBoolean:(jboolean)strictImageSequence {
  
#line 2703
  self->strictImageSequence_ = strictImageSequence;
}


#line 2712
- (void)clearTextWrap {
  
#line 2713
  jfloat tmpHeight = imageEnd_ - currentHeight_;
  if (line_ != nil) {
    tmpHeight += [line_ height];
  }
  if (imageEnd_ > -1 && tmpHeight > 0) {
    [self carriageReturn];
    currentHeight_ += tmpHeight;
  }
}


#line 2723
- (jint)getStructParentIndexWithId:(id)obj {
  
#line 2724
  IOSIntArray *i = [((JavaUtilHashMap *) nil_chk(structParentIndices_)) getWithId:obj];
  if (i == nil) {
    i = [IOSIntArray arrayWithInts:(jint[]){ [structParentIndices_ size], 0 } count:2];
    (void) [structParentIndices_ putWithId:obj withId:i];
  }
  return IOSIntArray_Get(nil_chk(i), 0);
}


#line 2732
- (jint)getNextMarkPointWithId:(id)obj {
  
#line 2733
  IOSIntArray *i = [((JavaUtilHashMap *) nil_chk(structParentIndices_)) getWithId:obj];
  if (i == nil) {
    i = [IOSIntArray arrayWithInts:(jint[]){ [structParentIndices_ size], 0 } count:2];
    (void) [structParentIndices_ putWithId:obj withId:i];
  }
  jint markPoint = IOSIntArray_Get(nil_chk(i), 1);
  (*IOSIntArray_GetRef(i, 1))++;
  return markPoint;
}


#line 2743
- (IOSIntArray *)getStructParentIndexAndNextMarkPointWithId:(id)obj {
  
#line 2744
  IOSIntArray *i = [((JavaUtilHashMap *) nil_chk(structParentIndices_)) getWithId:obj];
  if (i == nil) {
    i = [IOSIntArray arrayWithInts:(jint[]){ [structParentIndices_ size], 0 } count:2];
    (void) [structParentIndices_ putWithId:obj withId:i];
  }
  jint markPoint = IOSIntArray_Get(nil_chk(i), 1);
  (*IOSIntArray_GetRef(i, 1))++;
  return [IOSIntArray arrayWithInts:(jint[]){ IOSIntArray_Get(i, 0), markPoint } count:2];
}


#line 2768
- (void)addWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 2770
  if ([((ComItextpdfTextImage *) nil_chk(image)) hasAbsoluteY]) {
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(graphics_)) addImageWithComItextpdfTextImage:image];
    pageEmpty_ = NO;
    return;
  }
  
#line 2778
  if (currentHeight_ != 0 &&
#line 2779
  [self indentTop] - currentHeight_ - [image getScaledHeight] < [self indentBottom]) {
    if (!strictImageSequence_ && imageWait_ == nil) {
      imageWait_ = image;
      return;
    }
    [self newPage];
    if (currentHeight_ != 0 &&
#line 2786
    [self indentTop] - currentHeight_ - [image getScaledHeight] < [self indentBottom]) {
      imageWait_ = image;
      return;
    }
  }
  pageEmpty_ = NO;
  
#line 2793
  if (image == imageWait_)
#line 2794
  imageWait_ = nil;
  jboolean textwrap = ([image getAlignment] & ComItextpdfTextImage_TEXTWRAP) == ComItextpdfTextImage_TEXTWRAP &&
#line 2796
  !(([image getAlignment] & ComItextpdfTextImage_MIDDLE) == ComItextpdfTextImage_MIDDLE);
  jboolean underlying = ([image getAlignment] & ComItextpdfTextImage_UNDERLYING) == ComItextpdfTextImage_UNDERLYING;
  jfloat diff = leading_ / 2;
  if (textwrap) {
    diff += leading_;
  }
  jfloat lowerleft = [self indentTop] - currentHeight_ - [image getScaledHeight] - diff;
  IOSFloatArray *mt = [image matrix];
  jfloat startPosition = [self indentLeft] - IOSFloatArray_Get(nil_chk(mt), 4);
  if (([image getAlignment] & ComItextpdfTextImage_RIGHT) == ComItextpdfTextImage_RIGHT)
#line 2806
  startPosition = [self indentRight] - [image getScaledWidth] - IOSFloatArray_Get(mt, 4);
  if (([image getAlignment] & ComItextpdfTextImage_MIDDLE) == ComItextpdfTextImage_MIDDLE)
#line 2808
  startPosition = [self indentLeft] + ([self indentRight] - [self indentLeft] - [image getScaledWidth]) / 2 - IOSFloatArray_Get(
#line 2809
  mt, 4);
  if ([image hasAbsoluteX])
#line 2811
  startPosition = [image getAbsoluteX];
  if (textwrap) {
    if (imageEnd_ < 0 || imageEnd_ < currentHeight_ + [image getScaledHeight] + diff) {
      imageEnd_ = currentHeight_ + [image getScaledHeight] + diff;
    }
    if (([image getAlignment] & ComItextpdfTextImage_RIGHT) == ComItextpdfTextImage_RIGHT) {
      
#line 2818
      ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->imageIndentRight_ += [image getScaledWidth] + [image getIndentationLeft];
    }
    else {
      ((ComItextpdfTextPdfPdfDocument_Indentation *) nil_chk(indentation_))->imageIndentLeft_ += [image getScaledWidth] + [image getIndentationRight];
    }
  }
  else {
    
#line 2824
    if (([image getAlignment] & ComItextpdfTextImage_RIGHT) == ComItextpdfTextImage_RIGHT)
#line 2825
    startPosition -= [image getIndentationRight];
    else if (([image getAlignment] & ComItextpdfTextImage_MIDDLE) == ComItextpdfTextImage_MIDDLE)
#line 2827
    startPosition += [image getIndentationLeft] - [image getIndentationRight];
    else
#line 2829
    startPosition += [image getIndentationLeft];
  }
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(graphics_)) addImageWithComItextpdfTextImage:image withFloat:IOSFloatArray_Get(mt, 0) withFloat:IOSFloatArray_Get(mt, 1) withFloat:IOSFloatArray_Get(mt, 2) withFloat:IOSFloatArray_Get(mt, 3) withFloat:startPosition withFloat:lowerleft - IOSFloatArray_Get(mt, 5)];
  if (!(textwrap || underlying)) {
    currentHeight_ += [image getScaledHeight] + diff;
    [self flushLines];
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) moveTextWithFloat:0 withFloat:-([image getScaledHeight] + diff)];
    [self newLine];
  }
}


#line 2850
- (void)addPTableWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)ptable {
  
#line 2851
  ComItextpdfTextPdfColumnText *ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:[ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_] ? text_ : [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getDirectContent]];
  
#line 2854
  if ([((ComItextpdfTextPdfPdfPTable *) nil_chk(ptable)) getKeepTogether] && ![self fitsPageWithComItextpdfTextPdfPdfPTable:ptable withFloat:0.0f] && currentHeight_ > 0) {
    [self newPage];
  }
  if (currentHeight_ == 0) {
    [ct setAdjustFirstLineWithBoolean:NO];
  }
  [ct addElementWithComItextpdfTextElement:ptable];
  jboolean he = [ptable isHeadersInEvent];
  [ptable setHeadersInEventWithBoolean:YES];
  jint loop = 0;
  while (YES) {
    [ct setSimpleColumnWithFloat:[self indentLeft] withFloat:[self indentBottom] withFloat:[self indentRight] withFloat:[self indentTop] - currentHeight_];
    jint status = [ct go];
    if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) != 0) {
      if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) setTextMatrixWithFloat:[self indentLeft] withFloat:[ct getYLine]];
      }
      else {
        
#line 2871
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) moveTextWithFloat:0 withFloat:[ct getYLine] - [self indentTop] + currentHeight_];
      }
      currentHeight_ = [self indentTop] - [ct getYLine];
      break;
    }
    if ([self indentTop] - currentHeight_ == [ct getYLine])
#line 2877
    ++loop;
    else
#line 2879
    loop = 0;
    if (loop == 3) {
      @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"infinite.table.loop" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    [self newPage];
    if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
      [ct setCanvasWithComItextpdfTextPdfPdfContentByte:text_];
    }
  }
  [ptable setHeadersInEventWithBoolean:he];
}


#line 2893
- (void)addDivWithComItextpdfTextPdfPdfDiv:(ComItextpdfTextPdfPdfDiv *)div {
  
#line 2894
  if (floatingElements_ == nil) {
    floatingElements_ = [[JavaUtilArrayList alloc] init];
  }
  [((JavaUtilArrayList *) nil_chk(floatingElements_)) addWithId:div];
}


#line 2900
- (void)flushFloatingElements {
  
#line 2901
  if (floatingElements_ != nil && ![floatingElements_ isEmpty]) {
    JavaUtilArrayList *cachedFloatingElements = floatingElements_;
    floatingElements_ = nil;
    ComItextpdfTextPdfFloatLayout *fl = [[ComItextpdfTextPdfFloatLayout alloc] initWithJavaUtilList:cachedFloatingElements withBoolean:NO];
    jint loop = 0;
    while (YES) {
      [fl setSimpleColumnWithFloat:[self indentLeft] withFloat:[self indentBottom] withFloat:[self indentRight] withFloat:[self indentTop] - currentHeight_];
      @try {
        jint status = [fl layoutWithComItextpdfTextPdfPdfContentByte:[ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_] ? text_ : [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getDirectContent] withBoolean:NO];
        if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) != 0) {
          if ([ComItextpdfTextPdfPdfDocument isTaggedWithComItextpdfTextPdfPdfWriter:writer_]) {
            [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) setTextMatrixWithFloat:[self indentLeft] withFloat:[fl getYLine]];
          }
          else {
            
#line 2914
            [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) moveTextWithFloat:0 withFloat:[fl getYLine] - [self indentTop] + currentHeight_];
          }
          currentHeight_ = [self indentTop] - [fl getYLine];
          break;
        }
      }
      @catch (
#line 2919
      JavaLangException *exc) {
        return;
      }
      if ([self indentTop] - currentHeight_ == [fl getYLine] || [self isPageEmpty])
#line 2923
      ++loop;
      else {
        loop = 0;
      }
      if (loop == 2) {
        return;
      }
      [self newPage];
    }
  }
}


#line 2947
- (jboolean)fitsPageWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table
                                          withFloat:(jfloat)margin {
  
#line 2948
  if (![((ComItextpdfTextPdfPdfPTable *) nil_chk(table)) isLockedWidth]) {
    jfloat totalWidth = ([self indentRight] - [self indentLeft]) * [table getWidthPercentage] / 100;
    [table setTotalWidthWithFloat:totalWidth];
  }
  
#line 2953
  [self ensureNewLine];
  JavaLangFloat *spaceNeeded = [JavaLangFloat valueOfWithFloat:[table isSkipFirstHeader] ? [table getTotalHeight] -
#line 2955
  [table getHeaderHeight] : [table getTotalHeight]];
  return [spaceNeeded floatValue] + (currentHeight_ > 0 ? [table spacingBefore] : 0.0f) <= [self indentTop] -
#line 2957
  currentHeight_ - [self indentBottom] - margin;
}


#line 2960
+ (jboolean)isTaggedWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 2961
  return (writer != nil) && [writer isTagged];
}


#line 2964
- (ComItextpdfTextPdfPdfLine *)getLastLine {
  
#line 2965
  if ([((JavaUtilArrayList *) nil_chk(lines_)) size] > 0)
#line 2966
  return [lines_ getWithInt:[lines_ size] - 1];
  else
#line 2968
  return nil;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfDocument *)other {
  [super copyAllFieldsTo:other];
  other->additionalActions_ = additionalActions_;
  other->alignment_ = alignment_;
  other->anchorAction_ = anchorAction_;
  other->annotationsImp_ = annotationsImp_;
  other->boxSize_ = boxSize_;
  other->collection_ = collection_;
  other->currentHeight_ = currentHeight_;
  other->currentOutline_ = currentOutline_;
  other->documentFileAttachment_ = documentFileAttachment_;
  other->documentLevelJS_ = documentLevelJS_;
  other->firstPageEvent_ = firstPageEvent_;
  other->floatingElements_ = floatingElements_;
  other->graphics_ = graphics_;
  other->imageEnd_ = imageEnd_;
  other->imageWait_ = imageWait_;
  other->indentation_ = indentation_;
  other->info_ = info_;
  other->isSectionTitle_ = isSectionTitle_;
  other->jsCounter_ = jsCounter_;
  other->language_ = language_;
  other->lastElementType_ = lastElementType_;
  other->leading_ = leading_;
  other->leadingStack_ = leadingStack_;
  other->line_ = line_;
  other->lines_ = lines_;
  other->localDestinations_ = localDestinations_;
  other->markPoints_ = markPoints_;
  other->nextMarginBottom_ = nextMarginBottom_;
  other->nextMarginLeft_ = nextMarginLeft_;
  other->nextMarginRight_ = nextMarginRight_;
  other->nextMarginTop_ = nextMarginTop_;
  other->nextPageSize_ = nextPageSize_;
  other->openActionAction_ = openActionAction_;
  other->openActionName_ = openActionName_;
  other->openMCDocument_ = openMCDocument_;
  other->pageAA_ = pageAA_;
  other->pageEmpty_ = pageEmpty_;
  other->pageLabels_ = pageLabels_;
  other->pageResources_ = pageResources_;
  other->rootOutline_ = rootOutline_;
  other->strictImageSequence_ = strictImageSequence_;
  other->structElements_ = structElements_;
  other->structParentIndices_ = structParentIndices_;
  other->tabSettings_ = tabSettings_;
  other->text_ = text_;
  other->textEmptySize_ = textEmptySize_;
  other->thisBoxSize_ = thisBoxSize_;
  other->viewerPreferences_ = viewerPreferences_;
  other->writer_ = writer_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfDocument class]) {
    ComItextpdfTextPdfPdfDocument_SIXTEEN_DIGITS_ =
#line 2412
    [[JavaTextDecimalFormat alloc] initWithNSString:@"0000000000000000"];
    ComItextpdfTextPdfPdfDocument_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfDocument", NULL, 0x1, NULL },
    { "addWriterWithComItextpdfTextPdfPdfWriter:", "addWriter", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "getLeading", NULL, "F", 0x1, NULL },
    { "setLeadingWithFloat:", "setLeading", "V", 0x0, NULL },
    { "pushLeading", NULL, "V", 0x4, NULL },
    { "popLeading", NULL, "V", 0x4, NULL },
    { "getTabSettings", NULL, "Lcom.itextpdf.text.TabSettings;", 0x1, NULL },
    { "setTabSettingsWithComItextpdfTextTabSettings:", "setTabSettings", "V", 0x1, NULL },
    { "addWithComItextpdfTextElement:", "add", "Z", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "open", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "setXmpMetadataWithByteArray:", "setXmpMetadata", "V", 0x1, "Ljava.io.IOException;" },
    { "newPage", NULL, "Z", 0x1, NULL },
    { "setPageSizeWithComItextpdfTextRectangle:", "setPageSize", "Z", 0x1, NULL },
    { "setMarginsWithFloat:withFloat:withFloat:withFloat:", "setMargins", "Z", 0x1, NULL },
    { "setMarginMirroringWithBoolean:", "setMarginMirroring", "Z", 0x1, NULL },
    { "setMarginMirroringTopBottomWithBoolean:", "setMarginMirroringTopBottom", "Z", 0x1, NULL },
    { "setPageCountWithInt:", "setPageCount", "V", 0x1, NULL },
    { "resetPageCount", NULL, "V", 0x1, NULL },
    { "initPage", NULL, "V", 0x4, "Lcom.itextpdf.text.DocumentException;" },
    { "newLine", NULL, "V", 0x4, "Lcom.itextpdf.text.DocumentException;" },
    { "carriageReturn", NULL, "V", 0x4, NULL },
    { "getVerticalPositionWithBoolean:", "getVerticalPosition", "F", 0x1, NULL },
    { "ensureNewLine", NULL, "V", 0x4, NULL },
    { "flushLines", NULL, "F", 0x4, "Lcom.itextpdf.text.DocumentException;" },
    { "writeLineToContentWithComItextpdfTextPdfPdfLine:withComItextpdfTextPdfPdfContentByte:withComItextpdfTextPdfPdfContentByte:withNSObjectArray:withFloat:", "writeLineToContent", "F", 0x0, "Lcom.itextpdf.text.DocumentException;" },
    { "indentLeft", NULL, "F", 0x4, NULL },
    { "indentRight", NULL, "F", 0x4, NULL },
    { "indentTop", NULL, "F", 0x4, NULL },
    { "indentBottom", NULL, "F", 0x0, NULL },
    { "addSpacingWithFloat:withFloat:withComItextpdfTextFont:", "addSpacing", "V", 0x4, NULL },
    { "getInfo", NULL, "Lcom.itextpdf.text.pdf.PdfDocument$PdfInfo;", 0x0, NULL },
    { "getCatalogWithComItextpdfTextPdfPdfIndirectReference:", "getCatalog", "Lcom.itextpdf.text.pdf.PdfDocument$PdfCatalog;", 0x0, NULL },
    { "addOutlineWithComItextpdfTextPdfPdfOutline:withNSString:", "addOutline", "V", 0x0, NULL },
    { "getRootOutline", NULL, "Lcom.itextpdf.text.pdf.PdfOutline;", 0x1, NULL },
    { "calculateOutlineCount", NULL, "V", 0x0, NULL },
    { "traverseOutlineCountWithComItextpdfTextPdfPdfOutline:", "traverseOutlineCount", "V", 0x0, NULL },
    { "writeOutlines", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "outlineTreeWithComItextpdfTextPdfPdfOutline:", "outlineTree", "V", 0x0, "Ljava.io.IOException;" },
    { "setViewerPreferencesWithInt:", "setViewerPreferences", "V", 0x0, NULL },
    { "addViewerPreferenceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "addViewerPreference", "V", 0x0, NULL },
    { "setPageLabelsWithComItextpdfTextPdfPdfPageLabels:", "setPageLabels", "V", 0x0, NULL },
    { "getPageLabels", NULL, "Lcom.itextpdf.text.pdf.PdfPageLabels;", 0x1, NULL },
    { "localGotoWithNSString:withFloat:withFloat:withFloat:withFloat:", "localGoto", "V", 0x0, NULL },
    { "remoteGotoWithNSString:withNSString:withFloat:withFloat:withFloat:withFloat:", "remoteGoto", "V", 0x0, NULL },
    { "remoteGotoWithNSString:withInt:withFloat:withFloat:withFloat:withFloat:", "remoteGoto", "V", 0x0, NULL },
    { "setActionWithComItextpdfTextPdfPdfAction:withFloat:withFloat:withFloat:withFloat:", "setAction", "V", 0x0, NULL },
    { "getLocalGotoActionWithNSString:", "getLocalGotoAction", "Lcom.itextpdf.text.pdf.PdfAction;", 0x0, NULL },
    { "localDestinationWithNSString:withComItextpdfTextPdfPdfDestination:", "localDestination", "Z", 0x0, NULL },
    { "addJavaScriptWithComItextpdfTextPdfPdfAction:", "addJavaScript", "V", 0x0, NULL },
    { "addJavaScriptWithNSString:withComItextpdfTextPdfPdfAction:", "addJavaScript", "V", 0x0, NULL },
    { "getDocumentLevelJS", NULL, "Ljava.util.HashMap;", 0x0, NULL },
    { "addFileAttachmentWithNSString:withComItextpdfTextPdfPdfFileSpecification:", "addFileAttachment", "V", 0x0, "Ljava.io.IOException;" },
    { "getDocumentFileAttachment", NULL, "Ljava.util.HashMap;", 0x0, NULL },
    { "setOpenActionWithNSString:", "setOpenAction", "V", 0x0, NULL },
    { "setOpenActionWithComItextpdfTextPdfPdfAction:", "setOpenAction", "V", 0x0, NULL },
    { "addAdditionalActionWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfAction:", "addAdditionalAction", "V", 0x0, NULL },
    { "setCollectionWithComItextpdfTextPdfCollectionPdfCollection:", "setCollection", "V", 0x1, NULL },
    { "getAcroForm", NULL, "Lcom.itextpdf.text.pdf.PdfAcroForm;", 0x0, NULL },
    { "setSigFlagsWithInt:", "setSigFlags", "V", 0x0, NULL },
    { "addCalculationOrderWithComItextpdfTextPdfPdfFormField:", "addCalculationOrder", "V", 0x0, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addAnnotation", "V", 0x0, NULL },
    { "setLanguageWithNSString:", "setLanguage", "V", 0x0, NULL },
    { "setCropBoxSizeWithComItextpdfTextRectangle:", "setCropBoxSize", "V", 0x0, NULL },
    { "setBoxSizeWithNSString:withComItextpdfTextRectangle:", "setBoxSize", "V", 0x0, NULL },
    { "setNewPageSizeAndMargins", NULL, "V", 0x4, NULL },
    { "getBoxSizeWithNSString:", "getBoxSize", "Lcom.itextpdf.text.Rectangle;", 0x0, NULL },
    { "setPageEmptyWithBoolean:", "setPageEmpty", "V", 0x0, NULL },
    { "isPageEmpty", NULL, "Z", 0x0, NULL },
    { "setDurationWithInt:", "setDuration", "V", 0x0, NULL },
    { "setTransitionWithComItextpdfTextPdfPdfTransition:", "setTransition", "V", 0x0, NULL },
    { "setPageActionWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfAction:", "setPageAction", "V", 0x0, NULL },
    { "setThumbnailWithComItextpdfTextImage:", "setThumbnail", "V", 0x0, "Lcom.itextpdf.text.pdf.PdfException;Lcom.itextpdf.text.DocumentException;" },
    { "getPageResources", NULL, "Lcom.itextpdf.text.pdf.PageResources;", 0x0, NULL },
    { "isStrictImageSequence", NULL, "Z", 0x0, NULL },
    { "setStrictImageSequenceWithBoolean:", "setStrictImageSequence", "V", 0x0, NULL },
    { "clearTextWrap", NULL, "V", 0x1, NULL },
    { "getStructParentIndexWithId:", "getStructParentIndex", "I", 0x1, NULL },
    { "getNextMarkPointWithId:", "getNextMarkPoint", "I", 0x1, NULL },
    { "getStructParentIndexAndNextMarkPointWithId:", "getStructParentIndexAndNextMarkPoint", "[I", 0x1, NULL },
    { "addWithComItextpdfTextImage:", "add", "V", 0x4, "Lcom.itextpdf.text.pdf.PdfException;Lcom.itextpdf.text.DocumentException;" },
    { "addPTableWithComItextpdfTextPdfPdfPTable:", "addPTable", "V", 0x0, "Lcom.itextpdf.text.DocumentException;" },
    { "addDivWithComItextpdfTextPdfPdfDiv:", "addDiv", "V", 0x2, "Lcom.itextpdf.text.DocumentException;" },
    { "flushFloatingElements", NULL, "V", 0x2, "Lcom.itextpdf.text.DocumentException;" },
    { "fitsPageWithComItextpdfTextPdfPdfPTable:withFloat:", "fitsPage", "Z", 0x0, NULL },
    { "isTaggedWithComItextpdfTextPdfPdfWriter:", "isTagged", "Z", 0xa, NULL },
    { "getLastLine", NULL, "Lcom.itextpdf.text.pdf.PdfLine;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "structElements_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "openMCDocument_", NULL, 0x4, "Z", NULL,  },
    { "structParentIndices_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "markPoints_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "text_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
    { "graphics_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
    { "leading_", NULL, 0x4, "F", NULL,  },
    { "alignment_", NULL, 0x4, "I", NULL,  },
    { "currentHeight_", NULL, 0x4, "F", NULL,  },
    { "isSectionTitle_", NULL, 0x4, "Z", NULL,  },
    { "anchorAction_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfAction;", NULL,  },
    { "tabSettings_", NULL, 0x4, "Lcom.itextpdf.text.TabSettings;", NULL,  },
    { "leadingStack_", NULL, 0x2, "Ljava.util.Stack;", NULL,  },
    { "textEmptySize_", NULL, 0x4, "I", NULL,  },
    { "nextMarginLeft_", NULL, 0x4, "F", NULL,  },
    { "nextMarginRight_", NULL, 0x4, "F", NULL,  },
    { "nextMarginTop_", NULL, 0x4, "F", NULL,  },
    { "nextMarginBottom_", NULL, 0x4, "F", NULL,  },
    { "firstPageEvent_", NULL, 0x4, "Z", NULL,  },
    { "line_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfLine;", NULL,  },
    { "lines_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "lastElementType_", NULL, 0x4, "I", NULL,  },
    { "hangingPunctuation_", NULL, 0x18, "Ljava.lang.String;", &ComItextpdfTextPdfPdfDocument_hangingPunctuation_,  },
    { "indentation_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDocument$Indentation;", NULL,  },
    { "info_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDocument$PdfInfo;", NULL,  },
    { "rootOutline_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfOutline;", NULL,  },
    { "currentOutline_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfOutline;", NULL,  },
    { "viewerPreferences_", NULL, 0x4, "Lcom.itextpdf.text.pdf.internal.PdfViewerPreferencesImp;", NULL,  },
    { "pageLabels_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfPageLabels;", NULL,  },
    { "localDestinations_", NULL, 0x4, "Ljava.util.TreeMap;", NULL,  },
    { "jsCounter_", NULL, 0x0, "I", NULL,  },
    { "documentLevelJS_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "SIXTEEN_DIGITS_", NULL, 0x1c, "Ljava.text.DecimalFormat;", &ComItextpdfTextPdfPdfDocument_SIXTEEN_DIGITS_,  },
    { "documentFileAttachment_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "openActionName_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "openActionAction_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfAction;", NULL,  },
    { "additionalActions_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "collection_", NULL, 0x4, "Lcom.itextpdf.text.pdf.collection.PdfCollection;", NULL,  },
    { "annotationsImp_", NULL, 0x0, "Lcom.itextpdf.text.pdf.internal.PdfAnnotationsImp;", NULL,  },
    { "language_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfString;", NULL,  },
    { "nextPageSize_", NULL, 0x4, "Lcom.itextpdf.text.Rectangle;", NULL,  },
    { "thisBoxSize_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "boxSize_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "pageEmpty_", NULL, 0x2, "Z", NULL,  },
    { "pageAA_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "pageResources_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PageResources;", NULL,  },
    { "strictImageSequence_", NULL, 0x4, "Z", NULL,  },
    { "imageEnd_", NULL, 0x4, "F", NULL,  },
    { "imageWait_", NULL, 0x4, "Lcom.itextpdf.text.Image;", NULL,  },
    { "floatingElements_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfDocument = { "PdfDocument", "com.itextpdf.text.pdf", NULL, 0x1, 87, methods, 51, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfDocument;
}

@end


#line 116
@implementation ComItextpdfTextPdfPdfDocument_PdfInfo


#line 122
- (instancetype)initComItextpdfTextPdfPdfDocument_PdfInfo {
  if (self =
#line 123
  [super init]) {
    
#line 124
    [self addProducer];
    
#line 125
    [self addCreationDate];
  }
  return self;
}

- (instancetype)init {
  return [self initComItextpdfTextPdfPdfDocument_PdfInfo];
}


#line 139
- (instancetype)initWithNSString:(NSString *)author
                    withNSString:(NSString *)title
                    withNSString:(NSString *)subject {
  if (self =
#line 140
  [self initComItextpdfTextPdfPdfDocument_PdfInfo]) {
    
#line 141
    [self addTitleWithNSString:title];
    
#line 142
    [self addSubjectWithNSString:subject];
    
#line 143
    [self addAuthorWithNSString:author];
  }
  return self;
}


#line 153
- (void)addTitleWithNSString:(NSString *)title {
  
#line 154
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TITLE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:title withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
}


#line 164
- (void)addSubjectWithNSString:(NSString *)subject {
  
#line 165
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBJECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:subject withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
}


#line 175
- (void)addKeywordsWithNSString:(NSString *)keywords {
  
#line 176
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KEYWORDS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:keywords withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
}


#line 186
- (void)addAuthorWithNSString:(NSString *)author {
  
#line 187
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AUTHOR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:author withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
}


#line 197
- (void)addCreatorWithNSString:(NSString *)creator {
  
#line 198
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CREATOR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:creator withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
}


#line 205
- (void)addProducer {
  
#line 206
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PRODUCER_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:[((ComItextpdfTextVersion *) nil_chk([ComItextpdfTextVersion getInstance])) getVersion]]];
}


#line 213
- (void)addCreationDate {
  
#line 214
  ComItextpdfTextPdfPdfString *date = [[ComItextpdfTextPdfPdfDate alloc] init];
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CREATIONDATE_() withComItextpdfTextPdfPdfObject:date];
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MODDATE_() withComItextpdfTextPdfPdfObject:date];
}


#line 219
- (void)addkeyWithNSString:(NSString *)key
              withNSString:(NSString *)value {
  
#line 220
  if ([((NSString *) nil_chk(key)) isEqual:@"Producer"] || [key isEqual:@"CreationDate"])
#line 221
  return;
  [self putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:key] withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:value withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfInfo", NULL, 0x0, NULL },
    { "initWithNSString:withNSString:withNSString:", "PdfInfo", NULL, 0x0, NULL },
    { "addTitleWithNSString:", "addTitle", "V", 0x0, NULL },
    { "addSubjectWithNSString:", "addSubject", "V", 0x0, NULL },
    { "addKeywordsWithNSString:", "addKeywords", "V", 0x0, NULL },
    { "addAuthorWithNSString:", "addAuthor", "V", 0x0, NULL },
    { "addCreatorWithNSString:", "addCreator", "V", 0x0, NULL },
    { "addProducer", NULL, "V", 0x0, NULL },
    { "addCreationDate", NULL, "V", 0x0, NULL },
    { "addkeyWithNSString:withNSString:", "addkey", "V", 0x0, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfDocument_PdfInfo = { "PdfInfo", "com.itextpdf.text.pdf", "PdfDocument", 0x9, 10, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfPdfDocument_PdfInfo;
}

@end


#line 243
@implementation ComItextpdfTextPdfPdfDocument_PdfCatalog


#line 259
- (instancetype)initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)pages
                               withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self =
#line 260
  [super initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfDictionary_get_CATALOG_()]) {
    
#line 261
    self->writer_ = writer;
    
#line 262
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGES_() withComItextpdfTextPdfPdfObject:pages];
  }
  return self;
}


#line 277
- (void)addNamesWithJavaUtilTreeMap:(JavaUtilTreeMap *)localDestinations
                withJavaUtilHashMap:(JavaUtilHashMap *)documentLevelJS
                withJavaUtilHashMap:(JavaUtilHashMap *)documentFileAttachment
    withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 280
  if ([((JavaUtilTreeMap *) nil_chk(localDestinations)) isEmpty] && [((JavaUtilHashMap *) nil_chk(documentLevelJS)) isEmpty] &&
#line 281
  [((JavaUtilHashMap *) nil_chk(documentFileAttachment)) isEmpty])
#line 282
  return;
  @try {
    ComItextpdfTextPdfPdfDictionary *names = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    if (![localDestinations isEmpty]) {
      ComItextpdfTextPdfPdfArray *ar = [[ComItextpdfTextPdfPdfArray alloc] init];
      for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([localDestinations entrySet])) {
        NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
        ComItextpdfTextPdfPdfDocument_Destination *dest = [entry_ getValue];
        if (((ComItextpdfTextPdfPdfDocument_Destination *) nil_chk(dest))->destination_ == nil)
#line 291
        continue;
        ComItextpdfTextPdfPdfIndirectReference *ref = dest->reference_;
        [ar addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:name withNSString:nil]];
        [ar addWithComItextpdfTextPdfPdfObject:ref];
      }
      if ([ar size] > 0) {
        ComItextpdfTextPdfPdfDictionary *dests = [[ComItextpdfTextPdfPdfDictionary alloc] init];
        [dests putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_() withComItextpdfTextPdfPdfObject:ar];
        [names putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESTS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:dests])) getIndirectReference]];
      }
    }
    if (![((JavaUtilHashMap *) nil_chk(documentLevelJS)) isEmpty]) {
      ComItextpdfTextPdfPdfDictionary *tree = [ComItextpdfTextPdfPdfNameTree writeTreeWithJavaUtilHashMap:documentLevelJS withComItextpdfTextPdfPdfWriter:writer];
      [names putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JAVASCRIPT_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:tree])) getIndirectReference]];
    }
    if (![((JavaUtilHashMap *) nil_chk(documentFileAttachment)) isEmpty]) {
      [names putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EMBEDDEDFILES_() withComItextpdfTextPdfPdfObject:
#line 308
      [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfNameTree writeTreeWithJavaUtilHashMap:documentFileAttachment withComItextpdfTextPdfPdfWriter:writer]])) getIndirectReference]];
    }
    
#line 311
    if ([names size] > 0)
#line 312
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:names])) getIndirectReference]];
  }
  @catch (
#line 313
  JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 324
- (void)setOpenActionWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 325
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPENACTION_() withComItextpdfTextPdfPdfObject:action];
}


#line 334
- (void)setAdditionalActionsWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)actions {
  
#line 335
  @try {
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AA_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:actions])) getIndirectReference]];
  }
  @catch (
#line 337
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfDocument_PdfCatalog *)other {
  [super copyAllFieldsTo:other];
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfWriter:", "PdfCatalog", NULL, 0x0, NULL },
    { "addNamesWithJavaUtilTreeMap:withJavaUtilHashMap:withJavaUtilHashMap:withComItextpdfTextPdfPdfWriter:", "addNames", "V", 0x0, NULL },
    { "setOpenActionWithComItextpdfTextPdfPdfAction:", "setOpenAction", "V", 0x0, NULL },
    { "setAdditionalActionsWithComItextpdfTextPdfPdfDictionary:", "setAdditionalActions", "V", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfDocument_PdfCatalog = { "PdfCatalog", "com.itextpdf.text.pdf", "PdfDocument", 0x8, 4, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfDocument_PdfCatalog;
}

@end


#line 1947
@implementation ComItextpdfTextPdfPdfDocument_Indentation

- (instancetype)init {
  if (self = [super init]) {
    indentLeft_ =
#line 1953
    0;
    sectionIndentLeft_ =
#line 1956
    0;
    listIndentLeft_ =
#line 1962
    0;
    imageIndentLeft_ =
#line 1965
    0;
    indentRight_ =
#line 1971
    0;
    sectionIndentRight_ =
#line 1974
    0;
    imageIndentRight_ =
#line 1977
    0;
    indentTop_ =
#line 1983
    0;
    indentBottom_ =
#line 1989
    0;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfDocument_Indentation *)other {
  [super copyAllFieldsTo:other];
  other->imageIndentLeft_ = imageIndentLeft_;
  other->imageIndentRight_ = imageIndentRight_;
  other->indentBottom_ = indentBottom_;
  other->indentLeft_ = indentLeft_;
  other->indentRight_ = indentRight_;
  other->indentTop_ = indentTop_;
  other->listIndentLeft_ = listIndentLeft_;
  other->sectionIndentLeft_ = sectionIndentLeft_;
  other->sectionIndentRight_ = sectionIndentRight_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "indentLeft_", NULL, 0x0, "F", NULL,  },
    { "sectionIndentLeft_", NULL, 0x0, "F", NULL,  },
    { "listIndentLeft_", NULL, 0x0, "F", NULL,  },
    { "imageIndentLeft_", NULL, 0x0, "F", NULL,  },
    { "indentRight_", NULL, 0x0, "F", NULL,  },
    { "sectionIndentRight_", NULL, 0x0, "F", NULL,  },
    { "imageIndentRight_", NULL, 0x0, "F", NULL,  },
    { "indentTop_", NULL, 0x0, "F", NULL,  },
    { "indentBottom_", NULL, 0x0, "F", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfDocument_Indentation = { "Indentation", "com.itextpdf.text.pdf", "PdfDocument", 0x9, 1, methods, 9, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfDocument_Indentation;
}

@end


#line 2974
@implementation ComItextpdfTextPdfPdfDocument_Destination

- (instancetype)initWithComItextpdfTextPdfPdfDocument:(ComItextpdfTextPdfPdfDocument *)outer$ {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfDocument_Destination *)other {
  [super copyAllFieldsTo:other];
  other->action_ = action_;
  other->destination_ = destination_;
  other->reference_ = reference_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfDocument:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "action_", NULL, 0x1, "Lcom.itextpdf.text.pdf.PdfAction;", NULL,  },
    { "reference_", NULL, 0x1, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
    { "destination_", NULL, 0x1, "Lcom.itextpdf.text.pdf.PdfDestination;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfDocument_Destination = { "Destination", "com.itextpdf.text.pdf", "PdfDocument", 0x1, 1, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfDocument_Destination;
}

@end
