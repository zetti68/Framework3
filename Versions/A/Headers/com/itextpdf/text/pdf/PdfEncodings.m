//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfEncodings.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfEncodings.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/ExtraEncoding.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/System.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "java/nio/charset/CodingErrorAction.h"
#include "java/util/HashMap.h"

BOOL ComItextpdfTextPdfPdfEncodings_initialized = NO;


#line 60
@implementation ComItextpdfTextPdfPdfEncodings

IOSCharArray * ComItextpdfTextPdfPdfEncodings_winansiByteToChar_;
IOSCharArray * ComItextpdfTextPdfPdfEncodings_pdfEncodingByteToChar_;
ComItextpdfTextPdfIntHashtable * ComItextpdfTextPdfPdfEncodings_winansi_;
ComItextpdfTextPdfIntHashtable * ComItextpdfTextPdfPdfEncodings_pdfEncoding_;
JavaUtilHashMap * ComItextpdfTextPdfPdfEncodings_extraEncodings_;


#line 129
+ (IOSByteArray *)convertToBytesWithNSString:(NSString *)text
                                withNSString:(NSString *)encoding {
  
#line 130
  if (text == nil)
#line 131
  return [IOSByteArray arrayWithLength:0];
  if (encoding == nil || ((jint) [encoding length]) == 0) {
    jint len = ((jint) [((NSString *) nil_chk(text)) length]);
    IOSByteArray *b = [IOSByteArray arrayWithLength:len];
    for (jint k = 0; k < len; ++k)
#line 136
    *IOSByteArray_GetRef(b, k) = (jbyte) [text charAtWithInt:k];
    return b;
  }
  id<ComItextpdfTextPdfExtraEncoding> extra = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfPdfEncodings_extraEncodings_)) getWithId:[((NSString *) nil_chk(encoding)) lowercaseString]];
  if (extra != nil) {
    IOSByteArray *b = [extra charToByteWithNSString:text withNSString:encoding];
    if (b != nil)
#line 143
    return b;
  }
  ComItextpdfTextPdfIntHashtable *hash_ = nil;
  if ([encoding isEqual:ComItextpdfTextPdfBaseFont_get_WINANSI_()])
#line 147
  hash_ = ComItextpdfTextPdfPdfEncodings_winansi_;
  else if ([encoding isEqual:ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_()])
#line 149
  hash_ = ComItextpdfTextPdfPdfEncodings_pdfEncoding_;
  if (hash_ != nil) {
    IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
    jint len = ((IOSCharArray *) nil_chk(cc))->size_;
    jint ptr = 0;
    IOSByteArray *b = [IOSByteArray arrayWithLength:len];
    jint c = 0;
    for (jint k = 0; k < len; ++k) {
      jchar char1 = IOSCharArray_Get(cc, k);
      if (char1 < 128 || (char1 > 160 && char1 <= 255))
#line 159
      c = char1;
      else
#line 161
      c = [hash_ getWithInt:char1];
      if (c != 0)
#line 163
      *IOSByteArray_GetRef(b, ptr++) = (jbyte) c;
    }
    if (ptr == len)
#line 166
    return b;
    IOSByteArray *b2 = [IOSByteArray arrayWithLength:ptr];
    [JavaLangSystem arraycopyWithId:b withInt:0 withId:b2 withInt:0 withInt:ptr];
    return b2;
  }
  if ([encoding isEqual:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]) {
    
#line 173
    IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
    jint len = ((IOSCharArray *) nil_chk(cc))->size_;
    IOSByteArray *b = [IOSByteArray arrayWithLength:cc->size_ * 2 + 2];
    *IOSByteArray_GetRef(b, 0) = -2;
    *IOSByteArray_GetRef(b, 1) = -1;
    jint bptr = 2;
    for (jint k = 0; k < len; ++k) {
      jchar c = IOSCharArray_Get(cc, k);
      *IOSByteArray_GetRef(b, bptr++) = (jbyte) (RShift32(c, 8));
      *IOSByteArray_GetRef(b, bptr++) = (jbyte) (c & (jint) 0xff);
    }
    return b;
  }
  @try {
    JavaNioCharsetCharset *cc = [JavaNioCharsetCharset forNameWithNSString:encoding];
    JavaNioCharsetCharsetEncoder *ce = [((JavaNioCharsetCharset *) nil_chk(cc)) newEncoder];
    (void) [((JavaNioCharsetCharsetEncoder *) nil_chk(ce)) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JavaNioCharsetCodingErrorAction_get_IGNORE_()];
    JavaNioCharBuffer *cb = [JavaNioCharBuffer wrapWithCharArray:[((NSString *) nil_chk(text)) toCharArray]];
    JavaNioByteBuffer *bb = [ce encodeWithJavaNioCharBuffer:cb];
    (void) [((JavaNioByteBuffer *) nil_chk(bb)) rewind];
    jint lim = [bb limit];
    IOSByteArray *br = [IOSByteArray arrayWithLength:lim];
    (void) [bb getWithByteArray:br];
    return br;
  }
  @catch (JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 209
+ (IOSByteArray *)convertToBytesWithChar:(jchar)char1
                            withNSString:(NSString *)encoding {
  
#line 210
  if (encoding == nil || ((jint) [encoding length]) == 0)
#line 211
  return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  id<ComItextpdfTextPdfExtraEncoding> extra = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfPdfEncodings_extraEncodings_)) getWithId:[((NSString *) nil_chk(encoding)) lowercaseString]];
  if (extra != nil) {
    IOSByteArray *b = [extra charToByteWithChar:char1 withNSString:encoding];
    if (b != nil)
#line 216
    return b;
  }
  ComItextpdfTextPdfIntHashtable *hash_ = nil;
  if ([encoding isEqual:ComItextpdfTextPdfBaseFont_get_WINANSI_()])
#line 220
  hash_ = ComItextpdfTextPdfPdfEncodings_winansi_;
  else if ([encoding isEqual:ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_()])
#line 222
  hash_ = ComItextpdfTextPdfPdfEncodings_pdfEncoding_;
  if (hash_ != nil) {
    jint c = 0;
    if (char1 < 128 || (char1 > 160 && char1 <= 255))
#line 226
    c = char1;
    else
#line 228
    c = [hash_ getWithInt:char1];
    if (c != 0)
#line 230
    return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) c } count:1];
    else
#line 232
    return [IOSByteArray arrayWithLength:0];
  }
  if ([encoding isEqual:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]) {
    
#line 236
    IOSByteArray *b = [IOSByteArray arrayWithLength:4];
    *IOSByteArray_GetRef(b, 0) = -2;
    *IOSByteArray_GetRef(b, 1) = -1;
    *IOSByteArray_GetRef(b, 2) = (jbyte) (RShift32(char1, 8));
    *IOSByteArray_GetRef(b, 3) = (jbyte) (char1 & (jint) 0xff);
    return b;
  }
  @try {
    JavaNioCharsetCharset *cc = [JavaNioCharsetCharset forNameWithNSString:encoding];
    JavaNioCharsetCharsetEncoder *ce = [((JavaNioCharsetCharset *) nil_chk(cc)) newEncoder];
    (void) [((JavaNioCharsetCharsetEncoder *) nil_chk(ce)) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JavaNioCharsetCodingErrorAction_get_IGNORE_()];
    JavaNioCharBuffer *cb = [JavaNioCharBuffer wrapWithCharArray:[IOSCharArray arrayWithChars:(jchar[]){ char1 } count:1]];
    JavaNioByteBuffer *bb = [ce encodeWithJavaNioCharBuffer:cb];
    (void) [((JavaNioByteBuffer *) nil_chk(bb)) rewind];
    jint lim = [bb limit];
    IOSByteArray *br = [IOSByteArray arrayWithLength:lim];
    (void) [bb getWithByteArray:br];
    return br;
  }
  @catch (JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 266
+ (NSString *)convertToStringWithByteArray:(IOSByteArray *)bytes
                              withNSString:(NSString *)encoding {
  
#line 267
  if (bytes == nil)
#line 268
  return ComItextpdfTextPdfPdfObject_get_NOTHING_();
  if (encoding == nil || ((jint) [encoding length]) == 0) {
    IOSCharArray *c = [IOSCharArray arrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_];
    for (jint k = 0; k < bytes->size_; ++k)
#line 272
    *IOSCharArray_GetRef(c, k) = (jchar) (IOSByteArray_Get(bytes, k) & (jint) 0xff);
    return [NSString stringWithCharacters:c];
  }
  id<ComItextpdfTextPdfExtraEncoding> extra = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfPdfEncodings_extraEncodings_)) getWithId:[((NSString *) nil_chk(encoding)) lowercaseString]];
  if (extra != nil) {
    NSString *text = [extra byteToCharWithByteArray:bytes withNSString:encoding];
    if (text != nil)
#line 279
    return text;
  }
  IOSCharArray *ch = nil;
  if ([encoding isEqual:ComItextpdfTextPdfBaseFont_get_WINANSI_()])
#line 283
  ch = ComItextpdfTextPdfPdfEncodings_winansiByteToChar_;
  else if ([encoding isEqual:ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_()])
#line 285
  ch = ComItextpdfTextPdfPdfEncodings_pdfEncodingByteToChar_;
  if (ch != nil) {
    jint len = ((IOSByteArray *) nil_chk(bytes))->size_;
    IOSCharArray *c = [IOSCharArray arrayWithLength:len];
    for (jint k = 0; k < len; ++k) {
      *IOSCharArray_GetRef(c, k) = IOSCharArray_Get(ch, IOSByteArray_Get(bytes, k) & (jint) 0xff);
    }
    return [NSString stringWithCharacters:c];
  }
  @try {
    return [NSString stringWithBytes:bytes charsetName:encoding];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 306
+ (jboolean)isPdfDocEncodingWithNSString:(NSString *)text {
  
#line 307
  if (text == nil)
#line 308
  return YES;
  jint len = ((jint) [((NSString *) nil_chk(text)) length]);
  for (jint k = 0; k < len; ++k) {
    jchar char1 = [text charAtWithInt:k];
    if (char1 < 128 || (char1 > 160 && char1 <= 255))
#line 313
    continue;
    if (![((ComItextpdfTextPdfIntHashtable *) nil_chk(ComItextpdfTextPdfPdfEncodings_pdfEncoding_)) containsKeyWithInt:char1])
#line 315
    return NO;
  }
  return YES;
}

+ (void)addExtraEncodingWithNSString:(NSString *)name
 withComItextpdfTextPdfExtraEncoding:(id<ComItextpdfTextPdfExtraEncoding>)enc {
  
#line 326
  @synchronized(ComItextpdfTextPdfPdfEncodings_extraEncodings_) {
    JavaUtilHashMap *newEncodings = (JavaUtilHashMap *) check_class_cast([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfPdfEncodings_extraEncodings_)) clone], [JavaUtilHashMap class]);
    (void) [((JavaUtilHashMap *) nil_chk(newEncodings)) putWithId:[((NSString *) nil_chk(name)) lowercaseString] withId:enc];
    ComItextpdfTextPdfPdfEncodings_extraEncodings_ = newEncodings;
  }
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfEncodings class]) {
    ComItextpdfTextPdfPdfEncodings_winansiByteToChar_ = [IOSCharArray arrayWithChars:(jchar[]){
#line 62
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
#line 63
      16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
#line 64
      32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
#line 65
      48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
#line 66
      64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
#line 67
      80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#line 68
      96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
#line 69
      112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
#line 70
      8364, 65533, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 65533, 381, 65533,
#line 71
      65533, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 65533, 382, 376,
#line 72
      160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
#line 73
      176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
#line 74
      192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
#line 75
      208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
#line 76
      224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
#line 77
      240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 } count:256];
      ComItextpdfTextPdfPdfEncodings_pdfEncodingByteToChar_ = [IOSCharArray arrayWithChars:(jchar[]){
#line 80
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
#line 81
        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
#line 82
        32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
#line 83
        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
#line 84
        64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
#line 85
        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
#line 86
        96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
#line 87
        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
#line 88
        (jint) 0x2022, (jint) 0x2020, (jint) 0x2021, (jint) 0x2026, (jint) 0x2014, (jint) 0x2013, (jint) 0x0192, (jint) 0x2044, (jint) 0x2039, (jint) 0x203a, (jint) 0x2212, (jint) 0x2030, (jint) 0x201e, (jint) 0x201c, (jint) 0x201d, (jint) 0x2018,
#line 89
        (jint) 0x2019, (jint) 0x201a, (jint) 0x2122, (jint) 0xfb01, (jint) 0xfb02, (jint) 0x0141, (jint) 0x0152, (jint) 0x0160, (jint) 0x0178, (jint) 0x017d, (jint) 0x0131, (jint) 0x0142, (jint) 0x0153, (jint) 0x0161, (jint) 0x017e, 65533,
#line 90
        (jint) 0x20ac, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
#line 91
        176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
#line 92
        192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
#line 93
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
#line 94
        224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
#line 95
        240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255 } count:256];
        ComItextpdfTextPdfPdfEncodings_winansi_ =
#line 97
        [[ComItextpdfTextPdfIntHashtable alloc] init];
        ComItextpdfTextPdfPdfEncodings_pdfEncoding_ =
#line 99
        [[ComItextpdfTextPdfIntHashtable alloc] init];
        ComItextpdfTextPdfPdfEncodings_extraEncodings_ =
#line 101
        [[JavaUtilHashMap alloc] init];
        {
          
#line 104
          for (jint k = 128; k < 161; ++k) {
            jchar c = IOSCharArray_Get(ComItextpdfTextPdfPdfEncodings_winansiByteToChar_, k);
            if (c != 65533)
#line 107
            [ComItextpdfTextPdfPdfEncodings_winansi_ putWithInt:c withInt:k];
          }
          
#line 110
          for (jint k = 128; k < 161; ++k) {
            jchar c = IOSCharArray_Get(ComItextpdfTextPdfPdfEncodings_pdfEncodingByteToChar_, k);
            if (c != 65533)
#line 113
            [ComItextpdfTextPdfPdfEncodings_pdfEncoding_ putWithInt:c withInt:k];
          }
          
#line 116
          [ComItextpdfTextPdfPdfEncodings addExtraEncodingWithNSString:@"Wingdings" withComItextpdfTextPdfExtraEncoding:[[ComItextpdfTextPdfPdfEncodings_WingdingsConversion alloc] init]];
          [ComItextpdfTextPdfPdfEncodings addExtraEncodingWithNSString:@"Symbol" withComItextpdfTextPdfExtraEncoding:[[ComItextpdfTextPdfPdfEncodings_SymbolConversion alloc] initWithBoolean:YES]];
          [ComItextpdfTextPdfPdfEncodings addExtraEncodingWithNSString:@"ZapfDingbats" withComItextpdfTextPdfExtraEncoding:[[ComItextpdfTextPdfPdfEncodings_SymbolConversion alloc] initWithBoolean:NO]];
          [ComItextpdfTextPdfPdfEncodings addExtraEncodingWithNSString:@"SymbolTT" withComItextpdfTextPdfExtraEncoding:[[ComItextpdfTextPdfPdfEncodings_SymbolTTConversion alloc] init]];
          [ComItextpdfTextPdfPdfEncodings addExtraEncodingWithNSString:@"Cp437" withComItextpdfTextPdfExtraEncoding:[[ComItextpdfTextPdfPdfEncodings_Cp437Conversion alloc] init]];
        }
        ComItextpdfTextPdfPdfEncodings_initialized = YES;
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertToBytesWithNSString:withNSString:", "convertToBytes", "[B", 0x19, NULL },
    { "convertToBytesWithChar:withNSString:", "convertToBytes", "[B", 0x19, NULL },
    { "convertToStringWithByteArray:withNSString:", "convertToString", "Ljava.lang.String;", 0x19, NULL },
    { "isPdfDocEncodingWithNSString:", "isPdfDocEncoding", "Z", 0x9, NULL },
    { "addExtraEncodingWithNSString:withComItextpdfTextPdfExtraEncoding:", "addExtraEncoding", "V", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "winansiByteToChar_", NULL, 0x18, "[C", &ComItextpdfTextPdfPdfEncodings_winansiByteToChar_,  },
    { "pdfEncodingByteToChar_", NULL, 0x18, "[C", &ComItextpdfTextPdfPdfEncodings_pdfEncodingByteToChar_,  },
    { "winansi_", NULL, 0x18, "Lcom.itextpdf.text.pdf.IntHashtable;", &ComItextpdfTextPdfPdfEncodings_winansi_,  },
    { "pdfEncoding_", NULL, 0x18, "Lcom.itextpdf.text.pdf.IntHashtable;", &ComItextpdfTextPdfPdfEncodings_pdfEncoding_,  },
    { "extraEncodings_", NULL, 0x8, "Ljava.util.HashMap;", &ComItextpdfTextPdfPdfEncodings_extraEncodings_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfEncodings = { "PdfEncodings", "com.itextpdf.text.pdf", NULL, 0x1, 6, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfEncodings;
}

@end

BOOL ComItextpdfTextPdfPdfEncodings_WingdingsConversion_initialized = NO;


#line 333
@implementation ComItextpdfTextPdfPdfEncodings_WingdingsConversion

IOSByteArray * ComItextpdfTextPdfPdfEncodings_WingdingsConversion_table_;


#line 335
- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding {
  
#line 336
  if (char1 == ' ')
#line 337
  return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  else if (char1 >= 0x2701 && char1 <= 0x27be) {
    jbyte v = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfPdfEncodings_WingdingsConversion_table_), char1 - (jint) 0x2700);
    if (v != 0)
#line 341
    return [IOSByteArray arrayWithBytes:(jbyte[]){ v } count:1];
  }
  return [IOSByteArray arrayWithLength:0];
}


#line 346
- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding {
  
#line 347
  IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
  IOSByteArray *b = [IOSByteArray arrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
  jint ptr = 0;
  jint len = cc->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    if (c == ' ')
#line 354
    *IOSByteArray_GetRef(b, ptr++) = (jbyte) c;
    else if (c >= 0x2701 && c <= 0x27be) {
      jbyte v = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfPdfEncodings_WingdingsConversion_table_), c - (jint) 0x2700);
      if (v != 0)
#line 358
      *IOSByteArray_GetRef(b, ptr++) = v;
    }
  }
  if (ptr == len)
#line 362
  return b;
  IOSByteArray *b2 = [IOSByteArray arrayWithLength:ptr];
  [JavaLangSystem arraycopyWithId:b withInt:0 withId:b2 withInt:0 withInt:ptr];
  return b2;
}


#line 368
- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding {
  
#line 369
  return nil;
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfEncodings_WingdingsConversion class]) {
    ComItextpdfTextPdfPdfEncodings_WingdingsConversion_table_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 373
      0, 35, 34, 0, 0, 0, 41, 62, 81, 42,
#line 374
      0, 0, 65, 63, 0, 0, 0, 0, 0, -4,
#line 375
      0, 0, 0, -5, 0, 0, 0, 0, 0, 0,
#line 376
      86, 0, 88, 89, 0, 0, 0, 0, 0, 0,
#line 377
      0, 0, -75, 0, 0, 0, 0, 0, -74, 0,
#line 378
      0, 0, -83, -81, -84, 0, 0, 0, 0, 0,
#line 379
      0, 0, 0, 124, 123, 0, 0, 0, 84, 0,
#line 380
      0, 0, 0, 0, 0, 0, 0, -90, 0, 0,
#line 381
      0, 113, 114, 0, 0, 0, 117, 0, 0, 0,
#line 382
      0, 0, 0, 125, 126, 0, 0, 0, 0, 0,
#line 383
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 384
      0, 0, 0, 0, 0, 0, 0, 0, -116, -115,
#line 385
      -114, -113, -112, -111, -110, -109, -108, -107, -127, -126,
#line 386
      -125, -124, -123, -122, -121, -120, -119, -118, -116, -115,
#line 387
      -114, -113, -112, -111, -110, -109, -108, -107, -24, 0,
#line 388
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 389
      0, -24, -40, 0, 0, -60, -58, 0, 0, -16,
#line 390
      0, 0, 0, 0, 0, 0, 0, 0, 0, -36,
#line 391
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#line 392
      0 } count:191];
      ComItextpdfTextPdfPdfEncodings_WingdingsConversion_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "charToByteWithChar:withNSString:", "charToByte", "[B", 0x1, NULL },
    { "charToByteWithNSString:withNSString:", "charToByte", "[B", 0x1, NULL },
    { "byteToCharWithByteArray:withNSString:", "byteToChar", "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "table_", NULL, 0x1a, "[B", &ComItextpdfTextPdfPdfEncodings_WingdingsConversion_table_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfEncodings_WingdingsConversion = { "WingdingsConversion", "com.itextpdf.text.pdf", "PdfEncodings", 0xa, 4, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfEncodings_WingdingsConversion;
}

@end

BOOL ComItextpdfTextPdfPdfEncodings_Cp437Conversion_initialized = NO;


#line 396
@implementation ComItextpdfTextPdfPdfEncodings_Cp437Conversion

ComItextpdfTextPdfIntHashtable * ComItextpdfTextPdfPdfEncodings_Cp437Conversion_c2b_;
IOSCharArray * ComItextpdfTextPdfPdfEncodings_Cp437Conversion_table_;


#line 399
- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding {
  
#line 400
  IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
  IOSByteArray *b = [IOSByteArray arrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
  jint ptr = 0;
  jint len = cc->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    if (c < 128)
#line 407
    *IOSByteArray_GetRef(b, ptr++) = (jbyte) c;
    else {
      jbyte v = (jbyte) [((ComItextpdfTextPdfIntHashtable *) nil_chk(ComItextpdfTextPdfPdfEncodings_Cp437Conversion_c2b_)) getWithInt:c];
      if (v != 0)
#line 411
      *IOSByteArray_GetRef(b, ptr++) = v;
    }
  }
  if (ptr == len)
#line 415
  return b;
  IOSByteArray *b2 = [IOSByteArray arrayWithLength:ptr];
  [JavaLangSystem arraycopyWithId:b withInt:0 withId:b2 withInt:0 withInt:ptr];
  return b2;
}


#line 421
- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding {
  
#line 422
  if (char1 < 128)
#line 423
  return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  else {
    jbyte v = (jbyte) [((ComItextpdfTextPdfIntHashtable *) nil_chk(ComItextpdfTextPdfPdfEncodings_Cp437Conversion_c2b_)) getWithInt:char1];
    if (v != 0)
#line 427
    return [IOSByteArray arrayWithBytes:(jbyte[]){ v } count:1];
    else
#line 429
    return [IOSByteArray arrayWithLength:0];
  }
}


#line 433
- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding {
  
#line 434
  jint len = ((IOSByteArray *) nil_chk(b))->size_;
  IOSCharArray *cc = [IOSCharArray arrayWithLength:len];
  jint ptr = 0;
  for (jint k = 0; k < len; ++k) {
    jint c = IOSByteArray_Get(b, k) & (jint) 0xff;
    if (c < ' ')
#line 440
    continue;
    if (c < 128)
#line 442
    *IOSCharArray_GetRef(cc, ptr++) = (jchar) c;
    else {
      jchar v = IOSCharArray_Get(nil_chk(ComItextpdfTextPdfPdfEncodings_Cp437Conversion_table_), c - 128);
      *IOSCharArray_GetRef(cc, ptr++) = v;
    }
  }
  return [NSString stringWithCharacters:cc offset:0 length:ptr];
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfEncodings_Cp437Conversion class]) {
    ComItextpdfTextPdfPdfEncodings_Cp437Conversion_c2b_ =
#line 397
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    ComItextpdfTextPdfPdfEncodings_Cp437Conversion_table_ = [IOSCharArray arrayWithChars:(jchar[]){
#line 452
      0x00c7, 0x00fc, 0x00e9, 0x00e2, 0x00e4, 0x00e0, 0x00e5, 0x00e7, 0x00ea, 0x00eb, 0x00e8, 0x00ef, 0x00ee, 0x00ec, 0x00c4, 0x00c5,
#line 453
      0x00c9, 0x00e6, 0x00c6, 0x00f4, 0x00f6, 0x00f2, 0x00fb, 0x00f9, 0x00ff, 0x00d6, 0x00dc, 0x00a2, 0x00a3, 0x00a5, 0x20a7, 0x0192,
#line 454
      0x00e1, 0x00ed, 0x00f3, 0x00fa, 0x00f1, 0x00d1, 0x00aa, 0x00ba, 0x00bf, 0x2310, 0x00ac, 0x00bd, 0x00bc, 0x00a1, 0x00ab, 0x00bb,
#line 455
      0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255d, 0x255c, 0x255b, 0x2510,
#line 456
      0x2514, 0x2534, 0x252c, 0x251c, 0x2500, 0x253c, 0x255e, 0x255f, 0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256c, 0x2567,
#line 457
      0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256b, 0x256a, 0x2518, 0x250c, 0x2588, 0x2584, 0x258c, 0x2590, 0x2580,
#line 458
      0x03b1, 0x00df, 0x0393, 0x03c0, 0x03a3, 0x03c3, 0x00b5, 0x03c4, 0x03a6, 0x0398, 0x03a9, 0x03b4, 0x221e, 0x03c6, 0x03b5, 0x2229,
#line 459
      0x2261, 0x00b1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00f7, 0x2248, 0x00b0, 0x2219, 0x00b7, 0x221a, 0x207f, 0x00b2, 0x25a0, 0x00a0 } count:128];
      {
        
#line 463
        for (jint k = 0; k < ComItextpdfTextPdfPdfEncodings_Cp437Conversion_table_->size_; ++k)
#line 464
        [ComItextpdfTextPdfPdfEncodings_Cp437Conversion_c2b_ putWithInt:IOSCharArray_Get(ComItextpdfTextPdfPdfEncodings_Cp437Conversion_table_, k) withInt:k + 128];
      }
      ComItextpdfTextPdfPdfEncodings_Cp437Conversion_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "charToByteWithNSString:withNSString:", "charToByte", "[B", 0x1, NULL },
    { "charToByteWithChar:withNSString:", "charToByte", "[B", 0x1, NULL },
    { "byteToCharWithByteArray:withNSString:", "byteToChar", "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "c2b_", NULL, 0xa, "Lcom.itextpdf.text.pdf.IntHashtable;", &ComItextpdfTextPdfPdfEncodings_Cp437Conversion_c2b_,  },
    { "table_", NULL, 0x1a, "[C", &ComItextpdfTextPdfPdfEncodings_Cp437Conversion_table_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfEncodings_Cp437Conversion = { "Cp437Conversion", "com.itextpdf.text.pdf", "PdfEncodings", 0xa, 4, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfEncodings_Cp437Conversion;
}

@end

BOOL ComItextpdfTextPdfPdfEncodings_SymbolConversion_initialized = NO;


#line 468
@implementation ComItextpdfTextPdfPdfEncodings_SymbolConversion

ComItextpdfTextPdfIntHashtable * ComItextpdfTextPdfPdfEncodings_SymbolConversion_t1_;
ComItextpdfTextPdfIntHashtable * ComItextpdfTextPdfPdfEncodings_SymbolConversion_t2_;
IOSCharArray * ComItextpdfTextPdfPdfEncodings_SymbolConversion_table1_;
IOSCharArray * ComItextpdfTextPdfPdfEncodings_SymbolConversion_table2_;


#line 474
- (instancetype)initWithBoolean:(jboolean)symbol {
  if (self = [super init]) {
    
#line 475
    if (symbol)
#line 476
    translation_ = ComItextpdfTextPdfPdfEncodings_SymbolConversion_t1_;
    else
#line 478
    translation_ = ComItextpdfTextPdfPdfEncodings_SymbolConversion_t2_;
  }
  return self;
}


#line 481
- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding {
  
#line 482
  IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
  IOSByteArray *b = [IOSByteArray arrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
  jint ptr = 0;
  jint len = cc->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    jbyte v = (jbyte) [((ComItextpdfTextPdfIntHashtable *) nil_chk(translation_)) getWithInt:c];
    if (v != 0)
#line 490
    *IOSByteArray_GetRef(b, ptr++) = v;
  }
  if (ptr == len)
#line 493
  return b;
  IOSByteArray *b2 = [IOSByteArray arrayWithLength:ptr];
  [JavaLangSystem arraycopyWithId:b withInt:0 withId:b2 withInt:0 withInt:ptr];
  return b2;
}


#line 499
- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding {
  
#line 500
  jbyte v = (jbyte) [((ComItextpdfTextPdfIntHashtable *) nil_chk(translation_)) getWithInt:char1];
  if (v != 0)
#line 502
  return [IOSByteArray arrayWithBytes:(jbyte[]){ v } count:1];
  else
#line 504
  return [IOSByteArray arrayWithLength:0];
}


#line 507
- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding {
  
#line 508
  return nil;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfEncodings_SymbolConversion *)other {
  [super copyAllFieldsTo:other];
  other->translation_ = translation_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfEncodings_SymbolConversion class]) {
    ComItextpdfTextPdfPdfEncodings_SymbolConversion_t1_ =
#line 470
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    ComItextpdfTextPdfPdfEncodings_SymbolConversion_t2_ =
#line 471
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    ComItextpdfTextPdfPdfEncodings_SymbolConversion_table1_ = [IOSCharArray arrayWithChars:(jchar[]){
#line 512
      ' ', '!', 0x2200, '#', 0x2203, '%', '&', 0x220b, '(', ')', '*', '+', ',', '-', '.', '/',
#line 513
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?',
#line 514
      0x2245, 0x0391, 0x0392, 0x03a7, 0x0394, 0x0395, 0x03a6, 0x0393, 0x0397, 0x0399, 0x03d1, 0x039a, 0x039b, 0x039c, 0x039d, 0x039f,
#line 515
      0x03a0, 0x0398, 0x03a1, 0x03a3, 0x03a4, 0x03a5, 0x03c2, 0x03a9, 0x039e, 0x03a8, 0x0396, '[', 0x2234, ']', 0x22a5, '_',
#line 516
      0x0305, 0x03b1, 0x03b2, 0x03c7, 0x03b4, 0x03b5, 0x03d5, 0x03b3, 0x03b7, 0x03b9, 0x03c6, 0x03ba, 0x03bb, 0x03bc, 0x03bd, 0x03bf,
#line 517
      0x03c0, 0x03b8, 0x03c1, 0x03c3, 0x03c4, 0x03c5, 0x03d6, 0x03c9, 0x03be, 0x03c8, 0x03b6, '{', '|', '}', '~', 0x0000,
#line 518
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
#line 519
      0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
#line 520
      0x20ac, 0x03d2, 0x2032, 0x2264, 0x2044, 0x221e, 0x0192, 0x2663, 0x2666, 0x2665, 0x2660, 0x2194, 0x2190, 0x2191, 0x2192, 0x2193,
#line 521
      0x00b0, 0x00b1, 0x2033, 0x2265, 0x00d7, 0x221d, 0x2202, 0x2022, 0x00f7, 0x2260, 0x2261, 0x2248, 0x2026, 0x2502, 0x2500, 0x21b5,
#line 522
      0x2135, 0x2111, 0x211c, 0x2118, 0x2297, 0x2295, 0x2205, 0x2229, 0x222a, 0x2283, 0x2287, 0x2284, 0x2282, 0x2286, 0x2208, 0x2209,
#line 523
      0x2220, 0x2207, 0x00ae, 0x00a9, 0x2122, 0x220f, 0x221a, 0x2022, 0x00ac, 0x2227, 0x2228, 0x21d4, 0x21d0, 0x21d1, 0x21d2, 0x21d3,
#line 524
      0x25ca, 0x2329, 0x0000, 0x0000, 0x0000, 0x2211, 0x239b, 0x239c, 0x239d, 0x23a1, 0x23a2, 0x23a3, 0x23a7, 0x23a8, 0x23a9, 0x23aa,
#line 525
      0x0000, 0x232a, 0x222b, 0x2320, 0x23ae, 0x2321, 0x239e, 0x239f, 0x23a0, 0x23a4, 0x23a5, 0x23a6, 0x23ab, 0x23ac, 0x23ad, 0x0000 } count:224];
      ComItextpdfTextPdfPdfEncodings_SymbolConversion_table2_ = [IOSCharArray arrayWithChars:(jchar[]){
#line 529
        ' ', 0x2701, 0x2702, 0x2703, 0x2704, 0x260e, 0x2706, 0x2707, 0x2708, 0x2709, 0x261b, 0x261e, 0x270c, 0x270d, 0x270e, 0x270f,
#line 530
        0x2710, 0x2711, 0x2712, 0x2713, 0x2714, 0x2715, 0x2716, 0x2717, 0x2718, 0x2719, 0x271a, 0x271b, 0x271c, 0x271d, 0x271e, 0x271f,
#line 531
        0x2720, 0x2721, 0x2722, 0x2723, 0x2724, 0x2725, 0x2726, 0x2727, 0x2605, 0x2729, 0x272a, 0x272b, 0x272c, 0x272d, 0x272e, 0x272f,
#line 532
        0x2730, 0x2731, 0x2732, 0x2733, 0x2734, 0x2735, 0x2736, 0x2737, 0x2738, 0x2739, 0x273a, 0x273b, 0x273c, 0x273d, 0x273e, 0x273f,
#line 533
        0x2740, 0x2741, 0x2742, 0x2743, 0x2744, 0x2745, 0x2746, 0x2747, 0x2748, 0x2749, 0x274a, 0x274b, 0x25cf, 0x274d, 0x25a0, 0x274f,
#line 534
        0x2750, 0x2751, 0x2752, 0x25b2, 0x25bc, 0x25c6, 0x2756, 0x25d7, 0x2758, 0x2759, 0x275a, 0x275b, 0x275c, 0x275d, 0x275e, 0x0000,
#line 535
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
#line 536
        0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
#line 537
        0x0000, 0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x2663, 0x2666, 0x2665, 0x2660, 0x2460, 0x2461, 0x2462, 0x2463,
#line 538
        0x2464, 0x2465, 0x2466, 0x2467, 0x2468, 0x2469, 0x2776, 0x2777, 0x2778, 0x2779, 0x277a, 0x277b, 0x277c, 0x277d, 0x277e, 0x277f,
#line 539
        0x2780, 0x2781, 0x2782, 0x2783, 0x2784, 0x2785, 0x2786, 0x2787, 0x2788, 0x2789, 0x278a, 0x278b, 0x278c, 0x278d, 0x278e, 0x278f,
#line 540
        0x2790, 0x2791, 0x2792, 0x2793, 0x2794, 0x2192, 0x2194, 0x2195, 0x2798, 0x2799, 0x279a, 0x279b, 0x279c, 0x279d, 0x279e, 0x279f,
#line 541
        0x27a0, 0x27a1, 0x27a2, 0x27a3, 0x27a4, 0x27a5, 0x27a6, 0x27a7, 0x27a8, 0x27a9, 0x27aa, 0x27ab, 0x27ac, 0x27ad, 0x27ae, 0x27af,
#line 542
        0x0000, 0x27b1, 0x27b2, 0x27b3, 0x27b4, 0x27b5, 0x27b6, 0x27b7, 0x27b8, 0x27b9, 0x27ba, 0x27bb, 0x27bc, 0x27bd, 0x27be, 0x0000 } count:224];
        {
          
#line 546
          for (jint k = 0; k < ComItextpdfTextPdfPdfEncodings_SymbolConversion_table1_->size_; ++k) {
            jint v = IOSCharArray_Get(ComItextpdfTextPdfPdfEncodings_SymbolConversion_table1_, k);
            if (v != 0)
#line 549
            [ComItextpdfTextPdfPdfEncodings_SymbolConversion_t1_ putWithInt:v withInt:k + 32];
          }
          for (jint k = 0; k < ComItextpdfTextPdfPdfEncodings_SymbolConversion_table2_->size_; ++k) {
            jint v = IOSCharArray_Get(ComItextpdfTextPdfPdfEncodings_SymbolConversion_table2_, k);
            if (v != 0)
#line 554
            [ComItextpdfTextPdfPdfEncodings_SymbolConversion_t2_ putWithInt:v withInt:k + 32];
          }
        }
        ComItextpdfTextPdfPdfEncodings_SymbolConversion_initialized = YES;
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "SymbolConversion", NULL, 0x0, NULL },
    { "charToByteWithNSString:withNSString:", "charToByte", "[B", 0x1, NULL },
    { "charToByteWithChar:withNSString:", "charToByte", "[B", 0x1, NULL },
    { "byteToCharWithByteArray:withNSString:", "byteToChar", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "t1_", NULL, 0x1a, "Lcom.itextpdf.text.pdf.IntHashtable;", &ComItextpdfTextPdfPdfEncodings_SymbolConversion_t1_,  },
    { "t2_", NULL, 0x1a, "Lcom.itextpdf.text.pdf.IntHashtable;", &ComItextpdfTextPdfPdfEncodings_SymbolConversion_t2_,  },
    { "translation_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "table1_", NULL, 0x1a, "[C", &ComItextpdfTextPdfPdfEncodings_SymbolConversion_table1_,  },
    { "table2_", NULL, 0x1a, "[C", &ComItextpdfTextPdfPdfEncodings_SymbolConversion_table2_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfEncodings_SymbolConversion = { "SymbolConversion", "com.itextpdf.text.pdf", "PdfEncodings", 0xa, 4, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfEncodings_SymbolConversion;
}

@end


#line 559
@implementation ComItextpdfTextPdfPdfEncodings_SymbolTTConversion

- (IOSByteArray *)charToByteWithChar:(jchar)char1
                        withNSString:(NSString *)encoding {
  
#line 562
  if ((char1 & (jint) 0xff00) == 0 || (char1 & (jint) 0xff00) == (jint) 0xf000)
#line 563
  return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  else
#line 565
  return [IOSByteArray arrayWithLength:0];
}


#line 568
- (IOSByteArray *)charToByteWithNSString:(NSString *)text
                            withNSString:(NSString *)encoding {
  
#line 569
  IOSCharArray *ch = [((NSString *) nil_chk(text)) toCharArray];
  IOSByteArray *b = [IOSByteArray arrayWithLength:((IOSCharArray *) nil_chk(ch))->size_];
  jint ptr = 0;
  jint len = ch->size_;
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(ch, k);
    if ((c & (jint) 0xff00) == 0 || (c & (jint) 0xff00) == (jint) 0xf000)
#line 576
    *IOSByteArray_GetRef(b, ptr++) = (jbyte) c;
  }
  if (ptr == len)
#line 579
  return b;
  IOSByteArray *b2 = [IOSByteArray arrayWithLength:ptr];
  [JavaLangSystem arraycopyWithId:b withInt:0 withId:b2 withInt:0 withInt:ptr];
  return b2;
}


#line 585
- (NSString *)byteToCharWithByteArray:(IOSByteArray *)b
                         withNSString:(NSString *)encoding {
  
#line 586
  return nil;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "charToByteWithChar:withNSString:", "charToByte", "[B", 0x1, NULL },
    { "charToByteWithNSString:withNSString:", "charToByte", "[B", 0x1, NULL },
    { "byteToCharWithByteArray:withNSString:", "byteToChar", "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfEncodings_SymbolTTConversion = { "SymbolTTConversion", "com.itextpdf.text.pdf", "PdfEncodings", 0xa, 4, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfPdfEncodings_SymbolTTConversion;
}

@end
