//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BidiLine.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BidiLine.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/TabStop.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/BidiLine.h"
#include "com/itextpdf/text/pdf/BidiOrder.h"
#include "com/itextpdf/text/pdf/HyphenationEvent.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PdfChunk.h"
#include "com/itextpdf/text/pdf/PdfFont.h"
#include "com/itextpdf/text/pdf/PdfLine.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/draw/DrawInterface.h"
#include "com/itextpdf/text/pdf/draw/LineSeparator.h"
#include "com/itextpdf/text/pdf/languages/ArabicLigaturizer.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

BOOL ComItextpdfTextPdfBidiLine_initialized = NO;


#line 61
@implementation ComItextpdfTextPdfBidiLine

ComItextpdfTextPdfIntHashtable * ComItextpdfTextPdfBidiLine_mirrorChars_;


#line 95
- (instancetype)init {
  if (self = [super init]) {
    pieceSize_ = 256;
    text_ = [IOSCharArray arrayWithLength:
#line 65
    pieceSize_];
    detailChunks_ = [IOSObjectArray arrayWithLength:
#line 66
    pieceSize_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfChunk class]]];
    totalTextLength_ =
#line 67
    0;
    orderLevels_ = [IOSByteArray arrayWithLength:
#line 69
    pieceSize_];
    indexChars_ = [IOSIntArray arrayWithLength:
#line 70
    pieceSize_];
    chunks_ =
#line 72
    [[JavaUtilArrayList alloc] init];
    indexChunk_ =
#line 73
    0;
    indexChunkChar_ =
#line 74
    0;
    currentChar_ =
#line 75
    0;
    storedText_ = [IOSCharArray arrayWithLength:
#line 78
    0];
    storedDetailChunks_ = [IOSObjectArray arrayWithLength:
#line 79
    0 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfChunk class]]];
    storedTotalTextLength_ =
#line 80
    0;
    storedOrderLevels_ = [IOSByteArray arrayWithLength:
#line 82
    0];
    storedIndexChars_ = [IOSIntArray arrayWithLength:
#line 83
    0];
    storedIndexChunk_ =
#line 85
    0;
    storedIndexChunkChar_ =
#line 86
    0;
    storedCurrentChar_ =
#line 87
    0;
  }
  return self;
}


#line 98
- (instancetype)initWithComItextpdfTextPdfBidiLine:(ComItextpdfTextPdfBidiLine *)org {
  if (self = [super init]) {
    pieceSize_ =
#line 64
    256;
    text_ = [IOSCharArray arrayWithLength:
#line 65
    pieceSize_];
    detailChunks_ = [IOSObjectArray arrayWithLength:
#line 66
    pieceSize_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfChunk class]]];
    totalTextLength_ =
#line 67
    0;
    orderLevels_ = [IOSByteArray arrayWithLength:
#line 69
    pieceSize_];
    indexChars_ = [IOSIntArray arrayWithLength:
#line 70
    pieceSize_];
    chunks_ =
#line 72
    [[JavaUtilArrayList alloc] init];
    indexChunk_ =
#line 73
    0;
    indexChunkChar_ =
#line 74
    0;
    currentChar_ =
#line 75
    0;
    storedText_ = [IOSCharArray arrayWithLength:
#line 78
    0];
    storedDetailChunks_ = [IOSObjectArray arrayWithLength:
#line 79
    0 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfChunk class]]];
    storedTotalTextLength_ =
#line 80
    0;
    storedOrderLevels_ = [IOSByteArray arrayWithLength:
#line 82
    0];
    storedIndexChars_ = [IOSIntArray arrayWithLength:
#line 83
    0];
    storedIndexChunk_ =
#line 85
    0;
    storedIndexChunkChar_ =
#line 86
    0;
    storedCurrentChar_ =
#line 87
    0;
    
#line 99
    runDirection_ = ((ComItextpdfTextPdfBidiLine *) nil_chk(org))->runDirection_;
    
#line 100
    pieceSize_ = org->pieceSize_;
    
#line 101
    text_ = [org->text_ clone];
    
#line 102
    detailChunks_ = [org->detailChunks_ clone];
    
#line 103
    totalTextLength_ = org->totalTextLength_;
    
#line 105
    orderLevels_ = [org->orderLevels_ clone];
    
#line 106
    indexChars_ = [org->indexChars_ clone];
    
#line 108
    chunks_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:org->chunks_];
    
#line 109
    indexChunk_ = org->indexChunk_;
    
#line 110
    indexChunkChar_ = org->indexChunkChar_;
    
#line 111
    currentChar_ = org->currentChar_;
    
#line 113
    storedRunDirection_ = org->storedRunDirection_;
    
#line 114
    storedText_ = [org->storedText_ clone];
    
#line 115
    storedDetailChunks_ = [org->storedDetailChunks_ clone];
    
#line 116
    storedTotalTextLength_ = org->storedTotalTextLength_;
    
#line 118
    storedOrderLevels_ = [org->storedOrderLevels_ clone];
    
#line 119
    storedIndexChars_ = [org->storedIndexChars_ clone];
    
#line 121
    storedIndexChunk_ = org->storedIndexChunk_;
    
#line 122
    storedIndexChunkChar_ = org->storedIndexChunkChar_;
    
#line 123
    storedCurrentChar_ = org->storedCurrentChar_;
    
#line 125
    shortStore_ = org->shortStore_;
    
#line 126
    arabicOptions_ = org->arabicOptions_;
  }
  return self;
}


#line 129
- (jboolean)isEmpty {
  
#line 130
  return currentChar_ >= totalTextLength_ && indexChunk_ >= [((JavaUtilArrayList *) nil_chk(chunks_)) size];
}


#line 133
- (void)clearChunks {
  
#line 134
  [((JavaUtilArrayList *) nil_chk(chunks_)) clear];
  totalTextLength_ = 0;
  currentChar_ = 0;
}


#line 139
- (jboolean)getParagraphWithInt:(jint)runDirection {
  
#line 140
  self->runDirection_ = runDirection;
  currentChar_ = 0;
  totalTextLength_ = 0;
  
#line 144
  jboolean hasText = NO;
  jchar c;
  jchar uniC;
  ComItextpdfTextPdfBaseFont *bf;
  for (; indexChunk_ < [((JavaUtilArrayList *) nil_chk(chunks_)) size]; ++indexChunk_) {
    ComItextpdfTextPdfPdfChunk *ck = [chunks_ getWithInt:indexChunk_];
    bf = [((ComItextpdfTextPdfPdfFont *) nil_chk([((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) font])) getFont];
    NSString *s = [ck description];
    jint len = ((jint) [((NSString *) nil_chk(s)) length]);
    for (; indexChunkChar_ < len; ++indexChunkChar_) {
      c = [s charAtWithInt:indexChunkChar_];
      uniC = (jchar) [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getUnicodeEquivalentWithInt:c];
      if (uniC == 0x000d || uniC == 0x000a) {
        
#line 158
        if (uniC == 0x000d && indexChunkChar_ + 1 < len && [s charAtWithInt:indexChunkChar_ + 1] == 0x000a)
#line 159
        ++indexChunkChar_;
        ++indexChunkChar_;
        if (indexChunkChar_ >= len) {
          indexChunkChar_ = 0;
          ++indexChunk_;
        }
        hasText = YES;
        if (totalTextLength_ == 0)
#line 167
        IOSObjectArray_Set(nil_chk(detailChunks_), 0, ck);
        break;
      }
      [self addPieceWithChar:c withComItextpdfTextPdfPdfChunk:ck];
    }
    if (hasText)
#line 173
    break;
    indexChunkChar_ = 0;
  }
  if (totalTextLength_ == 0)
#line 177
  return hasText;
  
#line 180
  totalTextLength_ = [self trimRightWithInt:0 withInt:totalTextLength_ - 1] + 1;
  if (totalTextLength_ == 0) {
    return YES;
  }
  
#line 185
  if (runDirection == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_LTR || runDirection == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL) {
    if (((IOSByteArray *) nil_chk(orderLevels_))->size_ < totalTextLength_) {
      orderLevels_ = [IOSByteArray arrayWithLength:pieceSize_];
      indexChars_ = [IOSIntArray arrayWithLength:pieceSize_];
    }
    [ComItextpdfTextPdfLanguagesArabicLigaturizer processNumbersWithCharArray:text_ withInt:0 withInt:totalTextLength_ withInt:arabicOptions_];
    ComItextpdfTextPdfBidiOrder *order = [[ComItextpdfTextPdfBidiOrder alloc] initWithCharArray:text_ withInt:0 withInt:totalTextLength_ withByte:(jbyte) (runDirection == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL ? 1 : 0)];
    IOSByteArray *od = [order getLevels];
    for (jint k = 0; k < totalTextLength_; ++k) {
      *IOSByteArray_GetRef(orderLevels_, k) = IOSByteArray_Get(nil_chk(od), k);
      *IOSIntArray_GetRef(nil_chk(indexChars_), k) = k;
    }
    [self doArabicShapping];
    [self mirrorGlyphs];
  }
  totalTextLength_ = [self trimRightExWithInt:0 withInt:totalTextLength_ - 1] + 1;
  return YES;
}


#line 204
- (void)addChunkWithComItextpdfTextPdfPdfChunk:(ComItextpdfTextPdfPdfChunk *)chunk {
  
#line 205
  [((JavaUtilArrayList *) nil_chk(chunks_)) addWithId:chunk];
}


#line 208
- (void)addChunksWithJavaUtilArrayList:(JavaUtilArrayList *)chunks {
  
#line 209
  [((JavaUtilArrayList *) nil_chk(self->chunks_)) addAllWithJavaUtilCollection:chunks];
}


#line 212
- (void)addPieceWithChar:(jchar)c
withComItextpdfTextPdfPdfChunk:(ComItextpdfTextPdfPdfChunk *)chunk {
  
#line 213
  if (totalTextLength_ >= pieceSize_) {
    IOSCharArray *tempText = text_;
    IOSObjectArray *tempDetailChunks = detailChunks_;
    pieceSize_ *= 2;
    text_ = [IOSCharArray arrayWithLength:pieceSize_];
    detailChunks_ = [IOSObjectArray arrayWithLength:pieceSize_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfChunk class]]];
    [JavaLangSystem arraycopyWithId:tempText withInt:0 withId:text_ withInt:0 withInt:totalTextLength_];
    [JavaLangSystem arraycopyWithId:tempDetailChunks withInt:0 withId:detailChunks_ withInt:0 withInt:totalTextLength_];
  }
  *IOSCharArray_GetRef(nil_chk(text_), totalTextLength_) = c;
  IOSObjectArray_Set(nil_chk(detailChunks_), totalTextLength_++, chunk);
}


#line 226
- (void)save {
  
#line 227
  if (indexChunk_ > 0) {
    if (indexChunk_ >= [((JavaUtilArrayList *) nil_chk(chunks_)) size])
#line 229
    [chunks_ clear];
    else {
      for (--indexChunk_; indexChunk_ >= 0; --indexChunk_)
#line 232
      (void) [chunks_ removeWithInt:indexChunk_];
    }
    indexChunk_ = 0;
  }
  storedRunDirection_ = runDirection_;
  storedTotalTextLength_ = totalTextLength_;
  storedIndexChunk_ = indexChunk_;
  storedIndexChunkChar_ = indexChunkChar_;
  storedCurrentChar_ = currentChar_;
  shortStore_ = (currentChar_ < totalTextLength_);
  if (!shortStore_) {
    
#line 244
    if (((IOSCharArray *) nil_chk(storedText_))->size_ < totalTextLength_) {
      storedText_ = [IOSCharArray arrayWithLength:totalTextLength_];
      storedDetailChunks_ = [IOSObjectArray arrayWithLength:totalTextLength_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfChunk class]]];
    }
    [JavaLangSystem arraycopyWithId:text_ withInt:0 withId:storedText_ withInt:0 withInt:totalTextLength_];
    [JavaLangSystem arraycopyWithId:detailChunks_ withInt:0 withId:storedDetailChunks_ withInt:0 withInt:totalTextLength_];
  }
  if (runDirection_ == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_LTR || runDirection_ == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL) {
    if (((IOSByteArray *) nil_chk(storedOrderLevels_))->size_ < totalTextLength_) {
      storedOrderLevels_ = [IOSByteArray arrayWithLength:totalTextLength_];
      storedIndexChars_ = [IOSIntArray arrayWithLength:totalTextLength_];
    }
    [JavaLangSystem arraycopyWithId:orderLevels_ withInt:currentChar_ withId:storedOrderLevels_ withInt:currentChar_ withInt:totalTextLength_ - currentChar_];
    [JavaLangSystem arraycopyWithId:indexChars_ withInt:currentChar_ withId:storedIndexChars_ withInt:currentChar_ withInt:totalTextLength_ - currentChar_];
  }
}


#line 261
- (void)restore {
  
#line 262
  runDirection_ = storedRunDirection_;
  totalTextLength_ = storedTotalTextLength_;
  indexChunk_ = storedIndexChunk_;
  indexChunkChar_ = storedIndexChunkChar_;
  currentChar_ = storedCurrentChar_;
  if (!shortStore_) {
    
#line 269
    [JavaLangSystem arraycopyWithId:storedText_ withInt:0 withId:text_ withInt:0 withInt:totalTextLength_];
    [JavaLangSystem arraycopyWithId:storedDetailChunks_ withInt:0 withId:detailChunks_ withInt:0 withInt:totalTextLength_];
  }
  if (runDirection_ == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_LTR || runDirection_ == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL) {
    [JavaLangSystem arraycopyWithId:storedOrderLevels_ withInt:currentChar_ withId:orderLevels_ withInt:currentChar_ withInt:totalTextLength_ - currentChar_];
    [JavaLangSystem arraycopyWithId:storedIndexChars_ withInt:currentChar_ withId:indexChars_ withInt:currentChar_ withInt:totalTextLength_ - currentChar_];
  }
}


#line 278
- (void)mirrorGlyphs {
  
#line 279
  for (jint k = 0; k < totalTextLength_; ++k) {
    if ((IOSByteArray_Get(nil_chk(orderLevels_), k) & 1) == 1) {
      jint mirror = [((ComItextpdfTextPdfIntHashtable *) nil_chk(ComItextpdfTextPdfBidiLine_mirrorChars_)) getWithInt:IOSCharArray_Get(nil_chk(text_), k)];
      if (mirror != 0)
#line 283
      *IOSCharArray_GetRef(text_, k) = (jchar) mirror;
    }
  }
}


#line 288
- (void)doArabicShapping {
  
#line 289
  jint src = 0;
  jint dest = 0;
  for (; ; ) {
    while (src < totalTextLength_) {
      jchar c = IOSCharArray_Get(nil_chk(text_), src);
      if (c >= (jint) 0x0600 && c <= (jint) 0x06ff)
#line 295
      break;
      if (src != dest) {
        *IOSCharArray_GetRef(text_, dest) = IOSCharArray_Get(text_, src);
        IOSObjectArray_Set(nil_chk(detailChunks_), dest, IOSObjectArray_Get(detailChunks_, src));
        *IOSByteArray_GetRef(nil_chk(orderLevels_), dest) = IOSByteArray_Get(orderLevels_, src);
      }
      ++src;
      ++dest;
    }
    if (src >= totalTextLength_) {
      totalTextLength_ = dest;
      return;
    }
    jint startArabicIdx = src;
    ++src;
    while (src < totalTextLength_) {
      jchar c = IOSCharArray_Get(nil_chk(text_), src);
      if (c < (jint) 0x0600 || c > (jint) 0x06ff)
#line 313
      break;
      ++src;
    }
    jint arabicWordSize = src - startArabicIdx;
    jint size = [ComItextpdfTextPdfLanguagesArabicLigaturizer arabic_shapeWithCharArray:text_ withInt:startArabicIdx withInt:arabicWordSize withCharArray:text_ withInt:dest withInt:arabicWordSize withInt:arabicOptions_];
    if (startArabicIdx != dest) {
      for (jint k = 0; k < size; ++k) {
        IOSObjectArray_Set(nil_chk(detailChunks_), dest, IOSObjectArray_Get(detailChunks_, startArabicIdx));
        *IOSByteArray_GetRef(nil_chk(orderLevels_), dest++) = IOSByteArray_Get(orderLevels_, startArabicIdx++);
      }
    }
    else
#line 325
    dest += size;
  }
}


#line 329
- (ComItextpdfTextPdfPdfLine *)processLineWithFloat:(jfloat)leftX
                                          withFloat:(jfloat)width
                                            withInt:(jint)alignment
                                            withInt:(jint)runDirection
                                            withInt:(jint)arabicOptions
                                          withFloat:(jfloat)minY
                                          withFloat:(jfloat)yLine
                                          withFloat:(jfloat)descender {
  
#line 330
  self->arabicOptions_ = arabicOptions;
  [self save];
  jboolean isRTL = runDirection == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL;
  if (currentChar_ >= totalTextLength_) {
    jboolean hasText = [self getParagraphWithInt:runDirection];
    if (!hasText)
#line 336
    return nil;
    if (totalTextLength_ == 0) {
      JavaUtilArrayList *ar = [[JavaUtilArrayList alloc] init];
      ComItextpdfTextPdfPdfChunk *ck = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:@"" withComItextpdfTextPdfPdfChunk:IOSObjectArray_Get(nil_chk(detailChunks_), 0)];
      [ar addWithId:ck];
      return [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:0 withFloat:width withInt:alignment withBoolean:YES withJavaUtilArrayList:ar withBoolean:isRTL];
    }
  }
  jfloat originalWidth = width;
  jint lastSplit = -1;
  if (currentChar_ != 0)
#line 347
  currentChar_ = [self trimLeftExWithInt:currentChar_ withInt:totalTextLength_ - 1];
  
#line 349
  jint oldCurrentChar = currentChar_;
  jint uniC = 0;
  ComItextpdfTextPdfPdfChunk *ck = nil;
  jfloat charWidth = 0;
  ComItextpdfTextPdfPdfChunk *lastValidChunk = nil;
  ComItextpdfTextTabStop *tabStop = nil;
  jfloat tabStopAnchorPosition = JavaLangFloat_NaN;
  jfloat tabPosition = JavaLangFloat_NaN;
  jboolean surrogate = NO;
  for (; currentChar_ < totalTextLength_; ++currentChar_) {
    ck = IOSObjectArray_Get(nil_chk(detailChunks_), currentChar_);
    if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) isImage] && minY < yLine) {
      ComItextpdfTextImage *img = [ck getImage];
      if ([((ComItextpdfTextImage *) nil_chk(img)) isScaleToFitHeight] && yLine + 2 * descender - [img getScaledHeight] - [ck getImageOffsetY] - [img getSpacingBefore] < minY) {
        jfloat scalePercent = (yLine + 2 * descender - [ck getImageOffsetY] - [img getSpacingBefore] - minY) / [img getScaledHeight];
        [ck setImageScalePercentageWithFloat:scalePercent];
      }
    }
    surrogate = [ComItextpdfTextUtilities isSurrogatePairWithCharArray:text_ withInt:currentChar_];
    if (surrogate)
#line 369
    uniC = [ck getUnicodeEquivalentWithInt:[ComItextpdfTextUtilities convertToUtf32WithCharArray:text_ withInt:currentChar_]];
    else
#line 371
    uniC = [ck getUnicodeEquivalentWithInt:IOSCharArray_Get(nil_chk(text_), currentChar_)];
    if ([ComItextpdfTextPdfPdfChunk noPrintWithInt:uniC])
#line 373
    continue;
    if (surrogate)
#line 375
    charWidth = [ck getCharWidthWithInt:uniC];
    else {
      if ([ck isImage]) {
        charWidth = [ck getImageWidth];
      }
      else {
        
#line 380
        charWidth = [ck getCharWidthWithInt:IOSCharArray_Get(nil_chk(text_), currentChar_)];
      }
    }
    if (width - charWidth < 0) {
      
#line 386
      if (lastValidChunk == nil && [ck isImage]) {
        ComItextpdfTextImage *img = [ck getImage];
        if ([((ComItextpdfTextImage *) nil_chk(img)) isScaleToFitLineWhenOverflow]) {
          
#line 391
          jfloat scalePercent = width / [img getWidth];
          [ck setImageScalePercentageWithFloat:scalePercent];
          charWidth = width;
        }
      }
    }
    if ([ck isTab]) {
      if ([ck isAttributeWithNSString:ComItextpdfTextChunk_get_TABSETTINGS_()]) {
        lastSplit = currentChar_;
        if (tabStop != nil) {
          jfloat tabStopPosition = [tabStop getPositionWithFloat:tabPosition withFloat:originalWidth - width withFloat:tabStopAnchorPosition];
          width = originalWidth - (tabStopPosition + (originalWidth - width - tabPosition));
          if (width < 0) {
            tabStopPosition += width;
            width = 0;
          }
          [tabStop setPositionWithFloat:tabStopPosition];
        }
        
#line 410
        tabStop = [ComItextpdfTextPdfPdfChunk getTabStopWithComItextpdfTextPdfPdfChunk:ck withFloat:originalWidth - width];
        if ([((ComItextpdfTextTabStop *) nil_chk(tabStop)) getPosition] > originalWidth) {
          tabStop = nil;
          break;
        }
        [ck setTabStopWithComItextpdfTextTabStop:tabStop];
        if ([((ComItextpdfTextTabStop *) nil_chk(tabStop)) getAlignment] == ComItextpdfTextTabStop_AlignmentEnum_get_LEFT()) {
          width = originalWidth - [tabStop getPosition];
          tabStop = nil;
          tabPosition = JavaLangFloat_NaN;
          tabStopAnchorPosition = JavaLangFloat_NaN;
        }
        else {
          
#line 422
          tabPosition = originalWidth - width;
          tabStopAnchorPosition = JavaLangFloat_NaN;
        }
      }
      else {
        
#line 426
        IOSObjectArray *tab = (IOSObjectArray *) check_class_cast([ck getAttributeWithNSString:ComItextpdfTextChunk_get_TAB_()], [IOSObjectArray class]);
        
#line 428
        jfloat tabStopPosition = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(nil_chk(tab), 1), [JavaLangFloat class])))) floatValue];
        jboolean newLine = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(tab, 2), [JavaLangBoolean class])))) booleanValue];
        if (newLine && tabStopPosition < originalWidth - width) {
          return [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:originalWidth withFloat:width withInt:alignment withBoolean:YES withJavaUtilArrayList:[self createArrayOfPdfChunksWithInt:oldCurrentChar withInt:currentChar_ - 1] withBoolean:isRTL];
        }
        [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, currentChar_))) adjustLeftWithFloat:leftX];
        width = originalWidth - tabStopPosition;
      }
    }
    else if ([ck isSeparator]) {
      IOSObjectArray *sep = (IOSObjectArray *) check_class_cast([ck getAttributeWithNSString:ComItextpdfTextChunk_get_SEPARATOR_()], [IOSObjectArray class]);
      id<ComItextpdfTextPdfDrawDrawInterface> di = (id<ComItextpdfTextPdfDrawDrawInterface>) check_protocol_cast(IOSObjectArray_Get(nil_chk(sep), 0), @protocol(ComItextpdfTextPdfDrawDrawInterface));
      JavaLangBoolean *vertical = (JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(sep, 1), [JavaLangBoolean class]);
      if ([((JavaLangBoolean *) nil_chk(vertical)) booleanValue] && [(id) di isKindOfClass:[ComItextpdfTextPdfDrawLineSeparator class]]) {
        jfloat separatorWidth = originalWidth * [((ComItextpdfTextPdfDrawLineSeparator *) nil_chk(((ComItextpdfTextPdfDrawLineSeparator *) check_class_cast(di, [ComItextpdfTextPdfDrawLineSeparator class])))) getPercentage] / 100.0f;
        width -= separatorWidth;
        if (width < 0) {
          width = 0;
        }
      }
    }
    else {
      
#line 449
      jboolean splitChar = [ck isExtSplitCharacterWithInt:oldCurrentChar withInt:currentChar_ withInt:totalTextLength_ withCharArray:text_ withComItextpdfTextPdfPdfChunkArray:detailChunks_];
      if (splitChar && [JavaLangCharacter isWhitespaceWithChar:(jchar) uniC])
#line 451
      lastSplit = currentChar_;
      if (width - charWidth < 0)
#line 453
      break;
      if (tabStop != nil && [tabStop getAlignment] == ComItextpdfTextTabStop_AlignmentEnum_get_ANCHOR() && [JavaLangFloat isNaNWithFloat:tabStopAnchorPosition] && [tabStop getAnchorChar] == (jchar) uniC) {
        tabStopAnchorPosition = originalWidth - width;
      }
      width -= charWidth;
      if (splitChar)
#line 459
      lastSplit = currentChar_;
    }
    lastValidChunk = ck;
    if (surrogate)
#line 463
    ++currentChar_;
  }
  if (lastValidChunk == nil) {
    
#line 467
    ++currentChar_;
    if (surrogate)
#line 469
    ++currentChar_;
    return [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:originalWidth withFloat:0 withInt:alignment withBoolean:NO withJavaUtilArrayList:[self createArrayOfPdfChunksWithInt:currentChar_ - 1 withInt:currentChar_ - 1] withBoolean:isRTL];
  }
  
#line 473
  if (tabStop != nil) {
    jfloat tabStopPosition = [tabStop getPositionWithFloat:tabPosition withFloat:originalWidth - width withFloat:tabStopAnchorPosition];
    width = originalWidth - (tabStopPosition + (originalWidth - width - tabPosition));
    if (width < 0) {
      tabStopPosition += width;
      width = 0;
    }
    [tabStop setPositionWithFloat:tabStopPosition];
  }
  
#line 483
  if (currentChar_ >= totalTextLength_) {
    
#line 485
    return [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:originalWidth withFloat:width withInt:alignment withBoolean:YES withJavaUtilArrayList:[self createArrayOfPdfChunksWithInt:oldCurrentChar withInt:totalTextLength_ - 1] withBoolean:isRTL];
  }
  jint newCurrentChar = [self trimRightExWithInt:oldCurrentChar withInt:currentChar_ - 1];
  if (newCurrentChar < oldCurrentChar) {
    
#line 490
    return [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:originalWidth withFloat:width withInt:alignment withBoolean:NO withJavaUtilArrayList:[self createArrayOfPdfChunksWithInt:oldCurrentChar withInt:currentChar_ - 1] withBoolean:isRTL];
  }
  if (newCurrentChar == currentChar_ - 1) {
    id<ComItextpdfTextPdfHyphenationEvent> he = (id<ComItextpdfTextPdfHyphenationEvent>) check_protocol_cast([((ComItextpdfTextPdfPdfChunk *) nil_chk(lastValidChunk)) getAttributeWithNSString:ComItextpdfTextChunk_get_HYPHENATION_()], @protocol(ComItextpdfTextPdfHyphenationEvent));
    if (he != nil) {
      IOSIntArray *word = [self getWordWithInt:oldCurrentChar withInt:newCurrentChar];
      if (word != nil) {
        jfloat testWidth = width + [self getWidthWithInt:IOSIntArray_Get(word, 0) withInt:currentChar_ - 1];
        NSString *pre = [he getHyphenatedWordPreWithNSString:[NSString stringWithCharacters:text_ offset:IOSIntArray_Get(word, 0) length:IOSIntArray_Get(word, 1) - IOSIntArray_Get(word, 0)] withComItextpdfTextPdfBaseFont:[((ComItextpdfTextPdfPdfFont *) nil_chk([lastValidChunk font])) getFont] withFloat:[((ComItextpdfTextPdfPdfFont *) nil_chk([lastValidChunk font])) size] withFloat:testWidth];
        NSString *post = [he getHyphenatedWordPost];
        if (((jint) [((NSString *) nil_chk(pre)) length]) > 0) {
          ComItextpdfTextPdfPdfChunk *extra = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:pre withComItextpdfTextPdfPdfChunk:lastValidChunk];
          currentChar_ = IOSIntArray_Get(word, 1) - ((jint) [((NSString *) nil_chk(post)) length]);
          return [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:originalWidth withFloat:testWidth - [lastValidChunk widthWithNSString:pre] withInt:alignment withBoolean:NO withJavaUtilArrayList:[self createArrayOfPdfChunksWithInt:oldCurrentChar withInt:IOSIntArray_Get(word, 0) - 1 withComItextpdfTextPdfPdfChunk:extra] withBoolean:isRTL];
        }
      }
    }
  }
  if (lastSplit == -1 || lastSplit >= newCurrentChar) {
    
#line 510
    return [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:originalWidth withFloat:width + [self getWidthWithInt:newCurrentChar + 1 withInt:currentChar_ - 1] withInt:alignment withBoolean:NO withJavaUtilArrayList:[self createArrayOfPdfChunksWithInt:oldCurrentChar withInt:newCurrentChar] withBoolean:isRTL];
  }
  
#line 513
  currentChar_ = lastSplit + 1;
  newCurrentChar = [self trimRightExWithInt:oldCurrentChar withInt:lastSplit];
  if (newCurrentChar < oldCurrentChar) {
    
#line 517
    newCurrentChar = currentChar_ - 1;
  }
  return [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:originalWidth withFloat:originalWidth - [self getWidthWithInt:oldCurrentChar withInt:newCurrentChar] withInt:alignment withBoolean:NO withJavaUtilArrayList:[self createArrayOfPdfChunksWithInt:oldCurrentChar withInt:newCurrentChar] withBoolean:isRTL];
}


#line 527
- (jfloat)getWidthWithInt:(jint)startIdx
                  withInt:(jint)lastIdx {
  
#line 528
  jchar c = 0;
  ComItextpdfTextPdfPdfChunk *ck = nil;
  jfloat width = 0;
  ComItextpdfTextTabStop *tabStop = nil;
  jfloat tabStopAnchorPosition = JavaLangFloat_NaN;
  jfloat tabPosition = JavaLangFloat_NaN;
  for (; startIdx <= lastIdx; ++startIdx) {
    jboolean surrogate = [ComItextpdfTextUtilities isSurrogatePairWithCharArray:text_ withInt:startIdx];
    if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(nil_chk(detailChunks_), startIdx))) isTab] &&
#line 538
    [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, startIdx))) isAttributeWithNSString:ComItextpdfTextChunk_get_TABSETTINGS_()]) {
      if (tabStop != nil) {
        jfloat tabStopPosition = [tabStop getPositionWithFloat:tabPosition withFloat:width withFloat:tabStopAnchorPosition];
        width = tabStopPosition + (width - tabPosition);
        [tabStop setPositionWithFloat:tabStopPosition];
      }
      tabStop = [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, startIdx))) getTabStop];
      if (tabStop == nil) {
        tabStop = [ComItextpdfTextPdfPdfChunk getTabStopWithComItextpdfTextPdfPdfChunk:IOSObjectArray_Get(detailChunks_, startIdx) withFloat:width];
        tabPosition = width;
        tabStopAnchorPosition = JavaLangFloat_NaN;
      }
      else {
        
#line 550
        width = [tabStop getPosition];
        tabStop = nil;
        tabPosition = JavaLangFloat_NaN;
        tabStopAnchorPosition = JavaLangFloat_NaN;
      }
    }
    else
#line 555
    if (surrogate) {
      width += [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, startIdx))) getCharWidthWithInt:[ComItextpdfTextUtilities convertToUtf32WithCharArray:text_ withInt:startIdx]];
      ++startIdx;
    }
    else {
      c = IOSCharArray_Get(nil_chk(text_), startIdx);
      ck = IOSObjectArray_Get(detailChunks_, startIdx);
      if ([ComItextpdfTextPdfPdfChunk noPrintWithInt:[((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) getUnicodeEquivalentWithInt:c]])
#line 563
      continue;
      if (tabStop != nil && [tabStop getAlignment] != ComItextpdfTextTabStop_AlignmentEnum_get_ANCHOR() && [JavaLangFloat isNaNWithFloat:tabStopAnchorPosition] && [tabStop getAnchorChar] == (jchar) [ck getUnicodeEquivalentWithInt:c]) {
        tabStopAnchorPosition = width;
      }
      width += [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, startIdx))) getCharWidthWithInt:c];
    }
  }
  if (tabStop != nil) {
    jfloat tabStopPosition = [tabStop getPositionWithFloat:tabPosition withFloat:width withFloat:tabStopAnchorPosition];
    width = tabStopPosition + (width - tabPosition);
    [tabStop setPositionWithFloat:tabStopPosition];
  }
  return width;
}


#line 578
- (JavaUtilArrayList *)createArrayOfPdfChunksWithInt:(jint)startIdx
                                             withInt:(jint)endIdx {
  
#line 579
  return [self createArrayOfPdfChunksWithInt:startIdx withInt:endIdx withComItextpdfTextPdfPdfChunk:nil];
}


#line 582
- (JavaUtilArrayList *)createArrayOfPdfChunksWithInt:(jint)startIdx
                                             withInt:(jint)endIdx
                      withComItextpdfTextPdfPdfChunk:(ComItextpdfTextPdfPdfChunk *)extraPdfChunk {
  
#line 583
  jboolean bidi = runDirection_ == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_LTR || runDirection_ == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL;
  if (bidi)
#line 585
  [self reorderWithInt:startIdx withInt:endIdx];
  
#line 587
  JavaUtilArrayList *ar = [[JavaUtilArrayList alloc] init];
  ComItextpdfTextPdfPdfChunk *refCk = IOSObjectArray_Get(nil_chk(detailChunks_), startIdx);
  ComItextpdfTextPdfPdfChunk *ck = nil;
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  jchar c;
  jint idx = 0;
  for (; startIdx <= endIdx; ++startIdx) {
    idx = bidi ? IOSIntArray_Get(nil_chk(indexChars_), startIdx) : startIdx;
    c = IOSCharArray_Get(nil_chk(text_), idx);
    ck = IOSObjectArray_Get(detailChunks_, idx);
    if ([ComItextpdfTextPdfPdfChunk noPrintWithInt:[((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) getUnicodeEquivalentWithInt:c]])
#line 598
    continue;
    if ([ck isImage] || [ck isSeparator] || [ck isTab]) {
      if ([buf sequenceLength] > 0) {
        [ar addWithId:[[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:[buf description] withComItextpdfTextPdfPdfChunk:refCk]];
        buf = [[JavaLangStringBuffer alloc] init];
      }
      [ar addWithId:ck];
    }
    else if (ck == refCk) {
      (void) [buf appendWithChar:c];
    }
    else {
      if ([buf sequenceLength] > 0) {
        [ar addWithId:[[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:[buf description] withComItextpdfTextPdfPdfChunk:refCk]];
        buf = [[JavaLangStringBuffer alloc] init];
      }
      if (![ck isImage] && ![ck isSeparator] && ![ck isTab])
#line 615
      (void) [buf appendWithChar:c];
      refCk = ck;
    }
  }
  if ([buf sequenceLength] > 0) {
    [ar addWithId:[[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:[buf description] withComItextpdfTextPdfPdfChunk:refCk]];
  }
  if (extraPdfChunk != nil)
#line 623
  [ar addWithId:extraPdfChunk];
  return ar;
}


#line 627
- (IOSIntArray *)getWordWithInt:(jint)startIdx
                        withInt:(jint)idx {
  
#line 628
  jint last = idx;
  jint first = idx;
  
#line 631
  for (; last < totalTextLength_; ++last) {
    if (![JavaLangCharacter isLetterWithChar:IOSCharArray_Get(nil_chk(text_), last)])
#line 633
    break;
  }
  if (last == idx)
#line 636
  return nil;
  
#line 638
  for (; first >= startIdx; --first) {
    if (![JavaLangCharacter isLetterWithChar:IOSCharArray_Get(nil_chk(text_), first)])
#line 640
    break;
  }
  ++first;
  return [IOSIntArray arrayWithInts:(jint[]){ first, last } count:2];
}


#line 646
- (jint)trimRightWithInt:(jint)startIdx
                 withInt:(jint)endIdx {
  
#line 647
  jint idx = endIdx;
  jchar c;
  for (; idx >= startIdx; --idx) {
    c = (jchar) [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(nil_chk(detailChunks_), idx))) getUnicodeEquivalentWithInt:IOSCharArray_Get(nil_chk(text_), idx)];
    if (![ComItextpdfTextPdfBidiLine isWSWithChar:c])
#line 652
    break;
  }
  return idx;
}


#line 657
- (jint)trimLeftWithInt:(jint)startIdx
                withInt:(jint)endIdx {
  
#line 658
  jint idx = startIdx;
  jchar c;
  for (; idx <= endIdx; ++idx) {
    c = (jchar) [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(nil_chk(detailChunks_), idx))) getUnicodeEquivalentWithInt:IOSCharArray_Get(nil_chk(text_), idx)];
    if (![ComItextpdfTextPdfBidiLine isWSWithChar:c])
#line 663
    break;
  }
  return idx;
}


#line 668
- (jint)trimRightExWithInt:(jint)startIdx
                   withInt:(jint)endIdx {
  
#line 669
  jint idx = endIdx;
  jchar c = 0;
  for (; idx >= startIdx; --idx) {
    c = (jchar) [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(nil_chk(detailChunks_), idx))) getUnicodeEquivalentWithInt:IOSCharArray_Get(nil_chk(text_), idx)];
    if (![ComItextpdfTextPdfBidiLine isWSWithChar:c] && ![ComItextpdfTextPdfPdfChunk noPrintWithInt:c]) {
      if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, idx))) isTab] &&
#line 676
      [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, idx))) isAttributeWithNSString:ComItextpdfTextChunk_get_TABSETTINGS_()]) {
        IOSObjectArray *tab = (IOSObjectArray *) check_class_cast([((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, idx))) getAttributeWithNSString:ComItextpdfTextChunk_get_TAB_()], [IOSObjectArray class]);
        jboolean isWhitespace = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(nil_chk(tab), 1), [JavaLangBoolean class]))) booleanValue];
        if (isWhitespace)
#line 680
        continue;
      }
      break;
    }
  }
  return idx;
}


#line 688
- (jint)trimLeftExWithInt:(jint)startIdx
                  withInt:(jint)endIdx {
  
#line 689
  jint idx = startIdx;
  jchar c = 0;
  for (; idx <= endIdx; ++idx) {
    c = (jchar) [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(nil_chk(detailChunks_), idx))) getUnicodeEquivalentWithInt:IOSCharArray_Get(nil_chk(text_), idx)];
    if (![ComItextpdfTextPdfBidiLine isWSWithChar:c] && ![ComItextpdfTextPdfPdfChunk noPrintWithInt:c]) {
      if ([((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, idx))) isTab] &&
#line 696
      [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, idx))) isAttributeWithNSString:ComItextpdfTextChunk_get_TABSETTINGS_()]) {
        IOSObjectArray *tab = (IOSObjectArray *) check_class_cast([((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(detailChunks_, idx))) getAttributeWithNSString:ComItextpdfTextChunk_get_TAB_()], [IOSObjectArray class]);
        jboolean isWhitespace = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(nil_chk(tab), 1), [JavaLangBoolean class]))) booleanValue];
        if (isWhitespace)
#line 700
        continue;
      }
      break;
    }
  }
  return idx;
}


#line 708
- (void)reorderWithInt:(jint)start
               withInt:(jint)end {
  
#line 709
  jbyte maxLevel = IOSByteArray_Get(nil_chk(orderLevels_), start);
  jbyte minLevel = maxLevel;
  jbyte onlyOddLevels = maxLevel;
  jbyte onlyEvenLevels = maxLevel;
  for (jint k = start + 1; k <= end; ++k) {
    jbyte b = IOSByteArray_Get(orderLevels_, k);
    if (b > maxLevel)
#line 716
    maxLevel = b;
    else if (b < minLevel)
#line 718
    minLevel = b;
    onlyOddLevels &= b;
    onlyEvenLevels |= b;
  }
  if ((onlyEvenLevels & 1) == 0)
#line 723
  return;
  if ((onlyOddLevels & 1) == 1) {
    [self flipWithInt:start withInt:end + 1];
    return;
  }
  minLevel |= 1;
  for (; maxLevel >= minLevel; --maxLevel) {
    jint pstart = start;
    for (; ; ) {
      for (; pstart <= end; ++pstart) {
        if (IOSByteArray_Get(orderLevels_, pstart) >= maxLevel)
#line 734
        break;
      }
      if (pstart > end)
#line 737
      break;
      jint pend = pstart + 1;
      for (; pend <= end; ++pend) {
        if (IOSByteArray_Get(orderLevels_, pend) < maxLevel)
#line 741
        break;
      }
      [self flipWithInt:pstart withInt:pend];
      pstart = pend + 1;
    }
  }
}


#line 749
- (void)flipWithInt:(jint)start
            withInt:(jint)end {
  
#line 750
  jint mid = (start + end) / 2;
  --end;
  for (; start < mid; ++start, --end) {
    jint temp = IOSIntArray_Get(nil_chk(indexChars_), start);
    *IOSIntArray_GetRef(indexChars_, start) = IOSIntArray_Get(indexChars_, end);
    *IOSIntArray_GetRef(indexChars_, end) = temp;
  }
}


#line 759
+ (jboolean)isWSWithChar:(jchar)c {
  
#line 760
  return c <= ' ';
}


#line 1091
+ (NSString *)processLTRWithNSString:(NSString *)s
                             withInt:(jint)runDirection
                             withInt:(jint)arabicOptions {
  
#line 1092
  ComItextpdfTextPdfBidiLine *bidi = [[ComItextpdfTextPdfBidiLine alloc] init];
  [bidi addChunkWithComItextpdfTextPdfPdfChunk:[[ComItextpdfTextPdfPdfChunk alloc] initWithComItextpdfTextChunk:[[ComItextpdfTextChunk alloc] initWithNSString:s] withComItextpdfTextPdfPdfAction:nil]];
  bidi->arabicOptions_ = arabicOptions;
  [bidi getParagraphWithInt:runDirection];
  JavaUtilArrayList *arr = [bidi createArrayOfPdfChunksWithInt:0 withInt:bidi->totalTextLength_ - 1];
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  for (ComItextpdfTextPdfPdfChunk * __strong ck in nil_chk(arr)) {
    (void) [sb appendWithNSString:[((ComItextpdfTextPdfPdfChunk *) nil_chk(ck)) description]];
  }
  return [sb description];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfBidiLine *)other {
  [super copyAllFieldsTo:other];
  other->arabicOptions_ = arabicOptions_;
  other->chunks_ = chunks_;
  other->currentChar_ = currentChar_;
  other->detailChunks_ = detailChunks_;
  other->indexChars_ = indexChars_;
  other->indexChunk_ = indexChunk_;
  other->indexChunkChar_ = indexChunkChar_;
  other->orderLevels_ = orderLevels_;
  other->pieceSize_ = pieceSize_;
  other->runDirection_ = runDirection_;
  other->shortStore_ = shortStore_;
  other->storedCurrentChar_ = storedCurrentChar_;
  other->storedDetailChunks_ = storedDetailChunks_;
  other->storedIndexChars_ = storedIndexChars_;
  other->storedIndexChunk_ = storedIndexChunk_;
  other->storedIndexChunkChar_ = storedIndexChunkChar_;
  other->storedOrderLevels_ = storedOrderLevels_;
  other->storedRunDirection_ = storedRunDirection_;
  other->storedText_ = storedText_;
  other->storedTotalTextLength_ = storedTotalTextLength_;
  other->text_ = text_;
  other->totalTextLength_ = totalTextLength_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfBidiLine class]) {
    ComItextpdfTextPdfBidiLine_mirrorChars_ =
#line 91
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    {
      
#line 764
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x0028 withInt:(jint) 0x0029];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x0029 withInt:(jint) 0x0028];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x003C withInt:(jint) 0x003E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x003E withInt:(jint) 0x003C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x005B withInt:(jint) 0x005D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x005D withInt:(jint) 0x005B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x007B withInt:(jint) 0x007D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x007D withInt:(jint) 0x007B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x00AB withInt:(jint) 0x00BB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x00BB withInt:(jint) 0x00AB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2039 withInt:(jint) 0x203A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x203A withInt:(jint) 0x2039];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2045 withInt:(jint) 0x2046];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2046 withInt:(jint) 0x2045];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x207D withInt:(jint) 0x207E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x207E withInt:(jint) 0x207D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x208D withInt:(jint) 0x208E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x208E withInt:(jint) 0x208D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2208 withInt:(jint) 0x220B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2209 withInt:(jint) 0x220C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x220A withInt:(jint) 0x220D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x220B withInt:(jint) 0x2208];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x220C withInt:(jint) 0x2209];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x220D withInt:(jint) 0x220A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2215 withInt:(jint) 0x29F5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x223C withInt:(jint) 0x223D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x223D withInt:(jint) 0x223C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2243 withInt:(jint) 0x22CD];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2252 withInt:(jint) 0x2253];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2253 withInt:(jint) 0x2252];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2254 withInt:(jint) 0x2255];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2255 withInt:(jint) 0x2254];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2264 withInt:(jint) 0x2265];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2265 withInt:(jint) 0x2264];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2266 withInt:(jint) 0x2267];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2267 withInt:(jint) 0x2266];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2268 withInt:(jint) 0x2269];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2269 withInt:(jint) 0x2268];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x226A withInt:(jint) 0x226B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x226B withInt:(jint) 0x226A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x226E withInt:(jint) 0x226F];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x226F withInt:(jint) 0x226E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2270 withInt:(jint) 0x2271];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2271 withInt:(jint) 0x2270];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2272 withInt:(jint) 0x2273];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2273 withInt:(jint) 0x2272];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2274 withInt:(jint) 0x2275];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2275 withInt:(jint) 0x2274];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2276 withInt:(jint) 0x2277];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2277 withInt:(jint) 0x2276];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2278 withInt:(jint) 0x2279];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2279 withInt:(jint) 0x2278];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x227A withInt:(jint) 0x227B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x227B withInt:(jint) 0x227A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x227C withInt:(jint) 0x227D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x227D withInt:(jint) 0x227C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x227E withInt:(jint) 0x227F];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x227F withInt:(jint) 0x227E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2280 withInt:(jint) 0x2281];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2281 withInt:(jint) 0x2280];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2282 withInt:(jint) 0x2283];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2283 withInt:(jint) 0x2282];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2284 withInt:(jint) 0x2285];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2285 withInt:(jint) 0x2284];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2286 withInt:(jint) 0x2287];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2287 withInt:(jint) 0x2286];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2288 withInt:(jint) 0x2289];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2289 withInt:(jint) 0x2288];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x228A withInt:(jint) 0x228B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x228B withInt:(jint) 0x228A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x228F withInt:(jint) 0x2290];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2290 withInt:(jint) 0x228F];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2291 withInt:(jint) 0x2292];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2292 withInt:(jint) 0x2291];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2298 withInt:(jint) 0x29B8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22A2 withInt:(jint) 0x22A3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22A3 withInt:(jint) 0x22A2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22A6 withInt:(jint) 0x2ADE];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22A8 withInt:(jint) 0x2AE4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22A9 withInt:(jint) 0x2AE3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22AB withInt:(jint) 0x2AE5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22B0 withInt:(jint) 0x22B1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22B1 withInt:(jint) 0x22B0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22B2 withInt:(jint) 0x22B3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22B3 withInt:(jint) 0x22B2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22B4 withInt:(jint) 0x22B5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22B5 withInt:(jint) 0x22B4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22B6 withInt:(jint) 0x22B7];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22B7 withInt:(jint) 0x22B6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22C9 withInt:(jint) 0x22CA];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22CA withInt:(jint) 0x22C9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22CB withInt:(jint) 0x22CC];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22CC withInt:(jint) 0x22CB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22CD withInt:(jint) 0x2243];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22D0 withInt:(jint) 0x22D1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22D1 withInt:(jint) 0x22D0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22D6 withInt:(jint) 0x22D7];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22D7 withInt:(jint) 0x22D6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22D8 withInt:(jint) 0x22D9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22D9 withInt:(jint) 0x22D8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22DA withInt:(jint) 0x22DB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22DB withInt:(jint) 0x22DA];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22DC withInt:(jint) 0x22DD];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22DD withInt:(jint) 0x22DC];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22DE withInt:(jint) 0x22DF];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22DF withInt:(jint) 0x22DE];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E0 withInt:(jint) 0x22E1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E1 withInt:(jint) 0x22E0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E2 withInt:(jint) 0x22E3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E3 withInt:(jint) 0x22E2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E4 withInt:(jint) 0x22E5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E5 withInt:(jint) 0x22E4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E6 withInt:(jint) 0x22E7];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E7 withInt:(jint) 0x22E6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E8 withInt:(jint) 0x22E9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22E9 withInt:(jint) 0x22E8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22EA withInt:(jint) 0x22EB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22EB withInt:(jint) 0x22EA];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22EC withInt:(jint) 0x22ED];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22ED withInt:(jint) 0x22EC];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22F0 withInt:(jint) 0x22F1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22F1 withInt:(jint) 0x22F0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22F2 withInt:(jint) 0x22FA];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22F3 withInt:(jint) 0x22FB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22F4 withInt:(jint) 0x22FC];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22F6 withInt:(jint) 0x22FD];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22F7 withInt:(jint) 0x22FE];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22FA withInt:(jint) 0x22F2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22FB withInt:(jint) 0x22F3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22FC withInt:(jint) 0x22F4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22FD withInt:(jint) 0x22F6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x22FE withInt:(jint) 0x22F7];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2308 withInt:(jint) 0x2309];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2309 withInt:(jint) 0x2308];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x230A withInt:(jint) 0x230B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x230B withInt:(jint) 0x230A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2329 withInt:(jint) 0x232A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x232A withInt:(jint) 0x2329];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2768 withInt:(jint) 0x2769];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2769 withInt:(jint) 0x2768];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x276A withInt:(jint) 0x276B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x276B withInt:(jint) 0x276A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x276C withInt:(jint) 0x276D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x276D withInt:(jint) 0x276C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x276E withInt:(jint) 0x276F];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x276F withInt:(jint) 0x276E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2770 withInt:(jint) 0x2771];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2771 withInt:(jint) 0x2770];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2772 withInt:(jint) 0x2773];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2773 withInt:(jint) 0x2772];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2774 withInt:(jint) 0x2775];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2775 withInt:(jint) 0x2774];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27D5 withInt:(jint) 0x27D6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27D6 withInt:(jint) 0x27D5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27DD withInt:(jint) 0x27DE];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27DE withInt:(jint) 0x27DD];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27E2 withInt:(jint) 0x27E3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27E3 withInt:(jint) 0x27E2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27E4 withInt:(jint) 0x27E5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27E5 withInt:(jint) 0x27E4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27E6 withInt:(jint) 0x27E7];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27E7 withInt:(jint) 0x27E6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27E8 withInt:(jint) 0x27E9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27E9 withInt:(jint) 0x27E8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27EA withInt:(jint) 0x27EB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x27EB withInt:(jint) 0x27EA];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2983 withInt:(jint) 0x2984];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2984 withInt:(jint) 0x2983];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2985 withInt:(jint) 0x2986];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2986 withInt:(jint) 0x2985];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2987 withInt:(jint) 0x2988];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2988 withInt:(jint) 0x2987];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2989 withInt:(jint) 0x298A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x298A withInt:(jint) 0x2989];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x298B withInt:(jint) 0x298C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x298C withInt:(jint) 0x298B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x298D withInt:(jint) 0x2990];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x298E withInt:(jint) 0x298F];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x298F withInt:(jint) 0x298E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2990 withInt:(jint) 0x298D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2991 withInt:(jint) 0x2992];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2992 withInt:(jint) 0x2991];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2993 withInt:(jint) 0x2994];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2994 withInt:(jint) 0x2993];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2995 withInt:(jint) 0x2996];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2996 withInt:(jint) 0x2995];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2997 withInt:(jint) 0x2998];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2998 withInt:(jint) 0x2997];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29B8 withInt:(jint) 0x2298];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29C0 withInt:(jint) 0x29C1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29C1 withInt:(jint) 0x29C0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29C4 withInt:(jint) 0x29C5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29C5 withInt:(jint) 0x29C4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29CF withInt:(jint) 0x29D0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29D0 withInt:(jint) 0x29CF];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29D1 withInt:(jint) 0x29D2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29D2 withInt:(jint) 0x29D1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29D4 withInt:(jint) 0x29D5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29D5 withInt:(jint) 0x29D4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29D8 withInt:(jint) 0x29D9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29D9 withInt:(jint) 0x29D8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29DA withInt:(jint) 0x29DB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29DB withInt:(jint) 0x29DA];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29F5 withInt:(jint) 0x2215];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29F8 withInt:(jint) 0x29F9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29F9 withInt:(jint) 0x29F8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29FC withInt:(jint) 0x29FD];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x29FD withInt:(jint) 0x29FC];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A2B withInt:(jint) 0x2A2C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A2C withInt:(jint) 0x2A2B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A2D withInt:(jint) 0x2A2C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A2E withInt:(jint) 0x2A2D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A34 withInt:(jint) 0x2A35];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A35 withInt:(jint) 0x2A34];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A3C withInt:(jint) 0x2A3D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A3D withInt:(jint) 0x2A3C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A64 withInt:(jint) 0x2A65];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A65 withInt:(jint) 0x2A64];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A79 withInt:(jint) 0x2A7A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A7A withInt:(jint) 0x2A79];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A7D withInt:(jint) 0x2A7E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A7E withInt:(jint) 0x2A7D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A7F withInt:(jint) 0x2A80];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A80 withInt:(jint) 0x2A7F];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A81 withInt:(jint) 0x2A82];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A82 withInt:(jint) 0x2A81];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A83 withInt:(jint) 0x2A84];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A84 withInt:(jint) 0x2A83];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A8B withInt:(jint) 0x2A8C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A8C withInt:(jint) 0x2A8B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A91 withInt:(jint) 0x2A92];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A92 withInt:(jint) 0x2A91];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A93 withInt:(jint) 0x2A94];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A94 withInt:(jint) 0x2A93];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A95 withInt:(jint) 0x2A96];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A96 withInt:(jint) 0x2A95];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A97 withInt:(jint) 0x2A98];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A98 withInt:(jint) 0x2A97];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A99 withInt:(jint) 0x2A9A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A9A withInt:(jint) 0x2A99];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A9B withInt:(jint) 0x2A9C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2A9C withInt:(jint) 0x2A9B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AA1 withInt:(jint) 0x2AA2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AA2 withInt:(jint) 0x2AA1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AA6 withInt:(jint) 0x2AA7];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AA7 withInt:(jint) 0x2AA6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AA8 withInt:(jint) 0x2AA9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AA9 withInt:(jint) 0x2AA8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AAA withInt:(jint) 0x2AAB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AAB withInt:(jint) 0x2AAA];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AAC withInt:(jint) 0x2AAD];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AAD withInt:(jint) 0x2AAC];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AAF withInt:(jint) 0x2AB0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AB0 withInt:(jint) 0x2AAF];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AB3 withInt:(jint) 0x2AB4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AB4 withInt:(jint) 0x2AB3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ABB withInt:(jint) 0x2ABC];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ABC withInt:(jint) 0x2ABB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ABD withInt:(jint) 0x2ABE];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ABE withInt:(jint) 0x2ABD];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ABF withInt:(jint) 0x2AC0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AC0 withInt:(jint) 0x2ABF];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AC1 withInt:(jint) 0x2AC2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AC2 withInt:(jint) 0x2AC1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AC3 withInt:(jint) 0x2AC4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AC4 withInt:(jint) 0x2AC3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AC5 withInt:(jint) 0x2AC6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AC6 withInt:(jint) 0x2AC5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ACD withInt:(jint) 0x2ACE];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ACE withInt:(jint) 0x2ACD];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ACF withInt:(jint) 0x2AD0];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AD0 withInt:(jint) 0x2ACF];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AD1 withInt:(jint) 0x2AD2];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AD2 withInt:(jint) 0x2AD1];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AD3 withInt:(jint) 0x2AD4];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AD4 withInt:(jint) 0x2AD3];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AD5 withInt:(jint) 0x2AD6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AD6 withInt:(jint) 0x2AD5];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2ADE withInt:(jint) 0x22A6];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AE3 withInt:(jint) 0x22A9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AE4 withInt:(jint) 0x22A8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AE5 withInt:(jint) 0x22AB];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AEC withInt:(jint) 0x2AED];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AED withInt:(jint) 0x2AEC];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AF7 withInt:(jint) 0x2AF8];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AF8 withInt:(jint) 0x2AF7];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AF9 withInt:(jint) 0x2AFA];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x2AFA withInt:(jint) 0x2AF9];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3008 withInt:(jint) 0x3009];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3009 withInt:(jint) 0x3008];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x300A withInt:(jint) 0x300B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x300B withInt:(jint) 0x300A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x300C withInt:(jint) 0x300D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x300D withInt:(jint) 0x300C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x300E withInt:(jint) 0x300F];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x300F withInt:(jint) 0x300E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3010 withInt:(jint) 0x3011];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3011 withInt:(jint) 0x3010];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3014 withInt:(jint) 0x3015];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3015 withInt:(jint) 0x3014];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3016 withInt:(jint) 0x3017];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3017 withInt:(jint) 0x3016];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3018 withInt:(jint) 0x3019];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x3019 withInt:(jint) 0x3018];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x301A withInt:(jint) 0x301B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0x301B withInt:(jint) 0x301A];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF08 withInt:(jint) 0xFF09];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF09 withInt:(jint) 0xFF08];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF1C withInt:(jint) 0xFF1E];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF1E withInt:(jint) 0xFF1C];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF3B withInt:(jint) 0xFF3D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF3D withInt:(jint) 0xFF3B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF5B withInt:(jint) 0xFF5D];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF5D withInt:(jint) 0xFF5B];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF5F withInt:(jint) 0xFF60];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF60 withInt:(jint) 0xFF5F];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF62 withInt:(jint) 0xFF63];
      [ComItextpdfTextPdfBidiLine_mirrorChars_ putWithInt:(jint) 0xFF63 withInt:(jint) 0xFF62];
    }
    ComItextpdfTextPdfBidiLine_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BidiLine", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfBidiLine:", "BidiLine", NULL, 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "clearChunks", NULL, "V", 0x1, NULL },
    { "getParagraphWithInt:", "getParagraph", "Z", 0x1, NULL },
    { "addChunkWithComItextpdfTextPdfPdfChunk:", "addChunk", "V", 0x1, NULL },
    { "addChunksWithJavaUtilArrayList:", "addChunks", "V", 0x1, NULL },
    { "addPieceWithChar:withComItextpdfTextPdfPdfChunk:", "addPiece", "V", 0x1, NULL },
    { "save", NULL, "V", 0x1, NULL },
    { "restore", NULL, "V", 0x1, NULL },
    { "mirrorGlyphs", NULL, "V", 0x1, NULL },
    { "doArabicShapping", NULL, "V", 0x1, NULL },
    { "processLineWithFloat:withFloat:withInt:withInt:withInt:withFloat:withFloat:withFloat:", "processLine", "Lcom.itextpdf.text.pdf.PdfLine;", 0x1, NULL },
    { "getWidthWithInt:withInt:", "getWidth", "F", 0x1, NULL },
    { "createArrayOfPdfChunksWithInt:withInt:", "createArrayOfPdfChunks", "Ljava.util.ArrayList;", 0x1, NULL },
    { "createArrayOfPdfChunksWithInt:withInt:withComItextpdfTextPdfPdfChunk:", "createArrayOfPdfChunks", "Ljava.util.ArrayList;", 0x1, NULL },
    { "getWordWithInt:withInt:", "getWord", "[I", 0x1, NULL },
    { "trimRightWithInt:withInt:", "trimRight", "I", 0x1, NULL },
    { "trimLeftWithInt:withInt:", "trimLeft", "I", 0x1, NULL },
    { "trimRightExWithInt:withInt:", "trimRightEx", "I", 0x1, NULL },
    { "trimLeftExWithInt:withInt:", "trimLeftEx", "I", 0x1, NULL },
    { "reorderWithInt:withInt:", "reorder", "V", 0x1, NULL },
    { "flipWithInt:withInt:", "flip", "V", 0x1, NULL },
    { "isWSWithChar:", "isWS", "Z", 0x9, NULL },
    { "processLTRWithNSString:withInt:withInt:", "processLTR", "Ljava.lang.String;", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "runDirection_", NULL, 0x4, "I", NULL,  },
    { "pieceSize_", NULL, 0x4, "I", NULL,  },
    { "text_", NULL, 0x4, "[C", NULL,  },
    { "detailChunks_", NULL, 0x4, "[Lcom.itextpdf.text.pdf.PdfChunk;", NULL,  },
    { "totalTextLength_", NULL, 0x4, "I", NULL,  },
    { "orderLevels_", NULL, 0x4, "[B", NULL,  },
    { "indexChars_", NULL, 0x4, "[I", NULL,  },
    { "chunks_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "indexChunk_", NULL, 0x4, "I", NULL,  },
    { "indexChunkChar_", NULL, 0x4, "I", NULL,  },
    { "currentChar_", NULL, 0x4, "I", NULL,  },
    { "storedRunDirection_", NULL, 0x4, "I", NULL,  },
    { "storedText_", NULL, 0x4, "[C", NULL,  },
    { "storedDetailChunks_", NULL, 0x4, "[Lcom.itextpdf.text.pdf.PdfChunk;", NULL,  },
    { "storedTotalTextLength_", NULL, 0x4, "I", NULL,  },
    { "storedOrderLevels_", NULL, 0x4, "[B", NULL,  },
    { "storedIndexChars_", NULL, 0x4, "[I", NULL,  },
    { "storedIndexChunk_", NULL, 0x4, "I", NULL,  },
    { "storedIndexChunkChar_", NULL, 0x4, "I", NULL,  },
    { "storedCurrentChar_", NULL, 0x4, "I", NULL,  },
    { "shortStore_", NULL, 0x4, "Z", NULL,  },
    { "mirrorChars_", NULL, 0x1c, "Lcom.itextpdf.text.pdf.IntHashtable;", &ComItextpdfTextPdfBidiLine_mirrorChars_,  },
    { "arabicOptions_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfBidiLine = { "BidiLine", "com.itextpdf.text.pdf", NULL, 0x1, 25, methods, 23, fields, 0, NULL};
  return &_ComItextpdfTextPdfBidiLine;
}

@end
