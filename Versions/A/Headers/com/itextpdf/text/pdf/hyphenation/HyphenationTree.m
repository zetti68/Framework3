//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/hyphenation/HyphenationTree.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/hyphenation/HyphenationTree.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/hyphenation/ByteVector.h"
#include "com/itextpdf/text/pdf/hyphenation/CharVector.h"
#include "com/itextpdf/text/pdf/hyphenation/Hyphenation.h"
#include "com/itextpdf/text/pdf/hyphenation/HyphenationTree.h"
#include "com/itextpdf/text/pdf/hyphenation/SimplePatternParser.h"
#include "com/itextpdf/text/pdf/hyphenation/TernaryTree.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"


#line 32
@implementation ComItextpdfTextPdfHyphenationHyphenationTree


#line 57
- (instancetype)init {
  if (self = [super init]) {
    
#line 58
    stoplist_ = [[JavaUtilHashMap alloc] initWithInt:23];
    
#line 59
    classmap_ = [[ComItextpdfTextPdfHyphenationTernaryTree alloc] init];
    
#line 60
    vspace_ = [[ComItextpdfTextPdfHyphenationByteVector alloc] init];
    
#line 61
    [vspace_ alloc__WithInt:1];
  }
  return self;
}


#line 73
- (jint)packValuesWithNSString:(NSString *)values {
  
#line 74
  jint i, n = ((jint) [((NSString *) nil_chk(values)) length]);
  jint m = (n & 1) == 1 ? (RShift32(n, 1)) + 2 : (RShift32(n, 1)) + 1;
  jint offset = [((ComItextpdfTextPdfHyphenationByteVector *) nil_chk(vspace_)) alloc__WithInt:m];
  IOSByteArray *va = [vspace_ getArray];
  for (i = 0; i < n; i++) {
    jint j = RShift32(i, 1);
    jbyte v = (jbyte) (([values charAtWithInt:i] - '0' + 1) & (jint) 0x0f);
    if ((i & 1) == 1) {
      *IOSByteArray_GetRef(nil_chk(va), j + offset) = (jbyte) (IOSByteArray_Get(va, j + offset) | v);
    }
    else {
      
#line 84
      *IOSByteArray_GetRef(nil_chk(va), j + offset) = (jbyte) (LShift32(v, 4));
    }
  }
  *IOSByteArray_GetRef(nil_chk(va), m - 1 + offset) = 0;
  return offset;
}


#line 91
- (NSString *)unpackValuesWithInt:(jint)k {
  
#line 92
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  jbyte v = [((ComItextpdfTextPdfHyphenationByteVector *) nil_chk(vspace_)) getWithInt:k++];
  while (v != 0) {
    jchar c = (jchar) ((URShift32(v, 4)) - 1 + '0');
    (void) [buf appendWithChar:c];
    c = (jchar) (v & (jint) 0x0f);
    if (c == 0) {
      break;
    }
    c = (jchar) (c - 1 + '0');
    (void) [buf appendWithChar:c];
    v = [vspace_ getWithInt:k++];
  }
  return [buf description];
}


#line 108
- (void)loadSimplePatternsWithJavaIoInputStream:(JavaIoInputStream *)stream {
  
#line 109
  ComItextpdfTextPdfHyphenationSimplePatternParser *pp = [[ComItextpdfTextPdfHyphenationSimplePatternParser alloc] init];
  ivalues_ = [[ComItextpdfTextPdfHyphenationTernaryTree alloc] init];
  
#line 112
  [pp parseWithJavaIoInputStream:stream withComItextpdfTextPdfHyphenationPatternConsumer:self];
  
#line 116
  [self trimToSize];
  [((ComItextpdfTextPdfHyphenationByteVector *) nil_chk(vspace_)) trimToSize];
  [((ComItextpdfTextPdfHyphenationTernaryTree *) nil_chk(classmap_)) trimToSize];
  
#line 121
  ivalues_ = nil;
}


#line 125
- (NSString *)findPatternWithNSString:(NSString *)pat {
  jint k = [super findWithNSString:pat];
  if (k >= 0) {
    return [self unpackValuesWithInt:k];
  }
  return @"";
}


#line 137
- (jint)hstrcmpWithCharArray:(IOSCharArray *)s
                     withInt:(jint)si
               withCharArray:(IOSCharArray *)t
                     withInt:(jint)ti {
  
#line 138
  for (; IOSCharArray_Get(nil_chk(s), si) == IOSCharArray_Get(nil_chk(t), ti); si++, ti++) {
    if (IOSCharArray_Get(s, si) == 0) {
      return 0;
    }
  }
  if (IOSCharArray_Get(t, ti) == 0) {
    return 0;
  }
  return IOSCharArray_Get(s, si) - IOSCharArray_Get(t, ti);
}


#line 149
- (IOSByteArray *)getValuesWithInt:(jint)k {
  
#line 150
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  jbyte v = [((ComItextpdfTextPdfHyphenationByteVector *) nil_chk(vspace_)) getWithInt:k++];
  while (v != 0) {
    jchar c = (jchar) ((URShift32(v, 4)) - 1);
    (void) [buf appendWithChar:c];
    c = (jchar) (v & (jint) 0x0f);
    if (c == 0) {
      break;
    }
    c = (jchar) (c - 1);
    (void) [buf appendWithChar:c];
    v = [vspace_ getWithInt:k++];
  }
  IOSByteArray *res = [IOSByteArray arrayWithLength:[buf sequenceLength]];
  for (jint i = 0; i < res->size_; i++) {
    *IOSByteArray_GetRef(res, i) = (jbyte) [buf charAtWithInt:i];
  }
  return res;
}


#line 194
- (void)searchPatternsWithCharArray:(IOSCharArray *)word
                            withInt:(jint)index
                      withByteArray:(IOSByteArray *)il {
  
#line 195
  IOSByteArray *values;
  jint i = index;
  jchar p, q;
  jchar sp = IOSCharArray_Get(nil_chk(word), i);
  p = root_;
  
#line 201
  while (p > 0 && p < ((IOSCharArray *) nil_chk(sc_))->size_) {
    if (IOSCharArray_Get(nil_chk(sc_), p) == (jint) 0xFFFF) {
      if ([self hstrcmpWithCharArray:word withInt:i withCharArray:[((ComItextpdfTextPdfHyphenationCharVector *) nil_chk(kv_)) getArray] withInt:IOSCharArray_Get(nil_chk(lo_), p)] == 0) {
        values = [self getValuesWithInt:IOSCharArray_Get(nil_chk(eq_), p)];
        jint j = index;
        {
          IOSByteArray *a__ =
#line 206
          values;
          jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
          jbyte const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            jbyte value = *b__++;
            
#line 207
            if (j < ((IOSByteArray *) nil_chk(il))->size_ && value > IOSByteArray_Get(il, j)) {
              *IOSByteArray_GetRef(il, j) = value;
            }
            j++;
          }
        }
      }
      
#line 213
      return;
    }
    jint d = sp - IOSCharArray_Get(sc_, p);
    if (d == 0) {
      if (sp == 0) {
        break;
      }
      sp = IOSCharArray_Get(word, ++i);
      p = IOSCharArray_Get(nil_chk(eq_), p);
      q = p;
      
#line 226
      while (q > 0 && q < sc_->size_) {
        if (IOSCharArray_Get(sc_, q) == (jint) 0xFFFF) {
          break;
        }
        if (IOSCharArray_Get(sc_, q) == 0) {
          values = [self getValuesWithInt:IOSCharArray_Get(eq_, q)];
          jint j = index;
          {
            IOSByteArray *a__ =
#line 233
            values;
            jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
            jbyte const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              jbyte value = *b__++;
              
#line 234
              if (j < ((IOSByteArray *) nil_chk(il))->size_ && value > IOSByteArray_Get(il, j)) {
                *IOSByteArray_GetRef(il, j) = value;
              }
              j++;
            }
          }
          
#line 239
          break;
        }
        else {
          
#line 241
          q = IOSCharArray_Get(nil_chk(lo_), q);
        }
      }
    }
    else {
      
#line 251
      p = d < 0 ? IOSCharArray_Get(nil_chk(lo_), p) : IOSCharArray_Get(nil_chk(hi_), p);
    }
  }
}


#line 266
- (ComItextpdfTextPdfHyphenationHyphenation *)hyphenateWithNSString:(NSString *)word
                                                            withInt:(jint)remainCharCount
                                                            withInt:(jint)pushCharCount {
  
#line 268
  IOSCharArray *w = [((NSString *) nil_chk(word)) toCharArray];
  return [self hyphenateWithCharArray:w withInt:0 withInt:((IOSCharArray *) nil_chk(w))->size_ withInt:remainCharCount withInt:pushCharCount];
}


#line 307
- (ComItextpdfTextPdfHyphenationHyphenation *)hyphenateWithCharArray:(IOSCharArray *)w
                                                             withInt:(jint)offset
                                                             withInt:(jint)len
                                                             withInt:(jint)remainCharCount
                                                             withInt:(jint)pushCharCount {
  
#line 309
  jint i;
  IOSCharArray *word = [IOSCharArray arrayWithLength:len + 3];
  
#line 313
  IOSCharArray *c = [IOSCharArray arrayWithLength:2];
  jint iIgnoreAtBeginning = 0;
  jint iLength = len;
  jboolean bEndOfLetters = NO;
  for (i = 1; i <= len; i++) {
    *IOSCharArray_GetRef(c, 0) = IOSCharArray_Get(nil_chk(w), offset + i - 1);
    jint nc = [((ComItextpdfTextPdfHyphenationTernaryTree *) nil_chk(classmap_)) findWithCharArray:c withInt:0];
    if (nc < 0) {
      if (i == 1 + iIgnoreAtBeginning) {
        
#line 323
        iIgnoreAtBeginning++;
      }
      else {
        bEndOfLetters = YES;
      }
      iLength--;
    }
    else {
      
#line 330
      if (!bEndOfLetters) {
        *IOSCharArray_GetRef(word, i - iIgnoreAtBeginning) = (jchar) nc;
      }
      else {
        
#line 333
        return nil;
      }
    }
  }
  jint origlen = len;
  len = iLength;
  if (len < remainCharCount + pushCharCount) {
    
#line 341
    return nil;
  }
  IOSIntArray *result = [IOSIntArray arrayWithLength:len + 1];
  jint k = 0;
  
#line 347
  NSString *sw = [NSString stringWithCharacters:word offset:1 length:len];
  if ([((JavaUtilHashMap *) nil_chk(stoplist_)) containsKeyWithId:sw]) {
    
#line 350
    JavaUtilArrayList *hw = [stoplist_ getWithId:sw];
    jint j = 0;
    for (i = 0; i < [((JavaUtilArrayList *) nil_chk(hw)) size]; i++) {
      id o = [hw getWithInt:i];
      
#line 356
      if ([o isKindOfClass:[NSString class]]) {
        j += ((jint) [((NSString *) nil_chk(((NSString *) check_class_cast(o, [NSString class])))) length]);
        if (j >= remainCharCount && j < len - pushCharCount) {
          *IOSIntArray_GetRef(result, k++) = j + iIgnoreAtBeginning;
        }
      }
    }
  }
  else {
    *IOSCharArray_GetRef(word, 0) = '.';
    *IOSCharArray_GetRef(word, len + 1) = '.';
    *IOSCharArray_GetRef(word, len + 2) = 0;
    IOSByteArray *il = [IOSByteArray arrayWithLength:len + 3];
    for (i = 0; i < len + 1; i++) {
      [self searchPatternsWithCharArray:word withInt:i withByteArray:il];
    }
    
#line 377
    for (i = 0; i < len; i++) {
      if ((IOSByteArray_Get(il, i + 1) & 1) == 1 && i >= remainCharCount &&
#line 379
      i <= len - pushCharCount) {
        *IOSIntArray_GetRef(result, k++) = i + iIgnoreAtBeginning;
      }
    }
  }
  
#line 386
  if (k > 0) {
    
#line 388
    IOSIntArray *res = [IOSIntArray arrayWithLength:k];
    [JavaLangSystem arraycopyWithId:result withInt:0 withId:res withInt:0 withInt:k];
    return [[ComItextpdfTextPdfHyphenationHyphenation alloc] initWithNSString:[NSString stringWithCharacters:w offset:offset length:origlen] withIntArray:res];
  }
  else {
    
#line 392
    return nil;
  }
}


#line 408
- (void)addClassWithNSString:(NSString *)chargroup {
  
#line 409
  if (((jint) [((NSString *) nil_chk(chargroup)) length]) > 0) {
    jchar equivChar = [chargroup charAtWithInt:0];
    IOSCharArray *key = [IOSCharArray arrayWithLength:2];
    *IOSCharArray_GetRef(key, 1) = 0;
    for (jint i = 0; i < ((jint) [chargroup length]); i++) {
      *IOSCharArray_GetRef(key, 0) = [chargroup charAtWithInt:i];
      [((ComItextpdfTextPdfHyphenationTernaryTree *) nil_chk(classmap_)) insertWithCharArray:key withInt:0 withChar:equivChar];
    }
  }
}


#line 428
- (void)addExceptionWithNSString:(NSString *)word
           withJavaUtilArrayList:(JavaUtilArrayList *)hyphenatedword {
  
#line 429
  (void) [((JavaUtilHashMap *) nil_chk(stoplist_)) putWithId:word withId:hyphenatedword];
}


#line 442
- (void)addPatternWithNSString:(NSString *)pattern
                  withNSString:(NSString *)ivalue {
  
#line 443
  jint k = [((ComItextpdfTextPdfHyphenationTernaryTree *) nil_chk(ivalues_)) findWithNSString:ivalue];
  if (k <= 0) {
    k = [self packValuesWithNSString:ivalue];
    [ivalues_ insertWithNSString:ivalue withChar:(jchar) k];
  }
  [self insertWithNSString:pattern withChar:(jchar) k];
}


#line 452
- (void)printStats {
  
#line 453
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"Value space size = ",
#line 454
  [JavaLangInteger toStringWithInt:[((ComItextpdfTextPdfHyphenationByteVector *) nil_chk(vspace_)) length]])];
  [super printStats];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfHyphenationHyphenationTree *)other {
  [super copyAllFieldsTo:other];
  other->classmap_ = classmap_;
  other->ivalues_ = ivalues_;
  other->stoplist_ = stoplist_;
  other->vspace_ = vspace_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "HyphenationTree", NULL, 0x1, NULL },
    { "packValuesWithNSString:", "packValues", "I", 0x4, NULL },
    { "unpackValuesWithInt:", "unpackValues", "Ljava.lang.String;", 0x4, NULL },
    { "loadSimplePatternsWithJavaIoInputStream:", "loadSimplePatterns", "V", 0x1, NULL },
    { "findPatternWithNSString:", "findPattern", "Ljava.lang.String;", 0x1, NULL },
    { "hstrcmpWithCharArray:withInt:withCharArray:withInt:", "hstrcmp", "I", 0x4, NULL },
    { "getValuesWithInt:", "getValues", "[B", 0x4, NULL },
    { "searchPatternsWithCharArray:withInt:withByteArray:", "searchPatterns", "V", 0x4, NULL },
    { "hyphenateWithNSString:withInt:withInt:", "hyphenate", "Lcom.itextpdf.text.pdf.hyphenation.Hyphenation;", 0x1, NULL },
    { "hyphenateWithCharArray:withInt:withInt:withInt:withInt:", "hyphenate", "Lcom.itextpdf.text.pdf.hyphenation.Hyphenation;", 0x1, NULL },
    { "addClassWithNSString:", "addClass", "V", 0x1, NULL },
    { "addExceptionWithNSString:withJavaUtilArrayList:", "addException", "V", 0x1, NULL },
    { "addPatternWithNSString:withNSString:", "addPattern", "V", 0x1, NULL },
    { "printStats", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfTextPdfHyphenationHyphenationTree_serialVersionUID },
    { "vspace_", NULL, 0x4, "Lcom.itextpdf.text.pdf.hyphenation.ByteVector;", NULL,  },
    { "stoplist_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "classmap_", NULL, 0x4, "Lcom.itextpdf.text.pdf.hyphenation.TernaryTree;", NULL,  },
    { "ivalues_", NULL, 0x82, "Lcom.itextpdf.text.pdf.hyphenation.TernaryTree;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfHyphenationHyphenationTree = { "HyphenationTree", "com.itextpdf.text.pdf.hyphenation", NULL, 0x1, 14, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfHyphenationHyphenationTree;
}

@end
