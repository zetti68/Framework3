//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/hyphenation/SimplePatternParser.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/hyphenation/SimplePatternParser.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/pdf/hyphenation/Hyphen.h"
#include "com/itextpdf/text/pdf/hyphenation/PatternConsumer.h"
#include "com/itextpdf/text/pdf/hyphenation/SimplePatternParser.h"
#include "com/itextpdf/text/xml/simpleparser/SimpleXMLParser.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Map.h"
#include "java/util/StringTokenizer.h"


#line 61
@implementation ComItextpdfTextPdfHyphenationSimplePatternParser


#line 84
- (instancetype)init {
  if (self = [super init]) {
    
#line 85
    token_ = [[JavaLangStringBuffer alloc] init];
    
#line 86
    hyphenChar_ = '-';
  }
  return self;
}


#line 89
- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)stream
withComItextpdfTextPdfHyphenationPatternConsumer:(id<ComItextpdfTextPdfHyphenationPatternConsumer>)consumer {
  
#line 90
  self->consumer_ = consumer;
  @try {
    [ComItextpdfTextXmlSimpleparserSimpleXMLParser parseWithComItextpdfTextXmlSimpleparserSimpleXMLDocHandler:self withJavaIoInputStream:stream];
  }
  @catch (
#line 93
  JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
  @finally {
    
#line 96
    @try {
      [((JavaIoInputStream *) nil_chk(stream)) close];
    }
    @catch (
#line 98
    JavaLangException *e) {
    }
  }
}


#line 103
+ (NSString *)getPatternWithNSString:(NSString *)word {
  
#line 104
  JavaLangStringBuffer *pat = [[JavaLangStringBuffer alloc] init];
  jint len = ((jint) [((NSString *) nil_chk(word)) length]);
  for (jint i = 0; i < len; i++) {
    if (![JavaLangCharacter isDigitWithChar:[word charAtWithInt:i]]) {
      (void) [pat appendWithChar:[word charAtWithInt:i]];
    }
  }
  return [pat description];
}


#line 114
- (JavaUtilArrayList *)normalizeExceptionWithJavaUtilArrayList:(JavaUtilArrayList *)ex {
  
#line 115
  JavaUtilArrayList *res = [[JavaUtilArrayList alloc] init];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(ex)) size]; i++) {
    id item = [ex getWithInt:i];
    if ([item isKindOfClass:[NSString class]]) {
      NSString *str = (NSString *) check_class_cast(item, [NSString class]);
      JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
      for (jint j = 0; j < ((jint) [((NSString *) nil_chk(str)) length]); j++) {
        jchar c = [str charAtWithInt:j];
        if (c != hyphenChar_) {
          (void) [buf appendWithChar:c];
        }
        else {
          
#line 126
          [res addWithId:[buf description]];
          [buf setLengthWithInt:0];
          IOSCharArray *h = [IOSCharArray arrayWithLength:1];
          *IOSCharArray_GetRef(h, 0) = hyphenChar_;
          
#line 132
          [res addWithId:[[ComItextpdfTextPdfHyphenationHyphen alloc] initWithNSString:[NSString stringWithCharacters:h] withNSString:nil withNSString:nil]];
        }
      }
      if ([buf sequenceLength] > 0) {
        [res addWithId:[buf description]];
      }
    }
    else {
      
#line 139
      [res addWithId:item];
    }
  }
  return res;
}


#line 145
- (NSString *)getExceptionWordWithJavaUtilArrayList:(JavaUtilArrayList *)ex {
  
#line 146
  JavaLangStringBuffer *res = [[JavaLangStringBuffer alloc] init];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(ex)) size]; i++) {
    id item = [ex getWithInt:i];
    if ([item isKindOfClass:[NSString class]]) {
      (void) [res appendWithNSString:(NSString *) check_class_cast(item, [NSString class])];
    }
    else {
      
#line 152
      if (((ComItextpdfTextPdfHyphenationHyphen *) nil_chk(((ComItextpdfTextPdfHyphenationHyphen *) check_class_cast(item, [ComItextpdfTextPdfHyphenationHyphen class]))))->noBreak_ != nil) {
        (void) [res appendWithNSString:((ComItextpdfTextPdfHyphenationHyphen *) nil_chk(((ComItextpdfTextPdfHyphenationHyphen *) check_class_cast(item, [ComItextpdfTextPdfHyphenationHyphen class]))))->noBreak_];
      }
    }
  }
  return [res description];
}


#line 160
+ (NSString *)getInterletterValuesWithNSString:(NSString *)pat {
  
#line 161
  JavaLangStringBuffer *il = [[JavaLangStringBuffer alloc] init];
  NSString *word = JreStrcat("$C", pat, 'a');
  jint len = ((jint) [word length]);
  for (jint i = 0; i < len; i++) {
    jchar c = [word charAtWithInt:i];
    if ([JavaLangCharacter isDigitWithChar:c]) {
      (void) [il appendWithChar:c];
      i++;
    }
    else {
      
#line 170
      (void) [il appendWithChar:'0'];
    }
  }
  return [il description];
}


#line 176
- (void)endDocument {
}


#line 180
- (void)endElementWithNSString:(NSString *)tag {
  
#line 181
  if ([((JavaLangStringBuffer *) nil_chk(token_)) sequenceLength] > 0) {
    NSString *word = [token_ description];
    switch (currElement_) {
      case ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_CLASSES:
      [((id<ComItextpdfTextPdfHyphenationPatternConsumer>) nil_chk(consumer_)) addClassWithNSString:word];
      break;
      case ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS:
      [((JavaUtilArrayList *) nil_chk(exception_)) addWithId:word];
      exception_ = [self normalizeExceptionWithJavaUtilArrayList:exception_];
      [((id<ComItextpdfTextPdfHyphenationPatternConsumer>) nil_chk(consumer_)) addExceptionWithNSString:[self getExceptionWordWithJavaUtilArrayList:exception_] withJavaUtilArrayList:
#line 191
      (JavaUtilArrayList *) check_class_cast([((JavaUtilArrayList *) nil_chk(exception_)) clone], [JavaUtilArrayList class])];
      break;
      case ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS:
      [((id<ComItextpdfTextPdfHyphenationPatternConsumer>) nil_chk(consumer_)) addPatternWithNSString:[ComItextpdfTextPdfHyphenationSimplePatternParser getPatternWithNSString:word] withNSString:
#line 195
      [ComItextpdfTextPdfHyphenationSimplePatternParser getInterletterValuesWithNSString:word]];
      break;
      case ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN:
      
#line 199
      break;
    }
    if (currElement_ != ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN) {
      [token_ setLengthWithInt:0];
    }
  }
  if (currElement_ == ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN) {
    currElement_ = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS;
  }
  else {
    
#line 208
    currElement_ = 0;
  }
}


#line 212
- (void)startDocument {
}

- (void)startElementWithNSString:(NSString *)tag
                 withJavaUtilMap:(id<JavaUtilMap>)h {
  
#line 216
  if ([((NSString *) nil_chk(tag)) isEqual:@"hyphen-char"]) {
    NSString *hh = [((id<JavaUtilMap>) nil_chk(h)) getWithId:@"value"];
    if (hh != nil && ((jint) [hh length]) == 1) {
      hyphenChar_ = [hh charAtWithInt:0];
    }
  }
  else
#line 221
  if ([tag isEqual:@"classes"]) {
    currElement_ = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_CLASSES;
  }
  else
#line 223
  if ([tag isEqual:@"patterns"]) {
    currElement_ = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS;
  }
  else
#line 225
  if ([tag isEqual:@"exceptions"]) {
    currElement_ = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS;
    exception_ = [[JavaUtilArrayList alloc] init];
  }
  else
#line 228
  if ([tag isEqual:@"hyphen"]) {
    if ([((JavaLangStringBuffer *) nil_chk(token_)) sequenceLength] > 0) {
      [((JavaUtilArrayList *) nil_chk(exception_)) addWithId:[token_ description]];
    }
    [((JavaUtilArrayList *) nil_chk(exception_)) addWithId:[[ComItextpdfTextPdfHyphenationHyphen alloc] initWithNSString:[((id<JavaUtilMap>) nil_chk(h)) getWithId:@"pre"] withNSString:[h getWithId:
#line 233
    @"no"] withNSString:[h getWithId:@"post"]]];
    currElement_ = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN;
  }
  [((JavaLangStringBuffer *) nil_chk(token_)) setLengthWithInt:0];
}


#line 240
- (void)textWithNSString:(NSString *)str {
  
#line 241
  JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:str];
  while ([tk hasMoreTokens]) {
    NSString *word = [tk nextToken];
    
#line 245
    switch (currElement_) {
      case ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_CLASSES:
      [((id<ComItextpdfTextPdfHyphenationPatternConsumer>) nil_chk(consumer_)) addClassWithNSString:word];
      break;
      case ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS:
      [((JavaUtilArrayList *) nil_chk(exception_)) addWithId:word];
      exception_ = [self normalizeExceptionWithJavaUtilArrayList:exception_];
      [((id<ComItextpdfTextPdfHyphenationPatternConsumer>) nil_chk(consumer_)) addExceptionWithNSString:[self getExceptionWordWithJavaUtilArrayList:exception_] withJavaUtilArrayList:
#line 253
      (JavaUtilArrayList *) check_class_cast([((JavaUtilArrayList *) nil_chk(exception_)) clone], [JavaUtilArrayList class])];
      [exception_ clear];
      break;
      case ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS:
      [((id<ComItextpdfTextPdfHyphenationPatternConsumer>) nil_chk(consumer_)) addPatternWithNSString:[ComItextpdfTextPdfHyphenationSimplePatternParser getPatternWithNSString:word] withNSString:
#line 258
      [ComItextpdfTextPdfHyphenationSimplePatternParser getInterletterValuesWithNSString:word]];
      break;
    }
  }
}


#line 265
- (void)addClassWithNSString:(NSString *)c {
  
#line 266
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"class: ", c)];
}


#line 269
- (void)addExceptionWithNSString:(NSString *)w
           withJavaUtilArrayList:(JavaUtilArrayList *)e {
  
#line 270
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$$$", @"exception: ", w, @" : ", [((JavaUtilArrayList *) nil_chk(e)) description])];
}


#line 273
- (void)addPatternWithNSString:(NSString *)p
                  withNSString:(NSString *)v {
  
#line 274
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$$$", @"pattern: ", p, @" : ", v)];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfHyphenationSimplePatternParser *)other {
  [super copyAllFieldsTo:other];
  other->consumer_ = consumer_;
  other->currElement_ = currElement_;
  other->exception_ = exception_;
  other->hyphenChar_ = hyphenChar_;
  other->parser_ = parser_;
  other->token_ = token_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimplePatternParser", NULL, 0x1, NULL },
    { "parseWithJavaIoInputStream:withComItextpdfTextPdfHyphenationPatternConsumer:", "parse", "V", 0x1, NULL },
    { "getPatternWithNSString:", "getPattern", "Ljava.lang.String;", 0xc, NULL },
    { "normalizeExceptionWithJavaUtilArrayList:", "normalizeException", "Ljava.util.ArrayList;", 0x4, NULL },
    { "getExceptionWordWithJavaUtilArrayList:", "getExceptionWord", "Ljava.lang.String;", 0x4, NULL },
    { "getInterletterValuesWithNSString:", "getInterletterValues", "Ljava.lang.String;", 0xc, NULL },
    { "endDocument", NULL, "V", 0x1, NULL },
    { "endElementWithNSString:", "endElement", "V", 0x1, NULL },
    { "startDocument", NULL, "V", 0x1, NULL },
    { "startElementWithNSString:withJavaUtilMap:", "startElement", "V", 0x1, NULL },
    { "textWithNSString:", "text", "V", 0x1, NULL },
    { "addClassWithNSString:", "addClass", "V", 0x1, NULL },
    { "addExceptionWithNSString:withJavaUtilArrayList:", "addException", "V", 0x1, NULL },
    { "addPatternWithNSString:withNSString:", "addPattern", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "currElement_", NULL, 0x0, "I", NULL,  },
    { "consumer_", NULL, 0x0, "Lcom.itextpdf.text.pdf.hyphenation.PatternConsumer;", NULL,  },
    { "token_", NULL, 0x0, "Ljava.lang.StringBuffer;", NULL,  },
    { "exception_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "hyphenChar_", NULL, 0x0, "C", NULL,  },
    { "parser_", NULL, 0x0, "Lcom.itextpdf.text.xml.simpleparser.SimpleXMLParser;", NULL,  },
    { "ELEM_CLASSES_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_CLASSES },
    { "ELEM_EXCEPTIONS_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_EXCEPTIONS },
    { "ELEM_PATTERNS_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_PATTERNS },
    { "ELEM_HYPHEN_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfHyphenationSimplePatternParser_ELEM_HYPHEN },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfHyphenationSimplePatternParser = { "SimplePatternParser", "com.itextpdf.text.pdf.hyphenation", NULL, 0x1, 14, methods, 10, fields, 0, NULL};
  return &_ComItextpdfTextPdfHyphenationSimplePatternParser;
}

@end
