//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/FdfWriter.java
//

#ifndef _ComItextpdfTextPdfFdfWriter_H_
#define _ComItextpdfTextPdfFdfWriter_H_

#include "J2ObjC_header.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"

@class ComItextpdfTextPdfAcroFields;
@class ComItextpdfTextPdfFdfReader;
@class ComItextpdfTextPdfPdfAction;
@class ComItextpdfTextPdfPdfArray;
@class ComItextpdfTextPdfPdfObject;
@class ComItextpdfTextPdfPdfReader;
@class JavaIoOutputStream;
@class JavaUtilHashMap;
@protocol ComItextpdfTextLogCounter;

@interface ComItextpdfTextPdfFdfWriter : NSObject {
 @public
  JavaUtilHashMap *fields_;
  id<ComItextpdfTextLogCounter> COUNTER_;
}

#pragma mark Public

- (instancetype)init;

- (NSString *)getFieldWithNSString:(NSString *)field;

- (JavaUtilHashMap *)getFields;

- (NSString *)getFile;

- (jboolean)removeFieldWithNSString:(NSString *)field;

- (jboolean)setFieldAsActionWithNSString:(NSString *)field
         withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action;

- (jboolean)setFieldAsNameWithNSString:(NSString *)field
                          withNSString:(NSString *)value;

- (jboolean)setFieldAsStringWithNSString:(NSString *)field
                            withNSString:(NSString *)value;

- (void)setFieldsWithComItextpdfTextPdfAcroFields:(ComItextpdfTextPdfAcroFields *)af;

- (void)setFieldsWithComItextpdfTextPdfFdfReader:(ComItextpdfTextPdfFdfReader *)fdf;

- (void)setFieldsWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)pdf;

- (void)setFileWithNSString:(NSString *)file;

- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)os;

#pragma mark Protected

- (id<ComItextpdfTextLogCounter>)getCounter;

#pragma mark Package-Private

- (void)iterateFieldsWithJavaUtilHashMap:(JavaUtilHashMap *)values
                     withJavaUtilHashMap:(JavaUtilHashMap *)map
                            withNSString:(NSString *)name;

- (jboolean)setFieldWithNSString:(NSString *)field
 withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value;

@end

J2OBJC_STATIC_INIT(ComItextpdfTextPdfFdfWriter)

J2OBJC_FIELD_SETTER(ComItextpdfTextPdfFdfWriter, fields_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfFdfWriter, COUNTER_, id<ComItextpdfTextLogCounter>)

FOUNDATION_EXPORT void ComItextpdfTextPdfFdfWriter_init(ComItextpdfTextPdfFdfWriter *self);

FOUNDATION_EXPORT ComItextpdfTextPdfFdfWriter *new_ComItextpdfTextPdfFdfWriter_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextPdfFdfWriter)

@interface ComItextpdfTextPdfFdfWriter_Wrt : ComItextpdfTextPdfPdfWriter

#pragma mark Package-Private

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
           withComItextpdfTextPdfFdfWriter:(ComItextpdfTextPdfFdfWriter *)fdf;

- (ComItextpdfTextPdfPdfArray *)calculateWithJavaUtilHashMap:(JavaUtilHashMap *)map;

- (void)writeTo;

@end

J2OBJC_EMPTY_STATIC_INIT(ComItextpdfTextPdfFdfWriter_Wrt)

FOUNDATION_EXPORT void ComItextpdfTextPdfFdfWriter_Wrt_initWithJavaIoOutputStream_withComItextpdfTextPdfFdfWriter_(ComItextpdfTextPdfFdfWriter_Wrt *self, JavaIoOutputStream *os, ComItextpdfTextPdfFdfWriter *fdf);

FOUNDATION_EXPORT ComItextpdfTextPdfFdfWriter_Wrt *new_ComItextpdfTextPdfFdfWriter_Wrt_initWithJavaIoOutputStream_withComItextpdfTextPdfFdfWriter_(JavaIoOutputStream *os, ComItextpdfTextPdfFdfWriter *fdf) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextPdfFdfWriter_Wrt)

#endif // _ComItextpdfTextPdfFdfWriter_H_
