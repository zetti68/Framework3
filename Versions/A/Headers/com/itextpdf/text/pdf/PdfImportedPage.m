//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfImportedPage.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfImportedPage.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfImportedPage.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfReaderInstance.h"
#include "com/itextpdf/text/pdf/PdfSpotColor.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfTemplate.h"
#include "com/itextpdf/text/pdf/PdfTransparencyGroup.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/io/IOException.h"
#include "java/lang/RuntimeException.h"


#line 57
@implementation ComItextpdfTextPdfPdfImportedPage


#line 69
- (instancetype)initWithComItextpdfTextPdfPdfReaderInstance:(ComItextpdfTextPdfPdfReaderInstance *)readerInstance
                            withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                    withInt:(jint)pageNumber {
  if (self = [super init]) {
    toCopy_ =
#line 67
    YES;
    
#line 70
    self->readerInstance_ = readerInstance;
    
#line 71
    self->pageNumber_ = pageNumber;
    
#line 72
    self->writer_ = writer;
    
#line 73
    rotation_ = [((ComItextpdfTextPdfPdfReader *) nil_chk([((ComItextpdfTextPdfPdfReaderInstance *) nil_chk(readerInstance)) getReader])) getPageRotationWithInt:pageNumber];
    
#line 74
    bBox_ = [((ComItextpdfTextPdfPdfReader *) nil_chk([readerInstance getReader])) getPageSizeWithInt:pageNumber];
    
#line 75
    [self setMatrixWithFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:-[((ComItextpdfTextRectangle *) nil_chk(bBox_)) getLeft] withFloat:-[bBox_ getBottom]];
    
#line 76
    type_ = ComItextpdfTextPdfPdfTemplate_TYPE_IMPORTED;
  }
  return self;
}


#line 84
- (ComItextpdfTextPdfPdfImportedPage *)getFromReader {
  
#line 85
  return self;
}


#line 88
- (jint)getPageNumber {
  
#line 89
  return pageNumber_;
}


#line 92
- (jint)getRotation {
  
#line 93
  return rotation_;
}


#line 106
- (void)addImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                               withFloat:(jfloat)a
                               withFloat:(jfloat)b
                               withFloat:(jfloat)c
                               withFloat:(jfloat)d
                               withFloat:(jfloat)e
                               withFloat:(jfloat)f {
  
#line 107
  [self throwError];
}

- (void)addTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_
                                           withFloat:(jfloat)a
                                           withFloat:(jfloat)b
                                           withFloat:(jfloat)c
                                           withFloat:(jfloat)d
                                           withFloat:(jfloat)e
                                           withFloat:(jfloat)f {
  
#line 119
  [self throwError];
}


#line 124
- (ComItextpdfTextPdfPdfContentByte *)getDuplicate {
  
#line 125
  [self throwError];
  return nil;
}


#line 136
- (ComItextpdfTextPdfPdfStream *)getFormXObjectWithInt:(jint)compressionLevel {
  
#line 137
  return [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk(readerInstance_)) getFormXObjectWithInt:pageNumber_ withInt:compressionLevel];
}


#line 140
- (void)setColorFillWithComItextpdfTextPdfPdfSpotColor:(ComItextpdfTextPdfPdfSpotColor *)sp
                                             withFloat:(jfloat)tint {
  
#line 141
  [self throwError];
}


#line 144
- (void)setColorStrokeWithComItextpdfTextPdfPdfSpotColor:(ComItextpdfTextPdfPdfSpotColor *)sp
                                               withFloat:(jfloat)tint {
  
#line 145
  [self throwError];
}


#line 148
- (ComItextpdfTextPdfPdfObject *)getResources {
  
#line 149
  return [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk(readerInstance_)) getResourcesWithInt:pageNumber_];
}


#line 155
- (void)setFontAndSizeWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf
                                           withFloat:(jfloat)size {
  
#line 156
  [self throwError];
}


#line 164
- (void)setGroupWithComItextpdfTextPdfPdfTransparencyGroup:(ComItextpdfTextPdfPdfTransparencyGroup *)group {
  
#line 165
  [self throwError];
}


#line 168
- (void)throwError {
  
#line 169
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"content.can.not.be.added.to.a.pdfimportedpage" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 172
- (ComItextpdfTextPdfPdfReaderInstance *)getPdfReaderInstance {
  
#line 173
  return readerInstance_;
}


#line 181
- (jboolean)isToCopy {
  
#line 182
  return toCopy_;
}


#line 189
- (void)setCopied {
  
#line 190
  toCopy_ = NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfImportedPage *)other {
  [super copyAllFieldsTo:other];
  other->pageNumber_ = pageNumber_;
  other->readerInstance_ = readerInstance_;
  other->rotation_ = rotation_;
  other->toCopy_ = toCopy_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReaderInstance:withComItextpdfTextPdfPdfWriter:withInt:", "PdfImportedPage", NULL, 0x0, NULL },
    { "getFromReader", NULL, "Lcom.itextpdf.text.pdf.PdfImportedPage;", 0x1, NULL },
    { "getPageNumber", NULL, "I", 0x1, NULL },
    { "getRotation", NULL, "I", 0x1, NULL },
    { "addImageWithComItextpdfTextImage:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "addImage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addTemplateWithComItextpdfTextPdfPdfTemplate:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "addTemplate", "V", 0x1, NULL },
    { "getDuplicate", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getFormXObjectWithInt:", "getFormXObject", "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, "Ljava.io.IOException;" },
    { "setColorFillWithComItextpdfTextPdfPdfSpotColor:withFloat:", "setColorFill", "V", 0x1, NULL },
    { "setColorStrokeWithComItextpdfTextPdfPdfSpotColor:withFloat:", "setColorStroke", "V", 0x1, NULL },
    { "getResources", NULL, "Lcom.itextpdf.text.pdf.PdfObject;", 0x0, NULL },
    { "setFontAndSizeWithComItextpdfTextPdfBaseFont:withFloat:", "setFontAndSize", "V", 0x1, NULL },
    { "setGroupWithComItextpdfTextPdfPdfTransparencyGroup:", "setGroup", "V", 0x1, NULL },
    { "throwError", NULL, "V", 0x0, NULL },
    { "getPdfReaderInstance", NULL, "Lcom.itextpdf.text.pdf.PdfReaderInstance;", 0x0, NULL },
    { "isToCopy", NULL, "Z", 0x1, NULL },
    { "setCopied", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "readerInstance_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfReaderInstance;", NULL,  },
    { "pageNumber_", NULL, 0x0, "I", NULL,  },
    { "rotation_", NULL, 0x0, "I", NULL,  },
    { "toCopy_", NULL, 0x4, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfImportedPage = { "PdfImportedPage", "com.itextpdf.text.pdf", NULL, 0x1, 17, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfImportedPage;
}

@end
