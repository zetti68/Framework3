//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfFileSpecification.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfFileSpecification.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/io/StreamUtil.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfDate.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEFStream.h"
#include "com/itextpdf/text/pdf/PdfFileSpecification.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/collection/PdfCollectionItem.h"
#include "com/itextpdf/text/pdf/internal/PdfIsoKeys.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/net/URL.h"


#line 58
@implementation ComItextpdfTextPdfPdfFileSpecification


#line 63
- (instancetype)init {
  return
#line 64
  [super initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILESPEC_()];
}


#line 73
+ (ComItextpdfTextPdfPdfFileSpecification *)urlWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                                  withNSString:(NSString *)url {
  
#line 74
  ComItextpdfTextPdfPdfFileSpecification *fs = [[ComItextpdfTextPdfPdfFileSpecification alloc] init];
  fs->writer_ = writer;
  [fs putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FS_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_URL_()];
  [fs putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:url]];
  return fs;
}


#line 92
+ (ComItextpdfTextPdfPdfFileSpecification *)fileEmbeddedWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                                           withNSString:(NSString *)filePath
                                                                           withNSString:(NSString *)fileDisplay
                                                                          withByteArray:(IOSByteArray *)fileStore {
  
#line 93
  return [ComItextpdfTextPdfPdfFileSpecification fileEmbeddedWithComItextpdfTextPdfPdfWriter:writer withNSString:filePath withNSString:fileDisplay withByteArray:fileStore withInt:ComItextpdfTextPdfPdfStream_BEST_COMPRESSION];
}


#line 110
+ (ComItextpdfTextPdfPdfFileSpecification *)fileEmbeddedWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                                           withNSString:(NSString *)filePath
                                                                           withNSString:(NSString *)fileDisplay
                                                                          withByteArray:(IOSByteArray *)fileStore
                                                                                withInt:(jint)compressionLevel {
  
#line 111
  return [ComItextpdfTextPdfPdfFileSpecification fileEmbeddedWithComItextpdfTextPdfPdfWriter:writer withNSString:filePath withNSString:fileDisplay withByteArray:fileStore withNSString:nil withComItextpdfTextPdfPdfDictionary:nil withInt:compressionLevel];
}


#line 128
+ (ComItextpdfTextPdfPdfFileSpecification *)fileEmbeddedWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                                           withNSString:(NSString *)filePath
                                                                           withNSString:(NSString *)fileDisplay
                                                                          withByteArray:(IOSByteArray *)fileStore
                                                                            withBoolean:(jboolean)compress {
  
#line 129
  return [ComItextpdfTextPdfPdfFileSpecification fileEmbeddedWithComItextpdfTextPdfPdfWriter:writer withNSString:filePath withNSString:fileDisplay withByteArray:fileStore withNSString:nil withComItextpdfTextPdfPdfDictionary:nil withInt:compress ? ComItextpdfTextPdfPdfStream_BEST_COMPRESSION : ComItextpdfTextPdfPdfStream_NO_COMPRESSION];
}


#line 147
+ (ComItextpdfTextPdfPdfFileSpecification *)fileEmbeddedWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                                           withNSString:(NSString *)filePath
                                                                           withNSString:(NSString *)fileDisplay
                                                                          withByteArray:(IOSByteArray *)fileStore
                                                                            withBoolean:(jboolean)compress
                                                                           withNSString:(NSString *)mimeType
                                                    withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)fileParameter {
  
#line 148
  return [ComItextpdfTextPdfPdfFileSpecification fileEmbeddedWithComItextpdfTextPdfPdfWriter:writer withNSString:filePath withNSString:fileDisplay withByteArray:fileStore withNSString:mimeType withComItextpdfTextPdfPdfDictionary:fileParameter withInt:compress ? ComItextpdfTextPdfPdfStream_BEST_COMPRESSION : ComItextpdfTextPdfPdfStream_NO_COMPRESSION];
}


#line 166
+ (ComItextpdfTextPdfPdfFileSpecification *)fileEmbeddedWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                                           withNSString:(NSString *)filePath
                                                                           withNSString:(NSString *)fileDisplay
                                                                          withByteArray:(IOSByteArray *)fileStore
                                                                           withNSString:(NSString *)mimeType
                                                    withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)fileParameter
                                                                                withInt:(jint)compressionLevel {
  
#line 167
  ComItextpdfTextPdfPdfFileSpecification *fs = [[ComItextpdfTextPdfPdfFileSpecification alloc] init];
  fs->writer_ = writer;
  [fs putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:fileDisplay]];
  [fs setUnicodeFileNameWithNSString:fileDisplay withBoolean:NO];
  ComItextpdfTextPdfPdfEFStream *stream;
  JavaIoInputStream *in = nil;
  ComItextpdfTextPdfPdfIndirectReference *ref;
  ComItextpdfTextPdfPdfIndirectReference *refFileLength = nil;
  @try {
    if (fileStore == nil) {
      refFileLength = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getPdfIndirectReference];
      JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:filePath];
      if ([file canRead]) {
        in = [[JavaIoFileInputStream alloc] initWithNSString:filePath];
      }
      else {
        if ([((NSString *) nil_chk(filePath)) hasPrefix:@"file:/"] || [filePath hasPrefix:@"http://"] || [filePath hasPrefix:@"https://"] || [filePath hasPrefix:@"jar:"]) {
          in = [((JavaNetURL *) [[JavaNetURL alloc] initWithNSString:filePath]) openStream];
        }
        else {
          in = [ComItextpdfTextIoStreamUtil getResourceStreamWithNSString:filePath];
          if (in == nil)
#line 189
          @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.not.found.as.file.or.resource" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ filePath } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
        }
      }
      stream = [[ComItextpdfTextPdfPdfEFStream alloc] initWithJavaIoInputStream:in withComItextpdfTextPdfPdfWriter:writer];
    }
    else {
      stream = [[ComItextpdfTextPdfPdfEFStream alloc] initWithByteArray:fileStore];
    }
    [((ComItextpdfTextPdfPdfEFStream *) nil_chk(stream)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_EMBEDDEDFILE_()];
    [stream flateCompressWithInt:compressionLevel];
    ComItextpdfTextPdfPdfDictionary *param = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    if (fileParameter != nil) {
      [param mergeWithComItextpdfTextPdfPdfDictionary:fileParameter];
    }
    if (![param containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MODDATE_()]) {
      [param putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MODDATE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfDate alloc] init]];
    }
    if (fileStore == nil) {
      [stream putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARAMS_() withComItextpdfTextPdfPdfObject:refFileLength];
    }
    else {
      [param putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIZE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[stream getRawLength]]];
      [stream putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARAMS_() withComItextpdfTextPdfPdfObject:param];
    }
    
#line 214
    if (mimeType != nil)
#line 215
    [stream putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:mimeType]];
    
#line 217
    ref = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:stream])) getIndirectReference];
    if (fileStore == nil) {
      [stream writeLength];
      [param putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIZE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[stream getRawLength]]];
      (void) [writer addToBodyWithComItextpdfTextPdfPdfObject:param withComItextpdfTextPdfPdfIndirectReference:refFileLength];
    }
  }
  @finally {
    if (in != nil)
#line 226
    @try {
      
#line 226
      [in close];
    }
    @catch (
#line 226
    JavaLangException *e) {
    }
  }
  
#line 228
  ComItextpdfTextPdfPdfDictionary *f = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [f putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:ref];
  [f putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_UF_() withComItextpdfTextPdfPdfObject:ref];
  [fs putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EF_() withComItextpdfTextPdfPdfObject:f];
  return fs;
}


#line 241
+ (ComItextpdfTextPdfPdfFileSpecification *)fileExternWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                                         withNSString:(NSString *)filePath {
  
#line 242
  ComItextpdfTextPdfPdfFileSpecification *fs = [[ComItextpdfTextPdfPdfFileSpecification alloc] init];
  fs->writer_ = writer;
  [fs putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:filePath]];
  [fs setUnicodeFileNameWithNSString:filePath withBoolean:NO];
  return fs;
}


#line 255
- (ComItextpdfTextPdfPdfIndirectReference *)getReference {
  
#line 256
  if (ref_ != nil)
#line 257
  return ref_;
  ref_ = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:self])) getIndirectReference];
  return ref_;
}


#line 268
- (void)setMultiByteFileNameWithByteArray:(IOSByteArray *)fileName {
  
#line 269
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfString *) [[ComItextpdfTextPdfPdfString alloc] initWithByteArray:fileName]) setHexWritingWithBoolean:YES]];
}


#line 279
- (void)setUnicodeFileNameWithNSString:(NSString *)filename
                           withBoolean:(jboolean)unicode {
  
#line 280
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_UF_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:filename withNSString:unicode ? ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_() : ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_()]];
}


#line 289
- (void)setVolatileWithBoolean:(jboolean)volatile_file {
  
#line 290
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfBoolean alloc] initWithBoolean:volatile_file]];
}


#line 298
- (void)addDescriptionWithNSString:(NSString *)description_
                       withBoolean:(jboolean)unicode {
  
#line 299
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESC_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:description_ withNSString:unicode ? ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_() : ComItextpdfTextPdfPdfObject_get_TEXT_PDFDOCENCODING_()]];
}

- (void)addCollectionItemWithComItextpdfTextPdfCollectionPdfCollectionItem:(ComItextpdfTextPdfCollectionPdfCollectionItem *)ci {
  
#line 306
  [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CI_() withComItextpdfTextPdfPdfObject:ci];
}


#line 310
- (void)toPdfWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                      withJavaIoOutputStream:(JavaIoOutputStream *)os {
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_FILESPEC withId:self];
  [super toPdfWithComItextpdfTextPdfPdfWriter:writer withJavaIoOutputStream:os];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfFileSpecification *)other {
  [super copyAllFieldsTo:other];
  other->ref_ = ref_;
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfFileSpecification", NULL, 0x1, NULL },
    { "urlWithComItextpdfTextPdfPdfWriter:withNSString:", "url", "Lcom.itextpdf.text.pdf.PdfFileSpecification;", 0x9, NULL },
    { "fileEmbeddedWithComItextpdfTextPdfPdfWriter:withNSString:withNSString:withByteArray:", "fileEmbedded", "Lcom.itextpdf.text.pdf.PdfFileSpecification;", 0x9, "Ljava.io.IOException;" },
    { "fileEmbeddedWithComItextpdfTextPdfPdfWriter:withNSString:withNSString:withByteArray:withInt:", "fileEmbedded", "Lcom.itextpdf.text.pdf.PdfFileSpecification;", 0x9, "Ljava.io.IOException;" },
    { "fileEmbeddedWithComItextpdfTextPdfPdfWriter:withNSString:withNSString:withByteArray:withBoolean:", "fileEmbedded", "Lcom.itextpdf.text.pdf.PdfFileSpecification;", 0x9, "Ljava.io.IOException;" },
    { "fileEmbeddedWithComItextpdfTextPdfPdfWriter:withNSString:withNSString:withByteArray:withBoolean:withNSString:withComItextpdfTextPdfPdfDictionary:", "fileEmbedded", "Lcom.itextpdf.text.pdf.PdfFileSpecification;", 0x9, "Ljava.io.IOException;" },
    { "fileEmbeddedWithComItextpdfTextPdfPdfWriter:withNSString:withNSString:withByteArray:withNSString:withComItextpdfTextPdfPdfDictionary:withInt:", "fileEmbedded", "Lcom.itextpdf.text.pdf.PdfFileSpecification;", 0x9, "Ljava.io.IOException;" },
    { "fileExternWithComItextpdfTextPdfPdfWriter:withNSString:", "fileExtern", "Lcom.itextpdf.text.pdf.PdfFileSpecification;", 0x9, NULL },
    { "getReference", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, "Ljava.io.IOException;" },
    { "setMultiByteFileNameWithByteArray:", "setMultiByteFileName", "V", 0x1, NULL },
    { "setUnicodeFileNameWithNSString:withBoolean:", "setUnicodeFileName", "V", 0x1, NULL },
    { "setVolatileWithBoolean:", "setVolatile", "V", 0x1, NULL },
    { "addDescriptionWithNSString:withBoolean:", "addDescription", "V", 0x1, NULL },
    { "addCollectionItemWithComItextpdfTextPdfCollectionPdfCollectionItem:", "addCollectionItem", "V", 0x1, NULL },
    { "toPdfWithComItextpdfTextPdfPdfWriter:withJavaIoOutputStream:", "toPdf", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "ref_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfFileSpecification = { "PdfFileSpecification", "com.itextpdf.text.pdf", NULL, 0x1, 15, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfFileSpecification;
}

@end
