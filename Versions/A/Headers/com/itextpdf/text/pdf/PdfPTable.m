//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPTable.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPTable.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ElementListener.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/log/LoggerFactory.h"
#include "com/itextpdf/text/pdf/PdfArtifact.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfPCell.h"
#include "com/itextpdf/text/pdf/PdfPHeaderCell.h"
#include "com/itextpdf/text/pdf/PdfPRow.h"
#include "com/itextpdf/text/pdf/PdfPTable.h"
#include "com/itextpdf/text/pdf/PdfPTableBody.h"
#include "com/itextpdf/text/pdf/PdfPTableEvent.h"
#include "com/itextpdf/text/pdf/PdfPTableFooter.h"
#include "com/itextpdf/text/pdf/PdfPTableHeader.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/events/PdfPTableEventForwarder.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"


#line 70
@implementation ComItextpdfTextPdfPdfPTable


#line 209
- (instancetype)init {
  if (self = [super init]) {
    LOGGER_ =
#line 72
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPTable class]]];
    rows_ =
#line 93
    [[JavaUtilArrayList alloc] init];
    totalHeight_ =
#line 94
    0;
    currentColIdx_ =
#line 101
    0;
    defaultCell_ =
#line 102
    [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *) check_class_cast(nil, [ComItextpdfTextPhrase class])];
    totalWidth_ =
#line 103
    0;
    widthPercentage_ =
#line 116
    80;
    horizontalAlignment_ =
#line 121
    ComItextpdfTextElement_ALIGN_CENTER;
    skipFirstHeader_ =
#line 126
    NO;
    skipLastFooter_ =
#line 132
    NO;
    isColspan_ =
#line 134
    NO;
    runDirection_ =
#line 136
    ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
    lockedWidth_ =
#line 141
    NO;
    splitRows_ =
#line 146
    YES;
    extendLastRow_ = [IOSBooleanArray arrayWithBooleans:(jboolean[]){
#line 161
      NO, NO } count:2];
      splitLate_ =
#line 171
      YES;
      complete_ =
#line 184
      YES;
      rowCompleted_ =
#line 196
      YES;
      loopCheck_ =
#line 198
      YES;
      rowsNotChecked_ =
#line 199
      YES;
      role_ = ComItextpdfTextPdfPdfName_get_TABLE_();
      accessibleAttributes_ =
#line 202
      nil;
      id__ =
#line 203
      [[ComItextpdfTextAccessibleElementId alloc] init];
      header_ =
#line 204
      nil;
      body_ =
#line 205
      nil;
      footer_ =
#line 206
      nil;
    }
    return self;
  }


#line 217
- (instancetype)initWithFloatArray:(IOSFloatArray *)relativeWidths {
  if (self = [super init]) {
    LOGGER_ =
#line 72
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPTable class]]];
    rows_ =
#line 93
    [[JavaUtilArrayList alloc] init];
    totalHeight_ =
#line 94
    0;
    currentColIdx_ =
#line 101
    0;
    defaultCell_ =
#line 102
    [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *) check_class_cast(nil, [ComItextpdfTextPhrase class])];
    totalWidth_ =
#line 103
    0;
    widthPercentage_ =
#line 116
    80;
    horizontalAlignment_ =
#line 121
    ComItextpdfTextElement_ALIGN_CENTER;
    skipFirstHeader_ =
#line 126
    NO;
    skipLastFooter_ =
#line 132
    NO;
    isColspan_ =
#line 134
    NO;
    runDirection_ =
#line 136
    ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
    lockedWidth_ =
#line 141
    NO;
    splitRows_ =
#line 146
    YES;
    extendLastRow_ = [IOSBooleanArray arrayWithBooleans:(jboolean[]){
#line 161
      NO, NO } count:2];
      splitLate_ =
#line 171
      YES;
      complete_ =
#line 184
      YES;
      rowCompleted_ =
#line 196
      YES;
      loopCheck_ =
#line 198
      YES;
      rowsNotChecked_ =
#line 199
      YES;
      role_ = ComItextpdfTextPdfPdfName_get_TABLE_();
      accessibleAttributes_ =
#line 202
      nil;
      id__ =
#line 203
      [[ComItextpdfTextAccessibleElementId alloc] init];
      header_ =
#line 204
      nil;
      body_ =
#line 205
      nil;
      footer_ =
#line 206
      nil;
      
#line 218
      if (relativeWidths == nil)
#line 219
      @throw [[JavaLangNullPointerException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.widths.array.in.pdfptable.constructor.can.not.be.null" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      
#line 220
      if (((IOSFloatArray *) nil_chk(relativeWidths))->size_ == 0)
#line 221
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.widths.array.in.pdfptable.constructor.can.not.have.zero.length" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      
#line 222
      self->relativeWidths_ = [IOSFloatArray arrayWithLength:relativeWidths->size_];
      
#line 223
      [JavaLangSystem arraycopyWithId:relativeWidths withInt:0 withId:self->relativeWidths_ withInt:0 withInt:relativeWidths->size_];
      
#line 224
      absoluteWidths_ = [IOSFloatArray arrayWithLength:relativeWidths->size_];
      
#line 225
      [self calculateWidths];
      
#line 226
      currentRow_ = [IOSObjectArray arrayWithLength:absoluteWidths_->size_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPCell class]]];
      
#line 227
      keepTogether_ = NO;
    }
    return self;
  }


#line 235
- (instancetype)initWithInt:(jint)numColumns {
  if (self = [super init]) {
    LOGGER_ =
#line 72
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPTable class]]];
    rows_ =
#line 93
    [[JavaUtilArrayList alloc] init];
    totalHeight_ =
#line 94
    0;
    currentColIdx_ =
#line 101
    0;
    defaultCell_ =
#line 102
    [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *) check_class_cast(nil, [ComItextpdfTextPhrase class])];
    totalWidth_ =
#line 103
    0;
    widthPercentage_ =
#line 116
    80;
    horizontalAlignment_ =
#line 121
    ComItextpdfTextElement_ALIGN_CENTER;
    skipFirstHeader_ =
#line 126
    NO;
    skipLastFooter_ =
#line 132
    NO;
    isColspan_ =
#line 134
    NO;
    runDirection_ =
#line 136
    ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
    lockedWidth_ =
#line 141
    NO;
    splitRows_ =
#line 146
    YES;
    extendLastRow_ = [IOSBooleanArray arrayWithBooleans:(jboolean[]){
#line 161
      NO, NO } count:2];
      splitLate_ =
#line 171
      YES;
      complete_ =
#line 184
      YES;
      rowCompleted_ =
#line 196
      YES;
      loopCheck_ =
#line 198
      YES;
      rowsNotChecked_ =
#line 199
      YES;
      role_ = ComItextpdfTextPdfPdfName_get_TABLE_();
      accessibleAttributes_ =
#line 202
      nil;
      id__ =
#line 203
      [[ComItextpdfTextAccessibleElementId alloc] init];
      header_ =
#line 204
      nil;
      body_ =
#line 205
      nil;
      footer_ =
#line 206
      nil;
      
#line 236
      if (numColumns <= 0)
#line 237
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.number.of.columns.in.pdfptable.constructor.must.be.greater.than.zero" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      
#line 238
      relativeWidths_ = [IOSFloatArray arrayWithLength:numColumns];
      
#line 239
      for (jint k = 0; k < numColumns; ++k)
#line 240
      *IOSFloatArray_GetRef(relativeWidths_, k) = 1;
      
#line 241
      absoluteWidths_ = [IOSFloatArray arrayWithLength:relativeWidths_->size_];
      
#line 242
      [self calculateWidths];
      
#line 243
      currentRow_ = [IOSObjectArray arrayWithLength:absoluteWidths_->size_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPCell class]]];
      
#line 244
      keepTogether_ = NO;
    }
    return self;
  }


#line 252
- (instancetype)initWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table {
  if (self = [super init]) {
    LOGGER_ =
#line 72
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPTable class]]];
    rows_ =
#line 93
    [[JavaUtilArrayList alloc] init];
    totalHeight_ =
#line 94
    0;
    currentColIdx_ =
#line 101
    0;
    defaultCell_ =
#line 102
    [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *) check_class_cast(nil, [ComItextpdfTextPhrase class])];
    totalWidth_ =
#line 103
    0;
    widthPercentage_ =
#line 116
    80;
    horizontalAlignment_ =
#line 121
    ComItextpdfTextElement_ALIGN_CENTER;
    skipFirstHeader_ =
#line 126
    NO;
    skipLastFooter_ =
#line 132
    NO;
    isColspan_ =
#line 134
    NO;
    runDirection_ =
#line 136
    ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
    lockedWidth_ =
#line 141
    NO;
    splitRows_ =
#line 146
    YES;
    extendLastRow_ = [IOSBooleanArray arrayWithBooleans:(jboolean[]){
#line 161
      NO, NO } count:2];
      splitLate_ =
#line 171
      YES;
      complete_ =
#line 184
      YES;
      rowCompleted_ =
#line 196
      YES;
      loopCheck_ =
#line 198
      YES;
      rowsNotChecked_ =
#line 199
      YES;
      role_ = ComItextpdfTextPdfPdfName_get_TABLE_();
      accessibleAttributes_ =
#line 202
      nil;
      id__ =
#line 203
      [[ComItextpdfTextAccessibleElementId alloc] init];
      header_ =
#line 204
      nil;
      body_ =
#line 205
      nil;
      footer_ =
#line 206
      nil;
      
#line 253
      [self copyFormatWithComItextpdfTextPdfPdfPTable:table];
      
#line 254
      for (jint k = 0; k < ((IOSObjectArray *) nil_chk(currentRow_))->size_; ++k) {
        if (IOSObjectArray_Get(((ComItextpdfTextPdfPdfPTable *) nil_chk(table))->currentRow_, k) == nil)
#line 256
        break;
        IOSObjectArray_SetAndConsume(currentRow_, k, [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPdfPdfPCell:IOSObjectArray_Get(table->currentRow_, k)]);
      }
      
#line 259
      for (jint k = 0; k < [((ComItextpdfTextPdfPdfPTable *) nil_chk(table))->rows_ size]; ++k) {
        ComItextpdfTextPdfPdfPRow *row = [table->rows_ getWithInt:k];
        if (row != nil)
#line 262
        row = [[ComItextpdfTextPdfPdfPRow alloc] initWithComItextpdfTextPdfPdfPRow:row];
        [rows_ addWithId:row];
      }
    }
    return self;
  }


#line 273
+ (ComItextpdfTextPdfPdfPTable *)shallowCopyWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table {
  
#line 274
  ComItextpdfTextPdfPdfPTable *nt = [[ComItextpdfTextPdfPdfPTable alloc] init];
  [nt copyFormatWithComItextpdfTextPdfPdfPTable:table];
  return nt;
}


#line 285
- (void)copyFormatWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)sourceTable {
  
#line 286
  relativeWidths_ = [IOSFloatArray arrayWithLength:[((ComItextpdfTextPdfPdfPTable *) nil_chk(sourceTable)) getNumberOfColumns]];
  absoluteWidths_ = [IOSFloatArray arrayWithLength:[sourceTable getNumberOfColumns]];
  [JavaLangSystem arraycopyWithId:sourceTable->relativeWidths_ withInt:0 withId:relativeWidths_ withInt:0 withInt:[self getNumberOfColumns]];
  [JavaLangSystem arraycopyWithId:sourceTable->absoluteWidths_ withInt:0 withId:absoluteWidths_ withInt:0 withInt:[self getNumberOfColumns]];
  totalWidth_ = sourceTable->totalWidth_;
  totalHeight_ = sourceTable->totalHeight_;
  currentColIdx_ = 0;
  tableEvent_ = sourceTable->tableEvent_;
  runDirection_ = sourceTable->runDirection_;
  if ([sourceTable->defaultCell_ isKindOfClass:[ComItextpdfTextPdfPdfPHeaderCell class]])
#line 296
  defaultCell_ = [[ComItextpdfTextPdfPdfPHeaderCell alloc] initWithComItextpdfTextPdfPdfPHeaderCell:(ComItextpdfTextPdfPdfPHeaderCell *) check_class_cast(sourceTable->defaultCell_, [ComItextpdfTextPdfPdfPHeaderCell class])];
  else
#line 298
  defaultCell_ = [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPdfPdfPCell:sourceTable->defaultCell_];
  currentRow_ = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(sourceTable->currentRow_))->size_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPCell class]]];
  isColspan_ = sourceTable->isColspan_;
  splitRows_ = sourceTable->splitRows_;
  spacingAfter__ = sourceTable->spacingAfter__;
  spacingBefore__ = sourceTable->spacingBefore__;
  headerRows_ = sourceTable->headerRows_;
  footerRows_ = sourceTable->footerRows_;
  lockedWidth_ = sourceTable->lockedWidth_;
  extendLastRow_ = sourceTable->extendLastRow_;
  headersInEvent_ = sourceTable->headersInEvent_;
  widthPercentage_ = sourceTable->widthPercentage_;
  splitLate_ = sourceTable->splitLate_;
  skipFirstHeader_ = sourceTable->skipFirstHeader_;
  skipLastFooter_ = sourceTable->skipLastFooter_;
  horizontalAlignment_ = sourceTable->horizontalAlignment_;
  keepTogether_ = sourceTable->keepTogether_;
  complete_ = sourceTable->complete_;
  loopCheck_ = sourceTable->loopCheck_;
  id__ = sourceTable->id__;
  role_ = sourceTable->role_;
  if (sourceTable->accessibleAttributes_ != nil)
#line 320
  accessibleAttributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:sourceTable->accessibleAttributes_];
  header_ = [sourceTable getHeader];
  body_ = [sourceTable getBody];
  footer_ = [sourceTable getFooter];
}


#line 333
- (void)setWidthsWithFloatArray:(IOSFloatArray *)relativeWidths {
  
#line 334
  if (((IOSFloatArray *) nil_chk(relativeWidths))->size_ != [self getNumberOfColumns])
#line 335
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"wrong.number.of.columns" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  self->relativeWidths_ = [IOSFloatArray arrayWithLength:relativeWidths->size_];
  [JavaLangSystem arraycopyWithId:relativeWidths withInt:0 withId:self->relativeWidths_ withInt:0 withInt:relativeWidths->size_];
  absoluteWidths_ = [IOSFloatArray arrayWithLength:relativeWidths->size_];
  totalHeight_ = 0;
  [self calculateWidths];
  [self calculateHeights];
}


#line 351
- (void)setWidthsWithIntArray:(IOSIntArray *)relativeWidths {
  
#line 352
  IOSFloatArray *tb = [IOSFloatArray arrayWithLength:((IOSIntArray *) nil_chk(relativeWidths))->size_];
  for (jint k = 0; k < relativeWidths->size_; ++k)
#line 354
  *IOSFloatArray_GetRef(tb, k) = IOSIntArray_Get(relativeWidths, k);
  [self setWidthsWithFloatArray:tb];
}

- (void)calculateWidths {
  
#line 362
  if (totalWidth_ <= 0)
#line 363
  return;
  jfloat total = 0;
  jint numCols = [self getNumberOfColumns];
  for (jint k = 0; k < numCols; ++k)
#line 367
  total += IOSFloatArray_Get(nil_chk(relativeWidths_), k);
  for (jint k = 0; k < numCols; ++k)
#line 369
  *IOSFloatArray_GetRef(nil_chk(absoluteWidths_), k) = totalWidth_ * IOSFloatArray_Get(nil_chk(relativeWidths_), k) / total;
}

- (void)setTotalWidthWithFloat:(jfloat)totalWidth {
  
#line 378
  if (self->totalWidth_ == totalWidth)
#line 379
  return;
  self->totalWidth_ = totalWidth;
  totalHeight_ = 0;
  [self calculateWidths];
  [self calculateHeights];
}


#line 393
- (void)setTotalWidthWithFloatArray:(IOSFloatArray *)columnWidth {
  
#line 394
  if (((IOSFloatArray *) nil_chk(columnWidth))->size_ != [self getNumberOfColumns])
#line 395
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"wrong.number.of.columns" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  totalWidth_ = 0;
  for (jint k = 0; k < columnWidth->size_; ++k)
#line 398
  totalWidth_ += IOSFloatArray_Get(columnWidth, k);
  [self setWidthsWithFloatArray:columnWidth];
}


#line 409
- (void)setWidthPercentageWithFloatArray:(IOSFloatArray *)columnWidth
            withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize {
  
#line 410
  if (((IOSFloatArray *) nil_chk(columnWidth))->size_ != [self getNumberOfColumns])
#line 411
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"wrong.number.of.columns" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  jfloat totalWidth = 0;
  for (jint k = 0; k < columnWidth->size_; ++k)
#line 414
  totalWidth += IOSFloatArray_Get(columnWidth, k);
  widthPercentage_ = totalWidth / ([((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [pageSize getLeft]) * 100.0f;
  [self setWidthsWithFloatArray:columnWidth];
}

- (jfloat)getTotalWidth {
  
#line 425
  return totalWidth_;
}


#line 435
- (jfloat)calculateHeights {
  
#line 436
  if (totalWidth_ <= 0)
#line 437
  return 0;
  totalHeight_ = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(rows_)) size]; ++k) {
    totalHeight_ += [self getRowHeightWithInt:k withBoolean:YES];
  }
  return totalHeight_;
}


#line 451
- (void)resetColumnCountWithInt:(jint)newColCount {
  
#line 452
  if (newColCount <= 0)
#line 453
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.number.of.columns.in.pdfptable.constructor.must.be.greater.than.zero" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  relativeWidths_ = [IOSFloatArray arrayWithLength:newColCount];
  for (jint k = 0; k < newColCount; ++k)
#line 456
  *IOSFloatArray_GetRef(relativeWidths_, k) = 1;
  absoluteWidths_ = [IOSFloatArray arrayWithLength:relativeWidths_->size_];
  [self calculateWidths];
  currentRow_ = [IOSObjectArray arrayWithLength:absoluteWidths_->size_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPCell class]]];
  totalHeight_ = 0;
}


#line 470
- (ComItextpdfTextPdfPdfPCell *)getDefaultCell {
  
#line 471
  return defaultCell_;
}


#line 479
- (ComItextpdfTextPdfPdfPCell *)addCellWithComItextpdfTextPdfPdfPCell:(ComItextpdfTextPdfPdfPCell *)cell {
  
#line 480
  rowCompleted_ = NO;
  ComItextpdfTextPdfPdfPCell *ncell;
  if ([cell isKindOfClass:[ComItextpdfTextPdfPdfPHeaderCell class]])
#line 483
  ncell = [[ComItextpdfTextPdfPdfPHeaderCell alloc] initWithComItextpdfTextPdfPdfPHeaderCell:(ComItextpdfTextPdfPdfPHeaderCell *) check_class_cast(cell, [ComItextpdfTextPdfPdfPHeaderCell class])];
  else
#line 485
  ncell = [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPdfPdfPCell:cell];
  
#line 487
  jint colspan = [((ComItextpdfTextPdfPdfPCell *) nil_chk(ncell)) getColspan];
  colspan = [JavaLangMath maxWithInt:colspan withInt:1];
  colspan = [JavaLangMath minWithInt:colspan withInt:((IOSObjectArray *) nil_chk(currentRow_))->size_ - currentColIdx_];
  [ncell setColspanWithInt:colspan];
  
#line 492
  if (colspan != 1)
#line 493
  isColspan_ = YES;
  jint rdir = [ncell getRunDirection];
  if (rdir == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT)
#line 496
  [ncell setRunDirectionWithInt:runDirection_];
  
#line 498
  [self skipColsWithRowspanAbove];
  
#line 500
  jboolean cellAdded = NO;
  if (currentColIdx_ < currentRow_->size_) {
    IOSObjectArray_Set(currentRow_, currentColIdx_, ncell);
    currentColIdx_ += colspan;
    cellAdded = YES;
  }
  
#line 507
  [self skipColsWithRowspanAbove];
  
#line 509
  while (currentColIdx_ >= currentRow_->size_) {
    jint numCols = [self getNumberOfColumns];
    if (runDirection_ == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL) {
      IOSObjectArray *rtlRow = [IOSObjectArray arrayWithLength:numCols type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPCell class]]];
      jint rev = currentRow_->size_;
      for (jint k = 0; k < currentRow_->size_; ++k) {
        ComItextpdfTextPdfPdfPCell *rcell = IOSObjectArray_Get(currentRow_, k);
        jint cspan = [((ComItextpdfTextPdfPdfPCell *) nil_chk(rcell)) getColspan];
        rev -= cspan;
        IOSObjectArray_Set(rtlRow, rev, rcell);
        k += cspan - 1;
      }
      currentRow_ = rtlRow;
    }
    ComItextpdfTextPdfPdfPRow *row = [[ComItextpdfTextPdfPdfPRow alloc] initWithComItextpdfTextPdfPdfPCellArray:currentRow_];
    if (totalWidth_ > 0) {
      [row setWidthsWithFloatArray:absoluteWidths_];
      totalHeight_ += [row getMaxHeights];
    }
    [((JavaUtilArrayList *) nil_chk(rows_)) addWithId:row];
    currentRow_ = [IOSObjectArray arrayWithLength:numCols type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPCell class]]];
    currentColIdx_ = 0;
    [self skipColsWithRowspanAbove];
    rowCompleted_ = YES;
  }
  
#line 535
  if (!cellAdded) {
    IOSObjectArray_Set(currentRow_, currentColIdx_, ncell);
    currentColIdx_ += colspan;
  }
  return ncell;
}


#line 548
- (void)skipColsWithRowspanAbove {
  
#line 549
  jint direction = 1;
  if (runDirection_ == ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL)
#line 551
  direction = -1;
  while ([self rowSpanAboveWithInt:[((JavaUtilArrayList *) nil_chk(rows_)) size] withInt:currentColIdx_])
#line 553
  currentColIdx_ += direction;
}


#line 563
- (ComItextpdfTextPdfPdfPCell *)cellAtWithInt:(jint)row
                                      withInt:(jint)col {
  
#line 564
  IOSObjectArray *cells = [((ComItextpdfTextPdfPdfPRow *) nil_chk([((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:row])) getCells];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(cells))->size_; i++) {
    if (IOSObjectArray_Get(cells, i) != nil) {
      if (col >= i && col < (i + [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(cells, i))) getColspan])) {
        return IOSObjectArray_Get(cells, i);
      }
    }
  }
  return nil;
}


#line 583
- (jboolean)rowSpanAboveWithInt:(jint)currRow
                        withInt:(jint)currCol {
  
#line 584
  if (currCol >= [self getNumberOfColumns] ||
#line 585
  currCol < 0 ||
#line 586
  currRow < 1)
#line 587
  return NO;
  jint row = currRow - 1;
  ComItextpdfTextPdfPdfPRow *aboveRow = [((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:row];
  if (aboveRow == nil)
#line 591
  return NO;
  ComItextpdfTextPdfPdfPCell *aboveCell = [self cellAtWithInt:row withInt:currCol];
  while (aboveCell == nil && row > 0) {
    aboveRow = [rows_ getWithInt:--row];
    if (aboveRow == nil)
#line 596
    return NO;
    aboveCell = [self cellAtWithInt:row withInt:currCol];
  }
  
#line 600
  jint distance = currRow - row;
  
#line 602
  if ([((ComItextpdfTextPdfPdfPCell *) nil_chk(aboveCell)) getRowspan] == 1 && distance > 1) {
    jint col = currCol - 1;
    aboveRow = [rows_ getWithInt:row + 1];
    distance--;
    aboveCell = IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk(aboveRow)) getCells]), col);
    while (aboveCell == nil && col > 0)
#line 608
    aboveCell = IOSObjectArray_Get(nil_chk([aboveRow getCells]), --col);
  }
  
#line 611
  return aboveCell != nil && [aboveCell getRowspan] > distance;
}


#line 620
- (void)addCellWithNSString:(NSString *)text {
  
#line 621
  [self addCellWithComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithNSString:text]];
}


#line 629
- (void)addCellWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table {
  
#line 630
  [((ComItextpdfTextPdfPdfPCell *) nil_chk(defaultCell_)) setTableWithComItextpdfTextPdfPdfPTable:table];
  ComItextpdfTextPdfPdfPCell *newCell = [self addCellWithComItextpdfTextPdfPdfPCell:defaultCell_];
  ((ComItextpdfTextPdfPdfPCell *) nil_chk(newCell))->id__ = [[ComItextpdfTextAccessibleElementId alloc] init];
  [defaultCell_ setTableWithComItextpdfTextPdfPdfPTable:nil];
}


#line 642
- (void)addCellWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 643
  [((ComItextpdfTextPdfPdfPCell *) nil_chk(defaultCell_)) setImageWithComItextpdfTextImage:image];
  ComItextpdfTextPdfPdfPCell *newCell = [self addCellWithComItextpdfTextPdfPdfPCell:defaultCell_];
  ((ComItextpdfTextPdfPdfPCell *) nil_chk(newCell))->id__ = [[ComItextpdfTextAccessibleElementId alloc] init];
  [defaultCell_ setImageWithComItextpdfTextImage:nil];
}


#line 654
- (void)addCellWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  
#line 655
  [((ComItextpdfTextPdfPdfPCell *) nil_chk(defaultCell_)) setPhraseWithComItextpdfTextPhrase:phrase];
  ComItextpdfTextPdfPdfPCell *newCell = [self addCellWithComItextpdfTextPdfPdfPCell:defaultCell_];
  ((ComItextpdfTextPdfPdfPCell *) nil_chk(newCell))->id__ = [[ComItextpdfTextAccessibleElementId alloc] init];
  [defaultCell_ setPhraseWithComItextpdfTextPhrase:nil];
}


#line 675
- (jfloat)writeSelectedRowsWithInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 676
  return [self writeSelectedRowsWithInt:0 withInt:-1 withInt:rowStart withInt:rowEnd withFloat:xPos withFloat:yPos withComItextpdfTextPdfPdfContentByteArray:canvases];
}


#line 699
- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 700
  return [self writeSelectedRowsWithInt:colStart withInt:colEnd withInt:rowStart withInt:rowEnd withFloat:xPos withFloat:yPos withComItextpdfTextPdfPdfContentByteArray:canvases withBoolean:YES];
}


#line 726
- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases
                       withBoolean:(jboolean)reusable {
  
#line 727
  if (totalWidth_ <= 0)
#line 728
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.table.width.must.be.greater.than.zero" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 730
  jint totalRows = [((JavaUtilArrayList *) nil_chk(rows_)) size];
  if (rowStart < 0)
#line 732
  rowStart = 0;
  if (rowEnd < 0)
#line 734
  rowEnd = totalRows;
  else
#line 736
  rowEnd = [JavaLangMath minWithInt:rowEnd withInt:totalRows];
  if (rowStart >= rowEnd)
#line 738
  return yPos;
  
#line 740
  jint totalCols = [self getNumberOfColumns];
  if (colStart < 0)
#line 742
  colStart = 0;
  else
#line 744
  colStart = [JavaLangMath minWithInt:colStart withInt:totalCols];
  if (colEnd < 0)
#line 746
  colEnd = totalCols;
  else
#line 748
  colEnd = [JavaLangMath minWithInt:colEnd withInt:totalCols];
  
#line 750
  [((id<ComItextpdfTextLogLogger>) nil_chk(LOGGER_)) infoWithNSString:[NSString formatWithNSString:@"Writing row %s to %s; column %s to %s" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:rowStart], [JavaLangInteger valueOfWithInt:rowEnd], [JavaLangInteger valueOfWithInt:colStart], [JavaLangInteger valueOfWithInt:colEnd] } count:4 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 752
  jfloat yPosStart = yPos;
  
#line 754
  ComItextpdfTextPdfPdfPTableBody *currentBlock = nil;
  if (rowsNotChecked_)
#line 756
  (void) [self getFittingRowsWithFloat:JavaLangFloat_MAX_VALUE withInt:rowStart];
  id<JavaUtilList> rows = [self getRowsWithInt:rowStart withInt:rowEnd];
  jint k = rowStart;
  for (ComItextpdfTextPdfPdfPRow * __strong row in nil_chk(rows)) {
    if (((ComItextpdfTextPdfPdfPTableHeader *) nil_chk([self getHeader]))->rows_ != nil && [((ComItextpdfTextPdfPdfPTableHeader *) nil_chk([self getHeader]))->rows_ containsWithId:row] && currentBlock == nil) {
      currentBlock = [self openTableBlockWithComItextpdfTextPdfPdfPTableBody:[self getHeader] withComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_TEXTCANVAS)];
    }
    else
#line 762
    if (((ComItextpdfTextPdfPdfPTableBody *) nil_chk([self getBody]))->rows_ != nil && [((ComItextpdfTextPdfPdfPTableBody *) nil_chk([self getBody]))->rows_ containsWithId:row] && currentBlock == nil) {
      currentBlock = [self openTableBlockWithComItextpdfTextPdfPdfPTableBody:[self getBody] withComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_TEXTCANVAS)];
    }
    else
#line 764
    if (((ComItextpdfTextPdfPdfPTableFooter *) nil_chk([self getFooter]))->rows_ != nil && [((ComItextpdfTextPdfPdfPTableFooter *) nil_chk([self getFooter]))->rows_ containsWithId:row] && currentBlock == nil) {
      currentBlock = [self openTableBlockWithComItextpdfTextPdfPdfPTableBody:[self getFooter] withComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_TEXTCANVAS)];
    }
    if (row != nil) {
      [row writeCellsWithInt:colStart withInt:colEnd withFloat:xPos withFloat:yPos withComItextpdfTextPdfPdfContentByteArray:canvases withBoolean:reusable];
      yPos -= [row getMaxHeights];
    }
    if (((ComItextpdfTextPdfPdfPTableHeader *) nil_chk([self getHeader]))->rows_ != nil && [((ComItextpdfTextPdfPdfPTableHeader *) nil_chk([self getHeader]))->rows_ containsWithId:row] && (k == rowEnd - 1 || ![((ComItextpdfTextPdfPdfPTableHeader *) nil_chk([self getHeader]))->rows_ containsWithId:[rows getWithInt:k + 1]])) {
      currentBlock = [self closeTableBlockWithComItextpdfTextPdfPdfPTableBody:[self getHeader] withComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_TEXTCANVAS)];
    }
    else
#line 773
    if (((ComItextpdfTextPdfPdfPTableBody *) nil_chk([self getBody]))->rows_ != nil && [((ComItextpdfTextPdfPdfPTableBody *) nil_chk([self getBody]))->rows_ containsWithId:row] && (k == rowEnd - 1 || ![((ComItextpdfTextPdfPdfPTableBody *) nil_chk([self getBody]))->rows_ containsWithId:[rows getWithInt:k + 1]])) {
      currentBlock = [self closeTableBlockWithComItextpdfTextPdfPdfPTableBody:[self getBody] withComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_TEXTCANVAS)];
    }
    else
#line 775
    if (((ComItextpdfTextPdfPdfPTableFooter *) nil_chk([self getFooter]))->rows_ != nil && [((ComItextpdfTextPdfPdfPTableFooter *) nil_chk([self getFooter]))->rows_ containsWithId:row] && (k == rowEnd - 1 || ![((ComItextpdfTextPdfPdfPTableFooter *) nil_chk([self getFooter]))->rows_ containsWithId:[rows getWithInt:k + 1]])) {
      currentBlock = [self closeTableBlockWithComItextpdfTextPdfPdfPTableBody:[self getFooter] withComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_TEXTCANVAS)];
    }
    k++;
  }
  
#line 781
  if (tableEvent_ != nil && colStart == 0 && colEnd == totalCols) {
    IOSFloatArray *heights = [IOSFloatArray arrayWithLength:rowEnd - rowStart + 1];
    *IOSFloatArray_GetRef(heights, 0) = yPosStart;
    for (k = rowStart; k < rowEnd; ++k) {
      ComItextpdfTextPdfPdfPRow *row = [rows getWithInt:k];
      jfloat hr = 0;
      if (row != nil)
#line 788
      hr = [row getMaxHeights];
      *IOSFloatArray_GetRef(heights, k - rowStart + 1) = IOSFloatArray_Get(heights, k - rowStart) - hr;
    }
    [tableEvent_ tableLayoutWithComItextpdfTextPdfPdfPTable:self withFloatArray2:[self getEventWidthsWithFloat:xPos withInt:rowStart withInt:rowEnd withBoolean:headersInEvent_] withFloatArray:heights withInt:headersInEvent_ ? headerRows_ : 0 withInt:rowStart withComItextpdfTextPdfPdfContentByteArray:canvases];
  }
  
#line 794
  return yPos;
}


#line 797
- (ComItextpdfTextPdfPdfPTableBody *)openTableBlockWithComItextpdfTextPdfPdfPTableBody:(ComItextpdfTextPdfPdfPTableBody *)block
                                                  withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  
#line 798
  if ([((id<JavaUtilList>) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas))->writer_)) getStandardStructElems])) containsWithId:[((ComItextpdfTextPdfPdfPTableBody *) nil_chk(block)) getRole]]) {
    [canvas openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:block];
    return block;
  }
  return nil;
}


#line 805
- (ComItextpdfTextPdfPdfPTableBody *)closeTableBlockWithComItextpdfTextPdfPdfPTableBody:(ComItextpdfTextPdfPdfPTableBody *)block
                                                   withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  
#line 806
  if ([((id<JavaUtilList>) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas))->writer_)) getStandardStructElems])) containsWithId:[((ComItextpdfTextPdfPdfPTableBody *) nil_chk(block)) getRole]])
#line 807
  [canvas closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:block];
  return nil;
}


#line 823
- (jfloat)writeSelectedRowsWithInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  
#line 824
  return [self writeSelectedRowsWithInt:0 withInt:-1 withInt:rowStart withInt:rowEnd withFloat:xPos withFloat:yPos withComItextpdfTextPdfPdfContentByte:canvas];
}


#line 845
- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  
#line 846
  return [self writeSelectedRowsWithInt:colStart withInt:colEnd withInt:rowStart withInt:rowEnd withFloat:xPos withFloat:yPos withComItextpdfTextPdfPdfContentByte:canvas withBoolean:YES];
}


#line 871
- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas
                       withBoolean:(jboolean)reusable {
  
#line 872
  jint totalCols = [self getNumberOfColumns];
  if (colStart < 0)
#line 874
  colStart = 0;
  else
#line 876
  colStart = [JavaLangMath minWithInt:colStart withInt:totalCols];
  
#line 878
  if (colEnd < 0)
#line 879
  colEnd = totalCols;
  else
#line 881
  colEnd = [JavaLangMath minWithInt:colEnd withInt:totalCols];
  
#line 883
  jboolean clip = colStart != 0 || colEnd != totalCols;
  
#line 885
  if (clip) {
    jfloat w = 0;
    for (jint k = colStart; k < colEnd; ++k)
#line 888
    w += IOSFloatArray_Get(nil_chk(absoluteWidths_), k);
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas)) saveState];
    jfloat lx = colStart == 0 ? 10000 : 0;
    jfloat rx = colEnd == totalCols ? 10000 : 0;
    [canvas rectangleWithFloat:xPos - lx withFloat:-10000 withFloat:w + lx + rx withFloat:ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT];
    [canvas clip];
    [canvas newPath];
  }
  
#line 897
  IOSObjectArray *canvases = [ComItextpdfTextPdfPdfPTable beginWritingRowsWithComItextpdfTextPdfPdfContentByte:canvas];
  jfloat y = [self writeSelectedRowsWithInt:colStart withInt:colEnd withInt:rowStart withInt:rowEnd withFloat:xPos withFloat:yPos withComItextpdfTextPdfPdfContentByteArray:canvases withBoolean:reusable];
  [ComItextpdfTextPdfPdfPTable endWritingRowsWithComItextpdfTextPdfPdfContentByteArray:canvases];
  
#line 901
  if (clip)
#line 902
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas)) restoreState];
  
#line 904
  return y;
}


#line 925
+ (IOSObjectArray *)beginWritingRowsWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  
#line 926
  return [IOSObjectArray arrayWithObjects:(id[]){
#line 927
    canvas,
#line 928
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas)) getDuplicate],
#line 929
    [canvas getDuplicate],
#line 930
    [canvas getDuplicate] } count:4 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfContentByte class]]];
  }

+ (void)endWritingRowsWithComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 940
  ComItextpdfTextPdfPdfContentByte *canvas = IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_BASECANVAS);
  ComItextpdfTextPdfPdfArtifact *artifact = [[ComItextpdfTextPdfPdfArtifact alloc] init];
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:artifact];
  [canvas saveState];
  [canvas addWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_BACKGROUNDCANVAS)];
  [canvas restoreState];
  [canvas saveState];
  [canvas setLineCapWithInt:2];
  [canvas resetRGBColorStroke];
  [canvas addWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_LINECANVAS)];
  [canvas restoreState];
  [canvas closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:artifact];
  [canvas addWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS)];
}


#line 960
- (jint)size {
  
#line 961
  return [((JavaUtilArrayList *) nil_chk(rows_)) size];
}


#line 969
- (jfloat)getTotalHeight {
  
#line 970
  return totalHeight_;
}


#line 979
- (jfloat)getRowHeightWithInt:(jint)idx {
  
#line 980
  return [self getRowHeightWithInt:idx withBoolean:NO];
}


#line 991
- (jfloat)getRowHeightWithInt:(jint)idx
                  withBoolean:(jboolean)firsttime {
  
#line 992
  if (totalWidth_ <= 0 || idx < 0 || idx >= [((JavaUtilArrayList *) nil_chk(rows_)) size])
#line 993
  return 0;
  ComItextpdfTextPdfPdfPRow *row = [((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:idx];
  if (row == nil)
#line 996
  return 0;
  if (firsttime)
#line 998
  [((ComItextpdfTextPdfPdfPRow *) nil_chk(row)) setWidthsWithFloatArray:absoluteWidths_];
  jfloat height = [((ComItextpdfTextPdfPdfPRow *) nil_chk(row)) getMaxHeights];
  ComItextpdfTextPdfPdfPCell *cell;
  ComItextpdfTextPdfPdfPRow *tmprow;
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(relativeWidths_))->size_; i++) {
    if (![self rowSpanAboveWithInt:idx withInt:i])
#line 1004
    continue;
    jint rs = 1;
    while ([self rowSpanAboveWithInt:idx - rs withInt:i]) {
      rs++;
    }
    tmprow = [rows_ getWithInt:idx - rs];
    cell = IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk(tmprow)) getCells]), i);
    jfloat tmp = 0;
    if (cell != nil && [cell getRowspan] == rs + 1) {
      tmp = [cell getMaxHeight];
      while (rs > 0) {
        tmp -= [self getRowHeightWithInt:idx - rs];
        rs--;
      }
    }
    if (tmp > height)
#line 1020
    height = tmp;
  }
  [row setMaxHeightsWithFloat:height];
  return height;
}


#line 1035
- (jfloat)getRowspanHeightWithInt:(jint)rowIndex
                          withInt:(jint)cellIndex {
  
#line 1036
  if (totalWidth_ <= 0 || rowIndex < 0 || rowIndex >= [((JavaUtilArrayList *) nil_chk(rows_)) size])
#line 1037
  return 0;
  ComItextpdfTextPdfPdfPRow *row = [((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:rowIndex];
  if (row == nil || cellIndex >= ((IOSObjectArray *) nil_chk([row getCells]))->size_)
#line 1040
  return 0;
  ComItextpdfTextPdfPdfPCell *cell = IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk(row)) getCells]), cellIndex);
  if (cell == nil)
#line 1043
  return 0;
  jfloat rowspanHeight = 0;
  for (jint j = 0; j < [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) getRowspan]; j++) {
    rowspanHeight += [self getRowHeightWithInt:rowIndex + j];
  }
  return rowspanHeight;
}


#line 1056
- (jboolean)hasRowspanWithInt:(jint)rowIdx {
  if (rowIdx < [((JavaUtilArrayList *) nil_chk(rows_)) size] && [((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:rowIdx])) hasRowspan]) {
    return YES;
  }
  ComItextpdfTextPdfPdfPRow *previousRow = rowIdx > 0 ? [self getRowWithInt:rowIdx - 1] : nil;
  if (previousRow != nil && [previousRow hasRowspan]) {
    return YES;
  }
  for (jint i = 0; i < [self getNumberOfColumns]; i++) {
    if ([self rowSpanAboveWithInt:rowIdx - 1 withInt:i])
#line 1066
    return YES;
  }
  return NO;
}


#line 1076
- (void)normalizeHeadersFooters {
  
#line 1077
  if (footerRows_ > headerRows_)
#line 1078
  footerRows_ = headerRows_;
}


#line 1087
- (jfloat)getHeaderHeight {
  
#line 1088
  jfloat total = 0;
  jint size = [JavaLangMath minWithInt:[((JavaUtilArrayList *) nil_chk(rows_)) size] withInt:headerRows_];
  for (jint k = 0; k < size; ++k) {
    ComItextpdfTextPdfPdfPRow *row = [rows_ getWithInt:k];
    if (row != nil)
#line 1093
    total += [row getMaxHeights];
  }
  return total;
}


#line 1105
- (jfloat)getFooterHeight {
  
#line 1106
  jfloat total = 0;
  jint start = [JavaLangMath maxWithInt:0 withInt:headerRows_ - footerRows_];
  jint size = [JavaLangMath minWithInt:[((JavaUtilArrayList *) nil_chk(rows_)) size] withInt:headerRows_];
  for (jint k = start; k < size; ++k) {
    ComItextpdfTextPdfPdfPRow *row = [rows_ getWithInt:k];
    if (row != nil)
#line 1112
    total += [row getMaxHeights];
  }
  return total;
}


#line 1123
- (jboolean)deleteRowWithInt:(jint)rowNumber {
  
#line 1124
  if (rowNumber < 0 || rowNumber >= [((JavaUtilArrayList *) nil_chk(rows_)) size])
#line 1125
  return NO;
  if (totalWidth_ > 0) {
    ComItextpdfTextPdfPdfPRow *row = [((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:rowNumber];
    if (row != nil)
#line 1129
    totalHeight_ -= [row getMaxHeights];
  }
  (void) [((JavaUtilArrayList *) nil_chk(rows_)) removeWithInt:rowNumber];
  if (rowNumber < headerRows_) {
    --headerRows_;
    if (rowNumber >= headerRows_ - footerRows_)
#line 1135
    --footerRows_;
  }
  return YES;
}

- (jboolean)deleteLastRow {
  
#line 1146
  return [self deleteRowWithInt:[((JavaUtilArrayList *) nil_chk(rows_)) size] - 1];
}


#line 1152
- (void)deleteBodyRows {
  
#line 1153
  JavaUtilArrayList *rows2 = [[JavaUtilArrayList alloc] init];
  for (jint k = 0; k < headerRows_; ++k)
#line 1155
  [rows2 addWithId:[((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:k]];
  rows_ = rows2;
  totalHeight_ = 0;
  if (totalWidth_ > 0)
#line 1159
  totalHeight_ = [self getHeaderHeight];
}


#line 1168
- (jint)getNumberOfColumns {
  
#line 1169
  return ((IOSFloatArray *) nil_chk(relativeWidths_))->size_;
}


#line 1177
- (jint)getHeaderRows {
  
#line 1178
  return headerRows_;
}


#line 1188
- (void)setHeaderRowsWithInt:(jint)headerRows {
  
#line 1189
  if (headerRows < 0)
#line 1190
  headerRows = 0;
  self->headerRows_ = headerRows;
}


#line 1199
- (id<JavaUtilList>)getChunks {
  
#line 1200
  return [[JavaUtilArrayList alloc] init];
}


#line 1208
- (jint)type {
  
#line 1209
  return ComItextpdfTextElement_PTABLE;
}


#line 1216
- (jboolean)isContent {
  
#line 1217
  return YES;
}


#line 1224
- (jboolean)isNestable {
  
#line 1225
  return YES;
}


#line 1235
- (jboolean)processWithComItextpdfTextElementListener:(id<ComItextpdfTextElementListener>)listener {
  
#line 1236
  @try {
    return [((id<ComItextpdfTextElementListener>) nil_chk(listener)) addWithComItextpdfTextElement:self];
  }
  @catch (
#line 1238
  ComItextpdfTextDocumentException *de) {
    return NO;
  }
}

- (jfloat)getWidthPercentage {
  
#line 1249
  return widthPercentage_;
}


#line 1257
- (void)setWidthPercentageWithFloat:(jfloat)widthPercentage {
  
#line 1258
  self->widthPercentage_ = widthPercentage;
}


#line 1266
- (jint)getHorizontalAlignment {
  
#line 1267
  return horizontalAlignment_;
}


#line 1277
- (void)setHorizontalAlignmentWithInt:(jint)horizontalAlignment {
  
#line 1278
  self->horizontalAlignment_ = horizontalAlignment;
}


#line 1287
- (ComItextpdfTextPdfPdfPRow *)getRowWithInt:(jint)idx {
  
#line 1288
  return [((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:idx];
}


#line 1296
- (JavaUtilArrayList *)getRows {
  
#line 1297
  return rows_;
}


#line 1305
- (jint)getLastCompletedRowIndex {
  
#line 1306
  return [((JavaUtilArrayList *) nil_chk(rows_)) size] - 1;
}


#line 1314
- (void)setBreakPointsWithIntArray:(IOSIntArray *)breakPoints {
  
#line 1315
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(rows_)) size]; i++) {
    [((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:i])) setMayNotBreakWithBoolean:YES];
  }
  
#line 1319
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(breakPoints))->size_; i++) {
    [((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:IOSIntArray_Get(breakPoints, i)])) setMayNotBreakWithBoolean:NO];
  }
}


#line 1329
- (void)keepRowsTogetherWithIntArray:(IOSIntArray *)rows {
  
#line 1330
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(rows))->size_; i++) {
    [((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:IOSIntArray_Get(rows, i)])) setMayNotBreakWithBoolean:YES];
  }
}


#line 1341
- (void)keepRowsTogetherWithInt:(jint)start
                        withInt:(jint)end {
  
#line 1342
  if (start < end) {
    while (start < end) {
      [((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:start])) setMayNotBreakWithBoolean:YES];
      start++;
    }
  }
}


#line 1355
- (void)keepRowsTogetherWithInt:(jint)start {
  
#line 1356
  if (start < [((JavaUtilArrayList *) nil_chk(rows_)) size]) {
    for (jint i = start; i < [rows_ size]; i++) {
      [((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:i])) setMayNotBreakWithBoolean:YES];
    }
  }
}


#line 1371
- (JavaUtilArrayList *)getRowsWithInt:(jint)start
                              withInt:(jint)end {
  
#line 1372
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
  if (start < 0 || end > [self size]) {
    return list;
  }
  for (jint i = start; i < end; i++) {
    [list addWithId:[self adjustCellsInRowWithInt:i withInt:end]];
  }
  return list;
}


#line 1389
- (ComItextpdfTextPdfPdfPRow *)adjustCellsInRowWithInt:(jint)start
                                               withInt:(jint)end {
  
#line 1390
  ComItextpdfTextPdfPdfPRow *row = [self getRowWithInt:start];
  if ([((ComItextpdfTextPdfPdfPRow *) nil_chk(row)) isAdjusted]) return row;
  row = [[ComItextpdfTextPdfPdfPRow alloc] initWithComItextpdfTextPdfPdfPRow:row];
  ComItextpdfTextPdfPdfPCell *cell;
  IOSObjectArray *cells = [row getCells];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(cells))->size_; i++) {
    cell = IOSObjectArray_Get(cells, i);
    if (cell == nil || [cell getRowspan] == 1)
#line 1398
    continue;
    jint stop = [JavaLangMath minWithInt:end withInt:start + [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) getRowspan]];
    jfloat extra = 0;
    for (jint k = start + 1; k < stop; k++) {
      extra += [((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:k])) getMaxHeights];
    }
    [row setExtraHeightWithInt:i withFloat:extra];
  }
  [row setAdjustedWithBoolean:YES];
  return row;
}


#line 1415
- (void)setTableEventWithComItextpdfTextPdfPdfPTableEvent:(id<ComItextpdfTextPdfPdfPTableEvent>)event {
  
#line 1416
  if (event == nil)
#line 1417
  self->tableEvent_ = nil;
  else if (self->tableEvent_ == nil)
#line 1419
  self->tableEvent_ = event;
  else if ([(id) self->tableEvent_ isKindOfClass:[ComItextpdfTextPdfEventsPdfPTableEventForwarder class]])
#line 1421
  [((ComItextpdfTextPdfEventsPdfPTableEventForwarder *) check_class_cast(self->tableEvent_, [ComItextpdfTextPdfEventsPdfPTableEventForwarder class])) addTableEventWithComItextpdfTextPdfPdfPTableEvent:event];
  else {
    ComItextpdfTextPdfEventsPdfPTableEventForwarder *forward = [[ComItextpdfTextPdfEventsPdfPTableEventForwarder alloc] init];
    [forward addTableEventWithComItextpdfTextPdfPdfPTableEvent:self->tableEvent_];
    [forward addTableEventWithComItextpdfTextPdfPdfPTableEvent:event];
    self->tableEvent_ = forward;
  }
}

- (id<ComItextpdfTextPdfPdfPTableEvent>)getTableEvent {
  
#line 1436
  return tableEvent_;
}


#line 1444
- (IOSFloatArray *)getAbsoluteWidths {
  
#line 1445
  return absoluteWidths_;
}


#line 1448
- (IOSObjectArray *)getEventWidthsWithFloat:(jfloat)xPos
                                    withInt:(jint)firstRow
                                    withInt:(jint)lastRow
                                withBoolean:(jboolean)includeHeaders {
  
#line 1449
  if (includeHeaders) {
    firstRow = [JavaLangMath maxWithInt:firstRow withInt:headerRows_];
    lastRow = [JavaLangMath maxWithInt:lastRow withInt:headerRows_];
  }
  IOSObjectArray *widths = [IOSObjectArray arrayWithLength:(includeHeaders ? headerRows_ : 0) + lastRow - firstRow type:[IOSFloatArray iosClass]];
  if (isColspan_) {
    jint n = 0;
    if (includeHeaders) {
      for (jint k = 0; k < headerRows_; ++k) {
        ComItextpdfTextPdfPdfPRow *row = [((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:k];
        if (row == nil)
#line 1460
        ++n;
        else
#line 1462
        IOSObjectArray_Set(widths, n++, [row getEventWidthWithFloat:xPos withFloatArray:absoluteWidths_]);
      }
    }
    for (; firstRow < lastRow; ++firstRow) {
      ComItextpdfTextPdfPdfPRow *row = [((JavaUtilArrayList *) nil_chk(rows_)) getWithInt:firstRow];
      if (row == nil)
#line 1468
      ++n;
      else
#line 1470
      IOSObjectArray_Set(widths, n++, [row getEventWidthWithFloat:xPos withFloatArray:absoluteWidths_]);
    }
  }
  else {
    
#line 1473
    jint numCols = [self getNumberOfColumns];
    IOSFloatArray *width = [IOSFloatArray arrayWithLength:numCols + 1];
    *IOSFloatArray_GetRef(width, 0) = xPos;
    for (jint k = 0; k < numCols; ++k)
#line 1477
    *IOSFloatArray_GetRef(width, k + 1) = IOSFloatArray_Get(width, k) + IOSFloatArray_Get(nil_chk(absoluteWidths_), k);
    for (jint k = 0; k < widths->size_; ++k)
#line 1479
    IOSObjectArray_Set(widths, k, width);
  }
  return widths;
}


#line 1491
- (jboolean)isSkipFirstHeader {
  
#line 1492
  return skipFirstHeader_;
}


#line 1503
- (jboolean)isSkipLastFooter {
  
#line 1504
  return skipLastFooter_;
}


#line 1513
- (void)setSkipFirstHeaderWithBoolean:(jboolean)skipFirstHeader {
  
#line 1514
  self->skipFirstHeader_ = skipFirstHeader;
}


#line 1524
- (void)setSkipLastFooterWithBoolean:(jboolean)skipLastFooter {
  
#line 1525
  self->skipLastFooter_ = skipLastFooter;
}


#line 1535
- (void)setRunDirectionWithInt:(jint)runDirection {
  
#line 1536
  switch (runDirection) {
    case ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT:
    case ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI:
    case ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_LTR:
    case ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL:
    self->runDirection_ = runDirection;
    break;
    default:
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.run.direction.1" withInt:runDirection]];
  }
}


#line 1555
- (jint)getRunDirection {
  
#line 1556
  return runDirection_;
}


#line 1564
- (jboolean)isLockedWidth {
  
#line 1565
  return self->lockedWidth_;
}


#line 1573
- (void)setLockedWidthWithBoolean:(jboolean)lockedWidth {
  
#line 1574
  self->lockedWidth_ = lockedWidth;
}


#line 1582
- (jboolean)isSplitRows {
  
#line 1583
  return self->splitRows_;
}


#line 1593
- (void)setSplitRowsWithBoolean:(jboolean)splitRows {
  
#line 1594
  self->splitRows_ = splitRows;
}


#line 1602
- (void)setSpacingBeforeWithFloat:(jfloat)spacing {
  
#line 1603
  self->spacingBefore__ = spacing;
}


#line 1611
- (void)setSpacingAfterWithFloat:(jfloat)spacing {
  
#line 1612
  self->spacingAfter__ = spacing;
}


#line 1620
- (jfloat)spacingBefore {
  
#line 1621
  return spacingBefore__;
}


#line 1629
- (jfloat)spacingAfter {
  
#line 1630
  return spacingAfter__;
}


#line 1638
- (jboolean)isExtendLastRow {
  
#line 1639
  return IOSBooleanArray_Get(nil_chk(extendLastRow_), 0);
}


#line 1648
- (void)setExtendLastRowWithBoolean:(jboolean)extendLastRows {
  
#line 1649
  *IOSBooleanArray_GetRef(nil_chk(extendLastRow_), 0) = extendLastRows;
  *IOSBooleanArray_GetRef(extendLastRow_, 1) = extendLastRows;
}


#line 1662
- (void)setExtendLastRowWithBoolean:(jboolean)extendLastRows
                        withBoolean:(jboolean)extendFinalRow {
  
#line 1663
  *IOSBooleanArray_GetRef(nil_chk(extendLastRow_), 0) = extendLastRows;
  *IOSBooleanArray_GetRef(extendLastRow_, 1) = extendFinalRow;
}


#line 1674
- (jboolean)isExtendLastRowWithBoolean:(jboolean)newPageFollows {
  
#line 1675
  if (newPageFollows) {
    return IOSBooleanArray_Get(nil_chk(extendLastRow_), 0);
  }
  return IOSBooleanArray_Get(nil_chk(extendLastRow_), 1);
}


#line 1686
- (jboolean)isHeadersInEvent {
  
#line 1687
  return headersInEvent_;
}


#line 1695
- (void)setHeadersInEventWithBoolean:(jboolean)headersInEvent {
  
#line 1696
  self->headersInEvent_ = headersInEvent;
}


#line 1704
- (jboolean)isSplitLate {
  
#line 1705
  return splitLate_;
}


#line 1715
- (void)setSplitLateWithBoolean:(jboolean)splitLate {
  
#line 1716
  self->splitLate_ = splitLate;
}


#line 1726
- (void)setKeepTogetherWithBoolean:(jboolean)keepTogether {
  
#line 1727
  self->keepTogether_ = keepTogether;
}


#line 1736
- (jboolean)getKeepTogether {
  
#line 1737
  return keepTogether_;
}


#line 1745
- (jint)getFooterRows {
  
#line 1746
  return self->footerRows_;
}


#line 1762
- (void)setFooterRowsWithInt:(jint)footerRows {
  
#line 1763
  if (footerRows < 0)
#line 1764
  footerRows = 0;
  self->footerRows_ = footerRows;
}


#line 1773
- (void)completeRow {
  
#line 1774
  while (!rowCompleted_) {
    (void) [self addCellWithComItextpdfTextPdfPdfPCell:defaultCell_];
  }
}


#line 1783
- (void)flushContent {
  
#line 1784
  [self deleteBodyRows];
  [self setSkipFirstHeaderWithBoolean:YES];
}


#line 1792
- (jboolean)isComplete {
  
#line 1793
  return complete_;
}


#line 1800
- (void)setCompleteWithBoolean:(jboolean)complete {
  
#line 1801
  self->complete_ = complete;
}


#line 1807
- (jfloat)getSpacingBefore {
  
#line 1808
  return spacingBefore__;
}


#line 1814
- (jfloat)getSpacingAfter {
  
#line 1815
  return spacingAfter__;
}


#line 1818
- (jboolean)isLoopCheck {
  
#line 1819
  return loopCheck_;
}


#line 1822
- (void)setLoopCheckWithBoolean:(jboolean)loopCheck {
  
#line 1823
  self->loopCheck_ = loopCheck;
}


#line 1826
- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 1827
  if (accessibleAttributes_ != nil)
#line 1828
  return [accessibleAttributes_ getWithId:key];
  else
#line 1830
  return nil;
}


#line 1833
- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 1834
  if (accessibleAttributes_ == nil)
#line 1835
  accessibleAttributes_ = [[JavaUtilHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(accessibleAttributes_)) putWithId:key withId:value];
}


#line 1839
- (JavaUtilHashMap *)getAccessibleAttributes {
  
#line 1840
  return accessibleAttributes_;
}


#line 1843
- (ComItextpdfTextPdfPdfName *)getRole {
  
#line 1844
  return role_;
}


#line 1847
- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role {
  
#line 1848
  self->role_ = role;
}


#line 1851
- (ComItextpdfTextAccessibleElementId *)getId {
  
#line 1852
  return id__;
}


#line 1855
- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_ {
  
#line 1856
  self->id__ = id_;
}


#line 1859
- (jboolean)isInline {
  
#line 1860
  return NO;
}


#line 1863
- (ComItextpdfTextPdfPdfPTableHeader *)getHeader {
  
#line 1864
  if (header_ == nil)
#line 1865
  header_ = [[ComItextpdfTextPdfPdfPTableHeader alloc] init];
  return header_;
}


#line 1869
- (ComItextpdfTextPdfPdfPTableBody *)getBody {
  
#line 1870
  if (body_ == nil)
#line 1871
  body_ = [[ComItextpdfTextPdfPdfPTableBody alloc] init];
  return body_;
}


#line 1875
- (ComItextpdfTextPdfPdfPTableFooter *)getFooter {
  
#line 1876
  if (footer_ == nil)
#line 1877
  footer_ = [[ComItextpdfTextPdfPdfPTableFooter alloc] init];
  return footer_;
}


#line 1889
- (jint)getCellStartRowIndexWithInt:(jint)rowIdx
                            withInt:(jint)colIdx {
  
#line 1890
  jint lastRow = rowIdx;
  while (IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:lastRow])) getCells]), colIdx) == nil && lastRow > 0) {
    --lastRow;
  }
  return lastRow;
}


#line 1974
- (ComItextpdfTextPdfPdfPTable_FittingRows *)getFittingRowsWithFloat:(jfloat)availableHeight
                                                             withInt:(jint)startIdx {
  
#line 1975
  NSAssert((IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk([self getRowWithInt:startIdx])) getCells]), 0) != nil), @"com/itextpdf/text/pdf/PdfPTable.java:1975 condition failed: assert (getRow(startIdx).getCells()[0] != null);");
  jint cols = [self getNumberOfColumns];
  IOSObjectArray *states = [IOSObjectArray arrayWithLength:cols type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPTable_ColumnMeasurementState class]]];
  for (jint i = 0; i < cols; ++i) {
    IOSObjectArray_SetAndConsume(states, i, [[ComItextpdfTextPdfPdfPTable_ColumnMeasurementState alloc] init]);
  }
  jfloat completedRowsHeight = 0;
  
#line 1983
  jfloat totalHeight = 0;
  id<JavaUtilMap> correctedHeightsForLastRow = [[JavaUtilHashMap alloc] init];
  jint k;
  for (k = startIdx; k < [self size]; ++k) {
    ComItextpdfTextPdfPdfPRow *row = [self getRowWithInt:k];
    jfloat rowHeight = [((ComItextpdfTextPdfPdfPRow *) nil_chk(row)) getMaxRowHeightsWithoutCalculating];
    jfloat maxCompletedRowsHeight = 0;
    jint i = 0;
    while (i < cols) {
      ComItextpdfTextPdfPdfPCell *cell = IOSObjectArray_Get(nil_chk([row getCells]), i);
      ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *state = IOSObjectArray_Get(states, i);
      if (cell == nil) {
        [((ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *) nil_chk(state)) consumeRowspanWithFloat:completedRowsHeight withFloat:rowHeight];
      }
      else {
        
#line 1997
        [((ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *) nil_chk(state)) beginCellWithComItextpdfTextPdfPdfPCell:cell withFloat:completedRowsHeight withFloat:rowHeight];
      }
      if ([((ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *) nil_chk(state)) cellEnds] && state->height_ > maxCompletedRowsHeight) {
        maxCompletedRowsHeight = state->height_;
      }
      for (jint j = 1; j < state->colspan_; ++j) {
        ((ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *) nil_chk(IOSObjectArray_Get(states, i + j)))->height_ = state->height_;
      }
      i += state->colspan_;
    }
    
#line 2008
    jfloat maxTotalHeight = 0;
    {
      IOSObjectArray *a__ =
#line 2009
      states;
      ComItextpdfTextPdfPdfPTable_ColumnMeasurementState * const *b__ = a__->buffer_;
      ComItextpdfTextPdfPdfPTable_ColumnMeasurementState * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *state = *b__++;
        
#line 2010
        if (((ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *) nil_chk(state))->height_ > maxTotalHeight) {
          maxTotalHeight = state->height_;
        }
      }
    }
    
#line 2014
    [row setFinalMaxHeightsWithFloat:maxCompletedRowsHeight - completedRowsHeight];
    
#line 2016
    jfloat remainingHeight = availableHeight - ([self isSplitLate] ? maxTotalHeight : maxCompletedRowsHeight);
    if (remainingHeight < 0) {
      break;
    }
    (void) [correctedHeightsForLastRow putWithId:[JavaLangInteger valueOfWithInt:k] withId:[JavaLangFloat valueOfWithFloat:maxTotalHeight - completedRowsHeight]];
    completedRowsHeight = maxCompletedRowsHeight;
    totalHeight = maxTotalHeight;
  }
  rowsNotChecked_ = NO;
  return [[ComItextpdfTextPdfPdfPTable_FittingRows alloc] initWithInt:startIdx withInt:k - 1 withFloat:totalHeight withFloat:completedRowsHeight withJavaUtilMap:correctedHeightsForLastRow];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfPTable *)other {
  [super copyAllFieldsTo:other];
  other->LOGGER_ = LOGGER_;
  other->absoluteWidths_ = absoluteWidths_;
  other->accessibleAttributes_ = accessibleAttributes_;
  other->body_ = body_;
  other->complete_ = complete_;
  other->currentColIdx_ = currentColIdx_;
  other->currentRow_ = currentRow_;
  other->defaultCell_ = defaultCell_;
  other->extendLastRow_ = extendLastRow_;
  other->footer_ = footer_;
  other->footerRows_ = footerRows_;
  other->header_ = header_;
  other->headerRows_ = headerRows_;
  other->headersInEvent_ = headersInEvent_;
  other->horizontalAlignment_ = horizontalAlignment_;
  other->id__ = id__;
  other->isColspan_ = isColspan_;
  other->keepTogether_ = keepTogether_;
  other->lockedWidth_ = lockedWidth_;
  other->loopCheck_ = loopCheck_;
  other->relativeWidths_ = relativeWidths_;
  other->role_ = role_;
  other->rowCompleted_ = rowCompleted_;
  other->rows_ = rows_;
  other->rowsNotChecked_ = rowsNotChecked_;
  other->runDirection_ = runDirection_;
  other->skipFirstHeader_ = skipFirstHeader_;
  other->skipLastFooter_ = skipLastFooter_;
  other->spacingAfter__ = spacingAfter__;
  other->spacingBefore__ = spacingBefore__;
  other->splitLate_ = splitLate_;
  other->splitRows_ = splitRows_;
  other->tableEvent_ = tableEvent_;
  other->totalHeight_ = totalHeight_;
  other->totalWidth_ = totalWidth_;
  other->widthPercentage_ = widthPercentage_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfPTable", NULL, 0x4, NULL },
    { "initWithFloatArray:", "PdfPTable", NULL, 0x1, NULL },
    { "initWithInt:", "PdfPTable", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfPTable:", "PdfPTable", NULL, 0x1, NULL },
    { "shallowCopyWithComItextpdfTextPdfPdfPTable:", "shallowCopy", "Lcom.itextpdf.text.pdf.PdfPTable;", 0x9, NULL },
    { "copyFormatWithComItextpdfTextPdfPdfPTable:", "copyFormat", "V", 0x4, NULL },
    { "setWidthsWithFloatArray:", "setWidths", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setWidthsWithIntArray:", "setWidths", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "calculateWidths", NULL, "V", 0x4, NULL },
    { "setTotalWidthWithFloat:", "setTotalWidth", "V", 0x1, NULL },
    { "setTotalWidthWithFloatArray:", "setTotalWidth", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setWidthPercentageWithFloatArray:withComItextpdfTextRectangle:", "setWidthPercentage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "getTotalWidth", NULL, "F", 0x1, NULL },
    { "calculateHeights", NULL, "F", 0x1, NULL },
    { "resetColumnCountWithInt:", "resetColumnCount", "V", 0x1, NULL },
    { "getDefaultCell", NULL, "Lcom.itextpdf.text.pdf.PdfPCell;", 0x1, NULL },
    { "addCellWithComItextpdfTextPdfPdfPCell:", "addCell", "Lcom.itextpdf.text.pdf.PdfPCell;", 0x1, NULL },
    { "skipColsWithRowspanAbove", NULL, "V", 0x2, NULL },
    { "cellAtWithInt:withInt:", "cellAt", "Lcom.itextpdf.text.pdf.PdfPCell;", 0x0, NULL },
    { "rowSpanAboveWithInt:withInt:", "rowSpanAbove", "Z", 0x0, NULL },
    { "addCellWithNSString:", "addCell", "V", 0x1, NULL },
    { "addCellWithComItextpdfTextPdfPdfPTable:", "addCell", "V", 0x1, NULL },
    { "addCellWithComItextpdfTextImage:", "addCell", "V", 0x1, NULL },
    { "addCellWithComItextpdfTextPhrase:", "addCell", "V", 0x1, NULL },
    { "writeSelectedRowsWithInt:withInt:withFloat:withFloat:withComItextpdfTextPdfPdfContentByteArray:", "writeSelectedRows", "F", 0x1, NULL },
    { "writeSelectedRowsWithInt:withInt:withInt:withInt:withFloat:withFloat:withComItextpdfTextPdfPdfContentByteArray:", "writeSelectedRows", "F", 0x1, NULL },
    { "writeSelectedRowsWithInt:withInt:withInt:withInt:withFloat:withFloat:withComItextpdfTextPdfPdfContentByteArray:withBoolean:", "writeSelectedRows", "F", 0x1, NULL },
    { "openTableBlockWithComItextpdfTextPdfPdfPTableBody:withComItextpdfTextPdfPdfContentByte:", "openTableBlock", "Lcom.itextpdf.text.pdf.PdfPTableBody;", 0x2, NULL },
    { "closeTableBlockWithComItextpdfTextPdfPdfPTableBody:withComItextpdfTextPdfPdfContentByte:", "closeTableBlock", "Lcom.itextpdf.text.pdf.PdfPTableBody;", 0x2, NULL },
    { "writeSelectedRowsWithInt:withInt:withFloat:withFloat:withComItextpdfTextPdfPdfContentByte:", "writeSelectedRows", "F", 0x1, NULL },
    { "writeSelectedRowsWithInt:withInt:withInt:withInt:withFloat:withFloat:withComItextpdfTextPdfPdfContentByte:", "writeSelectedRows", "F", 0x1, NULL },
    { "writeSelectedRowsWithInt:withInt:withInt:withInt:withFloat:withFloat:withComItextpdfTextPdfPdfContentByte:withBoolean:", "writeSelectedRows", "F", 0x1, NULL },
    { "beginWritingRowsWithComItextpdfTextPdfPdfContentByte:", "beginWritingRows", "[Lcom.itextpdf.text.pdf.PdfContentByte;", 0x9, NULL },
    { "endWritingRowsWithComItextpdfTextPdfPdfContentByteArray:", "endWritingRows", "V", 0x9, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "getTotalHeight", NULL, "F", 0x1, NULL },
    { "getRowHeightWithInt:", "getRowHeight", "F", 0x1, NULL },
    { "getRowHeightWithInt:withBoolean:", "getRowHeight", "F", 0x4, NULL },
    { "getRowspanHeightWithInt:withInt:", "getRowspanHeight", "F", 0x1, NULL },
    { "hasRowspanWithInt:", "hasRowspan", "Z", 0x1, NULL },
    { "normalizeHeadersFooters", NULL, "V", 0x1, NULL },
    { "getHeaderHeight", NULL, "F", 0x1, NULL },
    { "getFooterHeight", NULL, "F", 0x1, NULL },
    { "deleteRowWithInt:", "deleteRow", "Z", 0x1, NULL },
    { "deleteLastRow", NULL, "Z", 0x1, NULL },
    { "deleteBodyRows", NULL, "V", 0x1, NULL },
    { "getNumberOfColumns", NULL, "I", 0x1, NULL },
    { "getHeaderRows", NULL, "I", 0x1, NULL },
    { "setHeaderRowsWithInt:", "setHeaderRows", "V", 0x1, NULL },
    { "getChunks", NULL, "Ljava.util.List;", 0x1, NULL },
    { "type", NULL, "I", 0x1, NULL },
    { "isContent", NULL, "Z", 0x1, NULL },
    { "isNestable", NULL, "Z", 0x1, NULL },
    { "processWithComItextpdfTextElementListener:", "process", "Z", 0x1, NULL },
    { "getWidthPercentage", NULL, "F", 0x1, NULL },
    { "setWidthPercentageWithFloat:", "setWidthPercentage", "V", 0x1, NULL },
    { "getHorizontalAlignment", NULL, "I", 0x1, NULL },
    { "setHorizontalAlignmentWithInt:", "setHorizontalAlignment", "V", 0x1, NULL },
    { "getRowWithInt:", "getRow", "Lcom.itextpdf.text.pdf.PdfPRow;", 0x1, NULL },
    { "getRows", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "getLastCompletedRowIndex", NULL, "I", 0x1, NULL },
    { "setBreakPointsWithIntArray:", "setBreakPoints", "V", 0x81, NULL },
    { "keepRowsTogetherWithIntArray:", "keepRowsTogether", "V", 0x1, NULL },
    { "keepRowsTogetherWithInt:withInt:", "keepRowsTogether", "V", 0x1, NULL },
    { "keepRowsTogetherWithInt:", "keepRowsTogether", "V", 0x1, NULL },
    { "getRowsWithInt:withInt:", "getRows", "Ljava.util.ArrayList;", 0x1, NULL },
    { "adjustCellsInRowWithInt:withInt:", "adjustCellsInRow", "Lcom.itextpdf.text.pdf.PdfPRow;", 0x4, NULL },
    { "setTableEventWithComItextpdfTextPdfPdfPTableEvent:", "setTableEvent", "V", 0x1, NULL },
    { "getTableEvent", NULL, "Lcom.itextpdf.text.pdf.PdfPTableEvent;", 0x1, NULL },
    { "getAbsoluteWidths", NULL, "[F", 0x1, NULL },
    { "getEventWidthsWithFloat:withInt:withInt:withBoolean:", "getEventWidths", "[[F", 0x0, NULL },
    { "isSkipFirstHeader", NULL, "Z", 0x1, NULL },
    { "isSkipLastFooter", NULL, "Z", 0x1, NULL },
    { "setSkipFirstHeaderWithBoolean:", "setSkipFirstHeader", "V", 0x1, NULL },
    { "setSkipLastFooterWithBoolean:", "setSkipLastFooter", "V", 0x1, NULL },
    { "setRunDirectionWithInt:", "setRunDirection", "V", 0x1, NULL },
    { "getRunDirection", NULL, "I", 0x1, NULL },
    { "isLockedWidth", NULL, "Z", 0x1, NULL },
    { "setLockedWidthWithBoolean:", "setLockedWidth", "V", 0x1, NULL },
    { "isSplitRows", NULL, "Z", 0x1, NULL },
    { "setSplitRowsWithBoolean:", "setSplitRows", "V", 0x1, NULL },
    { "setSpacingBeforeWithFloat:", "setSpacingBefore", "V", 0x1, NULL },
    { "setSpacingAfterWithFloat:", "setSpacingAfter", "V", 0x1, NULL },
    { "spacingBefore", NULL, "F", 0x1, NULL },
    { "spacingAfter", NULL, "F", 0x1, NULL },
    { "isExtendLastRow", NULL, "Z", 0x1, NULL },
    { "setExtendLastRowWithBoolean:", "setExtendLastRow", "V", 0x1, NULL },
    { "setExtendLastRowWithBoolean:withBoolean:", "setExtendLastRow", "V", 0x1, NULL },
    { "isExtendLastRowWithBoolean:", "isExtendLastRow", "Z", 0x1, NULL },
    { "isHeadersInEvent", NULL, "Z", 0x1, NULL },
    { "setHeadersInEventWithBoolean:", "setHeadersInEvent", "V", 0x1, NULL },
    { "isSplitLate", NULL, "Z", 0x1, NULL },
    { "setSplitLateWithBoolean:", "setSplitLate", "V", 0x1, NULL },
    { "setKeepTogetherWithBoolean:", "setKeepTogether", "V", 0x1, NULL },
    { "getKeepTogether", NULL, "Z", 0x1, NULL },
    { "getFooterRows", NULL, "I", 0x1, NULL },
    { "setFooterRowsWithInt:", "setFooterRows", "V", 0x1, NULL },
    { "completeRow", NULL, "V", 0x1, NULL },
    { "flushContent", NULL, "V", 0x1, NULL },
    { "isComplete", NULL, "Z", 0x1, NULL },
    { "setCompleteWithBoolean:", "setComplete", "V", 0x1, NULL },
    { "getSpacingBefore", NULL, "F", 0x1, NULL },
    { "getSpacingAfter", NULL, "F", 0x1, NULL },
    { "isLoopCheck", NULL, "Z", 0x1, NULL },
    { "setLoopCheckWithBoolean:", "setLoopCheck", "V", 0x1, NULL },
    { "getAccessibleAttributeWithComItextpdfTextPdfPdfName:", "getAccessibleAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAccessibleAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAccessibleAttribute", "V", 0x1, NULL },
    { "getAccessibleAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getRole", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "setRoleWithComItextpdfTextPdfPdfName:", "setRole", "V", 0x1, NULL },
    { "getId", NULL, "Lcom.itextpdf.text.AccessibleElementId;", 0x1, NULL },
    { "setIdWithComItextpdfTextAccessibleElementId:", "setId", "V", 0x1, NULL },
    { "isInline", NULL, "Z", 0x1, NULL },
    { "getHeader", NULL, "Lcom.itextpdf.text.pdf.PdfPTableHeader;", 0x1, NULL },
    { "getBody", NULL, "Lcom.itextpdf.text.pdf.PdfPTableBody;", 0x1, NULL },
    { "getFooter", NULL, "Lcom.itextpdf.text.pdf.PdfPTableFooter;", 0x1, NULL },
    { "getCellStartRowIndexWithInt:withInt:", "getCellStartRowIndex", "I", 0x1, NULL },
    { "getFittingRowsWithFloat:withInt:", "getFittingRows", "Lcom.itextpdf.text.pdf.PdfPTable$FittingRows;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER_", NULL, 0x12, "Lcom.itextpdf.text.log.Logger;", NULL,  },
    { "BASECANVAS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfPTable_BASECANVAS },
    { "BACKGROUNDCANVAS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfPTable_BACKGROUNDCANVAS },
    { "LINECANVAS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfPTable_LINECANVAS },
    { "TEXTCANVAS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfPTable_TEXTCANVAS },
    { "rows_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "totalHeight_", NULL, 0x4, "F", NULL,  },
    { "currentRow_", NULL, 0x4, "[Lcom.itextpdf.text.pdf.PdfPCell;", NULL,  },
    { "currentColIdx_", NULL, 0x4, "I", NULL,  },
    { "defaultCell_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfPCell;", NULL,  },
    { "totalWidth_", NULL, 0x4, "F", NULL,  },
    { "relativeWidths_", NULL, 0x4, "[F", NULL,  },
    { "absoluteWidths_", NULL, 0x4, "[F", NULL,  },
    { "tableEvent_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfPTableEvent;", NULL,  },
    { "headerRows_", NULL, 0x4, "I", NULL,  },
    { "widthPercentage_", NULL, 0x4, "F", NULL,  },
    { "horizontalAlignment_", NULL, 0x2, "I", NULL,  },
    { "skipFirstHeader_", NULL, 0x2, "Z", NULL,  },
    { "skipLastFooter_", NULL, 0x2, "Z", NULL,  },
    { "isColspan_", NULL, 0x4, "Z", NULL,  },
    { "runDirection_", NULL, 0x4, "I", NULL,  },
    { "lockedWidth_", NULL, 0x2, "Z", NULL,  },
    { "splitRows_", NULL, 0x2, "Z", NULL,  },
    { "spacingBefore__", "spacingBefore", 0x4, "F", NULL,  },
    { "spacingAfter__", "spacingAfter", 0x4, "F", NULL,  },
    { "extendLastRow_", NULL, 0x2, "[Z", NULL,  },
    { "headersInEvent_", NULL, 0x2, "Z", NULL,  },
    { "splitLate_", NULL, 0x2, "Z", NULL,  },
    { "keepTogether_", NULL, 0x2, "Z", NULL,  },
    { "complete_", NULL, 0x4, "Z", NULL,  },
    { "footerRows_", NULL, 0x2, "I", NULL,  },
    { "rowCompleted_", NULL, 0x4, "Z", NULL,  },
    { "loopCheck_", NULL, 0x4, "Z", NULL,  },
    { "rowsNotChecked_", NULL, 0x4, "Z", NULL,  },
    { "role_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "accessibleAttributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "id__", "id", 0x4, "Lcom.itextpdf.text.AccessibleElementId;", NULL,  },
    { "header_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfPTableHeader;", NULL,  },
    { "body_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfPTableBody;", NULL,  },
    { "footer_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfPTableFooter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfPTable = { "PdfPTable", "com.itextpdf.text.pdf", NULL, 0x1, 118, methods, 40, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfPTable;
}

@end


#line 1902
@implementation ComItextpdfTextPdfPdfPTable_FittingRows


#line 1910
- (instancetype)initWithInt:(jint)firstRow
                    withInt:(jint)lastRow
                  withFloat:(jfloat)height
                  withFloat:(jfloat)completedRowsHeight
            withJavaUtilMap:(id<JavaUtilMap>)correctedHeightsForLastRow {
  if (self = [super init]) {
    
#line 1912
    self->firstRow_ = firstRow;
    
#line 1913
    self->lastRow_ = lastRow;
    
#line 1914
    self->height_ = height;
    
#line 1915
    self->completedRowsHeight_ = completedRowsHeight;
    
#line 1916
    self->correctedHeightsForLastRow_ = correctedHeightsForLastRow;
  }
  return self;
}


#line 1924
- (void)correctLastRowChosenWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table
                                                    withInt:(jint)k {
  
#line 1925
  ComItextpdfTextPdfPdfPRow *row = [((ComItextpdfTextPdfPdfPTable *) nil_chk(table)) getRowWithInt:k];
  JavaLangFloat *value = [((id<JavaUtilMap>) nil_chk(correctedHeightsForLastRow_)) getWithId:[JavaLangInteger valueOfWithInt:k]];
  if (value != nil) {
    [((ComItextpdfTextPdfPdfPRow *) nil_chk(row)) setFinalMaxHeightsWithFloat:[value floatValue]];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfPTable_FittingRows *)other {
  [super copyAllFieldsTo:other];
  other->completedRowsHeight_ = completedRowsHeight_;
  other->correctedHeightsForLastRow_ = correctedHeightsForLastRow_;
  other->firstRow_ = firstRow_;
  other->height_ = height_;
  other->lastRow_ = lastRow_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withFloat:withFloat:withJavaUtilMap:", "FittingRows", NULL, 0x1, NULL },
    { "correctLastRowChosenWithComItextpdfTextPdfPdfPTable:withInt:", "correctLastRowChosen", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "firstRow_", NULL, 0x11, "I", NULL,  },
    { "lastRow_", NULL, 0x11, "I", NULL,  },
    { "height_", NULL, 0x11, "F", NULL,  },
    { "completedRowsHeight_", NULL, 0x11, "F", NULL,  },
    { "correctedHeightsForLastRow_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfPTable_FittingRows = { "FittingRows", "com.itextpdf.text.pdf", "PdfPTable", 0x9, 2, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfPTable_FittingRows;
}

@end


#line 1939
@implementation ComItextpdfTextPdfPdfPTable_ColumnMeasurementState


#line 1944
- (void)beginCellWithComItextpdfTextPdfPdfPCell:(ComItextpdfTextPdfPdfPCell *)cell
                                      withFloat:(jfloat)completedRowsHeight
                                      withFloat:(jfloat)rowHeight {
  
#line 1945
  rowspan_ = [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) getRowspan];
  colspan_ = [cell getColspan];
  height_ = completedRowsHeight + [JavaLangMath maxWithFloat:[cell getMaxHeight] withFloat:rowHeight];
}


#line 1950
- (void)consumeRowspanWithFloat:(jfloat)completedRowsHeight
                      withFloat:(jfloat)rowHeight {
  
#line 1951
  --rowspan_;
}


#line 1954
- (jboolean)cellEnds {
  
#line 1955
  return rowspan_ == 1;
}

- (instancetype)init {
  if (self = [super init]) {
    height_ =
#line 1940
    0;
    rowspan_ =
#line 1942
    1;
    colspan_ =
#line 1942
    1;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfPTable_ColumnMeasurementState *)other {
  [super copyAllFieldsTo:other];
  other->colspan_ = colspan_;
  other->height_ = height_;
  other->rowspan_ = rowspan_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "beginCellWithComItextpdfTextPdfPdfPCell:withFloat:withFloat:", "beginCell", "V", 0x1, NULL },
    { "consumeRowspanWithFloat:withFloat:", "consumeRowspan", "V", 0x1, NULL },
    { "cellEnds", NULL, "Z", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "height_", NULL, 0x1, "F", NULL,  },
    { "rowspan_", NULL, 0x1, "I", NULL,  },
    { "colspan_", NULL, 0x1, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfPTable_ColumnMeasurementState = { "ColumnMeasurementState", "com.itextpdf.text.pdf", "PdfPTable", 0x9, 4, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfPTable_ColumnMeasurementState;
}

@end
