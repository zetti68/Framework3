//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfArray.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfArray.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNull.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/internal/PdfIsoKeys.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"


#line 68
@implementation ComItextpdfTextPdfPdfArray


#line 80
- (instancetype)initComItextpdfTextPdfPdfArray {
  if (self =
#line 81
  [super initWithInt:ComItextpdfTextPdfPdfObject_ARRAY]) {
    
#line 82
    arrayList_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (instancetype)init {
  return [self initComItextpdfTextPdfPdfArray];
}


#line 91
- (instancetype)initWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  if (self =
#line 92
  [super initWithInt:ComItextpdfTextPdfPdfObject_ARRAY]) {
    
#line 93
    arrayList_ = [[JavaUtilArrayList alloc] init];
    [arrayList_ addWithId:object];
  }
  return self;
}


#line 106
- (instancetype)initWithFloatArray:(IOSFloatArray *)values {
  if (self =
#line 107
  [super initWithInt:ComItextpdfTextPdfPdfObject_ARRAY]) {
    
#line 108
    arrayList_ = [[JavaUtilArrayList alloc] init];
    
#line 109
    [self addWithFloatArray:values];
  }
  return self;
}


#line 121
- (instancetype)initWithIntArray:(IOSIntArray *)values {
  if (self =
#line 122
  [super initWithInt:ComItextpdfTextPdfPdfObject_ARRAY]) {
    
#line 123
    arrayList_ = [[JavaUtilArrayList alloc] init];
    
#line 124
    [self addWithIntArray:values];
  }
  return self;
}


#line 137
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)l {
  if (self =
#line 138
  [self initComItextpdfTextPdfPdfArray]) {
    
#line 139
    for (ComItextpdfTextPdfPdfObject * __strong element in nil_chk(l))
#line 140
    [self addWithComItextpdfTextPdfPdfObject:element];
  }
  return self;
}


#line 149
- (instancetype)initWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)array {
  if (self =
#line 150
  [super initWithInt:ComItextpdfTextPdfPdfObject_ARRAY]) {
    
#line 151
    arrayList_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:((ComItextpdfTextPdfPdfArray *) nil_chk(array))->arrayList_];
  }
  return self;
}


#line 164
- (void)toPdfWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                      withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 165
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_OBJECT withId:self];
  [((JavaIoOutputStream *) nil_chk(os)) writeWithInt:'['];
  
#line 168
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(arrayList_)) iterator];
  ComItextpdfTextPdfPdfObject *object;
  jint type = 0;
  if ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    object = [i next];
    if (object == nil)
#line 174
    object = ComItextpdfTextPdfPdfNull_get_PDFNULL_();
    [((ComItextpdfTextPdfPdfObject *) nil_chk(object)) toPdfWithComItextpdfTextPdfPdfWriter:writer withJavaIoOutputStream:os];
  }
  while ([i hasNext]) {
    object = [i next];
    if (object == nil)
#line 180
    object = ComItextpdfTextPdfPdfNull_get_PDFNULL_();
    type = [((ComItextpdfTextPdfPdfObject *) nil_chk(object)) type];
    if (type != ComItextpdfTextPdfPdfObject_ARRAY && type != ComItextpdfTextPdfPdfObject_DICTIONARY && type != ComItextpdfTextPdfPdfObject_NAME && type != ComItextpdfTextPdfPdfObject_STRING)
#line 183
    [os writeWithInt:' '];
    [object toPdfWithComItextpdfTextPdfPdfWriter:writer withJavaIoOutputStream:os];
  }
  [os writeWithInt:']'];
}

- (NSString *)description {
  
#line 201
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) description];
}


#line 216
- (ComItextpdfTextPdfPdfObject *)setWithInt:(jint)idx
            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 217
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) setWithInt:idx withId:obj];
}


#line 230
- (ComItextpdfTextPdfPdfObject *)removeWithInt:(jint)idx {
  
#line 231
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) removeWithInt:idx];
}


#line 241
- (JavaUtilArrayList *)getArrayList {
  
#line 242
  return arrayList_;
}


#line 250
- (jint)size {
  
#line 251
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) size];
}


#line 260
- (jboolean)isEmpty {
  
#line 261
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) isEmpty];
}


#line 272
- (jboolean)addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 273
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) addWithId:object];
}


#line 287
- (jboolean)addWithFloatArray:(IOSFloatArray *)values {
  
#line 288
  for (jint k = 0; k < ((IOSFloatArray *) nil_chk(values))->size_; ++k)
#line 289
  [((JavaUtilArrayList *) nil_chk(arrayList_)) addWithId:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:IOSFloatArray_Get(values, k)]];
  return YES;
}


#line 303
- (jboolean)addWithIntArray:(IOSIntArray *)values {
  
#line 304
  for (jint k = 0; k < ((IOSIntArray *) nil_chk(values))->size_; ++k)
#line 305
  [((JavaUtilArrayList *) nil_chk(arrayList_)) addWithId:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:IOSIntArray_Get(values, k)]];
  return YES;
}


#line 321
- (void)addWithInt:(jint)index
withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)element {
  
#line 322
  [((JavaUtilArrayList *) nil_chk(arrayList_)) addWithInt:index withId:element];
}


#line 334
- (void)addFirstWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 335
  [((JavaUtilArrayList *) nil_chk(arrayList_)) addWithInt:0 withId:object];
}


#line 345
- (jboolean)containsWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 346
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) containsWithId:object];
}


#line 354
- (id<JavaUtilListIterator>)listIterator {
  
#line 355
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) listIterator];
}


#line 369
- (ComItextpdfTextPdfPdfObject *)getPdfObjectWithInt:(jint)idx {
  
#line 370
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) getWithInt:idx];
}


#line 383
- (ComItextpdfTextPdfPdfObject *)getDirectObjectWithInt:(jint)idx {
  
#line 384
  return [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[self getPdfObjectWithInt:idx]];
}


#line 403
- (ComItextpdfTextPdfPdfDictionary *)getAsDictWithInt:(jint)idx {
  
#line 404
  ComItextpdfTextPdfPdfDictionary *dict = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithInt:idx];
  if (orig != nil && [orig isDictionary])
#line 407
  dict = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(orig, [ComItextpdfTextPdfPdfDictionary class]);
  return dict;
}


#line 424
- (ComItextpdfTextPdfPdfArray *)getAsArrayWithInt:(jint)idx {
  
#line 425
  ComItextpdfTextPdfPdfArray *array = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithInt:idx];
  if (orig != nil && [orig isArray])
#line 428
  array = (ComItextpdfTextPdfPdfArray *) check_class_cast(orig, [ComItextpdfTextPdfPdfArray class]);
  return array;
}


#line 445
- (ComItextpdfTextPdfPdfStream *)getAsStreamWithInt:(jint)idx {
  
#line 446
  ComItextpdfTextPdfPdfStream *stream = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithInt:idx];
  if (orig != nil && [orig isStream])
#line 449
  stream = (ComItextpdfTextPdfPdfStream *) check_class_cast(orig, [ComItextpdfTextPdfPdfStream class]);
  return stream;
}


#line 466
- (ComItextpdfTextPdfPdfString *)getAsStringWithInt:(jint)idx {
  
#line 467
  ComItextpdfTextPdfPdfString *string = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithInt:idx];
  if (orig != nil && [orig isString])
#line 470
  string = (ComItextpdfTextPdfPdfString *) check_class_cast(orig, [ComItextpdfTextPdfPdfString class]);
  return string;
}


#line 487
- (ComItextpdfTextPdfPdfNumber *)getAsNumberWithInt:(jint)idx {
  
#line 488
  ComItextpdfTextPdfPdfNumber *number = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithInt:idx];
  if (orig != nil && [orig isNumber])
#line 491
  number = (ComItextpdfTextPdfPdfNumber *) check_class_cast(orig, [ComItextpdfTextPdfPdfNumber class]);
  return number;
}


#line 508
- (ComItextpdfTextPdfPdfName *)getAsNameWithInt:(jint)idx {
  
#line 509
  ComItextpdfTextPdfPdfName *name = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithInt:idx];
  if (orig != nil && [orig isName])
#line 512
  name = (ComItextpdfTextPdfPdfName *) check_class_cast(orig, [ComItextpdfTextPdfPdfName class]);
  return name;
}


#line 529
- (ComItextpdfTextPdfPdfBoolean *)getAsBooleanWithInt:(jint)idx {
  
#line 530
  ComItextpdfTextPdfPdfBoolean *bool_ = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithInt:idx];
  if (orig != nil && [orig isBoolean])
#line 533
  bool_ = (ComItextpdfTextPdfPdfBoolean *) check_class_cast(orig, [ComItextpdfTextPdfPdfBoolean class]);
  return bool_;
}


#line 548
- (ComItextpdfTextPdfPdfIndirectReference *)getAsIndirectObjectWithInt:(jint)idx {
  
#line 549
  ComItextpdfTextPdfPdfIndirectReference *ref = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getPdfObjectWithInt:idx];
  if ([orig isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]])
#line 552
  ref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(orig, [ComItextpdfTextPdfPdfIndirectReference class]);
  return ref;
}

- (id<JavaUtilIterator>)iterator {
  
#line 560
  return [((JavaUtilArrayList *) nil_chk(arrayList_)) iterator];
}


#line 568
- (IOSLongArray *)asLongArray {
  
#line 569
  IOSLongArray *rslt = [IOSLongArray arrayWithLength:[self size]];
  for (jint k = 0; k < rslt->size_; ++k) {
    *IOSLongArray_GetRef(rslt, k) = [((ComItextpdfTextPdfPdfNumber *) nil_chk([self getAsNumberWithInt:k])) longValue];
  }
  return rslt;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfArray *)other {
  [super copyAllFieldsTo:other];
  other->arrayList_ = arrayList_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (IOSObjectArray *)__annotations_getArrayList {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfArray", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfObject:", "PdfArray", NULL, 0x1, NULL },
    { "initWithFloatArray:", "PdfArray", NULL, 0x1, NULL },
    { "initWithIntArray:", "PdfArray", NULL, 0x1, NULL },
    { "initWithJavaUtilList:", "PdfArray", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfArray:", "PdfArray", NULL, 0x1, NULL },
    { "toPdfWithComItextpdfTextPdfPdfWriter:withJavaIoOutputStream:", "toPdf", "V", 0x1, "Ljava.io.IOException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "setWithInt:withComItextpdfTextPdfPdfObject:", "set", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "removeWithInt:", "remove", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "getArrayList", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "addWithComItextpdfTextPdfPdfObject:", "add", "Z", 0x1, NULL },
    { "addWithFloatArray:", "add", "Z", 0x1, NULL },
    { "addWithIntArray:", "add", "Z", 0x1, NULL },
    { "addWithInt:withComItextpdfTextPdfPdfObject:", "add", "V", 0x1, NULL },
    { "addFirstWithComItextpdfTextPdfPdfObject:", "addFirst", "V", 0x1, NULL },
    { "containsWithComItextpdfTextPdfPdfObject:", "contains", "Z", 0x1, NULL },
    { "listIterator", NULL, "Ljava.util.ListIterator;", 0x1, NULL },
    { "getPdfObjectWithInt:", "getPdfObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "getDirectObjectWithInt:", "getDirectObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "getAsDictWithInt:", "getAsDict", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getAsArrayWithInt:", "getAsArray", "Lcom.itextpdf.text.pdf.PdfArray;", 0x1, NULL },
    { "getAsStreamWithInt:", "getAsStream", "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, NULL },
    { "getAsStringWithInt:", "getAsString", "Lcom.itextpdf.text.pdf.PdfString;", 0x1, NULL },
    { "getAsNumberWithInt:", "getAsNumber", "Lcom.itextpdf.text.pdf.PdfNumber;", 0x1, NULL },
    { "getAsNameWithInt:", "getAsName", "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "getAsBooleanWithInt:", "getAsBoolean", "Lcom.itextpdf.text.pdf.PdfBoolean;", 0x1, NULL },
    { "getAsIndirectObjectWithInt:", "getAsIndirectObject", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL },
    { "asLongArray", NULL, "[J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arrayList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfArray = { "PdfArray", "com.itextpdf.text.pdf", NULL, 0x1, 32, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfArray;
}

@end
