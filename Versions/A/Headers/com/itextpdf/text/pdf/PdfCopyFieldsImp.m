//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfCopyFieldsImp.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfCopyFieldsImp.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/BadPasswordException.h"
#include "com/itextpdf/text/log/Counter.h"
#include "com/itextpdf/text/log/CounterFactory.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfCopy.h"
#include "com/itextpdf/text/pdf/PdfCopyFields.h"
#include "com/itextpdf/text/pdf/PdfCopyFieldsImp.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfDocument.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfPages.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"

BOOL ComItextpdfTextPdfPdfCopyFieldsImp_initialized = NO;


#line 65
@implementation ComItextpdfTextPdfPdfCopyFieldsImp

ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfCopyFieldsImp_iTextTag_;
JavaLangInteger * ComItextpdfTextPdfPdfCopyFieldsImp_zero_;
JavaUtilHashMap * ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_;
JavaUtilHashMap * ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_;


#line 92
- (id<ComItextpdfTextLogCounter>)getCounter {
  
#line 93
  return COUNTER_;
}


#line 96
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  return [self initComItextpdfTextPdfPdfCopyFieldsImpWithJavaIoOutputStream:os withChar:0x0000];
}

- (instancetype)initComItextpdfTextPdfPdfCopyFieldsImpWithJavaIoOutputStream:(JavaIoOutputStream *)os
                                                                    withChar:(jchar)pdfVersion {
  if (self =
#line 101
  [super initWithComItextpdfTextPdfPdfDocument:[[ComItextpdfTextPdfPdfDocument alloc] init] withJavaIoOutputStream:os]) {
    readers_ =
#line 69
    [[JavaUtilArrayList alloc] init];
    readers2intrefs_ =
#line 70
    [[JavaUtilHashMap alloc] init];
    pages2intrefs_ =
#line 71
    [[JavaUtilHashMap alloc] init];
    visited_ =
#line 72
    [[JavaUtilHashMap alloc] init];
    fields_ =
#line 73
    [[JavaUtilArrayList alloc] init];
    fieldTree_ =
#line 75
    [[JavaUtilHashMap alloc] init];
    pageRefs_ =
#line 76
    [[JavaUtilArrayList alloc] init];
    pageDics_ =
#line 77
    [[JavaUtilArrayList alloc] init];
    resources_ =
#line 78
    [[ComItextpdfTextPdfPdfDictionary alloc] init];
    closing_ =
#line 80
    NO;
    calculationOrder_ =
#line 83
    [[JavaUtilArrayList alloc] init];
    needAppearances_ =
#line 86
    NO;
    mergedRadioButtons_ =
#line 87
    [[JavaUtilHashSet alloc] init];
    COUNTER_ =
#line 91
    [ComItextpdfTextLogCounterFactory getCounterWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfCopyFields class]]];
    
#line 102
    [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addWriterWithComItextpdfTextPdfPdfWriter:self];
    
#line 103
    if (pdfVersion != 0)
#line 104
    [super setPdfVersionWithChar:pdfVersion];
    
#line 105
    nd_ = [[ComItextpdfTextDocument alloc] init];
    
#line 106
    [nd_ addDocListenerWithComItextpdfTextDocListener:pdf_];
  }
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
                                  withChar:(jchar)pdfVersion {
  return [self initComItextpdfTextPdfPdfCopyFieldsImpWithJavaIoOutputStream:
#line 100
os withChar:pdfVersion];
}


#line 109
- (void)addDocumentWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                  withJavaUtilList:(id<JavaUtilList>)pagesToKeep {
  
#line 110
  if (![((JavaUtilHashMap *) nil_chk(readers2intrefs_)) containsKeyWithId:reader] && [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) isTampered])
#line 111
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.was.reused" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  reader = [[ComItextpdfTextPdfPdfReader alloc] initWithComItextpdfTextPdfPdfReader:reader];
  [reader selectPagesWithJavaUtilList:pagesToKeep];
  if ([reader getNumberOfPages] == 0)
#line 115
  return;
  [reader setTamperedWithBoolean:NO];
  [self addDocumentWithComItextpdfTextPdfPdfReader:reader];
}


#line 120
- (void)addDocumentWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 121
  if (![((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) isOpenedWithFullPermissions])
#line 122
  @throw [[ComItextpdfTextExceptionsBadPasswordException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"pdfreader.not.opened.with.owner.password" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [self openDoc];
  if ([((JavaUtilHashMap *) nil_chk(readers2intrefs_)) containsKeyWithId:reader]) {
    reader = [[ComItextpdfTextPdfPdfReader alloc] initWithComItextpdfTextPdfPdfReader:reader];
  }
  else {
    if ([reader isTampered])
#line 129
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.was.reused" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    [reader consolidateNamedDestinations];
    [reader setTamperedWithBoolean:YES];
  }
  [reader shuffleSubsetNames];
  (void) [readers2intrefs_ putWithId:reader withId:[[ComItextpdfTextPdfIntHashtable alloc] init]];
  [((JavaUtilArrayList *) nil_chk(readers_)) addWithId:reader];
  jint len = [reader getNumberOfPages];
  ComItextpdfTextPdfIntHashtable *refs = [[ComItextpdfTextPdfIntHashtable alloc] init];
  for (jint p = 1; p <= len; ++p) {
    [refs putWithInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk([reader getPageOrigRefWithInt:p])) getNumber] withInt:1];
    [reader releasePageWithInt:p];
  }
  (void) [((JavaUtilHashMap *) nil_chk(pages2intrefs_)) putWithId:reader withId:refs];
  (void) [((JavaUtilHashMap *) nil_chk(visited_)) putWithId:reader withId:[[ComItextpdfTextPdfIntHashtable alloc] init]];
  ComItextpdfTextPdfAcroFields *acro = [reader getAcroFields];
  
#line 147
  jboolean needapp = ![((ComItextpdfTextPdfAcroFields *) nil_chk(acro)) isGenerateAppearances];
  if (needapp)
#line 149
  needAppearances_ = YES;
  [((JavaUtilArrayList *) nil_chk(fields_)) addWithId:acro];
  [self updateCalculationOrderWithComItextpdfTextPdfPdfReader:reader];
}


#line 154
+ (NSString *)getCONameWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
             withComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  
#line 155
  NSString *name = @"";
  while (ref != nil) {
    ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:ref];
    if (obj == nil || [obj type] != ComItextpdfTextPdfPdfObject_DICTIONARY)
#line 159
    break;
    ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfString *t = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_()];
    if (t != nil) {
      name = JreStrcat("$C$", [t toUnicodeString], '.', name);
    }
    ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()], [ComItextpdfTextPdfPRIndirectReference class]);
  }
  if ([name hasSuffix:@"."])
#line 168
  name = [name substring:0 endIndex:((jint) [name length]) - 1];
  return name;
}


#line 175
- (void)updateCalculationOrderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 176
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *acro = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
  if (acro == nil)
#line 179
  return;
  ComItextpdfTextPdfPdfArray *co = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(acro)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CO_()];
  if (co == nil || [co size] == 0)
#line 182
  return;
  ComItextpdfTextPdfAcroFields *af = [reader getAcroFields];
  for (jint k = 0; k < [((ComItextpdfTextPdfPdfArray *) nil_chk(co)) size]; ++k) {
    ComItextpdfTextPdfPdfObject *obj = [co getPdfObjectWithInt:k];
    if (obj == nil || ![obj isIndirect])
#line 187
    continue;
    NSString *name = [ComItextpdfTextPdfPdfCopyFieldsImp getCONameWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class])];
    if ([((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFieldItemWithNSString:name] == nil)
#line 190
    continue;
    name = JreStrcat("C$", '.', name);
    if ([((JavaUtilArrayList *) nil_chk(calculationOrder_)) containsWithId:name])
#line 193
    continue;
    [calculationOrder_ addWithId:name];
  }
}


#line 198
- (void)propagateWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj
      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)refo
                                     withBoolean:(jboolean)restricted {
  
#line 199
  if (obj == nil)
#line 200
  return;
  
#line 203
  if ([obj isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]])
#line 204
  return;
  switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type]) {
    case ComItextpdfTextPdfPdfObject_DICTIONARY:
    case ComItextpdfTextPdfPdfObject_STREAM:
    {
      
#line 208
      ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
      for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([dic getKeys])) {
        if (restricted && ([((ComItextpdfTextPdfPdfName *) nil_chk(key)) isEqual:ComItextpdfTextPdfPdfName_get_PARENT_()] || [key isEqual:ComItextpdfTextPdfPdfName_get_KIDS_()]))
#line 211
        continue;
        ComItextpdfTextPdfPdfObject *ob = [dic getWithComItextpdfTextPdfPdfName:key];
        if (ob != nil && [ob isIndirect]) {
          ComItextpdfTextPdfPRIndirectReference *ind = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(ob, [ComItextpdfTextPdfPRIndirectReference class]);
          if (![self setVisitedWithComItextpdfTextPdfPRIndirectReference:ind] && ![self isPageWithComItextpdfTextPdfPRIndirectReference:ind]) {
            ComItextpdfTextPdfPdfIndirectReference *ref = [self getNewReferenceWithComItextpdfTextPdfPRIndirectReference:ind];
            [self propagateWithComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:ind] withComItextpdfTextPdfPdfIndirectReference:ref withBoolean:restricted];
          }
        }
        else
#line 221
        [self propagateWithComItextpdfTextPdfPdfObject:ob withComItextpdfTextPdfPdfIndirectReference:nil withBoolean:restricted];
      }
      break;
    }
    case ComItextpdfTextPdfPdfObject_ARRAY:
    {
      for (id<JavaUtilIterator> it = [((ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class])) listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        ComItextpdfTextPdfPdfObject *ob = [it next];
        if (ob != nil && [ob isIndirect]) {
          ComItextpdfTextPdfPRIndirectReference *ind = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(ob, [ComItextpdfTextPdfPRIndirectReference class]);
          if (![self isVisitedWithComItextpdfTextPdfPRIndirectReference:ind] && ![self isPageWithComItextpdfTextPdfPRIndirectReference:ind]) {
            ComItextpdfTextPdfPdfIndirectReference *ref = [self getNewReferenceWithComItextpdfTextPdfPRIndirectReference:ind];
            [self propagateWithComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:ind] withComItextpdfTextPdfPdfIndirectReference:ref withBoolean:restricted];
          }
        }
        else
#line 237
        [self propagateWithComItextpdfTextPdfPdfObject:ob withComItextpdfTextPdfPdfIndirectReference:nil withBoolean:restricted];
      }
      break;
    }
    case ComItextpdfTextPdfPdfObject_INDIRECT:
    {
      
#line 242
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"reference.pointing.to.reference" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
}


#line 247
- (void)adjustTabOrderWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)annots
          withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ind
                     withComItextpdfTextPdfPdfNumber:(ComItextpdfTextPdfPdfNumber *)nn {
  
#line 248
  jint v = [((ComItextpdfTextPdfPdfNumber *) nil_chk(nn)) intValue];
  JavaUtilArrayList *t = [((JavaUtilHashMap *) nil_chk(tabOrder_)) getWithId:annots];
  if (t == nil) {
    t = [[JavaUtilArrayList alloc] init];
    jint size = [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size] - 1;
    for (jint k = 0; k < size; ++k) {
      [t addWithId:ComItextpdfTextPdfPdfCopyFieldsImp_zero_];
    }
    [t addWithId:[JavaLangInteger valueOfWithInt:v]];
    (void) [tabOrder_ putWithId:annots withId:t];
    [annots addWithComItextpdfTextPdfPdfObject:ind];
  }
  else {
    jint size = [t size] - 1;
    for (jint k = size; k >= 0; --k) {
      if ([((JavaLangInteger *) nil_chk([t getWithInt:k])) intValue] <= v) {
        [t addWithInt:k + 1 withId:[JavaLangInteger valueOfWithInt:v]];
        [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) addWithInt:k + 1 withComItextpdfTextPdfPdfObject:ind];
        size = -2;
        break;
      }
    }
    if (size != -2) {
      [t addWithInt:0 withId:[JavaLangInteger valueOfWithInt:v]];
      [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) addWithInt:0 withComItextpdfTextPdfPdfObject:ind];
    }
  }
}


#line 278
- (ComItextpdfTextPdfPdfArray *)branchFormWithJavaUtilHashMap:(JavaUtilHashMap *)level
                   withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)parent
                                                 withNSString:(NSString *)fname {
  
#line 279
  ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(level)) entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id obj = [entry_ getValue];
    ComItextpdfTextPdfPdfIndirectReference *ind = [self getPdfIndirectReference];
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    if (parent != nil)
#line 286
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:parent];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:name withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
    NSString *fname2 = JreStrcat("$C$", fname, '.', name);
    jint coidx = [((JavaUtilArrayList *) nil_chk(calculationOrder_)) indexOfWithId:fname2];
    if (coidx >= 0)
#line 291
    (void) [((JavaUtilArrayList *) nil_chk(calculationOrderRefs_)) setWithInt:coidx withId:ind];
    if ([obj isKindOfClass:[JavaUtilHashMap class]]) {
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:[self branchFormWithJavaUtilHashMap:(JavaUtilHashMap *) check_class_cast(obj, [JavaUtilHashMap class]) withComItextpdfTextPdfPdfIndirectReference:ind withNSString:fname2]];
      [arr addWithComItextpdfTextPdfPdfObject:ind];
      (void) [self addToBodyWithComItextpdfTextPdfPdfObject:dic withComItextpdfTextPdfPdfIndirectReference:ind];
    }
    else {
      JavaUtilArrayList *list = (JavaUtilArrayList *) check_class_cast(obj, [JavaUtilArrayList class]);
      [dic mergeDifferentWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([((JavaUtilArrayList *) nil_chk(list)) getWithInt:0], [ComItextpdfTextPdfPdfDictionary class])];
      if ([list size] == 3) {
        [dic mergeDifferentWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([list getWithInt:2], [ComItextpdfTextPdfPdfDictionary class])];
        jint page = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([list getWithInt:1], [JavaLangInteger class])))) intValue];
        ComItextpdfTextPdfPdfDictionary *pageDic = [((JavaUtilArrayList *) nil_chk(pageDics_)) getWithInt:page - 1];
        ComItextpdfTextPdfPdfArray *annots = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
        if (annots == nil) {
          annots = [[ComItextpdfTextPdfPdfArray alloc] init];
          [pageDic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_() withComItextpdfTextPdfPdfObject:annots];
        }
        ComItextpdfTextPdfPdfNumber *nn = (ComItextpdfTextPdfPdfNumber *) check_class_cast([dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopyFieldsImp_iTextTag_], [ComItextpdfTextPdfPdfNumber class]);
        [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopyFieldsImp_iTextTag_];
        [self adjustTabOrderWithComItextpdfTextPdfPdfArray:annots withComItextpdfTextPdfPdfIndirectReference:ind withComItextpdfTextPdfPdfNumber:nn];
      }
      else {
        ComItextpdfTextPdfPdfDictionary *field = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([list getWithInt:0], [ComItextpdfTextPdfPdfDictionary class]);
        ComItextpdfTextPdfPdfName *v = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(field)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()];
        ComItextpdfTextPdfPdfArray *kids = [[ComItextpdfTextPdfPdfArray alloc] init];
        for (jint k = 1; k < [list size]; k += 2) {
          jint page = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([list getWithInt:k], [JavaLangInteger class])))) intValue];
          ComItextpdfTextPdfPdfDictionary *pageDic = [((JavaUtilArrayList *) nil_chk(pageDics_)) getWithInt:page - 1];
          ComItextpdfTextPdfPdfArray *annots = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
          if (annots == nil) {
            annots = [[ComItextpdfTextPdfPdfArray alloc] init];
            [pageDic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_() withComItextpdfTextPdfPdfObject:annots];
          }
          ComItextpdfTextPdfPdfDictionary *widget = [[ComItextpdfTextPdfPdfDictionary alloc] init];
          [widget mergeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([list getWithInt:k + 1], [ComItextpdfTextPdfPdfDictionary class])];
          [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:ind];
          ComItextpdfTextPdfPdfNumber *nn = (ComItextpdfTextPdfPdfNumber *) check_class_cast([widget getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopyFieldsImp_iTextTag_], [ComItextpdfTextPdfPdfNumber class]);
          [widget removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopyFieldsImp_iTextTag_];
          if ([ComItextpdfTextPdfPdfCopy isCheckButtonWithComItextpdfTextPdfPdfDictionary:field]) {
            ComItextpdfTextPdfPdfName *as = [widget getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()];
            if (v != nil && as != nil)
#line 333
            [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:v];
          }
          else
#line 334
          if ([ComItextpdfTextPdfPdfCopy isRadioButtonWithComItextpdfTextPdfPdfDictionary:field]) {
            ComItextpdfTextPdfPdfName *as = [widget getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()];
            if (v != nil && as != nil && ![as isEqual:[self getOffStateNameWithComItextpdfTextPdfPdfDictionary:widget]]) {
              if (![((JavaUtilHashSet *) nil_chk(mergedRadioButtons_)) containsWithId:list]) {
                [mergedRadioButtons_ addWithId:list];
                [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:v];
              }
              else {
                
#line 341
                [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:[self getOffStateNameWithComItextpdfTextPdfPdfDictionary:widget]];
              }
            }
          }
          ComItextpdfTextPdfPdfIndirectReference *wref = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:widget])) getIndirectReference];
          [self adjustTabOrderWithComItextpdfTextPdfPdfArray:annots withComItextpdfTextPdfPdfIndirectReference:wref withComItextpdfTextPdfPdfNumber:nn];
          [kids addWithComItextpdfTextPdfPdfObject:wref];
          [self propagateWithComItextpdfTextPdfPdfObject:widget withComItextpdfTextPdfPdfIndirectReference:nil withBoolean:NO];
        }
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:kids];
      }
      [arr addWithComItextpdfTextPdfPdfObject:ind];
      (void) [self addToBodyWithComItextpdfTextPdfPdfObject:dic withComItextpdfTextPdfPdfIndirectReference:ind];
      [self propagateWithComItextpdfTextPdfPdfObject:dic withComItextpdfTextPdfPdfIndirectReference:nil withBoolean:NO];
    }
  }
  return arr;
}


#line 360
- (ComItextpdfTextPdfPdfName *)getOffStateNameWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)widget {
  
#line 361
  return ComItextpdfTextPdfPdfName_get_Off_();
}


#line 364
- (void)createAcroForms {
  
#line 365
  if ([((JavaUtilHashMap *) nil_chk(fieldTree_)) isEmpty])
#line 366
  return;
  form_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [form_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_() withComItextpdfTextPdfPdfObject:resources_];
  [self propagateWithComItextpdfTextPdfPdfObject:resources_ withComItextpdfTextPdfPdfIndirectReference:nil withBoolean:NO];
  if (needAppearances_) {
    [form_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEEDAPPEARANCES_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
  }
  [form_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"/Helv 0 Tf 0 g "]];
  tabOrder_ = [[JavaUtilHashMap alloc] init];
  calculationOrderRefs_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:calculationOrder_];
  [form_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_() withComItextpdfTextPdfPdfObject:[self branchFormWithJavaUtilHashMap:fieldTree_ withComItextpdfTextPdfPdfIndirectReference:nil withNSString:@""]];
  if (hasSignature_)
#line 378
  [form_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIGFLAGS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:3]];
  ComItextpdfTextPdfPdfArray *co = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint k = 0; k < [calculationOrderRefs_ size]; ++k) {
    id obj = [calculationOrderRefs_ getWithInt:k];
    if ([obj isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]])
#line 383
    [co addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])];
  }
  if ([co size] > 0)
#line 386
  [form_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CO_() withComItextpdfTextPdfPdfObject:co];
}


#line 390
- (void)close {
  
#line 391
  if (closing_) {
    [super close];
    return;
  }
  closing_ = YES;
  @try {
    [self closeIt];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 407
- (void)closeIt {
  
#line 408
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(readers_)) size]; ++k) {
    [((ComItextpdfTextPdfPdfReader *) nil_chk([readers_ getWithInt:k])) removeFields];
  }
  for (jint r = 0; r < [readers_ size]; ++r) {
    ComItextpdfTextPdfPdfReader *reader = [readers_ getWithInt:r];
    for (jint page = 1; page <= [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getNumberOfPages]; ++page) {
      [((JavaUtilArrayList *) nil_chk(pageRefs_)) addWithId:[self getNewReferenceWithComItextpdfTextPdfPRIndirectReference:[reader getPageOrigRefWithInt:page]]];
      [((JavaUtilArrayList *) nil_chk(pageDics_)) addWithId:[reader getPageNWithInt:page]];
    }
  }
  [self mergeFields];
  [self createAcroForms];
  for (jint r = 0; r < [readers_ size]; ++r) {
    ComItextpdfTextPdfPdfReader *reader = [readers_ getWithInt:r];
    for (jint page = 1; page <= [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getNumberOfPages]; ++page) {
      ComItextpdfTextPdfPdfDictionary *dic = [reader getPageNWithInt:page];
      ComItextpdfTextPdfPdfIndirectReference *pageRef = [self getNewReferenceWithComItextpdfTextPdfPRIndirectReference:[reader getPageOrigRefWithInt:page]];
      ComItextpdfTextPdfPdfIndirectReference *parent = [((ComItextpdfTextPdfPdfPages *) nil_chk(root_)) addPageRefWithComItextpdfTextPdfPdfIndirectReference:pageRef];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:parent];
      [self propagateWithComItextpdfTextPdfPdfObject:dic withComItextpdfTextPdfPdfIndirectReference:pageRef withBoolean:NO];
    }
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(readers2intrefs_)) entrySet])) {
    ComItextpdfTextPdfPdfReader *reader = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    @try {
      file_ = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getSafeFile];
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(file_)) reOpen];
      ComItextpdfTextPdfIntHashtable *t = [entry_ getValue];
      IOSIntArray *keys = [((ComItextpdfTextPdfIntHashtable *) nil_chk(t)) toOrderedKeys];
      for (jint k = 0; k < ((IOSIntArray *) nil_chk(keys))->size_; ++k) {
        ComItextpdfTextPdfPRIndirectReference *ref = [[ComItextpdfTextPdfPRIndirectReference alloc] initWithComItextpdfTextPdfPdfReader:reader withInt:IOSIntArray_Get(keys, k)];
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:ref] withInt:[t getWithInt:IOSIntArray_Get(keys, k)]];
      }
    }
    @finally {
      @try {
        [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(file_)) close];
      }
      @catch (
#line 448
      JavaLangException *e) {
      }
    }
  }
  
#line 453
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) close];
}


#line 456
- (void)addPageOffsetToFieldWithJavaUtilMap:(id<JavaUtilMap>)fd
                                    withInt:(jint)pageOffset {
  
#line 457
  if (pageOffset == 0)
#line 458
  return;
  for (ComItextpdfTextPdfAcroFields_Item * __strong item in nil_chk([((id<JavaUtilMap>) nil_chk(fd)) values])) {
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      jint p = [((JavaLangInteger *) nil_chk([item getPageWithInt:k])) intValue];
      [item forcePageWithInt:k withInt:p + pageOffset];
    }
  }
}


#line 467
- (void)createWidgetsWithJavaUtilArrayList:(JavaUtilArrayList *)list
     withComItextpdfTextPdfAcroFields_Item:(ComItextpdfTextPdfAcroFields_Item *)item {
  
#line 468
  for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
    [((JavaUtilArrayList *) nil_chk(list)) addWithId:[item getPageWithInt:k]];
    ComItextpdfTextPdfPdfDictionary *merged = [item getMergedWithInt:k];
    ComItextpdfTextPdfPdfObject *dr = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_()];
    if (dr != nil)
#line 473
    [ComItextpdfTextPdfPdfFormField mergeResourcesWithComItextpdfTextPdfPdfDictionary:resources_ withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:dr], [ComItextpdfTextPdfPdfDictionary class])];
    ComItextpdfTextPdfPdfDictionary *widget = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    for (id __strong element in nil_chk([merged getKeys])) {
      ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
      if ([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_)) containsKeyWithId:key])
#line 478
      [widget putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[merged getWithComItextpdfTextPdfPdfName:key]];
    }
    [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopyFieldsImp_iTextTag_ withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[((JavaLangInteger *) nil_chk([item getTabOrderWithInt:k])) intValue] + 1]];
    [list addWithId:widget];
  }
}


#line 486
- (void)mergeFieldWithNSString:(NSString *)name
withComItextpdfTextPdfAcroFields_Item:(ComItextpdfTextPdfAcroFields_Item *)item {
  
#line 487
  JavaUtilHashMap *map = fieldTree_;
  JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:name withNSString:@"."];
  if (![tk hasMoreTokens])
#line 490
  return;
  while (YES) {
    NSString *s = [tk nextToken];
    id obj = [((JavaUtilHashMap *) nil_chk(map)) getWithId:s];
    if ([tk hasMoreTokens]) {
      if (obj == nil) {
        obj = [[JavaUtilHashMap alloc] init];
        (void) [map putWithId:s withId:obj];
        map = (JavaUtilHashMap *) check_class_cast(obj, [JavaUtilHashMap class]);
        continue;
      }
      else if ([obj isKindOfClass:[JavaUtilHashMap class]])
#line 502
      map = (JavaUtilHashMap *) check_class_cast(obj, [JavaUtilHashMap class]);
      else
#line 504
      return;
    }
    else {
      if ([obj isKindOfClass:[JavaUtilHashMap class]])
#line 508
      return;
      ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
      if (obj == nil) {
        ComItextpdfTextPdfPdfDictionary *field = [[ComItextpdfTextPdfPdfDictionary alloc] init];
        if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_SIG_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()]])
#line 513
        hasSignature_ = YES;
        for (id __strong element in nil_chk([merged getKeys])) {
          ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
          if ([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_)) containsKeyWithId:key])
#line 517
          [field putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[merged getWithComItextpdfTextPdfPdfName:key]];
        }
        JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
        [list addWithId:field];
        [self createWidgetsWithJavaUtilArrayList:list withComItextpdfTextPdfAcroFields_Item:item];
        (void) [map putWithId:s withId:list];
      }
      else {
        JavaUtilArrayList *list = (JavaUtilArrayList *) check_class_cast(obj, [JavaUtilArrayList class]);
        ComItextpdfTextPdfPdfDictionary *field = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([list getWithInt:0], [ComItextpdfTextPdfPdfDictionary class]);
        ComItextpdfTextPdfPdfName *type1 = (ComItextpdfTextPdfPdfName *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(field)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()], [ComItextpdfTextPdfPdfName class]);
        ComItextpdfTextPdfPdfName *type2 = (ComItextpdfTextPdfPdfName *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()], [ComItextpdfTextPdfPdfName class]);
        if (type1 == nil || ![type1 isEqual:type2])
#line 530
        return;
        jint flag1 = 0;
        ComItextpdfTextPdfPdfObject *f1 = [field getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
        if (f1 != nil && [f1 isNumber])
#line 534
        flag1 = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(f1, [ComItextpdfTextPdfPdfNumber class])) intValue];
        jint flag2 = 0;
        ComItextpdfTextPdfPdfObject *f2 = [merged getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
        if (f2 != nil && [f2 isNumber])
#line 538
        flag2 = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(f2, [ComItextpdfTextPdfPdfNumber class])) intValue];
        if ([((ComItextpdfTextPdfPdfName *) nil_chk(type1)) isEqual:ComItextpdfTextPdfPdfName_get_BTN_()]) {
          if (((flag1 ^ flag2) & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) != 0)
#line 541
          return;
          if ((flag1 & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) == 0 && ((flag1 ^ flag2) & ComItextpdfTextPdfPdfFormField_FF_RADIO) != 0)
#line 543
          return;
        }
        else if ([type1 isEqual:ComItextpdfTextPdfPdfName_get_CH_()]) {
          if (((flag1 ^ flag2) & ComItextpdfTextPdfPdfFormField_FF_COMBO) != 0)
#line 547
          return;
        }
        [self createWidgetsWithJavaUtilArrayList:list withComItextpdfTextPdfAcroFields_Item:item];
      }
      return;
    }
  }
}


#line 556
- (void)mergeWithMasterWithJavaUtilMap:(id<JavaUtilMap>)fd {
  
#line 557
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(fd)) entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    [self mergeFieldWithNSString:name withComItextpdfTextPdfAcroFields_Item:[entry_ getValue]];
  }
}


#line 563
- (void)mergeFields {
  
#line 564
  jint pageOffset = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(fields_)) size]; ++k) {
    id<JavaUtilMap> fd = [((ComItextpdfTextPdfAcroFields *) nil_chk([fields_ getWithInt:k])) getFields];
    [self addPageOffsetToFieldWithJavaUtilMap:fd withInt:pageOffset];
    [self mergeWithMasterWithJavaUtilMap:fd];
    pageOffset += [((ComItextpdfTextPdfPdfReader *) nil_chk([((JavaUtilArrayList *) nil_chk(readers_)) getWithInt:k])) getNumberOfPages];
  }
}


#line 574
- (ComItextpdfTextPdfPdfIndirectReference *)getPageReferenceWithInt:(jint)page {
  return [((JavaUtilArrayList *) nil_chk(pageRefs_)) getWithInt:page - 1];
}


#line 579
- (ComItextpdfTextPdfPdfDictionary *)getCatalogWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)rootObj {
  
#line 580
  @try {
    ComItextpdfTextPdfPdfDictionary *cat = [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getCatalogWithComItextpdfTextPdfPdfIndirectReference:rootObj];
    if (form_ != nil) {
      ComItextpdfTextPdfPdfIndirectReference *ref = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:form_])) getIndirectReference];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(cat)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_() withComItextpdfTextPdfPdfObject:ref];
    }
    return cat;
  }
  @catch (JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 593
- (ComItextpdfTextPdfPdfIndirectReference *)getNewReferenceWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  
#line 594
  return [[ComItextpdfTextPdfPdfIndirectReference alloc] initWithInt:0 withInt:[self getNewObjectNumberWithComItextpdfTextPdfPdfReader:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getReader] withInt:[ref getNumber] withInt:0]];
}


#line 598
- (jint)getNewObjectNumberWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                  withInt:(jint)number
                                                  withInt:(jint)generation {
  ComItextpdfTextPdfIntHashtable *refs = [((JavaUtilHashMap *) nil_chk(readers2intrefs_)) getWithId:reader];
  jint n = [((ComItextpdfTextPdfIntHashtable *) nil_chk(refs)) getWithInt:number];
  if (n == 0) {
    n = [self getIndirectReferenceNumber];
    [refs putWithInt:number withInt:n];
  }
  return n;
}


#line 614
- (jboolean)setVisitedWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  
#line 615
  ComItextpdfTextPdfIntHashtable *refs = [((JavaUtilHashMap *) nil_chk(visited_)) getWithId:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getReader]];
  if (refs != nil)
#line 617
  return [refs putWithInt:[ref getNumber] withInt:1] != 0;
  else
#line 619
  return NO;
}


#line 627
- (jboolean)isVisitedWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  
#line 628
  ComItextpdfTextPdfIntHashtable *refs = [((JavaUtilHashMap *) nil_chk(visited_)) getWithId:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getReader]];
  if (refs != nil)
#line 630
  return [refs containsKeyWithInt:[ref getNumber]];
  else
#line 632
  return NO;
}


#line 635
- (jboolean)isVisitedWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                             withInt:(jint)number
                                             withInt:(jint)generation {
  
#line 636
  ComItextpdfTextPdfIntHashtable *refs = [((JavaUtilHashMap *) nil_chk(readers2intrefs_)) getWithId:reader];
  return [((ComItextpdfTextPdfIntHashtable *) nil_chk(refs)) containsKeyWithInt:number];
}


#line 645
- (jboolean)isPageWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  
#line 646
  ComItextpdfTextPdfIntHashtable *refs = [((JavaUtilHashMap *) nil_chk(pages2intrefs_)) getWithId:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ref)) getReader]];
  if (refs != nil)
#line 648
  return [refs containsKeyWithInt:[ref getNumber]];
  else
#line 650
  return NO;
}


#line 654
- (ComItextpdfTextPdfRandomAccessFileOrArray *)getReaderFileWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 655
  return file_;
}


#line 658
- (void)openDoc {
  
#line 659
  if (![((ComItextpdfTextDocument *) nil_chk(nd_)) isOpen])
#line 660
  [nd_ open];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfCopyFieldsImp *)other {
  [super copyAllFieldsTo:other];
  other->COUNTER_ = COUNTER_;
  other->calculationOrder_ = calculationOrder_;
  other->calculationOrderRefs_ = calculationOrderRefs_;
  other->closing_ = closing_;
  other->fieldTree_ = fieldTree_;
  other->fields_ = fields_;
  other->file_ = file_;
  other->form_ = form_;
  other->hasSignature_ = hasSignature_;
  other->mergedRadioButtons_ = mergedRadioButtons_;
  other->nd_ = nd_;
  other->needAppearances_ = needAppearances_;
  other->pageDics_ = pageDics_;
  other->pageRefs_ = pageRefs_;
  other->pages2intrefs_ = pages2intrefs_;
  other->readers_ = readers_;
  other->readers2intrefs_ = readers2intrefs_;
  other->resources_ = resources_;
  other->tabOrder_ = tabOrder_;
  other->visited_ = visited_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfCopyFieldsImp class]) {
    ComItextpdfTextPdfPdfCopyFieldsImp_iTextTag_ =
#line 67
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"_iTextTag_"];
    ComItextpdfTextPdfPdfCopyFieldsImp_zero_ =
#line 68
    [JavaLangInteger valueOfWithInt:0];
    ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ =
#line 663
    [[JavaUtilHashMap alloc] init];
    ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ =
#line 664
    [[JavaUtilHashMap alloc] init];
    {
      
#line 666
      JavaLangInteger *one = [JavaLangInteger valueOfWithInt:1];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_CONTENTS_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_RECT_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_NM_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_M_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_F_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_BS_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_BORDER_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_AP_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_AS_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_C_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_A_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_STRUCTPARENT_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_OC_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_H_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_MK_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_DA_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_Q_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_ putWithId:ComItextpdfTextPdfPdfName_get_P_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_AA_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_FT_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_TU_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_TM_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_FF_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_V_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_DV_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_DS_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_RV_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_OPT_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_MAXLEN_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_TI_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_I_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_LOCK_() withId:one];
      (void) [ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_SV_() withId:one];
    }
    ComItextpdfTextPdfPdfCopyFieldsImp_initialized = YES;
  }
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCounter", NULL, "Lcom.itextpdf.text.log.Counter;", 0x4, NULL },
    { "initWithJavaIoOutputStream:", "PdfCopyFieldsImp", NULL, 0x0, "Lcom.itextpdf.text.DocumentException;" },
    { "initWithJavaIoOutputStream:withChar:", "PdfCopyFieldsImp", NULL, 0x0, "Lcom.itextpdf.text.DocumentException;" },
    { "addDocumentWithComItextpdfTextPdfPdfReader:withJavaUtilList:", "addDocument", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "addDocumentWithComItextpdfTextPdfPdfReader:", "addDocument", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getCONameWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPRIndirectReference:", "getCOName", "Ljava.lang.String;", 0xa, NULL },
    { "updateCalculationOrderWithComItextpdfTextPdfPdfReader:", "updateCalculationOrder", "V", 0x4, NULL },
    { "propagateWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfIndirectReference:withBoolean:", "propagate", "V", 0x0, "Ljava.io.IOException;" },
    { "adjustTabOrderWithComItextpdfTextPdfPdfArray:withComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfNumber:", "adjustTabOrder", "V", 0x2, NULL },
    { "branchFormWithJavaUtilHashMap:withComItextpdfTextPdfPdfIndirectReference:withNSString:", "branchForm", "Lcom.itextpdf.text.pdf.PdfArray;", 0x4, "Ljava.io.IOException;" },
    { "getOffStateNameWithComItextpdfTextPdfPdfDictionary:", "getOffStateName", "Lcom.itextpdf.text.pdf.PdfName;", 0x4, NULL },
    { "createAcroForms", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "close", NULL, "V", 0x1, NULL },
    { "closeIt", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "addPageOffsetToFieldWithJavaUtilMap:withInt:", "addPageOffsetToField", "V", 0x0, NULL },
    { "createWidgetsWithJavaUtilArrayList:withComItextpdfTextPdfAcroFields_Item:", "createWidgets", "V", 0x0, NULL },
    { "mergeFieldWithNSString:withComItextpdfTextPdfAcroFields_Item:", "mergeField", "V", 0x0, NULL },
    { "mergeWithMasterWithJavaUtilMap:", "mergeWithMaster", "V", 0x0, NULL },
    { "mergeFields", NULL, "V", 0x0, NULL },
    { "getPageReferenceWithInt:", "getPageReference", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "getCatalogWithComItextpdfTextPdfPdfIndirectReference:", "getCatalog", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, NULL },
    { "getNewReferenceWithComItextpdfTextPdfPRIndirectReference:", "getNewReference", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x4, NULL },
    { "getNewObjectNumberWithComItextpdfTextPdfPdfReader:withInt:withInt:", "getNewObjectNumber", "I", 0x4, NULL },
    { "setVisitedWithComItextpdfTextPdfPRIndirectReference:", "setVisited", "Z", 0x4, NULL },
    { "isVisitedWithComItextpdfTextPdfPRIndirectReference:", "isVisited", "Z", 0x4, NULL },
    { "isVisitedWithComItextpdfTextPdfPdfReader:withInt:withInt:", "isVisited", "Z", 0x4, NULL },
    { "isPageWithComItextpdfTextPdfPRIndirectReference:", "isPage", "Z", 0x4, NULL },
    { "getReaderFileWithComItextpdfTextPdfPdfReader:", "getReaderFile", "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", 0x0, NULL },
    { "openDoc", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iTextTag_", NULL, 0x1a, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfCopyFieldsImp_iTextTag_,  },
    { "zero_", NULL, 0x1a, "Ljava.lang.Integer;", &ComItextpdfTextPdfPdfCopyFieldsImp_zero_,  },
    { "readers_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "readers2intrefs_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "pages2intrefs_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "visited_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "fields_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "file_", NULL, 0x0, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "fieldTree_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "pageRefs_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "pageDics_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "resources_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "form_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "closing_", NULL, 0x0, "Z", NULL,  },
    { "nd_", NULL, 0x0, "Lcom.itextpdf.text.Document;", NULL,  },
    { "tabOrder_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "calculationOrder_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "calculationOrderRefs_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "hasSignature_", NULL, 0x2, "Z", NULL,  },
    { "needAppearances_", NULL, 0x2, "Z", NULL,  },
    { "mergedRadioButtons_", NULL, 0x2, "Ljava.util.HashSet;", NULL,  },
    { "COUNTER_", NULL, 0x4, "Lcom.itextpdf.text.log.Counter;", NULL,  },
    { "widgetKeys_", NULL, 0x1c, "Ljava.util.HashMap;", &ComItextpdfTextPdfPdfCopyFieldsImp_widgetKeys_,  },
    { "fieldKeys_", NULL, 0x1c, "Ljava.util.HashMap;", &ComItextpdfTextPdfPdfCopyFieldsImp_fieldKeys_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfCopyFieldsImp = { "PdfCopyFieldsImp", "com.itextpdf.text.pdf", NULL, 0x0, 29, methods, 24, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfCopyFieldsImp;
}

@end
