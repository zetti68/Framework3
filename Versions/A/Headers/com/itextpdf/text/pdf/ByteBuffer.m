//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/ByteBuffer.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/ByteBuffer.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocWriter.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/Locale.h"

BOOL ComItextpdfTextPdfByteBuffer_initialized = NO;


#line 62
@implementation ComItextpdfTextPdfByteBuffer

jint ComItextpdfTextPdfByteBuffer_byteCacheSize_ = 
#line 69
0;
IOSObjectArray * ComItextpdfTextPdfByteBuffer_byteCache_;
IOSCharArray * ComItextpdfTextPdfByteBuffer_chars_;
IOSByteArray * ComItextpdfTextPdfByteBuffer_bytes_;
jboolean ComItextpdfTextPdfByteBuffer_HIGH_PRECISION_ = 
#line 79
NO;
JavaTextDecimalFormatSymbols * ComItextpdfTextPdfByteBuffer_dfs_;


#line 83
- (instancetype)init {
  return
#line 84
  [self initComItextpdfTextPdfByteBufferWithInt:128];
}


#line 91
- (instancetype)initComItextpdfTextPdfByteBufferWithInt:(jint)size {
  if (self = [super init]) {
    
#line 92
    if (size < 1)
#line 93
    size = 128;
    
#line 94
    buf_ = [IOSByteArray arrayWithLength:size];
  }
  return self;
}

- (instancetype)initWithInt:(jint)size {
  return [self initComItextpdfTextPdfByteBufferWithInt:
#line 91
size];
}


#line 106
+ (void)setCacheSizeWithInt:(jint)size {
  
#line 107
  if (size > 3276700) size = 3276700;
  if (size <= ComItextpdfTextPdfByteBuffer_byteCacheSize_) return;
  IOSObjectArray *tmpCache = [IOSObjectArray arrayWithLength:size type:[IOSByteArray iosClass]];
  [JavaLangSystem arraycopyWithId:ComItextpdfTextPdfByteBuffer_byteCache_ withInt:0 withId:tmpCache withInt:0 withInt:ComItextpdfTextPdfByteBuffer_byteCacheSize_];
  ComItextpdfTextPdfByteBuffer_byteCache_ = tmpCache;
  ComItextpdfTextPdfByteBuffer_byteCacheSize_ = size;
}


#line 121
+ (void)fillCacheWithInt:(jint)decimals {
  
#line 122
  jint step = 1;
  switch (decimals) {
    case 0:
    step = 100;
    break;
    case 1:
    step = 10;
    break;
  }
  for (jint i = 1; i < ComItextpdfTextPdfByteBuffer_byteCacheSize_; i += step) {
    if (IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_byteCache_), i) != nil) continue;
    IOSObjectArray_Set(ComItextpdfTextPdfByteBuffer_byteCache_, i, [ComItextpdfTextPdfByteBuffer convertToBytesWithInt:i]);
  }
}


#line 144
+ (IOSByteArray *)convertToBytesWithInt:(jint)i {
  
#line 145
  jint size = J2ObjCFpToInt([JavaLangMath floorWithDouble:[JavaLangMath logWithDouble:i] / [JavaLangMath logWithDouble:10]]);
  if (i % 100 != 0) {
    size += 2;
  }
  if (i % 10 != 0) {
    size++;
  }
  if (i < 100) {
    size++;
    if (i < 10) {
      size++;
    }
  }
  size--;
  IOSByteArray *cache = [IOSByteArray arrayWithLength:size];
  size--;
  if (i < 100) {
    *IOSByteArray_GetRef(cache, 0) = (jbyte) '0';
  }
  if (i % 10 != 0) {
    *IOSByteArray_GetRef(cache, size--) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), i % 10);
  }
  if (i % 100 != 0) {
    *IOSByteArray_GetRef(cache, size--) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (i / 10) % 10);
    *IOSByteArray_GetRef(cache, size--) = (jbyte) '.';
  }
  size = J2ObjCFpToInt([JavaLangMath floorWithDouble:[JavaLangMath logWithDouble:i] / [JavaLangMath logWithDouble:10]]) - 1;
  jint add = 0;
  while (add < size) {
    *IOSByteArray_GetRef(cache, add) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (i / J2ObjCFpToInt([JavaLangMath powWithDouble:10 withDouble:size - add + 1])) % 10);
    add++;
  }
  return cache;
}


#line 185
- (ComItextpdfTextPdfByteBuffer *)append_iWithInt:(jint)b {
  
#line 186
  jint newcount = count_ + 1;
  if (newcount > ((IOSByteArray *) nil_chk(buf_))->size_) {
    IOSByteArray *newbuf = [IOSByteArray arrayWithLength:[JavaLangMath maxWithInt:LShift32(buf_->size_, 1) withInt:newcount]];
    [JavaLangSystem arraycopyWithId:buf_ withInt:0 withId:newbuf withInt:0 withInt:count_];
    buf_ = newbuf;
  }
  *IOSByteArray_GetRef(buf_, count_) = (jbyte) b;
  count_ = newcount;
  return self;
}


#line 205
- (ComItextpdfTextPdfByteBuffer *)appendWithByteArray:(IOSByteArray *)b
                                              withInt:(jint)off
                                              withInt:(jint)len {
  
#line 206
  if ((off < 0) || (off > ((IOSByteArray *) nil_chk(b))->size_) || (len < 0) ||
#line 207
  ((off + len) > b->size_) || ((off + len) < 0) || len == 0)
#line 208
  return self;
  jint newcount = count_ + len;
  if (newcount > ((IOSByteArray *) nil_chk(buf_))->size_) {
    IOSByteArray *newbuf = [IOSByteArray arrayWithLength:[JavaLangMath maxWithInt:LShift32(buf_->size_, 1) withInt:newcount]];
    [JavaLangSystem arraycopyWithId:buf_ withInt:0 withId:newbuf withInt:0 withInt:count_];
    buf_ = newbuf;
  }
  [JavaLangSystem arraycopyWithId:b withInt:off withId:buf_ withInt:count_ withInt:len];
  count_ = newcount;
  return self;
}


#line 225
- (ComItextpdfTextPdfByteBuffer *)appendWithByteArray:(IOSByteArray *)b {
  return [self appendWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}


#line 235
- (ComItextpdfTextPdfByteBuffer *)appendWithNSString:(NSString *)str {
  
#line 236
  if (str != nil)
#line 237
  return [self appendWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:str]];
  return self;
}


#line 247
- (ComItextpdfTextPdfByteBuffer *)appendWithChar:(jchar)c {
  
#line 248
  return [self append_iWithInt:c];
}


#line 256
- (ComItextpdfTextPdfByteBuffer *)appendWithComItextpdfTextPdfByteBuffer:(ComItextpdfTextPdfByteBuffer *)buf {
  
#line 257
  return [self appendWithByteArray:((ComItextpdfTextPdfByteBuffer *) nil_chk(buf))->buf_ withInt:0 withInt:buf->count_];
}


#line 265
- (ComItextpdfTextPdfByteBuffer *)appendWithInt:(jint)i {
  
#line 266
  return [self appendWithDouble:(jdouble) i];
}


#line 274
- (ComItextpdfTextPdfByteBuffer *)appendWithLong:(jlong)i {
  
#line 275
  return [self appendWithNSString:[JavaLangLong toStringWithLong:i]];
}


#line 278
- (ComItextpdfTextPdfByteBuffer *)appendWithByte:(jbyte)b {
  
#line 279
  return [self append_iWithInt:b];
}


#line 282
- (ComItextpdfTextPdfByteBuffer *)appendHexWithByte:(jbyte)b {
  
#line 283
  (void) [self appendWithByte:IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (RShift32(b, 4)) & (jint) 0x0f)];
  return [self appendWithByte:IOSByteArray_Get(ComItextpdfTextPdfByteBuffer_bytes_, b & (jint) 0x0f)];
}


#line 293
- (ComItextpdfTextPdfByteBuffer *)appendWithFloat:(jfloat)i {
  
#line 294
  return [self appendWithDouble:(jdouble) i];
}


#line 303
- (ComItextpdfTextPdfByteBuffer *)appendWithDouble:(jdouble)d {
  
#line 304
  (void) [self appendWithNSString:[ComItextpdfTextPdfByteBuffer formatDoubleWithDouble:d withComItextpdfTextPdfByteBuffer:self]];
  return self;
}


#line 313
+ (NSString *)formatDoubleWithDouble:(jdouble)d {
  
#line 314
  return [ComItextpdfTextPdfByteBuffer formatDoubleWithDouble:d withComItextpdfTextPdfByteBuffer:nil];
}


#line 325
+ (NSString *)formatDoubleWithDouble:(jdouble)d
    withComItextpdfTextPdfByteBuffer:(ComItextpdfTextPdfByteBuffer *)buf {
  
#line 326
  if (ComItextpdfTextPdfByteBuffer_HIGH_PRECISION_) {
    JavaTextDecimalFormat *dn = [[JavaTextDecimalFormat alloc] initWithNSString:@"0.######" withJavaTextDecimalFormatSymbols:ComItextpdfTextPdfByteBuffer_dfs_];
    NSString *sform = [dn formatWithDouble:d];
    if (buf == nil)
#line 330
    return sform;
    else {
      (void) [buf appendWithNSString:sform];
      return nil;
    }
  }
  jboolean negative = NO;
  if ([JavaLangMath absWithDouble:d] < 0.000015) {
    if (buf != nil) {
      (void) [buf appendWithByte:ComItextpdfTextPdfByteBuffer_ZERO];
      return nil;
    }
    else {
      
#line 342
      return @"0";
    }
  }
  if (d < 0) {
    negative = YES;
    d = -d;
  }
  if (d < 1.0) {
    d += 0.000005;
    if (d >= 1) {
      if (negative) {
        if (buf != nil) {
          (void) [buf appendWithByte:(jbyte) '-'];
          (void) [buf appendWithByte:(jbyte) '1'];
          return nil;
        }
        else {
          
#line 358
          return @"-1";
        }
      }
      else {
        
#line 361
        if (buf != nil) {
          (void) [buf appendWithByte:(jbyte) '1'];
          return nil;
        }
        else {
          
#line 365
          return @"1";
        }
      }
    }
    if (buf != nil) {
      jint v = J2ObjCFpToInt((d * 100000));
      
#line 372
      if (negative) (void) [buf appendWithByte:(jbyte) '-'];
      (void) [buf appendWithByte:(jbyte) '0'];
      (void) [buf appendWithByte:(jbyte) '.'];
      
#line 376
      (void) [buf appendWithByte:(jbyte) (v / 10000 + ComItextpdfTextPdfByteBuffer_ZERO)];
      if (v % 10000 != 0) {
        (void) [buf appendWithByte:(jbyte) ((v / 1000) % 10 + ComItextpdfTextPdfByteBuffer_ZERO)];
        if (v % 1000 != 0) {
          (void) [buf appendWithByte:(jbyte) ((v / 100) % 10 + ComItextpdfTextPdfByteBuffer_ZERO)];
          if (v % 100 != 0) {
            (void) [buf appendWithByte:(jbyte) ((v / 10) % 10 + ComItextpdfTextPdfByteBuffer_ZERO)];
            if (v % 10 != 0) {
              (void) [buf appendWithByte:(jbyte) ((v) % 10 + ComItextpdfTextPdfByteBuffer_ZERO)];
            }
          }
        }
      }
      return nil;
    }
    else {
      
#line 391
      jint x = 100000;
      jint v = J2ObjCFpToInt((d * x));
      
#line 394
      JavaLangStringBuilder *res = [[JavaLangStringBuilder alloc] init];
      if (negative) (void) [res appendWithChar:'-'];
      (void) [res appendWithNSString:@"0."];
      
#line 398
      while (v < x / 10) {
        (void) [res appendWithChar:'0'];
        x /= 10;
      }
      (void) [res appendWithInt:v];
      jint cut = [res sequenceLength] - 1;
      while ([res charAtWithInt:cut] == '0') {
        --cut;
      }
      [res setLengthWithInt:cut + 1];
      return [res description];
    }
  }
  else
#line 410
  if (d <= 32767) {
    d += 0.005;
    jint v = J2ObjCFpToInt((d * 100));
    
#line 414
    if (v < ComItextpdfTextPdfByteBuffer_byteCacheSize_ && IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_byteCache_), v) != nil) {
      if (buf != nil) {
        if (negative) (void) [buf appendWithByte:(jbyte) '-'];
        (void) [buf appendWithByteArray:IOSObjectArray_Get(ComItextpdfTextPdfByteBuffer_byteCache_, v)];
        return nil;
      }
      else {
        
#line 420
        NSString *tmp = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:IOSObjectArray_Get(ComItextpdfTextPdfByteBuffer_byteCache_, v) withNSString:nil];
        if (negative) tmp = JreStrcat("C$", '-', tmp);
        return tmp;
      }
    }
    if (buf != nil) {
      if (v < ComItextpdfTextPdfByteBuffer_byteCacheSize_) {
        
#line 428
        IOSByteArray *cache;
        jint size = 0;
        if (v >= 1000000) {
          
#line 432
          size += 5;
        }
        else
#line 433
        if (v >= 100000) {
          
#line 435
          size += 4;
        }
        else
#line 436
        if (v >= 10000) {
          
#line 438
          size += 3;
        }
        else
#line 439
        if (v >= 1000) {
          
#line 441
          size += 2;
        }
        else
#line 442
        if (v >= 100) {
          
#line 444
          size += 1;
        }
        
#line 448
        if (v % 100 != 0) {
          
#line 450
          size += 2;
        }
        if (v % 10 != 0) {
          size++;
        }
        cache = [IOSByteArray arrayWithLength:size];
        jint add = 0;
        if (v >= 1000000) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 1000000));
        }
        if (v >= 100000) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 100000) % 10);
        }
        if (v >= 10000) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 10000) % 10);
        }
        if (v >= 1000) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 1000) % 10);
        }
        if (v >= 100) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 100) % 10);
        }
        
#line 473
        if (v % 100 != 0) {
          *IOSByteArray_GetRef(cache, add++) = (jbyte) '.';
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 10) % 10);
          if (v % 10 != 0) {
            *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(ComItextpdfTextPdfByteBuffer_bytes_, v % 10);
          }
        }
        IOSObjectArray_Set(nil_chk(ComItextpdfTextPdfByteBuffer_byteCache_), v, cache);
      }
      
#line 483
      if (negative) (void) [buf appendWithByte:(jbyte) '-'];
      if (v >= 1000000) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 1000000))];
      }
      if (v >= 100000) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 100000) % 10)];
      }
      if (v >= 10000) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 10000) % 10)];
      }
      if (v >= 1000) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 1000) % 10)];
      }
      if (v >= 100) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 100) % 10)];
      }
      
#line 500
      if (v % 100 != 0) {
        (void) [buf appendWithByte:(jbyte) '.'];
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_bytes_), (v / 10) % 10)];
        if (v % 10 != 0) {
          (void) [buf appendWithByte:IOSByteArray_Get(ComItextpdfTextPdfByteBuffer_bytes_, v % 10)];
        }
      }
      return nil;
    }
    else {
      
#line 509
      JavaLangStringBuilder *res = [[JavaLangStringBuilder alloc] init];
      if (negative) (void) [res appendWithChar:'-'];
      if (v >= 1000000) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_chars_), (v / 1000000))];
      }
      if (v >= 100000) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_chars_), (v / 100000) % 10)];
      }
      if (v >= 10000) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_chars_), (v / 10000) % 10)];
      }
      if (v >= 1000) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_chars_), (v / 1000) % 10)];
      }
      if (v >= 100) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_chars_), (v / 100) % 10)];
      }
      
#line 527
      if (v % 100 != 0) {
        (void) [res appendWithChar:'.'];
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComItextpdfTextPdfByteBuffer_chars_), (v / 10) % 10)];
        if (v % 10 != 0) {
          (void) [res appendWithChar:IOSCharArray_Get(ComItextpdfTextPdfByteBuffer_chars_, v % 10)];
        }
      }
      return [res description];
    }
  }
  else {
    
#line 537
    d += 0.5;
    jlong v = J2ObjCFpToLong(d);
    if (negative)
#line 540
    return JreStrcat("C$", '-', [JavaLangLong toStringWithLong:v]);
    else
#line 542
    return [JavaLangLong toStringWithLong:v];
  }
}


#line 549
- (void)reset {
  
#line 550
  count_ = 0;
}


#line 560
- (IOSByteArray *)toByteArray {
  
#line 561
  IOSByteArray *newbuf = [IOSByteArray arrayWithLength:count_];
  [JavaLangSystem arraycopyWithId:buf_ withInt:0 withId:newbuf withInt:0 withInt:count_];
  return newbuf;
}


#line 571
- (jint)size {
  
#line 572
  return count_;
}


#line 575
- (void)setSizeWithInt:(jint)size {
  
#line 576
  if (size > count_ || size < 0)
#line 577
  @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.new.size.must.be.positive.and.lt.eq.of.the.current.size" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  count_ = size;
}

- (NSString *)description {
  
#line 589
  return [NSString stringWithBytes:buf_ offset:0 length:count_];
}


#line 601
- (NSString *)toStringWithNSString:(NSString *)enc {
  
#line 602
  return [NSString stringWithBytes:buf_ offset:0 length:count_ charsetName:enc];
}


#line 613
- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  
#line 614
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:buf_ withInt:0 withInt:count_];
}


#line 617
- (void)writeWithInt:(jint)b {
  
#line 618
  (void) [self appendWithByte:(jbyte) b];
}


#line 622
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  (void) [self appendWithByteArray:b withInt:off withInt:len];
}


#line 626
- (IOSByteArray *)getBuffer {
  
#line 627
  return buf_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfByteBuffer *)other {
  [super copyAllFieldsTo:other];
  other->buf_ = buf_;
  other->count_ = count_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfByteBuffer class]) {
    ComItextpdfTextPdfByteBuffer_byteCache_ = [IOSObjectArray arrayWithLength:
#line 71
    ComItextpdfTextPdfByteBuffer_byteCacheSize_ type:[IOSByteArray iosClass]];
    ComItextpdfTextPdfByteBuffer_chars_ = [IOSCharArray arrayWithChars:(jchar[]){
#line 73
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' } count:10];
      ComItextpdfTextPdfByteBuffer_bytes_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 74
        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102 } count:16];
        ComItextpdfTextPdfByteBuffer_dfs_ =
#line 80
        [[JavaTextDecimalFormatSymbols alloc] initWithJavaUtilLocale:JavaUtilLocale_get_US_()];
        ComItextpdfTextPdfByteBuffer_initialized = YES;
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ByteBuffer", NULL, 0x1, NULL },
    { "initWithInt:", "ByteBuffer", NULL, 0x1, NULL },
    { "setCacheSizeWithInt:", "setCacheSize", "V", 0x9, NULL },
    { "fillCacheWithInt:", "fillCache", "V", 0x9, NULL },
    { "convertToBytesWithInt:", "convertToBytes", "[B", 0xa, NULL },
    { "append_iWithInt:", "append_i", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithByteArray:withInt:withInt:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithByteArray:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithNSString:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithChar:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithComItextpdfTextPdfByteBuffer:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithInt:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithLong:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithByte:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendHexWithByte:", "appendHex", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithFloat:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "appendWithDouble:", "append", "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x1, NULL },
    { "formatDoubleWithDouble:", "formatDouble", "Ljava.lang.String;", 0x9, NULL },
    { "formatDoubleWithDouble:withComItextpdfTextPdfByteBuffer:", "formatDouble", "Ljava.lang.String;", 0x9, NULL },
    { "reset", NULL, "V", 0x1, NULL },
    { "toByteArray", NULL, "[B", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "setSizeWithInt:", "setSize", "V", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "toStringWithNSString:", "toString", "Ljava.lang.String;", 0x1, "Ljava.io.UnsupportedEncodingException;" },
    { "writeToWithJavaIoOutputStream:", "writeTo", "V", 0x1, "Ljava.io.IOException;" },
    { "writeWithInt:", "write", "V", 0x1, "Ljava.io.IOException;" },
    { "writeWithByteArray:withInt:withInt:", "write", "V", 0x1, NULL },
    { "getBuffer", NULL, "[B", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "count_", NULL, 0x4, "I", NULL,  },
    { "buf_", NULL, 0x4, "[B", NULL,  },
    { "byteCacheSize_", NULL, 0xa, "I", &ComItextpdfTextPdfByteBuffer_byteCacheSize_,  },
    { "byteCache_", NULL, 0xa, "[[B", &ComItextpdfTextPdfByteBuffer_byteCache_,  },
    { "ZERO_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextPdfByteBuffer_ZERO },
    { "chars_", NULL, 0x1a, "[C", &ComItextpdfTextPdfByteBuffer_chars_,  },
    { "bytes_", NULL, 0x1a, "[B", &ComItextpdfTextPdfByteBuffer_bytes_,  },
    { "HIGH_PRECISION_", NULL, 0x9, "Z", &ComItextpdfTextPdfByteBuffer_HIGH_PRECISION_,  },
    { "dfs_", NULL, 0x1a, "Ljava.text.DecimalFormatSymbols;", &ComItextpdfTextPdfByteBuffer_dfs_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfByteBuffer = { "ByteBuffer", "com.itextpdf.text.pdf", NULL, 0x1, 29, methods, 9, fields, 0, NULL};
  return &_ComItextpdfTextPdfByteBuffer;
}

@end
