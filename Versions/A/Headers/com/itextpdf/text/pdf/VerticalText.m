//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/VerticalText.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/VerticalText.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfChunk.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfFont.h"
#include "com/itextpdf/text/pdf/PdfLine.h"
#include "com/itextpdf/text/pdf/VerticalText.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"


#line 60
@implementation ComItextpdfTextPdfVerticalText


#line 110
- (instancetype)initWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)text {
  if (self = [super init]) {
    chunks_ =
#line 69
    [[JavaUtilArrayList alloc] init];
    alignment_ =
#line 75
    ComItextpdfTextElement_ALIGN_LEFT;
    currentChunkMarker_ =
#line 78
    -1;
    curCharSpace_ = [JavaLangFloat valueOfWithFloat:
#line 258
    0.0f];
    
#line 111
    self->text_ = text;
  }
  return self;
}


#line 118
- (void)addTextWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)phrase {
  
#line 119
  for (ComItextpdfTextChunk * __strong c in nil_chk([((ComItextpdfTextPhrase *) nil_chk(phrase)) getChunks])) {
    [((JavaUtilArrayList *) nil_chk(chunks_)) addWithId:[[ComItextpdfTextPdfPdfChunk alloc] initWithComItextpdfTextChunk:c withComItextpdfTextPdfPdfAction:nil]];
  }
}


#line 128
- (void)addTextWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk {
  
#line 129
  [((JavaUtilArrayList *) nil_chk(chunks_)) addWithId:[[ComItextpdfTextPdfPdfChunk alloc] initWithComItextpdfTextChunk:chunk withComItextpdfTextPdfPdfAction:nil]];
}


#line 139
- (void)setVerticalLayoutWithFloat:(jfloat)startX
                         withFloat:(jfloat)startY
                         withFloat:(jfloat)height
                           withInt:(jint)maxLines
                         withFloat:(jfloat)leading {
  
#line 140
  self->startX_ = startX;
  self->startY_ = startY;
  self->height_ = height;
  self->maxLines_ = maxLines;
  [self setLeadingWithFloat:leading];
}


#line 150
- (void)setLeadingWithFloat:(jfloat)leading {
  
#line 151
  self->leading_ = leading;
}


#line 157
- (jfloat)getLeading {
  
#line 158
  return leading_;
}


#line 166
- (ComItextpdfTextPdfPdfLine *)createLineWithFloat:(jfloat)width {
  
#line 167
  if ([((JavaUtilArrayList *) nil_chk(chunks_)) isEmpty])
#line 168
  return nil;
  splittedChunkText_ = nil;
  currentStandbyChunk_ = nil;
  ComItextpdfTextPdfPdfLine *line = [[ComItextpdfTextPdfPdfLine alloc] initWithFloat:0 withFloat:width withInt:alignment_ withFloat:0];
  NSString *total;
  for (currentChunkMarker_ = 0; currentChunkMarker_ < [chunks_ size]; ++currentChunkMarker_) {
    ComItextpdfTextPdfPdfChunk *original = [chunks_ getWithInt:currentChunkMarker_];
    total = [((ComItextpdfTextPdfPdfChunk *) nil_chk(original)) description];
    currentStandbyChunk_ = [line addWithComItextpdfTextPdfPdfChunk:original];
    if (currentStandbyChunk_ != nil) {
      splittedChunkText_ = [original description];
      [original setValueWithNSString:total];
      return line;
    }
  }
  return line;
}

- (void)shortenChunkArray {
  
#line 190
  if (currentChunkMarker_ < 0)
#line 191
  return;
  if (currentChunkMarker_ >= [((JavaUtilArrayList *) nil_chk(chunks_)) size]) {
    [chunks_ clear];
    return;
  }
  ComItextpdfTextPdfPdfChunk *split = [chunks_ getWithInt:currentChunkMarker_];
  [((ComItextpdfTextPdfPdfChunk *) nil_chk(split)) setValueWithNSString:splittedChunkText_];
  (void) [chunks_ setWithInt:currentChunkMarker_ withId:currentStandbyChunk_];
  for (jint j = currentChunkMarker_ - 1; j >= 0; --j)
#line 200
  (void) [chunks_ removeWithInt:j];
}


#line 208
- (jint)go {
  
#line 209
  return [self goWithBoolean:NO];
}


#line 218
- (jint)goWithBoolean:(jboolean)simulate {
  
#line 219
  jboolean dirty = NO;
  ComItextpdfTextPdfPdfContentByte *graphics = nil;
  if (text_ != nil) {
    graphics = [text_ getDuplicate];
  }
  else if (!simulate)
#line 225
  @throw [[JavaLangNullPointerException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"verticaltext.go.with.simulate.eq.eq.false.and.text.eq.eq.null" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  jint status = 0;
  for (; ; ) {
    if (maxLines_ <= 0) {
      status = ComItextpdfTextPdfVerticalText_NO_MORE_COLUMN;
      if ([((JavaUtilArrayList *) nil_chk(chunks_)) isEmpty])
#line 231
      status |= ComItextpdfTextPdfVerticalText_NO_MORE_TEXT;
      break;
    }
    if ([((JavaUtilArrayList *) nil_chk(chunks_)) isEmpty]) {
      status = ComItextpdfTextPdfVerticalText_NO_MORE_TEXT;
      break;
    }
    ComItextpdfTextPdfPdfLine *line = [self createLineWithFloat:height_];
    if (!simulate && !dirty) {
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) beginText];
      dirty = YES;
    }
    [self shortenChunkArray];
    if (!simulate) {
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) setTextMatrixWithFloat:startX_ withFloat:startY_ - [((ComItextpdfTextPdfPdfLine *) nil_chk(line)) indentLeft]];
      [self writeLineWithComItextpdfTextPdfPdfLine:line withComItextpdfTextPdfPdfContentByte:text_ withComItextpdfTextPdfPdfContentByte:graphics];
    }
    --maxLines_;
    startX_ -= leading_;
  }
  if (dirty) {
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text_)) endText];
    [text_ addWithComItextpdfTextPdfPdfContentByte:graphics];
  }
  return status;
}


#line 260
- (void)writeLineWithComItextpdfTextPdfPdfLine:(ComItextpdfTextPdfPdfLine *)line
          withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)text
          withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)graphics {
  
#line 261
  ComItextpdfTextPdfPdfFont *currentFont = nil;
  ComItextpdfTextPdfPdfChunk *chunk;
  for (id<JavaUtilIterator> j = [((ComItextpdfTextPdfPdfLine *) nil_chk(line)) iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
    chunk = [j next];
    
#line 266
    if (![((ComItextpdfTextPdfPdfChunk *) nil_chk(chunk)) isImage] && [((ComItextpdfTextPdfPdfFont *) nil_chk([chunk font])) compareToWithId:currentFont] != 0) {
      currentFont = [chunk font];
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) setFontAndSizeWithComItextpdfTextPdfBaseFont:[((ComItextpdfTextPdfPdfFont *) nil_chk(currentFont)) getFont] withFloat:[currentFont size]];
    }
    IOSObjectArray *textRender = (IOSObjectArray *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_TEXTRENDERMODE_()], [IOSObjectArray class]);
    jint tr = 0;
    jfloat strokeWidth = 1;
    ComItextpdfTextBaseColor *color = [chunk color];
    ComItextpdfTextBaseColor *strokeColor = nil;
    if (textRender != nil) {
      tr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(textRender, 0), [JavaLangInteger class])))) intValue] & 3;
      if (tr != ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL)
#line 278
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) setTextRenderingModeWithInt:tr];
      if (tr == ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_STROKE || tr == ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE) {
        strokeWidth = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(textRender, 1), [JavaLangFloat class])))) floatValue];
        if (strokeWidth != 1)
#line 282
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) setLineWidthWithFloat:strokeWidth];
        strokeColor = (ComItextpdfTextBaseColor *) check_class_cast(IOSObjectArray_Get(textRender, 2), [ComItextpdfTextBaseColor class]);
        if (strokeColor == nil)
#line 285
        strokeColor = color;
        if (strokeColor != nil)
#line 287
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) setColorStrokeWithComItextpdfTextBaseColor:strokeColor];
      }
    }
    
#line 291
    JavaLangFloat *charSpace = (JavaLangFloat *) check_class_cast([chunk getAttributeWithNSString:ComItextpdfTextChunk_get_CHAR_SPACING_()], [JavaLangFloat class]);
    
#line 293
    if (charSpace != nil && ![((JavaLangFloat *) nil_chk(curCharSpace_)) isEqual:charSpace]) {
      curCharSpace_ = [JavaLangFloat valueOfWithFloat:[charSpace floatValue]];
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) setCharacterSpacingWithFloat:[curCharSpace_ floatValue]];
    }
    if (color != nil)
#line 298
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) setColorFillWithComItextpdfTextBaseColor:color];
    
#line 300
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(text)) showTextWithNSString:[chunk description]];
    
#line 302
    if (color != nil)
#line 303
    [text resetRGBColorFill];
    if (tr != ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL)
#line 305
    [text setTextRenderingModeWithInt:ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL];
    if (strokeColor != nil)
#line 307
    [text resetRGBColorStroke];
    if (strokeWidth != 1)
#line 309
    [text setLineWidthWithFloat:1];
  }
}


#line 317
- (void)setOriginWithFloat:(jfloat)startX
                 withFloat:(jfloat)startY {
  
#line 318
  self->startX_ = startX;
  self->startY_ = startY;
}


#line 326
- (jfloat)getOriginX {
  
#line 327
  return startX_;
}


#line 333
- (jfloat)getOriginY {
  
#line 334
  return startY_;
}


#line 341
- (jint)getMaxLines {
  
#line 342
  return maxLines_;
}


#line 348
- (void)setMaxLinesWithInt:(jint)maxLines {
  
#line 349
  self->maxLines_ = maxLines;
}


#line 355
- (jfloat)getHeight {
  
#line 356
  return height_;
}


#line 362
- (void)setHeightWithFloat:(jfloat)height {
  
#line 363
  self->height_ = height;
}


#line 370
- (void)setAlignmentWithInt:(jint)alignment {
  
#line 371
  self->alignment_ = alignment;
}


#line 378
- (jint)getAlignment {
  
#line 379
  return alignment_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfVerticalText *)other {
  [super copyAllFieldsTo:other];
  other->alignment_ = alignment_;
  other->chunks_ = chunks_;
  other->curCharSpace_ = curCharSpace_;
  other->currentChunkMarker_ = currentChunkMarker_;
  other->currentStandbyChunk_ = currentStandbyChunk_;
  other->height_ = height_;
  other->leading_ = leading_;
  other->maxLines_ = maxLines_;
  other->splittedChunkText_ = splittedChunkText_;
  other->startX_ = startX_;
  other->startY_ = startY_;
  other->text_ = text_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfContentByte:", "VerticalText", NULL, 0x1, NULL },
    { "addTextWithComItextpdfTextPhrase:", "addText", "V", 0x1, NULL },
    { "addTextWithComItextpdfTextChunk:", "addText", "V", 0x1, NULL },
    { "setVerticalLayoutWithFloat:withFloat:withFloat:withInt:withFloat:", "setVerticalLayout", "V", 0x1, NULL },
    { "setLeadingWithFloat:", "setLeading", "V", 0x1, NULL },
    { "getLeading", NULL, "F", 0x1, NULL },
    { "createLineWithFloat:", "createLine", "Lcom.itextpdf.text.pdf.PdfLine;", 0x4, NULL },
    { "shortenChunkArray", NULL, "V", 0x4, NULL },
    { "go", NULL, "I", 0x1, NULL },
    { "goWithBoolean:", "go", "I", 0x1, NULL },
    { "writeLineWithComItextpdfTextPdfPdfLine:withComItextpdfTextPdfPdfContentByte:withComItextpdfTextPdfPdfContentByte:", "writeLine", "V", 0x0, NULL },
    { "setOriginWithFloat:withFloat:", "setOrigin", "V", 0x1, NULL },
    { "getOriginX", NULL, "F", 0x1, NULL },
    { "getOriginY", NULL, "F", 0x1, NULL },
    { "getMaxLines", NULL, "I", 0x1, NULL },
    { "setMaxLinesWithInt:", "setMaxLines", "V", 0x1, NULL },
    { "getHeight", NULL, "F", 0x1, NULL },
    { "setHeightWithFloat:", "setHeight", "V", 0x1, NULL },
    { "setAlignmentWithInt:", "setAlignment", "V", 0x1, NULL },
    { "getAlignment", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NO_MORE_TEXT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfVerticalText_NO_MORE_TEXT },
    { "NO_MORE_COLUMN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfVerticalText_NO_MORE_COLUMN },
    { "chunks_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "text_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
    { "alignment_", NULL, 0x4, "I", NULL,  },
    { "currentChunkMarker_", NULL, 0x4, "I", NULL,  },
    { "currentStandbyChunk_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfChunk;", NULL,  },
    { "splittedChunkText_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "leading_", NULL, 0x4, "F", NULL,  },
    { "startX_", NULL, 0x4, "F", NULL,  },
    { "startY_", NULL, 0x4, "F", NULL,  },
    { "maxLines_", NULL, 0x4, "I", NULL,  },
    { "height_", NULL, 0x4, "F", NULL,  },
    { "curCharSpace_", NULL, 0x2, "Ljava.lang.Float;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfVerticalText = { "VerticalText", "com.itextpdf.text.pdf", NULL, 0x1, 20, methods, 14, fields, 0, NULL};
  return &_ComItextpdfTextPdfVerticalText;
}

@end
