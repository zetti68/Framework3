//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfNameTree.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfNameTree.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNameTree.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/io/IOException.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"


#line 55
@implementation ComItextpdfTextPdfPdfNameTree


#line 71
+ (ComItextpdfTextPdfPdfDictionary *)writeTreeWithJavaUtilHashMap:(JavaUtilHashMap *)items
                                  withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 72
  if ([((JavaUtilHashMap *) nil_chk(items)) isEmpty])
#line 73
  return nil;
  IOSObjectArray *names = [IOSObjectArray arrayWithLength:[items size] type:[IOSClass classWithClass:[NSString class]]];
  names = [((id<JavaUtilSet>) nil_chk([items keySet])) toArrayWithNSObjectArray:names];
  [JavaUtilArrays sortWithNSObjectArray:names];
  if (((IOSObjectArray *) nil_chk(names))->size_ <= ComItextpdfTextPdfPdfNameTree_leafSize) {
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    ComItextpdfTextPdfPdfArray *ar = [[ComItextpdfTextPdfPdfArray alloc] init];
    for (jint k = 0; k < names->size_; ++k) {
      [ar addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(names, k) withNSString:nil]];
      [ar addWithComItextpdfTextPdfPdfObject:[items getWithId:IOSObjectArray_Get(names, k)]];
    }
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_() withComItextpdfTextPdfPdfObject:ar];
    return dic;
  }
  jint skip = ComItextpdfTextPdfPdfNameTree_leafSize;
  IOSObjectArray *kids = [IOSObjectArray arrayWithLength:(names->size_ + ComItextpdfTextPdfPdfNameTree_leafSize - 1) / ComItextpdfTextPdfPdfNameTree_leafSize type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfIndirectReference class]]];
  for (jint k = 0; k < kids->size_; ++k) {
    jint offset = k * ComItextpdfTextPdfPdfNameTree_leafSize;
    jint end = [JavaLangMath minWithInt:offset + ComItextpdfTextPdfPdfNameTree_leafSize withInt:names->size_];
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] init];
    [arr addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(names, offset) withNSString:nil]];
    [arr addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(names, end - 1) withNSString:nil]];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LIMITS_() withComItextpdfTextPdfPdfObject:arr];
    arr = [[ComItextpdfTextPdfPdfArray alloc] init];
    for (; offset < end; ++offset) {
      [arr addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(names, offset) withNSString:nil]];
      [arr addWithComItextpdfTextPdfPdfObject:[items getWithId:IOSObjectArray_Get(names, offset)]];
    }
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_() withComItextpdfTextPdfPdfObject:arr];
    IOSObjectArray_Set(kids, k, [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:dic])) getIndirectReference]);
  }
  jint top = kids->size_;
  while (YES) {
    if (top <= ComItextpdfTextPdfPdfNameTree_leafSize) {
      ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] init];
      for (jint k = 0; k < top; ++k)
#line 110
      [arr addWithComItextpdfTextPdfPdfObject:IOSObjectArray_Get(kids, k)];
      ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:arr];
      return dic;
    }
    skip *= ComItextpdfTextPdfPdfNameTree_leafSize;
    jint tt = (names->size_ + skip - 1) / skip;
    for (jint k = 0; k < tt; ++k) {
      jint offset = k * ComItextpdfTextPdfPdfNameTree_leafSize;
      jint end = [JavaLangMath minWithInt:offset + ComItextpdfTextPdfPdfNameTree_leafSize withInt:top];
      ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] init];
      [arr addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(names, k * skip) withNSString:nil]];
      [arr addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(names, [JavaLangMath minWithInt:(k + 1) * skip withInt:names->size_] - 1) withNSString:nil]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LIMITS_() withComItextpdfTextPdfPdfObject:arr];
      arr = [[ComItextpdfTextPdfPdfArray alloc] init];
      for (; offset < end; ++offset) {
        [arr addWithComItextpdfTextPdfPdfObject:IOSObjectArray_Get(kids, offset)];
      }
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:arr];
      IOSObjectArray_Set(kids, k, [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:dic])) getIndirectReference]);
    }
    top = tt;
  }
}


#line 136
+ (ComItextpdfTextPdfPdfString *)iterateItemsWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic
                                                             withJavaUtilHashMap:(JavaUtilHashMap *)items
                                                 withComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *)leftOverString {
  
#line 137
  ComItextpdfTextPdfPdfArray *nn = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_()]], [ComItextpdfTextPdfPdfArray class]);
  if (nn != nil) {
    for (jint k = 0; k < [nn size]; ++k) {
      ComItextpdfTextPdfPdfString *s;
      if (leftOverString == nil)
#line 142
      s = (ComItextpdfTextPdfPdfString *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[nn getPdfObjectWithInt:k++]], [ComItextpdfTextPdfPdfString class]);
      else {
        
#line 145
        s = leftOverString;
        leftOverString = nil;
      }
      if (k < [nn size])
#line 149
      (void) [((JavaUtilHashMap *) nil_chk(items)) putWithId:[ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:[((ComItextpdfTextPdfPdfString *) nil_chk(s)) getBytes] withNSString:nil] withId:[nn getPdfObjectWithInt:k]];
      else
#line 151
      return s;
    }
  }
  else
#line 153
  if ((nn = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()]], [ComItextpdfTextPdfPdfArray class])) != nil) {
    for (jint k = 0; k < [((ComItextpdfTextPdfPdfArray *) nil_chk(nn)) size]; ++k) {
      ComItextpdfTextPdfPdfDictionary *kid = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[nn getPdfObjectWithInt:k]], [ComItextpdfTextPdfPdfDictionary class]);
      leftOverString = [ComItextpdfTextPdfPdfNameTree iterateItemsWithComItextpdfTextPdfPdfDictionary:kid withJavaUtilHashMap:items withComItextpdfTextPdfPdfString:leftOverString];
    }
  }
  return nil;
}


#line 162
+ (JavaUtilHashMap *)readTreeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic {
  
#line 163
  JavaUtilHashMap *items = [[JavaUtilHashMap alloc] init];
  if (dic != nil)
#line 165
  (void) [ComItextpdfTextPdfPdfNameTree iterateItemsWithComItextpdfTextPdfPdfDictionary:dic withJavaUtilHashMap:items withComItextpdfTextPdfPdfString:nil];
  return items;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "writeTreeWithJavaUtilHashMap:withComItextpdfTextPdfPdfWriter:", "writeTree", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x9, "Ljava.io.IOException;" },
    { "iterateItemsWithComItextpdfTextPdfPdfDictionary:withJavaUtilHashMap:withComItextpdfTextPdfPdfString:", "iterateItems", "Lcom.itextpdf.text.pdf.PdfString;", 0xa, NULL },
    { "readTreeWithComItextpdfTextPdfPdfDictionary:", "readTree", "Ljava.util.HashMap;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "leafSize_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfNameTree_leafSize },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfNameTree = { "PdfNameTree", "com.itextpdf.text.pdf", NULL, 0x1, 4, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfNameTree;
}

@end
