//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TrueTypeFontUnicode.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TrueTypeFontUnicode.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/TrueTypeFont.h"
#include "com/itextpdf/text/pdf/TrueTypeFontUnicode.h"
#include "com/itextpdf/text/pdf/TtfUnicodeWriter.h"
#include "com/itextpdf/text/pdf/fonts/otf/GlyphSubstitutionTableReader.h"
#include "com/itextpdf/text/pdf/fonts/otf/Language.h"
#include "java/io/IOException.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfTrueTypeFontUnicode_initialized = NO;


#line 66
@implementation ComItextpdfTextPdfTrueTypeFontUnicode

id<JavaUtilList> ComItextpdfTextPdfTrueTypeFontUnicode_SUPPORTED_LANGUAGES_FOR_OTF_;
IOSByteArray * ComItextpdfTextPdfTrueTypeFontUnicode_rotbits_;


#line 84
- (instancetype)initWithNSString:(NSString *)ttFile
                    withNSString:(NSString *)enc
                     withBoolean:(jboolean)emb
                   withByteArray:(IOSByteArray *)ttfAfm
                     withBoolean:(jboolean)forceRead {
  if (self = [super init]) {
    
#line 85
    NSString *nameBase = [ComItextpdfTextPdfBaseFont getBaseNameWithNSString:ttFile];
    
#line 86
    NSString *ttcName = [ComItextpdfTextPdfTrueTypeFont getTTCNameWithNSString:nameBase];
    
#line 87
    if (((jint) [((NSString *) nil_chk(nameBase)) length]) < ((jint) [((NSString *) nil_chk(ttFile)) length])) {
      style_ = [ttFile substring:((jint) [nameBase length])];
    }
    
#line 90
    encoding_ = enc;
    
#line 91
    embedded_ = emb;
    
#line 92
    fileName_ = ttcName;
    
#line 93
    ttcIndex_ = @"";
    
#line 94
    if (((jint) [((NSString *) nil_chk(ttcName)) length]) < ((jint) [nameBase length]))
#line 95
    ttcIndex_ = [nameBase substring:((jint) [ttcName length]) + 1];
    
#line 96
    fontType_ = ComItextpdfTextPdfBaseFont_FONT_TYPE_TTUNI;
    
#line 97
    if (([((NSString *) nil_chk([((NSString *) nil_chk(fileName_)) lowercaseString])) hasSuffix:@".ttf"] || [((NSString *) nil_chk([fileName_ lowercaseString])) hasSuffix:@".otf"] || [((NSString *) nil_chk([fileName_ lowercaseString])) hasSuffix:@".ttc"]) && ([((NSString *) nil_chk(enc)) isEqual:ComItextpdfTextPdfBaseFont_get_IDENTITY_H_()] || [enc isEqual:ComItextpdfTextPdfBaseFont_get_IDENTITY_V_()]) && emb) {
      [self processWithByteArray:ttfAfm withBoolean:forceRead];
      if (((ComItextpdfTextPdfTrueTypeFont_WindowsMetrics *) nil_chk(os_2_))->fsType_ == 2)
#line 100
      @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.cannot.be.embedded.due.to.licensing.restrictions" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$", fileName_, style_) } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
      
#line 102
      if ((cmap31_ == nil && !fontSpecific_) || (cmap10_ == nil && fontSpecific_))
#line 103
      directTextToByte_ = YES;
      
#line 105
      if (fontSpecific_) {
        fontSpecific_ = NO;
        NSString *tempEncoding = encoding_;
        encoding_ = @"";
        [self createEncoding];
        encoding_ = tempEncoding;
        fontSpecific_ = YES;
      }
    }
    else
#line 115
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.2.is.not.a.ttf.font.file" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fileName_, style_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
    
#line 116
    vertical_ = [((NSString *) nil_chk(enc)) hasSuffix:@"V"];
  }
  return self;
}


#line 120
- (void)processWithByteArray:(IOSByteArray *)ttfAfm
                 withBoolean:(jboolean)preload {
  
#line 121
  [super processWithByteArray:ttfAfm withBoolean:preload];
}


#line 131
- (jint)getWidthWithInt:(jint)char1 {
  
#line 132
  if (vertical_)
#line 133
  return 1000;
  if (fontSpecific_) {
    if ((char1 & (jint) 0xff00) == 0 || (char1 & (jint) 0xff00) == (jint) 0xf000)
#line 136
    return [self getRawWidthWithInt:char1 & (jint) 0xff withNSString:nil];
    else
#line 138
    return 0;
  }
  else {
    return [self getRawWidthWithInt:char1 withNSString:encoding_];
  }
}


#line 151
- (jint)getWidthWithNSString:(NSString *)text {
  
#line 152
  if (vertical_)
#line 153
  return ((jint) [((NSString *) nil_chk(text)) length]) * 1000;
  jint total = 0;
  if (fontSpecific_) {
    IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
    jint len = ((IOSCharArray *) nil_chk(cc))->size_;
    for (jint k = 0; k < len; ++k) {
      jchar c = IOSCharArray_Get(cc, k);
      if ((c & (jint) 0xff00) == 0 || (c & (jint) 0xff00) == (jint) 0xf000)
#line 161
      total += [self getRawWidthWithInt:c & (jint) 0xff withNSString:nil];
    }
  }
  else {
    jint len = ((jint) [((NSString *) nil_chk(text)) length]);
    for (jint k = 0; k < len; ++k) {
      if ([ComItextpdfTextUtilities isSurrogatePairWithNSString:text withInt:k]) {
        total += [self getRawWidthWithInt:[ComItextpdfTextUtilities convertToUtf32WithNSString:text withInt:k] withNSString:encoding_];
        ++k;
      }
      else
#line 172
      total += [self getRawWidthWithInt:[text charAtWithInt:k] withNSString:encoding_];
    }
  }
  return total;
}

- (ComItextpdfTextPdfPdfStream *)getToUnicodeWithNSObjectArray:(IOSObjectArray *)metrics {
  
#line 184
  if (((IOSObjectArray *) nil_chk(metrics))->size_ == 0)
#line 185
  return nil;
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] initWithNSString:@"/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo\n<< /Registry (TTX+0)\n/Ordering (T42UV)\n/Supplement 0\n>> def\n/CMapName /TTX+0 def\n/CMapType 2 def\n1 begincodespacerange\n<0000><FFFF>\nendcodespacerange\n"];
  
#line 200
  jint size = 0;
  for (jint k = 0; k < metrics->size_; ++k) {
    if (size == 0) {
      if (k != 0) {
        (void) [buf appendWithNSString:@"endbfrange\n"];
      }
      size = [JavaLangMath minWithInt:100 withInt:metrics->size_ - k];
      (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithInt:size])) appendWithNSString:@" beginbfrange\n"];
    }
    --size;
    IOSIntArray *metric = (IOSIntArray *) check_class_cast(IOSObjectArray_Get(metrics, k), [IOSIntArray class]);
    NSString *fromTo = [ComItextpdfTextPdfTrueTypeFontUnicode toHexWithInt:IOSIntArray_Get(nil_chk(metric), 0)];
    (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:fromTo])) appendWithNSString:fromTo])) appendWithNSString:[ComItextpdfTextPdfTrueTypeFontUnicode toHexWithInt:IOSIntArray_Get(metric, 2)]])) appendWithChar:0x000a];
  }
  (void) [buf appendWithNSString:@"endbfrange\nendcmap\nCMapName currentdict /CMap defineresource pop\nend end\n"];
  
#line 219
  NSString *s = [buf description];
  ComItextpdfTextPdfPdfStream *stream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[ComItextpdfTextPdfPdfEncodings convertToBytesWithNSString:s withNSString:nil]];
  [stream flateCompressWithInt:compressionLevel_];
  return stream;
}


#line 225
+ (NSString *)toHex4WithInt:(jint)n {
  
#line 226
  NSString *s = JreStrcat("$$", @"0000", [JavaLangInteger toHexStringWithInt:n]);
  return [s substring:((jint) [s length]) - 4];
}


#line 234
+ (NSString *)toHexWithInt:(jint)n {
  
#line 235
  if (n < (jint) 0x10000)
#line 236
  return JreStrcat("C$C", '<', [ComItextpdfTextPdfTrueTypeFontUnicode toHex4WithInt:n], '>');
  n -= (jint) 0x10000;
  jint high = n / (jint) 0x400 + (jint) 0xd800;
  jint low = n % (jint) 0x400 + (jint) 0xdc00;
  return JreStrcat("$$$$", @"[<", [ComItextpdfTextPdfTrueTypeFontUnicode toHex4WithInt:high], [ComItextpdfTextPdfTrueTypeFontUnicode toHex4WithInt:low], @">]");
}


#line 249
- (ComItextpdfTextPdfPdfDictionary *)getCIDFontType2WithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)fontDescriptor
                                                                                  withNSString:(NSString *)subsetPrefix
                                                                             withNSObjectArray:(IOSObjectArray *)metrics {
  
#line 250
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  
#line 252
  if (cff_) {
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CIDFONTTYPE0_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$C$", subsetPrefix, fontName_, '-', encoding_)]];
  }
  else {
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CIDFONTTYPE2_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$", subsetPrefix, fontName_)]];
  }
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTDESCRIPTOR_() withComItextpdfTextPdfPdfObject:fontDescriptor];
  if (!cff_)
#line 262
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CIDTOGIDMAP_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_IDENTITY_()];
  ComItextpdfTextPdfPdfDictionary *cdic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REGISTRY_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"Adobe"]];
  [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDERING_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"Identity"]];
  [cdic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUPPLEMENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CIDSYSTEMINFO_() withComItextpdfTextPdfPdfObject:cdic];
  if (!vertical_) {
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DW_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:1000]];
    JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] initWithNSString:@"["];
    jint lastNumber = -10;
    jboolean firstTime = YES;
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(metrics))->size_; ++k) {
      IOSIntArray *metric = (IOSIntArray *) check_class_cast(IOSObjectArray_Get(metrics, k), [IOSIntArray class]);
      if (IOSIntArray_Get(nil_chk(metric), 1) == 1000)
#line 276
      continue;
      jint m = IOSIntArray_Get(metric, 0);
      if (m == lastNumber + 1) {
        (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithChar:' '])) appendWithInt:IOSIntArray_Get(metric, 1)];
      }
      else {
        if (!firstTime) {
          (void) [buf appendWithChar:']'];
        }
        firstTime = NO;
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithInt:m])) appendWithChar:'['])) appendWithInt:IOSIntArray_Get(metric, 1)];
      }
      lastNumber = m;
    }
    if ([buf sequenceLength] > 1) {
      (void) [buf appendWithNSString:@"]]"];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_W_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:[buf description]]];
    }
  }
  return dic;
}


#line 304
- (ComItextpdfTextPdfPdfDictionary *)getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)descendant
                                                                                  withNSString:(NSString *)subsetPrefix
                                                    withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)toUnicode {
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  
#line 307
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TYPE0_()];
  
#line 309
  if (cff_)
#line 310
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$C$", subsetPrefix, fontName_, '-', encoding_)]];
  else
#line 313
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$$", subsetPrefix, fontName_)]];
  
#line 315
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:encoding_]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENDANTFONTS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:descendant]];
  if (toUnicode != nil)
#line 318
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TOUNICODE_() withComItextpdfTextPdfPdfObject:toUnicode];
  return dic;
}


#line 327
- (jint)compareWithId:(IOSIntArray *)o1
               withId:(IOSIntArray *)o2 {
  
#line 328
  jint m1 = IOSIntArray_Get(nil_chk(o1), 0);
  jint m2 = IOSIntArray_Get(nil_chk(o2), 0);
  if (m1 < m2)
#line 331
  return -1;
  if (m1 == m2)
#line 333
  return 0;
  return 1;
}


#line 347
- (void)writeFontWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                               withNSObjectArray:(IOSObjectArray *)params {
  
#line 348
  [((ComItextpdfTextPdfTtfUnicodeWriter *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getTtfUnicodeWriter])) writeFontWithComItextpdfTextPdfTrueTypeFontUnicode:self withComItextpdfTextPdfPdfIndirectReference:ref withNSObjectArray:params withByteArray:ComItextpdfTextPdfTrueTypeFontUnicode_rotbits_];
}


#line 357
- (ComItextpdfTextPdfPdfStream *)getFullFontStream {
  
#line 358
  if (cff_) {
    return [[ComItextpdfTextPdfBaseFont_StreamFont alloc] initWithByteArray:[self readCffFont] withNSString:@"CIDFontType0C" withInt:compressionLevel_];
  }
  return [super getFullFontStream];
}


#line 369
- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  
#line 370
  return nil;
}


#line 374
- (IOSByteArray *)convertToBytesWithInt:(jint)char1 {
  return nil;
}


#line 383
- (IOSIntArray *)getMetricsTTWithInt:(jint)c {
  
#line 384
  if (cmapExt_ != nil)
#line 385
  return [cmapExt_ getWithId:[JavaLangInteger valueOfWithInt:c]];
  JavaUtilHashMap *map = nil;
  if (fontSpecific_)
#line 388
  map = cmap10_;
  else
#line 390
  map = cmap31_;
  if (map == nil)
#line 392
  return nil;
  if (fontSpecific_) {
    if ((c & (jint) 0xffffff00) == 0 || (c & (jint) 0xffffff00) == (jint) 0xf000)
#line 395
    return [((JavaUtilHashMap *) nil_chk(map)) getWithId:[JavaLangInteger valueOfWithInt:c & (jint) 0xff]];
    else
#line 397
    return nil;
  }
  else
#line 400
  return [((JavaUtilHashMap *) nil_chk(map)) getWithId:[JavaLangInteger valueOfWithInt:c]];
}


#line 410
- (jboolean)charExistsWithInt:(jint)c {
  
#line 411
  return [self getMetricsTTWithInt:c] != nil;
}


#line 422
- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance {
  
#line 423
  IOSIntArray *m = [self getMetricsTTWithInt:c];
  if (m == nil)
#line 425
  return NO;
  *IOSIntArray_GetRef(nil_chk(m), 1) = advance;
  return YES;
}


#line 431
- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  
#line 432
  if (bboxes_ == nil)
#line 433
  return nil;
  IOSIntArray *m = [self getMetricsTTWithInt:c];
  if (m == nil)
#line 436
  return nil;
  return IOSObjectArray_Get(nil_chk(bboxes_), IOSIntArray_Get(nil_chk(m), 0));
}


#line 440
- (id<JavaUtilMap>)getGlyphSubstitutionMap {
  
#line 441
  return glyphSubstitutionMap_;
}


#line 444
- (ComItextpdfTextPdfFontsOtfLanguageEnum *)getSupportedLanguage {
  
#line 445
  return supportedLanguage_;
}


#line 448
- (void)readGsubTable {
  
#line 449
  if ([((JavaUtilHashMap *) nil_chk(tables_)) getWithId:@"GSUB"] != nil) {
    
#line 451
    id<JavaUtilMap> glyphToCharacterMap = [[JavaUtilHashMap alloc] initWithInt:[((JavaUtilHashMap *) nil_chk(cmap31_)) size]];
    
#line 453
    for (JavaLangInteger * __strong charCode in nil_chk([cmap31_ keySet])) {
      jchar c = (jchar) [((JavaLangInteger *) nil_chk(charCode)) intValue];
      jint glyphCode = IOSIntArray_Get(nil_chk([cmap31_ getWithId:charCode]), 0);
      (void) [glyphToCharacterMap putWithId:[JavaLangInteger valueOfWithInt:glyphCode] withId:[JavaLangCharacter valueOfWithChar:c]];
    }
    
#line 459
    ComItextpdfTextPdfFontsOtfGlyphSubstitutionTableReader *gsubReader = [[ComItextpdfTextPdfFontsOtfGlyphSubstitutionTableReader alloc] initWithNSString:
#line 460
    fileName_ withInt:IOSIntArray_Get(nil_chk([tables_ getWithId:@"GSUB"]), 0) withJavaUtilMap:glyphToCharacterMap withIntArray:glyphWidthsByIndex_];
    
#line 462
    @try {
      [gsubReader read];
      supportedLanguage_ = [gsubReader getSupportedLanguage];
      
#line 466
      if ([((id<JavaUtilList>) nil_chk(ComItextpdfTextPdfTrueTypeFontUnicode_SUPPORTED_LANGUAGES_FOR_OTF_)) containsWithId:supportedLanguage_]) {
        glyphSubstitutionMap_ = [gsubReader getGlyphSubstitutionMap];
      }
    }
    @catch (
#line 488
    JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfTrueTypeFontUnicode *)other {
  [super copyAllFieldsTo:other];
  other->glyphSubstitutionMap_ = glyphSubstitutionMap_;
  other->supportedLanguage_ = supportedLanguage_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfTrueTypeFontUnicode class]) {
    ComItextpdfTextPdfTrueTypeFontUnicode_SUPPORTED_LANGUAGES_FOR_OTF_ =
#line 68
    [JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ ComItextpdfTextPdfFontsOtfLanguageEnum_get_BENGALI() } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    ComItextpdfTextPdfTrueTypeFontUnicode_rotbits_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 337
      (jbyte) (jint) 0x80, (jbyte) (jint) 0x40, (jbyte) (jint) 0x20, (jbyte) (jint) 0x10, (jbyte) (jint) 0x08, (jbyte) (jint) 0x04, (jbyte) (jint) 0x02, (jbyte) (jint) 0x01 } count:8];
      ComItextpdfTextPdfTrueTypeFontUnicode_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withBoolean:withByteArray:withBoolean:", "TrueTypeFontUnicode", NULL, 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "processWithByteArray:withBoolean:", "process", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getWidthWithInt:", "getWidth", "I", 0x1, NULL },
    { "getWidthWithNSString:", "getWidth", "I", 0x1, NULL },
    { "getToUnicodeWithNSObjectArray:", "getToUnicode", "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, NULL },
    { "toHex4WithInt:", "toHex4", "Ljava.lang.String;", 0xa, NULL },
    { "toHexWithInt:", "toHex", "Ljava.lang.String;", 0x8, NULL },
    { "getCIDFontType2WithComItextpdfTextPdfPdfIndirectReference:withNSString:withNSObjectArray:", "getCIDFontType2", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:withNSString:withComItextpdfTextPdfPdfIndirectReference:", "getFontBaseType", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "compareWithIntArray:withIntArray:", "compare", "I", 0x1, NULL },
    { "writeFontWithComItextpdfTextPdfPdfWriter:withComItextpdfTextPdfPdfIndirectReference:withNSObjectArray:", "writeFont", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getFullFontStream", NULL, "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "convertToBytesWithNSString:", "convertToBytes", "[B", 0x1, NULL },
    { "convertToBytesWithInt:", "convertToBytes", "[B", 0x0, NULL },
    { "getMetricsTTWithInt:", "getMetricsTT", "[I", 0x1, NULL },
    { "charExistsWithInt:", "charExists", "Z", 0x1, NULL },
    { "setCharAdvanceWithInt:withInt:", "setCharAdvance", "Z", 0x1, NULL },
    { "getCharBBoxWithInt:", "getCharBBox", "[I", 0x1, NULL },
    { "getGlyphSubstitutionMap", NULL, "Ljava.util.Map;", 0x4, NULL },
    { "getSupportedLanguage", NULL, "Lcom.itextpdf.text.pdf.fonts.otf.Language;", 0x0, NULL },
    { "readGsubTable", NULL, "V", 0x2, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SUPPORTED_LANGUAGES_FOR_OTF_", NULL, 0x1a, "Ljava.util.List;", &ComItextpdfTextPdfTrueTypeFontUnicode_SUPPORTED_LANGUAGES_FOR_OTF_,  },
    { "glyphSubstitutionMap_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
    { "supportedLanguage_", NULL, 0x2, "Lcom.itextpdf.text.pdf.fonts.otf.Language;", NULL,  },
    { "rotbits_", NULL, 0x1a, "[B", &ComItextpdfTextPdfTrueTypeFontUnicode_rotbits_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfTrueTypeFontUnicode = { "TrueTypeFontUnicode", "com.itextpdf.text.pdf", NULL, 0x0, 21, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfTrueTypeFontUnicode;
}

@end
