//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/fonts/otf/OpenTypeFontTableReader.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/fonts/otf/OpenTypeFontTableReader.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/log/LoggerFactory.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/fonts/otf/FontReadingException.h"
#include "com/itextpdf/text/pdf/fonts/otf/Language.h"
#include "com/itextpdf/text/pdf/fonts/otf/OpenTypeFontTableReader.h"
#include "com/itextpdf/text/pdf/fonts/otf/TableHeader.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Short.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_initialized = NO;


#line 64
@implementation ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader

id<ComItextpdfTextLogLogger> ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_;


#line 74
- (instancetype)initWithNSString:(NSString *)fontFilePath
                         withInt:(jint)tableLocation {
  if (self = [super init]) {
    
#line 76
    self->rf_ = [[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:
#line 77
    [((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createBestSourceWithNSString:fontFilePath]];
    
#line 78
    self->tableLocation_ = tableLocation;
  }
  return self;
}


#line 81
- (ComItextpdfTextPdfFontsOtfLanguageEnum *)getSupportedLanguage {
  
#line 83
  IOSObjectArray *allLangs = [ComItextpdfTextPdfFontsOtfLanguageEnum values];
  
#line 85
  for (NSString * __strong supportedLang in nil_chk(supportedLanguages_)) {
    {
      IOSObjectArray *a__ =
#line 86
      allLangs;
      ComItextpdfTextPdfFontsOtfLanguageEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ComItextpdfTextPdfFontsOtfLanguageEnum * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComItextpdfTextPdfFontsOtfLanguageEnum *lang = *b__++;
        
#line 87
        if ([((ComItextpdfTextPdfFontsOtfLanguageEnum *) nil_chk(lang)) isSupportedWithNSString:supportedLang]) {
          return lang;
        }
      }
    }
  }
  @throw [[ComItextpdfTextPdfFontsOtfFontReadingException alloc] initWithNSString:JreStrcat("$@", @"Unsupported languages ", supportedLanguages_)];
}


#line 102
- (void)startReadingTable {
  
#line 103
  @try {
    ComItextpdfTextPdfFontsOtfTableHeader *header = [self readHeader];
    
#line 106
    [self readScriptListTableWithInt:tableLocation_ + ((ComItextpdfTextPdfFontsOtfTableHeader *) nil_chk(header))->scriptListOffset_];
    
#line 109
    [self readFeatureListTableWithInt:tableLocation_ + header->featureListOffset_];
    
#line 112
    [self readLookupListTableWithInt:tableLocation_ + header->lookupListOffset_];
  }
  @catch (
#line 113
  JavaIoIOException *e) {
    @throw [[ComItextpdfTextPdfFontsOtfFontReadingException alloc] initWithNSString:@"Error reading font file" withJavaLangException:e];
  }
}


#line 118
- (void)readSubTableWithInt:(jint)lookupType
                    withInt:(jint)subTableLocation {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 121
- (void)readLookupListTableWithInt:(jint)lookupListTableLocation {
  
#line 123
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:lookupListTableLocation];
  jint lookupCount = [rf_ readShort];
  
#line 126
  id<JavaUtilList> lookupTableOffsets = [[JavaUtilArrayList alloc] init];
  
#line 128
  for (jint i = 0; i < lookupCount; i++) {
    jint lookupTableOffset = [rf_ readShort];
    [lookupTableOffsets addWithId:[JavaLangInteger valueOfWithInt:lookupTableOffset]];
  }
  
#line 134
  for (jint i = 0; i < lookupCount; i++) {
    
#line 136
    jint lookupTableOffset = [((JavaLangInteger *) nil_chk([lookupTableOffsets getWithInt:i])) intValue];
    [self readLookupTableWithInt:lookupListTableLocation + lookupTableOffset];
  }
}


#line 142
- (void)readLookupTableWithInt:(jint)lookupTableLocation {
  
#line 143
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:lookupTableLocation];
  jint lookupType = [rf_ readShort];
  
#line 148
  [rf_ skipBytesWithInt:2];
  
#line 150
  jint subTableCount = [rf_ readShort];
  
#line 153
  id<JavaUtilList> subTableOffsets = [[JavaUtilArrayList alloc] init];
  
#line 155
  for (jint i = 0; i < subTableCount; i++) {
    jint subTableOffset = [rf_ readShort];
    [subTableOffsets addWithId:[JavaLangInteger valueOfWithInt:subTableOffset]];
  }
  
#line 160
  for (JavaLangInteger *boxed__ in subTableOffsets) {
    jint subTableOffset = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    [self readSubTableWithInt:lookupType withInt:lookupTableLocation + subTableOffset];
  }
}


#line 166
- (id<JavaUtilList>)readCoverageFormatWithInt:(jint)coverageLocation {
  
#line 168
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:coverageLocation];
  jint coverageFormat = [rf_ readShort];
  
#line 171
  id<JavaUtilList> glyphIds;
  
#line 173
  if (coverageFormat == 1) {
    jint glyphCount = [rf_ readShort];
    
#line 176
    glyphIds = [[JavaUtilArrayList alloc] initWithInt:glyphCount];
    
#line 178
    for (jint i = 0; i < glyphCount; i++) {
      jint coverageGlyphId = [rf_ readShort];
      [glyphIds addWithId:[JavaLangInteger valueOfWithInt:coverageGlyphId]];
    }
  }
  else if (coverageFormat == 2) {
    
#line 185
    jint rangeCount = [rf_ readShort];
    
#line 187
    glyphIds = [[JavaUtilArrayList alloc] init];
    
#line 189
    for (jint i = 0; i < rangeCount; i++) {
      [self readRangeRecordWithJavaUtilList:glyphIds];
    }
  }
  else {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:JreStrcat("$I", @"Invalid coverage format: ",
#line 195
    coverageFormat)];
  }
  
#line 198
  return [JavaUtilCollections unmodifiableListWithJavaUtilList:glyphIds];
}


#line 201
- (void)readRangeRecordWithJavaUtilList:(id<JavaUtilList>)glyphIds {
  
#line 202
  jint startGlyphId = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) readShort];
  jint endGlyphId = [rf_ readShort];
  
#line 205
  for (jint glyphId = startGlyphId; glyphId <= endGlyphId; glyphId++) {
    [((id<JavaUtilList>) nil_chk(glyphIds)) addWithId:[JavaLangInteger valueOfWithInt:glyphId]];
  }
}


#line 217
- (void)readScriptListTableWithInt:(jint)scriptListTableLocationOffset {
  
#line 219
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:scriptListTableLocationOffset];
  
#line 221
  jint scriptCount = [rf_ readShort];
  
#line 223
  id<JavaUtilMap> scriptRecords = [[JavaUtilHashMap alloc] initWithInt:
#line 224
  scriptCount];
  
#line 226
  for (jint i = 0; i < scriptCount; i++) {
    [self readScriptRecordWithInt:scriptListTableLocationOffset withJavaUtilMap:scriptRecords];
  }
  
#line 230
  id<JavaUtilList> supportedLanguages = [[JavaUtilArrayList alloc] initWithInt:scriptCount];
  
#line 232
  for (NSString * __strong scriptName in nil_chk([scriptRecords keySet])) {
    [self readScriptTableWithInt:[((JavaLangInteger *) nil_chk([scriptRecords getWithId:scriptName])) intValue]];
    [supportedLanguages addWithId:scriptName];
  }
  
#line 237
  self->supportedLanguages_ = [JavaUtilCollections unmodifiableListWithJavaUtilList:supportedLanguages];
}


#line 240
- (void)readScriptRecordWithInt:(jint)scriptListTableLocationOffset
                withJavaUtilMap:(id<JavaUtilMap>)scriptRecords {
  
#line 242
  NSString *scriptTag = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) readStringWithInt:4 withNSString:@"utf-8"];
  
#line 244
  jint scriptOffset = [rf_ readShort];
  
#line 246
  (void) [((id<JavaUtilMap>) nil_chk(scriptRecords)) putWithId:scriptTag withId:[JavaLangInteger valueOfWithInt:scriptListTableLocationOffset +
#line 247
  scriptOffset]];
}


#line 250
- (void)readScriptTableWithInt:(jint)scriptTableLocationOffset {
  
#line 252
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:scriptTableLocationOffset];
  jint defaultLangSys = [rf_ readShort];
  jint langSysCount = [rf_ readShort];
  
#line 256
  if (langSysCount > 0) {
    id<JavaUtilMap> langSysRecords = [[JavaUtilLinkedHashMap alloc] initWithInt:
#line 258
    langSysCount];
    
#line 260
    for (jint i = 0; i < langSysCount; i++) {
      [self readLangSysRecordWithJavaUtilMap:langSysRecords];
    }
    
#line 265
    for (NSString * __strong langSysTag in nil_chk([langSysRecords keySet])) {
      [self readLangSysTableWithInt:scriptTableLocationOffset + [((JavaLangInteger *) nil_chk(
#line 267
      [langSysRecords getWithId:langSysTag])) intValue]];
    }
  }
  
#line 272
  [self readLangSysTableWithInt:scriptTableLocationOffset + defaultLangSys];
}


#line 275
- (void)readLangSysRecordWithJavaUtilMap:(id<JavaUtilMap>)langSysRecords {
  
#line 277
  NSString *langSysTag = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) readStringWithInt:4 withNSString:@"utf-8"];
  jint langSys = [rf_ readShort];
  (void) [((id<JavaUtilMap>) nil_chk(langSysRecords)) putWithId:langSysTag withId:[JavaLangInteger valueOfWithInt:langSys]];
}


#line 282
- (void)readLangSysTableWithInt:(jint)langSysTableLocationOffset {
  
#line 284
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:langSysTableLocationOffset];
  jint lookupOrderOffset = [rf_ readShort];
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_)) debugWithNSString:JreStrcat("$I", @"lookupOrderOffset=", lookupOrderOffset)];
  jint reqFeatureIndex = [rf_ readShort];
  [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_ debugWithNSString:JreStrcat("$I", @"reqFeatureIndex=", reqFeatureIndex)];
  jint featureCount = [rf_ readShort];
  
#line 291
  id<JavaUtilList> featureListIndices = [[JavaUtilArrayList alloc] initWithInt:featureCount];
  for (jint i = 0; i < featureCount; i++) {
    [featureListIndices addWithId:[JavaLangShort valueOfWithShort:[rf_ readShort]]];
  }
  
#line 296
  [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_ debugWithNSString:JreStrcat("$@", @"featureListIndices=", featureListIndices)];
}


#line 300
- (void)readFeatureListTableWithInt:(jint)featureListTableLocationOffset {
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:featureListTableLocationOffset];
  jint featureCount = [rf_ readShort];
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_)) debugWithNSString:JreStrcat("$I", @"featureCount=", featureCount)];
  
#line 306
  id<JavaUtilMap> featureRecords = [[JavaUtilLinkedHashMap alloc] initWithInt:
#line 307
  featureCount];
  for (jint i = 0; i < featureCount; i++) {
    (void) [featureRecords putWithId:[rf_ readStringWithInt:4 withNSString:@"utf-8"] withId:[JavaLangShort valueOfWithShort:[rf_ readShort]]];
  }
  
#line 312
  for (NSString * __strong featureName in nil_chk([featureRecords keySet])) {
    [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_ debugWithNSString:JreStrcat("$$", @"*************featureName=", featureName)];
    [self readFeatureTableWithInt:featureListTableLocationOffset + [((JavaLangShort *) nil_chk(
#line 315
    [featureRecords getWithId:featureName])) shortValue]];
  }
}


#line 320
- (void)readFeatureTableWithInt:(jint)featureTableLocationOffset {
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:featureTableLocationOffset];
  jint featureParamsOffset = [rf_ readShort];
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_)) debugWithNSString:JreStrcat("$I", @"featureParamsOffset=", featureParamsOffset)];
  
#line 326
  jint lookupCount = [rf_ readShort];
  [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_ debugWithNSString:JreStrcat("$I", @"lookupCount=", lookupCount)];
  
#line 329
  id<JavaUtilList> lookupListIndices = [[JavaUtilArrayList alloc] initWithInt:lookupCount];
  for (jint i = 0; i < lookupCount; i++) {
    [lookupListIndices addWithId:[JavaLangShort valueOfWithShort:[rf_ readShort]]];
  }
}


#line 338
- (ComItextpdfTextPdfFontsOtfTableHeader *)readHeader {
  
#line 339
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:tableLocation_];
  
#line 341
  jint version_ = [rf_ readInt];
  
#line 343
  jint scriptListOffset = [rf_ readUnsignedShort];
  jint featureListOffset = [rf_ readUnsignedShort];
  jint lookupListOffset = [rf_ readUnsignedShort];
  
#line 352
  ComItextpdfTextPdfFontsOtfTableHeader *header = [[ComItextpdfTextPdfFontsOtfTableHeader alloc] initWithInt:version_ withInt:scriptListOffset withInt:
#line 353
  featureListOffset withInt:lookupListOffset];
  
#line 355
  return header;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader *)other {
  [super copyAllFieldsTo:other];
  other->rf_ = rf_;
  other->supportedLanguages_ = supportedLanguages_;
  other->tableLocation_ = tableLocation_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader class]) {
    ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_ =
#line 66
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:
#line 67
    [IOSClass classWithClass:[ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader class]]];
    ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "OpenTypeFontTableReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "getSupportedLanguage", NULL, "Lcom.itextpdf.text.pdf.fonts.otf.Language;", 0x1, "Lcom.itextpdf.text.pdf.fonts.otf.FontReadingException;" },
    { "startReadingTable", NULL, "V", 0x14, "Lcom.itextpdf.text.pdf.fonts.otf.FontReadingException;" },
    { "readSubTableWithInt:withInt:", "readSubTable", "V", 0x404, "Ljava.io.IOException;" },
    { "readLookupListTableWithInt:", "readLookupListTable", "V", 0x2, "Ljava.io.IOException;" },
    { "readLookupTableWithInt:", "readLookupTable", "V", 0x2, "Ljava.io.IOException;" },
    { "readCoverageFormatWithInt:", "readCoverageFormat", "Ljava.util.List;", 0x14, "Ljava.io.IOException;" },
    { "readRangeRecordWithJavaUtilList:", "readRangeRecord", "V", 0x2, "Ljava.io.IOException;" },
    { "readScriptListTableWithInt:", "readScriptListTable", "V", 0x2, "Ljava.io.IOException;" },
    { "readScriptRecordWithInt:withJavaUtilMap:", "readScriptRecord", "V", 0x2, "Ljava.io.IOException;" },
    { "readScriptTableWithInt:", "readScriptTable", "V", 0x2, "Ljava.io.IOException;" },
    { "readLangSysRecordWithJavaUtilMap:", "readLangSysRecord", "V", 0x2, "Ljava.io.IOException;" },
    { "readLangSysTableWithInt:", "readLangSysTable", "V", 0x2, "Ljava.io.IOException;" },
    { "readFeatureListTableWithInt:", "readFeatureListTable", "V", 0x2, "Ljava.io.IOException;" },
    { "readFeatureTableWithInt:", "readFeatureTable", "V", 0x2, "Ljava.io.IOException;" },
    { "readHeader", NULL, "Lcom.itextpdf.text.pdf.fonts.otf.TableHeader;", 0x2, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_", NULL, 0x1c, "Lcom.itextpdf.text.log.Logger;", &ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_LOG_,  },
    { "rf_", NULL, 0x14, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "tableLocation_", NULL, 0x14, "I", NULL,  },
    { "supportedLanguages_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader = { "OpenTypeFontTableReader", "com.itextpdf.text.pdf.fonts.otf", NULL, 0x401, 16, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader;
}

@end
