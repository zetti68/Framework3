//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/fonts/otf/GlyphSubstitutionTableReader.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/fonts/otf/GlyphSubstitutionTableReader.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/pdf/Glyph.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/fonts/otf/FontReadingException.h"
#include "com/itextpdf/text/pdf/fonts/otf/GlyphSubstitutionTableReader.h"
#include "com/itextpdf/text/pdf/fonts/otf/OpenTypeFontTableReader.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 68
@implementation ComItextpdfTextPdfFontsOtfGlyphSubstitutionTableReader


#line 74
- (instancetype)initWithNSString:(NSString *)fontFilePath
                         withInt:(jint)gsubTableLocation
                 withJavaUtilMap:(id<JavaUtilMap>)glyphToCharacterMap
                    withIntArray:(IOSIntArray *)glyphWidthsByIndex {
  if (self =
#line 76
  [super initWithNSString:fontFilePath withInt:gsubTableLocation]) {
    
#line 77
    self->glyphWidthsByIndex_ = glyphWidthsByIndex;
    
#line 78
    self->glyphToCharacterMap_ = glyphToCharacterMap;
  }
  return self;
}


#line 81
- (void)read {
  
#line 82
  rawLigatureSubstitutionMap_ = [[JavaUtilLinkedHashMap alloc] init];
  [self startReadingTable];
}


#line 86
- (id<JavaUtilMap>)getGlyphSubstitutionMap {
  
#line 87
  id<JavaUtilMap> glyphSubstitutionMap = [[JavaUtilLinkedHashMap alloc] init];
  
#line 89
  for (JavaLangInteger * __strong glyphIdToReplace in nil_chk([((id<JavaUtilMap>) nil_chk(rawLigatureSubstitutionMap_)) keySet])) {
    id<JavaUtilList> constituentGlyphs = [rawLigatureSubstitutionMap_ getWithId:glyphIdToReplace];
    JavaLangStringBuilder *chars = [[JavaLangStringBuilder alloc] initWithInt:[((id<JavaUtilList>) nil_chk(constituentGlyphs)) size]];
    
#line 93
    for (JavaLangInteger * __strong constituentGlyphId in constituentGlyphs) {
      (void) [chars appendWithNSString:[self getTextFromGlyphWithInt:[((JavaLangInteger *) nil_chk(constituentGlyphId)) intValue] withJavaUtilMap:glyphToCharacterMap_]];
    }
    
#line 97
    ComItextpdfTextPdfGlyph *glyph = [[ComItextpdfTextPdfGlyph alloc] initWithInt:[((JavaLangInteger *) nil_chk(glyphIdToReplace)) intValue] withInt:IOSIntArray_Get(nil_chk(glyphWidthsByIndex_), [glyphIdToReplace intValue]) withNSString:[chars description]];
    
#line 99
    (void) [glyphSubstitutionMap putWithId:glyph->chars_ withId:glyph];
  }
  
#line 102
  return [JavaUtilCollections unmodifiableMapWithJavaUtilMap:glyphSubstitutionMap];
}


#line 105
- (NSString *)getTextFromGlyphWithInt:(jint)glyphId
                      withJavaUtilMap:(id<JavaUtilMap>)glyphToCharacterMap {
  
#line 107
  JavaLangStringBuilder *chars = [[JavaLangStringBuilder alloc] initWithInt:1];
  
#line 109
  JavaLangCharacter *c = [((id<JavaUtilMap>) nil_chk(glyphToCharacterMap)) getWithId:[JavaLangInteger valueOfWithInt:glyphId]];
  
#line 111
  if (c == nil) {
    
#line 113
    id<JavaUtilList> constituentGlyphs = [((id<JavaUtilMap>) nil_chk(rawLigatureSubstitutionMap_)) getWithId:[JavaLangInteger valueOfWithInt:glyphId]];
    
#line 115
    if (constituentGlyphs == nil || [constituentGlyphs isEmpty]) {
      @throw [[ComItextpdfTextPdfFontsOtfFontReadingException alloc] initWithNSString:JreStrcat("$I", @"No corresponding character or simple glyphs found for GlyphID=", glyphId)];
    }
    
#line 119
    for (JavaLangInteger *boxed__ in nil_chk(constituentGlyphs)) {
      jint constituentGlyphId = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      
#line 120
      (void) [chars appendWithNSString:[self getTextFromGlyphWithInt:constituentGlyphId withJavaUtilMap:glyphToCharacterMap]];
    }
  }
  else {
    (void) [chars appendWithChar:[c charValue]];
  }
  
#line 127
  return [chars description];
}


#line 131
- (void)readSubTableWithInt:(jint)lookupType
                    withInt:(jint)subTableLocation {
  
#line 133
  if (lookupType == 1) {
    [self readSingleSubstitutionSubtableWithInt:subTableLocation];
  }
  else
#line 135
  if (lookupType == 4) {
    [self readLigatureSubstitutionSubtableWithInt:subTableLocation];
  }
  else {
    
#line 138
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$I$$", @"LookupType ", lookupType, @" is not yet handled for ", [[IOSClass classWithClass:[ComItextpdfTextPdfFontsOtfGlyphSubstitutionTableReader class]] getSimpleName])];
  }
}


#line 146
- (void)readSingleSubstitutionSubtableWithInt:(jint)subTableLocation {
  
#line 147
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:subTableLocation];
  
#line 149
  jint substFormat = [rf_ readShort];
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_())) debugWithNSString:JreStrcat("$I", @"substFormat=", substFormat)];
  
#line 152
  if (substFormat == 1) {
    jint coverage = [rf_ readShort];
    [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_() debugWithNSString:JreStrcat("$I", @"coverage=", coverage)];
    
#line 156
    jint deltaGlyphID = [rf_ readShort];
    [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_() debugWithNSString:JreStrcat("$I", @"deltaGlyphID=", deltaGlyphID)];
    
#line 159
    id<JavaUtilList> coverageGlyphIds = [self readCoverageFormatWithInt:subTableLocation + coverage];
    
#line 161
    for (JavaLangInteger *boxed__ in nil_chk(coverageGlyphIds)) {
      jint coverageGlyphId = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
      
#line 162
      jint substituteGlyphId = coverageGlyphId + deltaGlyphID;
      (void) [((id<JavaUtilMap>) nil_chk(rawLigatureSubstitutionMap_)) putWithId:[JavaLangInteger valueOfWithInt:substituteGlyphId] withId:[JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:coverageGlyphId] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  else
#line 165
  if (substFormat == 2) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"LookupType 1 :: substFormat 2 is not yet handled by ", [[IOSClass classWithClass:[ComItextpdfTextPdfFontsOtfGlyphSubstitutionTableReader class]] getSimpleName])];
  }
  else {
    
#line 168
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$I", @"Bad substFormat: ", substFormat)];
  }
}


#line 175
- (void)readLigatureSubstitutionSubtableWithInt:(jint)ligatureSubstitutionSubtableLocation {
  
#line 176
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:ligatureSubstitutionSubtableLocation];
  jint substFormat = [rf_ readShort];
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_())) debugWithNSString:JreStrcat("$I", @"substFormat=", substFormat)];
  
#line 180
  if (substFormat != 1) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"The expected SubstFormat is 1"];
  }
  
#line 184
  jint coverage = [rf_ readShort];
  [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_() debugWithNSString:JreStrcat("$I", @"coverage=", coverage)];
  
#line 187
  jint ligSetCount = [rf_ readShort];
  
#line 189
  id<JavaUtilList> ligatureOffsets = [[JavaUtilArrayList alloc] initWithInt:ligSetCount];
  
#line 191
  for (jint i = 0; i < ligSetCount; i++) {
    jint ligatureOffset = [rf_ readShort];
    [ligatureOffsets addWithId:[JavaLangInteger valueOfWithInt:ligatureOffset]];
  }
  
#line 196
  id<JavaUtilList> coverageGlyphIds = [self readCoverageFormatWithInt:ligatureSubstitutionSubtableLocation + coverage];
  
#line 198
  if (ligSetCount != [((id<JavaUtilList>) nil_chk(coverageGlyphIds)) size]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"According to the OpenTypeFont specifications, the coverage count should be equal to the no. of LigatureSetTables"];
  }
  
#line 202
  for (jint i = 0; i < ligSetCount; i++) {
    
#line 204
    jint coverageGlyphId = [((JavaLangInteger *) nil_chk([coverageGlyphIds getWithInt:i])) intValue];
    jint ligatureOffset = [((JavaLangInteger *) nil_chk([ligatureOffsets getWithInt:i])) intValue];
    [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_() debugWithNSString:JreStrcat("$I", @"ligatureOffset=", ligatureOffset)];
    [self readLigatureSetTableWithInt:ligatureSubstitutionSubtableLocation + ligatureOffset withInt:coverageGlyphId];
  }
}


#line 212
- (void)readLigatureSetTableWithInt:(jint)ligatureSetTableLocation
                            withInt:(jint)coverageGlyphId {
  
#line 213
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:ligatureSetTableLocation];
  jint ligatureCount = [rf_ readShort];
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_())) debugWithNSString:JreStrcat("$I", @"ligatureCount=", ligatureCount)];
  
#line 217
  id<JavaUtilList> ligatureOffsets = [[JavaUtilArrayList alloc] initWithInt:ligatureCount];
  
#line 219
  for (jint i = 0; i < ligatureCount; i++) {
    jint ligatureOffset = [rf_ readShort];
    [ligatureOffsets addWithId:[JavaLangInteger valueOfWithInt:ligatureOffset]];
  }
  
#line 224
  for (JavaLangInteger *boxed__ in ligatureOffsets) {
    jint ligatureOffset = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    
#line 225
    [self readLigatureTableWithInt:ligatureSetTableLocation + ligatureOffset withInt:coverageGlyphId];
  }
}


#line 229
- (void)readLigatureTableWithInt:(jint)ligatureTableLocation
                         withInt:(jint)coverageGlyphId {
  
#line 230
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(rf_)) seekWithLong:ligatureTableLocation];
  jint ligGlyph = [rf_ readShort];
  [((id<ComItextpdfTextLogLogger>) nil_chk(ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_())) debugWithNSString:JreStrcat("$I", @"ligGlyph=", ligGlyph)];
  
#line 234
  jint compCount = [rf_ readShort];
  
#line 236
  id<JavaUtilList> glyphIdList = [[JavaUtilArrayList alloc] init];
  
#line 238
  [glyphIdList addWithId:[JavaLangInteger valueOfWithInt:coverageGlyphId]];
  
#line 240
  for (jint i = 0; i < compCount - 1; i++) {
    jint glyphId = [rf_ readShort];
    [glyphIdList addWithId:[JavaLangInteger valueOfWithInt:glyphId]];
  }
  
#line 245
  [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_() debugWithNSString:JreStrcat("$@", @"glyphIdList=", glyphIdList)];
  
#line 247
  id<JavaUtilList> previousValue = [((id<JavaUtilMap>) nil_chk(rawLigatureSubstitutionMap_)) putWithId:[JavaLangInteger valueOfWithInt:ligGlyph] withId:glyphIdList];
  
#line 249
  if (previousValue != nil) {
    [ComItextpdfTextPdfFontsOtfOpenTypeFontTableReader_get_LOG_() warnWithNSString:JreStrcat("$I$@$@", @"!!!!!!!!!!glyphId=", ligGlyph, @",\npreviousValue=",
#line 251
    previousValue, @",\ncurrentVal=",
#line 252
    glyphIdList)];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfFontsOtfGlyphSubstitutionTableReader *)other {
  [super copyAllFieldsTo:other];
  other->glyphToCharacterMap_ = glyphToCharacterMap_;
  other->glyphWidthsByIndex_ = glyphWidthsByIndex_;
  other->rawLigatureSubstitutionMap_ = rawLigatureSubstitutionMap_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withJavaUtilMap:withIntArray:", "GlyphSubstitutionTableReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "read", NULL, "V", 0x1, "Lcom.itextpdf.text.pdf.fonts.otf.FontReadingException;" },
    { "getGlyphSubstitutionMap", NULL, "Ljava.util.Map;", 0x1, "Lcom.itextpdf.text.pdf.fonts.otf.FontReadingException;" },
    { "getTextFromGlyphWithInt:withJavaUtilMap:", "getTextFromGlyph", "Ljava.lang.String;", 0x2, "Lcom.itextpdf.text.pdf.fonts.otf.FontReadingException;" },
    { "readSubTableWithInt:withInt:", "readSubTable", "V", 0x4, "Ljava.io.IOException;" },
    { "readSingleSubstitutionSubtableWithInt:", "readSingleSubstitutionSubtable", "V", 0x2, "Ljava.io.IOException;" },
    { "readLigatureSubstitutionSubtableWithInt:", "readLigatureSubstitutionSubtable", "V", 0x2, "Ljava.io.IOException;" },
    { "readLigatureSetTableWithInt:withInt:", "readLigatureSetTable", "V", 0x2, "Ljava.io.IOException;" },
    { "readLigatureTableWithInt:withInt:", "readLigatureTable", "V", 0x2, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "glyphWidthsByIndex_", NULL, 0x12, "[I", NULL,  },
    { "glyphToCharacterMap_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "rawLigatureSubstitutionMap_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFontsOtfGlyphSubstitutionTableReader = { "GlyphSubstitutionTableReader", "com.itextpdf.text.pdf.fonts.otf", NULL, 0x1, 9, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfFontsOtfGlyphSubstitutionTableReader;
}

@end
