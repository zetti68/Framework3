//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/fonts/cmaps/CMapByteCid.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/fonts/cmaps/CMapByteCid.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/AbstractCMap.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapByteCid.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapSequence.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"


#line 53
@implementation ComItextpdfTextPdfFontsCmapsCMapByteCid


#line 56
- (instancetype)init {
  if (self = [super init]) {
    planes_ = [[JavaUtilArrayList alloc] init];
    
#line 57
    [planes_ addWithId:[IOSCharArray arrayWithLength:256]];
  }
  return self;
}


#line 61
- (void)addCharWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *)mark
               withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)code {
  
#line 62
  if (!([code isKindOfClass:[ComItextpdfTextPdfPdfNumber class]]))
#line 63
  return;
  [self encodeSequenceWithByteArray:[ComItextpdfTextPdfFontsCmapsAbstractCMap decodeStringToByteWithComItextpdfTextPdfPdfString:mark] withChar:(jchar) [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast(code, [ComItextpdfTextPdfPdfNumber class])))) intValue]];
}


#line 67
- (void)encodeSequenceWithByteArray:(IOSByteArray *)seqs
                           withChar:(jchar)cid {
  
#line 68
  jint size = ((IOSByteArray *) nil_chk(seqs))->size_ - 1;
  jint nextPlane = 0;
  for (jint idx = 0; idx < size; ++idx) {
    IOSCharArray *plane = [((JavaUtilArrayList *) nil_chk(planes_)) getWithInt:nextPlane];
    jint one = IOSByteArray_Get(seqs, idx) & (jint) 0xff;
    jchar c = IOSCharArray_Get(nil_chk(plane), one);
    if (c != 0 && (c & (jint) 0x8000) == 0)
#line 75
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"inconsistent.mapping" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    if (c == 0) {
      [planes_ addWithId:[IOSCharArray arrayWithLength:256]];
      c = (jchar) (([planes_ size] - 1) | (jint) 0x8000);
      *IOSCharArray_GetRef(plane, one) = c;
    }
    nextPlane = c & (jint) 0x7fff;
  }
  IOSCharArray *plane = [((JavaUtilArrayList *) nil_chk(planes_)) getWithInt:nextPlane];
  jint one = IOSByteArray_Get(seqs, size) & (jint) 0xff;
  jchar c = IOSCharArray_Get(nil_chk(plane), one);
  if ((c & (jint) 0x8000) != 0)
#line 87
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"inconsistent.mapping" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  *IOSCharArray_GetRef(plane, one) = cid;
}

- (jint)decodeSingleWithComItextpdfTextPdfFontsCmapsCMapSequence:(ComItextpdfTextPdfFontsCmapsCMapSequence *)seq {
  
#line 97
  jint end = ((ComItextpdfTextPdfFontsCmapsCMapSequence *) nil_chk(seq))->off_ + seq->len_;
  jint currentPlane = 0;
  while (seq->off_ < end) {
    jint one = IOSByteArray_Get(nil_chk(seq->seq_), seq->off_++) & (jint) 0xff;
    --seq->len_;
    IOSCharArray *plane = [((JavaUtilArrayList *) nil_chk(planes_)) getWithInt:currentPlane];
    jint cid = IOSCharArray_Get(nil_chk(plane), one);
    if ((cid & (jint) 0x8000) == 0) {
      return cid;
    }
    else
#line 108
    currentPlane = cid & (jint) 0x7fff;
  }
  return -1;
}


#line 113
- (NSString *)decodeSequenceWithComItextpdfTextPdfFontsCmapsCMapSequence:(ComItextpdfTextPdfFontsCmapsCMapSequence *)seq {
  
#line 114
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  jint cid = 0;
  while ((cid = [self decodeSingleWithComItextpdfTextPdfFontsCmapsCMapSequence:seq]) >= 0) {
    (void) [sb appendWithChar:(jchar) cid];
  }
  return [sb description];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfFontsCmapsCMapByteCid *)other {
  [super copyAllFieldsTo:other];
  other->planes_ = planes_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CMapByteCid", NULL, 0x1, NULL },
    { "addCharWithComItextpdfTextPdfPdfString:withComItextpdfTextPdfPdfObject:", "addChar", "V", 0x0, NULL },
    { "encodeSequenceWithByteArray:withChar:", "encodeSequence", "V", 0x2, NULL },
    { "decodeSingleWithComItextpdfTextPdfFontsCmapsCMapSequence:", "decodeSingle", "I", 0x1, NULL },
    { "decodeSequenceWithComItextpdfTextPdfFontsCmapsCMapSequence:", "decodeSequence", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "planes_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFontsCmapsCMapByteCid = { "CMapByteCid", "com.itextpdf.text.pdf.fonts.cmaps", NULL, 0x1, 5, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfFontsCmapsCMapByteCid;
}

@end
