//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfWriter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfWriter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/awt/geom/Rectangle.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/DocListener.h"
#include "com/itextpdf/text/DocWriter.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/ImgJBIG2.h"
#include "com/itextpdf/text/ImgWMF.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/Version.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/log/Counter.h"
#include "com/itextpdf/text/log/CounterFactory.h"
#include "com/itextpdf/text/pdf/BadPdfFormatException.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/ColorDetails.h"
#include "com/itextpdf/text/pdf/DocumentFont.h"
#include "com/itextpdf/text/pdf/ExtendedColor.h"
#include "com/itextpdf/text/pdf/FontDetails.h"
#include "com/itextpdf/text/pdf/ICC_Profile.h"
#include "com/itextpdf/text/pdf/OutputStreamCounter.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PdfAcroForm.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfContents.h"
#include "com/itextpdf/text/pdf/PdfDestination.h"
#include "com/itextpdf/text/pdf/PdfDeveloperExtension.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfDocument.h"
#include "com/itextpdf/text/pdf/PdfEncryption.h"
#include "com/itextpdf/text/pdf/PdfException.h"
#include "com/itextpdf/text/pdf/PdfFileSpecification.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfICCBased.h"
#include "com/itextpdf/text/pdf/PdfImage.h"
#include "com/itextpdf/text/pdf/PdfImportedPage.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLayer.h"
#include "com/itextpdf/text/pdf/PdfLayerMembership.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfOCG.h"
#include "com/itextpdf/text/pdf/PdfOCProperties.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfOutline.h"
#include "com/itextpdf/text/pdf/PdfPage.h"
#include "com/itextpdf/text/pdf/PdfPageEvent.h"
#include "com/itextpdf/text/pdf/PdfPageLabels.h"
#include "com/itextpdf/text/pdf/PdfPages.h"
#include "com/itextpdf/text/pdf/PdfPattern.h"
#include "com/itextpdf/text/pdf/PdfPatternPainter.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfReaderInstance.h"
#include "com/itextpdf/text/pdf/PdfShading.h"
#include "com/itextpdf/text/pdf/PdfShadingPattern.h"
#include "com/itextpdf/text/pdf/PdfSpotColor.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfStructureTreeRoot.h"
#include "com/itextpdf/text/pdf/PdfTemplate.h"
#include "com/itextpdf/text/pdf/PdfTransition.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/PdfXConformanceException.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/SimpleBookmark.h"
#include "com/itextpdf/text/pdf/SpotColor.h"
#include "com/itextpdf/text/pdf/TtfUnicodeWriter.h"
#include "com/itextpdf/text/pdf/collection/PdfCollection.h"
#include "com/itextpdf/text/pdf/events/PdfPageEventForwarder.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"
#include "com/itextpdf/text/pdf/interfaces/PdfIsoConformance.h"
#include "com/itextpdf/text/pdf/interfaces/PdfXConformance.h"
#include "com/itextpdf/text/pdf/internal/PdfIsoKeys.h"
#include "com/itextpdf/text/pdf/internal/PdfVersionImp.h"
#include "com/itextpdf/text/pdf/internal/PdfXConformanceImp.h"
#include "com/itextpdf/text/xml/xmp/PdfProperties.h"
#include "com/itextpdf/text/xml/xmp/XmpWriter.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPMeta.h"
#include "com/itextpdf/xmp/options/PropertyOptions.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/security/cert/Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

BOOL ComItextpdfTextPdfPdfWriter_initialized = NO;


#line 96
@implementation ComItextpdfTextPdfPdfWriter

id<ComItextpdfTextLogCounter> ComItextpdfTextPdfPdfWriter_COUNTER_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_2_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_3_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_4_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_5_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_6_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_7_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_DOCUMENT_CLOSE_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_WILL_SAVE_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_DID_SAVE_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_WILL_PRINT_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_DID_PRINT_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_PAGE_OPEN_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfWriter_PAGE_CLOSE_;
id<JavaUtilList> ComItextpdfTextPdfPdfWriter_standardStructElems_1_4_;
id<JavaUtilList> ComItextpdfTextPdfPdfWriter_standardStructElems_1_7_;


#line 601
- (id<ComItextpdfTextLogCounter>)getCounter {
  
#line 602
  return ComItextpdfTextPdfPdfWriter_COUNTER_;
}


#line 610
- (instancetype)init {
  if (self = [super init]) {
    root_ =
#line 972
    [[ComItextpdfTextPdfPdfPages alloc] initWithComItextpdfTextPdfPdfWriter:self];
    pageReferences_ =
#line 974
    [[JavaUtilArrayList alloc] init];
    currentPageNumber_ =
#line 976
    1;
    tabs_ =
#line 981
    nil;
    pageDictEntries_ =
#line 987
    [[ComItextpdfTextPdfPdfDictionary alloc] init];
    prevxref_ =
#line 1201
    0;
    originalFileID_ =
#line 1203
    nil;
    pdf_version_ =
#line 1473
    [[ComItextpdfTextPdfInternalPdfVersionImp alloc] init];
    xmpMetadata_ =
#line 1806
    nil;
    xmpWriter_ =
#line 1825
    nil;
    pdfIsoConformance_ =
#line 1861
    [self initPdfIsoConformance];
    fullCompression_ =
#line 2199
    NO;
    compressionLevel_ =
#line 2225
    ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION;
    documentFonts_ =
#line 2251
    [[JavaUtilLinkedHashMap alloc] init];
    fontNumber_ =
#line 2254
    1;
    formXObjects_ =
#line 2290
    [[JavaUtilHashMap alloc] init];
    formXObjectsCounter_ =
#line 2293
    1;
    readerInstances_ =
#line 2362
    [[JavaUtilHashMap alloc] init];
    documentColors_ =
#line 2441
    [[JavaUtilHashMap alloc] init];
    colorNumber_ =
#line 2444
    1;
    documentPatterns_ =
#line 2468
    [[JavaUtilHashMap alloc] init];
    patternNumber_ =
#line 2471
    1;
    documentShadingPatterns_ =
#line 2489
    [[JavaUtilHashSet alloc] init];
    documentShadings_ =
#line 2502
    [[JavaUtilHashSet alloc] init];
    documentExtGState_ =
#line 2513
    [[JavaUtilHashMap alloc] init];
    documentProperties_ =
#line 2524
    [[JavaUtilHashMap alloc] init];
    tagged_ =
#line 2543
    NO;
    taggingMode_ =
#line 2544
    ComItextpdfTextPdfPdfWriter_markInlineElementsOnly;
    documentOCG_ =
#line 2608
    [[JavaUtilHashSet alloc] init];
    documentOCGorder_ =
#line 2610
    [[JavaUtilArrayList alloc] init];
    OCGRadioGroup_ =
#line 2614
    [[ComItextpdfTextPdfPdfArray alloc] init];
    OCGLocked_ =
#line 2619
    [[ComItextpdfTextPdfPdfArray alloc] init];
    spaceCharRatio_ =
#line 2953
    ComItextpdfTextPdfPdfWriter_SPACE_CHAR_RATIO_DEFAULT;
    runDirection_ =
#line 2994
    ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
    defaultColorspace_ =
#line 3035
    [[ComItextpdfTextPdfPdfDictionary alloc] init];
    documentSpotPatterns_ =
#line 3063
    [[JavaUtilHashMap alloc] init];
    imageDictionary_ =
#line 3148
    [[ComItextpdfTextPdfPdfDictionary alloc] init];
    images_ =
#line 3151
    [[JavaUtilHashMap alloc] init];
    JBIG2Globals_ =
#line 3302
    [[JavaUtilHashMap alloc] init];
    ttfUnicodeWriter_ =
#line 3389
    nil;
  }
  return self;
}


#line 623
- (instancetype)initWithComItextpdfTextPdfPdfDocument:(ComItextpdfTextPdfPdfDocument *)document
                               withJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self =
#line 624
  [super initWithComItextpdfTextDocument:document withJavaIoOutputStream:os]) {
    root_ =
#line 972
    [[ComItextpdfTextPdfPdfPages alloc] initWithComItextpdfTextPdfPdfWriter:self];
    pageReferences_ =
#line 974
    [[JavaUtilArrayList alloc] init];
    currentPageNumber_ =
#line 976
    1;
    tabs_ =
#line 981
    nil;
    pageDictEntries_ =
#line 987
    [[ComItextpdfTextPdfPdfDictionary alloc] init];
    prevxref_ =
#line 1201
    0;
    originalFileID_ =
#line 1203
    nil;
    pdf_version_ =
#line 1473
    [[ComItextpdfTextPdfInternalPdfVersionImp alloc] init];
    xmpMetadata_ =
#line 1806
    nil;
    xmpWriter_ =
#line 1825
    nil;
    pdfIsoConformance_ =
#line 1861
    [self initPdfIsoConformance];
    fullCompression_ =
#line 2199
    NO;
    compressionLevel_ =
#line 2225
    ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION;
    documentFonts_ =
#line 2251
    [[JavaUtilLinkedHashMap alloc] init];
    fontNumber_ =
#line 2254
    1;
    formXObjects_ =
#line 2290
    [[JavaUtilHashMap alloc] init];
    formXObjectsCounter_ =
#line 2293
    1;
    readerInstances_ =
#line 2362
    [[JavaUtilHashMap alloc] init];
    documentColors_ =
#line 2441
    [[JavaUtilHashMap alloc] init];
    colorNumber_ =
#line 2444
    1;
    documentPatterns_ =
#line 2468
    [[JavaUtilHashMap alloc] init];
    patternNumber_ =
#line 2471
    1;
    documentShadingPatterns_ =
#line 2489
    [[JavaUtilHashSet alloc] init];
    documentShadings_ =
#line 2502
    [[JavaUtilHashSet alloc] init];
    documentExtGState_ =
#line 2513
    [[JavaUtilHashMap alloc] init];
    documentProperties_ =
#line 2524
    [[JavaUtilHashMap alloc] init];
    tagged_ =
#line 2543
    NO;
    taggingMode_ =
#line 2544
    ComItextpdfTextPdfPdfWriter_markInlineElementsOnly;
    documentOCG_ =
#line 2608
    [[JavaUtilHashSet alloc] init];
    documentOCGorder_ =
#line 2610
    [[JavaUtilArrayList alloc] init];
    OCGRadioGroup_ =
#line 2614
    [[ComItextpdfTextPdfPdfArray alloc] init];
    OCGLocked_ =
#line 2619
    [[ComItextpdfTextPdfPdfArray alloc] init];
    spaceCharRatio_ =
#line 2953
    ComItextpdfTextPdfPdfWriter_SPACE_CHAR_RATIO_DEFAULT;
    runDirection_ =
#line 2994
    ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
    defaultColorspace_ =
#line 3035
    [[ComItextpdfTextPdfPdfDictionary alloc] init];
    documentSpotPatterns_ =
#line 3063
    [[JavaUtilHashMap alloc] init];
    imageDictionary_ =
#line 3148
    [[ComItextpdfTextPdfPdfDictionary alloc] init];
    images_ =
#line 3151
    [[JavaUtilHashMap alloc] init];
    JBIG2Globals_ =
#line 3302
    [[JavaUtilHashMap alloc] init];
    ttfUnicodeWriter_ =
#line 3389
    nil;
    
#line 625
    pdf_ = document;
    
#line 626
    directContentUnder_ = [[ComItextpdfTextPdfPdfContentByte alloc] initWithComItextpdfTextPdfPdfWriter:self];
    
#line 627
    directContent_ = [directContentUnder_ getDuplicate];
  }
  return self;
}


#line 640
+ (ComItextpdfTextPdfPdfWriter *)getInstanceWithComItextpdfTextDocument:(ComItextpdfTextDocument *)document
                                                 withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 642
  ComItextpdfTextPdfPdfDocument *pdf = [[ComItextpdfTextPdfPdfDocument alloc] init];
  [((ComItextpdfTextDocument *) nil_chk(document)) addDocListenerWithComItextpdfTextDocListener:pdf];
  ComItextpdfTextPdfPdfWriter *writer = [[ComItextpdfTextPdfPdfWriter alloc] initWithComItextpdfTextPdfPdfDocument:pdf withJavaIoOutputStream:os];
  [pdf addWriterWithComItextpdfTextPdfPdfWriter:writer];
  return writer;
}


#line 659
+ (ComItextpdfTextPdfPdfWriter *)getInstanceWithComItextpdfTextDocument:(ComItextpdfTextDocument *)document
                                                 withJavaIoOutputStream:(JavaIoOutputStream *)os
                                         withComItextpdfTextDocListener:(id<ComItextpdfTextDocListener>)listener {
  
#line 661
  ComItextpdfTextPdfPdfDocument *pdf = [[ComItextpdfTextPdfPdfDocument alloc] init];
  [pdf addDocListenerWithComItextpdfTextDocListener:listener];
  [((ComItextpdfTextDocument *) nil_chk(document)) addDocListenerWithComItextpdfTextDocListener:pdf];
  ComItextpdfTextPdfPdfWriter *writer = [[ComItextpdfTextPdfPdfWriter alloc] initWithComItextpdfTextPdfPdfDocument:pdf withJavaIoOutputStream:os];
  [pdf addWriterWithComItextpdfTextPdfPdfWriter:writer];
  return writer;
}


#line 679
- (ComItextpdfTextPdfPdfDocument *)getPdfDocument {
  
#line 680
  return pdf_;
}


#line 688
- (ComItextpdfTextPdfPdfDictionary *)getInfo {
  
#line 689
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getInfo];
}


#line 699
- (jfloat)getVerticalPositionWithBoolean:(jboolean)ensureNewLine {
  
#line 700
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getVerticalPositionWithBoolean:ensureNewLine];
}


#line 710
- (void)setInitialLeadingWithFloat:(jfloat)leading {
  
#line 711
  if (open__)
#line 712
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"you.can.t.set.the.initial.leading.if.the.document.is.already.open" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setLeadingWithFloat:leading];
}


#line 740
- (ComItextpdfTextPdfPdfContentByte *)getDirectContent {
  
#line 741
  if (!open__)
#line 742
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.is.not.open" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  return directContent_;
}


#line 753
- (ComItextpdfTextPdfPdfContentByte *)getDirectContentUnder {
  
#line 754
  if (!open__)
#line 755
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.is.not.open" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  return directContentUnder_;
}


#line 763
- (void)resetContent {
  
#line 764
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(directContent_)) reset];
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(directContentUnder_)) reset];
}


#line 783
- (ComItextpdfTextPdfICC_Profile *)getColorProfile {
  
#line 784
  return colorProfile_;
}


#line 793
- (void)addLocalDestinationsWithJavaUtilTreeMap:(JavaUtilTreeMap *)desto {
  
#line 794
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilTreeMap *) nil_chk(desto)) entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    ComItextpdfTextPdfPdfDocument_Destination *dest = [entry_ getValue];
    ComItextpdfTextPdfPdfDestination *destination = ((ComItextpdfTextPdfPdfDocument_Destination *) nil_chk(dest))->destination_;
    if (dest->reference_ == nil)
#line 799
    dest->reference_ = [self getPdfIndirectReference];
    if (destination == nil)
#line 801
    (void) [self addToBodyWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:JreStrcat("$$", @"invalid_", name)] withComItextpdfTextPdfPdfIndirectReference:dest->reference_];
    else
#line 803
    (void) [self addToBodyWithComItextpdfTextPdfPdfObject:destination withComItextpdfTextPdfPdfIndirectReference:dest->reference_];
  }
}


#line 814
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 815
  ComItextpdfTextPdfPdfIndirectObject *iobj = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:object];
  return iobj;
}


#line 827
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                                                      withBoolean:(jboolean)inObjStm {
  
#line 828
  ComItextpdfTextPdfPdfIndirectObject *iobj = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:object withBoolean:inObjStm];
  return iobj;
}


#line 840
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                       withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
  
#line 841
  ComItextpdfTextPdfPdfIndirectObject *iobj = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfIndirectReference:ref];
  return iobj;
}


#line 854
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                       withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                                                                      withBoolean:(jboolean)inObjStm {
  
#line 855
  ComItextpdfTextPdfPdfIndirectObject *iobj = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfIndirectReference:ref withBoolean:inObjStm];
  return iobj;
}


#line 867
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                                                          withInt:(jint)refNumber {
  
#line 868
  ComItextpdfTextPdfPdfIndirectObject *iobj = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:object withInt:refNumber];
  return iobj;
}


#line 881
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                                                          withInt:(jint)refNumber
                                                                      withBoolean:(jboolean)inObjStm {
  
#line 882
  ComItextpdfTextPdfPdfIndirectObject *iobj = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:object withInt:refNumber withInt:0 withBoolean:inObjStm];
  return iobj;
}


#line 893
- (ComItextpdfTextPdfPdfIndirectReference *)getPdfIndirectReference {
  
#line 894
  return [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference];
}


#line 897
- (jint)getIndirectReferenceNumber {
  
#line 898
  return [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getIndirectReferenceNumber];
}


#line 905
- (ComItextpdfTextPdfOutputStreamCounter *)getOs {
  
#line 906
  return os_;
}


#line 920
- (ComItextpdfTextPdfPdfDictionary *)getCatalogWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)rootObj {
  
#line 921
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getCatalogWithComItextpdfTextPdfPdfIndirectReference:rootObj];
  
#line 923
  [self buildStructTreeRootForTaggedWithComItextpdfTextPdfPdfDictionary:catalog];
  
#line 925
  if (![((JavaUtilHashSet *) nil_chk(documentOCG_)) isEmpty]) {
    [self fillOCPropertiesWithBoolean:NO];
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCPROPERTIES_() withComItextpdfTextPdfPdfObject:OCProperties_];
  }
  return catalog;
}


#line 932
- (void)buildStructTreeRootForTaggedWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)catalog {
  
#line 933
  if (tagged_) {
    @try {
      [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk([self getStructureTreeRoot])) buildTree];
    }
    @catch (JavaLangException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTTREEROOT_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) getReference]];
    ComItextpdfTextPdfPdfDictionary *mi = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [mi putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MARKED_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
    if (userProperties_)
#line 944
    [mi putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_USERPROPERTIES_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MARKINFO_() withComItextpdfTextPdfPdfObject:mi];
  }
}


#line 956
- (ComItextpdfTextPdfPdfDictionary *)getExtraCatalog {
  
#line 957
  if (extraCatalog_ == nil)
#line 958
  extraCatalog_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  return self->extraCatalog_;
}


#line 995
- (void)addPageDictEntryWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 996
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDictEntries_)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:object];
}


#line 1004
- (ComItextpdfTextPdfPdfDictionary *)getPageDictEntries {
  
#line 1005
  return pageDictEntries_;
}


#line 1012
- (void)resetPageDictEntries {
  
#line 1013
  pageDictEntries_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
}


#line 1021
- (void)setLinearPageMode {
  
#line 1022
  [((ComItextpdfTextPdfPdfPages *) nil_chk(root_)) setLinearModeWithComItextpdfTextPdfPdfIndirectReference:nil];
}


#line 1034
- (jint)reorderPagesWithIntArray:(IOSIntArray *)order {
  
#line 1035
  return [((ComItextpdfTextPdfPdfPages *) nil_chk(root_)) reorderPagesWithIntArray:order];
}


#line 1047
- (ComItextpdfTextPdfPdfIndirectReference *)getPageReferenceWithInt:(jint)page {
  
#line 1048
  --page;
  if (page < 0)
#line 1050
  @throw [[JavaLangIndexOutOfBoundsException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.page.number.must.be.gt.eq.1" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPdfIndirectReference *ref;
  if (page < [((JavaUtilArrayList *) nil_chk(pageReferences_)) size]) {
    ref = [pageReferences_ getWithInt:page];
    if (ref == nil) {
      ref = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference];
      (void) [pageReferences_ setWithInt:page withId:ref];
    }
  }
  else {
    jint empty = page - [pageReferences_ size];
    for (jint k = 0; k < empty; ++k)
#line 1062
    [pageReferences_ addWithId:nil];
    ref = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference];
    [pageReferences_ addWithId:ref];
  }
  return ref;
}


#line 1076
- (jint)getPageNumber {
  
#line 1077
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getPageNumber];
}


#line 1080
- (ComItextpdfTextPdfPdfIndirectReference *)getCurrentPage {
  
#line 1081
  return [self getPageReferenceWithInt:currentPageNumber_];
}


#line 1084
- (jint)getCurrentPageNumber {
  
#line 1085
  return currentPageNumber_;
}


#line 1093
- (void)setPageViewportWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)vp {
  
#line 1094
  [self addPageDictEntryWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_VP_() withComItextpdfTextPdfPdfObject:vp];
}


#line 1104
- (void)setTabsWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)tabs {
  
#line 1105
  self->tabs_ = tabs;
}


#line 1113
- (ComItextpdfTextPdfPdfName *)getTabs {
  
#line 1114
  return tabs_;
}


#line 1129
- (ComItextpdfTextPdfPdfIndirectReference *)addWithComItextpdfTextPdfPdfPage:(ComItextpdfTextPdfPdfPage *)page
                                           withComItextpdfTextPdfPdfContents:(ComItextpdfTextPdfPdfContents *)contents {
  
#line 1130
  if (!open__) {
    @throw [[ComItextpdfTextPdfPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.is.not.open" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  ComItextpdfTextPdfPdfIndirectObject *object;
  @try {
    object = [self addToBodyWithComItextpdfTextPdfPdfObject:contents];
  }
  @catch (JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
  [((ComItextpdfTextPdfPdfPage *) nil_chk(page)) addWithComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(object)) getIndirectReference]];
  
#line 1142
  if (group_ != nil) {
    [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_GROUP_() withComItextpdfTextPdfPdfObject:group_];
    group_ = nil;
  }
  else if (rgbTransparencyBlending_) {
    ComItextpdfTextPdfPdfDictionary *pp = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [pp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_GROUP_()];
    [pp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TRANSPARENCY_()];
    [pp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CS_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
    [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_GROUP_() withComItextpdfTextPdfPdfObject:pp];
  }
  [((ComItextpdfTextPdfPdfPages *) nil_chk(root_)) addPageWithComItextpdfTextPdfPdfDictionary:page];
  currentPageNumber_++;
  return nil;
}


#line 1175
- (void)setPageEventWithComItextpdfTextPdfPdfPageEvent:(id<ComItextpdfTextPdfPdfPageEvent>)event {
  
#line 1176
  if (event == nil) self->pageEvent_ = nil;
  else if (self->pageEvent_ == nil) self->pageEvent_ = event;
  else if ([(id) self->pageEvent_ isKindOfClass:[ComItextpdfTextPdfEventsPdfPageEventForwarder class]]) [((ComItextpdfTextPdfEventsPdfPageEventForwarder *) check_class_cast(self->pageEvent_, [ComItextpdfTextPdfEventsPdfPageEventForwarder class])) addPageEventWithComItextpdfTextPdfPdfPageEvent:event];
  else {
    ComItextpdfTextPdfEventsPdfPageEventForwarder *forward = [[ComItextpdfTextPdfEventsPdfPageEventForwarder alloc] init];
    [forward addPageEventWithComItextpdfTextPdfPdfPageEvent:self->pageEvent_];
    [forward addPageEventWithComItextpdfTextPdfPdfPageEvent:event];
    self->pageEvent_ = forward;
  }
}


#line 1194
- (id<ComItextpdfTextPdfPdfPageEvent>)getPageEvent {
  
#line 1195
  return pageEvent_;
}


#line 1214
- (void)open {
  
#line 1215
  [super open];
  @try {
    [((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk(pdf_version_)) writeHeaderWithComItextpdfTextPdfOutputStreamCounter:os_];
    body_ = [[ComItextpdfTextPdfPdfWriter_PdfBody alloc] initWithComItextpdfTextPdfPdfWriter:self];
    if ([self isPdfX] && [((ComItextpdfTextPdfInternalPdfXConformanceImp *) nil_chk(((ComItextpdfTextPdfInternalPdfXConformanceImp *) check_class_cast(pdfIsoConformance_, [ComItextpdfTextPdfInternalPdfXConformanceImp class])))) isPdfX32002]) {
      ComItextpdfTextPdfPdfDictionary *sec = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [sec putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_GAMMA_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 2.2f, 2.2f, 2.2f } count:3]]];
      [sec putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MATRIX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0.4124f, 0.2126f, 0.0193f, 0.3576f, 0.7152f, 0.1192f, 0.1805f, 0.0722f, 0.9505f } count:9]]];
      [sec putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WHITEPOINT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0.9505f, 1.0f, 1.089f } count:3]]];
      ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CALRGB_()];
      [arr addWithComItextpdfTextPdfPdfObject:sec];
      [self setDefaultColorspaceWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEFAULTRGB_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:arr])) getIndirectReference]];
    }
  }
  @catch (JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
}


#line 1245
- (void)close {
  
#line 1246
  if (open__) {
    if (currentPageNumber_ - 1 != [((JavaUtilArrayList *) nil_chk(pageReferences_)) size])
#line 1248
    @throw [[JavaLangRuntimeException alloc] initWithNSString:JreStrcat("$I$I$", @"The page ", [pageReferences_ size], @" was requested but the document has only ",
#line 1249
    (currentPageNumber_ - 1), @" pages.")];
    [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) close];
    @try {
      [self addSharedObjectsToBody];
      for (id<ComItextpdfTextPdfPdfOCG> __strong layer in nil_chk(documentOCG_)) {
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:[((id<ComItextpdfTextPdfPdfOCG>) nil_chk(layer)) getPdfObject] withComItextpdfTextPdfPdfIndirectReference:[layer getRef]];
      }
      
#line 1257
      ComItextpdfTextPdfPdfIndirectReference *rootRef = [((ComItextpdfTextPdfPdfPages *) nil_chk(root_)) writePageTree];
      
#line 1259
      ComItextpdfTextPdfPdfDictionary *catalog = [self getCatalogWithComItextpdfTextPdfPdfIndirectReference:rootRef];
      if (![documentOCG_ isEmpty])
#line 1261
      [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:self withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_LAYER withId:OCProperties_];
      
#line 1263
      if (xmpMetadata_ == nil && xmpWriter_ != nil) {
        @try {
          JavaIoByteArrayOutputStream *baos = [[JavaIoByteArrayOutputStream alloc] init];
          [xmpWriter_ serializeWithJavaIoOutputStream:baos];
          [xmpWriter_ close];
          xmpMetadata_ = [baos toByteArray];
        }
        @catch (
#line 1269
        JavaIoIOException *exc) {
          xmpWriter_ = nil;
        }
        @catch (
#line 1271
        ComItextpdfXmpXMPException *exc) {
          xmpWriter_ = nil;
        }
      }
      if (xmpMetadata_ != nil) {
        ComItextpdfTextPdfPdfStream *xmp = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:xmpMetadata_];
        [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_METADATA_()];
        [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_XML_()];
        if (crypto_ != nil && ![crypto_ isMetadataEncrypted]) {
          ComItextpdfTextPdfPdfArray *ar = [[ComItextpdfTextPdfPdfArray alloc] init];
          [ar addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CRYPT_()];
          [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ar];
        }
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_METADATA_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:xmp])) getIndirectReference]];
      }
      
#line 1287
      if ([self isPdfX]) {
        [self completeInfoDictionaryWithComItextpdfTextPdfPdfDictionary:[self getInfo]];
        [self completeExtraCatalogWithComItextpdfTextPdfPdfDictionary:[self getExtraCatalog]];
      }
      
#line 1292
      if (extraCatalog_ != nil) {
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) mergeDifferentWithComItextpdfTextPdfPdfDictionary:extraCatalog_];
      }
      
#line 1296
      [self writeOutlinesWithComItextpdfTextPdfPdfDictionary:catalog withBoolean:NO];
      
#line 1299
      ComItextpdfTextPdfPdfIndirectObject *indirectCatalog = [self addToBodyWithComItextpdfTextPdfPdfObject:catalog withBoolean:NO];
      
#line 1301
      ComItextpdfTextPdfPdfIndirectObject *infoObj = [self addToBodyWithComItextpdfTextPdfPdfObject:[self getInfo] withBoolean:NO];
      
#line 1304
      ComItextpdfTextPdfPdfIndirectReference *encryption = nil;
      ComItextpdfTextPdfPdfObject *fileID = nil;
      [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) flushObjStm];
      jboolean isModified = (originalFileID_ != nil);
      if (crypto_ != nil) {
        ComItextpdfTextPdfPdfIndirectObject *encryptionObject = [self addToBodyWithComItextpdfTextPdfPdfObject:[crypto_ getEncryptionDictionary] withBoolean:NO];
        encryption = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(encryptionObject)) getIndirectReference];
        fileID = [crypto_ getFileIDWithBoolean:isModified];
      }
      else {
        fileID = [ComItextpdfTextPdfPdfEncryption createInfoIdWithByteArray:isModified ? originalFileID_ : [ComItextpdfTextPdfPdfEncryption createDocumentId] withBoolean:isModified];
      }
      
#line 1318
      [body_ writeCrossReferenceTableWithJavaIoOutputStream:os_ withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(indirectCatalog)) getIndirectReference] withComItextpdfTextPdfPdfIndirectReference:
#line 1319
      [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(infoObj)) getIndirectReference] withComItextpdfTextPdfPdfIndirectReference:encryption withComItextpdfTextPdfPdfObject:fileID withLong:prevxref_];
      
#line 1323
      if (fullCompression_) {
        [ComItextpdfTextPdfPdfWriter writeKeyInfoWithJavaIoOutputStream:os_];
        [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@"startxref\n"]];
        [os_ writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:[NSString valueOfLong:[body_ offset]]]];
        [os_ writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@"\n%%EOF\n"]];
      }
      else {
        ComItextpdfTextPdfPdfWriter_PdfTrailer *trailer = [[ComItextpdfTextPdfPdfWriter_PdfTrailer alloc] initWithInt:[body_ size] withLong:
#line 1331
        [body_ offset] withComItextpdfTextPdfPdfIndirectReference:
#line 1332
        [indirectCatalog getIndirectReference] withComItextpdfTextPdfPdfIndirectReference:
#line 1333
        [infoObj getIndirectReference] withComItextpdfTextPdfPdfIndirectReference:
#line 1334
        encryption withComItextpdfTextPdfPdfObject:
#line 1335
        fileID withLong:prevxref_];
        [trailer toPdfWithComItextpdfTextPdfPdfWriter:self withJavaIoOutputStream:os_];
      }
      [super close];
    }
    @catch (JavaIoIOException *ioe) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
    }
  }
  [((id<ComItextpdfTextLogCounter>) nil_chk([self getCounter])) writtenWithLong:[((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) getCounter]];
}


#line 1347
- (void)addXFormsToBody {
  
#line 1348
  for (IOSObjectArray * __strong objs in nil_chk([((JavaUtilHashMap *) nil_chk(formXObjects_)) values])) {
    ComItextpdfTextPdfPdfTemplate *template_ = (ComItextpdfTextPdfPdfTemplate *) check_class_cast(IOSObjectArray_Get(nil_chk(objs), 1), [ComItextpdfTextPdfPdfTemplate class]);
    if (template_ != nil && [[template_ getIndirectReference] isKindOfClass:[ComItextpdfTextPdfPRIndirectReference class]])
#line 1351
    continue;
    if (template_ != nil && [template_ getType] == ComItextpdfTextPdfPdfTemplate_TYPE_TEMPLATE) {
      (void) [self addToBodyWithComItextpdfTextPdfPdfObject:[template_ getFormXObjectWithInt:compressionLevel_] withComItextpdfTextPdfPdfIndirectReference:[template_ getIndirectReference]];
    }
  }
}


#line 1358
- (void)addSharedObjectsToBody {
  
#line 1360
  for (ComItextpdfTextPdfFontDetails * __strong details in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(documentFonts_)) values])) {
    [((ComItextpdfTextPdfFontDetails *) nil_chk(details)) writeFontWithComItextpdfTextPdfPdfWriter:self];
  }
  
#line 1364
  [self addXFormsToBody];
  
#line 1366
  for (ComItextpdfTextPdfPdfReaderInstance * __strong element in nil_chk([((JavaUtilHashMap *) nil_chk(readerInstances_)) values])) {
    currentPdfReaderInstance_ = element;
    [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk(currentPdfReaderInstance_)) writeAllPages];
  }
  currentPdfReaderInstance_ = nil;
  
#line 1372
  for (ComItextpdfTextPdfColorDetails * __strong color in nil_chk([((JavaUtilHashMap *) nil_chk(documentColors_)) values])) {
    (void) [self addToBodyWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfColorDetails *) nil_chk(color)) getSpotColorWithComItextpdfTextPdfPdfWriter:self] withComItextpdfTextPdfPdfIndirectReference:[color getIndirectReference]];
  }
  
#line 1376
  for (ComItextpdfTextPdfPdfPatternPainter * __strong pat in nil_chk([((JavaUtilHashMap *) nil_chk(documentPatterns_)) keySet])) {
    (void) [self addToBodyWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfPatternPainter *) nil_chk(pat)) getPatternWithInt:compressionLevel_] withComItextpdfTextPdfPdfIndirectReference:[pat getIndirectReference]];
  }
  
#line 1380
  for (ComItextpdfTextPdfPdfShadingPattern * __strong shadingPattern in nil_chk(documentShadingPatterns_)) {
    [((ComItextpdfTextPdfPdfShadingPattern *) nil_chk(shadingPattern)) addToBody];
  }
  
#line 1384
  for (ComItextpdfTextPdfPdfShading * __strong shading in nil_chk(documentShadings_)) {
    [((ComItextpdfTextPdfPdfShading *) nil_chk(shading)) addToBody];
  }
  
#line 1388
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(documentExtGState_)) entrySet])) {
    ComItextpdfTextPdfPdfDictionary *gstate = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    IOSObjectArray *obj = [entry_ getValue];
    (void) [self addToBodyWithComItextpdfTextPdfPdfObject:gstate withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(IOSObjectArray_Get(nil_chk(obj), 1), [ComItextpdfTextPdfPdfIndirectReference class])];
  }
  
#line 1394
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(documentProperties_)) entrySet])) {
    id prop = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    IOSObjectArray *obj = [entry_ getValue];
    if ([prop isKindOfClass:[ComItextpdfTextPdfPdfLayerMembership class]]) {
      ComItextpdfTextPdfPdfLayerMembership *layer = (ComItextpdfTextPdfPdfLayerMembership *) check_class_cast(prop, [ComItextpdfTextPdfPdfLayerMembership class]);
      (void) [self addToBodyWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfLayerMembership *) nil_chk(layer)) getPdfObject] withComItextpdfTextPdfPdfIndirectReference:[layer getRef]];
    }
    else if ([prop isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]] && !([prop isKindOfClass:[ComItextpdfTextPdfPdfLayer class]])) {
      (void) [self addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(prop, [ComItextpdfTextPdfPdfDictionary class]) withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(IOSObjectArray_Get(nil_chk(obj), 1), [ComItextpdfTextPdfPdfIndirectReference class])];
    }
  }
}


#line 1417
- (ComItextpdfTextPdfPdfOutline *)getRootOutline {
  
#line 1418
  return [((ComItextpdfTextPdfPdfContentByte *) nil_chk(directContent_)) getRootOutline];
}


#line 1428
- (void)setOutlinesWithJavaUtilList:(id<JavaUtilList>)outlines {
  
#line 1429
  newBookmarks_ = outlines;
}


#line 1432
- (void)writeOutlinesWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)catalog
                                             withBoolean:(jboolean)namedAsNames {
  
#line 1433
  if (newBookmarks_ == nil || [newBookmarks_ isEmpty])
#line 1434
  return;
  ComItextpdfTextPdfPdfDictionary *top = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  ComItextpdfTextPdfPdfIndirectReference *topRef = [self getPdfIndirectReference];
  IOSObjectArray *kids = [ComItextpdfTextPdfSimpleBookmark iterateOutlinesWithComItextpdfTextPdfPdfWriter:self withComItextpdfTextPdfPdfIndirectReference:topRef withJavaUtilList:newBookmarks_ withBoolean:namedAsNames];
  [top putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_() withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(IOSObjectArray_Get(nil_chk(kids), 0), [ComItextpdfTextPdfPdfIndirectReference class])];
  [top putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LAST_() withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(IOSObjectArray_Get(kids, 1), [ComItextpdfTextPdfPdfIndirectReference class])];
  [top putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(kids, 2), [JavaLangInteger class])))) intValue]]];
  (void) [self addToBodyWithComItextpdfTextPdfPdfObject:top withComItextpdfTextPdfPdfIndirectReference:topRef];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTLINES_() withComItextpdfTextPdfPdfObject:topRef];
}


#line 1476
- (void)setPdfVersionWithChar:(jchar)version_ {
  
#line 1477
  [((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk(pdf_version_)) setPdfVersionWithChar:version_];
}


#line 1481
- (void)setAtLeastPdfVersionWithChar:(jchar)version_ {
  [((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk(pdf_version_)) setAtLeastPdfVersionWithChar:version_];
}


#line 1486
- (void)setPdfVersionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)version_ {
  
#line 1487
  [((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk(pdf_version_)) setPdfVersionWithComItextpdfTextPdfPdfName:version_];
}


#line 1494
- (void)addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:(ComItextpdfTextPdfPdfDeveloperExtension *)de {
  
#line 1495
  [((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk(pdf_version_)) addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:de];
}


#line 1502
- (ComItextpdfTextPdfInternalPdfVersionImp *)getPdfVersion {
  
#line 1503
  return pdf_version_;
}


#line 1571
- (void)setViewerPreferencesWithInt:(jint)preferences {
  
#line 1572
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setViewerPreferencesWithInt:preferences];
}


#line 1576
- (void)addViewerPreferenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                         withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addViewerPreferenceWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
}


#line 1586
- (void)setPageLabelsWithComItextpdfTextPdfPdfPageLabels:(ComItextpdfTextPdfPdfPageLabels *)pageLabels {
  
#line 1587
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setPageLabelsWithComItextpdfTextPdfPdfPageLabels:pageLabels];
}


#line 1603
- (void)addNamedDestinationsWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withInt:(jint)page_offset {
  
#line 1604
  jint page;
  NSString *dest;
  ComItextpdfTextPdfPdfDestination *destination;
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) {
    dest = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    page = [JavaLangInteger parseIntWithNSString:[dest substring:0 endIndex:[((NSString *) nil_chk(dest)) indexOfString:@" "]]];
    destination = [[ComItextpdfTextPdfPdfDestination alloc] initWithNSString:[dest substring:[dest indexOfString:@" "] + 1]];
    [self addNamedDestinationWithNSString:[entry_ getKey] withInt:page + page_offset withComItextpdfTextPdfPdfDestination:destination];
  }
}


#line 1622
- (void)addNamedDestinationWithNSString:(NSString *)name
                                withInt:(jint)page
   withComItextpdfTextPdfPdfDestination:(ComItextpdfTextPdfPdfDestination *)dest {
  
#line 1623
  [((ComItextpdfTextPdfPdfDestination *) nil_chk(dest)) addPageWithComItextpdfTextPdfPdfIndirectReference:[self getPageReferenceWithInt:page]];
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) localDestinationWithNSString:name withComItextpdfTextPdfPdfDestination:dest];
}


#line 1632
- (void)addJavaScriptWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)js {
  
#line 1633
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addJavaScriptWithComItextpdfTextPdfPdfAction:js];
}


#line 1644
- (void)addJavaScriptWithNSString:(NSString *)code
                      withBoolean:(jboolean)unicode {
  
#line 1645
  [self addJavaScriptWithComItextpdfTextPdfPdfAction:[ComItextpdfTextPdfPdfAction javaScriptWithNSString:code withComItextpdfTextPdfPdfWriter:self withBoolean:unicode]];
}


#line 1653
- (void)addJavaScriptWithNSString:(NSString *)code {
  
#line 1654
  [self addJavaScriptWithNSString:code withBoolean:NO];
}


#line 1662
- (void)addJavaScriptWithNSString:(NSString *)name
  withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)js {
  
#line 1663
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addJavaScriptWithNSString:name withComItextpdfTextPdfPdfAction:js];
}


#line 1675
- (void)addJavaScriptWithNSString:(NSString *)name
                     withNSString:(NSString *)code
                      withBoolean:(jboolean)unicode {
  
#line 1676
  [self addJavaScriptWithNSString:name withComItextpdfTextPdfPdfAction:[ComItextpdfTextPdfPdfAction javaScriptWithNSString:code withComItextpdfTextPdfPdfWriter:self withBoolean:unicode]];
}


#line 1685
- (void)addJavaScriptWithNSString:(NSString *)name
                     withNSString:(NSString *)code {
  
#line 1686
  [self addJavaScriptWithNSString:name withNSString:code withBoolean:NO];
}


#line 1699
- (void)addFileAttachmentWithNSString:(NSString *)description_
                        withByteArray:(IOSByteArray *)fileStore
                         withNSString:(NSString *)file
                         withNSString:(NSString *)fileDisplay {
  
#line 1700
  [self addFileAttachmentWithNSString:description_ withComItextpdfTextPdfPdfFileSpecification:[ComItextpdfTextPdfPdfFileSpecification fileEmbeddedWithComItextpdfTextPdfPdfWriter:self withNSString:file withNSString:fileDisplay withByteArray:fileStore]];
}


#line 1709
- (void)addFileAttachmentWithNSString:(NSString *)description_
withComItextpdfTextPdfPdfFileSpecification:(ComItextpdfTextPdfPdfFileSpecification *)fs {
  
#line 1710
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addFileAttachmentWithNSString:description_ withComItextpdfTextPdfPdfFileSpecification:fs];
}


#line 1718
- (void)addFileAttachmentWithComItextpdfTextPdfPdfFileSpecification:(ComItextpdfTextPdfPdfFileSpecification *)fs {
  
#line 1719
  [self addFileAttachmentWithNSString:nil withComItextpdfTextPdfPdfFileSpecification:fs];
}


#line 1736
- (void)setOpenActionWithNSString:(NSString *)name {
  
#line 1737
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setOpenActionWithNSString:name];
}


#line 1741
- (void)setOpenActionWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setOpenActionWithComItextpdfTextPdfPdfAction:action];
}


#line 1746
- (void)setAdditionalActionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)actionType
                         withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 1747
  if (!([((ComItextpdfTextPdfPdfName *) nil_chk(actionType)) isEqual:ComItextpdfTextPdfPdfWriter_DOCUMENT_CLOSE_] ||
#line 1748
  [actionType isEqual:ComItextpdfTextPdfPdfWriter_WILL_SAVE_] ||
#line 1749
  [actionType isEqual:ComItextpdfTextPdfPdfWriter_DID_SAVE_] ||
#line 1750
  [actionType isEqual:ComItextpdfTextPdfPdfWriter_WILL_PRINT_] ||
#line 1751
  [actionType isEqual:ComItextpdfTextPdfPdfWriter_DID_PRINT_])) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.additional.action.type.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [actionType description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addAdditionalActionWithComItextpdfTextPdfPdfName:actionType withComItextpdfTextPdfPdfAction:action];
}


#line 1763
- (void)setCollectionWithComItextpdfTextPdfCollectionPdfCollection:(ComItextpdfTextPdfCollectionPdfCollection *)collection {
  [self setAtLeastPdfVersionWithChar:ComItextpdfTextPdfPdfWriter_VERSION_1_7];
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setCollectionWithComItextpdfTextPdfCollectionPdfCollection:collection];
}


#line 1776
- (ComItextpdfTextPdfPdfAcroForm *)getAcroForm {
  
#line 1777
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getAcroForm];
}


#line 1781
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot];
}

- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot
                                                 withInt:(jint)page {
  
#line 1786
  [self addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot];
}


#line 1790
- (void)addCalculationOrderWithComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)annot {
  
#line 1791
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addCalculationOrderWithComItextpdfTextPdfPdfFormField:annot];
}


#line 1795
- (void)setSigFlagsWithInt:(jint)f {
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setSigFlagsWithInt:f];
}

- (void)setLanguageWithNSString:(NSString *)language {
  
#line 1800
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setLanguageWithNSString:language];
}


#line 1812
- (void)setXmpMetadataWithByteArray:(IOSByteArray *)xmpMetadata {
  
#line 1813
  self->xmpMetadata_ = xmpMetadata;
}


#line 1821
- (void)setPageXmpMetadataWithByteArray:(IOSByteArray *)xmpMetadata {
  
#line 1822
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setXmpMetadataWithByteArray:xmpMetadata];
}

- (ComItextpdfTextXmlXmpXmpWriter *)getXmpWriter {
  
#line 1828
  return xmpWriter_;
}


#line 1836
- (void)createXmpMetadata {
  
#line 1837
  @try {
    xmpWriter_ = [self createXmpWriterWithJavaIoByteArrayOutputStream:nil withComItextpdfTextPdfPdfDictionary:[((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getInfo]];
    if ([self isTagged]) {
      @try {
        [((id<ComItextpdfXmpXMPMeta>) nil_chk([((ComItextpdfTextXmlXmpXmpWriter *) nil_chk(xmpWriter_)) getXmpMeta])) setPropertyIntegerWithNSString:ComItextpdfXmpXMPConst_get_NS_PDFUA_ID_() withNSString:ComItextpdfTextXmlXmpPdfProperties_get_PART_() withInt:1 withComItextpdfXmpOptionsPropertyOptions:[[ComItextpdfXmpOptionsPropertyOptions alloc] initWithInt:ComItextpdfXmpOptionsPropertyOptions_SEPARATE_NODE]];
      }
      @catch (
#line 1842
      ComItextpdfXmpXMPException *e) {
        @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
      }
    }
    xmpMetadata_ = nil;
  }
  @catch (
#line 1847
  JavaIoIOException *ioe) {
    [((JavaIoIOException *) nil_chk(ioe)) printStackTrace];
  }
}


#line 1863
- (id<ComItextpdfTextPdfInterfacesPdfIsoConformance>)initPdfIsoConformance {
  
#line 1864
  return [[ComItextpdfTextPdfInternalPdfXConformanceImp alloc] initWithComItextpdfTextPdfPdfWriter:self];
}


#line 1868
- (void)setPDFXConformanceWithInt:(jint)pdfx {
  if (!([(id) pdfIsoConformance_ isKindOfClass:[ComItextpdfTextPdfInternalPdfXConformanceImp class]]))
#line 1870
  return;
  if ([((id<ComItextpdfTextPdfInterfacesPdfXConformance>) nil_chk(((id<ComItextpdfTextPdfInterfacesPdfXConformance>) check_protocol_cast(pdfIsoConformance_, @protocol(ComItextpdfTextPdfInterfacesPdfXConformance))))) getPDFXConformance] == pdfx)
#line 1872
  return;
  if ([((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) isOpen])
#line 1874
  @throw [[ComItextpdfTextPdfPdfXConformanceException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"pdfx.conformance.can.only.be.set.before.opening.the.document" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (crypto_ != nil)
#line 1876
  @throw [[ComItextpdfTextPdfPdfXConformanceException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"a.pdfx.conforming.document.cannot.be.encrypted" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (pdfx != ComItextpdfTextPdfPdfWriter_PDFXNONE)
#line 1878
  [self setPdfVersionWithChar:ComItextpdfTextPdfPdfWriter_VERSION_1_3];
  [((id<ComItextpdfTextPdfInterfacesPdfXConformance>) nil_chk(((id<ComItextpdfTextPdfInterfacesPdfXConformance>) check_protocol_cast(pdfIsoConformance_, @protocol(ComItextpdfTextPdfInterfacesPdfXConformance))))) setPDFXConformanceWithInt:pdfx];
}


#line 1883
- (jint)getPDFXConformance {
  
#line 1884
  if ([(id) pdfIsoConformance_ isKindOfClass:[ComItextpdfTextPdfInternalPdfXConformanceImp class]])
#line 1885
  return [((id<ComItextpdfTextPdfInterfacesPdfXConformance>) nil_chk(((id<ComItextpdfTextPdfInterfacesPdfXConformance>) check_protocol_cast(pdfIsoConformance_, @protocol(ComItextpdfTextPdfInterfacesPdfXConformance))))) getPDFXConformance];
  else
#line 1887
  return ComItextpdfTextPdfPdfWriter_PDFXNONE;
}


#line 1891
- (jboolean)isPdfX {
  
#line 1892
  if ([(id) pdfIsoConformance_ isKindOfClass:[ComItextpdfTextPdfInternalPdfXConformanceImp class]])
#line 1893
  return [((id<ComItextpdfTextPdfInterfacesPdfXConformance>) nil_chk(((id<ComItextpdfTextPdfInterfacesPdfXConformance>) check_protocol_cast(pdfIsoConformance_, @protocol(ComItextpdfTextPdfInterfacesPdfXConformance))))) isPdfX];
  else
#line 1895
  return NO;
}

- (jboolean)isPdfIso {
  
#line 1903
  return [((id<ComItextpdfTextPdfInterfacesPdfIsoConformance>) nil_chk(pdfIsoConformance_)) isPdfIso];
}


#line 1919
- (void)setOutputIntentsWithNSString:(NSString *)outputConditionIdentifier
                        withNSString:(NSString *)outputCondition
                        withNSString:(NSString *)registryName
                        withNSString:(NSString *)info
   withComItextpdfTextPdfICC_Profile:(ComItextpdfTextPdfICC_Profile *)colorProfile {
  
#line 1920
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:self withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_OUTPUTINTENT withId:colorProfile];
  (void) [self getExtraCatalog];
  ComItextpdfTextPdfPdfDictionary *out = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTINTENT_()];
  if (outputCondition != nil)
#line 1924
  [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTCONDITION_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:outputCondition withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
  if (outputConditionIdentifier != nil)
#line 1926
  [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTCONDITIONIDENTIFIER_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:outputConditionIdentifier withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
  if (registryName != nil)
#line 1928
  [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REGISTRYNAME_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:registryName withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
  if (info != nil)
#line 1930
  [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INFO_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:info withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
  if (colorProfile != nil) {
    ComItextpdfTextPdfPdfStream *stream = [[ComItextpdfTextPdfPdfICCBased alloc] initWithComItextpdfTextPdfICC_Profile:colorProfile withInt:compressionLevel_];
    [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESTOUTPUTPROFILE_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:stream])) getIndirectReference]];
  }
  
#line 1936
  [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_GTS_PDFX_()];
  
#line 1938
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(extraCatalog_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTINTENTS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:out]];
  self->colorProfile_ = colorProfile;
}


#line 1956
- (void)setOutputIntentsWithNSString:(NSString *)outputConditionIdentifier
                        withNSString:(NSString *)outputCondition
                        withNSString:(NSString *)registryName
                        withNSString:(NSString *)info
                       withByteArray:(IOSByteArray *)destOutputProfile {
  
#line 1957
  ComItextpdfTextPdfICC_Profile *colorProfile = destOutputProfile == nil ? nil : [ComItextpdfTextPdfICC_Profile getInstanceWithByteArray:destOutputProfile];
  [self setOutputIntentsWithNSString:outputConditionIdentifier withNSString:outputCondition withNSString:registryName withNSString:info withComItextpdfTextPdfICC_Profile:colorProfile];
}


#line 1972
- (jboolean)setOutputIntentsWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                withBoolean:(jboolean)checkExistence {
  
#line 1973
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog];
  ComItextpdfTextPdfPdfArray *outs = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTINTENTS_()];
  if (outs == nil)
#line 1976
  return NO;
  if ([((ComItextpdfTextPdfPdfArray *) nil_chk(outs)) isEmpty])
#line 1978
  return NO;
  ComItextpdfTextPdfPdfDictionary *out = [outs getAsDictWithInt:0];
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(out)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()]];
  if (obj == nil || ![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_GTS_PDFX_())) isEqual:obj])
#line 1982
  return NO;
  if (checkExistence)
#line 1984
  return YES;
  ComItextpdfTextPdfPRStream *stream = (ComItextpdfTextPdfPRStream *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[out getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESTOUTPUTPROFILE_()]], [ComItextpdfTextPdfPRStream class]);
  IOSByteArray *destProfile = nil;
  if (stream != nil) {
    destProfile = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:stream];
  }
  [self setOutputIntentsWithNSString:[ComItextpdfTextPdfPdfWriter getNameStringWithComItextpdfTextPdfPdfDictionary:out withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTCONDITIONIDENTIFIER_()] withNSString:[ComItextpdfTextPdfPdfWriter getNameStringWithComItextpdfTextPdfPdfDictionary:out withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTCONDITION_()] withNSString:
#line 1991
  [ComItextpdfTextPdfPdfWriter getNameStringWithComItextpdfTextPdfPdfDictionary:out withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REGISTRYNAME_()] withNSString:[ComItextpdfTextPdfPdfWriter getNameStringWithComItextpdfTextPdfPdfDictionary:out withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INFO_()] withByteArray:destProfile];
  return YES;
}


#line 1995
+ (NSString *)getNameStringWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic
                                 withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 1996
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:key]];
  if (obj == nil || ![obj isString])
#line 1998
  return nil;
  return [((ComItextpdfTextPdfPdfString *) nil_chk(((ComItextpdfTextPdfPdfString *) check_class_cast(obj, [ComItextpdfTextPdfPdfString class])))) toUnicodeString];
}


#line 2111
- (ComItextpdfTextPdfPdfEncryption *)getEncryption {
  
#line 2112
  return crypto_;
}


#line 2116
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                           withInt:(jint)encryptionType {
  if ([((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) isOpen])
#line 2118
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"encryption.can.only.be.added.before.opening.the.document" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  crypto_ = [[ComItextpdfTextPdfPdfEncryption alloc] init];
  [crypto_ setCryptoModeWithInt:encryptionType withInt:0];
  [crypto_ setupAllKeysWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions];
}


#line 2125
- (void)setEncryptionWithJavaSecurityCertCertificateArray:(IOSObjectArray *)certs
                                             withIntArray:(IOSIntArray *)permissions
                                                  withInt:(jint)encryptionType {
  
#line 2126
  if ([((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) isOpen])
#line 2127
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"encryption.can.only.be.added.before.opening.the.document" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  crypto_ = [[ComItextpdfTextPdfPdfEncryption alloc] init];
  if (certs != nil) {
    for (jint i = 0; i < certs->size_; i++) {
      [crypto_ addRecipientWithJavaSecurityCertCertificate:IOSObjectArray_Get(certs, i) withInt:IOSIntArray_Get(nil_chk(permissions), i)];
    }
  }
  [crypto_ setCryptoModeWithInt:encryptionType withInt:0];
  (void) [crypto_ getEncryptionDictionary];
}


#line 2153
- (void)setEncryptionWithByteArray:(IOSByteArray *)userPassword
                     withByteArray:(IOSByteArray *)ownerPassword
                           withInt:(jint)permissions
                       withBoolean:(jboolean)strength128Bits {
  
#line 2154
  [self setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withInt:strength128Bits ? ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_128 : ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_40];
}


#line 2172
- (void)setEncryptionWithBoolean:(jboolean)strength
                    withNSString:(NSString *)userPassword
                    withNSString:(NSString *)ownerPassword
                         withInt:(jint)permissions {
  
#line 2173
  [self setEncryptionWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:userPassword] withByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:ownerPassword] withInt:permissions withInt:strength ? ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_128 : ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_40];
}


#line 2192
- (void)setEncryptionWithInt:(jint)encryptionType
                withNSString:(NSString *)userPassword
                withNSString:(NSString *)ownerPassword
                     withInt:(jint)permissions {
  
#line 2193
  [self setEncryptionWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:userPassword] withByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:ownerPassword] withInt:permissions withInt:encryptionType];
}


#line 2205
- (jboolean)isFullCompression {
  
#line 2206
  return self->fullCompression_;
}


#line 2214
- (void)setFullCompression {
  
#line 2215
  if (open__)
#line 2216
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"you.can.t.set.the.full.compression.if.the.document.is.already.open" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  self->fullCompression_ = YES;
  [self setAtLeastPdfVersionWithChar:ComItextpdfTextPdfPdfWriter_VERSION_1_5];
}


#line 2232
- (jint)getCompressionLevel {
  
#line 2233
  return compressionLevel_;
}


#line 2241
- (void)setCompressionLevelWithInt:(jint)compressionLevel {
  
#line 2242
  if (compressionLevel < ComItextpdfTextPdfPdfStream_NO_COMPRESSION || compressionLevel > ComItextpdfTextPdfPdfStream_BEST_COMPRESSION)
#line 2243
  self->compressionLevel_ = ComItextpdfTextPdfPdfStream_DEFAULT_COMPRESSION;
  else
#line 2245
  self->compressionLevel_ = compressionLevel;
}


#line 2264
- (ComItextpdfTextPdfFontDetails *)addSimpleWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf {
  
#line 2265
  ComItextpdfTextPdfFontDetails *ret = [((JavaUtilLinkedHashMap *) nil_chk(documentFonts_)) getWithId:bf];
  if (ret == nil) {
    [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:self withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_FONT withId:bf];
    if ([((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getFontType] == ComItextpdfTextPdfBaseFont_FONT_TYPE_DOCUMENT) {
      ret = [[ComItextpdfTextPdfFontDetails alloc] initWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("CI", 'F', fontNumber_++)] withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfDocumentFont *) check_class_cast(bf, [ComItextpdfTextPdfDocumentFont class])) getIndirectReference] withComItextpdfTextPdfBaseFont:bf];
    }
    else {
      
#line 2271
      ret = [[ComItextpdfTextPdfFontDetails alloc] initWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("CI", 'F', fontNumber_++)] withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference] withComItextpdfTextPdfBaseFont:bf];
    }
    (void) [documentFonts_ putWithId:bf withId:ret];
  }
  return ret;
}


#line 2278
- (void)eliminateFontSubsetWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)fonts {
  
#line 2279
  for (id __strong element in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(documentFonts_)) values])) {
    ComItextpdfTextPdfFontDetails *ft = (ComItextpdfTextPdfFontDetails *) check_class_cast(element, [ComItextpdfTextPdfFontDetails class]);
    if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(fonts)) getWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfFontDetails *) nil_chk(ft)) getFontName]] != nil)
#line 2282
    [ft setSubsetWithBoolean:NO];
  }
}


#line 2302
- (ComItextpdfTextPdfPdfName *)addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_
                                                          withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)forcedName {
  
#line 2303
  ComItextpdfTextPdfPdfIndirectReference *ref = [((ComItextpdfTextPdfPdfTemplate *) nil_chk(template_)) getIndirectReference];
  IOSObjectArray *obj = [((JavaUtilHashMap *) nil_chk(formXObjects_)) getWithId:ref];
  ComItextpdfTextPdfPdfName *name = nil;
  @try {
    if (obj == nil) {
      if (forcedName == nil) {
        name = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$I", @"Xf", formXObjectsCounter_)];
        ++formXObjectsCounter_;
      }
      else
#line 2313
      name = forcedName;
      if ([template_ getType] == ComItextpdfTextPdfPdfTemplate_TYPE_IMPORTED) {
        
#line 2316
        ComItextpdfTextPdfPdfImportedPage *ip = (ComItextpdfTextPdfPdfImportedPage *) check_class_cast(template_, [ComItextpdfTextPdfPdfImportedPage class]);
        ComItextpdfTextPdfPdfReader *r = [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk([ip getPdfReaderInstance])) getReader];
        if (![((JavaUtilHashMap *) nil_chk(readerInstances_)) containsKeyWithId:r]) {
          (void) [readerInstances_ putWithId:r withId:[ip getPdfReaderInstance]];
        }
        template_ = nil;
      }
      (void) [formXObjects_ putWithId:ref withId:[IOSObjectArray arrayWithObjects:(id[]){ name, template_ } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
    }
    else
#line 2326
    name = (ComItextpdfTextPdfPdfName *) check_class_cast(IOSObjectArray_Get(obj, 0), [ComItextpdfTextPdfPdfName class]);
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
  return name;
}


#line 2342
- (void)releaseTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)tp {
  
#line 2343
  ComItextpdfTextPdfPdfIndirectReference *ref = [((ComItextpdfTextPdfPdfTemplate *) nil_chk(tp)) getIndirectReference];
  IOSObjectArray *objs = [((JavaUtilHashMap *) nil_chk(formXObjects_)) getWithId:ref];
  if (objs == nil || IOSObjectArray_Get(objs, 1) == nil)
#line 2346
  return;
  ComItextpdfTextPdfPdfTemplate *template_ = (ComItextpdfTextPdfPdfTemplate *) check_class_cast(IOSObjectArray_Get(nil_chk(objs), 1), [ComItextpdfTextPdfPdfTemplate class]);
  if ([[((ComItextpdfTextPdfPdfTemplate *) nil_chk(template_)) getIndirectReference] isKindOfClass:[ComItextpdfTextPdfPRIndirectReference class]])
#line 2349
  return;
  if ([template_ getType] == ComItextpdfTextPdfPdfTemplate_TYPE_TEMPLATE) {
    (void) [self addToBodyWithComItextpdfTextPdfPdfObject:[template_ getFormXObjectWithInt:compressionLevel_] withComItextpdfTextPdfPdfIndirectReference:[template_ getIndirectReference]];
    IOSObjectArray_Set(objs, 1, nil);
  }
}


#line 2373
- (ComItextpdfTextPdfPdfImportedPage *)getImportedPageWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                                              withInt:(jint)pageNumber {
  
#line 2374
  return [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk([self getPdfReaderInstanceWithComItextpdfTextPdfPdfReader:reader])) getImportedPageWithInt:pageNumber];
}


#line 2385
- (ComItextpdfTextPdfPdfReaderInstance *)getPdfReaderInstanceWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 2386
  ComItextpdfTextPdfPdfReaderInstance *inst = [((JavaUtilHashMap *) nil_chk(readerInstances_)) getWithId:reader];
  if (inst == nil) {
    inst = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getPdfReaderInstanceWithComItextpdfTextPdfPdfWriter:self];
    (void) [readerInstances_ putWithId:reader withId:inst];
  }
  return inst;
}


#line 2403
- (void)freeReaderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 2404
  currentPdfReaderInstance_ = [((JavaUtilHashMap *) nil_chk(readerInstances_)) getWithId:reader];
  if (currentPdfReaderInstance_ == nil)
#line 2406
  return;
  [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk(currentPdfReaderInstance_)) writeAllPages];
  currentPdfReaderInstance_ = nil;
  (void) [readerInstances_ removeWithId:reader];
}


#line 2421
- (jlong)getCurrentDocumentSize {
  
#line 2422
  return [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) offset] + [body_ size] * 20 + (jint) 0x48;
}

- (jint)getNewObjectNumberWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                  withInt:(jint)number
                                                  withInt:(jint)generation {
  
#line 2428
  if (currentPdfReaderInstance_ == nil) {
    currentPdfReaderInstance_ = [self getPdfReaderInstanceWithComItextpdfTextPdfPdfReader:reader];
  }
  return [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk(currentPdfReaderInstance_)) getNewObjectNumberWithInt:number withInt:generation];
}


#line 2434
- (ComItextpdfTextPdfRandomAccessFileOrArray *)getReaderFileWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 2435
  return [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk(currentPdfReaderInstance_)) getReaderFile];
}


#line 2446
- (ComItextpdfTextPdfPdfName *)getColorspaceName {
  
#line 2447
  return [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$I", @"CS", colorNumber_++)];
}


#line 2456
- (ComItextpdfTextPdfColorDetails *)addSimpleWithComItextpdfTextPdfPdfSpotColor:(ComItextpdfTextPdfPdfSpotColor *)spc {
  
#line 2457
  ComItextpdfTextPdfColorDetails *ret = [((JavaUtilHashMap *) nil_chk(documentColors_)) getWithId:spc];
  if (ret == nil) {
    ret = [[ComItextpdfTextPdfColorDetails alloc] initWithComItextpdfTextPdfPdfName:[self getColorspaceName] withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference] withComItextpdfTextPdfPdfSpotColor:spc];
    (void) [documentColors_ putWithId:spc withId:ret];
  }
  return ret;
}


#line 2473
- (ComItextpdfTextPdfPdfName *)addSimplePatternWithComItextpdfTextPdfPdfPatternPainter:(ComItextpdfTextPdfPdfPatternPainter *)painter {
  
#line 2474
  ComItextpdfTextPdfPdfName *name = [((JavaUtilHashMap *) nil_chk(documentPatterns_)) getWithId:painter];
  @try {
    if (name == nil) {
      name = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("CI", 'P', patternNumber_)];
      ++patternNumber_;
      (void) [documentPatterns_ putWithId:painter withId:name];
    }
  }
  @catch (
#line 2481
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
  return name;
}


#line 2491
- (void)addSimpleShadingPatternWithComItextpdfTextPdfPdfShadingPattern:(ComItextpdfTextPdfPdfShadingPattern *)shading {
  if (![((JavaUtilHashSet *) nil_chk(documentShadingPatterns_)) containsWithId:shading]) {
    [((ComItextpdfTextPdfPdfShadingPattern *) nil_chk(shading)) setNameWithInt:patternNumber_];
    ++patternNumber_;
    [documentShadingPatterns_ addWithId:shading];
    [self addSimpleShadingWithComItextpdfTextPdfPdfShading:[shading getShading]];
  }
}


#line 2504
- (void)addSimpleShadingWithComItextpdfTextPdfPdfShading:(ComItextpdfTextPdfPdfShading *)shading {
  
#line 2505
  if (![((JavaUtilHashSet *) nil_chk(documentShadings_)) containsWithId:shading]) {
    [documentShadings_ addWithId:shading];
    [((ComItextpdfTextPdfPdfShading *) nil_chk(shading)) setNameWithInt:[documentShadings_ size]];
  }
}


#line 2515
- (IOSObjectArray *)addSimpleExtGStateWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)gstate {
  
#line 2516
  if (![((JavaUtilHashMap *) nil_chk(documentExtGState_)) containsKeyWithId:gstate]) {
    (void) [documentExtGState_ putWithId:gstate withId:[IOSObjectArray arrayWithObjects:(id[]){ [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$I", @"GS", ([documentExtGState_ size] + 1))], [self getPdfIndirectReference] } count:2 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfObject class]]]];
  }
  return [documentExtGState_ getWithId:gstate];
}


#line 2525
- (IOSObjectArray *)addSimplePropertyWithId:(id)prop
 withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)refi {
  
#line 2526
  if (![((JavaUtilHashMap *) nil_chk(documentProperties_)) containsKeyWithId:prop]) {
    if ([prop conformsToProtocol: @protocol(ComItextpdfTextPdfPdfOCG)])
#line 2528
    [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:self withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_LAYER withId:prop];
    (void) [documentProperties_ putWithId:prop withId:[IOSObjectArray arrayWithObjects:(id[]){ [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$I", @"Pr", ([documentProperties_ size] + 1))], refi } count:2 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfObject class]]]];
  }
  return [documentProperties_ getWithId:prop];
}


#line 2534
- (jboolean)propertyExistsWithId:(id)prop {
  
#line 2535
  return [((JavaUtilHashMap *) nil_chk(documentProperties_)) containsKeyWithId:prop];
}


#line 2550
- (void)setTagged {
  
#line 2551
  [self setTaggedWithInt:ComItextpdfTextPdfPdfWriter_markInlineElementsOnly];
}


#line 2554
- (void)setTaggedWithInt:(jint)taggingMode {
  
#line 2555
  if (open__)
#line 2556
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"tagging.must.be.set.before.opening.the.document" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  tagged_ = YES;
  self->taggingMode_ = taggingMode;
}


#line 2561
- (jboolean)needToBeMarkedInContentWithComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)element {
  
#line 2562
  if ((taggingMode_ & ComItextpdfTextPdfPdfWriter_markInlineElementsOnly) != 0) {
    if ([((id<ComItextpdfTextPdfInterfacesIAccessibleElement>) nil_chk(element)) isInline] || [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_ARTIFACT_())) isEqual:[element getRole]]) {
      return YES;
    }
    return NO;
  }
  return YES;
}


#line 2571
- (void)checkElementRoleWithComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)element
                        withComItextpdfTextPdfInterfacesIAccessibleElement:(id<ComItextpdfTextPdfInterfacesIAccessibleElement>)parent {
  
#line 2572
  if (parent != nil && ([parent getRole] == nil || [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_ARTIFACT_())) isEqual:[parent getRole]]))
#line 2573
  [((id<ComItextpdfTextPdfInterfacesIAccessibleElement>) nil_chk(element)) setRoleWithComItextpdfTextPdfPdfName:nil];
  else if ((taggingMode_ & ComItextpdfTextPdfPdfWriter_markInlineElementsOnly) != 0) {
    if ([((id<ComItextpdfTextPdfInterfacesIAccessibleElement>) nil_chk(element)) isInline] && [element getRole] == nil && (parent == nil || ![parent isInline]))
#line 2576
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"inline.elements.with.role.null.are.not.allowed" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}


#line 2584
- (jboolean)isTagged {
  return tagged_;
}


#line 2592
- (void)flushTaggedObjects {
}


#line 2594
- (void)flushAcroFields {
}


#line 2600
- (ComItextpdfTextPdfPdfStructureTreeRoot *)getStructureTreeRoot {
  
#line 2601
  if (tagged_ && structureTreeRoot_ == nil)
#line 2602
  structureTreeRoot_ = [[ComItextpdfTextPdfPdfStructureTreeRoot alloc] initWithComItextpdfTextPdfPdfWriter:self];
  return structureTreeRoot_;
}


#line 2628
- (ComItextpdfTextPdfPdfOCProperties *)getOCProperties {
  
#line 2629
  [self fillOCPropertiesWithBoolean:YES];
  return OCProperties_;
}


#line 2641
- (void)addOCGRadioGroupWithJavaUtilArrayList:(JavaUtilArrayList *)group {
  
#line 2642
  ComItextpdfTextPdfPdfArray *ar = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(group)) size]; ++k) {
    ComItextpdfTextPdfPdfLayer *layer = [group getWithInt:k];
    if ([((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) getTitle] == nil)
#line 2646
    [ar addWithComItextpdfTextPdfPdfObject:[layer getRef]];
  }
  if ([ar size] == 0)
#line 2649
  return;
  [((ComItextpdfTextPdfPdfArray *) nil_chk(OCGRadioGroup_)) addWithComItextpdfTextPdfPdfObject:ar];
}


#line 2661
- (void)lockLayerWithComItextpdfTextPdfPdfLayer:(ComItextpdfTextPdfPdfLayer *)layer {
  
#line 2662
  [((ComItextpdfTextPdfPdfArray *) nil_chk(OCGLocked_)) addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) getRef]];
}


#line 2665
+ (void)getOCGOrderWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)order
                   withComItextpdfTextPdfPdfLayer:(ComItextpdfTextPdfPdfLayer *)layer {
  
#line 2666
  if (![((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) isOnPanel])
#line 2667
  return;
  if ([layer getTitle] == nil)
#line 2669
  [((ComItextpdfTextPdfPdfArray *) nil_chk(order)) addWithComItextpdfTextPdfPdfObject:[layer getRef]];
  JavaUtilArrayList *children = [layer getChildren];
  if (children == nil)
#line 2672
  return;
  ComItextpdfTextPdfPdfArray *kids = [[ComItextpdfTextPdfPdfArray alloc] init];
  if ([layer getTitle] != nil)
#line 2675
  [kids addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:[layer getTitle] withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(children)) size]; ++k) {
    [ComItextpdfTextPdfPdfWriter getOCGOrderWithComItextpdfTextPdfPdfArray:kids withComItextpdfTextPdfPdfLayer:[children getWithInt:k]];
  }
  if ([kids size] > 0)
#line 2680
  [((ComItextpdfTextPdfPdfArray *) nil_chk(order)) addWithComItextpdfTextPdfPdfObject:kids];
}


#line 2683
- (void)addASEventWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)event
                  withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)category {
  
#line 2684
  ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (id __strong element in nil_chk(documentOCG_)) {
    ComItextpdfTextPdfPdfLayer *layer = (ComItextpdfTextPdfPdfLayer *) check_class_cast(element, [ComItextpdfTextPdfPdfLayer class]);
    ComItextpdfTextPdfPdfDictionary *usage = [((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_USAGE_()];
    if (usage != nil && [usage getWithComItextpdfTextPdfPdfName:category] != nil)
#line 2689
    [arr addWithComItextpdfTextPdfPdfObject:[layer getRef]];
  }
  if ([arr size] == 0)
#line 2692
  return;
  ComItextpdfTextPdfPdfDictionary *d = [((ComItextpdfTextPdfPdfOCProperties *) nil_chk(OCProperties_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()];
  ComItextpdfTextPdfPdfArray *arras = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(d)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()];
  if (arras == nil) {
    arras = [[ComItextpdfTextPdfPdfArray alloc] init];
    [d putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:arras];
  }
  ComItextpdfTextPdfPdfDictionary *as = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [as putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EVENT_() withComItextpdfTextPdfPdfObject:event];
  [as putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CATEGORY_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:category]];
  [as putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCGS_() withComItextpdfTextPdfPdfObject:arr];
  [((ComItextpdfTextPdfPdfArray *) nil_chk(arras)) addWithComItextpdfTextPdfPdfObject:as];
}


#line 2710
- (void)fillOCPropertiesWithBoolean:(jboolean)erase {
  if (OCProperties_ == nil)
#line 2712
  OCProperties_ = [[ComItextpdfTextPdfPdfOCProperties alloc] init];
  if (erase) {
    [((ComItextpdfTextPdfPdfOCProperties *) nil_chk(OCProperties_)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCGS_()];
    [OCProperties_ removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()];
  }
  if ([((ComItextpdfTextPdfPdfOCProperties *) nil_chk(OCProperties_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCGS_()] == nil) {
    ComItextpdfTextPdfPdfArray *gr = [[ComItextpdfTextPdfPdfArray alloc] init];
    for (id __strong element in nil_chk(documentOCG_)) {
      ComItextpdfTextPdfPdfLayer *layer = (ComItextpdfTextPdfPdfLayer *) check_class_cast(element, [ComItextpdfTextPdfPdfLayer class]);
      [gr addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) getRef]];
    }
    [OCProperties_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCGS_() withComItextpdfTextPdfPdfObject:gr];
  }
  if ([OCProperties_ getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()] != nil)
#line 2726
  return;
  JavaUtilArrayList *docOrder = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:documentOCGorder_];
  for (id<JavaUtilIterator> it = [docOrder iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComItextpdfTextPdfPdfLayer *layer = (ComItextpdfTextPdfPdfLayer *) check_class_cast([it next], [ComItextpdfTextPdfPdfLayer class]);
    if ([((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) getParent] != nil)
#line 2731
    [it remove];
  }
  ComItextpdfTextPdfPdfArray *order = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (id __strong element in docOrder) {
    ComItextpdfTextPdfPdfLayer *layer = (ComItextpdfTextPdfPdfLayer *) check_class_cast(element, [ComItextpdfTextPdfPdfLayer class]);
    [ComItextpdfTextPdfPdfWriter getOCGOrderWithComItextpdfTextPdfPdfArray:order withComItextpdfTextPdfPdfLayer:layer];
  }
  ComItextpdfTextPdfPdfDictionary *d = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [OCProperties_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_() withComItextpdfTextPdfPdfObject:d];
  [d putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDER_() withComItextpdfTextPdfPdfObject:order];
  if ([docOrder size] > 0 && ([(id) [docOrder getWithInt:0] isKindOfClass:[ComItextpdfTextPdfPdfLayer class]])) {
    ComItextpdfTextPdfPdfLayer *l = (ComItextpdfTextPdfPdfLayer *) check_class_cast([docOrder getWithInt:0], [ComItextpdfTextPdfPdfLayer class]);
    ComItextpdfTextPdfPdfString *name = [((ComItextpdfTextPdfPdfLayer *) nil_chk(l)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAME_()];
    if (name != nil) {
      [d putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAME_() withComItextpdfTextPdfPdfObject:name];
    }
  }
  ComItextpdfTextPdfPdfArray *gr = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (id __strong element in nil_chk(documentOCG_)) {
    ComItextpdfTextPdfPdfLayer *layer = (ComItextpdfTextPdfPdfLayer *) check_class_cast(element, [ComItextpdfTextPdfPdfLayer class]);
    if (![((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) isOn])
#line 2752
    [gr addWithComItextpdfTextPdfPdfObject:[layer getRef]];
  }
  if ([gr size] > 0)
#line 2755
  [d putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OFF_() withComItextpdfTextPdfPdfObject:gr];
  if ([((ComItextpdfTextPdfPdfArray *) nil_chk(OCGRadioGroup_)) size] > 0)
#line 2757
  [d putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RBGROUPS_() withComItextpdfTextPdfPdfObject:OCGRadioGroup_];
  if ([((ComItextpdfTextPdfPdfArray *) nil_chk(OCGLocked_)) size] > 0)
#line 2759
  [d putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LOCKED_() withComItextpdfTextPdfPdfObject:OCGLocked_];
  [self addASEventWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_VIEW_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ZOOM_()];
  [self addASEventWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_VIEW_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_VIEW_()];
  [self addASEventWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PRINT_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PRINT_()];
  [self addASEventWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EXPORT_() withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EXPORT_()];
  [d putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LISTMODE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_VISIBLEPAGES_()];
}


#line 2767
- (void)registerLayerWithComItextpdfTextPdfPdfOCG:(id<ComItextpdfTextPdfPdfOCG>)layer {
  
#line 2768
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:self withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_LAYER withId:layer];
  if ([(id) layer isKindOfClass:[ComItextpdfTextPdfPdfLayer class]]) {
    ComItextpdfTextPdfPdfLayer *la = (ComItextpdfTextPdfPdfLayer *) check_class_cast(layer, [ComItextpdfTextPdfPdfLayer class]);
    if ([((ComItextpdfTextPdfPdfLayer *) nil_chk(la)) getTitle] == nil) {
      if (![((JavaUtilHashSet *) nil_chk(documentOCG_)) containsWithId:layer]) {
        [documentOCG_ addWithId:layer];
        [((JavaUtilArrayList *) nil_chk(documentOCGorder_)) addWithId:layer];
      }
    }
    else {
      [((JavaUtilArrayList *) nil_chk(documentOCGorder_)) addWithId:layer];
    }
  }
  else
#line 2782
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"only.pdflayer.is.accepted" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 2793
- (ComItextpdfTextRectangle *)getPageSize {
  
#line 2794
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getPageSize];
}


#line 2803
- (void)setCropBoxSizeWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)crop {
  
#line 2804
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setCropBoxSizeWithComItextpdfTextRectangle:crop];
}


#line 2813
- (void)setBoxSizeWithNSString:(NSString *)boxName
  withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)size {
  
#line 2814
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setBoxSizeWithNSString:boxName withComItextpdfTextRectangle:size];
}


#line 2822
- (ComItextpdfTextRectangle *)getBoxSizeWithNSString:(NSString *)boxName {
  
#line 2823
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getBoxSizeWithNSString:boxName];
}


#line 2837
- (ComItextpdfTextRectangle *)getBoxSizeWithNSString:(NSString *)boxName
                        withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)intersectingRectangle {
  
#line 2838
  ComItextpdfTextRectangle *pdfRectangle = [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getBoxSizeWithNSString:boxName];
  
#line 2840
  if (pdfRectangle == nil || intersectingRectangle == nil) {
    return nil;
  }
  
#line 2844
  ComItextpdfAwtGeomRectangle *boxRect = [[ComItextpdfAwtGeomRectangle alloc] initWithComItextpdfTextRectangle:pdfRectangle];
  ComItextpdfAwtGeomRectangle *intRect = [[ComItextpdfAwtGeomRectangle alloc] initWithComItextpdfTextRectangle:intersectingRectangle];
  ComItextpdfAwtGeomRectangle *outRect = [boxRect intersectionWithComItextpdfAwtGeomRectangle:intRect];
  
#line 2848
  if ([((ComItextpdfAwtGeomRectangle *) nil_chk(outRect)) isEmpty]) {
    return nil;
  }
  
#line 2852
  ComItextpdfTextRectangle *output = [[ComItextpdfTextRectangle alloc] initWithFloat:(jfloat) [outRect getX] withFloat:(jfloat) [outRect getY] withFloat:(jfloat) ([outRect getX] + [outRect getWidth]) withFloat:(jfloat) ([outRect getY] + [outRect getHeight])];
  [output normalize];
  return output;
}


#line 2866
- (void)setPageEmptyWithBoolean:(jboolean)pageEmpty {
  
#line 2867
  if (pageEmpty)
#line 2868
  return;
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setPageEmptyWithBoolean:pageEmpty];
}


#line 2877
- (jboolean)isPageEmpty {
  
#line 2878
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) isPageEmpty];
}


#line 2889
- (void)setPageActionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)actionType
                   withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 2890
  if (![((ComItextpdfTextPdfPdfName *) nil_chk(actionType)) isEqual:ComItextpdfTextPdfPdfWriter_PAGE_OPEN_] && ![actionType isEqual:ComItextpdfTextPdfPdfWriter_PAGE_CLOSE_])
#line 2891
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.page.additional.action.type.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [actionType description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setPageActionWithComItextpdfTextPdfPdfName:actionType withComItextpdfTextPdfPdfAction:action];
}


#line 2896
- (void)setDurationWithInt:(jint)seconds {
  
#line 2897
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setDurationWithInt:seconds];
}


#line 2901
- (void)setTransitionWithComItextpdfTextPdfPdfTransition:(ComItextpdfTextPdfPdfTransition *)transition {
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setTransitionWithComItextpdfTextPdfPdfTransition:transition];
}


#line 2913
- (void)setThumbnailWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 2914
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setThumbnailWithComItextpdfTextImage:image];
}


#line 2930
- (ComItextpdfTextPdfPdfDictionary *)getGroup {
  
#line 2931
  return self->group_;
}


#line 2938
- (void)setGroupWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)group {
  
#line 2939
  self->group_ = group;
}


#line 2960
- (jfloat)getSpaceCharRatio {
  
#line 2961
  return spaceCharRatio_;
}


#line 2972
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio {
  
#line 2973
  if (spaceCharRatio < 0.001f)
#line 2974
  self->spaceCharRatio_ = 0.001f;
  else
#line 2976
  self->spaceCharRatio_ = spaceCharRatio;
}


#line 3001
- (void)setRunDirectionWithInt:(jint)runDirection {
  
#line 3002
  if (runDirection < ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI || runDirection > ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL)
#line 3003
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.run.direction.1" withInt:runDirection]];
  self->runDirection_ = runDirection;
}


#line 3011
- (jint)getRunDirection {
  
#line 3012
  return runDirection_;
}


#line 3025
- (void)setUserunitWithFloat:(jfloat)userunit {
  
#line 3026
  if (userunit < 1.0f || userunit > 75000.0f) @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"userunit.should.be.a.value.between.1.and.75000" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  [self addPageDictEntryWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_USERUNIT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:userunit]];
  [self setAtLeastPdfVersionWithChar:ComItextpdfTextPdfPdfWriter_VERSION_1_6];
}


#line 3040
- (ComItextpdfTextPdfPdfDictionary *)getDefaultColorspace {
  
#line 3041
  return defaultColorspace_;
}


#line 3055
- (void)setDefaultColorspaceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                          withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)cs {
  
#line 3056
  if (cs == nil || [cs isNull])
#line 3057
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(defaultColorspace_)) removeWithComItextpdfTextPdfPdfName:key];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(defaultColorspace_)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:cs];
}


#line 3068
- (ComItextpdfTextPdfColorDetails *)addSimplePatternColorspaceWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  
#line 3069
  jint type = [ComItextpdfTextPdfExtendedColor getTypeWithComItextpdfTextBaseColor:color];
  if (type == ComItextpdfTextPdfExtendedColor_TYPE_PATTERN || type == ComItextpdfTextPdfExtendedColor_TYPE_SHADING)
#line 3071
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"an.uncolored.tile.pattern.can.not.have.another.pattern.or.shading.as.color" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  @try {
    switch (type) {
      case ComItextpdfTextPdfExtendedColor_TYPE_RGB:
      if (patternColorspaceRGB_ == nil) {
        patternColorspaceRGB_ = [[ComItextpdfTextPdfColorDetails alloc] initWithComItextpdfTextPdfPdfName:[self getColorspaceName] withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference] withComItextpdfTextPdfPdfSpotColor:nil];
        ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_PATTERN_()];
        [array addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:array withComItextpdfTextPdfPdfIndirectReference:[patternColorspaceRGB_ getIndirectReference]];
      }
      return patternColorspaceRGB_;
      case ComItextpdfTextPdfExtendedColor_TYPE_CMYK:
      if (patternColorspaceCMYK_ == nil) {
        patternColorspaceCMYK_ = [[ComItextpdfTextPdfColorDetails alloc] initWithComItextpdfTextPdfPdfName:[self getColorspaceName] withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference] withComItextpdfTextPdfPdfSpotColor:nil];
        ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_PATTERN_()];
        [array addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICECMYK_()];
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:array withComItextpdfTextPdfPdfIndirectReference:[patternColorspaceCMYK_ getIndirectReference]];
      }
      return patternColorspaceCMYK_;
      case ComItextpdfTextPdfExtendedColor_TYPE_GRAY:
      if (patternColorspaceGRAY_ == nil) {
        patternColorspaceGRAY_ = [[ComItextpdfTextPdfColorDetails alloc] initWithComItextpdfTextPdfPdfName:[self getColorspaceName] withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference] withComItextpdfTextPdfPdfSpotColor:nil];
        ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_PATTERN_()];
        [array addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()];
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:array withComItextpdfTextPdfPdfIndirectReference:[patternColorspaceGRAY_ getIndirectReference]];
      }
      return patternColorspaceGRAY_;
      case ComItextpdfTextPdfExtendedColor_TYPE_SEPARATION:
      {
        
#line 3099
        ComItextpdfTextPdfColorDetails *details = [self addSimpleWithComItextpdfTextPdfPdfSpotColor:[((ComItextpdfTextPdfSpotColor *) nil_chk(((ComItextpdfTextPdfSpotColor *) check_class_cast(color, [ComItextpdfTextPdfSpotColor class])))) getPdfSpotColor]];
        ComItextpdfTextPdfColorDetails *patternDetails = [((JavaUtilHashMap *) nil_chk(documentSpotPatterns_)) getWithId:details];
        if (patternDetails == nil) {
          patternDetails = [[ComItextpdfTextPdfColorDetails alloc] initWithComItextpdfTextPdfPdfName:[self getColorspaceName] withComItextpdfTextPdfPdfIndirectReference:[((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference] withComItextpdfTextPdfPdfSpotColor:nil];
          ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_PATTERN_()];
          [array addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfColorDetails *) nil_chk(details)) getIndirectReference]];
          (void) [self addToBodyWithComItextpdfTextPdfPdfObject:array withComItextpdfTextPdfPdfIndirectReference:[patternDetails getIndirectReference]];
          (void) [documentSpotPatterns_ putWithId:details withId:patternDetails];
        }
        return patternDetails;
      }
      default:
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.color.type" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  @catch (JavaLangException *e) {
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
  }
}

- (jboolean)isStrictImageSequence {
  
#line 3126
  return [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) isStrictImageSequence];
}


#line 3135
- (void)setStrictImageSequenceWithBoolean:(jboolean)strictImageSequence {
  
#line 3136
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) setStrictImageSequenceWithBoolean:strictImageSequence];
}


#line 3143
- (void)clearTextWrap {
  
#line 3144
  [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) clearTextWrap];
}


#line 3163
- (ComItextpdfTextPdfPdfName *)addDirectImageSimpleWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 3164
  return [self addDirectImageSimpleWithComItextpdfTextImage:image withComItextpdfTextPdfPdfIndirectReference:nil];
}


#line 3178
- (ComItextpdfTextPdfPdfName *)addDirectImageSimpleWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                                 withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)fixedRef {
  
#line 3179
  ComItextpdfTextPdfPdfName *name;
  
#line 3181
  if ([((JavaUtilHashMap *) nil_chk(images_)) containsKeyWithId:[((ComItextpdfTextImage *) nil_chk(image)) getMySerialId]]) {
    name = [images_ getWithId:[image getMySerialId]];
  }
  else {
    
#line 3186
    if ([image isImgTemplate]) {
      name = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$I", @"img", [images_ size])];
      if ([image isKindOfClass:[ComItextpdfTextImgWMF class]]) {
        @try {
          ComItextpdfTextImgWMF *wmf = (ComItextpdfTextImgWMF *) check_class_cast(image, [ComItextpdfTextImgWMF class]);
          [wmf readWMFWithComItextpdfTextPdfPdfTemplate:[ComItextpdfTextPdfPdfTemplate createTemplateWithComItextpdfTextPdfPdfWriter:self withFloat:0 withFloat:0]];
        }
        @catch (JavaLangException *e) {
          @throw [[ComItextpdfTextDocumentException alloc] initWithJavaLangException:e];
        }
      }
    }
    else {
      ComItextpdfTextPdfPdfIndirectReference *dref = [image getDirectReference];
      if (dref != nil) {
        ComItextpdfTextPdfPdfName *rname = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("$I", @"img", [images_ size])];
        (void) [images_ putWithId:[image getMySerialId] withId:rname];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(imageDictionary_)) putWithComItextpdfTextPdfPdfName:rname withComItextpdfTextPdfPdfObject:dref];
        return rname;
      }
      ComItextpdfTextImage *maskImage = [image getImageMask];
      ComItextpdfTextPdfPdfIndirectReference *maskRef = nil;
      if (maskImage != nil) {
        ComItextpdfTextPdfPdfName *mname = [images_ getWithId:[maskImage getMySerialId]];
        maskRef = [self getImageReferenceWithComItextpdfTextPdfPdfName:mname];
      }
      ComItextpdfTextPdfPdfImage *i = [[ComItextpdfTextPdfPdfImage alloc] initWithComItextpdfTextImage:image withNSString:JreStrcat("$I", @"img", [images_ size]) withComItextpdfTextPdfPdfIndirectReference:maskRef];
      if ([image isKindOfClass:[ComItextpdfTextImgJBIG2 class]]) {
        IOSByteArray *globals = [((ComItextpdfTextImgJBIG2 *) check_class_cast(image, [ComItextpdfTextImgJBIG2 class])) getGlobalBytes];
        if (globals != nil) {
          ComItextpdfTextPdfPdfDictionary *decodeparms = [[ComItextpdfTextPdfPdfDictionary alloc] init];
          [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JBIG2GLOBALS_() withComItextpdfTextPdfPdfObject:[self getReferenceJBIG2GlobalsWithByteArray:globals]];
          [i putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODEPARMS_() withComItextpdfTextPdfPdfObject:decodeparms];
        }
      }
      if ([image hasICCProfile]) {
        ComItextpdfTextPdfPdfICCBased *icc = [[ComItextpdfTextPdfPdfICCBased alloc] initWithComItextpdfTextPdfICC_Profile:[image getICCProfile] withInt:[image getCompressionLevel]];
        ComItextpdfTextPdfPdfIndirectReference *iccRef = [self addWithComItextpdfTextPdfPdfICCBased:icc];
        ComItextpdfTextPdfPdfArray *iccArray = [[ComItextpdfTextPdfPdfArray alloc] init];
        [iccArray addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ICCBASED_()];
        [iccArray addWithComItextpdfTextPdfPdfObject:iccRef];
        ComItextpdfTextPdfPdfArray *colorspace = [i getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_()];
        if (colorspace != nil) {
          if ([colorspace size] > 1 && [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_INDEXED_())) isEqual:[colorspace getPdfObjectWithInt:0]])
#line 3230
          (void) [colorspace setWithInt:1 withComItextpdfTextPdfPdfObject:iccArray];
          else
#line 3232
          [i putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:iccArray];
        }
        else
#line 3235
        [i putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:iccArray];
      }
      (void) [self addWithComItextpdfTextPdfPdfImage:i withComItextpdfTextPdfPdfIndirectReference:fixedRef];
      name = [i name];
    }
    (void) [images_ putWithId:[image getMySerialId] withId:name];
  }
  return name;
}


#line 3254
- (ComItextpdfTextPdfPdfIndirectReference *)addWithComItextpdfTextPdfPdfImage:(ComItextpdfTextPdfPdfImage *)pdfImage
                                   withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)fixedRef {
  
#line 3255
  if (![((ComItextpdfTextPdfPdfDictionary *) nil_chk(imageDictionary_)) containsWithComItextpdfTextPdfPdfName:[((ComItextpdfTextPdfPdfImage *) nil_chk(pdfImage)) name]]) {
    [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:self withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_IMAGE withId:pdfImage];
    if ([fixedRef isKindOfClass:[ComItextpdfTextPdfPRIndirectReference class]]) {
      ComItextpdfTextPdfPRIndirectReference *r2 = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(fixedRef, [ComItextpdfTextPdfPRIndirectReference class]);
      fixedRef = [[ComItextpdfTextPdfPdfIndirectReference alloc] initWithInt:0 withInt:[self getNewObjectNumberWithComItextpdfTextPdfPdfReader:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(r2)) getReader] withInt:[r2 getNumber] withInt:[r2 getGeneration]]];
    }
    @try {
      if (fixedRef == nil)
#line 3263
      fixedRef = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:pdfImage])) getIndirectReference];
      else
#line 3265
      (void) [self addToBodyWithComItextpdfTextPdfPdfObject:pdfImage withComItextpdfTextPdfPdfIndirectReference:fixedRef];
    }
    @catch (JavaIoIOException *ioe) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
    }
    [imageDictionary_ putWithComItextpdfTextPdfPdfName:[pdfImage name] withComItextpdfTextPdfPdfObject:fixedRef];
    return fixedRef;
  }
  return (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([imageDictionary_ getWithComItextpdfTextPdfPdfName:[pdfImage name]], [ComItextpdfTextPdfPdfIndirectReference class]);
}


#line 3283
- (ComItextpdfTextPdfPdfIndirectReference *)getImageReferenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)name {
  
#line 3284
  return (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(imageDictionary_)) getWithComItextpdfTextPdfPdfName:name], [ComItextpdfTextPdfPdfIndirectReference class]);
}


#line 3287
- (ComItextpdfTextPdfPdfIndirectReference *)addWithComItextpdfTextPdfPdfICCBased:(ComItextpdfTextPdfPdfICCBased *)icc {
  
#line 3288
  ComItextpdfTextPdfPdfIndirectObject *object;
  @try {
    object = [self addToBodyWithComItextpdfTextPdfPdfObject:icc];
  }
  @catch (JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
  return [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(object)) getIndirectReference];
}


#line 3310
- (ComItextpdfTextPdfPdfIndirectReference *)getReferenceJBIG2GlobalsWithByteArray:(IOSByteArray *)content {
  
#line 3311
  if (content == nil) return nil;
  for (ComItextpdfTextPdfPdfStream * __strong stream in nil_chk([((JavaUtilHashMap *) nil_chk(JBIG2Globals_)) keySet])) {
    if ([JavaUtilArrays equalsWithByteArray:content withByteArray:[((ComItextpdfTextPdfPdfStream *) nil_chk(stream)) getBytes]]) {
      return [JBIG2Globals_ getWithId:stream];
    }
  }
  ComItextpdfTextPdfPdfStream *stream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:content];
  ComItextpdfTextPdfPdfIndirectObject *ref;
  @try {
    ref = [self addToBodyWithComItextpdfTextPdfPdfObject:stream];
  }
  @catch (
#line 3321
  JavaIoIOException *e) {
    return nil;
  }
  (void) [JBIG2Globals_ putWithId:stream withId:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(ref)) getIndirectReference]];
  return [ref getIndirectReference];
}


#line 3338
- (jboolean)isUserProperties {
  
#line 3339
  return self->userProperties_;
}


#line 3346
- (void)setUserPropertiesWithBoolean:(jboolean)userProperties {
  
#line 3347
  self->userProperties_ = userProperties;
}


#line 3361
- (jboolean)isRgbTransparencyBlending {
  
#line 3362
  return self->rgbTransparencyBlending_;
}


#line 3375
- (void)setRgbTransparencyBlendingWithBoolean:(jboolean)rgbTransparencyBlending {
  
#line 3376
  self->rgbTransparencyBlending_ = rgbTransparencyBlending;
}


#line 3379
+ (void)writeKeyInfoWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 3380
  ComItextpdfTextVersion *version_ = [ComItextpdfTextVersion getInstance];
  NSString *k = [((ComItextpdfTextVersion *) nil_chk(version_)) getKey];
  if (k == nil) {
    k = @"iText";
  }
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:[NSString formatWithNSString:@"%%%s-%s\n" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ k, [version_ getRelease] } count:2 type:[IOSClass classWithClass:[NSObject class]]]]]];
}


#line 3391
- (ComItextpdfTextPdfTtfUnicodeWriter *)getTtfUnicodeWriter {
  
#line 3392
  if (ttfUnicodeWriter_ == nil)
#line 3393
  ttfUnicodeWriter_ = [[ComItextpdfTextPdfTtfUnicodeWriter alloc] initWithComItextpdfTextPdfPdfWriter:self];
  return ttfUnicodeWriter_;
}


#line 3397
- (ComItextpdfTextXmlXmpXmpWriter *)createXmpWriterWithJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)baos
                                               withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)info {
  
#line 3398
  return [[ComItextpdfTextXmlXmpXmpWriter alloc] initWithJavaIoOutputStream:baos withComItextpdfTextPdfPdfDictionary:info];
}


#line 3401
- (ComItextpdfTextXmlXmpXmpWriter *)createXmpWriterWithJavaIoByteArrayOutputStream:(JavaIoByteArrayOutputStream *)baos
                                                               withJavaUtilHashMap:(JavaUtilHashMap *)info {
  
#line 3402
  return [[ComItextpdfTextXmlXmpXmpWriter alloc] initWithJavaIoOutputStream:baos withJavaUtilMap:info];
}


#line 3405
+ (void)checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                      withInt:(jint)key
                                                       withId:(id)obj1 {
  
#line 3406
  if (writer != nil)
#line 3407
  [writer checkPdfIsoConformanceWithInt:key withId:obj1];
}


#line 3410
- (void)checkPdfIsoConformanceWithInt:(jint)key
                               withId:(id)obj1 {
  
#line 3411
  [((id<ComItextpdfTextPdfInterfacesPdfIsoConformance>) nil_chk(pdfIsoConformance_)) checkPdfIsoConformanceWithInt:key withId:obj1];
}


#line 3414
- (void)completeInfoDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)info {
  
#line 3415
  if ([self isPdfX]) {
    if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(info)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_GTS_PDFXVERSION_()] == nil) {
      if ([((ComItextpdfTextPdfInternalPdfXConformanceImp *) nil_chk(((ComItextpdfTextPdfInternalPdfXConformanceImp *) check_class_cast(pdfIsoConformance_, [ComItextpdfTextPdfInternalPdfXConformanceImp class])))) isPdfX1A2001]) {
        [info putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_GTS_PDFXVERSION_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"PDF/X-1:2001"]];
        [info putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"GTS_PDFXConformance"] withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"PDF/X-1a:2001"]];
      }
      else if ([((ComItextpdfTextPdfInternalPdfXConformanceImp *) nil_chk(((ComItextpdfTextPdfInternalPdfXConformanceImp *) check_class_cast(pdfIsoConformance_, [ComItextpdfTextPdfInternalPdfXConformanceImp class])))) isPdfX32002])
#line 3422
      [info putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_GTS_PDFXVERSION_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"PDF/X-3:2002"]];
    }
    if ([info getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TITLE_()] == nil) {
      [info putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TITLE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"Pdf document"]];
    }
    if ([info getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CREATOR_()] == nil) {
      [info putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CREATOR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"Unknown"]];
    }
    if ([info getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRAPPED_()] == nil) {
      [info putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRAPPED_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"False"]];
    }
  }
}


#line 3436
- (void)completeExtraCatalogWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)extraCatalog {
  
#line 3437
  if ([self isPdfX]) {
    if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(extraCatalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTINTENTS_()] == nil) {
      ComItextpdfTextPdfPdfDictionary *out = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTINTENT_()];
      [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTCONDITION_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"SWOP CGATS TR 001-1995"]];
      [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTCONDITIONIDENTIFIER_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"CGATS TR 001"]];
      [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REGISTRYNAME_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"http://www.color.org"]];
      [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INFO_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@""]];
      [out putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_GTS_PDFX_()];
      [extraCatalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTINTENTS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfObject:out]];
    }
  }
}


#line 3470
- (id<JavaUtilList>)getStandardStructElems {
  
#line 3471
  if ([((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk(pdf_version_)) getVersion] < ComItextpdfTextPdfPdfWriter_VERSION_1_7) {
    return ComItextpdfTextPdfPdfWriter_standardStructElems_1_4_;
  }
  else {
    
#line 3474
    return ComItextpdfTextPdfPdfWriter_standardStructElems_1_7_;
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfWriter *)other {
  [super copyAllFieldsTo:other];
  other->JBIG2Globals_ = JBIG2Globals_;
  other->OCGLocked_ = OCGLocked_;
  other->OCGRadioGroup_ = OCGRadioGroup_;
  other->OCProperties_ = OCProperties_;
  other->body_ = body_;
  other->colorNumber_ = colorNumber_;
  other->colorProfile_ = colorProfile_;
  other->compressionLevel_ = compressionLevel_;
  other->crypto_ = crypto_;
  other->currentPageNumber_ = currentPageNumber_;
  other->currentPdfReaderInstance_ = currentPdfReaderInstance_;
  other->defaultColorspace_ = defaultColorspace_;
  other->directContent_ = directContent_;
  other->directContentUnder_ = directContentUnder_;
  other->documentColors_ = documentColors_;
  other->documentExtGState_ = documentExtGState_;
  other->documentFonts_ = documentFonts_;
  other->documentOCG_ = documentOCG_;
  other->documentOCGorder_ = documentOCGorder_;
  other->documentPatterns_ = documentPatterns_;
  other->documentProperties_ = documentProperties_;
  other->documentShadingPatterns_ = documentShadingPatterns_;
  other->documentShadings_ = documentShadings_;
  other->documentSpotPatterns_ = documentSpotPatterns_;
  other->extraCatalog_ = extraCatalog_;
  other->fontNumber_ = fontNumber_;
  other->formXObjects_ = formXObjects_;
  other->formXObjectsCounter_ = formXObjectsCounter_;
  other->fullCompression_ = fullCompression_;
  other->group_ = group_;
  other->imageDictionary_ = imageDictionary_;
  other->images_ = images_;
  other->newBookmarks_ = newBookmarks_;
  other->originalFileID_ = originalFileID_;
  other->pageDictEntries_ = pageDictEntries_;
  other->pageEvent_ = pageEvent_;
  other->pageReferences_ = pageReferences_;
  other->patternColorspaceCMYK_ = patternColorspaceCMYK_;
  other->patternColorspaceGRAY_ = patternColorspaceGRAY_;
  other->patternColorspaceRGB_ = patternColorspaceRGB_;
  other->patternNumber_ = patternNumber_;
  other->pdf_ = pdf_;
  other->pdfIsoConformance_ = pdfIsoConformance_;
  other->pdf_version_ = pdf_version_;
  other->prevxref_ = prevxref_;
  other->readerInstances_ = readerInstances_;
  other->rgbTransparencyBlending_ = rgbTransparencyBlending_;
  other->root_ = root_;
  other->runDirection_ = runDirection_;
  other->spaceCharRatio_ = spaceCharRatio_;
  other->structureTreeRoot_ = structureTreeRoot_;
  other->tabs_ = tabs_;
  other->tagged_ = tagged_;
  other->taggingMode_ = taggingMode_;
  other->ttfUnicodeWriter_ = ttfUnicodeWriter_;
  other->userProperties_ = userProperties_;
  other->xmpMetadata_ = xmpMetadata_;
  other->xmpWriter_ = xmpWriter_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfWriter class]) {
    ComItextpdfTextPdfPdfWriter_COUNTER_ =
#line 600
    [ComItextpdfTextLogCounterFactory getCounterWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfWriter class]]];
    ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_2_ =
#line 1460
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"1.2"];
    ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_3_ =
#line 1462
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"1.3"];
    ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_4_ =
#line 1464
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"1.4"];
    ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_5_ =
#line 1466
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"1.5"];
    ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_6_ =
#line 1468
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"1.6"];
    ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_7_ =
#line 1470
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"1.7"];
    ComItextpdfTextPdfPdfWriter_DOCUMENT_CLOSE_ = ComItextpdfTextPdfPdfName_get_WC_();
    ComItextpdfTextPdfPdfWriter_WILL_SAVE_ = ComItextpdfTextPdfPdfName_get_WS_();
    ComItextpdfTextPdfPdfWriter_DID_SAVE_ = ComItextpdfTextPdfPdfName_get_DS_();
    ComItextpdfTextPdfPdfWriter_WILL_PRINT_ = ComItextpdfTextPdfPdfName_get_WP_();
    ComItextpdfTextPdfPdfWriter_DID_PRINT_ = ComItextpdfTextPdfPdfName_get_DP_();
    ComItextpdfTextPdfPdfWriter_PAGE_OPEN_ = ComItextpdfTextPdfPdfName_get_O_();
    ComItextpdfTextPdfPdfWriter_PAGE_CLOSE_ = ComItextpdfTextPdfPdfName_get_C_();
    ComItextpdfTextPdfPdfWriter_standardStructElems_1_4_ =
#line 3450
    [JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ ComItextpdfTextPdfPdfName_get_DOCUMENT_(), ComItextpdfTextPdfPdfName_get_PART_(), ComItextpdfTextPdfPdfName_get_ART_(), ComItextpdfTextPdfPdfName_get_SECT_(), ComItextpdfTextPdfPdfName_get_DIV_(), ComItextpdfTextPdfPdfName_get_BLOCKQUOTE_(), ComItextpdfTextPdfPdfName_get_CAPTION_(), ComItextpdfTextPdfPdfName_get_TOC_(), ComItextpdfTextPdfPdfName_get_TOCI_(), ComItextpdfTextPdfPdfName_get_INDEX_(), ComItextpdfTextPdfPdfName_get_NONSTRUCT_(), ComItextpdfTextPdfPdfName_get_PRIVATE_(), ComItextpdfTextPdfPdfName_get_P_(), ComItextpdfTextPdfPdfName_get_H_(), ComItextpdfTextPdfPdfName_get_H1_(), ComItextpdfTextPdfPdfName_get_H2_(), ComItextpdfTextPdfPdfName_get_H3_(), ComItextpdfTextPdfPdfName_get_H4_(), ComItextpdfTextPdfPdfName_get_H5_(), ComItextpdfTextPdfPdfName_get_H6_(), ComItextpdfTextPdfPdfName_get_L_(), ComItextpdfTextPdfPdfName_get_LBL_(), ComItextpdfTextPdfPdfName_get_LI_(), ComItextpdfTextPdfPdfName_get_LBODY_(), ComItextpdfTextPdfPdfName_get_TABLE_(), ComItextpdfTextPdfPdfName_get_TR_(), ComItextpdfTextPdfPdfName_get_TH_(), ComItextpdfTextPdfPdfName_get_TD_(), ComItextpdfTextPdfPdfName_get_SPAN_(), ComItextpdfTextPdfPdfName_get_QUOTE_(), ComItextpdfTextPdfPdfName_get_NOTE_(), ComItextpdfTextPdfPdfName_get_REFERENCE_(), ComItextpdfTextPdfPdfName_get_BIBENTRY_(), ComItextpdfTextPdfPdfName_get_CODE_(), ComItextpdfTextPdfPdfName_get_LINK_(), ComItextpdfTextPdfPdfName_get_FIGURE_(), ComItextpdfTextPdfPdfName_get_FORMULA_(), ComItextpdfTextPdfPdfName_get_FORM_() } count:38 type:[IOSClass classWithClass:[NSObject class]]]];
    ComItextpdfTextPdfPdfWriter_standardStructElems_1_7_ =
#line 3457
    [JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ ComItextpdfTextPdfPdfName_get_DOCUMENT_(), ComItextpdfTextPdfPdfName_get_PART_(), ComItextpdfTextPdfPdfName_get_ART_(), ComItextpdfTextPdfPdfName_get_SECT_(), ComItextpdfTextPdfPdfName_get_DIV_(), ComItextpdfTextPdfPdfName_get_BLOCKQUOTE_(), ComItextpdfTextPdfPdfName_get_CAPTION_(), ComItextpdfTextPdfPdfName_get_TOC_(), ComItextpdfTextPdfPdfName_get_TOCI_(), ComItextpdfTextPdfPdfName_get_INDEX_(), ComItextpdfTextPdfPdfName_get_NONSTRUCT_(), ComItextpdfTextPdfPdfName_get_PRIVATE_(), ComItextpdfTextPdfPdfName_get_P_(), ComItextpdfTextPdfPdfName_get_H_(), ComItextpdfTextPdfPdfName_get_H1_(), ComItextpdfTextPdfPdfName_get_H2_(), ComItextpdfTextPdfPdfName_get_H3_(), ComItextpdfTextPdfPdfName_get_H4_(), ComItextpdfTextPdfPdfName_get_H5_(), ComItextpdfTextPdfPdfName_get_H6_(), ComItextpdfTextPdfPdfName_get_L_(), ComItextpdfTextPdfPdfName_get_LBL_(), ComItextpdfTextPdfPdfName_get_LI_(), ComItextpdfTextPdfPdfName_get_LBODY_(), ComItextpdfTextPdfPdfName_get_TABLE_(), ComItextpdfTextPdfPdfName_get_TR_(), ComItextpdfTextPdfPdfName_get_TH_(), ComItextpdfTextPdfPdfName_get_TD_(), ComItextpdfTextPdfPdfName_get_THEAD_(), ComItextpdfTextPdfPdfName_get_TBODY_(), ComItextpdfTextPdfPdfName_get_TFOOT_(), ComItextpdfTextPdfPdfName_get_SPAN_(), ComItextpdfTextPdfPdfName_get_QUOTE_(), ComItextpdfTextPdfPdfName_get_NOTE_(), ComItextpdfTextPdfPdfName_get_REFERENCE_(), ComItextpdfTextPdfPdfName_get_BIBENTRY_(), ComItextpdfTextPdfPdfName_get_CODE_(), ComItextpdfTextPdfPdfName_get_LINK_(), ComItextpdfTextPdfPdfName_get_ANNOT_(), ComItextpdfTextPdfPdfName_get_RUBY_(), ComItextpdfTextPdfPdfName_get_RB_(), ComItextpdfTextPdfPdfName_get_RT_(), ComItextpdfTextPdfPdfName_get_RP_(), ComItextpdfTextPdfPdfName_get_WARICHU_(), ComItextpdfTextPdfPdfName_get_WT_(), ComItextpdfTextPdfPdfName_get_WP_(), ComItextpdfTextPdfPdfName_get_FIGURE_(), ComItextpdfTextPdfPdfName_get_FORMULA_(), ComItextpdfTextPdfPdfName_get_FORM_() } count:49 type:[IOSClass classWithClass:[NSObject class]]]];
    ComItextpdfTextPdfPdfWriter_initialized = YES;
  }
}

+ (IOSObjectArray *)__annotations_setEncryptionWithByteArray_withByteArray_withInt_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_setEncryptionWithBoolean_withNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_setEncryptionWithInt_withNSString_withNSString_withInt_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_AllowPrinting_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_AllowModifyContents_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_AllowCopy_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_AllowModifyAnnotations_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_AllowFillIn_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_AllowScreenReaders_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_AllowAssembly_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_AllowDegradedPrinting_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_STRENGTH40BITS_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_STRENGTH128BITS_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCounter", NULL, "Lcom.itextpdf.text.log.Counter;", 0x4, NULL },
    { "init", "PdfWriter", NULL, 0x4, NULL },
    { "initWithComItextpdfTextPdfPdfDocument:withJavaIoOutputStream:", "PdfWriter", NULL, 0x4, NULL },
    { "getInstanceWithComItextpdfTextDocument:withJavaIoOutputStream:", "getInstance", "Lcom.itextpdf.text.pdf.PdfWriter;", 0x9, "Lcom.itextpdf.text.DocumentException;" },
    { "getInstanceWithComItextpdfTextDocument:withJavaIoOutputStream:withComItextpdfTextDocListener:", "getInstance", "Lcom.itextpdf.text.pdf.PdfWriter;", 0x9, "Lcom.itextpdf.text.DocumentException;" },
    { "getPdfDocument", NULL, "Lcom.itextpdf.text.pdf.PdfDocument;", 0x0, NULL },
    { "getInfo", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getVerticalPositionWithBoolean:", "getVerticalPosition", "F", 0x1, NULL },
    { "setInitialLeadingWithFloat:", "setInitialLeading", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "getDirectContent", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getDirectContentUnder", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "resetContent", NULL, "V", 0x0, NULL },
    { "getColorProfile", NULL, "Lcom.itextpdf.text.pdf.ICC_Profile;", 0x1, NULL },
    { "addLocalDestinationsWithJavaUtilTreeMap:", "addLocalDestinations", "V", 0x0, "Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:withBoolean:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfIndirectReference:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfIndirectReference:withBoolean:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:withInt:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:withInt:withBoolean:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "getPdfIndirectReference", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "getIndirectReferenceNumber", NULL, "I", 0x4, NULL },
    { "getOs", NULL, "Lcom.itextpdf.text.pdf.OutputStreamCounter;", 0x1, NULL },
    { "getCatalogWithComItextpdfTextPdfPdfIndirectReference:", "getCatalog", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, NULL },
    { "buildStructTreeRootForTaggedWithComItextpdfTextPdfPdfDictionary:", "buildStructTreeRootForTagged", "V", 0x4, NULL },
    { "getExtraCatalog", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "addPageDictEntryWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "addPageDictEntry", "V", 0x1, NULL },
    { "getPageDictEntries", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "resetPageDictEntries", NULL, "V", 0x1, NULL },
    { "setLinearPageMode", NULL, "V", 0x1, NULL },
    { "reorderPagesWithIntArray:", "reorderPages", "I", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "getPageReferenceWithInt:", "getPageReference", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "getPageNumber", NULL, "I", 0x1, NULL },
    { "getCurrentPage", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, NULL },
    { "getCurrentPageNumber", NULL, "I", 0x1, NULL },
    { "setPageViewportWithComItextpdfTextPdfPdfArray:", "setPageViewport", "V", 0x1, NULL },
    { "setTabsWithComItextpdfTextPdfPdfName:", "setTabs", "V", 0x1, NULL },
    { "getTabs", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "addWithComItextpdfTextPdfPdfPage:withComItextpdfTextPdfPdfContents:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, "Lcom.itextpdf.text.pdf.PdfException;" },
    { "setPageEventWithComItextpdfTextPdfPdfPageEvent:", "setPageEvent", "V", 0x1, NULL },
    { "getPageEvent", NULL, "Lcom.itextpdf.text.pdf.PdfPageEvent;", 0x1, NULL },
    { "open", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "addXFormsToBody", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "addSharedObjectsToBody", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "getRootOutline", NULL, "Lcom.itextpdf.text.pdf.PdfOutline;", 0x1, NULL },
    { "setOutlinesWithJavaUtilList:", "setOutlines", "V", 0x1, NULL },
    { "writeOutlinesWithComItextpdfTextPdfPdfDictionary:withBoolean:", "writeOutlines", "V", 0x4, "Ljava.io.IOException;" },
    { "setPdfVersionWithChar:", "setPdfVersion", "V", 0x1, NULL },
    { "setAtLeastPdfVersionWithChar:", "setAtLeastPdfVersion", "V", 0x1, NULL },
    { "setPdfVersionWithComItextpdfTextPdfPdfName:", "setPdfVersion", "V", 0x1, NULL },
    { "addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:", "addDeveloperExtension", "V", 0x1, NULL },
    { "getPdfVersion", NULL, "Lcom.itextpdf.text.pdf.internal.PdfVersionImp;", 0x0, NULL },
    { "setViewerPreferencesWithInt:", "setViewerPreferences", "V", 0x1, NULL },
    { "addViewerPreferenceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "addViewerPreference", "V", 0x1, NULL },
    { "setPageLabelsWithComItextpdfTextPdfPdfPageLabels:", "setPageLabels", "V", 0x1, NULL },
    { "addNamedDestinationsWithJavaUtilMap:withInt:", "addNamedDestinations", "V", 0x1, NULL },
    { "addNamedDestinationWithNSString:withInt:withComItextpdfTextPdfPdfDestination:", "addNamedDestination", "V", 0x1, NULL },
    { "addJavaScriptWithComItextpdfTextPdfPdfAction:", "addJavaScript", "V", 0x1, NULL },
    { "addJavaScriptWithNSString:withBoolean:", "addJavaScript", "V", 0x1, NULL },
    { "addJavaScriptWithNSString:", "addJavaScript", "V", 0x1, NULL },
    { "addJavaScriptWithNSString:withComItextpdfTextPdfPdfAction:", "addJavaScript", "V", 0x1, NULL },
    { "addJavaScriptWithNSString:withNSString:withBoolean:", "addJavaScript", "V", 0x1, NULL },
    { "addJavaScriptWithNSString:withNSString:", "addJavaScript", "V", 0x1, NULL },
    { "addFileAttachmentWithNSString:withByteArray:withNSString:withNSString:", "addFileAttachment", "V", 0x1, "Ljava.io.IOException;" },
    { "addFileAttachmentWithNSString:withComItextpdfTextPdfPdfFileSpecification:", "addFileAttachment", "V", 0x1, "Ljava.io.IOException;" },
    { "addFileAttachmentWithComItextpdfTextPdfPdfFileSpecification:", "addFileAttachment", "V", 0x1, "Ljava.io.IOException;" },
    { "setOpenActionWithNSString:", "setOpenAction", "V", 0x1, NULL },
    { "setOpenActionWithComItextpdfTextPdfPdfAction:", "setOpenAction", "V", 0x1, NULL },
    { "setAdditionalActionWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfAction:", "setAdditionalAction", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setCollectionWithComItextpdfTextPdfCollectionPdfCollection:", "setCollection", "V", 0x1, NULL },
    { "getAcroForm", NULL, "Lcom.itextpdf.text.pdf.PdfAcroForm;", 0x1, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addAnnotation", "V", 0x1, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:withInt:", "addAnnotation", "V", 0x0, NULL },
    { "addCalculationOrderWithComItextpdfTextPdfPdfFormField:", "addCalculationOrder", "V", 0x1, NULL },
    { "setSigFlagsWithInt:", "setSigFlags", "V", 0x1, NULL },
    { "setLanguageWithNSString:", "setLanguage", "V", 0x1, NULL },
    { "setXmpMetadataWithByteArray:", "setXmpMetadata", "V", 0x1, NULL },
    { "setPageXmpMetadataWithByteArray:", "setPageXmpMetadata", "V", 0x1, "Ljava.io.IOException;" },
    { "getXmpWriter", NULL, "Lcom.itextpdf.text.xml.xmp.XmpWriter;", 0x1, NULL },
    { "createXmpMetadata", NULL, "V", 0x1, NULL },
    { "initPdfIsoConformance", NULL, "Lcom.itextpdf.text.pdf.interfaces.PdfIsoConformance;", 0x4, NULL },
    { "setPDFXConformanceWithInt:", "setPDFXConformance", "V", 0x1, NULL },
    { "getPDFXConformance", NULL, "I", 0x1, NULL },
    { "isPdfX", NULL, "Z", 0x1, NULL },
    { "isPdfIso", NULL, "Z", 0x1, NULL },
    { "setOutputIntentsWithNSString:withNSString:withNSString:withNSString:withComItextpdfTextPdfICC_Profile:", "setOutputIntents", "V", 0x1, "Ljava.io.IOException;" },
    { "setOutputIntentsWithNSString:withNSString:withNSString:withNSString:withByteArray:", "setOutputIntents", "V", 0x1, "Ljava.io.IOException;" },
    { "setOutputIntentsWithComItextpdfTextPdfPdfReader:withBoolean:", "setOutputIntents", "Z", 0x1, "Ljava.io.IOException;" },
    { "getNameStringWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfName:", "getNameString", "Ljava.lang.String;", 0xa, NULL },
    { "getEncryption", NULL, "Lcom.itextpdf.text.pdf.PdfEncryption;", 0x0, NULL },
    { "setEncryptionWithByteArray:withByteArray:withInt:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithJavaSecurityCertCertificateArray:withIntArray:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithByteArray:withByteArray:withInt:withBoolean:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithBoolean:withNSString:withNSString:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setEncryptionWithInt:withNSString:withNSString:withInt:", "setEncryption", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "isFullCompression", NULL, "Z", 0x1, NULL },
    { "setFullCompression", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "getCompressionLevel", NULL, "I", 0x1, NULL },
    { "setCompressionLevelWithInt:", "setCompressionLevel", "V", 0x1, NULL },
    { "addSimpleWithComItextpdfTextPdfBaseFont:", "addSimple", "Lcom.itextpdf.text.pdf.FontDetails;", 0x0, NULL },
    { "eliminateFontSubsetWithComItextpdfTextPdfPdfDictionary:", "eliminateFontSubset", "V", 0x0, NULL },
    { "addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:withComItextpdfTextPdfPdfName:", "addDirectTemplateSimple", "Lcom.itextpdf.text.pdf.PdfName;", 0x0, NULL },
    { "releaseTemplateWithComItextpdfTextPdfPdfTemplate:", "releaseTemplate", "V", 0x1, "Ljava.io.IOException;" },
    { "getImportedPageWithComItextpdfTextPdfPdfReader:withInt:", "getImportedPage", "Lcom.itextpdf.text.pdf.PdfImportedPage;", 0x1, NULL },
    { "getPdfReaderInstanceWithComItextpdfTextPdfPdfReader:", "getPdfReaderInstance", "Lcom.itextpdf.text.pdf.PdfReaderInstance;", 0x4, NULL },
    { "freeReaderWithComItextpdfTextPdfPdfReader:", "freeReader", "V", 0x1, "Ljava.io.IOException;" },
    { "getCurrentDocumentSize", NULL, "J", 0x1, NULL },
    { "getNewObjectNumberWithComItextpdfTextPdfPdfReader:withInt:withInt:", "getNewObjectNumber", "I", 0x4, NULL },
    { "getReaderFileWithComItextpdfTextPdfPdfReader:", "getReaderFile", "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", 0x0, NULL },
    { "getColorspaceName", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x0, NULL },
    { "addSimpleWithComItextpdfTextPdfPdfSpotColor:", "addSimple", "Lcom.itextpdf.text.pdf.ColorDetails;", 0x0, NULL },
    { "addSimplePatternWithComItextpdfTextPdfPdfPatternPainter:", "addSimplePattern", "Lcom.itextpdf.text.pdf.PdfName;", 0x0, NULL },
    { "addSimpleShadingPatternWithComItextpdfTextPdfPdfShadingPattern:", "addSimpleShadingPattern", "V", 0x0, NULL },
    { "addSimpleShadingWithComItextpdfTextPdfPdfShading:", "addSimpleShading", "V", 0x0, NULL },
    { "addSimpleExtGStateWithComItextpdfTextPdfPdfDictionary:", "addSimpleExtGState", "[Lcom.itextpdf.text.pdf.PdfObject;", 0x0, NULL },
    { "addSimplePropertyWithId:withComItextpdfTextPdfPdfIndirectReference:", "addSimpleProperty", "[Lcom.itextpdf.text.pdf.PdfObject;", 0x0, NULL },
    { "propertyExistsWithId:", "propertyExists", "Z", 0x0, NULL },
    { "setTagged", NULL, "V", 0x1, NULL },
    { "setTaggedWithInt:", "setTagged", "V", 0x1, NULL },
    { "needToBeMarkedInContentWithComItextpdfTextPdfInterfacesIAccessibleElement:", "needToBeMarkedInContent", "Z", 0x1, NULL },
    { "checkElementRoleWithComItextpdfTextPdfInterfacesIAccessibleElement:withComItextpdfTextPdfInterfacesIAccessibleElement:", "checkElementRole", "V", 0x1, NULL },
    { "isTagged", NULL, "Z", 0x1, NULL },
    { "flushTaggedObjects", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "flushAcroFields", NULL, "V", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "getStructureTreeRoot", NULL, "Lcom.itextpdf.text.pdf.PdfStructureTreeRoot;", 0x1, NULL },
    { "getOCProperties", NULL, "Lcom.itextpdf.text.pdf.PdfOCProperties;", 0x1, NULL },
    { "addOCGRadioGroupWithJavaUtilArrayList:", "addOCGRadioGroup", "V", 0x1, NULL },
    { "lockLayerWithComItextpdfTextPdfPdfLayer:", "lockLayer", "V", 0x1, NULL },
    { "getOCGOrderWithComItextpdfTextPdfPdfArray:withComItextpdfTextPdfPdfLayer:", "getOCGOrder", "V", 0xa, NULL },
    { "addASEventWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfName:", "addASEvent", "V", 0x2, NULL },
    { "fillOCPropertiesWithBoolean:", "fillOCProperties", "V", 0x4, NULL },
    { "registerLayerWithComItextpdfTextPdfPdfOCG:", "registerLayer", "V", 0x0, NULL },
    { "getPageSize", NULL, "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "setCropBoxSizeWithComItextpdfTextRectangle:", "setCropBoxSize", "V", 0x1, NULL },
    { "setBoxSizeWithNSString:withComItextpdfTextRectangle:", "setBoxSize", "V", 0x1, NULL },
    { "getBoxSizeWithNSString:", "getBoxSize", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "getBoxSizeWithNSString:withComItextpdfTextRectangle:", "getBoxSize", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "setPageEmptyWithBoolean:", "setPageEmpty", "V", 0x1, NULL },
    { "isPageEmpty", NULL, "Z", 0x1, NULL },
    { "setPageActionWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfAction:", "setPageAction", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setDurationWithInt:", "setDuration", "V", 0x1, NULL },
    { "setTransitionWithComItextpdfTextPdfPdfTransition:", "setTransition", "V", 0x1, NULL },
    { "setThumbnailWithComItextpdfTextImage:", "setThumbnail", "V", 0x1, "Lcom.itextpdf.text.pdf.PdfException;Lcom.itextpdf.text.DocumentException;" },
    { "getGroup", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "setGroupWithComItextpdfTextPdfPdfDictionary:", "setGroup", "V", 0x1, NULL },
    { "getSpaceCharRatio", NULL, "F", 0x1, NULL },
    { "setSpaceCharRatioWithFloat:", "setSpaceCharRatio", "V", 0x1, NULL },
    { "setRunDirectionWithInt:", "setRunDirection", "V", 0x1, NULL },
    { "getRunDirection", NULL, "I", 0x1, NULL },
    { "setUserunitWithFloat:", "setUserunit", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "getDefaultColorspace", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "setDefaultColorspaceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setDefaultColorspace", "V", 0x1, NULL },
    { "addSimplePatternColorspaceWithComItextpdfTextBaseColor:", "addSimplePatternColorspace", "Lcom.itextpdf.text.pdf.ColorDetails;", 0x0, NULL },
    { "isStrictImageSequence", NULL, "Z", 0x1, NULL },
    { "setStrictImageSequenceWithBoolean:", "setStrictImageSequence", "V", 0x1, NULL },
    { "clearTextWrap", NULL, "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addDirectImageSimpleWithComItextpdfTextImage:", "addDirectImageSimple", "Lcom.itextpdf.text.pdf.PdfName;", 0x1, "Lcom.itextpdf.text.pdf.PdfException;Lcom.itextpdf.text.DocumentException;" },
    { "addDirectImageSimpleWithComItextpdfTextImage:withComItextpdfTextPdfPdfIndirectReference:", "addDirectImageSimple", "Lcom.itextpdf.text.pdf.PdfName;", 0x1, "Lcom.itextpdf.text.pdf.PdfException;Lcom.itextpdf.text.DocumentException;" },
    { "addWithComItextpdfTextPdfPdfImage:withComItextpdfTextPdfPdfIndirectReference:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, "Lcom.itextpdf.text.pdf.PdfException;" },
    { "getImageReferenceWithComItextpdfTextPdfPdfName:", "getImageReference", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, NULL },
    { "addWithComItextpdfTextPdfPdfICCBased:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x4, NULL },
    { "getReferenceJBIG2GlobalsWithByteArray:", "getReferenceJBIG2Globals", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x4, NULL },
    { "isUserProperties", NULL, "Z", 0x1, NULL },
    { "setUserPropertiesWithBoolean:", "setUserProperties", "V", 0x1, NULL },
    { "isRgbTransparencyBlending", NULL, "Z", 0x1, NULL },
    { "setRgbTransparencyBlendingWithBoolean:", "setRgbTransparencyBlending", "V", 0x1, NULL },
    { "writeKeyInfoWithJavaIoOutputStream:", "writeKeyInfo", "V", 0xc, "Ljava.io.IOException;" },
    { "getTtfUnicodeWriter", NULL, "Lcom.itextpdf.text.pdf.TtfUnicodeWriter;", 0x4, NULL },
    { "createXmpWriterWithJavaIoByteArrayOutputStream:withComItextpdfTextPdfPdfDictionary:", "createXmpWriter", "Lcom.itextpdf.text.xml.xmp.XmpWriter;", 0x4, "Ljava.io.IOException;" },
    { "createXmpWriterWithJavaIoByteArrayOutputStream:withJavaUtilHashMap:", "createXmpWriter", "Lcom.itextpdf.text.xml.xmp.XmpWriter;", 0x4, "Ljava.io.IOException;" },
    { "checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:withInt:withId:", "checkPdfIsoConformance", "V", 0x9, NULL },
    { "checkPdfIsoConformanceWithInt:withId:", "checkPdfIsoConformance", "V", 0x1, NULL },
    { "completeInfoDictionaryWithComItextpdfTextPdfPdfDictionary:", "completeInfoDictionary", "V", 0x2, NULL },
    { "completeExtraCatalogWithComItextpdfTextPdfPdfDictionary:", "completeExtraCatalog", "V", 0x2, NULL },
    { "getStandardStructElems", NULL, "Ljava.util.List;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "GENERATION_MAX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_GENERATION_MAX },
    { "COUNTER_", NULL, 0xc, "Lcom.itextpdf.text.log.Counter;", &ComItextpdfTextPdfPdfWriter_COUNTER_,  },
    { "pdf_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDocument;", NULL,  },
    { "directContent_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
    { "directContentUnder_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
    { "body_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfWriter$PdfBody;", NULL,  },
    { "colorProfile_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ICC_Profile;", NULL,  },
    { "extraCatalog_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "root_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfPages;", NULL,  },
    { "pageReferences_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "currentPageNumber_", NULL, 0x4, "I", NULL,  },
    { "tabs_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "pageDictEntries_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "pageEvent_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfPageEvent;", NULL,  },
    { "prevxref_", NULL, 0x4, "J", NULL,  },
    { "originalFileID_", NULL, 0x4, "[B", NULL,  },
    { "newBookmarks_", NULL, 0x4, "Ljava.util.List;", NULL,  },
    { "VERSION_1_2_", NULL, 0x19, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfPdfWriter_VERSION_1_2 },
    { "VERSION_1_3_", NULL, 0x19, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfPdfWriter_VERSION_1_3 },
    { "VERSION_1_4_", NULL, 0x19, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfPdfWriter_VERSION_1_4 },
    { "VERSION_1_5_", NULL, 0x19, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfPdfWriter_VERSION_1_5 },
    { "VERSION_1_6_", NULL, 0x19, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfPdfWriter_VERSION_1_6 },
    { "VERSION_1_7_", NULL, 0x19, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfPdfWriter_VERSION_1_7 },
    { "PDF_VERSION_1_2_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_2_,  },
    { "PDF_VERSION_1_3_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_3_,  },
    { "PDF_VERSION_1_4_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_4_,  },
    { "PDF_VERSION_1_5_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_5_,  },
    { "PDF_VERSION_1_6_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_6_,  },
    { "PDF_VERSION_1_7_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_PDF_VERSION_1_7_,  },
    { "pdf_version_", NULL, 0x4, "Lcom.itextpdf.text.pdf.internal.PdfVersionImp;", NULL,  },
    { "PageLayoutSinglePage_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageLayoutSinglePage },
    { "PageLayoutOneColumn_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageLayoutOneColumn },
    { "PageLayoutTwoColumnLeft_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageLayoutTwoColumnLeft },
    { "PageLayoutTwoColumnRight_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageLayoutTwoColumnRight },
    { "PageLayoutTwoPageLeft_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageLayoutTwoPageLeft },
    { "PageLayoutTwoPageRight_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageLayoutTwoPageRight },
    { "PageModeUseNone_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageModeUseNone },
    { "PageModeUseOutlines_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageModeUseOutlines },
    { "PageModeUseThumbs_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageModeUseThumbs },
    { "PageModeFullScreen_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageModeFullScreen },
    { "PageModeUseOC_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageModeUseOC },
    { "PageModeUseAttachments_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PageModeUseAttachments },
    { "HideToolbar_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_HideToolbar },
    { "HideMenubar_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_HideMenubar },
    { "HideWindowUI_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_HideWindowUI },
    { "FitWindow_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_FitWindow },
    { "CenterWindow_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_CenterWindow },
    { "DisplayDocTitle_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_DisplayDocTitle },
    { "NonFullScreenPageModeUseNone_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_NonFullScreenPageModeUseNone },
    { "NonFullScreenPageModeUseOutlines_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_NonFullScreenPageModeUseOutlines },
    { "NonFullScreenPageModeUseThumbs_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_NonFullScreenPageModeUseThumbs },
    { "NonFullScreenPageModeUseOC_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_NonFullScreenPageModeUseOC },
    { "DirectionL2R_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_DirectionL2R },
    { "DirectionR2L_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_DirectionR2L },
    { "PrintScalingNone_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PrintScalingNone },
    { "DOCUMENT_CLOSE_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_DOCUMENT_CLOSE_,  },
    { "WILL_SAVE_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_WILL_SAVE_,  },
    { "DID_SAVE_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_DID_SAVE_,  },
    { "WILL_PRINT_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_WILL_PRINT_,  },
    { "DID_PRINT_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_DID_PRINT_,  },
    { "SIGNATURE_EXISTS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_SIGNATURE_EXISTS },
    { "SIGNATURE_APPEND_ONLY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_SIGNATURE_APPEND_ONLY },
    { "xmpMetadata_", NULL, 0x4, "[B", NULL,  },
    { "xmpWriter_", NULL, 0x4, "Lcom.itextpdf.text.xml.xmp.XmpWriter;", NULL,  },
    { "PDFXNONE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PDFXNONE },
    { "PDFX1A2001_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PDFX1A2001 },
    { "PDFX32002_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PDFX32002 },
    { "pdfIsoConformance_", NULL, 0x4, "Lcom.itextpdf.text.pdf.interfaces.PdfIsoConformance;", NULL,  },
    { "STANDARD_ENCRYPTION_40_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_40 },
    { "STANDARD_ENCRYPTION_128_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_STANDARD_ENCRYPTION_128 },
    { "ENCRYPTION_AES_128_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ENCRYPTION_AES_128 },
    { "ENCRYPTION_AES_256_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ENCRYPTION_AES_256 },
    { "ENCRYPTION_MASK_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ENCRYPTION_MASK },
    { "DO_NOT_ENCRYPT_METADATA_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_DO_NOT_ENCRYPT_METADATA },
    { "EMBEDDED_FILES_ONLY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_EMBEDDED_FILES_ONLY },
    { "ALLOW_PRINTING_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ALLOW_PRINTING },
    { "ALLOW_MODIFY_CONTENTS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_CONTENTS },
    { "ALLOW_COPY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ALLOW_COPY },
    { "ALLOW_MODIFY_ANNOTATIONS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_ANNOTATIONS },
    { "ALLOW_FILL_IN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ALLOW_FILL_IN },
    { "ALLOW_SCREENREADERS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ALLOW_SCREENREADERS },
    { "ALLOW_ASSEMBLY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ALLOW_ASSEMBLY },
    { "ALLOW_DEGRADED_PRINTING_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_ALLOW_DEGRADED_PRINTING },
    { "AllowPrinting_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_AllowPrinting },
    { "AllowModifyContents_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_AllowModifyContents },
    { "AllowCopy_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_AllowCopy },
    { "AllowModifyAnnotations_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_AllowModifyAnnotations },
    { "AllowFillIn_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_AllowFillIn },
    { "AllowScreenReaders_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_AllowScreenReaders },
    { "AllowAssembly_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_AllowAssembly },
    { "AllowDegradedPrinting_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_AllowDegradedPrinting },
    { "STRENGTH40BITS_", NULL, 0x19, "Z", NULL, .constantValue.asBOOL = ComItextpdfTextPdfPdfWriter_STRENGTH40BITS },
    { "STRENGTH128BITS_", NULL, 0x19, "Z", NULL, .constantValue.asBOOL = ComItextpdfTextPdfPdfWriter_STRENGTH128BITS },
    { "crypto_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfEncryption;", NULL,  },
    { "fullCompression_", NULL, 0x4, "Z", NULL,  },
    { "compressionLevel_", NULL, 0x4, "I", NULL,  },
    { "documentFonts_", NULL, 0x4, "Ljava.util.LinkedHashMap;", NULL,  },
    { "fontNumber_", NULL, 0x4, "I", NULL,  },
    { "formXObjects_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "formXObjectsCounter_", NULL, 0x4, "I", NULL,  },
    { "readerInstances_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "currentPdfReaderInstance_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfReaderInstance;", NULL,  },
    { "documentColors_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "colorNumber_", NULL, 0x4, "I", NULL,  },
    { "documentPatterns_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "patternNumber_", NULL, 0x4, "I", NULL,  },
    { "documentShadingPatterns_", NULL, 0x4, "Ljava.util.HashSet;", NULL,  },
    { "documentShadings_", NULL, 0x4, "Ljava.util.HashSet;", NULL,  },
    { "documentExtGState_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "documentProperties_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "markAll_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_markAll },
    { "markInlineElementsOnly_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_markInlineElementsOnly },
    { "tagged_", NULL, 0x4, "Z", NULL,  },
    { "taggingMode_", NULL, 0x4, "I", NULL,  },
    { "structureTreeRoot_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfStructureTreeRoot;", NULL,  },
    { "documentOCG_", NULL, 0x4, "Ljava.util.HashSet;", NULL,  },
    { "documentOCGorder_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "OCProperties_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfOCProperties;", NULL,  },
    { "OCGRadioGroup_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfArray;", NULL,  },
    { "OCGLocked_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfArray;", NULL,  },
    { "PAGE_OPEN_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_PAGE_OPEN_,  },
    { "PAGE_CLOSE_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfWriter_PAGE_CLOSE_,  },
    { "group_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "SPACE_CHAR_RATIO_DEFAULT_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfWriter_SPACE_CHAR_RATIO_DEFAULT },
    { "NO_SPACE_CHAR_RATIO_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfWriter_NO_SPACE_CHAR_RATIO },
    { "spaceCharRatio_", NULL, 0x2, "F", NULL,  },
    { "RUN_DIRECTION_DEFAULT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT },
    { "RUN_DIRECTION_NO_BIDI_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI },
    { "RUN_DIRECTION_LTR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_LTR },
    { "RUN_DIRECTION_RTL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL },
    { "runDirection_", NULL, 0x4, "I", NULL,  },
    { "defaultColorspace_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "documentSpotPatterns_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "patternColorspaceRGB_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ColorDetails;", NULL,  },
    { "patternColorspaceGRAY_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ColorDetails;", NULL,  },
    { "patternColorspaceCMYK_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ColorDetails;", NULL,  },
    { "imageDictionary_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "images_", NULL, 0x12, "Ljava.util.HashMap;", NULL,  },
    { "JBIG2Globals_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "userProperties_", NULL, 0x2, "Z", NULL,  },
    { "rgbTransparencyBlending_", NULL, 0x2, "Z", NULL,  },
    { "ttfUnicodeWriter_", NULL, 0x4, "Lcom.itextpdf.text.pdf.TtfUnicodeWriter;", NULL,  },
    { "standardStructElems_1_4_", NULL, 0x1a, "Ljava.util.List;", &ComItextpdfTextPdfPdfWriter_standardStructElems_1_4_,  },
    { "standardStructElems_1_7_", NULL, 0x1a, "Ljava.util.List;", &ComItextpdfTextPdfPdfWriter_standardStructElems_1_7_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfWriter = { "PdfWriter", "com.itextpdf.text.pdf", NULL, 0x1, 176, methods, 144, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfWriter;
}

@end


#line 125
@implementation ComItextpdfTextPdfPdfWriter_PdfBody


#line 265
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self = [super init]) {
    numObj_ =
#line 257
    0;
    
#line 266
    xrefs_ = [[JavaUtilTreeSet alloc] init];
    
#line 267
    [xrefs_ addWithId:[[ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference alloc] initWithInt:0 withLong:0 withInt:ComItextpdfTextPdfPdfWriter_GENERATION_MAX]];
    
#line 268
    position_ = [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getOs])) getCounter];
    
#line 269
    refnum_ = 1;
    
#line 270
    self->writer_ = writer;
  }
  return self;
}


#line 275
- (void)setRefnumWithInt:(jint)refnum {
  
#line 276
  self->refnum_ = refnum;
}


#line 279
- (ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *)addToObjStmWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj
                                                                                              withInt:(jint)nObj {
  
#line 280
  if (numObj_ >= ComItextpdfTextPdfPdfWriter_PdfBody_OBJSINSTREAM)
#line 281
  [self flushObjStm];
  if (index_ == nil) {
    index_ = [[ComItextpdfTextPdfByteBuffer alloc] init];
    streamObjects_ = [[ComItextpdfTextPdfByteBuffer alloc] init];
    currentObjNum_ = [self getIndirectReferenceNumber];
    numObj_ = 0;
  }
  jint p = [((ComItextpdfTextPdfByteBuffer *) nil_chk(streamObjects_)) size];
  jint idx = numObj_++;
  ComItextpdfTextPdfPdfEncryption *enc = ((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_))->crypto_;
  writer_->crypto_ = nil;
  [((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) toPdfWithComItextpdfTextPdfPdfWriter:writer_ withJavaIoOutputStream:streamObjects_];
  writer_->crypto_ = enc;
  (void) [streamObjects_ appendWithChar:' '];
  (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk(index_)) appendWithInt:nObj])) appendWithChar:' '])) appendWithInt:p])) appendWithChar:' '];
  return [[ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference alloc] initWithInt:2 withInt:nObj withLong:currentObjNum_ withInt:idx];
}


#line 299
- (void)flushObjStm {
  
#line 300
  if (numObj_ == 0)
#line 301
  return;
  jint first = [((ComItextpdfTextPdfByteBuffer *) nil_chk(index_)) size];
  (void) [index_ appendWithComItextpdfTextPdfByteBuffer:streamObjects_];
  ComItextpdfTextPdfPdfStream *stream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[index_ toByteArray]];
  [stream flateCompressWithInt:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getCompressionLevel]];
  [stream putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_OBJSTM_()];
  [stream putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:numObj_]];
  [stream putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:first]];
  (void) [self addWithComItextpdfTextPdfPdfObject:stream withInt:currentObjNum_];
  index_ = nil;
  streamObjects_ = nil;
  numObj_ = 0;
}


#line 329
- (ComItextpdfTextPdfPdfIndirectObject *)addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 330
  return [self addWithComItextpdfTextPdfPdfObject:object withInt:[self getIndirectReferenceNumber]];
}


#line 333
- (ComItextpdfTextPdfPdfIndirectObject *)addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                                                withBoolean:(jboolean)inObjStm {
  
#line 334
  return [self addWithComItextpdfTextPdfPdfObject:object withInt:[self getIndirectReferenceNumber] withInt:0 withBoolean:inObjStm];
}


#line 342
- (ComItextpdfTextPdfPdfIndirectReference *)getPdfIndirectReference {
  
#line 343
  return [[ComItextpdfTextPdfPdfIndirectReference alloc] initWithInt:0 withInt:[self getIndirectReferenceNumber]];
}


#line 346
- (jint)getIndirectReferenceNumber {
  
#line 347
  jint n = refnum_++;
  [((JavaUtilTreeSet *) nil_chk(xrefs_)) addWithId:[[ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference alloc] initWithInt:n withLong:0 withInt:ComItextpdfTextPdfPdfWriter_GENERATION_MAX]];
  return n;
}


#line 368
- (ComItextpdfTextPdfPdfIndirectObject *)addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                 withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
  
#line 369
  return [self addWithComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfIndirectReference:ref withBoolean:YES];
}


#line 372
- (ComItextpdfTextPdfPdfIndirectObject *)addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                 withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                                                                withBoolean:(jboolean)inObjStm {
  
#line 373
  return [self addWithComItextpdfTextPdfPdfObject:object withInt:[((ComItextpdfTextPdfPdfIndirectReference *) nil_chk(ref)) getNumber] withInt:[ref getGeneration] withBoolean:inObjStm];
}


#line 376
- (ComItextpdfTextPdfPdfIndirectObject *)addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                                                    withInt:(jint)refNumber {
  
#line 377
  return [self addWithComItextpdfTextPdfPdfObject:object withInt:refNumber withInt:0 withBoolean:YES];
}


#line 380
- (ComItextpdfTextPdfPdfIndirectObject *)addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                                                    withInt:(jint)refNumber
                                                                    withInt:(jint)generation
                                                                withBoolean:(jboolean)inObjStm {
  
#line 381
  if (inObjStm && [((ComItextpdfTextPdfPdfObject *) nil_chk(object)) canBeInObjStm] && [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) isFullCompression]) {
    ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *pxref = [self addToObjStmWithComItextpdfTextPdfPdfObject:object withInt:refNumber];
    ComItextpdfTextPdfPdfIndirectObject *indirect = [[ComItextpdfTextPdfPdfIndirectObject alloc] initWithInt:refNumber withComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfWriter:writer_];
    if (![((JavaUtilTreeSet *) nil_chk(xrefs_)) addWithId:pxref]) {
      [xrefs_ removeWithId:pxref];
      [xrefs_ addWithId:pxref];
    }
    return indirect;
  }
  else {
    ComItextpdfTextPdfPdfIndirectObject *indirect;
    if ([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) isFullCompression]) {
      indirect = [[ComItextpdfTextPdfPdfIndirectObject alloc] initWithInt:refNumber withComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfWriter:writer_];
      [self writeWithComItextpdfTextPdfPdfIndirectObject:indirect withInt:refNumber];
    }
    else {
      indirect = [[ComItextpdfTextPdfPdfIndirectObject alloc] initWithInt:refNumber withInt:generation withComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfWriter:writer_];
      [self writeWithComItextpdfTextPdfPdfIndirectObject:indirect withInt:refNumber withInt:generation];
    }
    return indirect;
  }
}


#line 404
- (void)writeWithComItextpdfTextPdfPdfIndirectObject:(ComItextpdfTextPdfPdfIndirectObject *)indirect
                                             withInt:(jint)refNumber {
  
#line 405
  ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *pxref = [[ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference alloc] initWithInt:refNumber withLong:position_];
  if (![((JavaUtilTreeSet *) nil_chk(xrefs_)) addWithId:pxref]) {
    [xrefs_ removeWithId:pxref];
    [xrefs_ addWithId:pxref];
  }
  [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(indirect)) writeToWithJavaIoOutputStream:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getOs]];
  position_ = [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk([writer_ getOs])) getCounter];
}


#line 414
- (void)writeWithComItextpdfTextPdfPdfIndirectObject:(ComItextpdfTextPdfPdfIndirectObject *)indirect
                                             withInt:(jint)refNumber
                                             withInt:(jint)generation {
  
#line 415
  ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *pxref = [[ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference alloc] initWithInt:refNumber withLong:position_ withInt:generation];
  if (![((JavaUtilTreeSet *) nil_chk(xrefs_)) addWithId:pxref]) {
    [xrefs_ removeWithId:pxref];
    [xrefs_ addWithId:pxref];
  }
  [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(indirect)) writeToWithJavaIoOutputStream:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getOs]];
  position_ = [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk([writer_ getOs])) getCounter];
}


#line 430
- (jlong)offset {
  
#line 431
  return position_;
}


#line 440
- (jint)size {
  
#line 441
  return [JavaLangMath maxWithInt:[((ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) nil_chk([((JavaUtilTreeSet *) nil_chk(xrefs_)) last])) getRefnum] + 1 withInt:refnum_];
}


#line 455
- (void)writeCrossReferenceTableWithJavaIoOutputStream:(JavaIoOutputStream *)os
            withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)root
            withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)info
            withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)encryption
                       withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)fileID
                                              withLong:(jlong)prevxref {
  
#line 456
  jint refNumber = 0;
  if ([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) isFullCompression]) {
    [self flushObjStm];
    refNumber = [self getIndirectReferenceNumber];
    [((JavaUtilTreeSet *) nil_chk(xrefs_)) addWithId:[[ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference alloc] initWithInt:refNumber withLong:position_]];
  }
  ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *entry_ = [((JavaUtilTreeSet *) nil_chk(xrefs_)) first];
  jint first = [((ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) nil_chk(entry_)) getRefnum];
  jint len = 0;
  JavaUtilArrayList *sections = [[JavaUtilArrayList alloc] init];
  for (ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference * __strong pdfCrossReference in xrefs_) {
    entry_ = pdfCrossReference;
    if (first + len == [((ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) nil_chk(entry_)) getRefnum])
#line 469
    ++len;
    else {
      [sections addWithId:[JavaLangInteger valueOfWithInt:first]];
      [sections addWithId:[JavaLangInteger valueOfWithInt:len]];
      first = [entry_ getRefnum];
      len = 1;
    }
  }
  [sections addWithId:[JavaLangInteger valueOfWithInt:first]];
  [sections addWithId:[JavaLangInteger valueOfWithInt:len]];
  if ([writer_ isFullCompression]) {
    jint mid = 5;
    jlong mask = (jlong) 0xff00000000LL;
    for (; mid > 1; --mid) {
      if ((mask & position_) != 0)
#line 484
      break;
      URShiftAssignLong(&mask, 8);
    }
    ComItextpdfTextPdfByteBuffer *buf = [[ComItextpdfTextPdfByteBuffer alloc] init];
    
#line 489
    for (id __strong element in xrefs_) {
      entry_ = (ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) check_class_cast(element, [ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference class]);
      [((ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) nil_chk(entry_)) toPdfWithInt:mid withJavaIoOutputStream:buf];
    }
    ComItextpdfTextPdfPdfStream *xr = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[buf toByteArray]];
    buf = nil;
    [xr flateCompressWithInt:[writer_ getCompressionLevel]];
    [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIZE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[self size]]];
    [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_() withComItextpdfTextPdfPdfObject:root];
    if (info != nil) {
      [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INFO_() withComItextpdfTextPdfPdfObject:info];
    }
    if (encryption != nil)
#line 502
    [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCRYPT_() withComItextpdfTextPdfPdfObject:encryption];
    if (fileID != nil)
#line 504
    [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ID_() withComItextpdfTextPdfPdfObject:fileID];
    [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_W_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithIntArray:[IOSIntArray arrayWithInts:(jint[]){ 1, mid, 2 } count:3]]];
    [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_XREF_()];
    ComItextpdfTextPdfPdfArray *idx = [[ComItextpdfTextPdfPdfArray alloc] init];
    for (jint k = 0; k < [sections size]; ++k)
#line 509
    [idx addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[((JavaLangInteger *) nil_chk([sections getWithInt:k])) intValue]]];
    [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INDEX_() withComItextpdfTextPdfPdfObject:idx];
    if (prevxref > 0)
#line 512
    [xr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PREV_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithLong:prevxref]];
    ComItextpdfTextPdfPdfEncryption *enc = writer_->crypto_;
    writer_->crypto_ = nil;
    ComItextpdfTextPdfPdfIndirectObject *indirect = [[ComItextpdfTextPdfPdfIndirectObject alloc] initWithInt:refNumber withComItextpdfTextPdfPdfObject:xr withComItextpdfTextPdfPdfWriter:writer_];
    [indirect writeToWithJavaIoOutputStream:[writer_ getOs]];
    writer_->crypto_ = enc;
  }
  else {
    [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@"xref\n"]];
    id<JavaUtilIterator> i = [xrefs_ iterator];
    for (jint k = 0; k < [sections size]; k += 2) {
      first = [((JavaLangInteger *) nil_chk([sections getWithInt:k])) intValue];
      len = [((JavaLangInteger *) nil_chk([sections getWithInt:k + 1])) intValue];
      [os writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:[NSString valueOfInt:first]]];
      [os writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@" "]];
      [os writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:[NSString valueOfInt:len]]];
      [os writeWithInt:0x000a];
      while (len-- > 0) {
        entry_ = [((id<JavaUtilIterator>) nil_chk(i)) next];
        [((ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) nil_chk(entry_)) toPdfWithJavaIoOutputStream:os];
      }
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfWriter_PdfBody *)other {
  [super copyAllFieldsTo:other];
  other->currentObjNum_ = currentObjNum_;
  other->index_ = index_;
  other->numObj_ = numObj_;
  other->position_ = position_;
  other->refnum_ = refnum_;
  other->streamObjects_ = streamObjects_;
  other->writer_ = writer_;
  other->xrefs_ = xrefs_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:", "PdfBody", NULL, 0x4, NULL },
    { "setRefnumWithInt:", "setRefnum", "V", 0x0, NULL },
    { "addToObjStmWithComItextpdfTextPdfPdfObject:withInt:", "addToObjStm", "Lcom.itextpdf.text.pdf.PdfWriter$PdfBody$PdfCrossReference;", 0x4, "Ljava.io.IOException;" },
    { "flushObjStm", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "addWithComItextpdfTextPdfPdfObject:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x0, "Ljava.io.IOException;" },
    { "addWithComItextpdfTextPdfPdfObject:withBoolean:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x0, "Ljava.io.IOException;" },
    { "getPdfIndirectReference", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "getIndirectReferenceNumber", NULL, "I", 0x4, NULL },
    { "addWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfIndirectReference:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x0, "Ljava.io.IOException;" },
    { "addWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfIndirectReference:withBoolean:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x0, "Ljava.io.IOException;" },
    { "addWithComItextpdfTextPdfPdfObject:withInt:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x0, "Ljava.io.IOException;" },
    { "addWithComItextpdfTextPdfPdfObject:withInt:withInt:withBoolean:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x4, "Ljava.io.IOException;" },
    { "writeWithComItextpdfTextPdfPdfIndirectObject:withInt:", "write", "V", 0x4, "Ljava.io.IOException;" },
    { "writeWithComItextpdfTextPdfPdfIndirectObject:withInt:withInt:", "write", "V", 0x4, "Ljava.io.IOException;" },
    { "offset", NULL, "J", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "writeCrossReferenceTableWithJavaIoOutputStream:withComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfObject:withLong:", "writeCrossReferenceTable", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "OBJSINSTREAM_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfWriter_PdfBody_OBJSINSTREAM },
    { "xrefs_", NULL, 0x14, "Ljava.util.TreeSet;", NULL,  },
    { "refnum_", NULL, 0x4, "I", NULL,  },
    { "position_", NULL, 0x4, "J", NULL,  },
    { "writer_", NULL, 0x14, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "index_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ByteBuffer;", NULL,  },
    { "streamObjects_", NULL, 0x4, "Lcom.itextpdf.text.pdf.ByteBuffer;", NULL,  },
    { "currentObjNum_", NULL, 0x4, "I", NULL,  },
    { "numObj_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfWriter_PdfBody = { "PdfBody", "com.itextpdf.text.pdf", "PdfWriter", 0x9, 17, methods, 9, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfWriter_PdfBody;
}

@end


#line 133
@implementation ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference


#line 153
- (instancetype)initWithInt:(jint)refnum
                   withLong:(jlong)offset
                    withInt:(jint)generation {
  if (self = [super init]) {
    
#line 154
    type_ = 0;
    
#line 155
    self->offset_ = offset;
    
#line 156
    self->refnum_ = refnum;
    
#line 157
    self->generation_ = generation;
  }
  return self;
}


#line 166
- (instancetype)initWithInt:(jint)refnum
                   withLong:(jlong)offset {
  if (self = [super init]) {
    
#line 167
    type_ = 1;
    
#line 168
    self->offset_ = offset;
    
#line 169
    self->refnum_ = refnum;
    
#line 170
    self->generation_ = 0;
  }
  return self;
}


#line 173
- (instancetype)initWithInt:(jint)type
                    withInt:(jint)refnum
                   withLong:(jlong)offset
                    withInt:(jint)generation {
  if (self = [super init]) {
    
#line 174
    self->type_ = type;
    
#line 175
    self->offset_ = offset;
    
#line 176
    self->refnum_ = refnum;
    
#line 177
    self->generation_ = generation;
  }
  return self;
}


#line 180
- (jint)getRefnum {
  
#line 181
  return refnum_;
}


#line 190
- (void)toPdfWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 191
  JavaLangStringBuffer *off = [((JavaLangStringBuffer *) [[JavaLangStringBuffer alloc] initWithNSString:@"0000000000"]) appendWithLong:offset_];
  (void) [off delete__WithInt:0 withInt:[((JavaLangStringBuffer *) nil_chk(off)) sequenceLength] - 10];
  JavaLangStringBuffer *gen = [((JavaLangStringBuffer *) [[JavaLangStringBuffer alloc] initWithNSString:@"00000"]) appendWithInt:generation_];
  (void) [gen delete__WithInt:0 withInt:[((JavaLangStringBuffer *) nil_chk(gen)) sequenceLength] - 5];
  
#line 196
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([off appendWithChar:' '])) appendWithJavaLangStringBuffer:gen])) appendWithNSString:generation_ == ComItextpdfTextPdfPdfWriter_GENERATION_MAX ? @" f \n" : @" n \n"];
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:[off description]]];
}


#line 206
- (void)toPdfWithInt:(jint)midSize
withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 207
  [((JavaIoOutputStream *) nil_chk(os)) writeWithInt:(jbyte) type_];
  while (--midSize >= 0)
#line 209
  [os writeWithInt:(jbyte) ((URShift64(offset_, 8 * midSize)) & (jint) 0xff)];
  [os writeWithInt:(jbyte) ((URShift32(generation_, 8)) & (jint) 0xff)];
  [os writeWithInt:(jbyte) (generation_ & (jint) 0xff)];
}


#line 217
- (jint)compareToWithId:(ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *)other {
  if (other != nil && ![other isKindOfClass:[ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  
#line 218
  return refnum_ < ((ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) nil_chk(other))->refnum_ ? -1 : refnum_ == other->refnum_ ? 0 : 1;
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference class]]) {
    ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *other = (ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference class]);
    return refnum_ == ((ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) nil_chk(other))->refnum_;
  }
  else
#line 231
  return NO;
}

- (NSUInteger)hash {
  
#line 239
  return refnum_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *)other {
  [super copyAllFieldsTo:other];
  other->generation_ = generation_;
  other->offset_ = offset_;
  other->refnum_ = refnum_;
  other->type_ = type_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withLong:withInt:", "PdfCrossReference", NULL, 0x1, NULL },
    { "initWithInt:withLong:", "PdfCrossReference", NULL, 0x1, NULL },
    { "initWithInt:withInt:withLong:withInt:", "PdfCrossReference", NULL, 0x1, NULL },
    { "getRefnum", NULL, "I", 0x1, NULL },
    { "toPdfWithJavaIoOutputStream:", "toPdf", "V", 0x1, "Ljava.io.IOException;" },
    { "toPdfWithInt:withJavaIoOutputStream:", "toPdf", "V", 0x1, "Ljava.io.IOException;" },
    { "compareToWithComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference:", "compareTo", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x12, "I", NULL,  },
    { "offset_", NULL, 0x12, "J", NULL,  },
    { "refnum_", NULL, 0x12, "I", NULL,  },
    { "generation_", NULL, 0x12, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference = { "PdfCrossReference", "com.itextpdf.text.pdf", "PdfWriter$PdfBody", 0x9, 9, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference;
}

@end


#line 545
@implementation ComItextpdfTextPdfPdfWriter_PdfTrailer


#line 565
- (instancetype)initWithInt:(jint)size
                   withLong:(jlong)offset
withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)root
withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)info
withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)encryption
withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)fileID
                   withLong:(jlong)prevxref {
  if (self = [super init]) {
    
#line 566
    self->offset_ = offset;
    
#line 567
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIZE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:size]];
    
#line 568
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_() withComItextpdfTextPdfPdfObject:root];
    
#line 569
    if (info != nil) {
      [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INFO_() withComItextpdfTextPdfPdfObject:info];
    }
    
#line 572
    if (encryption != nil)
#line 573
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCRYPT_() withComItextpdfTextPdfPdfObject:encryption];
    
#line 574
    if (fileID != nil)
#line 575
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ID_() withComItextpdfTextPdfPdfObject:fileID];
    
#line 576
    if (prevxref > 0)
#line 577
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PREV_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithLong:prevxref]];
  }
  return self;
}


#line 587
- (void)toPdfWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                      withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 588
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_TRAILER withId:self];
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@"trailer\n"]];
  [super toPdfWithComItextpdfTextPdfPdfWriter:nil withJavaIoOutputStream:os];
  [os writeWithInt:0x000a];
  [ComItextpdfTextPdfPdfWriter writeKeyInfoWithJavaIoOutputStream:os];
  [os writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@"startxref\n"]];
  [os writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:[NSString valueOfLong:offset_]]];
  [os writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@"\n%%EOF\n"]];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfWriter_PdfTrailer *)other {
  [super copyAllFieldsTo:other];
  other->offset_ = offset_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withLong:withComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfObject:withLong:", "PdfTrailer", NULL, 0x1, NULL },
    { "toPdfWithComItextpdfTextPdfPdfWriter:withJavaIoOutputStream:", "toPdf", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "offset_", NULL, 0x0, "J", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfWriter_PdfTrailer = { "PdfTrailer", "com.itextpdf.text.pdf", "PdfWriter", 0x9, 2, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfWriter_PdfTrailer;
}

@end
