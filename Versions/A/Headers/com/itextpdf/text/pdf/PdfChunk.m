//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfChunk.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfChunk.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/SplitCharacter.h"
#include "com/itextpdf/text/TabSettings.h"
#include "com/itextpdf/text/TabStop.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/CJKFont.h"
#include "com/itextpdf/text/pdf/DefaultSplitCharacter.h"
#include "com/itextpdf/text/pdf/HyphenationEvent.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfChunk.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfFont.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfPdfChunk_initialized = NO;


#line 65
@implementation ComItextpdfTextPdfPdfChunk

IOSCharArray * ComItextpdfTextPdfPdfChunk_singleSpace_;
IOSObjectArray * ComItextpdfTextPdfPdfChunk_thisChunk_;
JavaUtilHashSet * ComItextpdfTextPdfPdfChunk_keysAttributes_;
JavaUtilHashSet * ComItextpdfTextPdfPdfChunk_keysNoStroke_;
NSString * ComItextpdfTextPdfPdfChunk_TABSTOP_ = 
#line 75
@"TABSTOP";


#line 165
- (instancetype)initWithNSString:(NSString *)string
  withComItextpdfTextPdfPdfChunk:(ComItextpdfTextPdfPdfChunk *)other {
  if (self = [super init]) {
    value_ = ComItextpdfTextPdfPdfObject_get_NOTHING_();
    encoding_ = ComItextpdfTextPdfBaseFont_get_WINANSI_();
    attributes_ =
#line 123
    [[JavaUtilHashMap alloc] init];
    noStroke_ =
#line 131
    [[JavaUtilHashMap alloc] init];
    imageScalePercentage_ =
#line 138
    1.0f;
    changeLeading__ =
#line 147
    NO;
    leading_ =
#line 150
    0;
    accessibleElement_ =
#line 152
    nil;
    
#line 166
    IOSObjectArray_Set(nil_chk(ComItextpdfTextPdfPdfChunk_thisChunk_), 0, self);
    
#line 167
    value_ = string;
    
#line 168
    self->font__ = ((ComItextpdfTextPdfPdfChunk *) nil_chk(other))->font__;
    
#line 169
    self->attributes_ = other->attributes_;
    
#line 170
    self->noStroke_ = other->noStroke_;
    
#line 171
    self->baseFont_ = other->baseFont_;
    
#line 172
    self->changeLeading__ = other->changeLeading__;
    
#line 173
    self->leading_ = other->leading_;
    
#line 174
    IOSObjectArray *obj = (IOSObjectArray *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_get_IMAGE_()], [IOSObjectArray class]);
    
#line 175
    if (obj == nil)
#line 176
    image_ = nil;
    else {
      image_ = (ComItextpdfTextImage *) check_class_cast(IOSObjectArray_Get(obj, 0), [ComItextpdfTextImage class]);
      offsetX_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(obj, 1), [JavaLangFloat class])))) floatValue];
      offsetY_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(obj, 2), [JavaLangFloat class])))) floatValue];
      changeLeading__ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(obj, 3), [JavaLangBoolean class])))) booleanValue];
    }
    
#line 183
    encoding_ = [((ComItextpdfTextPdfBaseFont *) nil_chk([((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) getFont])) getEncoding];
    
#line 184
    splitCharacter_ = (id<ComItextpdfTextSplitCharacter>) check_protocol_cast([noStroke_ getWithId:ComItextpdfTextChunk_get_SPLITCHARACTER_()], @protocol(ComItextpdfTextSplitCharacter));
    
#line 185
    if (splitCharacter_ == nil)
#line 186
    splitCharacter_ = ComItextpdfTextPdfDefaultSplitCharacter_get_DEFAULT_();
    
#line 187
    accessibleElement_ = other->accessibleElement_;
  }
  return self;
}


#line 197
- (instancetype)initComItextpdfTextPdfPdfChunkWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk
                                       withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  if (self = [super init]) {
    value_ = ComItextpdfTextPdfPdfObject_get_NOTHING_();
    encoding_ = ComItextpdfTextPdfBaseFont_get_WINANSI_();
    attributes_ =
#line 123
    [[JavaUtilHashMap alloc] init];
    noStroke_ =
#line 131
    [[JavaUtilHashMap alloc] init];
    imageScalePercentage_ =
#line 138
    1.0f;
    changeLeading__ =
#line 147
    NO;
    leading_ =
#line 150
    0;
    accessibleElement_ =
#line 152
    nil;
    
#line 198
    IOSObjectArray_Set(nil_chk(ComItextpdfTextPdfPdfChunk_thisChunk_), 0, self);
    
#line 199
    value_ = [((ComItextpdfTextChunk *) nil_chk(chunk)) getContent];
    
#line 201
    ComItextpdfTextFont *f = [chunk getFont];
    
#line 202
    jfloat size = [((ComItextpdfTextFont *) nil_chk(f)) getSize];
    
#line 203
    if (size == ComItextpdfTextFont_UNDEFINED)
#line 204
    size = 12;
    
#line 205
    baseFont_ = [f getBaseFont];
    
#line 206
    jint style = [f getStyle];
    
#line 207
    if (style == ComItextpdfTextFont_UNDEFINED) {
      style = ComItextpdfTextFont_NORMAL;
    }
    
#line 210
    if (baseFont_ == nil) {
      
#line 212
      baseFont_ = [f getCalculatedBaseFontWithBoolean:NO];
    }
    else {
      
#line 216
      if ((style & ComItextpdfTextFont_BOLD) != 0)
#line 217
      (void) [attributes_ putWithId:ComItextpdfTextChunk_get_TEXTRENDERMODE_() withId:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:ComItextpdfTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE], [[JavaLangFloat alloc] initWithFloat:size / 30.0f], nil } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
      
#line 219
      if ((style & ComItextpdfTextFont_ITALIC) != 0)
#line 220
      (void) [attributes_ putWithId:ComItextpdfTextChunk_get_SKEW_() withId:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0, ComItextpdfTextPdfPdfChunk_ITALIC_ANGLE } count:2]];
    }
    
#line 222
    font__ = [[ComItextpdfTextPdfPdfFont alloc] initWithComItextpdfTextPdfBaseFont:baseFont_ withFloat:size];
    
#line 224
    JavaUtilHashMap *attr = [chunk getAttributes];
    
#line 225
    if (attr != nil) {
      for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([attr entrySet])) {
        NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
        if ([((JavaUtilHashSet *) nil_chk(ComItextpdfTextPdfPdfChunk_keysAttributes_)) containsWithId:name]) {
          (void) [attributes_ putWithId:name withId:[entry_ getValue]];
        }
        else if ([((JavaUtilHashSet *) nil_chk(ComItextpdfTextPdfPdfChunk_keysNoStroke_)) containsWithId:name]) {
          (void) [noStroke_ putWithId:name withId:[entry_ getValue]];
        }
      }
      if ([@"" isEqual:[attr getWithId:ComItextpdfTextChunk_get_GENERICTAG_()]]) {
        (void) [attributes_ putWithId:ComItextpdfTextChunk_get_GENERICTAG_() withId:[chunk getContent]];
      }
    }
    
#line 239
    if ([f isUnderlined]) {
      IOSObjectArray *obj = [IOSObjectArray arrayWithObjects:(id[]){ nil, [IOSFloatArray arrayWithFloats:(jfloat[]){ 0, ComItextpdfTextPdfPdfChunk_UNDERLINE_THICKNESS, 0, ComItextpdfTextPdfPdfChunk_UNDERLINE_OFFSET, 0 } count:5] } count:2 type:[IOSClass classWithClass:[NSObject class]]];
      IOSObjectArray *unders = [ComItextpdfTextUtilities addToArrayWithNSObjectArray2:(IOSObjectArray *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_get_UNDERLINE_()], [IOSObjectArray class]) withNSObjectArray:obj];
      (void) [attributes_ putWithId:ComItextpdfTextChunk_get_UNDERLINE_() withId:unders];
    }
    
#line 244
    if ([f isStrikethru]) {
      IOSObjectArray *obj = [IOSObjectArray arrayWithObjects:(id[]){ nil, [IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 1.0f / 15, 0, 1.0f / 3, 0 } count:5] } count:2 type:[IOSClass classWithClass:[NSObject class]]];
      IOSObjectArray *unders = [ComItextpdfTextUtilities addToArrayWithNSObjectArray2:(IOSObjectArray *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_get_UNDERLINE_()], [IOSObjectArray class]) withNSObjectArray:obj];
      (void) [attributes_ putWithId:ComItextpdfTextChunk_get_UNDERLINE_() withId:unders];
    }
    
#line 249
    if (action != nil)
#line 250
    (void) [attributes_ putWithId:ComItextpdfTextChunk_get_ACTION_() withId:action];
    
#line 252
    (void) [noStroke_ putWithId:ComItextpdfTextChunk_get_COLOR_() withId:[f getColor]];
    
#line 253
    (void) [noStroke_ putWithId:ComItextpdfTextChunk_get_ENCODING_() withId:[((ComItextpdfTextPdfBaseFont *) nil_chk([font__ getFont])) getEncoding]];
    
#line 255
    JavaLangFloat *lh = (JavaLangFloat *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_get_LINEHEIGHT_()], [JavaLangFloat class]);
    
#line 256
    if (lh != nil) {
      changeLeading__ = YES;
      leading_ = [lh floatValue];
    }
    
#line 261
    IOSObjectArray *obj = (IOSObjectArray *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_get_IMAGE_()], [IOSObjectArray class]);
    
#line 262
    if (obj == nil) {
      image_ = nil;
    }
    else {
      (void) [attributes_ removeWithId:ComItextpdfTextChunk_get_HSCALE_()];
      image_ = (ComItextpdfTextImage *) check_class_cast(IOSObjectArray_Get(obj, 0), [ComItextpdfTextImage class]);
      offsetX_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(obj, 1), [JavaLangFloat class])))) floatValue];
      offsetY_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast(IOSObjectArray_Get(obj, 2), [JavaLangFloat class])))) floatValue];
      changeLeading__ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(obj, 3), [JavaLangBoolean class])))) booleanValue];
    }
    
#line 272
    JavaLangFloat *hs = (JavaLangFloat *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_get_HSCALE_()], [JavaLangFloat class]);
    
#line 273
    if (hs != nil)
#line 274
    [font__ setHorizontalScalingWithFloat:[hs floatValue]];
    
#line 275
    encoding_ = [((ComItextpdfTextPdfBaseFont *) nil_chk([font__ getFont])) getEncoding];
    
#line 276
    splitCharacter_ = (id<ComItextpdfTextSplitCharacter>) check_protocol_cast([noStroke_ getWithId:ComItextpdfTextChunk_get_SPLITCHARACTER_()], @protocol(ComItextpdfTextSplitCharacter));
    
#line 277
    if (splitCharacter_ == nil)
#line 278
    splitCharacter_ = ComItextpdfTextPdfDefaultSplitCharacter_get_DEFAULT_();
    
#line 279
    accessibleElement_ = chunk;
  }
  return self;
}

- (instancetype)initWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk
             withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  return [self initComItextpdfTextPdfPdfChunkWithComItextpdfTextChunk:
#line 197
chunk withComItextpdfTextPdfPdfAction:action];
}


#line 289
- (instancetype)initWithComItextpdfTextChunk:(ComItextpdfTextChunk *)chunk
             withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action
              withComItextpdfTextTabSettings:(ComItextpdfTextTabSettings *)tabSettings {
  if (self =
#line 290
  [self initComItextpdfTextPdfPdfChunkWithComItextpdfTextChunk:chunk withComItextpdfTextPdfPdfAction:action]) {
    
#line 291
    if (tabSettings != nil && [((JavaUtilHashMap *) nil_chk(attributes_)) getWithId:ComItextpdfTextChunk_get_TABSETTINGS_()] == nil)
#line 292
    (void) [attributes_ putWithId:ComItextpdfTextChunk_get_TABSETTINGS_() withId:tabSettings];
  }
  return self;
}


#line 303
- (jint)getUnicodeEquivalentWithInt:(jint)c {
  return [((ComItextpdfTextPdfBaseFont *) nil_chk(baseFont_)) getUnicodeEquivalentWithInt:c];
}

- (jint)getWordWithNSString:(NSString *)text
                    withInt:(jint)start {
  
#line 308
  jint len = ((jint) [((NSString *) nil_chk(text)) length]);
  while (start < len) {
    if (![JavaLangCharacter isLetterWithChar:[text charAtWithInt:start]])
#line 311
    break;
    ++start;
  }
  return start;
}


#line 326
- (ComItextpdfTextPdfPdfChunk *)splitWithFloat:(jfloat)width {
  
#line 327
  newlineSplit_ = NO;
  if (image_ != nil) {
    if ([image_ getScaledWidth] > width) {
      ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:ComItextpdfTextChunk_get_OBJECT_REPLACEMENT_CHARACTER_() withComItextpdfTextPdfPdfChunk:self];
      value_ = @"";
      attributes_ = [[JavaUtilHashMap alloc] init];
      image_ = nil;
      font__ = [ComItextpdfTextPdfPdfFont getDefaultFont];
      return pc;
    }
    else
#line 338
    return nil;
  }
  id<ComItextpdfTextPdfHyphenationEvent> hyphenationEvent = (id<ComItextpdfTextPdfHyphenationEvent>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(noStroke_)) getWithId:ComItextpdfTextChunk_get_HYPHENATION_()], @protocol(ComItextpdfTextPdfHyphenationEvent));
  jint currentPosition = 0;
  jint splitPosition = -1;
  jfloat currentWidth = 0;
  
#line 347
  jint lastSpace = -1;
  jfloat lastSpaceWidth = 0;
  jint length = ((jint) [((NSString *) nil_chk(value_)) length]);
  IOSCharArray *valueArray = [value_ toCharArray];
  jchar character = 0;
  ComItextpdfTextPdfBaseFont *ft = [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) getFont];
  jboolean surrogate = NO;
  if ([((ComItextpdfTextPdfBaseFont *) nil_chk(ft)) getFontType] == ComItextpdfTextPdfBaseFont_FONT_TYPE_CJK && [ft getUnicodeEquivalentWithInt:' '] != ' ') {
    while (currentPosition < length) {
      
#line 357
      jchar cidChar = IOSCharArray_Get(nil_chk(valueArray), currentPosition);
      character = (jchar) [ft getUnicodeEquivalentWithInt:cidChar];
      
#line 360
      if (character == 0x000a) {
        newlineSplit_ = YES;
        NSString *returnValue = [value_ substring:currentPosition + 1];
        value_ = [value_ substring:0 endIndex:currentPosition];
        if (((jint) [((NSString *) nil_chk(value_)) length]) < 1) {
          value_ = @"\x01";
        }
        ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:returnValue withComItextpdfTextPdfPdfChunk:self];
        return pc;
      }
      currentWidth += [self getCharWidthWithInt:cidChar];
      if (character == ' ') {
        lastSpace = currentPosition + 1;
        lastSpaceWidth = currentWidth;
      }
      if (currentWidth > width)
#line 376
      break;
      
#line 378
      if ([((id<ComItextpdfTextSplitCharacter>) nil_chk(splitCharacter_)) isSplitCharacterWithInt:0 withInt:currentPosition withInt:length withCharArray:valueArray withComItextpdfTextPdfPdfChunkArray:ComItextpdfTextPdfPdfChunk_thisChunk_])
#line 379
      splitPosition = currentPosition + 1;
      currentPosition++;
    }
  }
  else {
    while (currentPosition < length) {
      
#line 386
      character = IOSCharArray_Get(nil_chk(valueArray), currentPosition);
      
#line 388
      if (character == 0x000d || character == 0x000a) {
        newlineSplit_ = YES;
        jint inc = 1;
        if (character == 0x000d && currentPosition + 1 < length && IOSCharArray_Get(valueArray, currentPosition + 1) == 0x000a)
#line 392
        inc = 2;
        NSString *returnValue = [value_ substring:currentPosition + inc];
        value_ = [value_ substring:0 endIndex:currentPosition];
        if (((jint) [((NSString *) nil_chk(value_)) length]) < 1) {
          value_ = @" ";
        }
        ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:returnValue withComItextpdfTextPdfPdfChunk:self];
        return pc;
      }
      surrogate = [ComItextpdfTextUtilities isSurrogatePairWithCharArray:valueArray withInt:currentPosition];
      if (surrogate)
#line 403
      currentWidth += [self getCharWidthWithInt:[ComItextpdfTextUtilities convertToUtf32WithChar:IOSCharArray_Get(valueArray, currentPosition) withChar:IOSCharArray_Get(valueArray, currentPosition + 1)]];
      else
#line 405
      currentWidth += [self getCharWidthWithInt:character];
      if (character == ' ') {
        lastSpace = currentPosition + 1;
        lastSpaceWidth = currentWidth;
      }
      if (surrogate)
#line 411
      currentPosition++;
      if (currentWidth > width)
#line 413
      break;
      
#line 415
      if ([((id<ComItextpdfTextSplitCharacter>) nil_chk(splitCharacter_)) isSplitCharacterWithInt:0 withInt:currentPosition withInt:length withCharArray:valueArray withComItextpdfTextPdfPdfChunkArray:nil])
#line 416
      splitPosition = currentPosition + 1;
      currentPosition++;
    }
  }
  
#line 422
  if (currentPosition == length) {
    return nil;
  }
  
#line 426
  if (splitPosition < 0) {
    NSString *returnValue = value_;
    value_ = @"";
    ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:returnValue withComItextpdfTextPdfPdfChunk:self];
    return pc;
  }
  if (lastSpace > splitPosition && [((id<ComItextpdfTextSplitCharacter>) nil_chk(splitCharacter_)) isSplitCharacterWithInt:0 withInt:0 withInt:1 withCharArray:ComItextpdfTextPdfPdfChunk_singleSpace_ withComItextpdfTextPdfPdfChunkArray:nil])
#line 433
  splitPosition = lastSpace;
  if (hyphenationEvent != nil && lastSpace >= 0 && lastSpace < currentPosition) {
    jint wordIdx = [self getWordWithNSString:value_ withInt:lastSpace];
    if (wordIdx > lastSpace) {
      NSString *pre = [hyphenationEvent getHyphenatedWordPreWithNSString:[((NSString *) nil_chk(value_)) substring:lastSpace endIndex:wordIdx] withComItextpdfTextPdfBaseFont:[font__ getFont] withFloat:[font__ size] withFloat:width - lastSpaceWidth];
      NSString *post = [hyphenationEvent getHyphenatedWordPost];
      if (((jint) [((NSString *) nil_chk(pre)) length]) > 0) {
        NSString *returnValue = JreStrcat("$$", post, [value_ substring:wordIdx]);
        value_ = [self trimWithNSString:JreStrcat("$$", [value_ substring:0 endIndex:lastSpace], pre)];
        ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:returnValue withComItextpdfTextPdfPdfChunk:self];
        return pc;
      }
    }
  }
  NSString *returnValue = [((NSString *) nil_chk(value_)) substring:splitPosition];
  value_ = [self trimWithNSString:[value_ substring:0 endIndex:splitPosition]];
  ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:returnValue withComItextpdfTextPdfPdfChunk:self];
  return pc;
}


#line 461
- (ComItextpdfTextPdfPdfChunk *)truncateWithFloat:(jfloat)width {
  
#line 462
  if (image_ != nil) {
    if ([image_ getScaledWidth] > width) {
      
#line 465
      if ([image_ isScaleToFitLineWhenOverflow]) {
        
#line 468
        [self setImageScalePercentageWithFloat:width / [image_ getWidth]];
        return nil;
      }
      ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:@"" withComItextpdfTextPdfPdfChunk:self];
      value_ = @"";
      (void) [((JavaUtilHashMap *) nil_chk(attributes_)) removeWithId:ComItextpdfTextChunk_get_IMAGE_()];
      image_ = nil;
      font__ = [ComItextpdfTextPdfPdfFont getDefaultFont];
      return pc;
    }
    else
#line 479
    return nil;
  }
  
#line 482
  jint currentPosition = 0;
  jfloat currentWidth = 0;
  
#line 486
  if (width < [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) width]) {
    NSString *returnValue = [((NSString *) nil_chk(value_)) substring:1];
    value_ = [value_ substring:0 endIndex:1];
    ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:returnValue withComItextpdfTextPdfPdfChunk:self];
    return pc;
  }
  
#line 495
  jint length = ((jint) [((NSString *) nil_chk(value_)) length]);
  jboolean surrogate = NO;
  while (currentPosition < length) {
    
#line 499
    surrogate = [ComItextpdfTextUtilities isSurrogatePairWithNSString:value_ withInt:currentPosition];
    if (surrogate)
#line 501
    currentWidth += [self getCharWidthWithInt:[ComItextpdfTextUtilities convertToUtf32WithNSString:value_ withInt:currentPosition]];
    else
#line 503
    currentWidth += [self getCharWidthWithInt:[value_ charAtWithInt:currentPosition]];
    if (currentWidth > width)
#line 505
    break;
    if (surrogate)
#line 507
    currentPosition++;
    currentPosition++;
  }
  
#line 512
  if (currentPosition == length) {
    return nil;
  }
  
#line 519
  if (currentPosition == 0) {
    currentPosition = 1;
    if (surrogate)
#line 522
    ++currentPosition;
  }
  NSString *returnValue = [value_ substring:currentPosition];
  value_ = [value_ substring:0 endIndex:currentPosition];
  ComItextpdfTextPdfPdfChunk *pc = [[ComItextpdfTextPdfPdfChunk alloc] initWithNSString:returnValue withComItextpdfTextPdfPdfChunk:self];
  return pc;
}

- (ComItextpdfTextPdfPdfFont *)font {
  
#line 539
  return font__;
}


#line 548
- (ComItextpdfTextBaseColor *)color {
  
#line 549
  return (ComItextpdfTextBaseColor *) check_class_cast([((JavaUtilHashMap *) nil_chk(noStroke_)) getWithId:ComItextpdfTextChunk_get_COLOR_()], [ComItextpdfTextBaseColor class]);
}


#line 558
- (jfloat)width {
  
#line 559
  return [self widthWithNSString:value_];
}


#line 562
- (jfloat)widthWithNSString:(NSString *)str {
  
#line 563
  if ([self isAttributeWithNSString:ComItextpdfTextChunk_get_SEPARATOR_()]) {
    return 0;
  }
  if ([self isImage]) {
    return [self getImageWidth];
  }
  
#line 570
  jfloat width = [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) widthWithNSString:str];
  
#line 572
  if ([self isAttributeWithNSString:ComItextpdfTextChunk_get_CHAR_SPACING_()]) {
    JavaLangFloat *cs = (JavaLangFloat *) check_class_cast([self getAttributeWithNSString:ComItextpdfTextChunk_get_CHAR_SPACING_()], [JavaLangFloat class]);
    width += ((jint) [((NSString *) nil_chk(str)) length]) * [((JavaLangFloat *) nil_chk(cs)) floatValue];
  }
  if ([self isAttributeWithNSString:ComItextpdfTextChunk_get_WORD_SPACING_()]) {
    jint numberOfSpaces = 0;
    jint idx = -1;
    while ((idx = [((NSString *) nil_chk(str)) indexOf:' ' fromIndex:idx + 1]) >= 0)
#line 580
    ++numberOfSpaces;
    JavaLangFloat *ws = (JavaLangFloat *) check_class_cast([self getAttributeWithNSString:ComItextpdfTextChunk_get_WORD_SPACING_()], [JavaLangFloat class]);
    width += numberOfSpaces * [((JavaLangFloat *) nil_chk(ws)) floatValue];
  }
  return width;
}


#line 587
- (jfloat)height {
  
#line 588
  if ([self isImage]) {
    return [self getImageHeight];
  }
  else {
    
#line 591
    return [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) size];
  }
}

- (jboolean)isNewlineSplit {
  
#line 602
  return newlineSplit_;
}


#line 613
- (jfloat)getWidthCorrectedWithFloat:(jfloat)charSpacing
                           withFloat:(jfloat)wordSpacing {
  
#line 615
  if (image_ != nil) {
    return [image_ getScaledWidth] + charSpacing;
  }
  jint numberOfSpaces = 0;
  jint idx = -1;
  while ((idx = [((NSString *) nil_chk(value_)) indexOf:' ' fromIndex:idx + 1]) >= 0)
#line 621
  ++numberOfSpaces;
  return [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) widthWithNSString:value_] + ((jint) [value_ length]) * charSpacing + numberOfSpaces * wordSpacing;
}


#line 629
- (jfloat)getTextRise {
  
#line 630
  JavaLangFloat *f = (JavaLangFloat *) check_class_cast([self getAttributeWithNSString:ComItextpdfTextChunk_get_SUBSUPSCRIPT_()], [JavaLangFloat class]);
  if (f != nil) {
    return [f floatValue];
  }
  return 0.0f;
}


#line 642
- (jfloat)trimLastSpace {
  
#line 644
  ComItextpdfTextPdfBaseFont *ft = [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) getFont];
  if ([((ComItextpdfTextPdfBaseFont *) nil_chk(ft)) getFontType] == ComItextpdfTextPdfBaseFont_FONT_TYPE_CJK && [ft getUnicodeEquivalentWithInt:' '] != ' ') {
    if (((jint) [((NSString *) nil_chk(value_)) length]) > 1 && [value_ hasSuffix:@"\x01"]) {
      value_ = [value_ substring:0 endIndex:((jint) [value_ length]) - 1];
      return [font__ widthWithInt:0x0001];
    }
  }
  else {
    if (((jint) [((NSString *) nil_chk(value_)) length]) > 1 && [value_ hasSuffix:@" "]) {
      value_ = [value_ substring:0 endIndex:((jint) [value_ length]) - 1];
      return [font__ widthWithInt:' '];
    }
  }
  return 0;
}


#line 659
- (jfloat)trimFirstSpace {
  ComItextpdfTextPdfBaseFont *ft = [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) getFont];
  if ([((ComItextpdfTextPdfBaseFont *) nil_chk(ft)) getFontType] == ComItextpdfTextPdfBaseFont_FONT_TYPE_CJK && [ft getUnicodeEquivalentWithInt:' '] != ' ') {
    if (((jint) [((NSString *) nil_chk(value_)) length]) > 1 && [value_ hasPrefix:@"\x01"]) {
      value_ = [value_ substring:1];
      return [font__ widthWithInt:0x0001];
    }
  }
  else {
    if (((jint) [((NSString *) nil_chk(value_)) length]) > 1 && [value_ hasPrefix:@" "]) {
      value_ = [value_ substring:1];
      return [font__ widthWithInt:' '];
    }
  }
  return 0;
}


#line 684
- (id)getAttributeWithNSString:(NSString *)name {
  
#line 686
  if ([((JavaUtilHashMap *) nil_chk(attributes_)) containsKeyWithId:name])
#line 687
  return [attributes_ getWithId:name];
  return [((JavaUtilHashMap *) nil_chk(noStroke_)) getWithId:name];
}


#line 697
- (jboolean)isAttributeWithNSString:(NSString *)name {
  
#line 699
  if ([((JavaUtilHashMap *) nil_chk(attributes_)) containsKeyWithId:name])
#line 700
  return YES;
  return [((JavaUtilHashMap *) nil_chk(noStroke_)) containsKeyWithId:name];
}


#line 709
- (jboolean)isStroked {
  
#line 711
  return ![((JavaUtilHashMap *) nil_chk(attributes_)) isEmpty];
}


#line 719
- (jboolean)isSeparator {
  
#line 720
  return [self isAttributeWithNSString:ComItextpdfTextChunk_get_SEPARATOR_()];
}


#line 728
- (jboolean)isHorizontalSeparator {
  
#line 729
  if ([self isAttributeWithNSString:ComItextpdfTextChunk_get_SEPARATOR_()]) {
    IOSObjectArray *o = (IOSObjectArray *) check_class_cast([self getAttributeWithNSString:ComItextpdfTextChunk_get_SEPARATOR_()], [IOSObjectArray class]);
    return ![((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(nil_chk(o), 1), [JavaLangBoolean class])))) booleanValue];
  }
  return NO;
}


#line 741
- (jboolean)isTab {
  
#line 742
  return [self isAttributeWithNSString:ComItextpdfTextChunk_get_TAB_()];
}


#line 751
- (void)adjustLeftWithFloat:(jfloat)newValue {
  
#line 752
  IOSObjectArray *o = (IOSObjectArray *) check_class_cast([((JavaUtilHashMap *) nil_chk(attributes_)) getWithId:ComItextpdfTextChunk_get_TAB_()], [IOSObjectArray class]);
  if (o != nil) {
    (void) [attributes_ putWithId:ComItextpdfTextChunk_get_TAB_() withId:[IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(o, 0), IOSObjectArray_Get(o, 1), IOSObjectArray_Get(o, 2), [[JavaLangFloat alloc] initWithFloat:newValue] } count:4 type:[IOSClass classWithClass:[NSObject class]]]];
  }
}


#line 758
+ (ComItextpdfTextTabStop *)getTabStopWithComItextpdfTextPdfPdfChunk:(ComItextpdfTextPdfPdfChunk *)tab
                                                           withFloat:(jfloat)tabPosition {
  
#line 759
  ComItextpdfTextTabStop *tabStop = nil;
  IOSObjectArray *o = (IOSObjectArray *) check_class_cast([((JavaUtilHashMap *) nil_chk(((ComItextpdfTextPdfPdfChunk *) nil_chk(tab))->attributes_)) getWithId:ComItextpdfTextChunk_get_TAB_()], [IOSObjectArray class]);
  if (o != nil) {
    JavaLangFloat *tabInterval = (JavaLangFloat *) check_class_cast(IOSObjectArray_Get(o, 0), [JavaLangFloat class]);
    if ([JavaLangFloat isNaNWithFloat:[((JavaLangFloat *) nil_chk(tabInterval)) floatValue]]) {
      tabStop = [ComItextpdfTextTabSettings getTabStopNewInstanceWithFloat:tabPosition withComItextpdfTextTabSettings:(ComItextpdfTextTabSettings *) check_class_cast([tab->attributes_ getWithId:ComItextpdfTextChunk_get_TABSETTINGS_()], [ComItextpdfTextTabSettings class])];
    }
    else {
      
#line 766
      tabStop = [ComItextpdfTextTabStop newInstanceWithFloat:tabPosition withFloat:[tabInterval floatValue]];
    }
  }
  return tabStop;
}


#line 772
- (ComItextpdfTextTabStop *)getTabStop {
  
#line 773
  return (ComItextpdfTextTabStop *) check_class_cast([((JavaUtilHashMap *) nil_chk(attributes_)) getWithId:ComItextpdfTextPdfPdfChunk_TABSTOP_], [ComItextpdfTextTabStop class]);
}


#line 776
- (void)setTabStopWithComItextpdfTextTabStop:(ComItextpdfTextTabStop *)tabStop {
  
#line 777
  (void) [((JavaUtilHashMap *) nil_chk(attributes_)) putWithId:ComItextpdfTextPdfPdfChunk_TABSTOP_ withId:tabStop];
}


#line 785
- (jboolean)isImage {
  
#line 787
  return image_ != nil;
}


#line 795
- (ComItextpdfTextImage *)getImage {
  
#line 797
  return image_;
}


#line 800
- (jfloat)getImageHeight {
  return [((ComItextpdfTextImage *) nil_chk(image_)) getScaledHeight] * imageScalePercentage_;
}

- (jfloat)getImageWidth {
  
#line 805
  return [((ComItextpdfTextImage *) nil_chk(image_)) getScaledWidth] * imageScalePercentage_;
}


#line 812
- (jfloat)getImageScalePercentage {
  
#line 813
  return imageScalePercentage_;
}


#line 820
- (void)setImageScalePercentageWithFloat:(jfloat)imageScalePercentage {
  
#line 821
  self->imageScalePercentage_ = imageScalePercentage;
}


#line 829
- (void)setImageOffsetXWithFloat:(jfloat)offsetX {
  
#line 831
  self->offsetX_ = offsetX;
}


#line 839
- (jfloat)getImageOffsetX {
  
#line 841
  return offsetX_;
}


#line 849
- (void)setImageOffsetYWithFloat:(jfloat)offsetY {
  
#line 851
  self->offsetY_ = offsetY;
}


#line 859
- (jfloat)getImageOffsetY {
  
#line 861
  return offsetY_;
}


#line 869
- (void)setValueWithNSString:(NSString *)value {
  
#line 871
  self->value_ = value;
}

- (NSString *)description {
  
#line 879
  return value_;
}


#line 887
- (jboolean)isSpecialEncoding {
  
#line 888
  return [((NSString *) nil_chk(encoding_)) isEqual:ComItextpdfTextPdfCJKFont_get_CJK_ENCODING_()] || [encoding_ isEqual:ComItextpdfTextPdfBaseFont_get_IDENTITY_H_()];
}


#line 897
- (NSString *)getEncoding {
  
#line 898
  return encoding_;
}


#line 901
- (jint)length {
  
#line 902
  return ((jint) [((NSString *) nil_chk(value_)) length]);
}


#line 905
- (jint)lengthUtf32 {
  
#line 906
  if (![((NSString *) nil_chk(ComItextpdfTextPdfBaseFont_get_IDENTITY_H_())) isEqual:encoding_])
#line 907
  return ((jint) [((NSString *) nil_chk(value_)) length]);
  jint total = 0;
  jint len = ((jint) [((NSString *) nil_chk(value_)) length]);
  for (jint k = 0; k < len; ++k) {
    if ([ComItextpdfTextUtilities isSurrogateHighWithChar:[value_ charAtWithInt:k]])
#line 912
    ++k;
    ++total;
  }
  return total;
}


#line 918
- (jboolean)isExtSplitCharacterWithInt:(jint)start
                               withInt:(jint)current
                               withInt:(jint)end
                         withCharArray:(IOSCharArray *)cc
   withComItextpdfTextPdfPdfChunkArray:(IOSObjectArray *)ck {
  
#line 919
  return [((id<ComItextpdfTextSplitCharacter>) nil_chk(splitCharacter_)) isSplitCharacterWithInt:start withInt:current withInt:end withCharArray:cc withComItextpdfTextPdfPdfChunkArray:ck];
}

- (NSString *)trimWithNSString:(NSString *)string {
  
#line 929
  ComItextpdfTextPdfBaseFont *ft = [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) getFont];
  if ([((ComItextpdfTextPdfBaseFont *) nil_chk(ft)) getFontType] == ComItextpdfTextPdfBaseFont_FONT_TYPE_CJK && [ft getUnicodeEquivalentWithInt:' '] != ' ') {
    while ([((NSString *) nil_chk(string)) hasSuffix:@"\x01"]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
  }
  else {
    while ([((NSString *) nil_chk(string)) hasSuffix:@" "] || [string hasSuffix:@"\t"]) {
      string = [string substring:0 endIndex:((jint) [string length]) - 1];
    }
  }
  return string;
}


#line 943
- (jboolean)changeLeading {
  
#line 944
  return changeLeading__;
}


#line 947
- (jfloat)getLeading {
  
#line 948
  return leading_;
}


#line 951
- (jfloat)getCharWidthWithInt:(jint)c {
  
#line 952
  if ([ComItextpdfTextPdfPdfChunk noPrintWithInt:c])
#line 953
  return 0;
  if ([self isAttributeWithNSString:ComItextpdfTextChunk_get_CHAR_SPACING_()]) {
    JavaLangFloat *cs = (JavaLangFloat *) check_class_cast([self getAttributeWithNSString:ComItextpdfTextChunk_get_CHAR_SPACING_()], [JavaLangFloat class]);
    return [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) widthWithInt:c] + [((JavaLangFloat *) nil_chk(cs)) floatValue] * [font__ getHorizontalScaling];
  }
  if ([self isImage]) {
    return [self getImageWidth];
  }
  return [((ComItextpdfTextPdfPdfFont *) nil_chk(font__)) widthWithInt:c];
}


#line 964
+ (jboolean)noPrintWithInt:(jint)c {
  
#line 965
  return (c >= (jint) 0x200b && c <= (jint) 0x200f) || (c >= (jint) 0x202a && c <= (jint) 0x202e);
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfChunk *)other {
  [super copyAllFieldsTo:other];
  other->accessibleElement_ = accessibleElement_;
  other->attributes_ = attributes_;
  other->baseFont_ = baseFont_;
  other->changeLeading__ = changeLeading__;
  other->encoding_ = encoding_;
  other->font__ = font__;
  other->image_ = image_;
  other->imageScalePercentage_ = imageScalePercentage_;
  other->leading_ = leading_;
  other->newlineSplit_ = newlineSplit_;
  other->noStroke_ = noStroke_;
  other->offsetX_ = offsetX_;
  other->offsetY_ = offsetY_;
  other->splitCharacter_ = splitCharacter_;
  other->value_ = value_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfChunk class]) {
    ComItextpdfTextPdfPdfChunk_singleSpace_ = [IOSCharArray arrayWithChars:(jchar[]){
#line 67
      ' ' } count:1];
      ComItextpdfTextPdfPdfChunk_thisChunk_ = [IOSObjectArray arrayWithLength:
#line 68
      1 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfChunk class]]];
      ComItextpdfTextPdfPdfChunk_keysAttributes_ =
#line 71
      [[JavaUtilHashSet alloc] init];
      ComItextpdfTextPdfPdfChunk_keysNoStroke_ =
#line 74
      [[JavaUtilHashSet alloc] init];
      {
        
#line 78
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_ACTION_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_UNDERLINE_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_REMOTEGOTO_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_LOCALGOTO_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_LOCALDESTINATION_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_GENERICTAG_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_NEWPAGE_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_IMAGE_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_BACKGROUND_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_PDFANNOTATION_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_SKEW_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_HSCALE_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_SEPARATOR_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_TAB_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_TABSETTINGS_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_CHAR_SPACING_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_WORD_SPACING_()];
        [ComItextpdfTextPdfPdfChunk_keysAttributes_ addWithId:ComItextpdfTextChunk_get_LINEHEIGHT_()];
        [ComItextpdfTextPdfPdfChunk_keysNoStroke_ addWithId:ComItextpdfTextChunk_get_SUBSUPSCRIPT_()];
        [ComItextpdfTextPdfPdfChunk_keysNoStroke_ addWithId:ComItextpdfTextChunk_get_SPLITCHARACTER_()];
        [ComItextpdfTextPdfPdfChunk_keysNoStroke_ addWithId:ComItextpdfTextChunk_get_HYPHENATION_()];
        [ComItextpdfTextPdfPdfChunk_keysNoStroke_ addWithId:ComItextpdfTextChunk_get_TEXTRENDERMODE_()];
      }
      ComItextpdfTextPdfPdfChunk_initialized = YES;
    }
  }

+ (IOSObjectArray *)__annotations_adjustLeftWithFloat_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withComItextpdfTextPdfPdfChunk:", "PdfChunk", NULL, 0x0, NULL },
    { "initWithComItextpdfTextChunk:withComItextpdfTextPdfPdfAction:", "PdfChunk", NULL, 0x0, NULL },
    { "initWithComItextpdfTextChunk:withComItextpdfTextPdfPdfAction:withComItextpdfTextTabSettings:", "PdfChunk", NULL, 0x0, NULL },
    { "getUnicodeEquivalentWithInt:", "getUnicodeEquivalent", "I", 0x1, NULL },
    { "getWordWithNSString:withInt:", "getWord", "I", 0x4, NULL },
    { "splitWithFloat:", "split", "Lcom.itextpdf.text.pdf.PdfChunk;", 0x0, NULL },
    { "truncateWithFloat:", "truncate", "Lcom.itextpdf.text.pdf.PdfChunk;", 0x0, NULL },
    { "font", NULL, "Lcom.itextpdf.text.pdf.PdfFont;", 0x0, NULL },
    { "color", NULL, "Lcom.itextpdf.text.BaseColor;", 0x0, NULL },
    { "width", NULL, "F", 0x0, NULL },
    { "widthWithNSString:", "width", "F", 0x0, NULL },
    { "height", NULL, "F", 0x0, NULL },
    { "isNewlineSplit", NULL, "Z", 0x1, NULL },
    { "getWidthCorrectedWithFloat:withFloat:", "getWidthCorrected", "F", 0x1, NULL },
    { "getTextRise", NULL, "F", 0x1, NULL },
    { "trimLastSpace", NULL, "F", 0x1, NULL },
    { "trimFirstSpace", NULL, "F", 0x1, NULL },
    { "getAttributeWithNSString:", "getAttribute", "Ljava.lang.Object;", 0x0, NULL },
    { "isAttributeWithNSString:", "isAttribute", "Z", 0x0, NULL },
    { "isStroked", NULL, "Z", 0x0, NULL },
    { "isSeparator", NULL, "Z", 0x0, NULL },
    { "isHorizontalSeparator", NULL, "Z", 0x0, NULL },
    { "isTab", NULL, "Z", 0x0, NULL },
    { "adjustLeftWithFloat:", "adjustLeft", "V", 0x0, NULL },
    { "getTabStopWithComItextpdfTextPdfPdfChunk:withFloat:", "getTabStop", "Lcom.itextpdf.text.TabStop;", 0x8, NULL },
    { "getTabStop", NULL, "Lcom.itextpdf.text.TabStop;", 0x0, NULL },
    { "setTabStopWithComItextpdfTextTabStop:", "setTabStop", "V", 0x0, NULL },
    { "isImage", NULL, "Z", 0x0, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x0, NULL },
    { "getImageHeight", NULL, "F", 0x0, NULL },
    { "getImageWidth", NULL, "F", 0x0, NULL },
    { "getImageScalePercentage", NULL, "F", 0x1, NULL },
    { "setImageScalePercentageWithFloat:", "setImageScalePercentage", "V", 0x1, NULL },
    { "setImageOffsetXWithFloat:", "setImageOffsetX", "V", 0x0, NULL },
    { "getImageOffsetX", NULL, "F", 0x0, NULL },
    { "setImageOffsetYWithFloat:", "setImageOffsetY", "V", 0x0, NULL },
    { "getImageOffsetY", NULL, "F", 0x0, NULL },
    { "setValueWithNSString:", "setValue", "V", 0x0, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "isSpecialEncoding", NULL, "Z", 0x0, NULL },
    { "getEncoding", NULL, "Ljava.lang.String;", 0x0, NULL },
    { "length", NULL, "I", 0x0, NULL },
    { "lengthUtf32", NULL, "I", 0x0, NULL },
    { "isExtSplitCharacterWithInt:withInt:withInt:withCharArray:withComItextpdfTextPdfPdfChunkArray:", "isExtSplitCharacter", "Z", 0x0, NULL },
    { "trimWithNSString:", "trim", "Ljava.lang.String;", 0x0, NULL },
    { "changeLeading", NULL, "Z", 0x1, NULL },
    { "getLeading", NULL, "F", 0x1, NULL },
    { "getCharWidthWithInt:", "getCharWidth", "F", 0x0, NULL },
    { "noPrintWithInt:", "noPrint", "Z", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "singleSpace_", NULL, 0x1a, "[C", &ComItextpdfTextPdfPdfChunk_singleSpace_,  },
    { "thisChunk_", NULL, 0x1a, "[Lcom.itextpdf.text.pdf.PdfChunk;", &ComItextpdfTextPdfPdfChunk_thisChunk_,  },
    { "ITALIC_ANGLE_", NULL, 0x1a, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfChunk_ITALIC_ANGLE },
    { "keysAttributes_", NULL, 0x1a, "Ljava.util.HashSet;", &ComItextpdfTextPdfPdfChunk_keysAttributes_,  },
    { "keysNoStroke_", NULL, 0x1a, "Ljava.util.HashSet;", &ComItextpdfTextPdfPdfChunk_keysNoStroke_,  },
    { "TABSTOP_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfTextPdfPdfChunk_TABSTOP_,  },
    { "value_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "encoding_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "font__", "font", 0x4, "Lcom.itextpdf.text.pdf.PdfFont;", NULL,  },
    { "baseFont_", NULL, 0x4, "Lcom.itextpdf.text.pdf.BaseFont;", NULL,  },
    { "splitCharacter_", NULL, 0x4, "Lcom.itextpdf.text.SplitCharacter;", NULL,  },
    { "attributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "noStroke_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "newlineSplit_", NULL, 0x4, "Z", NULL,  },
    { "image_", NULL, 0x4, "Lcom.itextpdf.text.Image;", NULL,  },
    { "imageScalePercentage_", NULL, 0x4, "F", NULL,  },
    { "offsetX_", NULL, 0x4, "F", NULL,  },
    { "offsetY_", NULL, 0x4, "F", NULL,  },
    { "changeLeading__", "changeLeading", 0x4, "Z", NULL,  },
    { "leading_", NULL, 0x4, "F", NULL,  },
    { "accessibleElement_", NULL, 0x4, "Lcom.itextpdf.text.pdf.interfaces.IAccessibleElement;", NULL,  },
    { "UNDERLINE_THICKNESS_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfChunk_UNDERLINE_THICKNESS },
    { "UNDERLINE_OFFSET_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfChunk_UNDERLINE_OFFSET },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfChunk = { "PdfChunk", "com.itextpdf.text.pdf", NULL, 0x1, 49, methods, 23, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfChunk;
}

@end
