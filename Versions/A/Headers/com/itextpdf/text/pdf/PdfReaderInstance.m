//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfReaderInstance.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfReaderInstance.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfImportedPage.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfReaderInstance.h"
#include "com/itextpdf/text/pdf/PdfRectangle.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

BOOL ComItextpdfTextPdfPdfReaderInstance_initialized = NO;


#line 57
@implementation ComItextpdfTextPdfPdfReaderInstance

ComItextpdfTextPdfPdfLiteral * ComItextpdfTextPdfPdfReaderInstance_IDENTITYMATRIX_;
ComItextpdfTextPdfPdfNumber * ComItextpdfTextPdfPdfReaderInstance_ONE_;


#line 68
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                    withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self = [super init]) {
    importedPages_ =
#line 63
    [[JavaUtilHashMap alloc] init];
    visited_ =
#line 65
    [[JavaUtilHashSet alloc] init];
    nextRound_ =
#line 66
    [[JavaUtilArrayList alloc] init];
    
#line 69
    self->reader_ = reader;
    
#line 70
    self->writer_ = writer;
    
#line 71
    file_ = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getSafeFile];
    
#line 72
    myXref_ = [IOSIntArray arrayWithLength:[reader getXrefSize]];
  }
  return self;
}


#line 75
- (ComItextpdfTextPdfPdfReader *)getReader {
  
#line 76
  return reader_;
}


#line 79
- (ComItextpdfTextPdfPdfImportedPage *)getImportedPageWithInt:(jint)pageNumber {
  
#line 80
  if (![((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) isOpenedWithFullPermissions])
#line 81
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"pdfreader.not.opened.with.owner.password" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (pageNumber < 1 || pageNumber > [reader_ getNumberOfPages])
#line 83
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.page.number.1" withInt:pageNumber]];
  JavaLangInteger *i = [JavaLangInteger valueOfWithInt:pageNumber];
  ComItextpdfTextPdfPdfImportedPage *pageT = [((JavaUtilHashMap *) nil_chk(importedPages_)) getWithId:i];
  if (pageT == nil) {
    pageT = [[ComItextpdfTextPdfPdfImportedPage alloc] initWithComItextpdfTextPdfPdfReaderInstance:self withComItextpdfTextPdfPdfWriter:writer_ withInt:pageNumber];
    (void) [importedPages_ putWithId:i withId:pageT];
  }
  return pageT;
}


#line 93
- (jint)getNewObjectNumberWithInt:(jint)number
                          withInt:(jint)generation {
  
#line 94
  if (IOSIntArray_Get(nil_chk(myXref_), number) == 0) {
    *IOSIntArray_GetRef(myXref_, number) = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getIndirectReferenceNumber];
    [((JavaUtilArrayList *) nil_chk(nextRound_)) addWithId:[JavaLangInteger valueOfWithInt:number]];
  }
  return IOSIntArray_Get(myXref_, number);
}


#line 101
- (ComItextpdfTextPdfRandomAccessFileOrArray *)getReaderFile {
  
#line 102
  return file_;
}


#line 105
- (ComItextpdfTextPdfPdfObject *)getResourcesWithInt:(jint)pageNumber {
  
#line 106
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNReleaseWithInt:pageNumber])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()]];
  return obj;
}


#line 117
- (ComItextpdfTextPdfPdfStream *)getFormXObjectWithInt:(jint)pageNumber
                                               withInt:(jint)compressionLevel {
  
#line 118
  ComItextpdfTextPdfPdfDictionary *page = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNReleaseWithInt:pageNumber];
  ComItextpdfTextPdfPdfObject *contents = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()]];
  ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  IOSByteArray *bout = nil;
  if (contents != nil) {
    if ([contents isStream])
#line 124
    [dic putAllWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPRStream *) check_class_cast(contents, [ComItextpdfTextPdfPRStream class])];
    else
#line 126
    bout = [reader_ getPageContentWithInt:pageNumber withComItextpdfTextPdfRandomAccessFileOrArray:file_];
  }
  else
#line 129
  bout = [IOSByteArray arrayWithLength:0];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_() withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[page getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()]]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_XOBJECT_()];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_FORM_()];
  ComItextpdfTextPdfPdfImportedPage *impPage = [((JavaUtilHashMap *) nil_chk(importedPages_)) getWithId:[JavaLangInteger valueOfWithInt:pageNumber]];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BBOX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithComItextpdfTextRectangle:[((ComItextpdfTextPdfPdfImportedPage *) nil_chk(impPage)) getBoundingBox]]];
  ComItextpdfTextPdfPdfArray *matrix = [impPage getMatrix];
  if (matrix == nil)
#line 137
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MATRIX_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfReaderInstance_IDENTITYMATRIX_];
  else
#line 139
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MATRIX_() withComItextpdfTextPdfPdfObject:matrix];
  [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FORMTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfReaderInstance_ONE_];
  ComItextpdfTextPdfPRStream *stream;
  if (bout == nil) {
    stream = [[ComItextpdfTextPdfPRStream alloc] initWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(contents, [ComItextpdfTextPdfPRStream class]) withComItextpdfTextPdfPdfDictionary:dic];
  }
  else {
    stream = [[ComItextpdfTextPdfPRStream alloc] initWithComItextpdfTextPdfPdfReader:reader_ withByteArray:bout withInt:compressionLevel];
    [stream putAllWithComItextpdfTextPdfPdfDictionary:dic];
  }
  return stream;
}


#line 152
- (void)writeAllVisited {
  
#line 153
  while (![((JavaUtilArrayList *) nil_chk(nextRound_)) isEmpty]) {
    JavaUtilArrayList *vec = nextRound_;
    nextRound_ = [[JavaUtilArrayList alloc] init];
    for (jint k = 0; k < [vec size]; ++k) {
      JavaLangInteger *i = [vec getWithInt:k];
      if (![((JavaUtilHashSet *) nil_chk(visited_)) containsWithId:i]) {
        [visited_ addWithId:i];
        jint n = [((JavaLangInteger *) nil_chk(i)) intValue];
        (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPdfObjectReleaseWithInt:n] withInt:IOSIntArray_Get(nil_chk(myXref_), n)];
      }
    }
  }
}


#line 167
- (void)writeAllPages {
  
#line 168
  @try {
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(file_)) reOpen];
    for (id __strong element in nil_chk([((JavaUtilHashMap *) nil_chk(importedPages_)) values])) {
      ComItextpdfTextPdfPdfImportedPage *ip = (ComItextpdfTextPdfPdfImportedPage *) check_class_cast(element, [ComItextpdfTextPdfPdfImportedPage class]);
      if ([((ComItextpdfTextPdfPdfImportedPage *) nil_chk(ip)) isToCopy]) {
        (void) [writer_ addToBodyWithComItextpdfTextPdfPdfObject:[ip getFormXObjectWithInt:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) getCompressionLevel]] withComItextpdfTextPdfPdfIndirectReference:[ip getIndirectReference]];
        [ip setCopied];
      }
    }
    [self writeAllVisited];
  }
  @finally {
    @try {
      
#line 183
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(file_)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfReaderInstance *)other {
  [super copyAllFieldsTo:other];
  other->file_ = file_;
  other->importedPages_ = importedPages_;
  other->myXref_ = myXref_;
  other->nextRound_ = nextRound_;
  other->reader_ = reader_;
  other->visited_ = visited_;
  other->writer_ = writer_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfReaderInstance class]) {
    ComItextpdfTextPdfPdfReaderInstance_IDENTITYMATRIX_ =
#line 58
    [[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:@"[1 0 0 1 0 0]"];
    ComItextpdfTextPdfPdfReaderInstance_ONE_ =
#line 59
    [[ComItextpdfTextPdfPdfNumber alloc] initWithInt:1];
    ComItextpdfTextPdfPdfReaderInstance_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfWriter:", "PdfReaderInstance", NULL, 0x0, NULL },
    { "getReader", NULL, "Lcom.itextpdf.text.pdf.PdfReader;", 0x0, NULL },
    { "getImportedPageWithInt:", "getImportedPage", "Lcom.itextpdf.text.pdf.PdfImportedPage;", 0x0, NULL },
    { "getNewObjectNumberWithInt:withInt:", "getNewObjectNumber", "I", 0x0, NULL },
    { "getReaderFile", NULL, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", 0x0, NULL },
    { "getResourcesWithInt:", "getResources", "Lcom.itextpdf.text.pdf.PdfObject;", 0x0, NULL },
    { "getFormXObjectWithInt:withInt:", "getFormXObject", "Lcom.itextpdf.text.pdf.PdfStream;", 0x0, "Ljava.io.IOException;" },
    { "writeAllVisited", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "writeAllPages", NULL, "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "IDENTITYMATRIX_", NULL, 0x18, "Lcom.itextpdf.text.pdf.PdfLiteral;", &ComItextpdfTextPdfPdfReaderInstance_IDENTITYMATRIX_,  },
    { "ONE_", NULL, 0x18, "Lcom.itextpdf.text.pdf.PdfNumber;", &ComItextpdfTextPdfPdfReaderInstance_ONE_,  },
    { "myXref_", NULL, 0x0, "[I", NULL,  },
    { "reader_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "file_", NULL, 0x0, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "importedPages_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "writer_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "visited_", NULL, 0x0, "Ljava.util.HashSet;", NULL,  },
    { "nextRound_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfReaderInstance = { "PdfReaderInstance", "com.itextpdf.text.pdf", NULL, 0x0, 9, methods, 9, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfReaderInstance;
}

@end
