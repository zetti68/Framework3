//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CMapAwareDocumentFont.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CMapAwareDocumentFont.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/CMapAwareDocumentFont.h"
#include "com/itextpdf/text/pdf/DocumentFont.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapByteCid.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapCache.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapCidUni.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapParserEx.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapSequence.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CMapToUnicode.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/CidLocationFromByte.h"
#include "com/itextpdf/text/pdf/fonts/cmaps/IdentityToUnicode.h"
#include "java/io/IOException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 69
@implementation ComItextpdfTextPdfCMapAwareDocumentFont


#line 89
- (instancetype)initWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)font {
  if (self =
#line 90
  [super initWithComItextpdfTextPdfPdfDictionary:font]) {
    
#line 91
    fontDic_ = font;
    
#line 92
    [self initFont];
  }
  return self;
}


#line 99
- (instancetype)initWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)refFont {
  if (self =
#line 100
  [super initWithComItextpdfTextPdfPRIndirectReference:refFont]) {
    
#line 101
    fontDic_ = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:refFont], [ComItextpdfTextPdfPdfDictionary class]);
    [self initFont];
  }
  return self;
}


#line 105
- (void)initFont {
  
#line 106
  [self processToUnicode];
  @try {
    
#line 109
    [self processUni2Byte];
    
#line 111
    spaceWidth_ = [super getWidthWithInt:' '];
    if (spaceWidth_ == 0) {
      spaceWidth_ = [self computeAverageWidth];
    }
    if (cjkEncoding_ != nil) {
      byteCid_ = [ComItextpdfTextPdfFontsCmapsCMapCache getCachedCMapByteCidWithNSString:cjkEncoding_];
      cidUni_ = [ComItextpdfTextPdfFontsCmapsCMapCache getCachedCMapCidUniWithNSString:uniMap_];
    }
  }
  @catch (JavaLangException *ex) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ex];
  }
}


#line 128
- (void)processToUnicode {
  ComItextpdfTextPdfPdfObject *toUni = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(fontDic_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TOUNICODE_()]];
  if ([toUni isKindOfClass:[ComItextpdfTextPdfPRStream class]]) {
    @try {
      IOSByteArray *touni = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(toUni, [ComItextpdfTextPdfPRStream class])];
      ComItextpdfTextPdfFontsCmapsCidLocationFromByte *lb = [[ComItextpdfTextPdfFontsCmapsCidLocationFromByte alloc] initWithByteArray:touni];
      toUnicodeCmap_ = [[ComItextpdfTextPdfFontsCmapsCMapToUnicode alloc] init];
      [ComItextpdfTextPdfFontsCmapsCMapParserEx parseCidWithNSString:@"" withComItextpdfTextPdfFontsCmapsAbstractCMap:toUnicodeCmap_ withComItextpdfTextPdfFontsCmapsCidLocation:lb];
      uni2cid_ = [toUnicodeCmap_ createReverseMapping];
    }
    @catch (
#line 137
    JavaIoIOException *e) {
      toUnicodeCmap_ = nil;
      uni2cid_ = nil;
    }
  }
  else
#line 144
  if (isType0_) {
    
#line 146
    @try {
      ComItextpdfTextPdfPdfName *encodingName = [fontDic_ getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_()];
      if (encodingName == nil)
#line 149
      return;
      NSString *enc = [ComItextpdfTextPdfPdfName decodeNameWithNSString:[((ComItextpdfTextPdfPdfName *) nil_chk(encodingName)) description]];
      if (![((NSString *) nil_chk(enc)) isEqual:@"Identity-H"])
#line 152
      return;
      ComItextpdfTextPdfPdfArray *df = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[fontDic_ getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESCENDANTFONTS_()]], [ComItextpdfTextPdfPdfArray class]);
      ComItextpdfTextPdfPdfDictionary *cidft = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfArray *) nil_chk(df)) getPdfObjectWithInt:0]], [ComItextpdfTextPdfPdfDictionary class]);
      ComItextpdfTextPdfPdfDictionary *cidinfo = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(cidft)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CIDSYSTEMINFO_()];
      if (cidinfo == nil)
#line 157
      return;
      ComItextpdfTextPdfPdfString *ordering = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(cidinfo)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDERING_()];
      if (ordering == nil)
#line 160
      return;
      ComItextpdfTextPdfFontsCmapsCMapToUnicode *touni = [ComItextpdfTextPdfFontsCmapsIdentityToUnicode GetMapFromOrderingWithNSString:[((ComItextpdfTextPdfPdfString *) nil_chk(ordering)) toUnicodeString]];
      if (touni == nil)
#line 163
      return;
      toUnicodeCmap_ = touni;
      uni2cid_ = [((ComItextpdfTextPdfFontsCmapsCMapToUnicode *) nil_chk(toUnicodeCmap_)) createReverseMapping];
    }
    @catch (
#line 166
    JavaIoIOException *e) {
      toUnicodeCmap_ = nil;
      uni2cid_ = nil;
    }
  }
}


#line 179
- (void)processUni2Byte {
  ComItextpdfTextPdfIntHashtable *byte2uni = [self getByte2Uni];
  IOSIntArray *e = [((ComItextpdfTextPdfIntHashtable *) nil_chk(byte2uni)) toOrderedKeys];
  if (((IOSIntArray *) nil_chk(e))->size_ == 0)
#line 188
  return;
  
#line 190
  cidbyte2uni_ = [IOSCharArray arrayWithLength:256];
  for (jint k = 0; k < e->size_; ++k) {
    jint key = IOSIntArray_Get(e, k);
    *IOSCharArray_GetRef(cidbyte2uni_, key) = (jchar) [byte2uni getWithInt:key];
  }
  if (toUnicodeCmap_ != nil) {
    
#line 213
    id<JavaUtilMap> dm = [toUnicodeCmap_ createDirectMapping];
    for (id<JavaUtilMap_Entry> __strong kv in nil_chk([((id<JavaUtilMap>) nil_chk(dm)) entrySet])) {
      if ([((JavaLangInteger *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(kv)) getKey])) intValue] < 256) {
        *IOSCharArray_GetRef(cidbyte2uni_, [((JavaLangInteger *) nil_chk([kv getKey])) intValue]) = (jchar) [((JavaLangInteger *) nil_chk([kv getValue])) intValue];
      }
    }
  }
  ComItextpdfTextPdfIntHashtable *diffmap = [self getDiffmap];
  if (diffmap != nil) {
    
#line 223
    e = [diffmap toOrderedKeys];
    for (jint k = 0; k < ((IOSIntArray *) nil_chk(e))->size_; ++k) {
      jint n = [diffmap getWithInt:IOSIntArray_Get(e, k)];
      if (n < 256)
#line 227
      *IOSCharArray_GetRef(cidbyte2uni_, n) = (jchar) IOSIntArray_Get(e, k);
    }
  }
}


#line 240
- (jint)computeAverageWidth {
  
#line 241
  jint count = 0;
  jint total = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(widths_))->size_; i++) {
    if (IOSIntArray_Get(widths_, i) != 0) {
      total += IOSIntArray_Get(widths_, i);
      count++;
    }
  }
  return count != 0 ? total / count : 0;
}


#line 258
- (jint)getWidthWithInt:(jint)char1 {
  
#line 259
  if (char1 == ' ')
#line 260
  return spaceWidth_ != 0 ? spaceWidth_ : defaultWidth_;
  return [super getWidthWithInt:char1];
}


#line 271
- (NSString *)decodeSingleCIDWithByteArray:(IOSByteArray *)bytes
                                   withInt:(jint)offset
                                   withInt:(jint)len {
  
#line 272
  if (toUnicodeCmap_ != nil) {
    if (offset + len > ((IOSByteArray *) nil_chk(bytes))->size_)
#line 274
    @throw [[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.index.1" withInt:offset + len]];
    NSString *s = [toUnicodeCmap_ lookupWithByteArray:bytes withInt:offset withInt:len];
    if (s != nil)
#line 277
    return s;
    if (len != 1 || cidbyte2uni_ == nil)
#line 279
    return nil;
  }
  
#line 282
  if (len == 1) {
    if (cidbyte2uni_ == nil)
#line 284
    return @"";
    else
#line 286
    return [NSString stringWithCharacters:cidbyte2uni_ offset:(jint) 0xff & IOSByteArray_Get(nil_chk(bytes), offset) length:1];
  }
  
#line 289
  @throw [[JavaLangError alloc] initWithNSString:@"Multi-byte glyphs not implemented yet"];
}


#line 300
- (NSString *)decodeWithByteArray:(IOSByteArray *)cidbytes
                          withInt:(jint)offset
                          withInt:(jint)len {
  
#line 301
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  if (toUnicodeCmap_ == nil && byteCid_ != nil) {
    ComItextpdfTextPdfFontsCmapsCMapSequence *seq = [[ComItextpdfTextPdfFontsCmapsCMapSequence alloc] initWithByteArray:cidbytes withInt:offset withInt:len];
    NSString *cid = [byteCid_ decodeSequenceWithComItextpdfTextPdfFontsCmapsCMapSequence:seq];
    for (jint k = 0; k < ((jint) [((NSString *) nil_chk(cid)) length]); ++k) {
      jint c = [((ComItextpdfTextPdfFontsCmapsCMapCidUni *) nil_chk(cidUni_)) lookupWithInt:[cid charAtWithInt:k]];
      if (c > 0)
#line 308
      (void) [sb appendWithNSString:[ComItextpdfTextUtilities convertFromUtf32WithInt:c]];
    }
  }
  else {
    for (jint i = offset; i < offset + len; i++) {
      NSString *rslt = [self decodeSingleCIDWithByteArray:cidbytes withInt:i withInt:1];
      if (rslt == nil && i < offset + len - 1) {
        rslt = [self decodeSingleCIDWithByteArray:cidbytes withInt:i withInt:2];
        i++;
      }
      if (rslt != nil)
#line 319
      (void) [sb appendWithNSString:rslt];
    }
  }
  return [sb description];
}


#line 333
- (NSString *)encodeWithByteArray:(IOSByteArray *)bytes
                          withInt:(jint)offset
                          withInt:(jint)len {
  
#line 334
  return [self decodeWithByteArray:bytes withInt:offset withInt:len];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCMapAwareDocumentFont *)other {
  [super copyAllFieldsTo:other];
  other->byteCid_ = byteCid_;
  other->cidUni_ = cidUni_;
  other->cidbyte2uni_ = cidbyte2uni_;
  other->fontDic_ = fontDic_;
  other->spaceWidth_ = spaceWidth_;
  other->toUnicodeCmap_ = toUnicodeCmap_;
  other->uni2cid_ = uni2cid_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfDictionary:", "CMapAwareDocumentFont", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPRIndirectReference:", "CMapAwareDocumentFont", NULL, 0x1, NULL },
    { "initFont", NULL, "V", 0x2, NULL },
    { "processToUnicode", NULL, "V", 0x2, NULL },
    { "processUni2Byte", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "computeAverageWidth", NULL, "I", 0x2, NULL },
    { "getWidthWithInt:", "getWidth", "I", 0x1, NULL },
    { "decodeSingleCIDWithByteArray:withInt:withInt:", "decodeSingleCID", "Ljava.lang.String;", 0x2, NULL },
    { "decodeWithByteArray:withInt:withInt:", "decode", "Ljava.lang.String;", 0x1, NULL },
    { "encodeWithByteArray:withInt:withInt:", "encode", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fontDic_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "spaceWidth_", NULL, 0x2, "I", NULL,  },
    { "toUnicodeCmap_", NULL, 0x2, "Lcom.itextpdf.text.pdf.fonts.cmaps.CMapToUnicode;", NULL,  },
    { "byteCid_", NULL, 0x2, "Lcom.itextpdf.text.pdf.fonts.cmaps.CMapByteCid;", NULL,  },
    { "cidUni_", NULL, 0x2, "Lcom.itextpdf.text.pdf.fonts.cmaps.CMapCidUni;", NULL,  },
    { "cidbyte2uni_", NULL, 0x2, "[C", NULL,  },
    { "uni2cid_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCMapAwareDocumentFont = { "CMapAwareDocumentFont", "com.itextpdf.text.pdf", NULL, 0x1, 10, methods, 7, fields, 0, NULL};
  return &_ComItextpdfTextPdfCMapAwareDocumentFont;
}

@end
