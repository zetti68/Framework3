//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/SimpleBookmark.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/SimpleBookmark.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNull.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/SimpleBookmark.h"
#include "com/itextpdf/text/pdf/SimpleNamedDestination.h"
#include "com/itextpdf/text/xml/XMLUtil.h"
#include "com/itextpdf/text/xml/simpleparser/IanaEncodings.h"
#include "com/itextpdf/text/xml/simpleparser/SimpleXMLParser.h"
#include "java/io/BufferedWriter.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/StringTokenizer.h"


#line 109
@implementation ComItextpdfTextPdfSimpleBookmark


#line 115
- (instancetype)init {
  if (self = [super init]) {
    attr_ =
#line 112
    [[JavaUtilStack alloc] init];
  }
  return self;
}


#line 118
+ (id<JavaUtilList>)bookmarkDepthWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                             withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)outline
                              withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)pages
                                                     withBoolean:(jboolean)processCurrentOutlineOnly {
  
#line 119
  JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
  while (outline != nil) {
    JavaUtilHashMap *map = [[JavaUtilHashMap alloc] init];
    ComItextpdfTextPdfPdfString *title = (ComItextpdfTextPdfPdfString *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TITLE_()]], [ComItextpdfTextPdfPdfString class]);
    (void) [map putWithId:@"Title" withId:[((ComItextpdfTextPdfPdfString *) nil_chk(title)) toUnicodeString]];
    ComItextpdfTextPdfPdfArray *color = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[outline getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_C_()]], [ComItextpdfTextPdfPdfArray class]);
    if (color != nil && [color size] == 3) {
      ComItextpdfTextPdfByteBuffer *out = [[ComItextpdfTextPdfByteBuffer alloc] init];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([out appendWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([color getAsNumberWithInt:0])) floatValue]])) appendWithChar:' '];
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([out appendWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([color getAsNumberWithInt:1])) floatValue]])) appendWithChar:' '];
      (void) [out appendWithFloat:[((ComItextpdfTextPdfPdfNumber *) nil_chk([color getAsNumberWithInt:2])) floatValue]];
      (void) [map putWithId:@"Color" withId:[ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:[out toByteArray] withNSString:nil]];
      @try {
        [out close];
      }
      @catch (
#line 133
      JavaIoIOException *e) {
        
#line 135
        [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      }
    }
    ComItextpdfTextPdfPdfNumber *style = (ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[outline getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()]], [ComItextpdfTextPdfPdfNumber class]);
    if (style != nil) {
      jint f = [style intValue];
      NSString *s = @"";
      if ((f & 1) != 0)
#line 143
      s = JreStrcat("$$", s, @"italic ");
      if ((f & 2) != 0)
#line 145
      s = JreStrcat("$$", s, @"bold ");
      s = [s trim];
      if (((jint) [((NSString *) nil_chk(s)) length]) != 0)
#line 148
      (void) [map putWithId:@"Style" withId:s];
    }
    ComItextpdfTextPdfPdfNumber *count = (ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[outline getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_()]], [ComItextpdfTextPdfPdfNumber class]);
    if (count != nil && [count intValue] < 0)
#line 152
    (void) [map putWithId:@"Open" withId:@"false"];
    @try {
      ComItextpdfTextPdfPdfObject *dest = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[outline getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEST_()]];
      if (dest != nil) {
        [ComItextpdfTextPdfSimpleBookmark mapGotoBookmarkWithJavaUtilHashMap:map withComItextpdfTextPdfPdfObject:dest withComItextpdfTextPdfIntHashtable:pages];
      }
      else {
        ComItextpdfTextPdfPdfDictionary *action = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[outline getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_()]], [ComItextpdfTextPdfPdfDictionary class]);
        if (action != nil) {
          if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_GOTO_())) isEqual:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()]]]) {
            dest = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()]];
            if (dest != nil) {
              [ComItextpdfTextPdfSimpleBookmark mapGotoBookmarkWithJavaUtilHashMap:map withComItextpdfTextPdfPdfObject:dest withComItextpdfTextPdfIntHashtable:pages];
            }
          }
          else if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_URI_())) isEqual:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()]]]) {
            (void) [map putWithId:@"Action" withId:@"URI"];
            (void) [map putWithId:@"URI" withId:[((ComItextpdfTextPdfPdfString *) nil_chk(((ComItextpdfTextPdfPdfString *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_URI_()]], [ComItextpdfTextPdfPdfString class])))) toUnicodeString]];
          }
          else if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_JAVASCRIPT_())) isEqual:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()]]]) {
            (void) [map putWithId:@"Action" withId:@"JS"];
            (void) [map putWithId:@"Code" withId:[((ComItextpdfTextPdfPdfObject *) nil_chk([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JS_()]])) description]];
          }
          else if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_GOTOR_())) isEqual:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()]]]) {
            dest = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()]];
            if (dest != nil) {
              if ([dest isString])
#line 179
              (void) [map putWithId:@"Named" withId:[dest description]];
              else if ([dest isName])
#line 181
              (void) [map putWithId:@"NamedN" withId:[ComItextpdfTextPdfPdfName decodeNameWithNSString:[dest description]]];
              else if ([dest isArray]) {
                ComItextpdfTextPdfPdfArray *arr = (ComItextpdfTextPdfPdfArray *) check_class_cast(dest, [ComItextpdfTextPdfPdfArray class]);
                JavaLangStringBuffer *s = [[JavaLangStringBuffer alloc] init];
                (void) [s appendWithNSString:[((ComItextpdfTextPdfPdfObject *) nil_chk([arr getPdfObjectWithInt:0])) description]];
                (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:' '])) appendWithNSString:[((ComItextpdfTextPdfPdfObject *) nil_chk([arr getPdfObjectWithInt:1])) description]];
                for (jint k = 2; k < [arr size]; ++k)
#line 188
                (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:' '])) appendWithNSString:[((ComItextpdfTextPdfPdfObject *) nil_chk([arr getPdfObjectWithInt:k])) description]];
                (void) [map putWithId:@"Page" withId:[s description]];
              }
            }
            (void) [map putWithId:@"Action" withId:@"GoToR"];
            ComItextpdfTextPdfPdfObject *file = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()]];
            if (file != nil) {
              if ([file isString])
#line 196
              (void) [map putWithId:@"File" withId:[((ComItextpdfTextPdfPdfString *) check_class_cast(file, [ComItextpdfTextPdfPdfString class])) toUnicodeString]];
              else if ([file isDictionary]) {
                file = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(file, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()]];
                if ([((ComItextpdfTextPdfPdfObject *) nil_chk(file)) isString])
#line 200
                (void) [map putWithId:@"File" withId:[((ComItextpdfTextPdfPdfString *) check_class_cast(file, [ComItextpdfTextPdfPdfString class])) toUnicodeString]];
              }
            }
            ComItextpdfTextPdfPdfObject *newWindow = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEWWINDOW_()]];
            if (newWindow != nil)
#line 205
            (void) [map putWithId:@"NewWindow" withId:[newWindow description]];
          }
          else if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_LAUNCH_())) isEqual:[ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()]]]) {
            (void) [map putWithId:@"Action" withId:@"Launch"];
            ComItextpdfTextPdfPdfObject *file = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()]];
            if (file == nil)
#line 211
            file = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[action getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIN_()]];
            if (file != nil) {
              if ([file isString])
#line 214
              (void) [map putWithId:@"File" withId:[((ComItextpdfTextPdfPdfString *) check_class_cast(file, [ComItextpdfTextPdfPdfString class])) toUnicodeString]];
              else if ([file isDictionary]) {
                file = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(file, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()]];
                if ([((ComItextpdfTextPdfPdfObject *) nil_chk(file)) isString])
#line 218
                (void) [map putWithId:@"File" withId:[((ComItextpdfTextPdfPdfString *) check_class_cast(file, [ComItextpdfTextPdfPdfString class])) toUnicodeString]];
              }
            }
          }
        }
      }
    }
    @catch (JavaLangException *e) {
    }
    
#line 228
    ComItextpdfTextPdfPdfDictionary *first = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[outline getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_()]], [ComItextpdfTextPdfPdfDictionary class]);
    if (first != nil) {
      (void) [map putWithId:@"Kids" withId:[ComItextpdfTextPdfSimpleBookmark bookmarkDepthWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfDictionary:first withComItextpdfTextPdfIntHashtable:pages withBoolean:NO]];
    }
    [list addWithId:map];
    if (!processCurrentOutlineOnly)
#line 234
    outline = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[outline getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEXT_()]], [ComItextpdfTextPdfPdfDictionary class]);
    else
#line 236
    outline = nil;
  }
  return list;
}


#line 241
+ (void)mapGotoBookmarkWithJavaUtilHashMap:(JavaUtilHashMap *)map
           withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)dest
        withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)pages {
  
#line 243
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(dest)) isString])
#line 244
  (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:@"Named" withId:[dest description]];
  else if ([dest isName])
#line 246
  (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:@"Named" withId:[ComItextpdfTextPdfPdfName decodeNameWithNSString:[dest description]]];
  else if ([dest isArray])
#line 248
  (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:@"Page" withId:[ComItextpdfTextPdfSimpleBookmark makeBookmarkParamWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(dest, [ComItextpdfTextPdfPdfArray class]) withComItextpdfTextPdfIntHashtable:pages]];
  (void) [((JavaUtilHashMap *) nil_chk(map)) putWithId:@"Action" withId:@"GoTo"];
}


#line 252
+ (NSString *)makeBookmarkParamWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)dest
                           withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)pages {
  
#line 254
  JavaLangStringBuffer *s = [[JavaLangStringBuffer alloc] init];
  ComItextpdfTextPdfPdfObject *obj = [((ComItextpdfTextPdfPdfArray *) nil_chk(dest)) getPdfObjectWithInt:0];
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isNumber])
#line 257
  (void) [s appendWithInt:[((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) intValue] + 1];
  else
#line 259
  (void) [s appendWithInt:[((ComItextpdfTextPdfIntHashtable *) nil_chk(pages)) getWithInt:[ComItextpdfTextPdfSimpleBookmark getNumberWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])]]];
  (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:' '])) appendWithNSString:[((NSString *) nil_chk([((ComItextpdfTextPdfPdfObject *) nil_chk([dest getPdfObjectWithInt:1])) description])) substring:1]];
  for (jint k = 2; k < [dest size]; ++k)
#line 262
  (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:' '])) appendWithNSString:[((ComItextpdfTextPdfPdfObject *) nil_chk([dest getPdfObjectWithInt:k])) description]];
  return [s description];
}


#line 272
+ (jint)getNumberWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)indirect {
  
#line 274
  ComItextpdfTextPdfPdfDictionary *pdfObj = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:indirect], [ComItextpdfTextPdfPdfDictionary class]);
  if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(pdfObj)) containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()] && [((ComItextpdfTextPdfPdfObject *) nil_chk([pdfObj getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()])) isEqual:ComItextpdfTextPdfPdfName_get_PAGES_()] && [pdfObj containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()]) {
    
#line 277
    ComItextpdfTextPdfPdfArray *kids = (ComItextpdfTextPdfPdfArray *) check_class_cast([pdfObj getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()], [ComItextpdfTextPdfPdfArray class]);
    indirect = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) getPdfObjectWithInt:0], [ComItextpdfTextPdfPdfIndirectReference class]);
  }
  return [((ComItextpdfTextPdfPdfIndirectReference *) nil_chk(indirect)) getNumber];
}


#line 290
+ (id<JavaUtilList>)getBookmarkWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 291
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog];
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTLINES_()]];
  if (obj == nil || ![obj isDictionary])
#line 294
  return nil;
  ComItextpdfTextPdfPdfDictionary *outlines = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
  return [ComItextpdfTextPdfSimpleBookmark getBookmarkWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfDictionary:outlines withBoolean:NO];
}


#line 308
+ (id<JavaUtilList>)getBookmarkWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                           withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)outline
                                                   withBoolean:(jboolean)includeRoot {
  
#line 309
  if (outline == nil)
#line 310
  return nil;
  ComItextpdfTextPdfIntHashtable *pages = [[ComItextpdfTextPdfIntHashtable alloc] init];
  jint numPages = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getNumberOfPages];
  for (jint k = 1; k <= numPages; ++k) {
    [pages putWithInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk([reader getPageOrigRefWithInt:k])) getNumber] withInt:k];
    [reader releasePageWithInt:k];
  }
  if (includeRoot)
#line 318
  return [ComItextpdfTextPdfSimpleBookmark bookmarkDepthWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfDictionary:outline withComItextpdfTextPdfIntHashtable:pages withBoolean:YES];
  else
#line 320
  return [ComItextpdfTextPdfSimpleBookmark bookmarkDepthWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_()]], [ComItextpdfTextPdfPdfDictionary class]) withComItextpdfTextPdfIntHashtable:pages withBoolean:NO];
}


#line 331
+ (void)eliminatePagesWithJavaUtilList:(id<JavaUtilList>)list
                          withIntArray:(IOSIntArray *)pageRange {
  
#line 332
  if (list == nil)
#line 333
  return;
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(list)) listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    JavaUtilHashMap *map = [it next];
    jboolean hit = NO;
    if ([@"GoTo" isEqual:[((JavaUtilHashMap *) nil_chk(map)) getWithId:@"Action"]]) {
      NSString *page = (NSString *) check_class_cast([map getWithId:@"Page"], [NSString class]);
      if (page != nil) {
        page = [page trim];
        jint idx = [((NSString *) nil_chk(page)) indexOf:' '];
        jint pageNum;
        if (idx < 0)
#line 344
        pageNum = [JavaLangInteger parseIntWithNSString:page];
        else
#line 346
        pageNum = [JavaLangInteger parseIntWithNSString:[page substring:0 endIndex:idx]];
        jint len = ((IOSIntArray *) nil_chk(pageRange))->size_ & (jint) 0xfffffffe;
        for (jint k = 0; k < len; k += 2) {
          if (pageNum >= IOSIntArray_Get(pageRange, k) && pageNum <= IOSIntArray_Get(pageRange, k + 1)) {
            hit = YES;
            break;
          }
        }
      }
    }
    id<JavaUtilList> kids = (id<JavaUtilList>) check_protocol_cast([map getWithId:@"Kids"], @protocol(JavaUtilList));
    if (kids != nil) {
      [ComItextpdfTextPdfSimpleBookmark eliminatePagesWithJavaUtilList:kids withIntArray:pageRange];
      if ([kids isEmpty]) {
        (void) [map removeWithId:@"Kids"];
        kids = nil;
      }
    }
    if (hit) {
      if (kids == nil)
#line 366
      [it remove];
      else {
        (void) [map removeWithId:@"Action"];
        (void) [map removeWithId:@"Page"];
        (void) [map removeWithId:@"Named"];
      }
    }
  }
}


#line 387
+ (void)shiftPageNumbersWithJavaUtilList:(id<JavaUtilList>)list
                                 withInt:(jint)pageShift
                            withIntArray:(IOSIntArray *)pageRange {
  
#line 388
  if (list == nil)
#line 389
  return;
  for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(list)) listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    JavaUtilHashMap *map = [it next];
    if ([@"GoTo" isEqual:[((JavaUtilHashMap *) nil_chk(map)) getWithId:@"Action"]]) {
      NSString *page = (NSString *) check_class_cast([map getWithId:@"Page"], [NSString class]);
      if (page != nil) {
        page = [page trim];
        jint idx = [((NSString *) nil_chk(page)) indexOf:' '];
        jint pageNum;
        if (idx < 0)
#line 399
        pageNum = [JavaLangInteger parseIntWithNSString:page];
        else
#line 401
        pageNum = [JavaLangInteger parseIntWithNSString:[page substring:0 endIndex:idx]];
        jboolean hit = NO;
        if (pageRange == nil)
#line 404
        hit = YES;
        else {
          jint len = pageRange->size_ & (jint) 0xfffffffe;
          for (jint k = 0; k < len; k += 2) {
            if (pageNum >= IOSIntArray_Get(pageRange, k) && pageNum <= IOSIntArray_Get(pageRange, k + 1)) {
              hit = YES;
              break;
            }
          }
        }
        if (hit) {
          if (idx < 0)
#line 416
          page = [JavaLangInteger toStringWithInt:pageNum + pageShift];
          else
#line 418
          page = JreStrcat("I$", pageNum + pageShift, [page substring:idx]);
        }
        (void) [map putWithId:@"Page" withId:page];
      }
    }
    id<JavaUtilList> kids = (id<JavaUtilList>) check_protocol_cast([map getWithId:@"Kids"], @protocol(JavaUtilList));
    if (kids != nil)
#line 425
    [ComItextpdfTextPdfSimpleBookmark shiftPageNumbersWithJavaUtilList:kids withInt:pageShift withIntArray:pageRange];
  }
}


#line 429
+ (void)createOutlineActionWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)outline
                                           withJavaUtilHashMap:(JavaUtilHashMap *)map
                               withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                   withBoolean:(jboolean)namedAsNames {
  
#line 430
  @try {
    NSString *action = (NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk(map)) getWithId:@"Action"], [NSString class]);
    if ([@"GoTo" isEqual:action]) {
      NSString *p;
      if ((p = (NSString *) check_class_cast([map getWithId:@"Named"], [NSString class])) != nil) {
        if (namedAsNames)
#line 436
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEST_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:p]];
        else
#line 438
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEST_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:p withNSString:nil]];
      }
      else if ((p = (NSString *) check_class_cast([map getWithId:@"Page"], [NSString class])) != nil) {
        ComItextpdfTextPdfPdfArray *ar = [[ComItextpdfTextPdfPdfArray alloc] init];
        JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:p];
        jint n = [JavaLangInteger parseIntWithNSString:[tk nextToken]];
        [ar addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getPageReferenceWithInt:n]];
        if (![tk hasMoreTokens]) {
          [ar addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_XYZ_()];
          [ar addWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 10000, 0 } count:3]];
        }
        else {
          NSString *fn = [tk nextToken];
          if ([((NSString *) nil_chk(fn)) hasPrefix:@"/"])
#line 452
          fn = [fn substring:1];
          [ar addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:fn]];
          for (jint k = 0; k < 4 && [tk hasMoreTokens]; ++k) {
            fn = [tk nextToken];
            if ([((NSString *) nil_chk(fn)) isEqual:@"null"])
#line 457
            [ar addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfNull_get_PDFNULL_()];
            else
#line 459
            [ar addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithNSString:fn]];
          }
        }
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEST_() withComItextpdfTextPdfPdfObject:ar];
      }
    }
    else if ([@"GoToR" isEqual:action]) {
      NSString *p;
      ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      if ((p = (NSString *) check_class_cast([map getWithId:@"Named"], [NSString class])) != nil)
#line 469
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:p withNSString:nil]];
      else if ((p = (NSString *) check_class_cast([map getWithId:@"NamedN"], [NSString class])) != nil)
#line 471
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:p]];
      else if ((p = (NSString *) check_class_cast([map getWithId:@"Page"], [NSString class])) != nil) {
        ComItextpdfTextPdfPdfArray *ar = [[ComItextpdfTextPdfPdfArray alloc] init];
        JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:p];
        [ar addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithNSString:[tk nextToken]]];
        if (![tk hasMoreTokens]) {
          [ar addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_XYZ_()];
          [ar addWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0, 10000, 0 } count:3]];
        }
        else {
          NSString *fn = [tk nextToken];
          if ([((NSString *) nil_chk(fn)) hasPrefix:@"/"])
#line 483
          fn = [fn substring:1];
          [ar addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:fn]];
          for (jint k = 0; k < 4 && [tk hasMoreTokens]; ++k) {
            fn = [tk nextToken];
            if ([((NSString *) nil_chk(fn)) isEqual:@"null"])
#line 488
            [ar addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfNull_get_PDFNULL_()];
            else
#line 490
            [ar addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithNSString:fn]];
          }
        }
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_() withComItextpdfTextPdfPdfObject:ar];
      }
      NSString *file = (NSString *) check_class_cast([map getWithId:@"File"], [NSString class]);
      if ([dic size] > 0 && file != nil) {
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_GOTOR_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:file]];
        NSString *nw = (NSString *) check_class_cast([map getWithId:@"NewWindow"], [NSString class]);
        if (nw != nil) {
          if ([nw isEqual:@"true"])
#line 502
          [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEWWINDOW_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
          else if ([nw isEqual:@"false"])
#line 504
          [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEWWINDOW_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFFALSE_()];
        }
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_() withComItextpdfTextPdfPdfObject:dic];
      }
    }
    else if ([@"URI" isEqual:action]) {
      NSString *uri = (NSString *) check_class_cast([map getWithId:@"URI"], [NSString class]);
      if (uri != nil) {
        ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_URI_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_URI_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:uri]];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_() withComItextpdfTextPdfPdfObject:dic];
      }
    }
    else if ([@"JS" isEqual:action]) {
      NSString *code = (NSString *) check_class_cast([map getWithId:@"Code"], [NSString class]);
      if (code != nil) {
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_() withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfAction javaScriptWithNSString:code withComItextpdfTextPdfPdfWriter:writer]];
      }
    }
    else if ([@"Launch" isEqual:action]) {
      NSString *file = (NSString *) check_class_cast([map getWithId:@"File"], [NSString class]);
      if (file != nil) {
        ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_LAUNCH_()];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:file]];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(outline)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_() withComItextpdfTextPdfPdfObject:dic];
      }
    }
  }
  @catch (JavaLangException *e) {
  }
}


#line 540
+ (IOSObjectArray *)iterateOutlinesWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                        withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)parent
                                                  withJavaUtilList:(id<JavaUtilList>)kids
                                                       withBoolean:(jboolean)namedAsNames {
  
#line 541
  IOSObjectArray *refs = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(kids)) size] type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfIndirectReference class]]];
  for (jint k = 0; k < refs->size_; ++k)
#line 543
  IOSObjectArray_Set(refs, k, [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getPdfIndirectReference]);
  jint ptr = 0;
  jint count = 0;
  for (id<JavaUtilIterator> it = [kids listIterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ++ptr) {
    JavaUtilHashMap *map = [it next];
    IOSObjectArray *lower = nil;
    id<JavaUtilList> subKid = (id<JavaUtilList>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(map)) getWithId:@"Kids"], @protocol(JavaUtilList));
    if (subKid != nil && ![subKid isEmpty])
#line 551
    lower = [ComItextpdfTextPdfSimpleBookmark iterateOutlinesWithComItextpdfTextPdfPdfWriter:writer withComItextpdfTextPdfPdfIndirectReference:IOSObjectArray_Get(refs, ptr) withJavaUtilList:subKid withBoolean:namedAsNames];
    ComItextpdfTextPdfPdfDictionary *outline = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    ++count;
    if (lower != nil) {
      [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_() withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(IOSObjectArray_Get(lower, 0), [ComItextpdfTextPdfPdfIndirectReference class])];
      [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LAST_() withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(IOSObjectArray_Get(lower, 1), [ComItextpdfTextPdfPdfIndirectReference class])];
      jint n = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(lower, 2), [JavaLangInteger class])))) intValue];
      if ([@"false" isEqual:[map getWithId:@"Open"]]) {
        [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:-n]];
      }
      else {
        [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:n]];
        count += n;
      }
    }
    [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:parent];
    if (ptr > 0)
#line 568
    [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PREV_() withComItextpdfTextPdfPdfObject:IOSObjectArray_Get(refs, ptr - 1)];
    if (ptr < refs->size_ - 1)
#line 570
    [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEXT_() withComItextpdfTextPdfPdfObject:IOSObjectArray_Get(refs, ptr + 1)];
    [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TITLE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:(NSString *) check_class_cast([map getWithId:@"Title"], [NSString class]) withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
    NSString *color = (NSString *) check_class_cast([map getWithId:@"Color"], [NSString class]);
    if (color != nil) {
      @try {
        ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] init];
        JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:color];
        for (jint k = 0; k < 3; ++k) {
          jfloat f = [JavaLangFloat parseFloatWithNSString:[tk nextToken]];
          if (f < 0) f = 0;
          if (f > 1) f = 1;
          [arr addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:f]];
        }
        [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_C_() withComItextpdfTextPdfPdfObject:arr];
      }
      @catch (
#line 584
      JavaLangException *e) {
      }
    }
    
#line 586
    NSString *style = (NSString *) check_class_cast([map getWithId:@"Style"], [NSString class]);
    if (style != nil) {
      style = [style lowercaseStringWithJRELocale:JavaUtilLocale_get_ENGLISH_()];
      jint bits = 0;
      if ([((NSString *) nil_chk(style)) indexOfString:@"italic"] >= 0)
#line 591
      bits |= 1;
      if ([style indexOfString:@"bold"] >= 0)
#line 593
      bits |= 2;
      if (bits != 0)
#line 595
      [outline putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:bits]];
    }
    [ComItextpdfTextPdfSimpleBookmark createOutlineActionWithComItextpdfTextPdfPdfDictionary:outline withJavaUtilHashMap:map withComItextpdfTextPdfPdfWriter:writer withBoolean:namedAsNames];
    (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:outline withComItextpdfTextPdfPdfIndirectReference:IOSObjectArray_Get(refs, ptr)];
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(refs, 0), IOSObjectArray_Get(refs, refs->size_ - 1), [JavaLangInteger valueOfWithInt:count] } count:3 type:[IOSClass classWithClass:[NSObject class]]];
}


#line 615
+ (void)exportToXMLNodeWithJavaUtilList:(id<JavaUtilList>)list
                       withJavaIoWriter:(JavaIoWriter *)outArg
                                withInt:(jint)indent
                            withBoolean:(jboolean)onlyASCII {
  
#line 616
  NSString *dep = @"";
  if (indent != -1) {
    for (jint k = 0; k < indent; ++k)
#line 619
    dep = JreStrcat("$$", dep, @"  ");
  }
  for (JavaUtilHashMap * __strong map in nil_chk(list)) {
    NSString *title = nil;
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:dep];
    [outArg writeWithNSString:@"<Title "];
    id<JavaUtilList> kids = nil;
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(map)) entrySet])) {
      NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      if ([((NSString *) nil_chk(key)) isEqual:@"Title"]) {
        title = (NSString *) check_class_cast([entry_ getValue], [NSString class]);
        continue;
      }
      else if ([key isEqual:@"Kids"]) {
        kids = (id<JavaUtilList>) check_protocol_cast([entry_ getValue], @protocol(JavaUtilList));
        continue;
      }
      else {
        [outArg writeWithNSString:key];
        [outArg writeWithNSString:@"=\""];
        NSString *value = (NSString *) check_class_cast([entry_ getValue], [NSString class]);
        if ([key isEqual:@"Named"] || [key isEqual:@"NamedN"])
#line 641
        value = [ComItextpdfTextPdfSimpleNamedDestination escapeBinaryStringWithNSString:value];
        [outArg writeWithNSString:[ComItextpdfTextXmlXMLUtil escapeXMLWithNSString:value withBoolean:onlyASCII]];
        [outArg writeWithNSString:@"\" "];
      }
    }
    [outArg writeWithNSString:@">"];
    if (title == nil)
#line 648
    title = @"";
    [outArg writeWithNSString:[ComItextpdfTextXmlXMLUtil escapeXMLWithNSString:title withBoolean:onlyASCII]];
    if (kids != nil) {
      [outArg writeWithNSString:@"\n"];
      [ComItextpdfTextPdfSimpleBookmark exportToXMLNodeWithJavaUtilList:kids withJavaIoWriter:outArg withInt:indent == -1 ? indent : indent + 1 withBoolean:onlyASCII];
      [outArg writeWithNSString:dep];
    }
    [outArg writeWithNSString:@"</Title>\n"];
  }
}


#line 687
+ (void)exportToXMLWithJavaUtilList:(id<JavaUtilList>)list
             withJavaIoOutputStream:(JavaIoOutputStream *)outArg
                       withNSString:(NSString *)encoding
                        withBoolean:(jboolean)onlyASCII {
  
#line 688
  NSString *jenc = [ComItextpdfTextXmlSimpleparserIanaEncodings getJavaEncodingWithNSString:encoding];
  JavaIoWriter *wrt = [[JavaIoBufferedWriter alloc] initWithJavaIoWriter:[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:outArg withNSString:jenc]];
  [ComItextpdfTextPdfSimpleBookmark exportToXMLWithJavaUtilList:list withJavaIoWriter:wrt withNSString:encoding withBoolean:onlyASCII];
}


#line 703
+ (void)exportToXMLWithJavaUtilList:(id<JavaUtilList>)list
                   withJavaIoWriter:(JavaIoWriter *)wrt
                       withNSString:(NSString *)encoding
                        withBoolean:(jboolean)onlyASCII {
  
#line 704
  [((JavaIoWriter *) nil_chk(wrt)) writeWithNSString:@"<?xml version=\"1.0\" encoding=\""];
  [wrt writeWithNSString:[ComItextpdfTextXmlXMLUtil escapeXMLWithNSString:encoding withBoolean:onlyASCII]];
  [wrt writeWithNSString:@"\"?>\n<Bookmark>\n"];
  [ComItextpdfTextPdfSimpleBookmark exportToXMLNodeWithJavaUtilList:list withJavaIoWriter:wrt withInt:1 withBoolean:onlyASCII];
  [wrt writeWithNSString:@"</Bookmark>\n"];
  [wrt flush];
}


#line 718
+ (id<JavaUtilList>)importFromXMLWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  
#line 719
  ComItextpdfTextPdfSimpleBookmark *book = [[ComItextpdfTextPdfSimpleBookmark alloc] init];
  [ComItextpdfTextXmlSimpleparserSimpleXMLParser parseWithComItextpdfTextXmlSimpleparserSimpleXMLDocHandler:book withJavaIoInputStream:inArg];
  return book->topList_;
}


#line 730
+ (id<JavaUtilList>)importFromXMLWithJavaIoReader:(JavaIoReader *)inArg {
  
#line 731
  ComItextpdfTextPdfSimpleBookmark *book = [[ComItextpdfTextPdfSimpleBookmark alloc] init];
  [ComItextpdfTextXmlSimpleparserSimpleXMLParser parseWithComItextpdfTextXmlSimpleparserSimpleXMLDocHandler:book withJavaIoReader:inArg];
  return book->topList_;
}


#line 736
- (void)endDocument {
}


#line 740
- (void)endElementWithNSString:(NSString *)tag {
  
#line 741
  if ([((NSString *) nil_chk(tag)) isEqual:@"Bookmark"]) {
    if ([((JavaUtilStack *) nil_chk(attr_)) isEmpty])
#line 743
    return;
    else
#line 745
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"bookmark.end.tag.out.of.place" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if (![tag isEqual:@"Title"])
#line 748
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.end.tag.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ tag } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  JavaUtilHashMap *attributes = [((JavaUtilStack *) nil_chk(attr_)) pop];
  NSString *title = (NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk(attributes)) getWithId:@"Title"], [NSString class]);
  (void) [attributes putWithId:@"Title" withId:[((NSString *) nil_chk(title)) trim]];
  NSString *named = (NSString *) check_class_cast([attributes getWithId:@"Named"], [NSString class]);
  if (named != nil)
#line 754
  (void) [attributes putWithId:@"Named" withId:[ComItextpdfTextPdfSimpleNamedDestination unEscapeBinaryStringWithNSString:named]];
  named = (NSString *) check_class_cast([attributes getWithId:@"NamedN"], [NSString class]);
  if (named != nil)
#line 757
  (void) [attributes putWithId:@"NamedN" withId:[ComItextpdfTextPdfSimpleNamedDestination unEscapeBinaryStringWithNSString:named]];
  if ([attr_ isEmpty])
#line 759
  [((JavaUtilArrayList *) nil_chk(topList_)) addWithId:attributes];
  else {
    JavaUtilHashMap *parent = [attr_ peek];
    id<JavaUtilList> kids = (id<JavaUtilList>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(parent)) getWithId:@"Kids"], @protocol(JavaUtilList));
    if (kids == nil) {
      kids = [[JavaUtilArrayList alloc] init];
      (void) [parent putWithId:@"Kids" withId:kids];
    }
    [((id<JavaUtilList>) nil_chk(kids)) addWithId:attributes];
  }
}


#line 771
- (void)startDocument {
}

- (void)startElementWithNSString:(NSString *)tag
                 withJavaUtilMap:(id<JavaUtilMap>)h {
  
#line 775
  if (topList_ == nil) {
    if ([((NSString *) nil_chk(tag)) isEqual:@"Bookmark"]) {
      topList_ = [[JavaUtilArrayList alloc] init];
      return;
    }
    else
#line 781
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"root.element.is.not.bookmark.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ tag } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if (![((NSString *) nil_chk(tag)) isEqual:@"Title"])
#line 784
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"tag.1.not.allowed" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ tag } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  JavaUtilHashMap *attributes = [[JavaUtilHashMap alloc] initWithJavaUtilMap:h];
  (void) [attributes putWithId:@"Title" withId:@""];
  (void) [attributes removeWithId:@"Kids"];
  (void) [((JavaUtilStack *) nil_chk(attr_)) pushWithId:attributes];
}


#line 791
- (void)textWithNSString:(NSString *)str {
  
#line 792
  if ([((JavaUtilStack *) nil_chk(attr_)) isEmpty])
#line 793
  return;
  JavaUtilHashMap *attributes = [attr_ peek];
  NSString *title = (NSString *) check_class_cast([((JavaUtilHashMap *) nil_chk(attributes)) getWithId:@"Title"], [NSString class]);
  title = JreStrcat("$$", title, str);
  (void) [attributes putWithId:@"Title" withId:title];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfSimpleBookmark *)other {
  [super copyAllFieldsTo:other];
  other->attr_ = attr_;
  other->topList_ = topList_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleBookmark", NULL, 0x2, NULL },
    { "bookmarkDepthWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfIntHashtable:withBoolean:", "bookmarkDepth", "Ljava.util.List;", 0xa, NULL },
    { "mapGotoBookmarkWithJavaUtilHashMap:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfIntHashtable:", "mapGotoBookmark", "V", 0xa, NULL },
    { "makeBookmarkParamWithComItextpdfTextPdfPdfArray:withComItextpdfTextPdfIntHashtable:", "makeBookmarkParam", "Ljava.lang.String;", 0xa, NULL },
    { "getNumberWithComItextpdfTextPdfPdfIndirectReference:", "getNumber", "I", 0xa, NULL },
    { "getBookmarkWithComItextpdfTextPdfPdfReader:", "getBookmark", "Ljava.util.List;", 0x9, NULL },
    { "getBookmarkWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfDictionary:withBoolean:", "getBookmark", "Ljava.util.List;", 0x9, NULL },
    { "eliminatePagesWithJavaUtilList:withIntArray:", "eliminatePages", "V", 0x9, NULL },
    { "shiftPageNumbersWithJavaUtilList:withInt:withIntArray:", "shiftPageNumbers", "V", 0x9, NULL },
    { "createOutlineActionWithComItextpdfTextPdfPdfDictionary:withJavaUtilHashMap:withComItextpdfTextPdfPdfWriter:withBoolean:", "createOutlineAction", "V", 0x8, NULL },
    { "iterateOutlinesWithComItextpdfTextPdfPdfWriter:withComItextpdfTextPdfPdfIndirectReference:withJavaUtilList:withBoolean:", "iterateOutlines", "[Ljava.lang.Object;", 0x9, "Ljava.io.IOException;" },
    { "exportToXMLNodeWithJavaUtilList:withJavaIoWriter:withInt:withBoolean:", "exportToXMLNode", "V", 0x9, "Ljava.io.IOException;" },
    { "exportToXMLWithJavaUtilList:withJavaIoOutputStream:withNSString:withBoolean:", "exportToXML", "V", 0x9, "Ljava.io.IOException;" },
    { "exportToXMLWithJavaUtilList:withJavaIoWriter:withNSString:withBoolean:", "exportToXML", "V", 0x9, "Ljava.io.IOException;" },
    { "importFromXMLWithJavaIoInputStream:", "importFromXML", "Ljava.util.List;", 0x9, "Ljava.io.IOException;" },
    { "importFromXMLWithJavaIoReader:", "importFromXML", "Ljava.util.List;", 0x9, "Ljava.io.IOException;" },
    { "endDocument", NULL, "V", 0x1, NULL },
    { "endElementWithNSString:", "endElement", "V", 0x1, NULL },
    { "startDocument", NULL, "V", 0x1, NULL },
    { "startElementWithNSString:withJavaUtilMap:", "startElement", "V", 0x1, NULL },
    { "textWithNSString:", "text", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "topList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "attr_", NULL, 0x12, "Ljava.util.Stack;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSimpleBookmark = { "SimpleBookmark", "com.itextpdf.text.pdf", NULL, 0x11, 21, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfSimpleBookmark;
}

@end
