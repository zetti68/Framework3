//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BarcodeQRCode.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BarcodeQRCode.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BadElementException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/pdf/BarcodeQRCode.h"
#include "com/itextpdf/text/pdf/codec/CCITTG4Encoder.h"
#include "com/itextpdf/text/pdf/qrcode/ByteMatrix.h"
#include "com/itextpdf/text/pdf/qrcode/QRCodeWriter.h"
#include "com/itextpdf/text/pdf/qrcode/WriterException.h"
#include "java/util/Map.h"


#line 62
@implementation ComItextpdfTextPdfBarcodeQRCode


#line 77
- (instancetype)initWithNSString:(NSString *)content
                         withInt:(jint)width
                         withInt:(jint)height
                 withJavaUtilMap:(id<JavaUtilMap>)hints {
  if (self = [super init]) {
    
#line 78
    @try {
      ComItextpdfTextPdfQrcodeQRCodeWriter *qc = [[ComItextpdfTextPdfQrcodeQRCodeWriter alloc] init];
      bm_ = [qc encodeWithNSString:content withInt:width withInt:height withJavaUtilMap:hints];
    }
    @catch (ComItextpdfTextPdfQrcodeWriterException *ex) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ex];
    }
  }
  return self;
}


#line 87
- (IOSByteArray *)getBitMatrix {
  
#line 88
  jint width = [((ComItextpdfTextPdfQrcodeByteMatrix *) nil_chk(bm_)) getWidth];
  jint height = [bm_ getHeight];
  jint stride = (width + 7) / 8;
  IOSByteArray *b = [IOSByteArray arrayWithLength:stride * height];
  IOSObjectArray *mt = [bm_ getArray];
  for (jint y = 0; y < height; ++y) {
    IOSByteArray *line = IOSObjectArray_Get(nil_chk(mt), y);
    for (jint x = 0; x < width; ++x) {
      if (IOSByteArray_Get(nil_chk(line), x) != 0) {
        jint offset = stride * y + x / 8;
        *IOSByteArray_GetRef(b, offset) |= (jbyte) (RShift32((jint) 0x80, (x % 8)));
      }
    }
  }
  return b;
}


#line 109
- (ComItextpdfTextImage *)getImage {
  
#line 110
  IOSByteArray *b = [self getBitMatrix];
  IOSByteArray *g4 = [ComItextpdfTextPdfCodecCCITTG4Encoder compressWithByteArray:b withInt:[((ComItextpdfTextPdfQrcodeByteMatrix *) nil_chk(bm_)) getWidth] withInt:[bm_ getHeight]];
  return [ComItextpdfTextImage getInstanceWithInt:[bm_ getWidth] withInt:[bm_ getHeight] withBoolean:NO withInt:ComItextpdfTextElement_CCITTG4 withInt:ComItextpdfTextElement_CCITT_BLACKIS1 withByteArray:g4 withIntArray:nil];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfBarcodeQRCode *)other {
  [super copyAllFieldsTo:other];
  other->bm_ = bm_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:withInt:withJavaUtilMap:", "BarcodeQRCode", NULL, 0x1, NULL },
    { "getBitMatrix", NULL, "[B", 0x2, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x1, "Lcom.itextpdf.text.BadElementException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bm_", NULL, 0x0, "Lcom.itextpdf.text.pdf.qrcode.ByteMatrix;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfBarcodeQRCode = { "BarcodeQRCode", "com.itextpdf.text.pdf", NULL, 0x1, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfBarcodeQRCode;
}

@end
