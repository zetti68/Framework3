//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PushbuttonField.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PushbuttonField.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseField.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfAppearance.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBorderDictionary.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDashPattern.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfTemplate.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/PushbuttonField.h"
#include "java/io/IOException.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"


#line 82
@implementation ComItextpdfTextPdfPushbuttonField


#line 156
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                       withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)box
                                       withNSString:(NSString *)fieldName {
  if (self =
#line 157
  [super initWithComItextpdfTextPdfPdfWriter:writer withComItextpdfTextRectangle:box withNSString:fieldName]) {
    layout_ =
#line 110
    ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_ONLY;
    scaleIcon_ =
#line 125
    ComItextpdfTextPdfPushbuttonField_SCALE_ICON_ALWAYS;
    proportionalIcon_ =
#line 130
    YES;
    iconVerticalAdjustment_ =
#line 135
    0.5f;
    iconHorizontalAdjustment_ =
#line 140
    0.5f;
  }
  return self;
}


#line 164
- (jint)getLayout {
  
#line 165
  return self->layout_;
}


#line 176
- (void)setLayoutWithInt:(jint)layout {
  
#line 177
  if (layout < ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_ONLY || layout > ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_OVER_ICON)
#line 178
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"layout.out.of.bounds" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  self->layout_ = layout;
}


#line 186
- (ComItextpdfTextImage *)getImage {
  
#line 187
  return self->image_;
}


#line 194
- (void)setImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 195
  self->image_ = image;
  template__ = nil;
}


#line 203
- (ComItextpdfTextPdfPdfTemplate *)getTemplate {
  
#line 204
  return self->template__;
}


#line 211
- (void)setTemplateWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_ {
  
#line 212
  self->template__ = template_;
  image_ = nil;
}


#line 220
- (jint)getScaleIcon {
  
#line 221
  return self->scaleIcon_;
}


#line 231
- (void)setScaleIconWithInt:(jint)scaleIcon {
  
#line 232
  if (scaleIcon < ComItextpdfTextPdfPushbuttonField_SCALE_ICON_ALWAYS || scaleIcon > ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_SMALL)
#line 233
  scaleIcon = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_ALWAYS;
  self->scaleIcon_ = scaleIcon;
}


#line 241
- (jboolean)isProportionalIcon {
  
#line 242
  return self->proportionalIcon_;
}


#line 250
- (void)setProportionalIconWithBoolean:(jboolean)proportionalIcon {
  
#line 251
  self->proportionalIcon_ = proportionalIcon;
}


#line 258
- (jfloat)getIconVerticalAdjustment {
  
#line 259
  return self->iconVerticalAdjustment_;
}


#line 268
- (void)setIconVerticalAdjustmentWithFloat:(jfloat)iconVerticalAdjustment {
  
#line 269
  if (iconVerticalAdjustment < 0)
#line 270
  iconVerticalAdjustment = 0;
  else if (iconVerticalAdjustment > 1)
#line 272
  iconVerticalAdjustment = 1;
  self->iconVerticalAdjustment_ = iconVerticalAdjustment;
}

- (jfloat)getIconHorizontalAdjustment {
  
#line 281
  return self->iconHorizontalAdjustment_;
}


#line 290
- (void)setIconHorizontalAdjustmentWithFloat:(jfloat)iconHorizontalAdjustment {
  
#line 291
  if (iconHorizontalAdjustment < 0)
#line 292
  iconHorizontalAdjustment = 0;
  else if (iconHorizontalAdjustment > 1)
#line 294
  iconHorizontalAdjustment = 1;
  self->iconHorizontalAdjustment_ = iconHorizontalAdjustment;
}


#line 298
- (jfloat)calculateFontSizeWithFloat:(jfloat)w
                           withFloat:(jfloat)h {
  
#line 299
  ComItextpdfTextPdfBaseFont *ufont = [self getRealFont];
  jfloat fsize = fontSize_;
  if (fsize == 0) {
    jfloat bw = [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getWidthPointWithNSString:text_ withFloat:1];
    if (bw == 0)
#line 304
    fsize = 12;
    else
#line 306
    fsize = w / bw;
    jfloat nfsize = h / (1 - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:1]);
    fsize = [JavaLangMath minWithFloat:fsize withFloat:nfsize];
    if (fsize < 4)
#line 310
    fsize = 4;
  }
  return fsize;
}

- (ComItextpdfTextPdfPdfAppearance *)getAppearance {
  
#line 322
  ComItextpdfTextPdfPdfAppearance *app = [self getBorderAppearance];
  ComItextpdfTextRectangle *box = [[ComItextpdfTextRectangle alloc] initWithComItextpdfTextRectangle:[((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) getBoundingBox]];
  if ((text_ == nil || ((jint) [text_ length]) == 0) && (layout_ == ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_ONLY || (image_ == nil && template__ == nil && iconReference_ == nil))) {
    return app;
  }
  if (layout_ == ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_ONLY && image_ == nil && template__ == nil && iconReference_ == nil)
#line 328
  return app;
  ComItextpdfTextPdfBaseFont *ufont = [self getRealFont];
  jboolean borderExtra = borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_BEVELED || borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_INSET;
  jfloat h = [box getHeight] - borderWidth_ * 2;
  jfloat bw2 = borderWidth_;
  if (borderExtra) {
    h -= borderWidth_ * 2;
    bw2 *= 2;
  }
  jfloat offsetX = (borderExtra ? 2 * borderWidth_ : borderWidth_);
  offsetX = [JavaLangMath maxWithFloat:offsetX withFloat:1];
  jfloat offX = [JavaLangMath minWithFloat:bw2 withFloat:offsetX];
  tp_ = nil;
  jfloat textX = JavaLangFloat_NaN;
  jfloat textY = 0;
  jfloat fsize = fontSize_;
  jfloat wt = [box getWidth] - 2 * offX - 2;
  jfloat ht = [box getHeight] - 2 * offX;
  jfloat adj = (iconFitToBounds_ ? 0 : offX + 1);
  jint nlayout = layout_;
  if (image_ == nil && template__ == nil && iconReference_ == nil)
#line 349
  nlayout = ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_ONLY;
  ComItextpdfTextRectangle *iconBox = nil;
  while (YES) {
    {
      
#line 369
      jfloat nht;
      
#line 399
      jfloat nw;
      
#line 352
      switch (nlayout) {
        case ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_ONLY:
        case ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_OVER_ICON:
        if (text_ != nil && ((jint) [text_ length]) > 0 && wt > 0 && ht > 0) {
          fsize = [self calculateFontSizeWithFloat:wt withFloat:ht];
          textX = ([box getWidth] - [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getWidthPointWithNSString:text_ withFloat:fsize]) / 2;
          textY = ([box getHeight] - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:fsize]) / 2;
        }
        case ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_ONLY:
        if (nlayout == ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_OVER_ICON || nlayout == ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_ONLY)
#line 362
        iconBox = [[ComItextpdfTextRectangle alloc] initWithFloat:[box getLeft] + adj withFloat:[box getBottom] + adj withFloat:[box getRight] - adj withFloat:[box getTop] - adj];
        break;
        case ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_TOP_LABEL_BOTTOM:
        if (text_ == nil || ((jint) [text_ length]) == 0 || wt <= 0 || ht <= 0) {
          nlayout = ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_ONLY;
          continue;
        }
        nht = [box getHeight] * 0.35f - offX;
        if (nht > 0)
#line 371
        fsize = [self calculateFontSizeWithFloat:wt withFloat:nht];
        else
#line 373
        fsize = 4;
        textX = ([box getWidth] - [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getWidthPointWithNSString:text_ withFloat:fsize]) / 2;
        textY = offX - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:fsize];
        iconBox = [[ComItextpdfTextRectangle alloc] initWithFloat:[box getLeft] + adj withFloat:textY + fsize withFloat:[box getRight] - adj withFloat:[box getTop] - adj];
        break;
        case ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_TOP_ICON_BOTTOM:
        if (text_ == nil || ((jint) [text_ length]) == 0 || wt <= 0 || ht <= 0) {
          nlayout = ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_ONLY;
          continue;
        }
        nht = [box getHeight] * 0.35f - offX;
        if (nht > 0)
#line 385
        fsize = [self calculateFontSizeWithFloat:wt withFloat:nht];
        else
#line 387
        fsize = 4;
        textX = ([box getWidth] - [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getWidthPointWithNSString:text_ withFloat:fsize]) / 2;
        textY = [box getHeight] - offX - fsize;
        if (textY < offX)
#line 391
        textY = offX;
        iconBox = [[ComItextpdfTextRectangle alloc] initWithFloat:[box getLeft] + adj withFloat:[box getBottom] + adj withFloat:[box getRight] - adj withFloat:textY + [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:fsize]];
        break;
        case ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_LEFT_ICON_RIGHT:
        if (text_ == nil || ((jint) [text_ length]) == 0 || wt <= 0 || ht <= 0) {
          nlayout = ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_ONLY;
          continue;
        }
        nw = [box getWidth] * 0.35f - offX;
        if (nw > 0)
#line 401
        fsize = [self calculateFontSizeWithFloat:wt withFloat:nw];
        else
#line 403
        fsize = 4;
        if ([((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getWidthPointWithNSString:text_ withFloat:fsize] >= wt) {
          nlayout = ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_ONLY;
          fsize = fontSize_;
          continue;
        }
        textX = offX + 1;
        textY = ([box getHeight] - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:fsize]) / 2;
        iconBox = [[ComItextpdfTextRectangle alloc] initWithFloat:textX + [ufont getWidthPointWithNSString:text_ withFloat:fsize] withFloat:[box getBottom] + adj withFloat:[box getRight] - adj withFloat:[box getTop] - adj];
        break;
        case ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_LEFT_LABEL_RIGHT:
        if (text_ == nil || ((jint) [text_ length]) == 0 || wt <= 0 || ht <= 0) {
          nlayout = ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_ONLY;
          continue;
        }
        nw = [box getWidth] * 0.35f - offX;
        if (nw > 0)
#line 420
        fsize = [self calculateFontSizeWithFloat:wt withFloat:nw];
        else
#line 422
        fsize = 4;
        if ([((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getWidthPointWithNSString:text_ withFloat:fsize] >= wt) {
          nlayout = ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_ONLY;
          fsize = fontSize_;
          continue;
        }
        textX = [box getWidth] - [ufont getWidthPointWithNSString:text_ withFloat:fsize] - offX - 1;
        textY = ([box getHeight] - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:fsize]) / 2;
        iconBox = [[ComItextpdfTextRectangle alloc] initWithFloat:[box getLeft] + adj withFloat:[box getBottom] + adj withFloat:textX - 1 withFloat:[box getTop] - adj];
        break;
      }
    }
    
#line 433
    break;
  }
  if (textY < [box getBottom] + offX)
#line 436
  textY = [box getBottom] + offX;
  if (iconBox != nil && ([iconBox getWidth] <= 0 || [iconBox getHeight] <= 0))
#line 438
  iconBox = nil;
  jboolean haveIcon = NO;
  jfloat boundingBoxWidth = 0;
  jfloat boundingBoxHeight = 0;
  ComItextpdfTextPdfPdfArray *matrix = nil;
  if (iconBox != nil) {
    if (image_ != nil) {
      tp_ = [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
      [tp_ setBoundingBoxWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithComItextpdfTextRectangle:image_]];
      (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:tp_ withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FRM_()];
      [tp_ addImageWithComItextpdfTextImage:image_ withFloat:[image_ getWidth] withFloat:0 withFloat:0 withFloat:[image_ getHeight] withFloat:0 withFloat:0];
      haveIcon = YES;
      boundingBoxWidth = [((ComItextpdfTextRectangle *) nil_chk([tp_ getBoundingBox])) getWidth];
      boundingBoxHeight = [((ComItextpdfTextRectangle *) nil_chk([tp_ getBoundingBox])) getHeight];
    }
    else if (template__ != nil) {
      tp_ = [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
      [tp_ setBoundingBoxWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:[template__ getWidth] withFloat:[template__ getHeight]]];
      (void) [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:tp_ withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FRM_()];
      [tp_ addTemplateWithComItextpdfTextPdfPdfTemplate:template__ withFloat:[((ComItextpdfTextRectangle *) nil_chk([template__ getBoundingBox])) getLeft] withFloat:[((ComItextpdfTextRectangle *) nil_chk([template__ getBoundingBox])) getBottom]];
      haveIcon = YES;
      boundingBoxWidth = [((ComItextpdfTextRectangle *) nil_chk([tp_ getBoundingBox])) getWidth];
      boundingBoxHeight = [((ComItextpdfTextRectangle *) nil_chk([tp_ getBoundingBox])) getHeight];
    }
    else if (iconReference_ != nil) {
      ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:iconReference_], [ComItextpdfTextPdfPdfDictionary class]);
      if (dic != nil) {
        ComItextpdfTextRectangle *r2 = [ComItextpdfTextPdfPdfReader getNormalizedRectangleWithComItextpdfTextPdfPdfArray:[dic getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BBOX_()]];
        matrix = [dic getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MATRIX_()];
        haveIcon = YES;
        boundingBoxWidth = [((ComItextpdfTextRectangle *) nil_chk(r2)) getWidth];
        boundingBoxHeight = [r2 getHeight];
      }
    }
  }
  if (haveIcon) {
    jfloat icx = [((ComItextpdfTextRectangle *) nil_chk(iconBox)) getWidth] / boundingBoxWidth;
    jfloat icy = [iconBox getHeight] / boundingBoxHeight;
    if (proportionalIcon_) {
      switch (scaleIcon_) {
        case ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_BIG:
        icx = [JavaLangMath minWithFloat:icx withFloat:icy];
        icx = [JavaLangMath minWithFloat:icx withFloat:1];
        break;
        case ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_SMALL:
        icx = [JavaLangMath minWithFloat:icx withFloat:icy];
        icx = [JavaLangMath maxWithFloat:icx withFloat:1];
        break;
        case ComItextpdfTextPdfPushbuttonField_SCALE_ICON_NEVER:
        icx = 1;
        break;
        default:
        icx = [JavaLangMath minWithFloat:icx withFloat:icy];
        break;
      }
      icy = icx;
    }
    else {
      switch (scaleIcon_) {
        case ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_BIG:
        icx = [JavaLangMath minWithFloat:icx withFloat:1];
        icy = [JavaLangMath minWithFloat:icy withFloat:1];
        break;
        case ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_SMALL:
        icx = [JavaLangMath maxWithFloat:icx withFloat:1];
        icy = [JavaLangMath maxWithFloat:icy withFloat:1];
        break;
        case ComItextpdfTextPdfPushbuttonField_SCALE_ICON_NEVER:
        icx = icy = 1;
        break;
        default:
        break;
      }
    }
    jfloat xpos = [iconBox getLeft] + ([iconBox getWidth] - (boundingBoxWidth * icx)) * iconHorizontalAdjustment_;
    jfloat ypos = [iconBox getBottom] + ([iconBox getHeight] - (boundingBoxHeight * icy)) * iconVerticalAdjustment_;
    [app saveState];
    [app rectangleWithFloat:[iconBox getLeft] withFloat:[iconBox getBottom] withFloat:[iconBox getWidth] withFloat:[iconBox getHeight]];
    [app clip];
    [app newPath];
    if (tp_ != nil)
#line 519
    [app addTemplateWithComItextpdfTextPdfPdfTemplate:tp_ withFloat:icx withFloat:0 withFloat:0 withFloat:icy withFloat:xpos withFloat:ypos];
    else {
      jfloat cox = 0;
      jfloat coy = 0;
      if (matrix != nil && [matrix size] == 6) {
        ComItextpdfTextPdfPdfNumber *nm = [matrix getAsNumberWithInt:4];
        if (nm != nil)
#line 526
        cox = [nm floatValue];
        nm = [matrix getAsNumberWithInt:5];
        if (nm != nil)
#line 529
        coy = [nm floatValue];
      }
      [app addTemplateReferenceWithComItextpdfTextPdfPdfIndirectReference:iconReference_ withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FRM_() withFloat:icx withFloat:0 withFloat:0 withFloat:icy withFloat:xpos - cox * icx withFloat:ypos - coy * icy];
    }
    [app restoreState];
  }
  if (![JavaLangFloat isNaNWithFloat:textX]) {
    [app saveState];
    [app rectangleWithFloat:offX withFloat:offX withFloat:[box getWidth] - 2 * offX withFloat:[box getHeight] - 2 * offX];
    [app clip];
    [app newPath];
    if (textColor_ == nil)
#line 541
    [app resetGrayFill];
    else
#line 543
    [app setColorFillWithComItextpdfTextBaseColor:textColor_];
    [app beginText];
    [app setFontAndSizeWithComItextpdfTextPdfBaseFont:ufont withFloat:fsize];
    [app setTextMatrixWithFloat:textX withFloat:textY];
    [app showTextWithNSString:text_];
    [app endText];
    [app restoreState];
  }
  return app;
}


#line 560
- (ComItextpdfTextPdfPdfFormField *)getField {
  
#line 561
  ComItextpdfTextPdfPdfFormField *field = [ComItextpdfTextPdfPdfFormField createPushButtonWithComItextpdfTextPdfPdfWriter:writer_];
  [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) setWidgetWithComItextpdfTextRectangle:box_ withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_HIGHLIGHT_INVERT_()];
  if (fieldName_ != nil) {
    [field setFieldNameWithNSString:fieldName_];
    if ((options_ & ComItextpdfTextPdfBaseField_READ_ONLY) != 0)
#line 566
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_READ_ONLY];
    if ((options_ & ComItextpdfTextPdfBaseField_REQUIRED) != 0)
#line 568
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_REQUIRED];
  }
  if (text_ != nil)
#line 571
  [field setMKNormalCaptionWithNSString:text_];
  if (rotation_ != 0)
#line 573
  [field setMKRotationWithInt:rotation_];
  [field setBorderStyleWithComItextpdfTextPdfPdfBorderDictionary:[[ComItextpdfTextPdfPdfBorderDictionary alloc] initWithFloat:borderWidth_ withInt:borderStyle_ withComItextpdfTextPdfPdfDashPattern:[[ComItextpdfTextPdfPdfDashPattern alloc] initWithFloat:3]]];
  ComItextpdfTextPdfPdfAppearance *tpa = [self getAppearance];
  [field setAppearanceWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_APPEARANCE_NORMAL_() withComItextpdfTextPdfPdfTemplate:tpa];
  ComItextpdfTextPdfPdfAppearance *da = (ComItextpdfTextPdfPdfAppearance *) check_class_cast([((ComItextpdfTextPdfPdfAppearance *) nil_chk(tpa)) getDuplicate], [ComItextpdfTextPdfPdfAppearance class]);
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(da)) setFontAndSizeWithComItextpdfTextPdfBaseFont:[self getRealFont] withFloat:fontSize_];
  if (textColor_ == nil)
#line 580
  [da setGrayFillWithFloat:0];
  else
#line 582
  [da setColorFillWithComItextpdfTextBaseColor:textColor_];
  [field setDefaultAppearanceStringWithComItextpdfTextPdfPdfContentByte:da];
  if (borderColor_ != nil)
#line 585
  [field setMKBorderColorWithComItextpdfTextBaseColor:borderColor_];
  if (backgroundColor_ != nil)
#line 587
  [field setMKBackgroundColorWithComItextpdfTextBaseColor:backgroundColor_];
  switch (visibility_) {
    case ComItextpdfTextPdfBaseField_HIDDEN:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_HIDDEN];
    break;
    case ComItextpdfTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT:
    break;
    case ComItextpdfTextPdfBaseField_HIDDEN_BUT_PRINTABLE:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_NOVIEW];
    break;
    default:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT];
    break;
  }
  if (tp_ != nil)
#line 602
  [field setMKNormalIconWithComItextpdfTextPdfPdfTemplate:tp_];
  [field setMKTextPositionWithInt:layout_ - 1];
  ComItextpdfTextPdfPdfName *scale_ = ComItextpdfTextPdfPdfName_get_A_();
  if (scaleIcon_ == ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_BIG)
#line 606
  scale_ = ComItextpdfTextPdfPdfName_get_B_();
  else if (scaleIcon_ == ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_SMALL)
#line 608
  scale_ = ComItextpdfTextPdfPdfName_get_S_();
  else if (scaleIcon_ == ComItextpdfTextPdfPushbuttonField_SCALE_ICON_NEVER)
#line 610
  scale_ = ComItextpdfTextPdfPdfName_get_N_();
  [field setMKIconFitWithComItextpdfTextPdfPdfName:scale_ withComItextpdfTextPdfPdfName:proportionalIcon_ ? ComItextpdfTextPdfPdfName_get_P_() : ComItextpdfTextPdfPdfName_get_A_() withFloat:iconHorizontalAdjustment_ withFloat:
#line 612
  iconVerticalAdjustment_ withBoolean:iconFitToBounds_];
  return field;
}


#line 620
- (jboolean)isIconFitToBounds {
  
#line 621
  return self->iconFitToBounds_;
}


#line 631
- (void)setIconFitToBoundsWithBoolean:(jboolean)iconFitToBounds {
  
#line 632
  self->iconFitToBounds_ = iconFitToBounds;
}


#line 644
- (ComItextpdfTextPdfPRIndirectReference *)getIconReference {
  
#line 645
  return self->iconReference_;
}


#line 652
- (void)setIconReferenceWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)iconReference {
  
#line 653
  self->iconReference_ = iconReference;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPushbuttonField *)other {
  [super copyAllFieldsTo:other];
  other->iconFitToBounds_ = iconFitToBounds_;
  other->iconHorizontalAdjustment_ = iconHorizontalAdjustment_;
  other->iconReference_ = iconReference_;
  other->iconVerticalAdjustment_ = iconVerticalAdjustment_;
  other->image_ = image_;
  other->layout_ = layout_;
  other->proportionalIcon_ = proportionalIcon_;
  other->scaleIcon_ = scaleIcon_;
  other->template__ = template__;
  other->tp_ = tp_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:withComItextpdfTextRectangle:withNSString:", "PushbuttonField", NULL, 0x1, NULL },
    { "getLayout", NULL, "I", 0x1, NULL },
    { "setLayoutWithInt:", "setLayout", "V", 0x1, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x1, NULL },
    { "setImageWithComItextpdfTextImage:", "setImage", "V", 0x1, NULL },
    { "getTemplate", NULL, "Lcom.itextpdf.text.pdf.PdfTemplate;", 0x1, NULL },
    { "setTemplateWithComItextpdfTextPdfPdfTemplate:", "setTemplate", "V", 0x1, NULL },
    { "getScaleIcon", NULL, "I", 0x1, NULL },
    { "setScaleIconWithInt:", "setScaleIcon", "V", 0x1, NULL },
    { "isProportionalIcon", NULL, "Z", 0x1, NULL },
    { "setProportionalIconWithBoolean:", "setProportionalIcon", "V", 0x1, NULL },
    { "getIconVerticalAdjustment", NULL, "F", 0x1, NULL },
    { "setIconVerticalAdjustmentWithFloat:", "setIconVerticalAdjustment", "V", 0x1, NULL },
    { "getIconHorizontalAdjustment", NULL, "F", 0x1, NULL },
    { "setIconHorizontalAdjustmentWithFloat:", "setIconHorizontalAdjustment", "V", 0x1, NULL },
    { "calculateFontSizeWithFloat:withFloat:", "calculateFontSize", "F", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getAppearance", NULL, "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getField", NULL, "Lcom.itextpdf.text.pdf.PdfFormField;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "isIconFitToBounds", NULL, "Z", 0x1, NULL },
    { "setIconFitToBoundsWithBoolean:", "setIconFitToBounds", "V", 0x1, NULL },
    { "getIconReference", NULL, "Lcom.itextpdf.text.pdf.PRIndirectReference;", 0x1, NULL },
    { "setIconReferenceWithComItextpdfTextPdfPRIndirectReference:", "setIconReference", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LAYOUT_LABEL_ONLY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_ONLY },
    { "LAYOUT_ICON_ONLY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_ONLY },
    { "LAYOUT_ICON_TOP_LABEL_BOTTOM_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_TOP_LABEL_BOTTOM },
    { "LAYOUT_LABEL_TOP_ICON_BOTTOM_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_TOP_ICON_BOTTOM },
    { "LAYOUT_ICON_LEFT_LABEL_RIGHT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_LAYOUT_ICON_LEFT_LABEL_RIGHT },
    { "LAYOUT_LABEL_LEFT_ICON_RIGHT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_LEFT_ICON_RIGHT },
    { "LAYOUT_LABEL_OVER_ICON_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_LAYOUT_LABEL_OVER_ICON },
    { "SCALE_ICON_ALWAYS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_ALWAYS },
    { "SCALE_ICON_NEVER_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_NEVER },
    { "SCALE_ICON_IS_TOO_BIG_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_BIG },
    { "SCALE_ICON_IS_TOO_SMALL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPushbuttonField_SCALE_ICON_IS_TOO_SMALL },
    { "layout_", NULL, 0x2, "I", NULL,  },
    { "image_", NULL, 0x2, "Lcom.itextpdf.text.Image;", NULL,  },
    { "template__", "template", 0x2, "Lcom.itextpdf.text.pdf.PdfTemplate;", NULL,  },
    { "scaleIcon_", NULL, 0x2, "I", NULL,  },
    { "proportionalIcon_", NULL, 0x2, "Z", NULL,  },
    { "iconVerticalAdjustment_", NULL, 0x2, "F", NULL,  },
    { "iconHorizontalAdjustment_", NULL, 0x2, "F", NULL,  },
    { "iconFitToBounds_", NULL, 0x2, "Z", NULL,  },
    { "tp_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfTemplate;", NULL,  },
    { "iconReference_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PRIndirectReference;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPushbuttonField = { "PushbuttonField", "com.itextpdf.text.pdf", NULL, 0x1, 22, methods, 21, fields, 0, NULL};
  return &_ComItextpdfTextPdfPushbuttonField;
}

@end
