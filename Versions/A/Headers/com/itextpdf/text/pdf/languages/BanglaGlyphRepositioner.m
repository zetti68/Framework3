//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/languages/BanglaGlyphRepositioner.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/languages/BanglaGlyphRepositioner.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/Glyph.h"
#include "com/itextpdf/text/pdf/languages/BanglaGlyphRepositioner.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Map.h"

BOOL ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner_initialized = NO;


#line 57
@implementation ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner

IOSObjectArray * ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner_CHARCTERS_TO_BE_SHIFTED_LEFT_BY_1_;


#line 65
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)cmap31
                    withJavaUtilMap:(id<JavaUtilMap>)glyphSubstitutionMap {
  if (self = [super init]) {
    
#line 66
    self->cmap31_ = cmap31;
    
#line 67
    self->glyphSubstitutionMap_ = glyphSubstitutionMap;
  }
  return self;
}


#line 71
- (void)repositionGlyphsWithJavaUtilList:(id<JavaUtilList>)glyphList {
  
#line 73
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(glyphList)) size]; i++) {
    ComItextpdfTextPdfGlyph *glyph = [glyphList getWithInt:i];
    
#line 76
    if ([((NSString *) nil_chk(((ComItextpdfTextPdfGlyph *) nil_chk(glyph))->chars_)) isEqual:@"\u09cb"]) {
      [self handleOKaarAndOUKaarWithInt:i withJavaUtilList:glyphList withChar:0x09c7 withChar:0x09be];
    }
    else
#line 78
    if ([glyph->chars_ isEqual:@"\u09cc"]) {
      [self handleOKaarAndOUKaarWithInt:i withJavaUtilList:glyphList withChar:0x09c7 withChar:0x09d7];
    }
  }
  
#line 83
  [super repositionGlyphsWithJavaUtilList:glyphList];
}


#line 87
- (id<JavaUtilList>)getCharactersToBeShiftedLeftByOnePosition {
  
#line 88
  return [JavaUtilArrays asListWithNSObjectArray:ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner_CHARCTERS_TO_BE_SHIFTED_LEFT_BY_1_];
}


#line 97
- (void)handleOKaarAndOUKaarWithInt:(jint)currentIndex
                   withJavaUtilList:(id<JavaUtilList>)glyphList
                           withChar:(jchar)first
                           withChar:(jchar)second {
  
#line 98
  ComItextpdfTextPdfGlyph *g1 = [self getGlyphWithChar:first];
  ComItextpdfTextPdfGlyph *g2 = [self getGlyphWithChar:second];
  (void) [((id<JavaUtilList>) nil_chk(glyphList)) setWithInt:currentIndex withId:g1];
  [glyphList addWithInt:currentIndex + 1 withId:g2];
}


#line 104
- (ComItextpdfTextPdfGlyph *)getGlyphWithChar:(jchar)c {
  
#line 106
  ComItextpdfTextPdfGlyph *glyph = [((id<JavaUtilMap>) nil_chk(glyphSubstitutionMap_)) getWithId:[NSString valueOfChar:c]];
  
#line 108
  if (glyph != nil) {
    return glyph;
  }
  
#line 112
  IOSIntArray *metrics = [((id<JavaUtilMap>) nil_chk(cmap31_)) getWithId:[JavaLangInteger valueOfWithInt:c]];
  jint glyphCode = IOSIntArray_Get(nil_chk(metrics), 0);
  jint glyphWidth = IOSIntArray_Get(metrics, 1);
  return [[ComItextpdfTextPdfGlyph alloc] initWithInt:glyphCode withInt:glyphWidth withNSString:[NSString valueOfChar:c]];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner *)other {
  [super copyAllFieldsTo:other];
  other->cmap31_ = cmap31_;
  other->glyphSubstitutionMap_ = glyphSubstitutionMap_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner class]) {
    ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner_CHARCTERS_TO_BE_SHIFTED_LEFT_BY_1_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 60
      @"\u09bf", @"\u09c7", @"\u09c8" } count:3 type:[IOSClass classWithClass:[NSString class]]];
      ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilMap:withJavaUtilMap:", "BanglaGlyphRepositioner", NULL, 0x1, NULL },
    { "repositionGlyphsWithJavaUtilList:", "repositionGlyphs", "V", 0x1, NULL },
    { "getCharactersToBeShiftedLeftByOnePosition", NULL, "Ljava.util.List;", 0x1, NULL },
    { "handleOKaarAndOUKaarWithInt:withJavaUtilList:withChar:withChar:", "handleOKaarAndOUKaar", "V", 0x2, NULL },
    { "getGlyphWithChar:", "getGlyph", "Lcom.itextpdf.text.pdf.Glyph;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "CHARCTERS_TO_BE_SHIFTED_LEFT_BY_1_", NULL, 0x1a, "[Ljava.lang.String;", &ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner_CHARCTERS_TO_BE_SHIFTED_LEFT_BY_1_,  },
    { "cmap31_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "glyphSubstitutionMap_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner = { "BanglaGlyphRepositioner", "com.itextpdf.text.pdf.languages", NULL, 0x1, 5, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfLanguagesBanglaGlyphRepositioner;
}

@end
