//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/languages/IndicLigaturizer.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/languages/IndicLigaturizer.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/languages/IndicLigaturizer.h"
#include "java/lang/StringBuilder.h"


#line 52
@implementation ComItextpdfTextPdfLanguagesIndicLigaturizer


#line 80
- (NSString *)processWithNSString:(NSString *)s {
  
#line 81
  if (s == nil || ((jint) [s length]) == 0)
#line 82
  return @"";
  JavaLangStringBuilder *res = [[JavaLangStringBuilder alloc] init];
  
#line 85
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
    jchar letter = [s charAtWithInt:i];
    
#line 88
    if ([self IsVyanjanaWithChar:letter] || [self IsSwaraLetterWithChar:letter]) {
      (void) [res appendWithChar:letter];
    }
    else
#line 90
    if ([self IsSwaraMatraWithChar:letter]) {
      jint prevCharIndex = [res sequenceLength] - 1;
      
#line 93
      if (prevCharIndex >= 0) {
        
#line 96
        if ([res charAtWithInt:prevCharIndex] == IOSCharArray_Get(nil_chk(langTable_), ComItextpdfTextPdfLanguagesIndicLigaturizer_HALANTA))
#line 97
        (void) [res deleteCharAtWithInt:prevCharIndex];
        
#line 99
        (void) [res appendWithChar:letter];
        jint prevPrevCharIndex = [res sequenceLength] - 2;
        
#line 102
        if (letter == IOSCharArray_Get(langTable_, ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_I) && prevPrevCharIndex >= 0)
#line 103
        [ComItextpdfTextPdfLanguagesIndicLigaturizer swapWithJavaLangStringBuilder:res withInt:prevPrevCharIndex withInt:[res sequenceLength] - 1];
      }
      else {
        
#line 105
        (void) [res appendWithChar:letter];
      }
    }
    else {
      
#line 108
      (void) [res appendWithChar:letter];
    }
  }
  
#line 112
  return [res description];
}


#line 121
- (jboolean)isRTL {
  
#line 122
  return NO;
}


#line 132
- (jboolean)IsSwaraLetterWithChar:(jchar)ch {
  
#line 133
  return (ch >= IOSCharArray_Get(nil_chk(langTable_), ComItextpdfTextPdfLanguagesIndicLigaturizer_LETTER_A) && ch <= IOSCharArray_Get(langTable_, ComItextpdfTextPdfLanguagesIndicLigaturizer_LETTER_AU));
}


#line 143
- (jboolean)IsSwaraMatraWithChar:(jchar)ch {
  
#line 144
  return ((ch >= IOSCharArray_Get(nil_chk(langTable_), ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_AA) && ch <= IOSCharArray_Get(langTable_, ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_AI)) ||
#line 145
  ch == IOSCharArray_Get(langTable_, ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_HLR) || ch == IOSCharArray_Get(langTable_, ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_HLRR));
}


#line 155
- (jboolean)IsVyanjanaWithChar:(jchar)ch {
  
#line 156
  return (ch >= IOSCharArray_Get(nil_chk(langTable_), ComItextpdfTextPdfLanguagesIndicLigaturizer_LETTER_KA) && ch <= IOSCharArray_Get(langTable_, ComItextpdfTextPdfLanguagesIndicLigaturizer_LETTER_HA));
}


#line 169
+ (void)swapWithJavaLangStringBuilder:(JavaLangStringBuilder *)s
                              withInt:(jint)i
                              withInt:(jint)j {
  
#line 170
  jchar temp = [((JavaLangStringBuilder *) nil_chk(s)) charAtWithInt:i];
  [s setCharAtWithInt:i withChar:[s charAtWithInt:j]];
  [s setCharAtWithInt:j withChar:temp];
}

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfLanguagesIndicLigaturizer *)other {
  [super copyAllFieldsTo:other];
  other->langTable_ = langTable_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithNSString:", "process", "Ljava.lang.String;", 0x1, NULL },
    { "isRTL", NULL, "Z", 0x1, NULL },
    { "IsSwaraLetterWithChar:", "IsSwaraLetter", "Z", 0x4, NULL },
    { "IsSwaraMatraWithChar:", "IsSwaraMatra", "Z", 0x4, NULL },
    { "IsVyanjanaWithChar:", "IsVyanjana", "Z", 0x4, NULL },
    { "swapWithJavaLangStringBuilder:withInt:withInt:", "swap", "V", 0xa, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MATRA_AA_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_AA },
    { "MATRA_I_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_I },
    { "MATRA_E_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_E },
    { "MATRA_AI_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_AI },
    { "MATRA_HLR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_HLR },
    { "MATRA_HLRR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_MATRA_HLRR },
    { "LETTER_A_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_LETTER_A },
    { "LETTER_AU_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_LETTER_AU },
    { "LETTER_KA_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_LETTER_KA },
    { "LETTER_HA_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_LETTER_HA },
    { "HALANTA_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfLanguagesIndicLigaturizer_HALANTA },
    { "langTable_", NULL, 0x4, "[C", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfLanguagesIndicLigaturizer = { "IndicLigaturizer", "com.itextpdf.text.pdf.languages", NULL, 0x401, 7, methods, 12, fields, 0, NULL};
  return &_ComItextpdfTextPdfLanguagesIndicLigaturizer;
}

@end
