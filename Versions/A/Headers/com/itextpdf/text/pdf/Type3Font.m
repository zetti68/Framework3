//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/Type3Font.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/Type3Font.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/GlyphList.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PageResources.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfRectangle.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/Type3Font.h"
#include "com/itextpdf/text/pdf/Type3Glyph.h"
#include "java/io/IOException.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"


#line 55
@implementation ComItextpdfTextPdfType3Font


#line 72
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                      withCharArray:(IOSCharArray *)chars
                                        withBoolean:(jboolean)colorized {
  return
#line 73
  [self initComItextpdfTextPdfType3FontWithComItextpdfTextPdfPdfWriter:writer withBoolean:colorized];
}


#line 103
- (instancetype)initComItextpdfTextPdfType3FontWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                                                   withBoolean:(jboolean)colorized {
  if (self = [super init]) {
    widths3_ =
#line 58
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    char2glyph_ =
#line 59
    [[JavaUtilHashMap alloc] init];
    llx_ =
#line 61
    JavaLangFloat_NaN;
    pageResources_ =
#line 62
    [[ComItextpdfTextPdfPageResources alloc] init];
    
#line 104
    self->writer_ = writer;
    
#line 105
    self->colorized_ = colorized;
    
#line 106
    fontType_ = ComItextpdfTextPdfBaseFont_FONT_TYPE_T3;
    
#line 107
    usedSlot_ = [IOSBooleanArray arrayWithLength:256];
  }
  return self;
}

- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                                        withBoolean:(jboolean)colorized {
  return [self initComItextpdfTextPdfType3FontWithComItextpdfTextPdfPdfWriter:
#line 103
writer withBoolean:colorized];
}


#line 124
- (ComItextpdfTextPdfPdfContentByte *)defineGlyphWithChar:(jchar)c
                                                withFloat:(jfloat)wx
                                                withFloat:(jfloat)llx
                                                withFloat:(jfloat)lly
                                                withFloat:(jfloat)urx
                                                withFloat:(jfloat)ury {
  
#line 125
  if (c == 0 || c > 255)
#line 126
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.char.1.doesn.t.belong.in.this.type3.font" withInt:c]];
  *IOSBooleanArray_GetRef(nil_chk(usedSlot_), c) = YES;
  JavaLangInteger *ck = [JavaLangInteger valueOfWithInt:c];
  ComItextpdfTextPdfType3Glyph *glyph = [((JavaUtilHashMap *) nil_chk(char2glyph_)) getWithId:ck];
  if (glyph != nil)
#line 131
  return glyph;
  [((ComItextpdfTextPdfIntHashtable *) nil_chk(widths3_)) putWithInt:c withInt:J2ObjCFpToInt(wx)];
  if (!colorized_) {
    if ([JavaLangFloat isNaNWithFloat:self->llx_]) {
      self->llx_ = llx;
      self->lly_ = lly;
      self->urx_ = urx;
      self->ury_ = ury;
    }
    else {
      self->llx_ = [JavaLangMath minWithFloat:self->llx_ withFloat:llx];
      self->lly_ = [JavaLangMath minWithFloat:self->lly_ withFloat:lly];
      self->urx_ = [JavaLangMath maxWithFloat:self->urx_ withFloat:urx];
      self->ury_ = [JavaLangMath maxWithFloat:self->ury_ withFloat:ury];
    }
  }
  glyph = [[ComItextpdfTextPdfType3Glyph alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextPdfPageResources:pageResources_ withFloat:wx withFloat:llx withFloat:lly withFloat:urx withFloat:ury withBoolean:colorized_];
  (void) [char2glyph_ putWithId:ck withId:glyph];
  return glyph;
}


#line 153
- (IOSObjectArray *)getFamilyFontName {
  
#line 154
  return [self getFullFontName];
}


#line 158
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize {
  return 0;
}

- (IOSObjectArray *)getFullFontName {
  
#line 164
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"", @"", @"", @"" } count:4 type:[IOSClass classWithClass:[NSString class]]] } count:1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
}


#line 171
- (IOSObjectArray *)getAllNameEntries {
  
#line 172
  return [IOSObjectArray arrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"4", @"", @"", @"", @"" } count:5 type:[IOSClass classWithClass:[NSString class]]] } count:1 type:[IOSObjectArray iosClassWithType:[IOSClass classWithClass:[NSString class]]]];
}


#line 176
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2 {
  return 0;
}

- (NSString *)getPostscriptFontName {
  
#line 182
  return @"";
}


#line 186
- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name {
  return nil;
}

- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name {
  
#line 192
  return 0;
}


#line 196
- (jboolean)hasKernPairs {
  
#line 197
  return NO;
}


#line 201
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern {
  return NO;
}


#line 206
- (void)setPostscriptFontNameWithNSString:(NSString *)name {
}


#line 210
- (void)writeFontWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                               withNSObjectArray:(IOSObjectArray *)params {
  
#line 211
  if (self->writer_ != writer)
#line 212
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"type3.font.used.with.the.wrong.pdfwriter" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 215
  jint firstChar = 0;
  while (firstChar < ((IOSBooleanArray *) nil_chk(usedSlot_))->size_ && !IOSBooleanArray_Get(usedSlot_, firstChar)) firstChar++;
  
#line 218
  if (firstChar == usedSlot_->size_) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"no.glyphs.defined.for.type3.font" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  jint lastChar = usedSlot_->size_ - 1;
  while (lastChar >= firstChar && !IOSBooleanArray_Get(usedSlot_, lastChar)) lastChar--;
  
#line 224
  IOSIntArray *widths = [IOSIntArray arrayWithLength:lastChar - firstChar + 1];
  IOSIntArray *invOrd = [IOSIntArray arrayWithLength:lastChar - firstChar + 1];
  
#line 227
  jint invOrdIndx = 0, w = 0;
  for (jint u = firstChar; u <= lastChar; u++, w++) {
    if (IOSBooleanArray_Get(usedSlot_, u)) {
      *IOSIntArray_GetRef(invOrd, invOrdIndx++) = u;
      *IOSIntArray_GetRef(widths, w) = [((ComItextpdfTextPdfIntHashtable *) nil_chk(widths3_)) getWithInt:u];
    }
  }
  ComItextpdfTextPdfPdfArray *diffs = [[ComItextpdfTextPdfPdfArray alloc] init];
  ComItextpdfTextPdfPdfDictionary *charprocs = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  jint last = -1;
  for (jint k = 0; k < invOrdIndx; ++k) {
    jint c = IOSIntArray_Get(invOrd, k);
    if (c > last) {
      last = c;
      [diffs addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:last]];
    }
    ++last;
    jint c2 = IOSIntArray_Get(invOrd, k);
    NSString *s = [ComItextpdfTextPdfGlyphList unicodeToNameWithInt:c2];
    if (s == nil)
#line 247
    s = JreStrcat("CI", 'a', c2);
    ComItextpdfTextPdfPdfName *n = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:s];
    [diffs addWithComItextpdfTextPdfPdfObject:n];
    ComItextpdfTextPdfType3Glyph *glyph = [((JavaUtilHashMap *) nil_chk(char2glyph_)) getWithId:[JavaLangInteger valueOfWithInt:c2]];
    ComItextpdfTextPdfPdfStream *stream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[((ComItextpdfTextPdfType3Glyph *) nil_chk(glyph)) toPdfWithComItextpdfTextPdfPdfWriter:nil]];
    [stream flateCompressWithInt:compressionLevel_];
    ComItextpdfTextPdfPdfIndirectReference *refp = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:stream])) getIndirectReference];
    [charprocs putWithComItextpdfTextPdfPdfName:n withComItextpdfTextPdfPdfObject:refp];
  }
  ComItextpdfTextPdfPdfDictionary *font = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TYPE3_()];
  if (colorized_)
#line 259
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTBBOX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:0 withFloat:0 withFloat:0 withFloat:0]];
  else
#line 261
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTBBOX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:llx_ withFloat:lly_ withFloat:urx_ withFloat:ury_]];
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONTMATRIX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ 0.001f, 0, 0, 0.001f, 0, 0 } count:6]]];
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CHARPROCS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComItextpdfTextPdfPdfObject:charprocs])) getIndirectReference]];
  ComItextpdfTextPdfPdfDictionary *encoding = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [encoding putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DIFFERENCES_() withComItextpdfTextPdfPdfObject:diffs];
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer addToBodyWithComItextpdfTextPdfPdfObject:encoding])) getIndirectReference]];
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRSTCHAR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:firstChar]];
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LASTCHAR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:lastChar]];
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIDTHS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer addToBodyWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithIntArray:widths]])) getIndirectReference]];
  if ([((ComItextpdfTextPdfPageResources *) nil_chk(pageResources_)) hasResources])
#line 271
  [font putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer addToBodyWithComItextpdfTextPdfPdfObject:[pageResources_ getResources]])) getIndirectReference]];
  (void) [writer addToBodyWithComItextpdfTextPdfPdfObject:font withComItextpdfTextPdfPdfIndirectReference:ref];
}


#line 281
- (ComItextpdfTextPdfPdfStream *)getFullFontStream {
  
#line 282
  return nil;
}

- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text {
  
#line 288
  IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
  IOSByteArray *b = [IOSByteArray arrayWithLength:((IOSCharArray *) nil_chk(cc))->size_];
  jint p = 0;
  for (jint k = 0; k < cc->size_; ++k) {
    jchar c = IOSCharArray_Get(cc, k);
    if ([self charExistsWithInt:c])
#line 294
    *IOSByteArray_GetRef(b, p++) = (jbyte) c;
  }
  if (b->size_ == p)
#line 297
  return b;
  IOSByteArray *b2 = [IOSByteArray arrayWithLength:p];
  [JavaLangSystem arraycopyWithId:b withInt:0 withId:b2 withInt:0 withInt:p];
  return b2;
}


#line 304
- (IOSByteArray *)convertToBytesWithInt:(jint)char1 {
  
#line 305
  if ([self charExistsWithInt:char1])
#line 306
  return [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) char1 } count:1];
  else return [IOSByteArray arrayWithLength:0];
}


#line 311
- (jint)getWidthWithInt:(jint)char1 {
  
#line 312
  if (![((ComItextpdfTextPdfIntHashtable *) nil_chk(widths3_)) containsKeyWithInt:char1])
#line 313
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.char.1.is.not.defined.in.a.type3.font" withInt:char1]];
  return [widths3_ getWithInt:char1];
}


#line 318
- (jint)getWidthWithNSString:(NSString *)text {
  
#line 319
  IOSCharArray *c = [((NSString *) nil_chk(text)) toCharArray];
  jint total = 0;
  for (jint k = 0; k < ((IOSCharArray *) nil_chk(c))->size_; ++k)
#line 322
  total += [self getWidthWithInt:IOSCharArray_Get(c, k)];
  return total;
}


#line 327
- (IOSIntArray *)getCharBBoxWithInt:(jint)c {
  
#line 328
  return nil;
}


#line 332
- (jboolean)charExistsWithInt:(jint)c {
  if (c > 0 && c < 256) {
    return IOSBooleanArray_Get(nil_chk(usedSlot_), c);
  }
  else {
    
#line 336
    return NO;
  }
}


#line 341
- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance {
  
#line 342
  return NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfType3Font *)other {
  [super copyAllFieldsTo:other];
  other->char2glyph_ = char2glyph_;
  other->colorized_ = colorized_;
  other->llx_ = llx_;
  other->lly_ = lly_;
  other->pageResources_ = pageResources_;
  other->urx_ = urx_;
  other->ury_ = ury_;
  other->usedSlot_ = usedSlot_;
  other->widths3_ = widths3_;
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:withCharArray:withBoolean:", "Type3Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfWriter:withBoolean:", "Type3Font", NULL, 0x1, NULL },
    { "defineGlyphWithChar:withFloat:withFloat:withFloat:withFloat:withFloat:", "defineGlyph", "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getFamilyFontName", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getFontDescriptorWithInt:withFloat:", "getFontDescriptor", "F", 0x1, NULL },
    { "getFullFontName", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getAllNameEntries", NULL, "[[Ljava.lang.String;", 0x1, NULL },
    { "getKerningWithInt:withInt:", "getKerning", "I", 0x1, NULL },
    { "getPostscriptFontName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getRawCharBBoxWithInt:withNSString:", "getRawCharBBox", "[I", 0x4, NULL },
    { "getRawWidthWithInt:withNSString:", "getRawWidth", "I", 0x0, NULL },
    { "hasKernPairs", NULL, "Z", 0x1, NULL },
    { "setKerningWithInt:withInt:withInt:", "setKerning", "Z", 0x1, NULL },
    { "setPostscriptFontNameWithNSString:", "setPostscriptFontName", "V", 0x1, NULL },
    { "writeFontWithComItextpdfTextPdfPdfWriter:withComItextpdfTextPdfPdfIndirectReference:withNSObjectArray:", "writeFont", "V", 0x0, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getFullFontStream", NULL, "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, NULL },
    { "convertToBytesWithNSString:", "convertToBytes", "[B", 0x1, NULL },
    { "convertToBytesWithInt:", "convertToBytes", "[B", 0x0, NULL },
    { "getWidthWithInt:", "getWidth", "I", 0x1, NULL },
    { "getWidthWithNSString:", "getWidth", "I", 0x1, NULL },
    { "getCharBBoxWithInt:", "getCharBBox", "[I", 0x1, NULL },
    { "charExistsWithInt:", "charExists", "Z", 0x1, NULL },
    { "setCharAdvanceWithInt:withInt:", "setCharAdvance", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "usedSlot_", NULL, 0x2, "[Z", NULL,  },
    { "widths3_", NULL, 0x2, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "char2glyph_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "writer_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "llx_", NULL, 0x2, "F", NULL,  },
    { "lly_", NULL, 0x2, "F", NULL,  },
    { "urx_", NULL, 0x2, "F", NULL,  },
    { "ury_", NULL, 0x2, "F", NULL,  },
    { "pageResources_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PageResources;", NULL,  },
    { "colorized_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfType3Font = { "Type3Font", "com.itextpdf.text.pdf", NULL, 0x1, 23, methods, 10, fields, 0, NULL};
  return &_ComItextpdfTextPdfType3Font;
}

@end
