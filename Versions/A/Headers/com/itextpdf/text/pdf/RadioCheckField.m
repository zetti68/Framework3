//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/RadioCheckField.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/RadioCheckField.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseField.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfAppearance.h"
#include "com/itextpdf/text/pdf/PdfBorderDictionary.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDashPattern.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RadioCheckField.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"

BOOL ComItextpdfTextPdfRadioCheckField_initialized = NO;


#line 97
@implementation ComItextpdfTextPdfRadioCheckField

IOSObjectArray * ComItextpdfTextPdfRadioCheckField_typeChars_;


#line 136
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                       withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)box
                                       withNSString:(NSString *)fieldName
                                       withNSString:(NSString *)onValue {
  if (self =
#line 137
  [super initWithComItextpdfTextPdfPdfWriter:writer withComItextpdfTextRectangle:box withNSString:fieldName]) {
    
#line 138
    [self setOnValueWithNSString:onValue];
    
#line 139
    [self setCheckTypeWithInt:ComItextpdfTextPdfRadioCheckField_TYPE_CIRCLE];
  }
  return self;
}


#line 146
- (jint)getCheckType {
  
#line 147
  return self->checkType_;
}


#line 160
- (void)setCheckTypeWithInt:(jint)checkType {
  
#line 161
  if (checkType < ComItextpdfTextPdfRadioCheckField_TYPE_CHECK || checkType > ComItextpdfTextPdfRadioCheckField_TYPE_STAR)
#line 162
  checkType = ComItextpdfTextPdfRadioCheckField_TYPE_CIRCLE;
  self->checkType_ = checkType;
  [self setTextWithNSString:IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfRadioCheckField_typeChars_), checkType - 1)];
  @try {
    [self setFontWithComItextpdfTextPdfBaseFont:[ComItextpdfTextPdfBaseFont createFontWithNSString:ComItextpdfTextPdfBaseFont_get_ZAPFDINGBATS_() withNSString:ComItextpdfTextPdfBaseFont_get_WINANSI_() withBoolean:NO]];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 177
- (NSString *)getOnValue {
  
#line 178
  return self->onValue_;
}


#line 185
- (void)setOnValueWithNSString:(NSString *)onValue {
  
#line 186
  self->onValue_ = onValue;
}


#line 193
- (jboolean)isChecked {
  
#line 194
  return self->checked_;
}


#line 202
- (void)setCheckedWithBoolean:(jboolean)checked {
  
#line 203
  self->checked_ = checked;
}


#line 216
- (ComItextpdfTextPdfPdfAppearance *)getAppearanceWithBoolean:(jboolean)isRadio
                                                  withBoolean:(jboolean)on {
  
#line 217
  if (isRadio && checkType_ == ComItextpdfTextPdfRadioCheckField_TYPE_CIRCLE)
#line 218
  return [self getAppearanceRadioCircleWithBoolean:on];
  ComItextpdfTextPdfPdfAppearance *app = [self getBorderAppearance];
  if (!on)
#line 221
  return app;
  ComItextpdfTextPdfBaseFont *ufont = [self getRealFont];
  jboolean borderExtra = borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_BEVELED || borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_INSET;
  jfloat h = [((ComItextpdfTextRectangle *) nil_chk(box_)) getHeight] - borderWidth_ * 2;
  jfloat bw2 = borderWidth_;
  if (borderExtra) {
    h -= borderWidth_ * 2;
    bw2 *= 2;
  }
  jfloat offsetX = (borderExtra ? 2 * borderWidth_ : borderWidth_);
  offsetX = [JavaLangMath maxWithFloat:offsetX withFloat:1];
  jfloat offX = [JavaLangMath minWithFloat:bw2 withFloat:offsetX];
  jfloat wt = [box_ getWidth] - 2 * offX;
  jfloat ht = [box_ getHeight] - 2 * offX;
  jfloat fsize = fontSize_;
  if (fsize == 0) {
    jfloat bw = [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getWidthPointWithNSString:text_ withFloat:1];
    if (bw == 0)
#line 239
    fsize = 12;
    else
#line 241
    fsize = wt / bw;
    jfloat nfsize = h / ([ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:1]);
    fsize = [JavaLangMath minWithFloat:fsize withFloat:nfsize];
  }
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) saveState];
  [app rectangleWithFloat:offX withFloat:offX withFloat:wt withFloat:ht];
  [app clip];
  [app newPath];
  if (textColor_ == nil)
#line 250
  [app resetGrayFill];
  else
#line 252
  [app setColorFillWithComItextpdfTextBaseColor:textColor_];
  [app beginText];
  [app setFontAndSizeWithComItextpdfTextPdfBaseFont:ufont withFloat:fsize];
  [app setTextMatrixWithFloat:([box_ getWidth] - [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getWidthPointWithNSString:text_ withFloat:fsize]) / 2 withFloat:
#line 256
  ([box_ getHeight] - [ufont getAscentPointWithNSString:text_ withFloat:fsize]) / 2];
  [app showTextWithNSString:text_];
  [app endText];
  [app restoreState];
  return app;
}


#line 269
- (ComItextpdfTextPdfPdfAppearance *)getAppearanceRadioCircleWithBoolean:(jboolean)on {
  
#line 270
  ComItextpdfTextPdfPdfAppearance *app = [ComItextpdfTextPdfPdfAppearance createAppearanceWithComItextpdfTextPdfPdfWriter:writer_ withFloat:[((ComItextpdfTextRectangle *) nil_chk(box_)) getWidth] withFloat:[box_ getHeight]];
  switch (rotation_) {
    case 90:
    [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) setMatrixWithFloat:0 withFloat:1 withFloat:-1 withFloat:0 withFloat:[box_ getHeight] withFloat:0];
    break;
    case 180:
    [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) setMatrixWithFloat:-1 withFloat:0 withFloat:0 withFloat:-1 withFloat:[box_ getWidth] withFloat:[box_ getHeight]];
    break;
    case 270:
    [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) setMatrixWithFloat:0 withFloat:-1 withFloat:1 withFloat:0 withFloat:0 withFloat:[box_ getWidth]];
    break;
  }
  ComItextpdfTextRectangle *box = [[ComItextpdfTextRectangle alloc] initWithComItextpdfTextRectangle:[((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) getBoundingBox]];
  jfloat cx = [box getWidth] / 2;
  jfloat cy = [box getHeight] / 2;
  jfloat r = ([JavaLangMath minWithFloat:[box getWidth] withFloat:[box getHeight]] - borderWidth_) / 2;
  if (r <= 0)
#line 287
  return app;
  if (backgroundColor_ != nil) {
    [app setColorFillWithComItextpdfTextBaseColor:backgroundColor_];
    [app circleWithFloat:cx withFloat:cy withFloat:r + borderWidth_ / 2];
    [app fill];
  }
  if (borderWidth_ > 0 && borderColor_ != nil) {
    [app setLineWidthWithFloat:borderWidth_];
    [app setColorStrokeWithComItextpdfTextBaseColor:borderColor_];
    [app circleWithFloat:cx withFloat:cy withFloat:r];
    [app stroke];
  }
  if (on) {
    if (textColor_ == nil)
#line 301
    [app resetGrayFill];
    else
#line 303
    [app setColorFillWithComItextpdfTextBaseColor:textColor_];
    [app circleWithFloat:cx withFloat:cy withFloat:r / 2];
    [app fill];
  }
  return app;
}


#line 323
- (ComItextpdfTextPdfPdfFormField *)getRadioGroupWithBoolean:(jboolean)noToggleToOff
                                                 withBoolean:(jboolean)radiosInUnison {
  
#line 324
  ComItextpdfTextPdfPdfFormField *field = [ComItextpdfTextPdfPdfFormField createRadioButtonWithComItextpdfTextPdfPdfWriter:writer_ withBoolean:noToggleToOff];
  if (radiosInUnison)
#line 326
  [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_RADIOSINUNISON];
  [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) setFieldNameWithNSString:fieldName_];
  if ((options_ & ComItextpdfTextPdfBaseField_READ_ONLY) != 0)
#line 329
  [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_READ_ONLY];
  if ((options_ & ComItextpdfTextPdfBaseField_REQUIRED) != 0)
#line 331
  [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_REQUIRED];
  [field setValueAsNameWithNSString:checked_ ? onValue_ : @"Off"];
  return field;
}


#line 343
- (ComItextpdfTextPdfPdfFormField *)getRadioField {
  
#line 344
  return [self getFieldWithBoolean:YES];
}


#line 353
- (ComItextpdfTextPdfPdfFormField *)getCheckField {
  
#line 354
  return [self getFieldWithBoolean:NO];
}


#line 365
- (ComItextpdfTextPdfPdfFormField *)getFieldWithBoolean:(jboolean)isRadio {
  
#line 366
  ComItextpdfTextPdfPdfFormField *field = nil;
  if (isRadio)
#line 368
  field = [ComItextpdfTextPdfPdfFormField createEmptyWithComItextpdfTextPdfPdfWriter:writer_];
  else
#line 370
  field = [ComItextpdfTextPdfPdfFormField createCheckBoxWithComItextpdfTextPdfPdfWriter:writer_];
  [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) setWidgetWithComItextpdfTextRectangle:box_ withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_HIGHLIGHT_INVERT_()];
  if (!isRadio) {
    if (![@"Yes" isEqual:onValue_]) {
      @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.is.not.a.valid.name.for.checkbox.appearance" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ onValue_ } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    [field setFieldNameWithNSString:fieldName_];
    if ((options_ & ComItextpdfTextPdfBaseField_READ_ONLY) != 0)
#line 378
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_READ_ONLY];
    if ((options_ & ComItextpdfTextPdfBaseField_REQUIRED) != 0)
#line 380
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_REQUIRED];
    [field setValueAsNameWithNSString:checked_ ? onValue_ : @"Off"];
    [self setCheckTypeWithInt:checkType_];
  }
  if (text_ != nil)
#line 385
  [field setMKNormalCaptionWithNSString:text_];
  if (rotation_ != 0)
#line 387
  [field setMKRotationWithInt:rotation_];
  [field setBorderStyleWithComItextpdfTextPdfPdfBorderDictionary:[[ComItextpdfTextPdfPdfBorderDictionary alloc] initWithFloat:borderWidth_ withInt:borderStyle_ withComItextpdfTextPdfPdfDashPattern:[[ComItextpdfTextPdfPdfDashPattern alloc] initWithFloat:3]]];
  ComItextpdfTextPdfPdfAppearance *tpon = [self getAppearanceWithBoolean:isRadio withBoolean:YES];
  ComItextpdfTextPdfPdfAppearance *tpoff = [self getAppearanceWithBoolean:isRadio withBoolean:NO];
  [field setAppearanceWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_APPEARANCE_NORMAL_() withNSString:onValue_ withComItextpdfTextPdfPdfTemplate:tpon];
  [field setAppearanceWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_APPEARANCE_NORMAL_() withNSString:@"Off" withComItextpdfTextPdfPdfTemplate:tpoff];
  [field setAppearanceStateWithNSString:checked_ ? onValue_ : @"Off"];
  ComItextpdfTextPdfPdfAppearance *da = (ComItextpdfTextPdfPdfAppearance *) check_class_cast([((ComItextpdfTextPdfPdfAppearance *) nil_chk(tpon)) getDuplicate], [ComItextpdfTextPdfPdfAppearance class]);
  ComItextpdfTextPdfBaseFont *realFont = [self getRealFont];
  if (realFont != nil)
#line 397
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(da)) setFontAndSizeWithComItextpdfTextPdfBaseFont:[self getRealFont] withFloat:fontSize_];
  if (textColor_ == nil)
#line 399
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(da)) setGrayFillWithFloat:0];
  else
#line 401
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(da)) setColorFillWithComItextpdfTextBaseColor:textColor_];
  [field setDefaultAppearanceStringWithComItextpdfTextPdfPdfContentByte:da];
  if (borderColor_ != nil)
#line 404
  [field setMKBorderColorWithComItextpdfTextBaseColor:borderColor_];
  if (backgroundColor_ != nil)
#line 406
  [field setMKBackgroundColorWithComItextpdfTextBaseColor:backgroundColor_];
  switch (visibility_) {
    case ComItextpdfTextPdfBaseField_HIDDEN:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_HIDDEN];
    break;
    case ComItextpdfTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT:
    break;
    case ComItextpdfTextPdfBaseField_HIDDEN_BUT_PRINTABLE:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_NOVIEW];
    break;
    default:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT];
    break;
  }
  return field;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfRadioCheckField *)other {
  [super copyAllFieldsTo:other];
  other->checkType_ = checkType_;
  other->checked_ = checked_;
  other->onValue_ = onValue_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfRadioCheckField class]) {
    ComItextpdfTextPdfRadioCheckField_typeChars_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 112
      @"4", @"l", @"8", @"u", @"n", @"H" } count:6 type:[IOSClass classWithClass:[NSString class]]];
      ComItextpdfTextPdfRadioCheckField_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:withComItextpdfTextRectangle:withNSString:withNSString:", "RadioCheckField", NULL, 0x1, NULL },
    { "getCheckType", NULL, "I", 0x1, NULL },
    { "setCheckTypeWithInt:", "setCheckType", "V", 0x1, NULL },
    { "getOnValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setOnValueWithNSString:", "setOnValue", "V", 0x1, NULL },
    { "isChecked", NULL, "Z", 0x1, NULL },
    { "setCheckedWithBoolean:", "setChecked", "V", 0x1, NULL },
    { "getAppearanceWithBoolean:withBoolean:", "getAppearance", "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getAppearanceRadioCircleWithBoolean:", "getAppearanceRadioCircle", "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x1, NULL },
    { "getRadioGroupWithBoolean:withBoolean:", "getRadioGroup", "Lcom.itextpdf.text.pdf.PdfFormField;", 0x1, NULL },
    { "getRadioField", NULL, "Lcom.itextpdf.text.pdf.PdfFormField;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getCheckField", NULL, "Lcom.itextpdf.text.pdf.PdfFormField;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getFieldWithBoolean:", "getField", "Lcom.itextpdf.text.pdf.PdfFormField;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_CHECK_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfRadioCheckField_TYPE_CHECK },
    { "TYPE_CIRCLE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfRadioCheckField_TYPE_CIRCLE },
    { "TYPE_CROSS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfRadioCheckField_TYPE_CROSS },
    { "TYPE_DIAMOND_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfRadioCheckField_TYPE_DIAMOND },
    { "TYPE_SQUARE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfRadioCheckField_TYPE_SQUARE },
    { "TYPE_STAR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfRadioCheckField_TYPE_STAR },
    { "typeChars_", NULL, 0xc, "[Ljava.lang.String;", &ComItextpdfTextPdfRadioCheckField_typeChars_,  },
    { "checkType_", NULL, 0x4, "I", NULL,  },
    { "onValue_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "checked_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfRadioCheckField = { "RadioCheckField", "com.itextpdf.text.pdf", NULL, 0x1, 13, methods, 10, fields, 0, NULL};
  return &_ComItextpdfTextPdfRadioCheckField;
}

@end
