//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/HyphenationAuto.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/HyphenationAuto.java"

#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/HyphenationAuto.h"
#include "com/itextpdf/text/pdf/hyphenation/Hyphenation.h"
#include "com/itextpdf/text/pdf/hyphenation/Hyphenator.h"


#line 56
@implementation ComItextpdfTextPdfHyphenationAuto


#line 71
- (instancetype)initWithNSString:(NSString *)lang
                    withNSString:(NSString *)country
                         withInt:(jint)leftMin
                         withInt:(jint)rightMin {
  if (self = [super init]) {
    
#line 72
    hyphenator_ = [[ComItextpdfTextPdfHyphenationHyphenator alloc] initWithNSString:lang withNSString:country withInt:leftMin withInt:rightMin];
  }
  return self;
}


#line 78
- (NSString *)getHyphenSymbol {
  
#line 79
  return @"-";
}


#line 91
- (NSString *)getHyphenatedWordPreWithNSString:(NSString *)word
                withComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)font
                                     withFloat:(jfloat)fontSize
                                     withFloat:(jfloat)remainingWidth {
  
#line 92
  post_ = word;
  NSString *hyphen = [self getHyphenSymbol];
  jfloat hyphenWidth = [((ComItextpdfTextPdfBaseFont *) nil_chk(font)) getWidthPointWithNSString:hyphen withFloat:fontSize];
  if (hyphenWidth > remainingWidth)
#line 96
  return @"";
  ComItextpdfTextPdfHyphenationHyphenation *hyphenation = [((ComItextpdfTextPdfHyphenationHyphenator *) nil_chk(hyphenator_)) hyphenateWithNSString:word];
  if (hyphenation == nil) {
    return @"";
  }
  jint len = [((ComItextpdfTextPdfHyphenationHyphenation *) nil_chk(hyphenation)) length];
  jint k;
  for (k = 0; k < len; ++k) {
    if ([font getWidthPointWithNSString:[hyphenation getPreHyphenTextWithInt:k] withFloat:fontSize] + hyphenWidth > remainingWidth)
#line 105
    break;
  }
  --k;
  if (k < 0)
#line 109
  return @"";
  post_ = [hyphenation getPostHyphenTextWithInt:k];
  return JreStrcat("$$", [hyphenation getPreHyphenTextWithInt:k], hyphen);
}


#line 118
- (NSString *)getHyphenatedWordPost {
  
#line 119
  return post_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfHyphenationAuto *)other {
  [super copyAllFieldsTo:other];
  other->hyphenator_ = hyphenator_;
  other->post_ = post_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withInt:withInt:", "HyphenationAuto", NULL, 0x1, NULL },
    { "getHyphenSymbol", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getHyphenatedWordPreWithNSString:withComItextpdfTextPdfBaseFont:withFloat:withFloat:", "getHyphenatedWordPre", "Ljava.lang.String;", 0x1, NULL },
    { "getHyphenatedWordPost", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hyphenator_", NULL, 0x4, "Lcom.itextpdf.text.pdf.hyphenation.Hyphenator;", NULL,  },
    { "post_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfHyphenationAuto = { "HyphenationAuto", "com.itextpdf.text.pdf", NULL, 0x1, 4, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfHyphenationAuto;
}

@end
