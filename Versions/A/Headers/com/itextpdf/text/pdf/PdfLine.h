//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfLine.java
//

#ifndef _ComItextpdfTextPdfPdfLine_H_
#define _ComItextpdfTextPdfPdfLine_H_

#include "J2ObjC_header.h"

@class ComItextpdfTextChunk;
@class ComItextpdfTextListItem;
@class ComItextpdfTextPdfPdfChunk;
@class ComItextpdfTextTabStop;
@class IOSFloatArray;
@class JavaUtilArrayList;
@protocol JavaUtilIterator;

@interface ComItextpdfTextPdfPdfLine : NSObject {
 @public
  JavaUtilArrayList *line_;
  jfloat left_;
  jfloat width_;
  jint alignment_;
  jfloat height__;
  jboolean newlineSplit_;
  jfloat originalWidth_;
  jboolean isRTL__;
  ComItextpdfTextListItem *listItem__;
  ComItextpdfTextTabStop *tabStop_;
  jfloat tabStopAnchorPosition_;
  jfloat tabPosition_;
}

#pragma mark Public

- (void)flush;

- (jfloat)getAscender;

- (ComItextpdfTextPdfPdfChunk *)getChunkWithInt:(jint)idx;

- (jfloat)getDescender;

- (jint)getLastStrokeChunk;

- (jint)getLineLengthUtf32;

- (jfloat)getOriginalWidth;

- (jfloat)getWidthCorrectedWithFloat:(jfloat)charSpacing
                           withFloat:(jfloat)wordSpacing;

- (jboolean)hasToBeJustified;

- (jboolean)isNewlineSplit;

- (id<JavaUtilIterator>)iterator;

- (jfloat)listIndent;

- (ComItextpdfTextListItem *)listItem;

- (ComItextpdfTextChunk *)listSymbol;

- (void)resetAlignment;

- (void)setListItemWithComItextpdfTextListItem:(ComItextpdfTextListItem *)listItem;

- (jint)size;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithFloat:(jfloat)left
                    withFloat:(jfloat)originalWidth
                    withFloat:(jfloat)remainingWidth
                      withInt:(jint)alignment
                  withBoolean:(jboolean)newlineSplit
        withJavaUtilArrayList:(JavaUtilArrayList *)line
                  withBoolean:(jboolean)isRTL;

- (instancetype)initWithFloat:(jfloat)left
                    withFloat:(jfloat)right
                      withInt:(jint)alignment
                    withFloat:(jfloat)height;

- (ComItextpdfTextPdfPdfChunk *)addWithComItextpdfTextPdfPdfChunk:(ComItextpdfTextPdfPdfChunk *)chunk;

- (IOSFloatArray *)getMaxSizeWithFloat:(jfloat)fixedLeading
                             withFloat:(jfloat)multipliedLeading;

- (jint)getSeparatorCount;

- (jfloat)height;

- (jfloat)indentLeft;

- (jboolean)isRTL;

- (jint)numberOfSpaces;

- (void)setExtraIndentWithFloat:(jfloat)extra;

- (jfloat)widthLeft;

@end

J2OBJC_EMPTY_STATIC_INIT(ComItextpdfTextPdfPdfLine)

J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfLine, line_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfLine, listItem__, ComItextpdfTextListItem *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfPdfLine, tabStop_, ComItextpdfTextTabStop *)

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfLine_initWithFloat_withFloat_withInt_withFloat_(ComItextpdfTextPdfPdfLine *self, jfloat left, jfloat right, jint alignment, jfloat height);

FOUNDATION_EXPORT ComItextpdfTextPdfPdfLine *new_ComItextpdfTextPdfPdfLine_initWithFloat_withFloat_withInt_withFloat_(jfloat left, jfloat right, jint alignment, jfloat height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void ComItextpdfTextPdfPdfLine_initWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(ComItextpdfTextPdfPdfLine *self, jfloat left, jfloat originalWidth, jfloat remainingWidth, jint alignment, jboolean newlineSplit, JavaUtilArrayList *line, jboolean isRTL);

FOUNDATION_EXPORT ComItextpdfTextPdfPdfLine *new_ComItextpdfTextPdfPdfLine_initWithFloat_withFloat_withFloat_withInt_withBoolean_withJavaUtilArrayList_withBoolean_(jfloat left, jfloat originalWidth, jfloat remainingWidth, jint alignment, jboolean newlineSplit, JavaUtilArrayList *line, jboolean isRTL) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextPdfPdfLine)

#endif // _ComItextpdfTextPdfPdfLine_H_
