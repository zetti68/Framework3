//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/FloatLayout.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/FloatLayout.java"

#include "IOSClass.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/api/Spaceable.h"
#include "com/itextpdf/text/pdf/ColumnText.h"
#include "com/itextpdf/text/pdf/FloatLayout.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDiv.h"
#include "com/itextpdf/text/pdf/PdfPTable.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


#line 58
@implementation ComItextpdfTextPdfFloatLayout


#line 67
- (jfloat)getYLine {
  
#line 68
  return yLine_;
}


#line 71
- (void)setYLineWithFloat:(jfloat)yLine {
  
#line 72
  self->yLine_ = yLine;
}


#line 81
- (jfloat)getFilledWidth {
  
#line 82
  return filledWidth_;
}


#line 85
- (void)setFilledWidthWithFloat:(jfloat)filledWidth {
  
#line 86
  self->filledWidth_ = filledWidth;
}


#line 97
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)elements
                         withBoolean:(jboolean)useAscender {
  if (self = [super init]) {
    
#line 98
    compositeColumn_ = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
    
#line 99
    [compositeColumn_ setUseAscenderWithBoolean:useAscender];
    
#line 100
    self->useAscender_ = useAscender;
    
#line 101
    content_ = elements;
  }
  return self;
}


#line 104
- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury {
  
#line 105
  leftX_ = [JavaLangMath minWithFloat:llx withFloat:urx];
  maxY_ = [JavaLangMath maxWithFloat:lly withFloat:ury];
  minY_ = [JavaLangMath minWithFloat:lly withFloat:ury];
  rightX_ = [JavaLangMath maxWithFloat:llx withFloat:urx];
  floatLeftX_ = leftX_;
  floatRightX_ = rightX_;
  yLine_ = maxY_;
  filledWidth_ = 0;
}


#line 115
- (jint)layoutWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas
                                       withBoolean:(jboolean)simulate {
  
#line 116
  [((ComItextpdfTextPdfColumnText *) nil_chk(compositeColumn_)) setCanvasWithComItextpdfTextPdfPdfContentByte:canvas];
  jint status = ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
  
#line 119
  JavaUtilArrayList *floatingElements = [[JavaUtilArrayList alloc] init];
  id<JavaUtilList> content = simulate ? [[JavaUtilArrayList alloc] initWithJavaUtilCollection:self->content_] : ((id) self->content_);
  
#line 122
  while (![content isEmpty]) {
    if ([(id) [content getWithInt:0] isKindOfClass:[ComItextpdfTextPdfPdfDiv class]]) {
      ComItextpdfTextPdfPdfDiv *floatingElement = (ComItextpdfTextPdfPdfDiv *) check_class_cast([content getWithInt:0], [ComItextpdfTextPdfPdfDiv class]);
      if ([((ComItextpdfTextPdfPdfDiv *) nil_chk(floatingElement)) getFloatType] == ComItextpdfTextPdfPdfDiv_FloatTypeEnum_get_LEFT() || [floatingElement getFloatType] == ComItextpdfTextPdfPdfDiv_FloatTypeEnum_get_RIGHT()) {
        [floatingElements addWithId:floatingElement];
        (void) [content removeWithInt:0];
      }
      else {
        
#line 129
        if (![floatingElements isEmpty]) {
          status = [self floatingLayoutWithJavaUtilList:floatingElements withBoolean:simulate];
          if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0) {
            break;
          }
        }
        
#line 136
        (void) [content removeWithInt:0];
        
#line 138
        status = [floatingElement layoutWithComItextpdfTextPdfPdfContentByte:canvas withBoolean:useAscender_ withBoolean:YES withFloat:floatLeftX_ withFloat:minY_ withFloat:floatRightX_ withFloat:yLine_];
        
#line 140
        if (!simulate) {
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(canvas)) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:floatingElement];
          status = [floatingElement layoutWithComItextpdfTextPdfPdfContentByte:canvas withBoolean:useAscender_ withBoolean:simulate withFloat:floatLeftX_ withFloat:minY_ withFloat:floatRightX_ withFloat:yLine_];
          [canvas closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:floatingElement];
        }
        
#line 146
        if ([floatingElement getActualWidth] > filledWidth_) {
          filledWidth_ = [floatingElement getActualWidth];
        }
        if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0) {
          [content addWithInt:0 withId:floatingElement];
          yLine_ = [floatingElement getYLine];
          break;
        }
        else {
          
#line 154
          yLine_ -= [floatingElement getActualHeight];
        }
      }
    }
    else {
      
#line 158
      [floatingElements addWithId:[content getWithInt:0]];
      (void) [content removeWithInt:0];
    }
  }
  
#line 163
  if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) != 0 && ![floatingElements isEmpty]) {
    status = [self floatingLayoutWithJavaUtilList:floatingElements withBoolean:simulate];
  }
  
#line 167
  [content addAllWithInt:0 withJavaUtilCollection:floatingElements];
  
#line 169
  return status;
}


#line 172
- (jint)floatingLayoutWithJavaUtilList:(id<JavaUtilList>)floatingElements
                           withBoolean:(jboolean)simulate {
  
#line 173
  jint status = ComItextpdfTextPdfColumnText_NO_MORE_TEXT;
  jfloat minYLine = yLine_;
  jfloat leftWidth = 0;
  jfloat rightWidth = 0;
  
#line 178
  ComItextpdfTextPdfColumnText *currentCompositeColumn = compositeColumn_;
  if (simulate) {
    currentCompositeColumn = [ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:compositeColumn_];
  }
  
#line 183
  while (![((id<JavaUtilList>) nil_chk(floatingElements)) isEmpty]) {
    id<ComItextpdfTextElement> nextElement = [floatingElements getWithInt:0];
    (void) [floatingElements removeWithInt:0];
    if ([(id) nextElement isKindOfClass:[ComItextpdfTextPdfPdfDiv class]]) {
      ComItextpdfTextPdfPdfDiv *floatingElement = (ComItextpdfTextPdfPdfDiv *) check_class_cast(nextElement, [ComItextpdfTextPdfPdfDiv class]);
      status = [((ComItextpdfTextPdfPdfDiv *) nil_chk(floatingElement)) layoutWithComItextpdfTextPdfPdfContentByte:[((ComItextpdfTextPdfColumnText *) nil_chk(compositeColumn_)) getCanvas] withBoolean:useAscender_ withBoolean:YES withFloat:floatLeftX_ withFloat:minY_ withFloat:floatRightX_ withFloat:yLine_];
      if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0) {
        yLine_ = minYLine;
        floatLeftX_ = leftX_;
        floatRightX_ = rightX_;
        status = [floatingElement layoutWithComItextpdfTextPdfPdfContentByte:[compositeColumn_ getCanvas] withBoolean:useAscender_ withBoolean:YES withFloat:floatLeftX_ withFloat:minY_ withFloat:floatRightX_ withFloat:yLine_];
        if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0) {
          [floatingElements addWithInt:0 withId:floatingElement];
          break;
        }
      }
      if ([floatingElement getFloatType] == ComItextpdfTextPdfPdfDiv_FloatTypeEnum_get_LEFT()) {
        status = [floatingElement layoutWithComItextpdfTextPdfPdfContentByte:[compositeColumn_ getCanvas] withBoolean:useAscender_ withBoolean:simulate withFloat:floatLeftX_ withFloat:minY_ withFloat:floatRightX_ withFloat:yLine_];
        floatLeftX_ += [floatingElement getActualWidth];
        leftWidth += [floatingElement getActualWidth];
      }
      else
#line 203
      if ([floatingElement getFloatType] == ComItextpdfTextPdfPdfDiv_FloatTypeEnum_get_RIGHT()) {
        status = [floatingElement layoutWithComItextpdfTextPdfPdfContentByte:[compositeColumn_ getCanvas] withBoolean:useAscender_ withBoolean:simulate withFloat:floatRightX_ - [floatingElement getActualWidth] - 0.01f withFloat:minY_ withFloat:floatRightX_ withFloat:yLine_];
        floatRightX_ -= [floatingElement getActualWidth];
        rightWidth += [floatingElement getActualWidth];
      }
      minYLine = [JavaLangMath minWithFloat:minYLine withFloat:yLine_ - [floatingElement getActualHeight]];
    }
    else {
      
#line 210
      if ([(id) nextElement conformsToProtocol: @protocol(ComItextpdfTextApiSpaceable)]) {
        yLine_ -= [((id<ComItextpdfTextApiSpaceable>) nil_chk(((id<ComItextpdfTextApiSpaceable>) check_protocol_cast(nextElement, @protocol(ComItextpdfTextApiSpaceable))))) getSpacingBefore];
      }
      if (simulate) {
        if ([(id) nextElement isKindOfClass:[ComItextpdfTextPdfPdfPTable class]])
#line 215
        [((ComItextpdfTextPdfColumnText *) nil_chk(currentCompositeColumn)) addElementWithComItextpdfTextElement:[[ComItextpdfTextPdfPdfPTable alloc] initWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *) check_class_cast(nextElement, [ComItextpdfTextPdfPdfPTable class])]];
        else
#line 217
        [((ComItextpdfTextPdfColumnText *) nil_chk(currentCompositeColumn)) addElementWithComItextpdfTextElement:nextElement];
      }
      else {
        
#line 219
        [((ComItextpdfTextPdfColumnText *) nil_chk(currentCompositeColumn)) addElementWithComItextpdfTextElement:nextElement];
      }
      
#line 222
      if (yLine_ > minYLine)
#line 223
      [((ComItextpdfTextPdfColumnText *) nil_chk(currentCompositeColumn)) setSimpleColumnWithFloat:floatLeftX_ withFloat:yLine_ withFloat:floatRightX_ withFloat:minYLine];
      else
#line 225
      [((ComItextpdfTextPdfColumnText *) nil_chk(currentCompositeColumn)) setSimpleColumnWithFloat:floatLeftX_ withFloat:yLine_ withFloat:floatRightX_ withFloat:minY_];
      
#line 227
      [((ComItextpdfTextPdfColumnText *) nil_chk(currentCompositeColumn)) setFilledWidthWithFloat:0];
      
#line 229
      status = [currentCompositeColumn goWithBoolean:simulate];
      if (yLine_ > minYLine && (floatLeftX_ > leftX_ || floatRightX_ < rightX_) && (status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0) {
        yLine_ = minYLine;
        floatLeftX_ = leftX_;
        floatRightX_ = rightX_;
        if (leftWidth != 0 && rightWidth != 0) {
          filledWidth_ = rightX_ - leftX_;
        }
        else {
          
#line 237
          if (leftWidth > filledWidth_) {
            filledWidth_ = leftWidth;
          }
          if (rightWidth > filledWidth_) {
            filledWidth_ = rightWidth;
          }
        }
        
#line 245
        leftWidth = 0;
        rightWidth = 0;
        if (simulate && [(id) nextElement isKindOfClass:[ComItextpdfTextPdfPdfPTable class]]) {
          [currentCompositeColumn addElementWithComItextpdfTextElement:[[ComItextpdfTextPdfPdfPTable alloc] initWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *) check_class_cast(nextElement, [ComItextpdfTextPdfPdfPTable class])]];
        }
        
#line 251
        [currentCompositeColumn setSimpleColumnWithFloat:floatLeftX_ withFloat:yLine_ withFloat:floatRightX_ withFloat:minY_];
        status = [currentCompositeColumn goWithBoolean:simulate];
        minYLine = [currentCompositeColumn getYLine] + [currentCompositeColumn getDescender];
        yLine_ = minYLine;
        if ([currentCompositeColumn getFilledWidth] > filledWidth_) {
          filledWidth_ = [currentCompositeColumn getFilledWidth];
        }
      }
      else {
        
#line 259
        if (rightWidth > 0) {
          rightWidth += [currentCompositeColumn getFilledWidth];
        }
        else
#line 261
        if (leftWidth > 0) {
          leftWidth += [currentCompositeColumn getFilledWidth];
        }
        else
#line 263
        if ([currentCompositeColumn getFilledWidth] > filledWidth_) {
          filledWidth_ = [currentCompositeColumn getFilledWidth];
        }
        minYLine = [JavaLangMath minWithFloat:[currentCompositeColumn getYLine] + [currentCompositeColumn getDescender] withFloat:minYLine];
        yLine_ = [currentCompositeColumn getYLine] + [currentCompositeColumn getDescender];
      }
      
#line 270
      if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0) {
        if (!simulate) {
          [floatingElements addAllWithInt:0 withJavaUtilCollection:[currentCompositeColumn getCompositeElements]];
          [((id<JavaUtilList>) nil_chk([currentCompositeColumn getCompositeElements])) clear];
        }
        else {
          
#line 275
          [floatingElements addWithInt:0 withId:nextElement];
          [currentCompositeColumn setTextWithComItextpdfTextPhrase:nil];
        }
        break;
      }
      else {
        
#line 280
        [currentCompositeColumn setTextWithComItextpdfTextPhrase:nil];
      }
    }
  }
  
#line 286
  if (leftWidth != 0 && rightWidth != 0) {
    filledWidth_ = rightX_ - leftX_;
  }
  else {
    
#line 289
    if (leftWidth > filledWidth_) {
      filledWidth_ = leftWidth;
    }
    if (rightWidth > filledWidth_) {
      filledWidth_ = rightWidth;
    }
  }
  
#line 297
  yLine_ = minYLine;
  floatLeftX_ = leftX_;
  floatRightX_ = rightX_;
  
#line 301
  return status;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfFloatLayout *)other {
  [super copyAllFieldsTo:other];
  other->compositeColumn_ = compositeColumn_;
  other->content_ = content_;
  other->filledWidth_ = filledWidth_;
  other->floatLeftX_ = floatLeftX_;
  other->floatRightX_ = floatRightX_;
  other->leftX_ = leftX_;
  other->maxY_ = maxY_;
  other->minY_ = minY_;
  other->rightX_ = rightX_;
  other->useAscender_ = useAscender_;
  other->yLine_ = yLine_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getYLine", NULL, "F", 0x1, NULL },
    { "setYLineWithFloat:", "setYLine", "V", 0x1, NULL },
    { "getFilledWidth", NULL, "F", 0x1, NULL },
    { "setFilledWidthWithFloat:", "setFilledWidth", "V", 0x1, NULL },
    { "initWithJavaUtilList:withBoolean:", "FloatLayout", NULL, 0x1, NULL },
    { "setSimpleColumnWithFloat:withFloat:withFloat:withFloat:", "setSimpleColumn", "V", 0x1, NULL },
    { "layoutWithComItextpdfTextPdfPdfContentByte:withBoolean:", "layout", "I", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "floatingLayoutWithJavaUtilList:withBoolean:", "floatingLayout", "I", 0x2, "Lcom.itextpdf.text.DocumentException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "maxY_", NULL, 0x4, "F", NULL,  },
    { "minY_", NULL, 0x4, "F", NULL,  },
    { "leftX_", NULL, 0x4, "F", NULL,  },
    { "rightX_", NULL, 0x4, "F", NULL,  },
    { "yLine_", NULL, 0x4, "F", NULL,  },
    { "floatLeftX_", NULL, 0x4, "F", NULL,  },
    { "floatRightX_", NULL, 0x4, "F", NULL,  },
    { "filledWidth_", NULL, 0x4, "F", NULL,  },
    { "compositeColumn_", NULL, 0x14, "Lcom.itextpdf.text.pdf.ColumnText;", NULL,  },
    { "content_", NULL, 0x14, "Ljava.util.List;", NULL,  },
    { "useAscender_", NULL, 0x14, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfFloatLayout = { "FloatLayout", "com.itextpdf.text.pdf", NULL, 0x1, 8, methods, 11, fields, 0, NULL};
  return &_ComItextpdfTextPdfFloatLayout;
}

@end
