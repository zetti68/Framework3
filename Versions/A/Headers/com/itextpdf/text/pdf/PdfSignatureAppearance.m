//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfSignatureAppearance.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfSignatureAppearance.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Paragraph.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/Version.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/io/RASInputStream.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/ColumnText.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDeveloperExtension.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfSignatureAppearance.h"
#include "com/itextpdf/text/pdf/PdfStamper.h"
#include "com/itextpdf/text/pdf/PdfStamperImp.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfTemplate.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/io/EOFException.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/security/cert/Certificate.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Arrays.h"
#include "java/util/Calendar.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 81
@implementation ComItextpdfTextPdfPdfSignatureAppearance

NSString * ComItextpdfTextPdfPdfSignatureAppearance_questionMark_ = @"% DSUnknown\nq\n1 G\n1 g\n0.1 0 0 0.1 9 0 cm\n0 J 0 j 4 M []0 d\n1 i \n0 g\n313 292 m\n313 404 325 453 432 529 c\n478 561 504 597 504 645 c\n504 736 440 760 391 760 c\n286 760 271 681 265 626 c\n265 625 l\n100 625 l\n100 828 253 898 381 898 c\n451 898 679 878 679 650 c\n679 555 628 499 538 435 c\n488 399 467 376 467 292 c\n313 292 l\nh\n308 214 170 -164 re\nf\n0.44 G\n1.2 w\n1 1 0.4 rg\n287 318 m\n287 430 299 479 406 555 c\n451 587 478 623 478 671 c\n478 762 414 786 365 786 c\n260 786 245 707 239 652 c\n239 651 l\n74 651 l\n74 854 227 924 355 924 c\n425 924 653 904 653 676 c\n653 581 602 525 512 461 c\n462 425 441 402 441 318 c\n287 318 l\nh\n282 240 170 -164 re\nB\nQ\n";


#line 87
- (instancetype)initWithComItextpdfTextPdfPdfStamperImp:(ComItextpdfTextPdfPdfStamperImp *)writer {
  if (self = [super init]) {
    certificationLevel_ =
#line 113
    ComItextpdfTextPdfPdfSignatureAppearance_NOT_CERTIFIED;
    reasonCaption_ =
#line 135
    @"Reason: ";
    locationCaption_ =
#line 138
    @"Location: ";
    page_ =
#line 420
    1;
    renderingMode_ = ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_get_DESCRIPTION();
    signatureGraphic_ =
#line 589
    nil;
    acro6Layers_ =
#line 610
    YES;
    app_ = [IOSObjectArray arrayWithLength:
#line 631
    5 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfTemplate class]]];
    reuseAppearance_ =
#line 655
    NO;
    runDirection_ =
#line 794
    ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
    preClosed_ =
#line 1215
    NO;
    
#line 88
    self->writer_ = writer;
    
#line 89
    signDate_ = [[JavaUtilGregorianCalendar alloc] init];
    
#line 90
    fieldName_ = [self getNewSigName];
    
#line 91
    signatureCreator_ = [((ComItextpdfTextVersion *) nil_chk([ComItextpdfTextVersion getInstance])) getVersion];
  }
  return self;
}


#line 120
- (void)setCertificationLevelWithInt:(jint)certificationLevel {
  
#line 121
  self->certificationLevel_ = certificationLevel;
}


#line 128
- (jint)getCertificationLevel {
  
#line 129
  return self->certificationLevel_;
}


#line 153
- (NSString *)getReason {
  
#line 154
  return self->reason_;
}


#line 161
- (void)setReasonWithNSString:(NSString *)reason {
  
#line 162
  self->reason_ = reason;
}


#line 169
- (void)setReasonCaptionWithNSString:(NSString *)reasonCaption {
  
#line 170
  self->reasonCaption_ = reasonCaption;
}


#line 177
- (NSString *)getLocation {
  
#line 178
  return self->location_;
}


#line 185
- (void)setLocationWithNSString:(NSString *)location {
  
#line 186
  self->location_ = location;
}


#line 193
- (void)setLocationCaptionWithNSString:(NSString *)locationCaption {
  
#line 194
  self->locationCaption_ = locationCaption;
}


#line 204
- (NSString *)getSignatureCreator {
  
#line 205
  return signatureCreator_;
}


#line 212
- (void)setSignatureCreatorWithNSString:(NSString *)signatureCreator {
  
#line 213
  self->signatureCreator_ = signatureCreator;
}


#line 223
- (NSString *)getContact {
  
#line 224
  return self->contact_;
}


#line 231
- (void)setContactWithNSString:(NSString *)contact {
  
#line 232
  self->contact_ = contact;
}


#line 239
- (JavaUtilCalendar *)getSignDate {
  
#line 240
  return signDate_;
}


#line 247
- (void)setSignDateWithJavaUtilCalendar:(JavaUtilCalendar *)signDate {
  
#line 248
  self->signDate_ = signDate;
}


#line 266
- (JavaIoInputStream *)getRangeStream {
  
#line 267
  ComItextpdfTextIoRandomAccessSourceFactory *fac = [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init];
  return [[ComItextpdfTextIoRASInputStream alloc] initWithComItextpdfTextIoRandomAccessSource:[fac createRangedWithComItextpdfTextIoRandomAccessSource:[self getUnderlyingSource] withLongArray:range_]];
}


#line 275
- (id<ComItextpdfTextIoRandomAccessSource>)getUnderlyingSource {
  
#line 277
  ComItextpdfTextIoRandomAccessSourceFactory *fac = [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init];
  return raf_ == nil ? [fac createSourceWithByteArray:bout_] : [fac createSourceWithJavaIoRandomAccessFile:raf_];
}


#line 289
- (void)addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:(ComItextpdfTextPdfPdfDeveloperExtension *)de {
  
#line 290
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:de];
}


#line 302
- (ComItextpdfTextPdfPdfDictionary *)getCryptoDictionary {
  
#line 303
  return cryptoDictionary_;
}


#line 310
- (void)setCryptoDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)cryptoDictionary {
  
#line 311
  self->cryptoDictionary_ = cryptoDictionary;
}


#line 319
- (void)setCertificateWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)signCertificate {
  
#line 320
  self->signCertificate_ = signCertificate;
}


#line 323
- (JavaSecurityCertCertificate *)getCertificate {
  
#line 324
  return signCertificate_;
}


#line 349
- (id<ComItextpdfTextPdfPdfSignatureAppearance_SignatureEvent>)getSignatureEvent {
  
#line 350
  return self->signatureEvent_;
}


#line 357
- (void)setSignatureEventWithComItextpdfTextPdfPdfSignatureAppearance_SignatureEvent:(id<ComItextpdfTextPdfPdfSignatureAppearance_SignatureEvent>)signatureEvent {
  
#line 358
  self->signatureEvent_ = signatureEvent;
}


#line 372
- (NSString *)getFieldName {
  
#line 373
  return fieldName_;
}


#line 381
- (NSString *)getNewSigName {
  
#line 382
  ComItextpdfTextPdfAcroFields *af = [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) getAcroFields];
  NSString *name = @"Signature";
  jint step = 0;
  jboolean found = NO;
  while (!found) {
    ++step;
    NSString *n1 = JreStrcat("$I", name, step);
    if ([((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFieldItemWithNSString:n1] != nil)
#line 390
    continue;
    n1 = JreStrcat("$C", n1, '.');
    found = YES;
    for (id __strong element in nil_chk([((id<JavaUtilMap>) nil_chk([af getFields])) keySet])) {
      NSString *fn = (NSString *) check_class_cast(element, [NSString class]);
      if ([((NSString *) nil_chk(fn)) hasPrefix:n1]) {
        found = NO;
        break;
      }
    }
  }
  name = JreStrcat("$I", name, step);
  return name;
}


#line 413
- (jboolean)isNewField {
  
#line 414
  return self->newField_;
}


#line 426
- (jint)getPage {
  
#line 427
  return page_;
}


#line 441
- (ComItextpdfTextRectangle *)getRect {
  
#line 442
  return rect_;
}


#line 452
- (ComItextpdfTextRectangle *)getPageRect {
  
#line 453
  return pageRect_;
}


#line 460
- (jboolean)isInvisible {
  
#line 461
  return rect_ == nil || [rect_ getWidth] == 0 || [rect_ getHeight] == 0;
}


#line 470
- (void)setVisibleSignatureWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageRect
                                                withInt:(jint)page
                                           withNSString:(NSString *)fieldName {
  
#line 471
  if (fieldName != nil) {
    if ([fieldName indexOf:'.'] >= 0)
#line 473
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"field.names.cannot.contain.a.dot" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    ComItextpdfTextPdfAcroFields *af = [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) getAcroFields];
    ComItextpdfTextPdfAcroFields_Item *item = [((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFieldItemWithNSString:fieldName];
    if (item != nil)
#line 477
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.field.1.already.exists" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fieldName } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    self->fieldName_ = fieldName;
  }
  if (page < 1 || page > [((ComItextpdfTextPdfPdfReader *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_))->reader_)) getNumberOfPages])
#line 481
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.page.number.1" withInt:page]];
  self->pageRect_ = [[ComItextpdfTextRectangle alloc] initWithComItextpdfTextRectangle:pageRect];
  [self->pageRect_ normalize];
  rect_ = [[ComItextpdfTextRectangle alloc] initWithFloat:[self->pageRect_ getWidth] withFloat:[self->pageRect_ getHeight]];
  self->page_ = page;
  newField_ = YES;
}


#line 493
- (void)setVisibleSignatureWithNSString:(NSString *)fieldName {
  
#line 494
  ComItextpdfTextPdfAcroFields *af = [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) getAcroFields];
  ComItextpdfTextPdfAcroFields_Item *item = [((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFieldItemWithNSString:fieldName];
  if (item == nil)
#line 497
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.field.1.does.not.exist" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fieldName } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
  if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_SIG_())) isEqual:[ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()]]])
#line 500
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.field.1.is.not.a.signature.field" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fieldName } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  self->fieldName_ = fieldName;
  ComItextpdfTextPdfPdfArray *r = [merged getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_()];
  jfloat llx = [((ComItextpdfTextPdfPdfNumber *) nil_chk([((ComItextpdfTextPdfPdfArray *) nil_chk(r)) getAsNumberWithInt:0])) floatValue];
  jfloat lly = [((ComItextpdfTextPdfPdfNumber *) nil_chk([r getAsNumberWithInt:1])) floatValue];
  jfloat urx = [((ComItextpdfTextPdfPdfNumber *) nil_chk([r getAsNumberWithInt:2])) floatValue];
  jfloat ury = [((ComItextpdfTextPdfPdfNumber *) nil_chk([r getAsNumberWithInt:3])) floatValue];
  pageRect_ = [[ComItextpdfTextRectangle alloc] initWithFloat:llx withFloat:lly withFloat:urx withFloat:ury];
  [pageRect_ normalize];
  page_ = [((JavaLangInteger *) nil_chk([item getPageWithInt:0])) intValue];
  jint rotation = [((ComItextpdfTextPdfPdfReader *) nil_chk(writer_->reader_)) getPageRotationWithInt:page_];
  ComItextpdfTextRectangle *pageSize = [writer_->reader_ getPageSizeWithRotationWithInt:page_];
  switch (rotation) {
    case 90:
    pageRect_ = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 515
    [pageRect_ getBottom] withFloat:
#line 516
    [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getTop] - [pageRect_ getLeft] withFloat:
#line 517
    [pageRect_ getTop] withFloat:
#line 518
    [pageSize getTop] - [pageRect_ getRight]];
    break;
    case 180:
    pageRect_ = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 522
    [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [pageRect_ getLeft] withFloat:
#line 523
    [pageSize getTop] - [pageRect_ getBottom] withFloat:
#line 524
    [pageSize getRight] - [pageRect_ getRight] withFloat:
#line 525
    [pageSize getTop] - [pageRect_ getTop]];
    break;
    case 270:
    pageRect_ = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 529
    [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [pageRect_ getBottom] withFloat:
#line 530
    [pageRect_ getLeft] withFloat:
#line 531
    [pageSize getRight] - [pageRect_ getTop] withFloat:
#line 532
    [pageRect_ getRight]];
    break;
  }
  if (rotation != 0)
#line 536
  [pageRect_ normalize];
  rect_ = [[ComItextpdfTextRectangle alloc] initWithFloat:[self->pageRect_ getWidth] withFloat:[self->pageRect_ getHeight]];
}


#line 575
- (ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum *)getRenderingMode {
  
#line 576
  return renderingMode_;
}


#line 584
- (void)setRenderingModeWithComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum:(ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum *)renderingMode {
  
#line 585
  self->renderingMode_ = renderingMode;
}


#line 595
- (ComItextpdfTextImage *)getSignatureGraphic {
  
#line 596
  return signatureGraphic_;
}


#line 605
- (void)setSignatureGraphicWithComItextpdfTextImage:(ComItextpdfTextImage *)signatureGraphic {
  
#line 606
  self->signatureGraphic_ = signatureGraphic;
}


#line 616
- (jboolean)isAcro6Layers {
  
#line 617
  return self->acro6Layers_;
}


#line 626
- (void)setAcro6LayersWithBoolean:(jboolean)acro6Layers {
  
#line 627
  self->acro6Layers_ = acro6Layers;
}


#line 642
- (ComItextpdfTextPdfPdfTemplate *)getLayerWithInt:(jint)layer {
  
#line 643
  if (layer < 0 || layer >= ((IOSObjectArray *) nil_chk(app_))->size_)
#line 644
  return nil;
  ComItextpdfTextPdfPdfTemplate *t = IOSObjectArray_Get(nil_chk(app_), layer);
  if (t == nil) {
    t = IOSObjectArray_SetAndConsume(app_, layer, [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_]);
    [t setBoundingBoxWithComItextpdfTextRectangle:rect_];
    (void) [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:t withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:JreStrcat("CI", 'n', layer)]];
  }
  return t;
}


#line 660
- (void)setReuseAppearanceWithBoolean:(jboolean)reuseAppearance {
  
#line 661
  self->reuseAppearance_ = reuseAppearance;
}


#line 720
- (ComItextpdfTextImage *)getImage {
  
#line 721
  return self->image_;
}


#line 728
- (void)setImageWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 729
  self->image_ = image;
}


#line 739
- (jfloat)getImageScale {
  
#line 740
  return self->imageScale_;
}


#line 750
- (void)setImageScaleWithFloat:(jfloat)imageScale {
  
#line 751
  self->imageScale_ = imageScale;
}


#line 762
- (void)setLayer2TextWithNSString:(NSString *)text {
  
#line 763
  layer2Text_ = text;
}


#line 770
- (NSString *)getLayer2Text {
  
#line 771
  return layer2Text_;
}


#line 781
- (ComItextpdfTextFont *)getLayer2Font {
  
#line 782
  return self->layer2Font_;
}


#line 789
- (void)setLayer2FontWithComItextpdfTextFont:(ComItextpdfTextFont *)layer2Font {
  
#line 790
  self->layer2Font_ = layer2Font;
}


#line 799
- (void)setRunDirectionWithInt:(jint)runDirection {
  
#line 800
  if (runDirection < ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_DEFAULT || runDirection > ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_RTL)
#line 801
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.run.direction.1" withInt:runDirection]];
  self->runDirection_ = runDirection;
}

- (jint)getRunDirection {
  
#line 809
  return runDirection_;
}


#line 822
- (void)setLayer4TextWithNSString:(NSString *)text {
  
#line 823
  layer4Text_ = text;
}


#line 830
- (NSString *)getLayer4Text {
  
#line 831
  return layer4Text_;
}


#line 846
- (ComItextpdfTextPdfPdfTemplate *)getTopLayer {
  
#line 847
  if (frm_ == nil) {
    frm_ = [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
    [frm_ setBoundingBoxWithComItextpdfTextRectangle:rect_];
    (void) [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:frm_ withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"FRM"]];
  }
  return frm_;
}


#line 871
- (ComItextpdfTextPdfPdfTemplate *)getAppearance {
  
#line 872
  if ([self isInvisible]) {
    ComItextpdfTextPdfPdfTemplate *t = [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
    [t setBoundingBoxWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:0 withFloat:0]];
    (void) [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:t withComItextpdfTextPdfPdfName:nil];
    return t;
  }
  
#line 879
  if (IOSObjectArray_Get(nil_chk(app_), 0) == nil && !reuseAppearance_) {
    [self createBlankN0];
  }
  if (IOSObjectArray_Get(app_, 1) == nil && !acro6Layers_) {
    ComItextpdfTextPdfPdfTemplate *t = IOSObjectArray_SetAndConsume(app_, 1, [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_]);
    [t setBoundingBoxWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:100 withFloat:100]];
    (void) [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:t withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"n1"]];
    [t setLiteralWithNSString:ComItextpdfTextPdfPdfSignatureAppearance_questionMark_];
  }
  if (IOSObjectArray_Get(app_, 2) == nil) {
    NSString *text;
    if (layer2Text_ == nil) {
      JavaLangStringBuilder *buf = [[JavaLangStringBuilder alloc] init];
      (void) [buf appendWithNSString:@"Digitally signed by "];
      NSString *name = name = @"";
      (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:name])) appendWithChar:0x000a];
      JavaTextSimpleDateFormat *sd = [[JavaTextSimpleDateFormat alloc] initWithNSString:@"yyyy.MM.dd HH:mm:ss z"];
      (void) [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:@"Date: "])) appendWithNSString:[sd formatWithJavaUtilDate:[((JavaUtilCalendar *) nil_chk(signDate_)) getTime]]];
      if (reason_ != nil)
#line 898
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:0x000a])) appendWithNSString:reasonCaption_])) appendWithNSString:reason_];
      if (location_ != nil)
#line 900
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([buf appendWithChar:0x000a])) appendWithNSString:locationCaption_])) appendWithNSString:location_];
      text = [buf description];
    }
    else
#line 904
    text = layer2Text_;
    ComItextpdfTextPdfPdfTemplate *t = IOSObjectArray_SetAndConsume(app_, 2, [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_]);
    [t setBoundingBoxWithComItextpdfTextRectangle:rect_];
    (void) [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:t withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"n2"]];
    if (image_ != nil) {
      if (imageScale_ == 0) {
        [t addImageWithComItextpdfTextImage:image_ withFloat:[((ComItextpdfTextRectangle *) nil_chk(rect_)) getWidth] withFloat:0 withFloat:0 withFloat:[rect_ getHeight] withFloat:0 withFloat:0];
      }
      else {
        jfloat usableScale = imageScale_;
        if (imageScale_ < 0)
#line 915
        usableScale = [JavaLangMath minWithFloat:[((ComItextpdfTextRectangle *) nil_chk(rect_)) getWidth] / [image_ getWidth] withFloat:[rect_ getHeight] / [image_ getHeight]];
        jfloat w = [image_ getWidth] * usableScale;
        jfloat h = [image_ getHeight] * usableScale;
        jfloat x = ([((ComItextpdfTextRectangle *) nil_chk(rect_)) getWidth] - w) / 2;
        jfloat y = ([rect_ getHeight] - h) / 2;
        [t addImageWithComItextpdfTextImage:image_ withFloat:w withFloat:0 withFloat:0 withFloat:h withFloat:x withFloat:y];
      }
    }
    ComItextpdfTextFont *font;
    if (layer2Font_ == nil)
#line 925
    font = [[ComItextpdfTextFont alloc] init];
    else
#line 927
    font = [[ComItextpdfTextFont alloc] initWithComItextpdfTextFont:layer2Font_];
    jfloat size = [((ComItextpdfTextFont *) nil_chk(font)) getSize];
    
#line 930
    ComItextpdfTextRectangle *dataRect = nil;
    ComItextpdfTextRectangle *signatureRect = nil;
    
#line 933
    if (renderingMode_ == ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_get_NAME_AND_DESCRIPTION() || (
#line 934
    renderingMode_ == ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_get_GRAPHIC_AND_DESCRIPTION() && self->signatureGraphic_ != nil)) {
      
#line 936
      signatureRect = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 937
      ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 938
      ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 939
      [((ComItextpdfTextRectangle *) nil_chk(rect_)) getWidth] / 2 - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 940
      [rect_ getHeight] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN];
      dataRect = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 942
      [rect_ getWidth] / 2 + ComItextpdfTextPdfPdfSignatureAppearance_MARGIN / 2 withFloat:
#line 943
      ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 944
      [rect_ getWidth] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN / 2 withFloat:
#line 945
      [rect_ getHeight] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN];
      
#line 947
      if ([rect_ getHeight] > [rect_ getWidth]) {
        signatureRect = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 949
        ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 950
        [rect_ getHeight] / 2 withFloat:
#line 951
        [rect_ getWidth] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 952
        [rect_ getHeight]];
        dataRect = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 954
        ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 955
        ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 956
        [rect_ getWidth] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 957
        [rect_ getHeight] / 2 - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN];
      }
    }
    else if (renderingMode_ == ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_get_GRAPHIC()) {
      if (signatureGraphic_ == nil) {
        @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"a.signature.image.should.be.present.when.rendering.mode.is.graphic.only" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
      signatureRect = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 965
      ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 966
      ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 967
      [((ComItextpdfTextRectangle *) nil_chk(rect_)) getWidth] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 968
      [rect_ getHeight] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN];
    }
    else {
      dataRect = [[ComItextpdfTextRectangle alloc] initWithFloat:
#line 972
      ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 973
      ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 974
      [((ComItextpdfTextRectangle *) nil_chk(rect_)) getWidth] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:
#line 975
      [rect_ getHeight] * (1 - ComItextpdfTextPdfPdfSignatureAppearance_TOP_SECTION) - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN];
    }
    {
      
#line 980
      NSString *signedBy;
      ComItextpdfTextRectangle *sr2;
      jfloat signedSize;
      
#line 984
      ComItextpdfTextPdfColumnText *ct2;
      
#line 998
      ComItextpdfTextImage *im;
      
#line 1001
      ComItextpdfTextParagraph *p;
      
#line 1003
      jfloat x;
      
#line 1006
      jfloat y;
      
#line 978
      switch ([renderingMode_ ordinal]) {
        case ComItextpdfTextPdfPdfSignatureAppearance_RenderingMode_NAME_AND_DESCRIPTION:
        signedBy = @"";
        sr2 = [[ComItextpdfTextRectangle alloc] initWithFloat:[((ComItextpdfTextRectangle *) nil_chk(signatureRect)) getWidth] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:[signatureRect getHeight] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN];
        signedSize = [ComItextpdfTextPdfColumnText fitTextWithComItextpdfTextFont:font withNSString:signedBy withComItextpdfTextRectangle:sr2 withFloat:-1 withInt:runDirection_];
        
#line 984
        ct2 = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:t];
        [ct2 setRunDirectionWithInt:runDirection_];
        [ct2 setSimpleColumnWithComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithNSString:signedBy withComItextpdfTextFont:font] withFloat:[signatureRect getLeft] withFloat:[signatureRect getBottom] withFloat:[signatureRect getRight] withFloat:[signatureRect getTop] withFloat:signedSize withInt:ComItextpdfTextElement_ALIGN_LEFT];
        
#line 988
        [ct2 go];
        break;
        case ComItextpdfTextPdfPdfSignatureAppearance_RenderingMode_GRAPHIC_AND_DESCRIPTION:
        if (signatureGraphic_ == nil) {
          @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"a.signature.image.should.be.present.when.rendering.mode.is.graphic.and.description" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
        }
        ct2 = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:t];
        [ct2 setRunDirectionWithInt:runDirection_];
        [ct2 setSimpleColumnWithFloat:[((ComItextpdfTextRectangle *) nil_chk(signatureRect)) getLeft] withFloat:[signatureRect getBottom] withFloat:[signatureRect getRight] withFloat:[signatureRect getTop] withFloat:0 withInt:ComItextpdfTextElement_ALIGN_RIGHT];
        
#line 998
        im = [ComItextpdfTextImage getInstanceWithComItextpdfTextImage:signatureGraphic_];
        [((ComItextpdfTextImage *) nil_chk(im)) scaleToFitWithFloat:[signatureRect getWidth] withFloat:[signatureRect getHeight]];
        
#line 1001
        p = [[ComItextpdfTextParagraph alloc] init];
        
#line 1003
        x = 0;
        
#line 1006
        y = -[im getScaledHeight] + 15;
        
#line 1008
        x = x + ([signatureRect getWidth] - [im getScaledWidth]) / 2;
        y = y - ([signatureRect getHeight] - [im getScaledHeight]) / 2;
        [p addWithId:[[ComItextpdfTextChunk alloc] initWithComItextpdfTextImage:im withFloat:x + ([signatureRect getWidth] - [im getScaledWidth]) / 2 withFloat:y withBoolean:NO]];
        [ct2 addElementWithComItextpdfTextElement:p];
        [ct2 go];
        break;
        case ComItextpdfTextPdfPdfSignatureAppearance_RenderingMode_GRAPHIC:
        ct2 = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:t];
        [ct2 setRunDirectionWithInt:runDirection_];
        [ct2 setSimpleColumnWithFloat:[((ComItextpdfTextRectangle *) nil_chk(signatureRect)) getLeft] withFloat:[signatureRect getBottom] withFloat:[signatureRect getRight] withFloat:[signatureRect getTop] withFloat:0 withInt:ComItextpdfTextElement_ALIGN_RIGHT];
        
#line 1019
        im = [ComItextpdfTextImage getInstanceWithComItextpdfTextImage:signatureGraphic_];
        [((ComItextpdfTextImage *) nil_chk(im)) scaleToFitWithFloat:[signatureRect getWidth] withFloat:[signatureRect getHeight]];
        
#line 1022
        p = [[ComItextpdfTextParagraph alloc] initWithFloat:[signatureRect getHeight]];
        
#line 1024
        x = ([signatureRect getWidth] - [im getScaledWidth]) / 2;
        y = ([signatureRect getHeight] - [im getScaledHeight]) / 2;
        [p addWithId:[[ComItextpdfTextChunk alloc] initWithComItextpdfTextImage:im withFloat:x withFloat:y withBoolean:NO]];
        [ct2 addElementWithComItextpdfTextElement:p];
        [ct2 go];
        break;
        default:
        ;
      }
    }
    
#line 1033
    if (renderingMode_ != ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_get_GRAPHIC()) {
      if (size <= 0) {
        ComItextpdfTextRectangle *sr = [[ComItextpdfTextRectangle alloc] initWithFloat:[((ComItextpdfTextRectangle *) nil_chk(dataRect)) getWidth] withFloat:[dataRect getHeight]];
        size = [ComItextpdfTextPdfColumnText fitTextWithComItextpdfTextFont:font withNSString:text withComItextpdfTextRectangle:sr withFloat:12 withInt:runDirection_];
      }
      ComItextpdfTextPdfColumnText *ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:t];
      [ct setRunDirectionWithInt:runDirection_];
      [ct setSimpleColumnWithComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithNSString:text withComItextpdfTextFont:font] withFloat:[((ComItextpdfTextRectangle *) nil_chk(dataRect)) getLeft] withFloat:[dataRect getBottom] withFloat:[dataRect getRight] withFloat:[dataRect getTop] withFloat:size withInt:ComItextpdfTextElement_ALIGN_LEFT];
      [ct go];
    }
  }
  if (IOSObjectArray_Get(app_, 3) == nil && !acro6Layers_) {
    ComItextpdfTextPdfPdfTemplate *t = IOSObjectArray_SetAndConsume(app_, 3, [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_]);
    [t setBoundingBoxWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:100 withFloat:100]];
    (void) [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:t withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"n3"]];
    [t setLiteralWithNSString:@"% DSBlank\n"];
  }
  if (IOSObjectArray_Get(app_, 4) == nil && !acro6Layers_) {
    ComItextpdfTextPdfPdfTemplate *t = IOSObjectArray_SetAndConsume(app_, 4, [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_]);
    [t setBoundingBoxWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:0 withFloat:[((ComItextpdfTextRectangle *) nil_chk(rect_)) getHeight] * (1 - ComItextpdfTextPdfPdfSignatureAppearance_TOP_SECTION) withFloat:[rect_ getRight] withFloat:[rect_ getTop]]];
    (void) [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:t withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"n4"]];
    ComItextpdfTextFont *font;
    if (layer2Font_ == nil)
#line 1056
    font = [[ComItextpdfTextFont alloc] init];
    else
#line 1058
    font = [[ComItextpdfTextFont alloc] initWithComItextpdfTextFont:layer2Font_];
    
#line 1060
    NSString *text = @"Signature Not Verified";
    if (layer4Text_ != nil)
#line 1062
    text = layer4Text_;
    ComItextpdfTextRectangle *sr = [[ComItextpdfTextRectangle alloc] initWithFloat:[rect_ getWidth] - 2 * ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:[rect_ getHeight] * ComItextpdfTextPdfPdfSignatureAppearance_TOP_SECTION - 2 * ComItextpdfTextPdfPdfSignatureAppearance_MARGIN];
    jfloat size = [ComItextpdfTextPdfColumnText fitTextWithComItextpdfTextFont:font withNSString:text withComItextpdfTextRectangle:sr withFloat:15 withInt:runDirection_];
    ComItextpdfTextPdfColumnText *ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:t];
    [ct setRunDirectionWithInt:runDirection_];
    [ct setSimpleColumnWithComItextpdfTextPhrase:[[ComItextpdfTextPhrase alloc] initWithNSString:text withComItextpdfTextFont:font] withFloat:ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:0 withFloat:[rect_ getWidth] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:[rect_ getHeight] - ComItextpdfTextPdfPdfSignatureAppearance_MARGIN withFloat:size withInt:ComItextpdfTextElement_ALIGN_LEFT];
    [ct go];
  }
  jint rotation = [((ComItextpdfTextPdfPdfReader *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_))->reader_)) getPageRotationWithInt:page_];
  ComItextpdfTextRectangle *rotated = [[ComItextpdfTextRectangle alloc] initWithComItextpdfTextRectangle:rect_];
  jint n = rotation;
  while (n > 0) {
    rotated = [rotated rotate];
    n -= 90;
  }
  if (frm_ == nil) {
    frm_ = [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
    [frm_ setBoundingBoxWithComItextpdfTextRectangle:rotated];
    (void) [writer_ addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:frm_ withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"FRM"]];
    jfloat scale_ = [JavaLangMath minWithFloat:[((ComItextpdfTextRectangle *) nil_chk(rect_)) getWidth] withFloat:[rect_ getHeight]] * 0.9f;
    jfloat x = ([rect_ getWidth] - scale_) / 2;
    jfloat y = ([rect_ getHeight] - scale_) / 2;
    scale_ /= 100;
    if (rotation == 90)
#line 1086
    [frm_ concatCTMWithFloat:0 withFloat:1 withFloat:-1 withFloat:0 withFloat:[rect_ getHeight] withFloat:0];
    else if (rotation == 180)
#line 1088
    [frm_ concatCTMWithFloat:-1 withFloat:0 withFloat:0 withFloat:-1 withFloat:[rect_ getWidth] withFloat:[rect_ getHeight]];
    else if (rotation == 270)
#line 1090
    [frm_ concatCTMWithFloat:0 withFloat:-1 withFloat:1 withFloat:0 withFloat:0 withFloat:[rect_ getWidth]];
    if (reuseAppearance_) {
      ComItextpdfTextPdfAcroFields *af = [writer_ getAcroFields];
      ComItextpdfTextPdfPdfIndirectReference *ref = [((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getNormalAppearanceWithNSString:[self getFieldName]];
      if (ref != nil) {
        [frm_ addTemplateReferenceWithComItextpdfTextPdfPdfIndirectReference:ref withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"n0"] withFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:0 withFloat:0];
      }
      else {
        reuseAppearance_ = NO;
        if (IOSObjectArray_Get(app_, 0) == nil) {
          [self createBlankN0];
        }
      }
    }
    if (!reuseAppearance_) {
      [frm_ addTemplateWithComItextpdfTextPdfPdfTemplate:IOSObjectArray_Get(app_, 0) withFloat:0 withFloat:0];
    }
    if (!acro6Layers_)
#line 1108
    [frm_ addTemplateWithComItextpdfTextPdfPdfTemplate:IOSObjectArray_Get(app_, 1) withFloat:scale_ withFloat:0 withFloat:0 withFloat:scale_ withFloat:x withFloat:y];
    [frm_ addTemplateWithComItextpdfTextPdfPdfTemplate:IOSObjectArray_Get(app_, 2) withFloat:0 withFloat:0];
    if (!acro6Layers_) {
      [frm_ addTemplateWithComItextpdfTextPdfPdfTemplate:IOSObjectArray_Get(app_, 3) withFloat:scale_ withFloat:0 withFloat:0 withFloat:scale_ withFloat:x withFloat:y];
      [frm_ addTemplateWithComItextpdfTextPdfPdfTemplate:IOSObjectArray_Get(app_, 4) withFloat:0 withFloat:0];
    }
  }
  ComItextpdfTextPdfPdfTemplate *napp = [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_];
  [napp setBoundingBoxWithComItextpdfTextRectangle:rotated];
  (void) [writer_ addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:napp withComItextpdfTextPdfPdfName:nil];
  [napp addTemplateWithComItextpdfTextPdfPdfTemplate:frm_ withFloat:0 withFloat:0];
  return napp;
}


#line 1122
- (void)createBlankN0 {
  
#line 1123
  ComItextpdfTextPdfPdfTemplate *t = IOSObjectArray_SetAndConsume(nil_chk(app_), 0, [[ComItextpdfTextPdfPdfTemplate alloc] initWithComItextpdfTextPdfPdfWriter:writer_]);
  [t setBoundingBoxWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:100 withFloat:100]];
  (void) [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) addDirectTemplateSimpleWithComItextpdfTextPdfPdfTemplate:t withComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"n0"]];
  [t setLiteralWithNSString:@"% DSBlank\n"];
}


#line 1140
- (ComItextpdfTextPdfPdfStamper *)getStamper {
  
#line 1141
  return stamper_;
}


#line 1148
- (void)setStamperWithComItextpdfTextPdfPdfStamper:(ComItextpdfTextPdfPdfStamper *)stamper {
  
#line 1149
  self->stamper_ = stamper;
}


#line 1161
- (ComItextpdfTextPdfByteBuffer *)getSigout {
  
#line 1162
  return sigout_;
}


#line 1168
- (void)setSigoutWithComItextpdfTextPdfByteBuffer:(ComItextpdfTextPdfByteBuffer *)sigout {
  
#line 1169
  self->sigout_ = sigout;
}


#line 1178
- (JavaIoOutputStream *)getOriginalout {
  
#line 1179
  return originalout_;
}


#line 1185
- (void)setOriginaloutWithJavaIoOutputStream:(JavaIoOutputStream *)originalout {
  
#line 1186
  self->originalout_ = originalout;
}


#line 1196
- (JavaIoFile *)getTempFile {
  
#line 1197
  return tempFile_;
}


#line 1204
- (void)setTempFileWithJavaIoFile:(JavaIoFile *)tempFile {
  
#line 1205
  self->tempFile_ = tempFile;
}


#line 1222
- (jboolean)isPreClosed {
  
#line 1223
  return preClosed_;
}


#line 1242
- (void)preCloseWithJavaUtilHashMap:(JavaUtilHashMap *)exclusionSizes {
  
#line 1243
  if (preClosed_)
#line 1244
  @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"document.already.pre.closed" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 1246
  preClosed_ = YES;
  ComItextpdfTextPdfAcroFields *af = [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_)) getAcroFields];
  NSString *name = [self getFieldName];
  jboolean fieldExists = !([self isInvisible] || [self isNewField]);
  ComItextpdfTextPdfPdfIndirectReference *refSig = [writer_ getPdfIndirectReference];
  [writer_ setSigFlagsWithInt:3];
  ComItextpdfTextPdfPdfDictionary *fieldLock = nil;
  if (fieldExists) {
    ComItextpdfTextPdfPdfDictionary *widget = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk([((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFieldItemWithNSString:name])) getWidgetWithInt:0];
    [writer_ markUsedWithComItextpdfTextPdfPdfObject:widget];
    fieldLock = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(widget)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LOCK_()];
    [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_P_() withComItextpdfTextPdfPdfObject:[writer_ getPageReferenceWithInt:[self getPage]]];
    [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:refSig];
    ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[widget getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()]];
    jint flags = 0;
    if (obj != nil && [obj isNumber])
#line 1262
    flags = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(obj, [ComItextpdfTextPdfPdfNumber class])) intValue];
    flags |= ComItextpdfTextPdfPdfAnnotation_FLAGS_LOCKED;
    [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:flags]];
    ComItextpdfTextPdfPdfDictionary *ap = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [ap putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfTemplate *) nil_chk([self getAppearance])) getIndirectReference]];
    [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_() withComItextpdfTextPdfPdfObject:ap];
  }
  else {
    ComItextpdfTextPdfPdfFormField *sigField = [ComItextpdfTextPdfPdfFormField createSignatureWithComItextpdfTextPdfPdfWriter:writer_];
    [((ComItextpdfTextPdfPdfFormField *) nil_chk(sigField)) setFieldNameWithNSString:name];
    [sigField putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:refSig];
    [sigField setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_LOCKED];
    
#line 1275
    jint pagen = [self getPage];
    if (![self isInvisible])
#line 1277
    [sigField setWidgetWithComItextpdfTextRectangle:[self getPageRect] withComItextpdfTextPdfPdfName:nil];
    else
#line 1279
    [sigField setWidgetWithComItextpdfTextRectangle:[[ComItextpdfTextRectangle alloc] initWithFloat:0 withFloat:0] withComItextpdfTextPdfPdfName:nil];
    [sigField setAppearanceWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_APPEARANCE_NORMAL_() withComItextpdfTextPdfPdfTemplate:[self getAppearance]];
    [sigField setPageWithInt:pagen];
    [writer_ addAnnotationWithComItextpdfTextPdfPdfAnnotation:sigField withInt:pagen];
  }
  
#line 1285
  exclusionLocations_ = [[JavaUtilHashMap alloc] init];
  if (cryptoDictionary_ == nil) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:@"No crypto dictionary defined."];
  }
  else {
    ComItextpdfTextPdfPdfLiteral *lit = [[ComItextpdfTextPdfPdfLiteral alloc] initWithInt:80];
    (void) [exclusionLocations_ putWithId:ComItextpdfTextPdfPdfName_get_BYTERANGE_() withId:lit];
    [cryptoDictionary_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BYTERANGE_() withComItextpdfTextPdfPdfObject:lit];
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(exclusionSizes)) entrySet])) {
      ComItextpdfTextPdfPdfName *key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      JavaLangInteger *v = [entry_ getValue];
      lit = [[ComItextpdfTextPdfPdfLiteral alloc] initWithInt:[((JavaLangInteger *) nil_chk(v)) intValue]];
      (void) [exclusionLocations_ putWithId:key withId:lit];
      [cryptoDictionary_ putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:lit];
    }
    if (certificationLevel_ > 0)
#line 1301
    [self addDocMDPWithComItextpdfTextPdfPdfDictionary:cryptoDictionary_];
    if (fieldLock != nil)
#line 1303
    [self addFieldMDPWithComItextpdfTextPdfPdfDictionary:cryptoDictionary_ withComItextpdfTextPdfPdfDictionary:fieldLock];
    if (signatureEvent_ != nil)
#line 1305
    [signatureEvent_ getSignatureDictionaryWithComItextpdfTextPdfPdfDictionary:cryptoDictionary_];
    (void) [writer_ addToBodyWithComItextpdfTextPdfPdfObject:cryptoDictionary_ withComItextpdfTextPdfPdfIndirectReference:refSig withBoolean:NO];
  }
  if (certificationLevel_ > 0) {
    
#line 1310
    ComItextpdfTextPdfPdfDictionary *docmdp = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [docmdp putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DocMDP"] withComItextpdfTextPdfPdfObject:refSig];
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(writer_->reader_)) getCatalog])) putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"Perms"] withComItextpdfTextPdfPdfObject:docmdp];
  }
  [writer_ closeWithJavaUtilMap:[((ComItextpdfTextPdfPdfStamper *) nil_chk(stamper_)) getMoreInfo]];
  
#line 1316
  range_ = [IOSLongArray arrayWithLength:[exclusionLocations_ size] * 2];
  jlong byteRangePosition = [((ComItextpdfTextPdfPdfLiteral *) nil_chk([exclusionLocations_ getWithId:ComItextpdfTextPdfPdfName_get_BYTERANGE_()])) getPosition];
  (void) [exclusionLocations_ removeWithId:ComItextpdfTextPdfPdfName_get_BYTERANGE_()];
  jint idx = 1;
  for (ComItextpdfTextPdfPdfLiteral * __strong lit in nil_chk([exclusionLocations_ values])) {
    jlong n = [((ComItextpdfTextPdfPdfLiteral *) nil_chk(lit)) getPosition];
    *IOSLongArray_GetRef(range_, idx++) = n;
    *IOSLongArray_GetRef(range_, idx++) = [lit getPosLength] + n;
  }
  [JavaUtilArrays sortWithLongArray:range_ withInt:1 withInt:range_->size_ - 1];
  for (jint k = 3; k < range_->size_ - 2; k += 2)
#line 1327
  *IOSLongArray_GetRef(range_, k) -= IOSLongArray_Get(range_, k - 1);
  
#line 1329
  if (tempFile_ == nil) {
    bout_ = [((ComItextpdfTextPdfByteBuffer *) nil_chk(sigout_)) getBuffer];
    boutLen_ = [sigout_ size];
    *IOSLongArray_GetRef(range_, range_->size_ - 1) = boutLen_ - IOSLongArray_Get(range_, range_->size_ - 2);
    ComItextpdfTextPdfByteBuffer *bf = [[ComItextpdfTextPdfByteBuffer alloc] init];
    (void) [bf appendWithChar:'['];
    for (jint k = 0; k < range_->size_; ++k)
#line 1336
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([bf appendWithLong:IOSLongArray_Get(range_, k)])) appendWithChar:' '];
    (void) [bf appendWithChar:']'];
    [JavaLangSystem arraycopyWithId:[bf getBuffer] withInt:0 withId:bout_ withInt:(jint) byteRangePosition withInt:[bf size]];
  }
  else {
    @try {
      raf_ = [[JavaIoRandomAccessFile alloc] initWithJavaIoFile:tempFile_ withNSString:@"rw"];
      jlong len = [raf_ length];
      *IOSLongArray_GetRef(range_, range_->size_ - 1) = len - IOSLongArray_Get(range_, range_->size_ - 2);
      ComItextpdfTextPdfByteBuffer *bf = [[ComItextpdfTextPdfByteBuffer alloc] init];
      (void) [bf appendWithChar:'['];
      for (jint k = 0; k < range_->size_; ++k)
#line 1348
      (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([bf appendWithLong:IOSLongArray_Get(range_, k)])) appendWithChar:' '];
      (void) [bf appendWithChar:']'];
      [raf_ seekWithLong:byteRangePosition];
      [raf_ writeWithByteArray:[bf getBuffer] withInt:0 withInt:[bf size]];
    }
    @catch (JavaIoIOException *e) {
      @try {
        
#line 1354
        [((JavaIoRandomAccessFile *) nil_chk(raf_)) close];
      }
      @catch (
#line 1354
      JavaLangException *ee) {
      }
      
#line 1355
      @try {
        
#line 1355
        [tempFile_ delete__];
      }
      @catch (
#line 1355
      JavaLangException *ee) {
      }
      
#line 1356
      @throw e;
    }
  }
}


#line 1367
- (void)addDocMDPWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)crypto {
  
#line 1368
  ComItextpdfTextPdfPdfDictionary *reference = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  ComItextpdfTextPdfPdfDictionary *transformParams = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [transformParams putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_P_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:certificationLevel_]];
  [transformParams putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"1.2"]];
  [transformParams putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TRANSFORMPARAMS_()];
  [reference putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANSFORMMETHOD_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DOCMDP_()];
  [reference putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_SIGREF_()];
  [reference putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANSFORMPARAMS_() withComItextpdfTextPdfPdfObject:transformParams];
  [reference putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DigestValue"] withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"aa"]];
  ComItextpdfTextPdfPdfArray *loc = [[ComItextpdfTextPdfPdfArray alloc] init];
  [loc addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
  [loc addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
  [reference putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DigestLocation"] withComItextpdfTextPdfPdfObject:loc];
  [reference putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DigestMethod"] withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"MD5"]];
  [reference putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DATA_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_))->reader_)) getTrailer])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()]];
  ComItextpdfTextPdfPdfArray *types = [[ComItextpdfTextPdfPdfArray alloc] init];
  [types addWithComItextpdfTextPdfPdfObject:reference];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(crypto)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REFERENCE_() withComItextpdfTextPdfPdfObject:types];
}


#line 1394
- (void)addFieldMDPWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)crypto
                   withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)fieldLock {
  
#line 1395
  ComItextpdfTextPdfPdfDictionary *reference = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  ComItextpdfTextPdfPdfDictionary *transformParams = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [transformParams putAllWithComItextpdfTextPdfPdfDictionary:fieldLock];
  [transformParams putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TRANSFORMPARAMS_()];
  [transformParams putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"1.2"]];
  [reference putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANSFORMMETHOD_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_FIELDMDP_()];
  [reference putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_SIGREF_()];
  [reference putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANSFORMPARAMS_() withComItextpdfTextPdfPdfObject:transformParams];
  [reference putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DigestValue"] withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"aa"]];
  ComItextpdfTextPdfPdfArray *loc = [[ComItextpdfTextPdfPdfArray alloc] init];
  [loc addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
  [loc addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
  [reference putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DigestLocation"] withComItextpdfTextPdfPdfObject:loc];
  [reference putWithComItextpdfTextPdfPdfName:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DigestMethod"] withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"MD5"]];
  [reference putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DATA_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_))->reader_)) getTrailer])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()]];
  ComItextpdfTextPdfPdfArray *types = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(crypto)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REFERENCE_()];
  if (types == nil)
#line 1412
  types = [[ComItextpdfTextPdfPdfArray alloc] init];
  [((ComItextpdfTextPdfPdfArray *) nil_chk(types)) addWithComItextpdfTextPdfPdfObject:reference];
  [crypto putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_REFERENCE_() withComItextpdfTextPdfPdfObject:types];
}


#line 1428
- (void)closeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)update {
  
#line 1429
  @try {
    if (!preClosed_)
#line 1431
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"preclose.must.be.called.first" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    ComItextpdfTextPdfByteBuffer *bf = [[ComItextpdfTextPdfByteBuffer alloc] init];
    for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(update)) getKeys])) {
      ComItextpdfTextPdfPdfObject *obj = [update getWithComItextpdfTextPdfPdfName:key];
      ComItextpdfTextPdfPdfLiteral *lit = [((JavaUtilHashMap *) nil_chk(exclusionLocations_)) getWithId:key];
      if (lit == nil)
#line 1437
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.key.1.didn.t.reserve.space.in.preclose" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((ComItextpdfTextPdfPdfName *) nil_chk(key)) description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
      [bf reset];
      [((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) toPdfWithComItextpdfTextPdfPdfWriter:nil withJavaIoOutputStream:bf];
      if ([bf size] > [((ComItextpdfTextPdfPdfLiteral *) nil_chk(lit)) getPosLength])
#line 1441
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.key.1.is.too.big.is.2.reserved.3" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((ComItextpdfTextPdfPdfName *) nil_chk(key)) description], [NSString valueOfInt:[bf size]], [NSString valueOfInt:[lit getPosLength]] } count:3 type:[IOSClass classWithClass:[NSObject class]]]]];
      if (tempFile_ == nil)
#line 1443
      [JavaLangSystem arraycopyWithId:[bf getBuffer] withInt:0 withId:bout_ withInt:(jint) [lit getPosition] withInt:[bf size]];
      else {
        [((JavaIoRandomAccessFile *) nil_chk(raf_)) seekWithLong:[lit getPosition]];
        [raf_ writeWithByteArray:[bf getBuffer] withInt:0 withInt:[bf size]];
      }
    }
    if ([update size] != [((JavaUtilHashMap *) nil_chk(exclusionLocations_)) size])
#line 1450
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.update.dictionary.has.less.keys.than.required" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    if (tempFile_ == nil) {
      [((JavaIoOutputStream *) nil_chk(originalout_)) writeWithByteArray:bout_ withInt:0 withInt:boutLen_];
    }
    else {
      if (originalout_ != nil) {
        [((JavaIoRandomAccessFile *) nil_chk(raf_)) seekWithLong:0];
        jlong length = [raf_ length];
        IOSByteArray *buf = [IOSByteArray arrayWithLength:8192];
        while (length > 0) {
          jint r = [raf_ readWithByteArray:buf withInt:0 withInt:(jint) [JavaLangMath minWithLong:(jlong) buf->size_ withLong:length]];
          if (r < 0)
#line 1462
          @throw [[JavaIoEOFException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unexpected.eof" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
          [originalout_ writeWithByteArray:buf withInt:0 withInt:r];
          length -= r;
        }
      }
    }
  }
  @finally {
    [((ComItextpdfTextPdfPdfReader *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) nil_chk(writer_))->reader_)) close];
    if (tempFile_ != nil) {
      @try {
        
#line 1472
        [((JavaIoRandomAccessFile *) nil_chk(raf_)) close];
      }
      @catch (
#line 1472
      JavaLangException *ee) {
      }
      
#line 1473
      if (originalout_ != nil)
#line 1474
      @try {
        
#line 1474
        [tempFile_ delete__];
      }
      @catch (
#line 1474
      JavaLangException *ee) {
      }
    }
    
#line 1476
    if (originalout_ != nil)
#line 1477
    @try {
      
#line 1477
      [originalout_ close];
    }
    @catch (
#line 1477
    JavaLangException *e) {
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfSignatureAppearance *)other {
  [super copyAllFieldsTo:other];
  other->acro6Layers_ = acro6Layers_;
  other->app_ = app_;
  other->bout_ = bout_;
  other->boutLen_ = boutLen_;
  other->certificationLevel_ = certificationLevel_;
  other->contact_ = contact_;
  other->cryptoDictionary_ = cryptoDictionary_;
  other->exclusionLocations_ = exclusionLocations_;
  other->fieldName_ = fieldName_;
  other->frm_ = frm_;
  other->image_ = image_;
  other->imageScale_ = imageScale_;
  other->layer2Font_ = layer2Font_;
  other->layer2Text_ = layer2Text_;
  other->layer4Text_ = layer4Text_;
  other->location_ = location_;
  other->locationCaption_ = locationCaption_;
  other->newField_ = newField_;
  other->originalout_ = originalout_;
  other->page_ = page_;
  other->pageRect_ = pageRect_;
  other->preClosed_ = preClosed_;
  other->raf_ = raf_;
  other->range_ = range_;
  other->reason_ = reason_;
  other->reasonCaption_ = reasonCaption_;
  other->rect_ = rect_;
  other->renderingMode_ = renderingMode_;
  other->reuseAppearance_ = reuseAppearance_;
  other->runDirection_ = runDirection_;
  other->signCertificate_ = signCertificate_;
  other->signDate_ = signDate_;
  other->signatureCreator_ = signatureCreator_;
  other->signatureEvent_ = signatureEvent_;
  other->signatureGraphic_ = signatureGraphic_;
  other->sigout_ = sigout_;
  other->stamper_ = stamper_;
  other->tempFile_ = tempFile_;
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfStamperImp:", "PdfSignatureAppearance", NULL, 0x0, NULL },
    { "setCertificationLevelWithInt:", "setCertificationLevel", "V", 0x1, NULL },
    { "getCertificationLevel", NULL, "I", 0x1, NULL },
    { "getReason", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setReasonWithNSString:", "setReason", "V", 0x1, NULL },
    { "setReasonCaptionWithNSString:", "setReasonCaption", "V", 0x1, NULL },
    { "getLocation", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setLocationWithNSString:", "setLocation", "V", 0x1, NULL },
    { "setLocationCaptionWithNSString:", "setLocationCaption", "V", 0x1, NULL },
    { "getSignatureCreator", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setSignatureCreatorWithNSString:", "setSignatureCreator", "V", 0x1, NULL },
    { "getContact", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setContactWithNSString:", "setContact", "V", 0x1, NULL },
    { "getSignDate", NULL, "Ljava.util.Calendar;", 0x1, NULL },
    { "setSignDateWithJavaUtilCalendar:", "setSignDate", "V", 0x1, NULL },
    { "getRangeStream", NULL, "Ljava.io.InputStream;", 0x1, "Ljava.io.IOException;" },
    { "getUnderlyingSource", NULL, "Lcom.itextpdf.text.io.RandomAccessSource;", 0x2, "Ljava.io.IOException;" },
    { "addDeveloperExtensionWithComItextpdfTextPdfPdfDeveloperExtension:", "addDeveloperExtension", "V", 0x1, NULL },
    { "getCryptoDictionary", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "setCryptoDictionaryWithComItextpdfTextPdfPdfDictionary:", "setCryptoDictionary", "V", 0x1, NULL },
    { "setCertificateWithJavaSecurityCertCertificate:", "setCertificate", "V", 0x1, NULL },
    { "getCertificate", NULL, "Ljava.security.cert.Certificate;", 0x1, NULL },
    { "getSignatureEvent", NULL, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance$SignatureEvent;", 0x1, NULL },
    { "setSignatureEventWithComItextpdfTextPdfPdfSignatureAppearance_SignatureEvent:", "setSignatureEvent", "V", 0x1, NULL },
    { "getFieldName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getNewSigName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "isNewField", NULL, "Z", 0x1, NULL },
    { "getPage", NULL, "I", 0x1, NULL },
    { "getRect", NULL, "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "getPageRect", NULL, "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "isInvisible", NULL, "Z", 0x1, NULL },
    { "setVisibleSignatureWithComItextpdfTextRectangle:withInt:withNSString:", "setVisibleSignature", "V", 0x1, NULL },
    { "setVisibleSignatureWithNSString:", "setVisibleSignature", "V", 0x1, NULL },
    { "getRenderingMode", NULL, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance$RenderingMode;", 0x1, NULL },
    { "setRenderingModeWithComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum:", "setRenderingMode", "V", 0x1, NULL },
    { "getSignatureGraphic", NULL, "Lcom.itextpdf.text.Image;", 0x1, NULL },
    { "setSignatureGraphicWithComItextpdfTextImage:", "setSignatureGraphic", "V", 0x1, NULL },
    { "isAcro6Layers", NULL, "Z", 0x1, NULL },
    { "setAcro6LayersWithBoolean:", "setAcro6Layers", "V", 0x1, NULL },
    { "getLayerWithInt:", "getLayer", "Lcom.itextpdf.text.pdf.PdfTemplate;", 0x1, NULL },
    { "setReuseAppearanceWithBoolean:", "setReuseAppearance", "V", 0x1, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x1, NULL },
    { "setImageWithComItextpdfTextImage:", "setImage", "V", 0x1, NULL },
    { "getImageScale", NULL, "F", 0x1, NULL },
    { "setImageScaleWithFloat:", "setImageScale", "V", 0x1, NULL },
    { "setLayer2TextWithNSString:", "setLayer2Text", "V", 0x1, NULL },
    { "getLayer2Text", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getLayer2Font", NULL, "Lcom.itextpdf.text.Font;", 0x1, NULL },
    { "setLayer2FontWithComItextpdfTextFont:", "setLayer2Font", "V", 0x1, NULL },
    { "setRunDirectionWithInt:", "setRunDirection", "V", 0x1, NULL },
    { "getRunDirection", NULL, "I", 0x1, NULL },
    { "setLayer4TextWithNSString:", "setLayer4Text", "V", 0x1, NULL },
    { "getLayer4Text", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getTopLayer", NULL, "Lcom.itextpdf.text.pdf.PdfTemplate;", 0x1, NULL },
    { "getAppearance", NULL, "Lcom.itextpdf.text.pdf.PdfTemplate;", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "createBlankN0", NULL, "V", 0x2, NULL },
    { "getStamper", NULL, "Lcom.itextpdf.text.pdf.PdfStamper;", 0x1, NULL },
    { "setStamperWithComItextpdfTextPdfPdfStamper:", "setStamper", "V", 0x0, NULL },
    { "getSigout", NULL, "Lcom.itextpdf.text.pdf.ByteBuffer;", 0x0, NULL },
    { "setSigoutWithComItextpdfTextPdfByteBuffer:", "setSigout", "V", 0x0, NULL },
    { "getOriginalout", NULL, "Ljava.io.OutputStream;", 0x0, NULL },
    { "setOriginaloutWithJavaIoOutputStream:", "setOriginalout", "V", 0x0, NULL },
    { "getTempFile", NULL, "Ljava.io.File;", 0x1, NULL },
    { "setTempFileWithJavaIoFile:", "setTempFile", "V", 0x0, NULL },
    { "isPreClosed", NULL, "Z", 0x1, NULL },
    { "preCloseWithJavaUtilHashMap:", "preClose", "V", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "addDocMDPWithComItextpdfTextPdfPdfDictionary:", "addDocMDP", "V", 0x2, NULL },
    { "addFieldMDPWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfDictionary:", "addFieldMDP", "V", 0x2, NULL },
    { "closeWithComItextpdfTextPdfPdfDictionary:", "close", "V", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_CERTIFIED_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfSignatureAppearance_NOT_CERTIFIED },
    { "CERTIFIED_NO_CHANGES_ALLOWED_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfSignatureAppearance_CERTIFIED_NO_CHANGES_ALLOWED },
    { "CERTIFIED_FORM_FILLING_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfSignatureAppearance_CERTIFIED_FORM_FILLING },
    { "CERTIFIED_FORM_FILLING_AND_ANNOTATIONS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfSignatureAppearance_CERTIFIED_FORM_FILLING_AND_ANNOTATIONS },
    { "certificationLevel_", NULL, 0x2, "I", NULL,  },
    { "reasonCaption_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "locationCaption_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "reason_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "location_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "signDate_", NULL, 0x2, "Ljava.util.Calendar;", NULL,  },
    { "signatureCreator_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "contact_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "raf_", NULL, 0x2, "Ljava.io.RandomAccessFile;", NULL,  },
    { "bout_", NULL, 0x2, "[B", NULL,  },
    { "range_", NULL, 0x2, "[J", NULL,  },
    { "signCertificate_", NULL, 0x2, "Ljava.security.cert.Certificate;", NULL,  },
    { "cryptoDictionary_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "signatureEvent_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance$SignatureEvent;", NULL,  },
    { "fieldName_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "newField_", NULL, 0x2, "Z", NULL,  },
    { "page_", NULL, 0x2, "I", NULL,  },
    { "rect_", NULL, 0x2, "Lcom.itextpdf.text.Rectangle;", NULL,  },
    { "pageRect_", NULL, 0x2, "Lcom.itextpdf.text.Rectangle;", NULL,  },
    { "renderingMode_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance$RenderingMode;", NULL,  },
    { "signatureGraphic_", NULL, 0x2, "Lcom.itextpdf.text.Image;", NULL,  },
    { "acro6Layers_", NULL, 0x2, "Z", NULL,  },
    { "app_", NULL, 0x2, "[Lcom.itextpdf.text.pdf.PdfTemplate;", NULL,  },
    { "reuseAppearance_", NULL, 0x2, "Z", NULL,  },
    { "questionMark_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfPdfSignatureAppearance_questionMark_,  },
    { "image_", NULL, 0x2, "Lcom.itextpdf.text.Image;", NULL,  },
    { "imageScale_", NULL, 0x2, "F", NULL,  },
    { "layer2Text_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "layer2Font_", NULL, 0x2, "Lcom.itextpdf.text.Font;", NULL,  },
    { "runDirection_", NULL, 0x2, "I", NULL,  },
    { "layer4Text_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "frm_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfTemplate;", NULL,  },
    { "TOP_SECTION_", NULL, 0x1a, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfSignatureAppearance_TOP_SECTION },
    { "MARGIN_", NULL, 0x1a, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfSignatureAppearance_MARGIN },
    { "stamper_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfStamper;", NULL,  },
    { "writer_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfStamperImp;", NULL,  },
    { "sigout_", NULL, 0x2, "Lcom.itextpdf.text.pdf.ByteBuffer;", NULL,  },
    { "originalout_", NULL, 0x2, "Ljava.io.OutputStream;", NULL,  },
    { "tempFile_", NULL, 0x2, "Ljava.io.File;", NULL,  },
    { "exclusionLocations_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "boutLen_", NULL, 0x2, "I", NULL,  },
    { "preClosed_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfSignatureAppearance = { "PdfSignatureAppearance", "com.itextpdf.text.pdf", NULL, 0x1, 69, methods, 46, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfSignatureAppearance;
}

@end

@interface ComItextpdfTextPdfPdfSignatureAppearance_SignatureEvent : NSObject
@end

@implementation ComItextpdfTextPdfPdfSignatureAppearance_SignatureEvent

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSignatureDictionaryWithComItextpdfTextPdfPdfDictionary:", "getSignatureDictionary", "V", 0x401, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfSignatureAppearance_SignatureEvent = { "SignatureEvent", "com.itextpdf.text.pdf", "PdfSignatureAppearance", 0x201, 1, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfPdfSignatureAppearance_SignatureEvent;
}

@end


#line 548

BOOL ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_initialized = NO;

ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum *ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_values_[4];

@implementation ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

FOUNDATION_EXPORT IOSObjectArray *ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_values() {
  return [IOSObjectArray arrayWithObjects:ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_values_ count:4 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum class]]];
}
+ (IOSObjectArray *)values {
  return ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_values();
}

+ (ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum *)valueOfWithNSString:(NSString *)name {
  return ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_valueOfWithNSString_(name);
}

ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum *ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_valueOfWithNSString_(NSString *name) {
  for (int i = 0; i < 4; i++) {
    ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum *e = ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum class]) {
    ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_DESCRIPTION = [[ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum alloc] initWithNSString:@"DESCRIPTION" withInt:0];
    ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_NAME_AND_DESCRIPTION = [[ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum alloc] initWithNSString:@"NAME_AND_DESCRIPTION" withInt:1];
    ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_GRAPHIC_AND_DESCRIPTION = [[ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum alloc] initWithNSString:@"GRAPHIC_AND_DESCRIPTION" withInt:2];
    ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_GRAPHIC = [[ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum alloc] initWithNSString:@"GRAPHIC" withInt:3];
    ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "init", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DESCRIPTION", "DESCRIPTION", 0x4019, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance$RenderingMode;", &ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_DESCRIPTION,  },
    { "NAME_AND_DESCRIPTION", "NAME_AND_DESCRIPTION", 0x4019, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance$RenderingMode;", &ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_NAME_AND_DESCRIPTION,  },
    { "GRAPHIC_AND_DESCRIPTION", "GRAPHIC_AND_DESCRIPTION", 0x4019, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance$RenderingMode;", &ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_GRAPHIC_AND_DESCRIPTION,  },
    { "GRAPHIC", "GRAPHIC", 0x4019, "Lcom.itextpdf.text.pdf.PdfSignatureAppearance$RenderingMode;", &ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum_GRAPHIC,  },
  };
  static const char *superclass_type_args[] = {"Lcom.itextpdf.text.pdf.PdfSignatureAppearance$RenderingMode;"};
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum = { "RenderingMode", "com.itextpdf.text.pdf", "PdfSignatureAppearance", 0x4019, 1, methods, 4, fields, 1, superclass_type_args};
  return &_ComItextpdfTextPdfPdfSignatureAppearance_RenderingModeEnum;
}

@end
