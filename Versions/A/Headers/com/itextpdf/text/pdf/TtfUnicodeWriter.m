//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TtfUnicodeWriter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TtfUnicodeWriter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/CFFFontSubset.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/TrueTypeFontUnicode.h"
#include "com/itextpdf/text/pdf/TtfUnicodeWriter.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"


#line 54
@implementation ComItextpdfTextPdfTtfUnicodeWriter


#line 58
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  if (self = [super init]) {
    writer_ =
#line 56
    nil;
    
#line 59
    self->writer_ = writer;
  }
  return self;
}


#line 62
- (void)writeFontWithComItextpdfTextPdfTrueTypeFontUnicode:(ComItextpdfTextPdfTrueTypeFontUnicode *)font
                withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                                         withNSObjectArray:(IOSObjectArray *)params
                                             withByteArray:(IOSByteArray *)rotbits {
  
#line 63
  JavaUtilHashMap *longTag = (JavaUtilHashMap *) check_class_cast(IOSObjectArray_Get(nil_chk(params), 0), [JavaUtilHashMap class]);
  [font addRangeUniWithJavaUtilHashMap:longTag withBoolean:YES withBoolean:((ComItextpdfTextPdfTrueTypeFontUnicode *) nil_chk(font))->subset_];
  IOSObjectArray *metrics = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(longTag)) values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSIntArray iosClass]]];
  [JavaUtilArrays sortWithNSObjectArray:metrics withJavaUtilComparator:font];
  ComItextpdfTextPdfPdfIndirectReference *ind_font = nil;
  ComItextpdfTextPdfPdfObject *pobj = nil;
  ComItextpdfTextPdfPdfIndirectObject *obj = nil;
  
#line 71
  if (font->cff_) {
    IOSByteArray *b = [font readCffFont];
    if (font->subset_ || font->subsetRanges_ != nil) {
      ComItextpdfTextPdfCFFFontSubset *cff = [[ComItextpdfTextPdfCFFFontSubset alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithByteArray:b] withJavaUtilHashMap:longTag];
      b = [cff ProcessWithNSString:IOSObjectArray_Get(nil_chk([cff getNames]), 0)];
    }
    pobj = [[ComItextpdfTextPdfBaseFont_StreamFont alloc] initWithByteArray:b withNSString:@"CIDFontType0C" withInt:font->compressionLevel_];
    obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:pobj];
    ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  else {
    
#line 81
    IOSByteArray *b;
    if (font->subset_ || font->directoryOffset_ != 0) {
      b = [font getSubSetWithJavaUtilHashSet:[[JavaUtilHashSet alloc] initWithJavaUtilCollection:[longTag keySet]] withBoolean:YES];
    }
    else {
      b = [font getFullFont];
    }
    IOSIntArray *lengths = [IOSIntArray arrayWithInts:(jint[]){ ((IOSByteArray *) nil_chk(b))->size_ } count:1];
    pobj = [[ComItextpdfTextPdfBaseFont_StreamFont alloc] initWithByteArray:b withIntArray:lengths withInt:font->compressionLevel_];
    obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:pobj];
    ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  NSString *subsetPrefix = @"";
  if (font->subset_)
#line 95
  subsetPrefix = [ComItextpdfTextPdfBaseFont createSubsetPrefix];
  ComItextpdfTextPdfPdfDictionary *dic = [font getFontDescriptorWithComItextpdfTextPdfPdfIndirectReference:ind_font withNSString:subsetPrefix withComItextpdfTextPdfPdfIndirectReference:nil];
  obj = [((ComItextpdfTextPdfPdfWriter *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:dic];
  ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  
#line 100
  pobj = [font getCIDFontType2WithComItextpdfTextPdfPdfIndirectReference:ind_font withNSString:subsetPrefix withNSObjectArray:metrics];
  obj = [writer_ addToBodyWithComItextpdfTextPdfPdfObject:pobj];
  ind_font = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  
#line 104
  pobj = [font getToUnicodeWithNSObjectArray:metrics];
  ComItextpdfTextPdfPdfIndirectReference *toUnicodeRef = nil;
  
#line 107
  if (pobj != nil) {
    obj = [writer_ addToBodyWithComItextpdfTextPdfPdfObject:pobj];
    toUnicodeRef = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(obj)) getIndirectReference];
  }
  
#line 112
  pobj = [font getFontBaseTypeWithComItextpdfTextPdfPdfIndirectReference:ind_font withNSString:subsetPrefix withComItextpdfTextPdfPdfIndirectReference:toUnicodeRef];
  (void) [writer_ addToBodyWithComItextpdfTextPdfPdfObject:pobj withComItextpdfTextPdfPdfIndirectReference:ref];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfTtfUnicodeWriter *)other {
  [super copyAllFieldsTo:other];
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:", "TtfUnicodeWriter", NULL, 0x1, NULL },
    { "writeFontWithComItextpdfTextPdfTrueTypeFontUnicode:withComItextpdfTextPdfPdfIndirectReference:withNSObjectArray:withByteArray:", "writeFont", "V", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfTtfUnicodeWriter = { "TtfUnicodeWriter", "com.itextpdf.text.pdf", NULL, 0x1, 2, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfTtfUnicodeWriter;
}

@end
