//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/TiffImage.java
//

#ifndef _ComItextpdfTextPdfCodecTiffImage_H_
#define _ComItextpdfTextPdfCodecTiffImage_H_

@class ComItextpdfTextImage;
@class ComItextpdfTextPdfCodecTIFFDirectory;
@class ComItextpdfTextPdfCodecTIFFField;
@class ComItextpdfTextPdfRandomAccessFileOrArray;
@class IOSByteArray;
@class IOSLongArray;
@class JavaUtilZipDeflaterOutputStream;

#import "JreEmulation.h"

@interface ComItextpdfTextPdfCodecTiffImage : NSObject {
}

+ (jint)getNumberOfPagesWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s;

+ (jint)getDpiWithComItextpdfTextPdfCodecTIFFField:(ComItextpdfTextPdfCodecTIFFField *)fd
                                           withInt:(jint)resolutionUnit;

+ (ComItextpdfTextImage *)getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s
                                                                        withBoolean:(jboolean)recoverFromImageError
                                                                            withInt:(jint)page
                                                                        withBoolean:(jboolean)direct;

+ (ComItextpdfTextImage *)getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s
                                                                        withBoolean:(jboolean)recoverFromImageError
                                                                            withInt:(jint)page;

+ (ComItextpdfTextImage *)getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s
                                                                            withInt:(jint)page;

+ (ComItextpdfTextImage *)getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s
                                                                            withInt:(jint)page
                                                                        withBoolean:(jboolean)direct;

+ (ComItextpdfTextImage *)getTiffImageColorWithComItextpdfTextPdfCodecTIFFDirectory:(ComItextpdfTextPdfCodecTIFFDirectory *)dir
                                      withComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s;

+ (ComItextpdfTextImage *)ProcessExtraSamplesWithJavaUtilZipDeflaterOutputStream:(JavaUtilZipDeflaterOutputStream *)zip
                                             withJavaUtilZipDeflaterOutputStream:(JavaUtilZipDeflaterOutputStream *)mzip
                                                                   withByteArray:(IOSByteArray *)outBuf
                                                                         withInt:(jint)samplePerPixel
                                                                         withInt:(jint)bitsPerSample
                                                                         withInt:(jint)width
                                                                         withInt:(jint)height;

+ (IOSLongArray *)getArrayLongShortWithComItextpdfTextPdfCodecTIFFDirectory:(ComItextpdfTextPdfCodecTIFFDirectory *)dir
                                                                    withInt:(jint)tag;

+ (void)decodePackbitsWithByteArray:(IOSByteArray *)data
                      withByteArray:(IOSByteArray *)dst;

+ (void)inflateWithByteArray:(IOSByteArray *)deflated
               withByteArray:(IOSByteArray *)inflated;

+ (void)applyPredictorWithByteArray:(IOSByteArray *)uncompData
                            withInt:(jint)predictor
                            withInt:(jint)w
                            withInt:(jint)h
                            withInt:(jint)samplesPerPixel;

- (instancetype)init;

@end

__attribute__((always_inline)) inline void ComItextpdfTextPdfCodecTiffImage_init() {}

#endif // _ComItextpdfTextPdfCodecTiffImage_H_
