//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/TIFFDirectory.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/TIFFDirectory.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/codec/TIFFDirectory.h"
#include "com/itextpdf/text/pdf/codec/TIFFField.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"

BOOL ComItextpdfTextPdfCodecTIFFDirectory_initialized = NO;


#line 78
@implementation ComItextpdfTextPdfCodecTIFFDirectory

IOSIntArray * ComItextpdfTextPdfCodecTIFFDirectory_sizeOfType_;


#line 101
- (instancetype)init {
  if (self = [super init]) {
    fieldIndex_ =
#line 92
    [[JavaUtilHashtable alloc] init];
    IFDOffset_ =
#line 95
    8;
    nextIFDOffset_ =
#line 98
    0;
  }
  return self;
}


#line 103
+ (jboolean)isValidEndianTagWithInt:(jint)endian {
  
#line 104
  return endian == (jint) 0x4949 || endian == (jint) 0x4d4d;
}


#line 117
- (instancetype)initWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream
                                                          withInt:(jint)directory {
  if (self = [super init]) {
    fieldIndex_ =
#line 92
    [[JavaUtilHashtable alloc] init];
    IFDOffset_ =
#line 95
    8;
    nextIFDOffset_ =
#line 98
    0;
    
#line 120
    jlong global_save_offset = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) getFilePointer];
    
#line 121
    jlong ifd_offset;
    
#line 124
    [stream seekWithLong:0LL];
    
#line 125
    jint endian = [stream readUnsignedShort];
    
#line 126
    if (![ComItextpdfTextPdfCodecTIFFDirectory isValidEndianTagWithInt:endian]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"bad.endianness.tag.not.0x4949.or.0x4d4d" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    
#line 129
    isBigEndian__ = (endian == (jint) 0x4d4d);
    
#line 131
    jint magic = [self readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
    
#line 132
    if (magic != 42) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"bad.magic.number.should.be.42" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    
#line 137
    ifd_offset = [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
    
#line 139
    for (jint i = 0; i < directory; i++) {
      if (ifd_offset == 0LL) {
        @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"directory.number.too.large" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
      
#line 144
      [stream seekWithLong:ifd_offset];
      jint entries = [self readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
      [stream skipWithLong:12 * entries];
      
#line 148
      ifd_offset = [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
    }
    
#line 151
    [stream seekWithLong:ifd_offset];
    
#line 152
    [self initialize__WithComItextpdfTextPdfRandomAccessFileOrArray:stream];
    
#line 153
    [stream seekWithLong:global_save_offset];
  }
  return self;
}


#line 169
- (instancetype)initWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream
                                                         withLong:(jlong)ifd_offset
                                                          withInt:(jint)directory {
  if (self = [super init]) {
    fieldIndex_ =
#line 92
    [[JavaUtilHashtable alloc] init];
    IFDOffset_ =
#line 95
    8;
    nextIFDOffset_ =
#line 98
    0;
    
#line 172
    jlong global_save_offset = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) getFilePointer];
    
#line 173
    [stream seekWithLong:0LL];
    
#line 174
    jint endian = [stream readUnsignedShort];
    
#line 175
    if (![ComItextpdfTextPdfCodecTIFFDirectory isValidEndianTagWithInt:endian]) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"bad.endianness.tag.not.0x4949.or.0x4d4d" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    
#line 178
    isBigEndian__ = (endian == (jint) 0x4d4d);
    
#line 181
    [stream seekWithLong:ifd_offset];
    
#line 184
    jint dirNum = 0;
    
#line 185
    while (dirNum < directory) {
      
#line 187
      jint numEntries = [self readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
      
#line 190
      [stream seekWithLong:ifd_offset + 12 * numEntries];
      
#line 193
      ifd_offset = [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
      
#line 196
      [stream seekWithLong:ifd_offset];
      
#line 199
      dirNum++;
    }
    
#line 202
    [self initialize__WithComItextpdfTextPdfRandomAccessFileOrArray:stream];
    
#line 203
    [stream seekWithLong:global_save_offset];
  }
  return self;
}


#line 222
- (void)initialize__WithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 223
  jlong nextTagOffset = 0LL;
  jlong maxOffset = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) length];
  jint i, j;
  
#line 227
  IFDOffset_ = [stream getFilePointer];
  
#line 229
  numEntries_ = [self readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
  fields_ = [IOSObjectArray arrayWithLength:numEntries_ type:[IOSClass classWithClass:[ComItextpdfTextPdfCodecTIFFField class]]];
  
#line 232
  for (i = 0; i < numEntries_ && nextTagOffset < maxOffset; i++) {
    jint tag = [self readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
    jint type = [self readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
    jint count = (jint) [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
    jboolean processTag = YES;
    
#line 239
    nextTagOffset = [stream getFilePointer] + 4;
    
#line 241
    @try {
      
#line 244
      if (count * IOSIntArray_Get(nil_chk(ComItextpdfTextPdfCodecTIFFDirectory_sizeOfType_), type) > 4) {
        jlong valueOffset = [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
        
#line 248
        if (valueOffset < maxOffset) {
          [stream seekWithLong:valueOffset];
        }
        else {
          
#line 253
          processTag = NO;
        }
      }
    }
    @catch (
#line 256
    JavaLangArrayIndexOutOfBoundsException *ae) {
      
#line 258
      processTag = NO;
    }
    
#line 261
    if (processTag) {
      (void) [((JavaUtilHashtable *) nil_chk(fieldIndex_)) putWithId:[JavaLangInteger valueOfWithInt:tag] withId:[JavaLangInteger valueOfWithInt:i]];
      id obj = nil;
      {
        
#line 270
        IOSByteArray *bvalues;
        
#line 303
        IOSCharArray *cvalues;
        
#line 311
        IOSLongArray *lvalues;
        
#line 319
        IOSObjectArray *llvalues;
        
#line 328
        IOSShortArray *svalues;
        
#line 336
        IOSIntArray *ivalues;
        
#line 344
        IOSObjectArray *iivalues;
        
#line 353
        IOSFloatArray *fvalues;
        
#line 361
        IOSDoubleArray *dvalues;
        
#line 265
        switch (type) {
          case ComItextpdfTextPdfCodecTIFFField_TIFF_BYTE:
          case ComItextpdfTextPdfCodecTIFFField_TIFF_SBYTE:
          case ComItextpdfTextPdfCodecTIFFField_TIFF_UNDEFINED:
          case ComItextpdfTextPdfCodecTIFFField_TIFF_ASCII:
          bvalues = [IOSByteArray arrayWithLength:count];
          [stream readFullyWithByteArray:bvalues withInt:0 withInt:count];
          
#line 273
          if (type == ComItextpdfTextPdfCodecTIFFField_TIFF_ASCII) {
            
#line 276
            jint index = 0, prevIndex = 0;
            JavaUtilArrayList *v = [[JavaUtilArrayList alloc] init];
            
#line 279
            while (index < count) {
              
#line 281
              while (index < count && IOSByteArray_Get(bvalues, index++) != 0) ;
              
#line 284
              [v addWithId:[NSString stringWithBytes:bvalues offset:prevIndex length:
#line 285
              (index - prevIndex)]];
              prevIndex = index;
            }
            
#line 289
            count = [v size];
            IOSObjectArray *strings = [IOSObjectArray arrayWithLength:count type:[IOSClass classWithClass:[NSString class]]];
            for (jint c = 0; c < count; c++) {
              IOSObjectArray_Set(strings, c, [v getWithInt:c]);
            }
            
#line 295
            obj = strings;
          }
          else {
            
#line 297
            obj = bvalues;
          }
          
#line 300
          break;
          
#line 302
          case ComItextpdfTextPdfCodecTIFFField_TIFF_SHORT:
          cvalues = [IOSCharArray arrayWithLength:count];
          for (j = 0; j < count; j++) {
            *IOSCharArray_GetRef(cvalues, j) = (jchar) [self readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
          }
          obj = cvalues;
          break;
          
#line 310
          case ComItextpdfTextPdfCodecTIFFField_TIFF_LONG:
          lvalues = [IOSLongArray arrayWithLength:count];
          for (j = 0; j < count; j++) {
            *IOSLongArray_GetRef(lvalues, j) = [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
          }
          obj = lvalues;
          break;
          
#line 318
          case ComItextpdfTextPdfCodecTIFFField_TIFF_RATIONAL:
          llvalues = [IOSLongArray arrayWithDimensions:2 lengths:(jint[]){ count, 2 }];
          for (j = 0; j < count; j++) {
            *IOSLongArray_GetRef(nil_chk(IOSObjectArray_Get(llvalues, j)), 0) = [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
            *IOSLongArray_GetRef(nil_chk(IOSObjectArray_Get(llvalues, j)), 1) = [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
          }
          obj = llvalues;
          break;
          
#line 327
          case ComItextpdfTextPdfCodecTIFFField_TIFF_SSHORT:
          svalues = [IOSShortArray arrayWithLength:count];
          for (j = 0; j < count; j++) {
            *IOSShortArray_GetRef(svalues, j) = [self readShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
          }
          obj = svalues;
          break;
          
#line 335
          case ComItextpdfTextPdfCodecTIFFField_TIFF_SLONG:
          ivalues = [IOSIntArray arrayWithLength:count];
          for (j = 0; j < count; j++) {
            *IOSIntArray_GetRef(ivalues, j) = [self readIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
          }
          obj = ivalues;
          break;
          
#line 343
          case ComItextpdfTextPdfCodecTIFFField_TIFF_SRATIONAL:
          iivalues = [IOSIntArray arrayWithDimensions:2 lengths:(jint[]){ count, 2 }];
          for (j = 0; j < count; j++) {
            *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(iivalues, j)), 0) = [self readIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
            *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(iivalues, j)), 1) = [self readIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
          }
          obj = iivalues;
          break;
          
#line 352
          case ComItextpdfTextPdfCodecTIFFField_TIFF_FLOAT:
          fvalues = [IOSFloatArray arrayWithLength:count];
          for (j = 0; j < count; j++) {
            *IOSFloatArray_GetRef(fvalues, j) = [self readFloatWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
          }
          obj = fvalues;
          break;
          
#line 360
          case ComItextpdfTextPdfCodecTIFFField_TIFF_DOUBLE:
          dvalues = [IOSDoubleArray arrayWithLength:count];
          for (j = 0; j < count; j++) {
            *IOSDoubleArray_GetRef(dvalues, j) = [self readDoubleWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
          }
          obj = dvalues;
          break;
          
#line 368
          default:
          break;
        }
      }
      IOSObjectArray_SetAndConsume(fields_, i, [[ComItextpdfTextPdfCodecTIFFField alloc] initWithInt:tag withInt:type withInt:count withId:obj]);
    }
    
#line 375
    [stream seekWithLong:nextTagOffset];
  }
  
#line 379
  @try {
    nextIFDOffset_ = [self readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream];
  }
  @catch (JavaLangException *e) {
    
#line 384
    nextIFDOffset_ = 0;
  }
}


#line 389
- (jint)getNumEntries {
  
#line 390
  return numEntries_;
}


#line 397
- (ComItextpdfTextPdfCodecTIFFField *)getFieldWithInt:(jint)tag {
  
#line 398
  JavaLangInteger *i = [((JavaUtilHashtable *) nil_chk(fieldIndex_)) getWithId:[JavaLangInteger valueOfWithInt:tag]];
  if (i == nil) {
    return nil;
  }
  else {
    
#line 402
    return IOSObjectArray_Get(nil_chk(fields_), [i intValue]);
  }
}


#line 409
- (jboolean)isTagPresentWithInt:(jint)tag {
  
#line 410
  return [((JavaUtilHashtable *) nil_chk(fieldIndex_)) containsKeyWithId:[JavaLangInteger valueOfWithInt:tag]];
}


#line 417
- (IOSIntArray *)getTags {
  
#line 418
  IOSIntArray *tags = [IOSIntArray arrayWithLength:[((JavaUtilHashtable *) nil_chk(fieldIndex_)) size]];
  id<JavaUtilEnumeration> e = [fieldIndex_ keys];
  jint i = 0;
  
#line 422
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    *IOSIntArray_GetRef(tags, i++) = [((JavaLangInteger *) nil_chk([e nextElement])) intValue];
  }
  
#line 426
  return tags;
}

- (IOSObjectArray *)getFields {
  
#line 434
  return fields_;
}


#line 443
- (jbyte)getFieldAsByteWithInt:(jint)tag
                       withInt:(jint)index {
  
#line 444
  JavaLangInteger *i = [((JavaUtilHashtable *) nil_chk(fieldIndex_)) getWithId:[JavaLangInteger valueOfWithInt:tag]];
  IOSByteArray *b = [((ComItextpdfTextPdfCodecTIFFField *) nil_chk(IOSObjectArray_Get(nil_chk(fields_), [((JavaLangInteger *) nil_chk(i)) intValue]))) getAsBytes];
  return IOSByteArray_Get(nil_chk(b), index);
}


#line 455
- (jbyte)getFieldAsByteWithInt:(jint)tag {
  
#line 456
  return [self getFieldAsByteWithInt:tag withInt:0];
}


#line 465
- (jlong)getFieldAsLongWithInt:(jint)tag
                       withInt:(jint)index {
  
#line 466
  JavaLangInteger *i = [((JavaUtilHashtable *) nil_chk(fieldIndex_)) getWithId:[JavaLangInteger valueOfWithInt:tag]];
  return [((ComItextpdfTextPdfCodecTIFFField *) nil_chk(IOSObjectArray_Get(nil_chk(fields_), [((JavaLangInteger *) nil_chk(i)) intValue]))) getAsLongWithInt:index];
}


#line 476
- (jlong)getFieldAsLongWithInt:(jint)tag {
  
#line 477
  return [self getFieldAsLongWithInt:tag withInt:0];
}


#line 486
- (jfloat)getFieldAsFloatWithInt:(jint)tag
                         withInt:(jint)index {
  
#line 487
  JavaLangInteger *i = [((JavaUtilHashtable *) nil_chk(fieldIndex_)) getWithId:[JavaLangInteger valueOfWithInt:tag]];
  return [((ComItextpdfTextPdfCodecTIFFField *) nil_chk(IOSObjectArray_Get(nil_chk(fields_), [((JavaLangInteger *) nil_chk(i)) intValue]))) getAsFloatWithInt:index];
}


#line 496
- (jfloat)getFieldAsFloatWithInt:(jint)tag {
  
#line 497
  return [self getFieldAsFloatWithInt:tag withInt:0];
}


#line 506
- (jdouble)getFieldAsDoubleWithInt:(jint)tag
                           withInt:(jint)index {
  
#line 507
  JavaLangInteger *i = [((JavaUtilHashtable *) nil_chk(fieldIndex_)) getWithId:[JavaLangInteger valueOfWithInt:tag]];
  return [((ComItextpdfTextPdfCodecTIFFField *) nil_chk(IOSObjectArray_Get(nil_chk(fields_), [((JavaLangInteger *) nil_chk(i)) intValue]))) getAsDoubleWithInt:index];
}


#line 516
- (jdouble)getFieldAsDoubleWithInt:(jint)tag {
  
#line 517
  return [self getFieldAsDoubleWithInt:tag withInt:0];
}

- (jshort)readShortWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 524
  if (isBigEndian__) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readShort];
  }
  else {
    
#line 527
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readShortLE];
  }
}


#line 531
- (jint)readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 533
  if (isBigEndian__) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readUnsignedShort];
  }
  else {
    
#line 536
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readUnsignedShortLE];
  }
}


#line 540
- (jint)readIntWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 542
  if (isBigEndian__) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readInt];
  }
  else {
    
#line 545
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readIntLE];
  }
}


#line 549
- (jlong)readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 551
  if (isBigEndian__) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readUnsignedInt];
  }
  else {
    
#line 554
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readUnsignedIntLE];
  }
}


#line 558
- (jlong)readLongWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 560
  if (isBigEndian__) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readLong];
  }
  else {
    
#line 563
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readLongLE];
  }
}


#line 567
- (jfloat)readFloatWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 569
  if (isBigEndian__) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readFloat];
  }
  else {
    
#line 572
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readFloatLE];
  }
}


#line 576
- (jdouble)readDoubleWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 578
  if (isBigEndian__) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readDouble];
  }
  else {
    
#line 581
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readDoubleLE];
  }
}


#line 585
+ (jint)readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream
                                                           withBoolean:(jboolean)isBigEndian {
  
#line 588
  if (isBigEndian) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readUnsignedShort];
  }
  else {
    
#line 591
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readUnsignedShortLE];
  }
}


#line 595
+ (jlong)readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream
                                                          withBoolean:(jboolean)isBigEndian {
  
#line 598
  if (isBigEndian) {
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readUnsignedInt];
  }
  else {
    
#line 601
    return [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) readUnsignedIntLE];
  }
}


#line 611
+ (jint)getNumDirectoriesWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)stream {
  
#line 613
  jlong pointer = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(stream)) getFilePointer];
  
#line 615
  [stream seekWithLong:0LL];
  jint endian = [stream readUnsignedShort];
  if (![ComItextpdfTextPdfCodecTIFFDirectory isValidEndianTagWithInt:endian]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"bad.endianness.tag.not.0x4949.or.0x4d4d" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  jboolean isBigEndian = endian == (jint) 0x4d4d;
  jint magic = [ComItextpdfTextPdfCodecTIFFDirectory readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream withBoolean:isBigEndian];
  if (magic != 42) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"bad.magic.number.should.be.42" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  
#line 626
  [stream seekWithLong:4LL];
  jlong offset = [ComItextpdfTextPdfCodecTIFFDirectory readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream withBoolean:isBigEndian];
  
#line 629
  jint numDirectories = 0;
  while (offset != 0LL) {
    ++numDirectories;
    
#line 634
    @try {
      [stream seekWithLong:offset];
      jint entries = [ComItextpdfTextPdfCodecTIFFDirectory readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:stream withBoolean:isBigEndian];
      [stream skipWithLong:12 * entries];
      offset = [ComItextpdfTextPdfCodecTIFFDirectory readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:stream withBoolean:isBigEndian];
    }
    @catch (
#line 639
    JavaIoEOFException *eof) {
      numDirectories--;
      break;
    }
  }
  
#line 645
  [stream seekWithLong:pointer];
  return numDirectories;
}


#line 654
- (jboolean)isBigEndian {
  
#line 655
  return isBigEndian__;
}


#line 662
- (jlong)getIFDOffset {
  
#line 663
  return IFDOffset_;
}


#line 670
- (jlong)getNextIFDOffset {
  
#line 671
  return nextIFDOffset_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecTIFFDirectory *)other {
  [super copyAllFieldsTo:other];
  other->IFDOffset_ = IFDOffset_;
  other->fieldIndex_ = fieldIndex_;
  other->fields_ = fields_;
  other->isBigEndian__ = isBigEndian__;
  other->nextIFDOffset_ = nextIFDOffset_;
  other->numEntries_ = numEntries_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfCodecTIFFDirectory class]) {
    ComItextpdfTextPdfCodecTIFFDirectory_sizeOfType_ = [IOSIntArray arrayWithInts:(jint[]){
#line 207
      0,
#line 208
      1,
#line 209
      1,
#line 210
      2,
#line 211
      4,
#line 212
      8,
#line 213
      1,
#line 214
      1,
#line 215
      2,
#line 216
      4,
#line 217
      8,
#line 218
      4,
#line 219
      8 } count:13];
      ComItextpdfTextPdfCodecTIFFDirectory_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "TIFFDirectory", NULL, 0x0, NULL },
    { "isValidEndianTagWithInt:", "isValidEndianTag", "Z", 0xa, NULL },
    { "initWithComItextpdfTextPdfRandomAccessFileOrArray:withInt:", "TIFFDirectory", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithComItextpdfTextPdfRandomAccessFileOrArray:withLong:withInt:", "TIFFDirectory", NULL, 0x1, "Ljava.io.IOException;" },
    { "initialize__WithComItextpdfTextPdfRandomAccessFileOrArray:", "initialize", "V", 0x2, "Ljava.io.IOException;" },
    { "getNumEntries", NULL, "I", 0x1, NULL },
    { "getFieldWithInt:", "getField", "Lcom.itextpdf.text.pdf.codec.TIFFField;", 0x1, NULL },
    { "isTagPresentWithInt:", "isTagPresent", "Z", 0x1, NULL },
    { "getTags", NULL, "[I", 0x1, NULL },
    { "getFields", NULL, "[Lcom.itextpdf.text.pdf.codec.TIFFField;", 0x1, NULL },
    { "getFieldAsByteWithInt:withInt:", "getFieldAsByte", "B", 0x1, NULL },
    { "getFieldAsByteWithInt:", "getFieldAsByte", "B", 0x1, NULL },
    { "getFieldAsLongWithInt:withInt:", "getFieldAsLong", "J", 0x1, NULL },
    { "getFieldAsLongWithInt:", "getFieldAsLong", "J", 0x1, NULL },
    { "getFieldAsFloatWithInt:withInt:", "getFieldAsFloat", "F", 0x1, NULL },
    { "getFieldAsFloatWithInt:", "getFieldAsFloat", "F", 0x1, NULL },
    { "getFieldAsDoubleWithInt:withInt:", "getFieldAsDouble", "D", 0x1, NULL },
    { "getFieldAsDoubleWithInt:", "getFieldAsDouble", "D", 0x1, NULL },
    { "readShortWithComItextpdfTextPdfRandomAccessFileOrArray:", "readShort", "S", 0x2, "Ljava.io.IOException;" },
    { "readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:", "readUnsignedShort", "I", 0x2, "Ljava.io.IOException;" },
    { "readIntWithComItextpdfTextPdfRandomAccessFileOrArray:", "readInt", "I", 0x2, "Ljava.io.IOException;" },
    { "readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:", "readUnsignedInt", "J", 0x2, "Ljava.io.IOException;" },
    { "readLongWithComItextpdfTextPdfRandomAccessFileOrArray:", "readLong", "J", 0x2, "Ljava.io.IOException;" },
    { "readFloatWithComItextpdfTextPdfRandomAccessFileOrArray:", "readFloat", "F", 0x2, "Ljava.io.IOException;" },
    { "readDoubleWithComItextpdfTextPdfRandomAccessFileOrArray:", "readDouble", "D", 0x2, "Ljava.io.IOException;" },
    { "readUnsignedShortWithComItextpdfTextPdfRandomAccessFileOrArray:withBoolean:", "readUnsignedShort", "I", 0xa, "Ljava.io.IOException;" },
    { "readUnsignedIntWithComItextpdfTextPdfRandomAccessFileOrArray:withBoolean:", "readUnsignedInt", "J", 0xa, "Ljava.io.IOException;" },
    { "getNumDirectoriesWithComItextpdfTextPdfRandomAccessFileOrArray:", "getNumDirectories", "I", 0x9, "Ljava.io.IOException;" },
    { "isBigEndian", NULL, "Z", 0x1, NULL },
    { "getIFDOffset", NULL, "J", 0x1, NULL },
    { "getNextIFDOffset", NULL, "J", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfTextPdfCodecTIFFDirectory_serialVersionUID },
    { "isBigEndian__", "isBigEndian", 0x0, "Z", NULL,  },
    { "numEntries_", NULL, 0x0, "I", NULL,  },
    { "fields_", NULL, 0x0, "[Lcom.itextpdf.text.pdf.codec.TIFFField;", NULL,  },
    { "fieldIndex_", NULL, 0x0, "Ljava.util.Hashtable;", NULL,  },
    { "IFDOffset_", NULL, 0x0, "J", NULL,  },
    { "nextIFDOffset_", NULL, 0x0, "J", NULL,  },
    { "sizeOfType_", NULL, 0x1a, "[I", &ComItextpdfTextPdfCodecTIFFDirectory_sizeOfType_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecTIFFDirectory = { "TIFFDirectory", "com.itextpdf.text.pdf.codec", NULL, 0x1, 31, methods, 8, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecTIFFDirectory;
}

@end
