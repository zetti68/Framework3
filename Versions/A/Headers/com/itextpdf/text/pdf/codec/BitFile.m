//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/BitFile.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/BitFile.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/codec/BitFile.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"


#line 61
@implementation ComItextpdfTextPdfCodecBitFile


#line 75
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)output
                               withBoolean:(jboolean)blocks {
  if (self = [super init]) {
    blocks__ =
#line 69
    NO;
    
#line 77
    output__ = output;
    
#line 78
    blocks__ = blocks;
    
#line 79
    buffer__ = [IOSByteArray arrayWithLength:256];
    
#line 80
    index__ = 0;
    
#line 81
    bitsLeft__ = 8;
  }
  return self;
}


#line 84
- (void)flush {
  
#line 86
  jint numBytes = index__ + (bitsLeft__ == 8 ? 0 : 1);
  if (numBytes > 0) {
    
#line 89
    if (blocks__)
#line 90
    [((JavaIoOutputStream *) nil_chk(output__)) writeWithInt:numBytes];
    [((JavaIoOutputStream *) nil_chk(output__)) writeWithByteArray:buffer__ withInt:0 withInt:numBytes];
    *IOSByteArray_GetRef(nil_chk(buffer__), 0) = 0;
    index__ = 0;
    bitsLeft__ = 8;
  }
}


#line 98
- (void)writeBitsWithInt:(jint)bits
                 withInt:(jint)numbits {
  
#line 100
  jint bitsWritten = 0;
  jint numBytes = 255;
  do {
    
#line 105
    if ((index__ == 254 && bitsLeft__ == 0) || index__ > 254) {
      
#line 107
      if (blocks__)
#line 108
      [((JavaIoOutputStream *) nil_chk(output__)) writeWithInt:numBytes];
      
#line 110
      [((JavaIoOutputStream *) nil_chk(output__)) writeWithByteArray:buffer__ withInt:0 withInt:numBytes];
      
#line 112
      *IOSByteArray_GetRef(nil_chk(buffer__), 0) = 0;
      index__ = 0;
      bitsLeft__ = 8;
    }
    
#line 117
    if (numbits <= bitsLeft__) {
      
#line 119
      if (blocks__) {
        
#line 121
        *IOSByteArray_GetRef(nil_chk(buffer__), index__) |= LShift32((bits & ((LShift32(1, numbits)) - 1)), (8 - bitsLeft__));
        bitsWritten += numbits;
        bitsLeft__ -= numbits;
        numbits = 0;
      }
      else {
        
#line 128
        *IOSByteArray_GetRef(nil_chk(buffer__), index__) |= LShift32((bits & ((LShift32(1, numbits)) - 1)), (bitsLeft__ - numbits));
        bitsWritten += numbits;
        bitsLeft__ -= numbits;
        numbits = 0;
      }
    }
    else {
      
#line 137
      if (blocks__) {
        
#line 141
        *IOSByteArray_GetRef(nil_chk(buffer__), index__) |= LShift32((bits & ((LShift32(1, bitsLeft__)) - 1)), (8 - bitsLeft__));
        bitsWritten += bitsLeft__;
        RShiftAssignInt(&bits, bitsLeft__);
        numbits -= bitsLeft__;
        *IOSByteArray_GetRef(buffer__, ++index__) = 0;
        bitsLeft__ = 8;
      }
      else {
        
#line 153
        jint topbits = (URShift32(bits, (numbits - bitsLeft__))) & ((LShift32(1, bitsLeft__)) - 1);
        *IOSByteArray_GetRef(nil_chk(buffer__), index__) |= topbits;
        numbits -= bitsLeft__;
        bitsWritten += bitsLeft__;
        *IOSByteArray_GetRef(buffer__, ++index__) = 0;
        bitsLeft__ = 8;
      }
    }
  }
  while (numbits != 0);
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecBitFile *)other {
  [super copyAllFieldsTo:other];
  other->bitsLeft__ = bitsLeft__;
  other->blocks__ = blocks__;
  other->buffer__ = buffer__;
  other->index__ = index__;
  other->output__ = output__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoOutputStream:withBoolean:", "BitFile", NULL, 0x1, NULL },
    { "flush", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "writeBitsWithInt:withInt:", "writeBits", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "output__", NULL, 0x0, "Ljava.io.OutputStream;", NULL,  },
    { "buffer__", NULL, 0x0, "[B", NULL,  },
    { "index__", NULL, 0x0, "I", NULL,  },
    { "bitsLeft__", NULL, 0x0, "I", NULL,  },
    { "blocks__", NULL, 0x0, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecBitFile = { "BitFile", "com.itextpdf.text.pdf.codec", NULL, 0x1, 3, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecBitFile;
}

@end
