//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/JBIG2Image.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/JBIG2Image.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/ImgJBIG2.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/codec/JBIG2Image.h"
#include "com/itextpdf/text/pdf/codec/JBIG2SegmentReader.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"


#line 59
@implementation ComItextpdfTextPdfCodecJBIG2Image


#line 67
+ (IOSByteArray *)getGlobalSegmentWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)ra {
  
#line 68
  @try {
    ComItextpdfTextPdfCodecJBIG2SegmentReader *sr = [[ComItextpdfTextPdfCodecJBIG2SegmentReader alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:ra];
    [sr read];
    return [sr getGlobalWithBoolean:YES];
  }
  @catch (
#line 72
  JavaLangException *e) {
    return nil;
  }
}


#line 83
+ (ComItextpdfTextImage *)getJbig2ImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)ra
                                                                             withInt:(jint)page {
  
#line 84
  if (page < 1)
#line 85
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.page.number.must.be.gt.eq.1" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 87
  @try {
    ComItextpdfTextPdfCodecJBIG2SegmentReader *sr = [[ComItextpdfTextPdfCodecJBIG2SegmentReader alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:ra];
    [sr read];
    ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *p = [sr getPageWithInt:page];
    ComItextpdfTextImage *img = [[ComItextpdfTextImgJBIG2 alloc] initWithInt:((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *) nil_chk(p))->pageBitmapWidth_ withInt:p->pageBitmapHeight_ withByteArray:[p getDataWithBoolean:YES] withByteArray:[sr getGlobalWithBoolean:YES]];
    return img;
  }
  @catch (
#line 93
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 103
+ (jint)getNumberOfPagesWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)ra {
  
#line 104
  @try {
    ComItextpdfTextPdfCodecJBIG2SegmentReader *sr = [[ComItextpdfTextPdfCodecJBIG2SegmentReader alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:ra];
    [sr read];
    return [sr numberOfPages];
  }
  @catch (
#line 108
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getGlobalSegmentWithComItextpdfTextPdfRandomAccessFileOrArray:", "getGlobalSegment", "[B", 0x9, NULL },
    { "getJbig2ImageWithComItextpdfTextPdfRandomAccessFileOrArray:withInt:", "getJbig2Image", "Lcom.itextpdf.text.Image;", 0x9, NULL },
    { "getNumberOfPagesWithComItextpdfTextPdfRandomAccessFileOrArray:", "getNumberOfPages", "I", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecJBIG2Image = { "JBIG2Image", "com.itextpdf.text.pdf.codec", NULL, 0x1, 4, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfCodecJBIG2Image;
}

@end
