//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/wmf/MetaDo.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/wmf/MetaDo.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/codec/BmpImage.h"
#include "com/itextpdf/text/pdf/codec/wmf/InputMeta.h"
#include "com/itextpdf/text/pdf/codec/wmf/MetaBrush.h"
#include "com/itextpdf/text/pdf/codec/wmf/MetaDo.h"
#include "com/itextpdf/text/pdf/codec/wmf/MetaFont.h"
#include "com/itextpdf/text/pdf/codec/wmf/MetaObject.h"
#include "com/itextpdf/text/pdf/codec/wmf/MetaPen.h"
#include "com/itextpdf/text/pdf/codec/wmf/MetaState.h"
#include "com/itextpdf/text/pdf/codec/wmf/Point.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"


#line 63
@implementation ComItextpdfTextPdfCodecWmfMetaDo


#line 143
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
     withComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)cb {
  if (self = [super init]) {
    state_ =
#line 141
    [[ComItextpdfTextPdfCodecWmfMetaState alloc] init];
    
#line 144
    self->cb_ = cb;
    
#line 145
    self->in_ = [[ComItextpdfTextPdfCodecWmfInputMeta alloc] initWithJavaIoInputStream:inArg];
  }
  return self;
}


#line 148
- (void)readAll {
  
#line 149
  if ([((ComItextpdfTextPdfCodecWmfInputMeta *) nil_chk(in_)) readInt] != (jint) 0x9AC6CDD7) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:
#line 151
    [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"not.a.placeable.windows.metafile" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  [in_ readWord];
  left_ = [in_ readShort];
  top_ = [in_ readShort];
  right_ = [in_ readShort];
  bottom_ = [in_ readShort];
  inch_ = [in_ readWord];
  [((ComItextpdfTextPdfCodecWmfMetaState *) nil_chk(state_)) setScalingXWithFloat:(jfloat) (right_ - left_) / (jfloat) inch_ * 72.0f];
  [state_ setScalingYWithFloat:(jfloat) (bottom_ - top_) / (jfloat) inch_ * 72.0f];
  [state_ setOffsetWxWithInt:left_];
  [state_ setOffsetWyWithInt:top_];
  [state_ setExtentWxWithInt:right_ - left_];
  [state_ setExtentWyWithInt:bottom_ - top_];
  [in_ readInt];
  [in_ readWord];
  [in_ skipWithInt:18];
  
#line 169
  jint tsize;
  jint function;
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb_)) setLineCapWithInt:1];
  [cb_ setLineJoinWithInt:1];
  for (; ; ) {
    jint lenMarker = [in_ getLength];
    tsize = [in_ readInt];
    if (tsize < 3)
#line 177
    break;
    function = [in_ readWord];
    switch (function) {
      case 0:
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEPALETTE:
      case ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEREGION:
      case ComItextpdfTextPdfCodecWmfMetaDo_META_DIBCREATEPATTERNBRUSH:
      [state_ addMetaObjectWithComItextpdfTextPdfCodecWmfMetaObject:[[ComItextpdfTextPdfCodecWmfMetaObject alloc] init]];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEPENINDIRECT:
      {
        
#line 188
        ComItextpdfTextPdfCodecWmfMetaPen *pen = [[ComItextpdfTextPdfCodecWmfMetaPen alloc] init];
        [pen init__WithComItextpdfTextPdfCodecWmfInputMeta:in_];
        [state_ addMetaObjectWithComItextpdfTextPdfCodecWmfMetaObject:pen];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEBRUSHINDIRECT:
      {
        
#line 194
        ComItextpdfTextPdfCodecWmfMetaBrush *brush = [[ComItextpdfTextPdfCodecWmfMetaBrush alloc] init];
        [brush init__WithComItextpdfTextPdfCodecWmfInputMeta:in_];
        [state_ addMetaObjectWithComItextpdfTextPdfCodecWmfMetaObject:brush];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEFONTINDIRECT:
      {
        
#line 200
        ComItextpdfTextPdfCodecWmfMetaFont *font = [[ComItextpdfTextPdfCodecWmfMetaFont alloc] init];
        [font init__WithComItextpdfTextPdfCodecWmfInputMeta:in_];
        [state_ addMetaObjectWithComItextpdfTextPdfCodecWmfMetaObject:font];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SELECTOBJECT:
      {
        
#line 206
        jint idx = [in_ readWord];
        [state_ selectMetaObjectWithInt:idx withComItextpdfTextPdfPdfContentByte:cb_];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_DELETEOBJECT:
      {
        
#line 211
        jint idx = [in_ readWord];
        [state_ deleteMetaObjectWithInt:idx];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SAVEDC:
      [state_ saveStateWithComItextpdfTextPdfPdfContentByte:cb_];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_RESTOREDC:
      {
        
#line 219
        jint idx = [in_ readShort];
        [state_ restoreStateWithInt:idx withComItextpdfTextPdfPdfContentByte:cb_];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SETWINDOWORG:
      [state_ setOffsetWyWithInt:[in_ readShort]];
      [state_ setOffsetWxWithInt:[in_ readShort]];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SETWINDOWEXT:
      [state_ setExtentWyWithInt:[in_ readShort]];
      [state_ setExtentWxWithInt:[in_ readShort]];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_MOVETO:
      {
        
#line 232
        jint y = [in_ readShort];
        ComItextpdfTextPdfCodecWmfPoint *p = [[ComItextpdfTextPdfCodecWmfPoint alloc] initWithInt:[in_ readShort] withInt:y];
        [state_ setCurrentPointWithComItextpdfTextPdfCodecWmfPoint:p];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_LINETO:
      {
        
#line 238
        jint y = [in_ readShort];
        jint x = [in_ readShort];
        ComItextpdfTextPdfCodecWmfPoint *p = [state_ getCurrentPoint];
        [cb_ moveToWithFloat:[state_ transformXWithInt:((ComItextpdfTextPdfCodecWmfPoint *) nil_chk(p))->x_] withFloat:[state_ transformYWithInt:p->y_]];
        [cb_ lineToWithFloat:[state_ transformXWithInt:x] withFloat:[state_ transformYWithInt:y]];
        [cb_ stroke];
        [state_ setCurrentPointWithComItextpdfTextPdfCodecWmfPoint:[[ComItextpdfTextPdfCodecWmfPoint alloc] initWithInt:x withInt:y]];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_POLYLINE:
      {
        
#line 248
        [state_ setLineJoinPolygonWithComItextpdfTextPdfPdfContentByte:cb_];
        jint len = [in_ readWord];
        jint x = [in_ readShort];
        jint y = [in_ readShort];
        [cb_ moveToWithFloat:[state_ transformXWithInt:x] withFloat:[state_ transformYWithInt:y]];
        for (jint k = 1; k < len; ++k) {
          x = [in_ readShort];
          y = [in_ readShort];
          [cb_ lineToWithFloat:[state_ transformXWithInt:x] withFloat:[state_ transformYWithInt:y]];
        }
        [cb_ stroke];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_POLYGON:
      {
        
#line 262
        if ([self isNullStrokeFillWithBoolean:NO])
#line 263
        break;
        jint len = [in_ readWord];
        jint sx = [in_ readShort];
        jint sy = [in_ readShort];
        [cb_ moveToWithFloat:[state_ transformXWithInt:sx] withFloat:[state_ transformYWithInt:sy]];
        for (jint k = 1; k < len; ++k) {
          jint x = [in_ readShort];
          jint y = [in_ readShort];
          [cb_ lineToWithFloat:[state_ transformXWithInt:x] withFloat:[state_ transformYWithInt:y]];
        }
        [cb_ lineToWithFloat:[state_ transformXWithInt:sx] withFloat:[state_ transformYWithInt:sy]];
        [self strokeAndFill];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_POLYPOLYGON:
      {
        
#line 278
        if ([self isNullStrokeFillWithBoolean:NO])
#line 279
        break;
        jint numPoly = [in_ readWord];
        IOSIntArray *lens = [IOSIntArray arrayWithLength:numPoly];
        for (jint k = 0; k < lens->size_; ++k)
#line 283
        *IOSIntArray_GetRef(lens, k) = [in_ readWord];
        for (jint j = 0; j < lens->size_; ++j) {
          jint len = IOSIntArray_Get(lens, j);
          jint sx = [in_ readShort];
          jint sy = [in_ readShort];
          [cb_ moveToWithFloat:[state_ transformXWithInt:sx] withFloat:[state_ transformYWithInt:sy]];
          for (jint k = 1; k < len; ++k) {
            jint x = [in_ readShort];
            jint y = [in_ readShort];
            [cb_ lineToWithFloat:[state_ transformXWithInt:x] withFloat:[state_ transformYWithInt:y]];
          }
          [cb_ lineToWithFloat:[state_ transformXWithInt:sx] withFloat:[state_ transformYWithInt:sy]];
        }
        [self strokeAndFill];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_ELLIPSE:
      {
        
#line 300
        if ([self isNullStrokeFillWithBoolean:[state_ getLineNeutral]])
#line 301
        break;
        jint b = [in_ readShort];
        jint r = [in_ readShort];
        jint t = [in_ readShort];
        jint l = [in_ readShort];
        [cb_ arcWithFloat:[state_ transformXWithInt:l] withFloat:[state_ transformYWithInt:b] withFloat:[state_ transformXWithInt:r] withFloat:
#line 307
        [state_ transformYWithInt:t] withFloat:0 withFloat:360];
        [self strokeAndFill];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_ARC:
      {
        
#line 312
        if ([self isNullStrokeFillWithBoolean:[state_ getLineNeutral]])
#line 313
        break;
        jfloat yend = [state_ transformYWithInt:[in_ readShort]];
        jfloat xend = [state_ transformXWithInt:[in_ readShort]];
        jfloat ystart = [state_ transformYWithInt:[in_ readShort]];
        jfloat xstart = [state_ transformXWithInt:[in_ readShort]];
        jfloat b = [state_ transformYWithInt:[in_ readShort]];
        jfloat r = [state_ transformXWithInt:[in_ readShort]];
        jfloat t = [state_ transformYWithInt:[in_ readShort]];
        jfloat l = [state_ transformXWithInt:[in_ readShort]];
        jfloat cx = (r + l) / 2;
        jfloat cy = (t + b) / 2;
        jfloat arc1 = [ComItextpdfTextPdfCodecWmfMetaDo getArcWithFloat:cx withFloat:cy withFloat:xstart withFloat:ystart];
        jfloat arc2 = [ComItextpdfTextPdfCodecWmfMetaDo getArcWithFloat:cx withFloat:cy withFloat:xend withFloat:yend];
        arc2 -= arc1;
        if (arc2 <= 0)
#line 328
        arc2 += 360;
        [cb_ arcWithFloat:l withFloat:b withFloat:r withFloat:t withFloat:arc1 withFloat:arc2];
        [cb_ stroke];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_PIE:
      {
        
#line 334
        if ([self isNullStrokeFillWithBoolean:[state_ getLineNeutral]])
#line 335
        break;
        jfloat yend = [state_ transformYWithInt:[in_ readShort]];
        jfloat xend = [state_ transformXWithInt:[in_ readShort]];
        jfloat ystart = [state_ transformYWithInt:[in_ readShort]];
        jfloat xstart = [state_ transformXWithInt:[in_ readShort]];
        jfloat b = [state_ transformYWithInt:[in_ readShort]];
        jfloat r = [state_ transformXWithInt:[in_ readShort]];
        jfloat t = [state_ transformYWithInt:[in_ readShort]];
        jfloat l = [state_ transformXWithInt:[in_ readShort]];
        jfloat cx = (r + l) / 2;
        jfloat cy = (t + b) / 2;
        jfloat arc1 = [ComItextpdfTextPdfCodecWmfMetaDo getArcWithFloat:cx withFloat:cy withFloat:xstart withFloat:ystart];
        jfloat arc2 = [ComItextpdfTextPdfCodecWmfMetaDo getArcWithFloat:cx withFloat:cy withFloat:xend withFloat:yend];
        arc2 -= arc1;
        if (arc2 <= 0)
#line 350
        arc2 += 360;
        JavaUtilArrayList *ar = [ComItextpdfTextPdfPdfContentByte bezierArcWithFloat:l withFloat:b withFloat:r withFloat:t withFloat:arc1 withFloat:arc2];
        if ([((JavaUtilArrayList *) nil_chk(ar)) isEmpty])
#line 353
        break;
        IOSFloatArray *pt = [ar getWithInt:0];
        [cb_ moveToWithFloat:cx withFloat:cy];
        [cb_ lineToWithFloat:IOSFloatArray_Get(nil_chk(pt), 0) withFloat:IOSFloatArray_Get(pt, 1)];
        for (jint k = 0; k < [ar size]; ++k) {
          pt = [ar getWithInt:k];
          [cb_ curveToWithFloat:IOSFloatArray_Get(nil_chk(pt), 2) withFloat:IOSFloatArray_Get(pt, 3) withFloat:IOSFloatArray_Get(pt, 4) withFloat:IOSFloatArray_Get(pt, 5) withFloat:IOSFloatArray_Get(pt, 6) withFloat:IOSFloatArray_Get(pt, 7)];
        }
        [cb_ lineToWithFloat:cx withFloat:cy];
        [self strokeAndFill];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_CHORD:
      {
        
#line 366
        if ([self isNullStrokeFillWithBoolean:[state_ getLineNeutral]])
#line 367
        break;
        jfloat yend = [state_ transformYWithInt:[in_ readShort]];
        jfloat xend = [state_ transformXWithInt:[in_ readShort]];
        jfloat ystart = [state_ transformYWithInt:[in_ readShort]];
        jfloat xstart = [state_ transformXWithInt:[in_ readShort]];
        jfloat b = [state_ transformYWithInt:[in_ readShort]];
        jfloat r = [state_ transformXWithInt:[in_ readShort]];
        jfloat t = [state_ transformYWithInt:[in_ readShort]];
        jfloat l = [state_ transformXWithInt:[in_ readShort]];
        jfloat cx = (r + l) / 2;
        jfloat cy = (t + b) / 2;
        jfloat arc1 = [ComItextpdfTextPdfCodecWmfMetaDo getArcWithFloat:cx withFloat:cy withFloat:xstart withFloat:ystart];
        jfloat arc2 = [ComItextpdfTextPdfCodecWmfMetaDo getArcWithFloat:cx withFloat:cy withFloat:xend withFloat:yend];
        arc2 -= arc1;
        if (arc2 <= 0)
#line 382
        arc2 += 360;
        JavaUtilArrayList *ar = [ComItextpdfTextPdfPdfContentByte bezierArcWithFloat:l withFloat:b withFloat:r withFloat:t withFloat:arc1 withFloat:arc2];
        if ([((JavaUtilArrayList *) nil_chk(ar)) isEmpty])
#line 385
        break;
        IOSFloatArray *pt = [ar getWithInt:0];
        cx = IOSFloatArray_Get(nil_chk(pt), 0);
        cy = IOSFloatArray_Get(pt, 1);
        [cb_ moveToWithFloat:cx withFloat:cy];
        for (jint k = 0; k < [ar size]; ++k) {
          pt = [ar getWithInt:k];
          [cb_ curveToWithFloat:IOSFloatArray_Get(nil_chk(pt), 2) withFloat:IOSFloatArray_Get(pt, 3) withFloat:IOSFloatArray_Get(pt, 4) withFloat:IOSFloatArray_Get(pt, 5) withFloat:IOSFloatArray_Get(pt, 6) withFloat:IOSFloatArray_Get(pt, 7)];
        }
        [cb_ lineToWithFloat:cx withFloat:cy];
        [self strokeAndFill];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_RECTANGLE:
      {
        
#line 399
        if ([self isNullStrokeFillWithBoolean:YES])
#line 400
        break;
        jfloat b = [state_ transformYWithInt:[in_ readShort]];
        jfloat r = [state_ transformXWithInt:[in_ readShort]];
        jfloat t = [state_ transformYWithInt:[in_ readShort]];
        jfloat l = [state_ transformXWithInt:[in_ readShort]];
        [cb_ rectangleWithFloat:l withFloat:b withFloat:r - l withFloat:t - b];
        [self strokeAndFill];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_ROUNDRECT:
      {
        
#line 410
        if ([self isNullStrokeFillWithBoolean:YES])
#line 411
        break;
        jfloat h = [state_ transformYWithInt:0] - [state_ transformYWithInt:[in_ readShort]];
        jfloat w = [state_ transformXWithInt:[in_ readShort]] - [state_ transformXWithInt:0];
        jfloat b = [state_ transformYWithInt:[in_ readShort]];
        jfloat r = [state_ transformXWithInt:[in_ readShort]];
        jfloat t = [state_ transformYWithInt:[in_ readShort]];
        jfloat l = [state_ transformXWithInt:[in_ readShort]];
        [cb_ roundRectangleWithFloat:l withFloat:b withFloat:r - l withFloat:t - b withFloat:(h + w) / 4];
        [self strokeAndFill];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_INTERSECTCLIPRECT:
      {
        
#line 423
        jfloat b = [state_ transformYWithInt:[in_ readShort]];
        jfloat r = [state_ transformXWithInt:[in_ readShort]];
        jfloat t = [state_ transformYWithInt:[in_ readShort]];
        jfloat l = [state_ transformXWithInt:[in_ readShort]];
        [cb_ rectangleWithFloat:l withFloat:b withFloat:r - l withFloat:t - b];
        [cb_ eoClip];
        [cb_ newPath];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_EXTTEXTOUT:
      {
        
#line 433
        jint y = [in_ readShort];
        jint x = [in_ readShort];
        jint count = [in_ readWord];
        jint flag = [in_ readWord];
        jint x1 = 0;
        jint y1 = 0;
        jint x2 = 0;
        jint y2 = 0;
        if ((flag & (ComItextpdfTextPdfCodecWmfMetaFont_ETO_CLIPPED | ComItextpdfTextPdfCodecWmfMetaFont_ETO_OPAQUE)) != 0) {
          x1 = [in_ readShort];
          y1 = [in_ readShort];
          x2 = [in_ readShort];
          y2 = [in_ readShort];
        }
        IOSByteArray *text = [IOSByteArray arrayWithLength:count];
        jint k;
        for (k = 0; k < count; ++k) {
          jbyte c = (jbyte) [in_ readByte];
          if (c == 0)
#line 452
          break;
          *IOSByteArray_GetRef(text, k) = c;
        }
        NSString *s;
        @try {
          s = [NSString stringWithBytes:text offset:0 length:k charsetName:@"Cp1252"];
        }
        @catch (
#line 458
        JavaIoUnsupportedEncodingException *e) {
          s = [NSString stringWithBytes:text offset:0 length:k];
        }
        [self outputTextWithInt:x withInt:y withInt:flag withInt:x1 withInt:y1 withInt:x2 withInt:y2 withNSString:s];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_TEXTOUT:
      {
        
#line 465
        jint count = [in_ readWord];
        IOSByteArray *text = [IOSByteArray arrayWithLength:count];
        jint k;
        for (k = 0; k < count; ++k) {
          jbyte c = (jbyte) [in_ readByte];
          if (c == 0)
#line 471
          break;
          *IOSByteArray_GetRef(text, k) = c;
        }
        NSString *s;
        @try {
          s = [NSString stringWithBytes:text offset:0 length:k charsetName:@"Cp1252"];
        }
        @catch (
#line 477
        JavaIoUnsupportedEncodingException *e) {
          s = [NSString stringWithBytes:text offset:0 length:k];
        }
        count = (count + 1) & (jint) 0xfffe;
        [in_ skipWithInt:count - k];
        jint y = [in_ readShort];
        jint x = [in_ readShort];
        [self outputTextWithInt:x withInt:y withInt:0 withInt:0 withInt:0 withInt:0 withInt:0 withNSString:s];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SETBKCOLOR:
      [state_ setCurrentBackgroundColorWithComItextpdfTextBaseColor:[in_ readColor]];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SETTEXTCOLOR:
      [state_ setCurrentTextColorWithComItextpdfTextBaseColor:[in_ readColor]];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SETTEXTALIGN:
      [state_ setTextAlignWithInt:[in_ readWord]];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SETBKMODE:
      [state_ setBackgroundModeWithInt:[in_ readWord]];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SETPOLYFILLMODE:
      [state_ setPolyFillModeWithInt:[in_ readWord]];
      break;
      case ComItextpdfTextPdfCodecWmfMetaDo_META_SETPIXEL:
      {
        
#line 503
        ComItextpdfTextBaseColor *color = [in_ readColor];
        jint y = [in_ readShort];
        jint x = [in_ readShort];
        [cb_ saveState];
        [cb_ setColorFillWithComItextpdfTextBaseColor:color];
        [cb_ rectangleWithFloat:[state_ transformXWithInt:x] withFloat:[state_ transformYWithInt:y] withFloat:.2f withFloat:.2f];
        [cb_ fill];
        [cb_ restoreState];
        break;
      }
      case ComItextpdfTextPdfCodecWmfMetaDo_META_DIBSTRETCHBLT:
      case ComItextpdfTextPdfCodecWmfMetaDo_META_STRETCHDIB:
      {
        
#line 515
        [in_ readInt];
        if (function == ComItextpdfTextPdfCodecWmfMetaDo_META_STRETCHDIB) {
          [in_ readWord];
        }
        jint srcHeight = [in_ readShort];
        jint srcWidth = [in_ readShort];
        jint ySrc = [in_ readShort];
        jint xSrc = [in_ readShort];
        jfloat destHeight = [state_ transformYWithInt:[in_ readShort]] - [state_ transformYWithInt:0];
        jfloat destWidth = [state_ transformXWithInt:[in_ readShort]] - [state_ transformXWithInt:0];
        jfloat yDest = [state_ transformYWithInt:[in_ readShort]];
        jfloat xDest = [state_ transformXWithInt:[in_ readShort]];
        IOSByteArray *b = [IOSByteArray arrayWithLength:tsize * 2 - ([in_ getLength] - lenMarker)];
        for (jint k = 0; k < b->size_; ++k)
#line 529
        *IOSByteArray_GetRef(b, k) = (jbyte) [in_ readByte];
        @try {
          JavaIoByteArrayInputStream *inb = [[JavaIoByteArrayInputStream alloc] initWithByteArray:b];
          ComItextpdfTextImage *bmp = [ComItextpdfTextPdfCodecBmpImage getImageWithJavaIoInputStream:inb withBoolean:YES withInt:b->size_];
          [cb_ saveState];
          [cb_ rectangleWithFloat:xDest withFloat:yDest withFloat:destWidth withFloat:destHeight];
          [cb_ clip];
          [cb_ newPath];
          [bmp scaleAbsoluteWithFloat:destWidth * [((ComItextpdfTextImage *) nil_chk(bmp)) getWidth] / srcWidth withFloat:-destHeight * [bmp getHeight] /
#line 538
          srcHeight];
          [bmp setAbsolutePositionWithFloat:xDest - destWidth * xSrc / srcWidth withFloat:yDest + destHeight * ySrc /
#line 540
          srcHeight - [bmp getScaledHeight]];
          [cb_ addImageWithComItextpdfTextImage:bmp];
          [cb_ restoreState];
        }
        @catch (
#line 543
        JavaLangException *e) {
        }
        
#line 546
        break;
      }
    }
    [in_ skipWithInt:tsize * 2 - ([in_ getLength] - lenMarker)];
  }
  [state_ cleanupWithComItextpdfTextPdfPdfContentByte:cb_];
}


#line 554
- (void)outputTextWithInt:(jint)x
                  withInt:(jint)y
                  withInt:(jint)flag
                  withInt:(jint)x1
                  withInt:(jint)y1
                  withInt:(jint)x2
                  withInt:(jint)y2
             withNSString:(NSString *)text {
  
#line 555
  ComItextpdfTextPdfCodecWmfMetaFont *font = [((ComItextpdfTextPdfCodecWmfMetaState *) nil_chk(state_)) getCurrentFont];
  jfloat refX = [state_ transformXWithInt:x];
  jfloat refY = [state_ transformYWithInt:y];
  jfloat angle = [state_ transformAngleWithFloat:[((ComItextpdfTextPdfCodecWmfMetaFont *) nil_chk(font)) getAngle]];
  jfloat sin = (jfloat) [JavaLangMath sinWithDouble:angle];
  jfloat cos = (jfloat) [JavaLangMath cosWithDouble:angle];
  jfloat fontSize = [font getFontSizeWithComItextpdfTextPdfCodecWmfMetaState:state_];
  ComItextpdfTextPdfBaseFont *bf = [font getFont];
  jint align = [state_ getTextAlign];
  jfloat textWidth = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getWidthPointWithNSString:text withFloat:fontSize];
  jfloat tx = 0;
  jfloat ty = 0;
  jfloat descender = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:fontSize];
  jfloat ury = [bf getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXURY withFloat:fontSize];
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb_)) saveState];
  [cb_ concatCTMWithFloat:cos withFloat:sin withFloat:-sin withFloat:cos withFloat:refX withFloat:refY];
  if ((align & ComItextpdfTextPdfCodecWmfMetaState_TA_CENTER) == ComItextpdfTextPdfCodecWmfMetaState_TA_CENTER)
#line 572
  tx = -textWidth / 2;
  else if ((align & ComItextpdfTextPdfCodecWmfMetaState_TA_RIGHT) == ComItextpdfTextPdfCodecWmfMetaState_TA_RIGHT)
#line 574
  tx = -textWidth;
  if ((align & ComItextpdfTextPdfCodecWmfMetaState_TA_BASELINE) == ComItextpdfTextPdfCodecWmfMetaState_TA_BASELINE)
#line 576
  ty = 0;
  else if ((align & ComItextpdfTextPdfCodecWmfMetaState_TA_BOTTOM) == ComItextpdfTextPdfCodecWmfMetaState_TA_BOTTOM)
#line 578
  ty = -descender;
  else
#line 580
  ty = -ury;
  ComItextpdfTextBaseColor *textColor;
  if ([state_ getBackgroundMode] == ComItextpdfTextPdfCodecWmfMetaState_OPAQUE) {
    textColor = [state_ getCurrentBackgroundColor];
    [cb_ setColorFillWithComItextpdfTextBaseColor:textColor];
    [cb_ rectangleWithFloat:tx withFloat:ty + descender withFloat:textWidth withFloat:ury - descender];
    [cb_ fill];
  }
  textColor = [state_ getCurrentTextColor];
  [cb_ setColorFillWithComItextpdfTextBaseColor:textColor];
  [cb_ beginText];
  [cb_ setFontAndSizeWithComItextpdfTextPdfBaseFont:bf withFloat:fontSize];
  [cb_ setTextMatrixWithFloat:tx withFloat:ty];
  [cb_ showTextWithNSString:text];
  [cb_ endText];
  if ([font isUnderline]) {
    [cb_ rectangleWithFloat:tx withFloat:ty - fontSize / 4 withFloat:textWidth withFloat:fontSize / 15];
    [cb_ fill];
  }
  if ([font isStrikeout]) {
    [cb_ rectangleWithFloat:tx withFloat:ty + fontSize / 3 withFloat:textWidth withFloat:fontSize / 15];
    [cb_ fill];
  }
  [cb_ restoreState];
}


#line 606
- (jboolean)isNullStrokeFillWithBoolean:(jboolean)isRectangle {
  
#line 607
  ComItextpdfTextPdfCodecWmfMetaPen *pen = [((ComItextpdfTextPdfCodecWmfMetaState *) nil_chk(state_)) getCurrentPen];
  ComItextpdfTextPdfCodecWmfMetaBrush *brush = [state_ getCurrentBrush];
  jboolean noPen = [((ComItextpdfTextPdfCodecWmfMetaPen *) nil_chk(pen)) getStyle] == ComItextpdfTextPdfCodecWmfMetaPen_PS_NULL;
  jint style = [((ComItextpdfTextPdfCodecWmfMetaBrush *) nil_chk(brush)) getStyle];
  jboolean isBrush = style == ComItextpdfTextPdfCodecWmfMetaBrush_BS_SOLID || (style == ComItextpdfTextPdfCodecWmfMetaBrush_BS_HATCHED &&
#line 612
  [state_ getBackgroundMode] == ComItextpdfTextPdfCodecWmfMetaState_OPAQUE);
  jboolean result = noPen && !isBrush;
  if (!noPen) {
    if (isRectangle)
#line 616
    [state_ setLineJoinRectangleWithComItextpdfTextPdfPdfContentByte:cb_];
    else
#line 618
    [state_ setLineJoinPolygonWithComItextpdfTextPdfPdfContentByte:cb_];
  }
  return result;
}


#line 623
- (void)strokeAndFill {
  
#line 624
  ComItextpdfTextPdfCodecWmfMetaPen *pen = [((ComItextpdfTextPdfCodecWmfMetaState *) nil_chk(state_)) getCurrentPen];
  ComItextpdfTextPdfCodecWmfMetaBrush *brush = [state_ getCurrentBrush];
  jint penStyle = [((ComItextpdfTextPdfCodecWmfMetaPen *) nil_chk(pen)) getStyle];
  jint brushStyle = [((ComItextpdfTextPdfCodecWmfMetaBrush *) nil_chk(brush)) getStyle];
  if (penStyle == ComItextpdfTextPdfCodecWmfMetaPen_PS_NULL) {
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb_)) closePath];
    if ([state_ getPolyFillMode] == ComItextpdfTextPdfCodecWmfMetaState_ALTERNATE) {
      [cb_ eoFill];
    }
    else {
      
#line 633
      [cb_ fill];
    }
  }
  else {
    
#line 636
    jboolean isBrush = brushStyle == ComItextpdfTextPdfCodecWmfMetaBrush_BS_SOLID || (brushStyle == ComItextpdfTextPdfCodecWmfMetaBrush_BS_HATCHED &&
#line 637
    [state_ getBackgroundMode] == ComItextpdfTextPdfCodecWmfMetaState_OPAQUE);
    if (isBrush) {
      if ([state_ getPolyFillMode] == ComItextpdfTextPdfCodecWmfMetaState_ALTERNATE)
#line 640
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb_)) closePathEoFillStroke];
      else
#line 642
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb_)) closePathFillStroke];
    }
    else {
      
#line 644
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb_)) closePathStroke];
    }
  }
}


#line 649
+ (jfloat)getArcWithFloat:(jfloat)xCenter
                withFloat:(jfloat)yCenter
                withFloat:(jfloat)xDot
                withFloat:(jfloat)yDot {
  
#line 650
  jdouble s = [JavaLangMath atan2WithDouble:yDot - yCenter withDouble:xDot - xCenter];
  if (s < 0)
#line 652
  s += JavaLangMath_PI * 2;
  return (jfloat) (s / JavaLangMath_PI * 180);
}


#line 656
+ (IOSByteArray *)wrapBMPWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 657
  if ([((ComItextpdfTextImage *) nil_chk(image)) getOriginalType] != ComItextpdfTextImage_ORIGINAL_BMP)
#line 658
  @throw [[JavaIoIOException alloc] initWithNSString:
#line 659
  [ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"only.bmp.can.be.wrapped.in.wmf" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  JavaIoInputStream *imgIn;
  IOSByteArray *data = nil;
  if ([image getOriginalData] == nil) {
    imgIn = [((JavaNetURL *) nil_chk([image getUrl])) openStream];
    JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
    jint b = 0;
    while ((b = [((JavaIoInputStream *) nil_chk(imgIn)) read]) != -1)
#line 667
    [out writeWithInt:b];
    [imgIn close];
    data = [out toByteArray];
  }
  else data = [image getOriginalData];
  jint sizeBmpWords = URShift32(((IOSByteArray *) nil_chk(data))->size_ - 14 + 1, 1);
  JavaIoByteArrayOutputStream *os = [[JavaIoByteArrayOutputStream alloc] init];
  
#line 675
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:1];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:9];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:(jint) 0x0300];
  [ComItextpdfTextPdfCodecWmfMetaDo writeDWordWithJavaIoOutputStream:os withInt:9 + 4 + 5 + 5 + 13 + sizeBmpWords + 3];
  
#line 680
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:1];
  [ComItextpdfTextPdfCodecWmfMetaDo writeDWordWithJavaIoOutputStream:os withInt:14 + sizeBmpWords];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:0];
  
#line 684
  [ComItextpdfTextPdfCodecWmfMetaDo writeDWordWithJavaIoOutputStream:os withInt:4];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:ComItextpdfTextPdfCodecWmfMetaDo_META_SETMAPMODE];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:8];
  
#line 688
  [ComItextpdfTextPdfCodecWmfMetaDo writeDWordWithJavaIoOutputStream:os withInt:5];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:ComItextpdfTextPdfCodecWmfMetaDo_META_SETWINDOWORG];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:0];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:0];
  
#line 693
  [ComItextpdfTextPdfCodecWmfMetaDo writeDWordWithJavaIoOutputStream:os withInt:5];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:ComItextpdfTextPdfCodecWmfMetaDo_META_SETWINDOWEXT];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:J2ObjCFpToInt([image getHeight])];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:J2ObjCFpToInt([image getWidth])];
  
#line 698
  [ComItextpdfTextPdfCodecWmfMetaDo writeDWordWithJavaIoOutputStream:os withInt:13 + sizeBmpWords];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:ComItextpdfTextPdfCodecWmfMetaDo_META_DIBSTRETCHBLT];
  [ComItextpdfTextPdfCodecWmfMetaDo writeDWordWithJavaIoOutputStream:os withInt:(jint) 0x00cc0020];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:J2ObjCFpToInt([image getHeight])];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:J2ObjCFpToInt([image getWidth])];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:0];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:0];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:J2ObjCFpToInt([image getHeight])];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:J2ObjCFpToInt([image getWidth])];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:0];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:0];
  [os writeWithByteArray:data withInt:14 withInt:data->size_ - 14];
  if ((data->size_ & 1) == 1)
#line 711
  [os writeWithInt:0];
  
#line 728
  [ComItextpdfTextPdfCodecWmfMetaDo writeDWordWithJavaIoOutputStream:os withInt:3];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:0];
  [os close];
  return [os toByteArray];
}


#line 734
+ (void)writeWordWithJavaIoOutputStream:(JavaIoOutputStream *)os
                                withInt:(jint)v {
  
#line 735
  [((JavaIoOutputStream *) nil_chk(os)) writeWithInt:v & (jint) 0xff];
  [os writeWithInt:(URShift32(v, 8)) & (jint) 0xff];
}


#line 739
+ (void)writeDWordWithJavaIoOutputStream:(JavaIoOutputStream *)os
                                 withInt:(jint)v {
  
#line 740
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:v & (jint) 0xffff];
  [ComItextpdfTextPdfCodecWmfMetaDo writeWordWithJavaIoOutputStream:os withInt:(URShift32(v, 16)) & (jint) 0xffff];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecWmfMetaDo *)other {
  [super copyAllFieldsTo:other];
  other->bottom_ = bottom_;
  other->cb_ = cb_;
  other->in_ = in_;
  other->inch_ = inch_;
  other->left_ = left_;
  other->right_ = right_;
  other->state_ = state_;
  other->top_ = top_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoInputStream:withComItextpdfTextPdfPdfContentByte:", "MetaDo", NULL, 0x1, NULL },
    { "readAll", NULL, "V", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "outputTextWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withNSString:", "outputText", "V", 0x1, NULL },
    { "isNullStrokeFillWithBoolean:", "isNullStrokeFill", "Z", 0x1, NULL },
    { "strokeAndFill", NULL, "V", 0x1, NULL },
    { "getArcWithFloat:withFloat:withFloat:withFloat:", "getArc", "F", 0x8, NULL },
    { "wrapBMPWithComItextpdfTextImage:", "wrapBMP", "[B", 0x9, "Ljava.io.IOException;" },
    { "writeWordWithJavaIoOutputStream:withInt:", "writeWord", "V", 0x9, "Ljava.io.IOException;" },
    { "writeDWordWithJavaIoOutputStream:withInt:", "writeDWord", "V", 0x9, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "META_SETBKCOLOR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETBKCOLOR },
    { "META_SETBKMODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETBKMODE },
    { "META_SETMAPMODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETMAPMODE },
    { "META_SETROP2_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETROP2 },
    { "META_SETRELABS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETRELABS },
    { "META_SETPOLYFILLMODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETPOLYFILLMODE },
    { "META_SETSTRETCHBLTMODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETSTRETCHBLTMODE },
    { "META_SETTEXTCHAREXTRA_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETTEXTCHAREXTRA },
    { "META_SETTEXTCOLOR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETTEXTCOLOR },
    { "META_SETTEXTJUSTIFICATION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETTEXTJUSTIFICATION },
    { "META_SETWINDOWORG_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETWINDOWORG },
    { "META_SETWINDOWEXT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETWINDOWEXT },
    { "META_SETVIEWPORTORG_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETVIEWPORTORG },
    { "META_SETVIEWPORTEXT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETVIEWPORTEXT },
    { "META_OFFSETWINDOWORG_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_OFFSETWINDOWORG },
    { "META_SCALEWINDOWEXT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SCALEWINDOWEXT },
    { "META_OFFSETVIEWPORTORG_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_OFFSETVIEWPORTORG },
    { "META_SCALEVIEWPORTEXT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SCALEVIEWPORTEXT },
    { "META_LINETO_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_LINETO },
    { "META_MOVETO_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_MOVETO },
    { "META_EXCLUDECLIPRECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_EXCLUDECLIPRECT },
    { "META_INTERSECTCLIPRECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_INTERSECTCLIPRECT },
    { "META_ARC_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_ARC },
    { "META_ELLIPSE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_ELLIPSE },
    { "META_FLOODFILL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_FLOODFILL },
    { "META_PIE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_PIE },
    { "META_RECTANGLE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_RECTANGLE },
    { "META_ROUNDRECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_ROUNDRECT },
    { "META_PATBLT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_PATBLT },
    { "META_SAVEDC_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SAVEDC },
    { "META_SETPIXEL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETPIXEL },
    { "META_OFFSETCLIPRGN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_OFFSETCLIPRGN },
    { "META_TEXTOUT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_TEXTOUT },
    { "META_BITBLT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_BITBLT },
    { "META_STRETCHBLT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_STRETCHBLT },
    { "META_POLYGON_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_POLYGON },
    { "META_POLYLINE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_POLYLINE },
    { "META_ESCAPE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_ESCAPE },
    { "META_RESTOREDC_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_RESTOREDC },
    { "META_FILLREGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_FILLREGION },
    { "META_FRAMEREGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_FRAMEREGION },
    { "META_INVERTREGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_INVERTREGION },
    { "META_PAINTREGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_PAINTREGION },
    { "META_SELECTCLIPREGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SELECTCLIPREGION },
    { "META_SELECTOBJECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SELECTOBJECT },
    { "META_SETTEXTALIGN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETTEXTALIGN },
    { "META_CHORD_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_CHORD },
    { "META_SETMAPPERFLAGS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETMAPPERFLAGS },
    { "META_EXTTEXTOUT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_EXTTEXTOUT },
    { "META_SETDIBTODEV_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETDIBTODEV },
    { "META_SELECTPALETTE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SELECTPALETTE },
    { "META_REALIZEPALETTE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_REALIZEPALETTE },
    { "META_ANIMATEPALETTE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_ANIMATEPALETTE },
    { "META_SETPALENTRIES_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_SETPALENTRIES },
    { "META_POLYPOLYGON_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_POLYPOLYGON },
    { "META_RESIZEPALETTE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_RESIZEPALETTE },
    { "META_DIBBITBLT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_DIBBITBLT },
    { "META_DIBSTRETCHBLT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_DIBSTRETCHBLT },
    { "META_DIBCREATEPATTERNBRUSH_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_DIBCREATEPATTERNBRUSH },
    { "META_STRETCHDIB_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_STRETCHDIB },
    { "META_EXTFLOODFILL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_EXTFLOODFILL },
    { "META_DELETEOBJECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_DELETEOBJECT },
    { "META_CREATEPALETTE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEPALETTE },
    { "META_CREATEPATTERNBRUSH_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEPATTERNBRUSH },
    { "META_CREATEPENINDIRECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEPENINDIRECT },
    { "META_CREATEFONTINDIRECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEFONTINDIRECT },
    { "META_CREATEBRUSHINDIRECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEBRUSHINDIRECT },
    { "META_CREATEREGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecWmfMetaDo_META_CREATEREGION },
    { "cb_", NULL, 0x1, "Lcom.itextpdf.text.pdf.PdfContentByte;", NULL,  },
    { "in_", NULL, 0x1, "Lcom.itextpdf.text.pdf.codec.wmf.InputMeta;", NULL,  },
    { "left_", NULL, 0x0, "I", NULL,  },
    { "top_", NULL, 0x0, "I", NULL,  },
    { "right_", NULL, 0x0, "I", NULL,  },
    { "bottom_", NULL, 0x0, "I", NULL,  },
    { "inch_", NULL, 0x0, "I", NULL,  },
    { "state_", NULL, 0x0, "Lcom.itextpdf.text.pdf.codec.wmf.MetaState;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecWmfMetaDo = { "MetaDo", "com.itextpdf.text.pdf.codec.wmf", NULL, 0x1, 9, methods, 76, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecWmfMetaDo;
}

@end
