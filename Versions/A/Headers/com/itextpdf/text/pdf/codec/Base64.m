//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/Base64.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/Base64.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/codec/Base64.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/Serializable.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/zip/GZIPInputStream.h"
#include "java/util/zip/GZIPOutputStream.h"

BOOL ComItextpdfTextPdfCodecBase64_initialized = NO;


#line 121
@implementation ComItextpdfTextPdfCodecBase64

NSString * ComItextpdfTextPdfCodecBase64_PREFERRED_ENCODING_ = 
#line 178
@"UTF-8";
IOSByteArray * ComItextpdfTextPdfCodecBase64__STANDARD_ALPHABET_;
IOSByteArray * ComItextpdfTextPdfCodecBase64__STANDARD_DECODABET_;
IOSByteArray * ComItextpdfTextPdfCodecBase64__URL_SAFE_ALPHABET_;
IOSByteArray * ComItextpdfTextPdfCodecBase64__URL_SAFE_DECODABET_;
IOSByteArray * ComItextpdfTextPdfCodecBase64__ORDERED_ALPHABET_;
IOSByteArray * ComItextpdfTextPdfCodecBase64__ORDERED_DECODABET_;


#line 387
+ (IOSByteArray *)getAlphabetWithInt:(jint)options {
  
#line 388
  if ((options & ComItextpdfTextPdfCodecBase64_URL_SAFE) == ComItextpdfTextPdfCodecBase64_URL_SAFE) return ComItextpdfTextPdfCodecBase64__URL_SAFE_ALPHABET_;
  else if ((options & ComItextpdfTextPdfCodecBase64_ORDERED) == ComItextpdfTextPdfCodecBase64_ORDERED) return ComItextpdfTextPdfCodecBase64__ORDERED_ALPHABET_;
  else return ComItextpdfTextPdfCodecBase64__STANDARD_ALPHABET_;
}


#line 402
+ (IOSByteArray *)getDecodabetWithInt:(jint)options {
  
#line 403
  if ((options & ComItextpdfTextPdfCodecBase64_URL_SAFE) == ComItextpdfTextPdfCodecBase64_URL_SAFE) return ComItextpdfTextPdfCodecBase64__URL_SAFE_DECODABET_;
  else if ((options & ComItextpdfTextPdfCodecBase64_ORDERED) == ComItextpdfTextPdfCodecBase64_ORDERED) return ComItextpdfTextPdfCodecBase64__ORDERED_DECODABET_;
  else return ComItextpdfTextPdfCodecBase64__STANDARD_DECODABET_;
}


#line 412
- (instancetype)init {
  return [super init];
}


#line 445
+ (void)usageWithNSString:(NSString *)msg {
  
#line 446
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:msg];
  [JavaLangSystem_get_err_() printlnWithNSString:@"Usage: java Base64 -e|-d inputfile outputfile"];
}


#line 469
+ (IOSByteArray *)encode3to4WithByteArray:(IOSByteArray *)b4
                            withByteArray:(IOSByteArray *)threeBytes
                                  withInt:(jint)numSigBytes
                                  withInt:(jint)options {
  
#line 470
  (void) [ComItextpdfTextPdfCodecBase64 encode3to4WithByteArray:threeBytes withInt:0 withInt:numSigBytes withByteArray:b4 withInt:0 withInt:options];
  return b4;
}


#line 498
+ (IOSByteArray *)encode3to4WithByteArray:(IOSByteArray *)source
                                  withInt:(jint)srcOffset
                                  withInt:(jint)numSigBytes
                            withByteArray:(IOSByteArray *)destination
                                  withInt:(jint)destOffset
                                  withInt:(jint)options {
  
#line 501
  IOSByteArray *ALPHABET = [ComItextpdfTextPdfCodecBase64 getAlphabetWithInt:options];
  
#line 514
  jint inBuff = (numSigBytes > 0 ? (URShift32((LShift32(IOSByteArray_Get(nil_chk(source), srcOffset), 24)), 8)) : 0) |
#line 515
  (numSigBytes > 1 ? (URShift32((LShift32(IOSByteArray_Get(nil_chk(source), srcOffset + 1), 24)), 16)) : 0) |
#line 516
  (numSigBytes > 2 ? (URShift32((LShift32(IOSByteArray_Get(nil_chk(source), srcOffset + 2), 24)), 24)) : 0);
  
#line 518
  switch (numSigBytes) {
    case 3:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(ALPHABET), (URShift32(inBuff, 18)));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(ALPHABET, (URShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = IOSByteArray_Get(ALPHABET, (URShift32(inBuff, 6)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 3) = IOSByteArray_Get(ALPHABET, (inBuff) & (jint) 0x3f);
    return destination;
    
#line 526
    case 2:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(ALPHABET), (URShift32(inBuff, 18)));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(ALPHABET, (URShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = IOSByteArray_Get(ALPHABET, (URShift32(inBuff, 6)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 3) = ComItextpdfTextPdfCodecBase64_EQUALS_SIGN;
    return destination;
    
#line 533
    case 1:
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = IOSByteArray_Get(nil_chk(ALPHABET), (URShift32(inBuff, 18)));
    *IOSByteArray_GetRef(destination, destOffset + 1) = IOSByteArray_Get(ALPHABET, (URShift32(inBuff, 12)) & (jint) 0x3f);
    *IOSByteArray_GetRef(destination, destOffset + 2) = ComItextpdfTextPdfCodecBase64_EQUALS_SIGN;
    *IOSByteArray_GetRef(destination, destOffset + 3) = ComItextpdfTextPdfCodecBase64_EQUALS_SIGN;
    return destination;
    
#line 540
    default:
    return destination;
  }
}


#line 558
+ (NSString *)encodeObjectWithJavaIoSerializable:(id<JavaIoSerializable>)serializableObject {
  
#line 559
  return [ComItextpdfTextPdfCodecBase64 encodeObjectWithJavaIoSerializable:serializableObject withInt:ComItextpdfTextPdfCodecBase64_NO_OPTIONS];
}


#line 587
+ (NSString *)encodeObjectWithJavaIoSerializable:(id<JavaIoSerializable>)serializableObject
                                         withInt:(jint)options {
  
#line 589
  JavaIoByteArrayOutputStream *baos = nil;
  JavaIoOutputStream *b64os = nil;
  JavaIoObjectOutputStream *oos = nil;
  JavaUtilZipGZIPOutputStream *gzos = nil;
  
#line 595
  jint gzip = (options & ComItextpdfTextPdfCodecBase64_GZIP);
  
#line 598
  @try {
    
#line 600
    baos = [[JavaIoByteArrayOutputStream alloc] init];
    b64os = [[ComItextpdfTextPdfCodecBase64_OutputStream alloc] initWithJavaIoOutputStream:baos withInt:ComItextpdfTextPdfCodecBase64_ENCODE | options];
    
#line 604
    if (gzip == ComItextpdfTextPdfCodecBase64_GZIP) {
      gzos = [[JavaUtilZipGZIPOutputStream alloc] initWithJavaIoOutputStream:b64os];
      oos = [[JavaIoObjectOutputStream alloc] initWithJavaIoOutputStream:gzos];
    }
    else
#line 609
    oos = [[JavaIoObjectOutputStream alloc] initWithJavaIoOutputStream:b64os];
    
#line 611
    [((JavaIoObjectOutputStream *) nil_chk(oos)) writeObjectWithId:serializableObject];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
    return nil;
  }
  @finally {
    @try {
      
#line 618
      [((JavaIoObjectOutputStream *) nil_chk(oos)) close];
    }
    @catch (
#line 618
    JavaLangException *e) {
    }
    
#line 619
    @try {
      
#line 619
      [((JavaUtilZipGZIPOutputStream *) nil_chk(gzos)) close];
    }
    @catch (
#line 619
    JavaLangException *e) {
    }
    
#line 620
    @try {
      
#line 620
      [((JavaIoOutputStream *) nil_chk(b64os)) close];
    }
    @catch (
#line 620
    JavaLangException *e) {
    }
    
#line 621
    @try {
      
#line 621
      [((JavaIoByteArrayOutputStream *) nil_chk(baos)) close];
    }
    @catch (
#line 621
    JavaLangException *e) {
    }
  }
  
#line 625
  @try {
    return [NSString stringWithBytes:[((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray] charsetName:ComItextpdfTextPdfCodecBase64_PREFERRED_ENCODING_];
  }
  @catch (JavaIoUnsupportedEncodingException *uue) {
    return [NSString stringWithBytes:[((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray]];
  }
}


#line 643
+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source {
  
#line 644
  return [ComItextpdfTextPdfCodecBase64 encodeBytesWithByteArray:source withInt:0 withInt:((IOSByteArray *) nil_chk(source))->size_ withInt:ComItextpdfTextPdfCodecBase64_NO_OPTIONS];
}


#line 669
+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)options {
  
#line 670
  return [ComItextpdfTextPdfCodecBase64 encodeBytesWithByteArray:source withInt:0 withInt:((IOSByteArray *) nil_chk(source))->size_ withInt:options];
}


#line 683
+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)off
                               withInt:(jint)len {
  
#line 684
  return [ComItextpdfTextPdfCodecBase64 encodeBytesWithByteArray:source withInt:off withInt:len withInt:ComItextpdfTextPdfCodecBase64_NO_OPTIONS];
}


#line 712
+ (NSString *)encodeBytesWithByteArray:(IOSByteArray *)source
                               withInt:(jint)off
                               withInt:(jint)len
                               withInt:(jint)options {
  
#line 714
  jint dontBreakLines = (options & ComItextpdfTextPdfCodecBase64_DONT_BREAK_LINES);
  jint gzip = (options & ComItextpdfTextPdfCodecBase64_GZIP);
  
#line 718
  if (gzip == ComItextpdfTextPdfCodecBase64_GZIP) {
    JavaIoByteArrayOutputStream *baos = nil;
    JavaUtilZipGZIPOutputStream *gzos = nil;
    ComItextpdfTextPdfCodecBase64_OutputStream *b64os = nil;
    
#line 724
    @try {
      
#line 726
      baos = [[JavaIoByteArrayOutputStream alloc] init];
      b64os = [[ComItextpdfTextPdfCodecBase64_OutputStream alloc] initWithJavaIoOutputStream:baos withInt:ComItextpdfTextPdfCodecBase64_ENCODE | options];
      gzos = [[JavaUtilZipGZIPOutputStream alloc] initWithJavaIoOutputStream:b64os];
      
#line 730
      [gzos writeWithByteArray:source withInt:off withInt:len];
      [gzos close];
    }
    @catch (JavaIoIOException *e) {
      [((JavaIoIOException *) nil_chk(e)) printStackTrace];
      return nil;
    }
    @finally {
      @try {
        
#line 738
        [((JavaUtilZipGZIPOutputStream *) nil_chk(gzos)) close];
      }
      @catch (
#line 738
      JavaLangException *e) {
      }
      
#line 739
      @try {
        
#line 739
        [((ComItextpdfTextPdfCodecBase64_OutputStream *) nil_chk(b64os)) close];
      }
      @catch (
#line 739
      JavaLangException *e) {
      }
      
#line 740
      @try {
        
#line 740
        [((JavaIoByteArrayOutputStream *) nil_chk(baos)) close];
      }
      @catch (
#line 740
      JavaLangException *e) {
      }
    }
    
#line 744
    @try {
      return [NSString stringWithBytes:[((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray] charsetName:ComItextpdfTextPdfCodecBase64_PREFERRED_ENCODING_];
    }
    @catch (JavaIoUnsupportedEncodingException *uue) {
      return [NSString stringWithBytes:[((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray]];
    }
  }
  else {
    
#line 755
    jboolean breakLines = dontBreakLines == 0;
    
#line 757
    jint len43 = len * 4 / 3;
    IOSByteArray *outBuff = [IOSByteArray arrayWithLength:(len43) +
#line 759
    ((len % 3) > 0 ? 4 : 0) +
#line 760
    (breakLines ? (len43 / ComItextpdfTextPdfCodecBase64_MAX_LINE_LENGTH) : 0)];
    jint d = 0;
    jint e = 0;
    jint len2 = len - 2;
    jint lineLength = 0;
    for (; d < len2; d += 3, e += 4) {
      (void) [ComItextpdfTextPdfCodecBase64 encode3to4WithByteArray:source withInt:d + off withInt:3 withByteArray:outBuff withInt:e withInt:options];
      
#line 768
      lineLength += 4;
      if (breakLines && lineLength == ComItextpdfTextPdfCodecBase64_MAX_LINE_LENGTH) {
        *IOSByteArray_GetRef(outBuff, e + 4) = ComItextpdfTextPdfCodecBase64_NEW_LINE;
        e++;
        lineLength = 0;
      }
    }
    
#line 776
    if (d < len) {
      (void) [ComItextpdfTextPdfCodecBase64 encode3to4WithByteArray:source withInt:d + off withInt:len - d withByteArray:outBuff withInt:e withInt:options];
      e += 4;
    }
    
#line 783
    @try {
      return [NSString stringWithBytes:outBuff offset:0 length:e charsetName:ComItextpdfTextPdfCodecBase64_PREFERRED_ENCODING_];
    }
    @catch (JavaIoUnsupportedEncodingException *uue) {
      return [NSString stringWithBytes:outBuff offset:0 length:e];
    }
  }
}


#line 826
+ (jint)decode4to3WithByteArray:(IOSByteArray *)source
                        withInt:(jint)srcOffset
                  withByteArray:(IOSByteArray *)destination
                        withInt:(jint)destOffset
                        withInt:(jint)options {
  
#line 827
  IOSByteArray *DECODABET = [ComItextpdfTextPdfCodecBase64 getDecodabetWithInt:options];
  
#line 830
  if (IOSByteArray_Get(nil_chk(source), srcOffset + 2) == ComItextpdfTextPdfCodecBase64_EQUALS_SIGN) {
    
#line 834
    jint outBuff = (LShift32((IOSByteArray_Get(nil_chk(DECODABET), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) |
#line 835
    (LShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12));
    
#line 837
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = (jbyte) (URShift32(outBuff, 16));
    return 1;
  }
  else
#line 842
  if (IOSByteArray_Get(source, srcOffset + 3) == ComItextpdfTextPdfCodecBase64_EQUALS_SIGN) {
    
#line 847
    jint outBuff = (LShift32((IOSByteArray_Get(nil_chk(DECODABET), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) |
#line 848
    (LShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12)) |
#line 849
    (LShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 2)) & (jint) 0xFF), 6));
    
#line 851
    *IOSByteArray_GetRef(nil_chk(destination), destOffset) = (jbyte) (URShift32(outBuff, 16));
    *IOSByteArray_GetRef(destination, destOffset + 1) = (jbyte) (URShift32(outBuff, 8));
    return 2;
  }
  else {
    
#line 858
    @try {
      
#line 864
      jint outBuff = (LShift32((IOSByteArray_Get(nil_chk(DECODABET), IOSByteArray_Get(source, srcOffset)) & (jint) 0xFF), 18)) |
#line 865
      (LShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 1)) & (jint) 0xFF), 12)) |
#line 866
      (LShift32((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 2)) & (jint) 0xFF), 6)) |
#line 867
      ((IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 3)) & (jint) 0xFF));
      
#line 870
      *IOSByteArray_GetRef(nil_chk(destination), destOffset) = (jbyte) (RShift32(outBuff, 16));
      *IOSByteArray_GetRef(destination, destOffset + 1) = (jbyte) (RShift32(outBuff, 8));
      *IOSByteArray_GetRef(destination, destOffset + 2) = (jbyte) (outBuff);
      
#line 874
      return 3;
    }
    @catch (
#line 875
    JavaLangException *e) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("B$B", IOSByteArray_Get(source, srcOffset), @": ", (IOSByteArray_Get(nil_chk(DECODABET), IOSByteArray_Get(source, srcOffset))))];
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("B$B", IOSByteArray_Get(source, srcOffset + 1), @": ", (IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 1))))];
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("B$B", IOSByteArray_Get(source, srcOffset + 2), @": ", (IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 2))))];
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("B$B", IOSByteArray_Get(source, srcOffset + 3), @": ", (IOSByteArray_Get(DECODABET, IOSByteArray_Get(source, srcOffset + 3))))];
      return -1;
    }
  }
}


#line 899
+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)source
                              withInt:(jint)off
                              withInt:(jint)len
                              withInt:(jint)options {
  
#line 900
  IOSByteArray *DECODABET = [ComItextpdfTextPdfCodecBase64 getDecodabetWithInt:options];
  
#line 902
  jint len34 = len * 3 / 4;
  IOSByteArray *outBuff = [IOSByteArray arrayWithLength:len34];
  jint outBuffPosn = 0;
  
#line 906
  IOSByteArray *b4 = [IOSByteArray arrayWithLength:4];
  jint b4Posn = 0;
  jint i = 0;
  jbyte sbiCrop = 0;
  jbyte sbiDecode = 0;
  for (i = off; i < off + len; i++) {
    sbiCrop = (jbyte) (IOSByteArray_Get(nil_chk(source), i) & (jint) 0x7f);
    sbiDecode = IOSByteArray_Get(nil_chk(DECODABET), sbiCrop);
    
#line 915
    if (sbiDecode >= ComItextpdfTextPdfCodecBase64_WHITE_SPACE_ENC) {
      
#line 917
      if (sbiDecode >= ComItextpdfTextPdfCodecBase64_EQUALS_SIGN_ENC) {
        *IOSByteArray_GetRef(b4, b4Posn++) = sbiCrop;
        if (b4Posn > 3) {
          outBuffPosn += [ComItextpdfTextPdfCodecBase64 decode4to3WithByteArray:b4 withInt:0 withByteArray:outBuff withInt:outBuffPosn withInt:options];
          b4Posn = 0;
          
#line 924
          if (sbiCrop == ComItextpdfTextPdfCodecBase64_EQUALS_SIGN)
#line 925
          break;
        }
      }
    }
    else {
      
#line 932
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$I$B$", @"Bad Base64 input character at ", i, @": ", IOSByteArray_Get(source, i), @"(decimal)")];
      return nil;
    }
  }
  
#line 937
  IOSByteArray *out = [IOSByteArray arrayWithLength:outBuffPosn];
  [JavaLangSystem arraycopyWithId:outBuff withInt:0 withId:out withInt:0 withInt:outBuffPosn];
  return out;
}

+ (IOSByteArray *)decodeWithNSString:(NSString *)s {
  
#line 954
  return [ComItextpdfTextPdfCodecBase64 decodeWithNSString:s withInt:ComItextpdfTextPdfCodecBase64_NO_OPTIONS];
}


#line 967
+ (IOSByteArray *)decodeWithNSString:(NSString *)s
                             withInt:(jint)options {
  
#line 968
  IOSByteArray *bytes;
  @try {
    bytes = [((NSString *) nil_chk(s)) getBytesWithCharsetName:ComItextpdfTextPdfCodecBase64_PREFERRED_ENCODING_];
  }
  @catch (JavaIoUnsupportedEncodingException *uee) {
    bytes = [((NSString *) nil_chk(s)) getBytes];
  }
  
#line 978
  bytes = [ComItextpdfTextPdfCodecBase64 decodeWithByteArray:bytes withInt:0 withInt:((IOSByteArray *) nil_chk(bytes))->size_ withInt:options];
  
#line 983
  if (bytes != nil && bytes->size_ >= 4) {
    
#line 985
    jint head = (IOSByteArray_Get(bytes, 0) & (jint) 0xff) | ((LShift32(IOSByteArray_Get(bytes, 1), 8)) & (jint) 0xff00);
    if (JavaUtilZipGZIPInputStream_GZIP_MAGIC == head) {
      JavaIoByteArrayInputStream *bais = nil;
      JavaUtilZipGZIPInputStream *gzis = nil;
      JavaIoByteArrayOutputStream *baos = nil;
      IOSByteArray *buffer = [IOSByteArray arrayWithLength:2048];
      jint length = 0;
      
#line 993
      @try {
        baos = [[JavaIoByteArrayOutputStream alloc] init];
        bais = [[JavaIoByteArrayInputStream alloc] initWithByteArray:bytes];
        gzis = [[JavaUtilZipGZIPInputStream alloc] initWithJavaIoInputStream:bais];
        
#line 998
        while ((length = [gzis readWithByteArray:buffer]) >= 0) {
          [baos writeWithByteArray:buffer withInt:0 withInt:length];
        }
        
#line 1003
        bytes = [baos toByteArray];
      }
      @catch (
#line 1006
      JavaIoIOException *e) {
      }
      @finally {
        
#line 1010
        @try {
          
#line 1010
          [((JavaIoByteArrayOutputStream *) nil_chk(baos)) close];
        }
        @catch (
#line 1010
        JavaLangException *e) {
        }
        
#line 1011
        @try {
          
#line 1011
          [((JavaUtilZipGZIPInputStream *) nil_chk(gzis)) close];
        }
        @catch (
#line 1011
        JavaLangException *e) {
        }
        
#line 1012
        @try {
          
#line 1012
          [((JavaIoByteArrayInputStream *) nil_chk(bais)) close];
        }
        @catch (
#line 1012
        JavaLangException *e) {
        }
      }
    }
  }
  
#line 1018
  return bytes;
}


#line 1032
+ (id)decodeToObjectWithNSString:(NSString *)encodedObject {
  
#line 1034
  IOSByteArray *objBytes = [ComItextpdfTextPdfCodecBase64 decodeWithNSString:encodedObject];
  
#line 1036
  JavaIoByteArrayInputStream *bais = nil;
  JavaIoObjectInputStream *ois = nil;
  id obj = nil;
  
#line 1040
  @try {
    bais = [[JavaIoByteArrayInputStream alloc] initWithByteArray:objBytes];
    ois = [[JavaIoObjectInputStream alloc] initWithJavaIoInputStream:bais];
    
#line 1044
    obj = [ois readObject];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  @catch (JavaLangClassNotFoundException *e) {
    [((JavaLangClassNotFoundException *) nil_chk(e)) printStackTrace];
  }
  @finally {
    @try {
      
#line 1053
      [((JavaIoByteArrayInputStream *) nil_chk(bais)) close];
    }
    @catch (
#line 1053
    JavaLangException *e) {
    }
    
#line 1054
    @try {
      
#line 1054
      [((JavaIoObjectInputStream *) nil_chk(ois)) close];
    }
    @catch (
#line 1054
    JavaLangException *e) {
    }
  }
  return obj;
}


#line 1071
+ (jboolean)encodeToFileWithByteArray:(IOSByteArray *)dataToEncode
                         withNSString:(NSString *)filename {
  
#line 1072
  jboolean success = NO;
  ComItextpdfTextPdfCodecBase64_OutputStream *bos = nil;
  @try {
    bos = [[ComItextpdfTextPdfCodecBase64_OutputStream alloc] initWithJavaIoOutputStream:
#line 1076
    [[JavaIoFileOutputStream alloc] initWithNSString:filename] withInt:ComItextpdfTextPdfCodecBase64_ENCODE];
    [bos writeWithByteArray:dataToEncode];
    success = YES;
  }
  @catch (JavaIoIOException *e) {
    
#line 1082
    success = NO;
  }
  @finally {
    @try {
      
#line 1085
      [((ComItextpdfTextPdfCodecBase64_OutputStream *) nil_chk(bos)) close];
    }
    @catch (
#line 1085
    JavaLangException *e) {
    }
  }
  return success;
}


#line 1101
+ (jboolean)decodeToFileWithNSString:(NSString *)dataToDecode
                        withNSString:(NSString *)filename {
  
#line 1102
  jboolean success = NO;
  ComItextpdfTextPdfCodecBase64_OutputStream *bos = nil;
  @try {
    bos = [[ComItextpdfTextPdfCodecBase64_OutputStream alloc] initWithJavaIoOutputStream:
#line 1106
    [[JavaIoFileOutputStream alloc] initWithNSString:filename] withInt:ComItextpdfTextPdfCodecBase64_DECODE];
    [bos writeWithByteArray:[((NSString *) nil_chk(dataToDecode)) getBytesWithCharsetName:ComItextpdfTextPdfCodecBase64_PREFERRED_ENCODING_]];
    success = YES;
  }
  @catch (JavaIoIOException *e) {
    success = NO;
  }
  @finally {
    @try {
      
#line 1114
      [((ComItextpdfTextPdfCodecBase64_OutputStream *) nil_chk(bos)) close];
    }
    @catch (
#line 1114
    JavaLangException *e) {
    }
  }
  return success;
}


#line 1132
+ (IOSByteArray *)decodeFromFileWithNSString:(NSString *)filename {
  
#line 1133
  IOSByteArray *decodedData = nil;
  ComItextpdfTextPdfCodecBase64_InputStream *bis = nil;
  @try {
    
#line 1137
    JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:filename];
    IOSByteArray *buffer = nil;
    jint length = 0;
    jint numBytes = 0;
    
#line 1143
    if ([file length] > JavaLangInteger_MAX_VALUE) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$J$", @"File is too big for this convenience method (", [file length], @" bytes).")];
      return nil;
    }
    buffer = [IOSByteArray arrayWithLength:(jint) [file length]];
    
#line 1150
    bis = [[ComItextpdfTextPdfCodecBase64_InputStream alloc] initWithJavaIoInputStream:
#line 1151
    [[JavaIoBufferedInputStream alloc] initWithJavaIoInputStream:
#line 1152
    [[JavaIoFileInputStream alloc] initWithJavaIoFile:file]] withInt:ComItextpdfTextPdfCodecBase64_DECODE];
    
#line 1155
    while ((numBytes = [bis readWithByteArray:buffer withInt:length withInt:4096]) >= 0)
#line 1156
    length += numBytes;
    
#line 1159
    decodedData = [IOSByteArray arrayWithLength:length];
    [JavaLangSystem arraycopyWithId:buffer withInt:0 withId:decodedData withInt:0 withInt:length];
  }
  @catch (
#line 1163
  JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"Error decoding from file ", filename)];
  }
  @finally {
    if (nil != bis) {
      @try {
        
#line 1168
        [bis close];
      }
      @catch (
#line 1168
      JavaLangException *e) {
      }
    }
  }
  return decodedData;
}


#line 1186
+ (NSString *)encodeFromFileWithNSString:(NSString *)filename {
  
#line 1187
  NSString *encodedData = nil;
  ComItextpdfTextPdfCodecBase64_InputStream *bis = nil;
  @try {
    
#line 1191
    JavaIoFile *file = [[JavaIoFile alloc] initWithNSString:filename];
    IOSByteArray *buffer = [IOSByteArray arrayWithLength:[JavaLangMath maxWithInt:J2ObjCFpToInt(([file length] * 1.4)) withInt:40]];
    jint length = 0;
    jint numBytes = 0;
    
#line 1197
    bis = [[ComItextpdfTextPdfCodecBase64_InputStream alloc] initWithJavaIoInputStream:
#line 1198
    [[JavaIoBufferedInputStream alloc] initWithJavaIoInputStream:
#line 1199
    [[JavaIoFileInputStream alloc] initWithJavaIoFile:file]] withInt:ComItextpdfTextPdfCodecBase64_ENCODE];
    
#line 1202
    while ((numBytes = [bis readWithByteArray:buffer withInt:length withInt:4096]) >= 0)
#line 1203
    length += numBytes;
    
#line 1206
    encodedData = [NSString stringWithBytes:buffer offset:0 length:length charsetName:ComItextpdfTextPdfCodecBase64_PREFERRED_ENCODING_];
  }
  @catch (
#line 1209
  JavaIoIOException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"Error encoding from file ", filename)];
  }
  @finally {
    @try {
      
#line 1213
      [((ComItextpdfTextPdfCodecBase64_InputStream *) nil_chk(bis)) close];
    }
    @catch (
#line 1213
    JavaLangException *e) {
    }
  }
  return encodedData;
}


#line 1226
+ (void)encodeFileToFileWithNSString:(NSString *)infile
                        withNSString:(NSString *)outfile {
  
#line 1227
  NSString *encoded = [ComItextpdfTextPdfCodecBase64 encodeFromFileWithNSString:infile];
  JavaIoOutputStream *out = nil;
  @try {
    out = [[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:
#line 1231
    [[JavaIoFileOutputStream alloc] initWithNSString:outfile]];
    [out writeWithByteArray:[((NSString *) nil_chk(encoded)) getBytesWithCharsetName:@"US-ASCII"]];
  }
  @catch (JavaIoIOException *ex) {
    [((JavaIoIOException *) nil_chk(ex)) printStackTrace];
  }
  @finally {
    @try {
      
#line 1238
      [((JavaIoOutputStream *) nil_chk(out)) close];
    }
    @catch (
#line 1238
    JavaLangException *ex) {
    }
  }
}


#line 1250
+ (void)decodeFileToFileWithNSString:(NSString *)infile
                        withNSString:(NSString *)outfile {
  
#line 1251
  IOSByteArray *decoded = [ComItextpdfTextPdfCodecBase64 decodeFromFileWithNSString:infile];
  JavaIoOutputStream *out = nil;
  @try {
    out = [[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:
#line 1255
    [[JavaIoFileOutputStream alloc] initWithNSString:outfile]];
    [out writeWithByteArray:decoded];
  }
  @catch (JavaIoIOException *ex) {
    [((JavaIoIOException *) nil_chk(ex)) printStackTrace];
  }
  @finally {
    @try {
      
#line 1262
      [((JavaIoOutputStream *) nil_chk(out)) close];
    }
    @catch (
#line 1262
    JavaLangException *ex) {
    }
  }
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfCodecBase64 class]) {
    ComItextpdfTextPdfCodecBase64__STANDARD_ALPHABET_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 194
      (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G',
#line 195
      (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N',
#line 196
      (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U',
#line 197
      (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z',
#line 198
      (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g',
#line 199
      (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n',
#line 200
      (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u',
#line 201
      (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z',
#line 202
      (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5',
#line 203
      (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '+', (jbyte) '/' } count:64];
      ComItextpdfTextPdfCodecBase64__STANDARD_DECODABET_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 213
        -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 214
        -5, -5,
#line 215
        -9, -9,
#line 216
        -5,
#line 217
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 218
        -9, -9, -9, -9, -9,
#line 219
        -5,
#line 220
        -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 221
        62,
#line 222
        -9, -9, -9,
#line 223
        63,
#line 224
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
#line 225
        -9, -9, -9,
#line 226
        -1,
#line 227
        -9, -9, -9,
#line 228
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
#line 229
        14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
#line 230
        -9, -9, -9, -9, -9, -9,
#line 231
        26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
#line 232
        39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
#line 233
        -9, -9, -9, -9 } count:127];
        ComItextpdfTextPdfCodecBase64__URL_SAFE_ALPHABET_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 256
          (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G',
#line 257
          (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N',
#line 258
          (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U',
#line 259
          (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z',
#line 260
          (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g',
#line 261
          (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n',
#line 262
          (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u',
#line 263
          (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z',
#line 264
          (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4', (jbyte) '5',
#line 265
          (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9', (jbyte) '-', (jbyte) '_' } count:64];
          ComItextpdfTextPdfCodecBase64__URL_SAFE_DECODABET_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 273
            -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 274
            -5, -5,
#line 275
            -9, -9,
#line 276
            -5,
#line 277
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 278
            -9, -9, -9, -9, -9,
#line 279
            -5,
#line 280
            -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 281
            -9,
#line 282
            -9,
#line 283
            62,
#line 284
            -9,
#line 285
            -9,
#line 286
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
#line 287
            -9, -9, -9,
#line 288
            -1,
#line 289
            -9, -9, -9,
#line 290
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
#line 291
            14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
#line 292
            -9, -9, -9, -9,
#line 293
            63,
#line 294
            -9,
#line 295
            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
#line 296
            39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
#line 297
            -9, -9, -9, -9 } count:127];
            ComItextpdfTextPdfCodecBase64__ORDERED_ALPHABET_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 320
              (jbyte) '-',
#line 321
              (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3', (jbyte) '4',
#line 322
              (jbyte) '5', (jbyte) '6', (jbyte) '7', (jbyte) '8', (jbyte) '9',
#line 323
              (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D', (jbyte) 'E', (jbyte) 'F', (jbyte) 'G',
#line 324
              (jbyte) 'H', (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L', (jbyte) 'M', (jbyte) 'N',
#line 325
              (jbyte) 'O', (jbyte) 'P', (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T', (jbyte) 'U',
#line 326
              (jbyte) 'V', (jbyte) 'W', (jbyte) 'X', (jbyte) 'Y', (jbyte) 'Z',
#line 327
              (jbyte) '_',
#line 328
              (jbyte) 'a', (jbyte) 'b', (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f', (jbyte) 'g',
#line 329
              (jbyte) 'h', (jbyte) 'i', (jbyte) 'j', (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n',
#line 330
              (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r', (jbyte) 's', (jbyte) 't', (jbyte) 'u',
#line 331
              (jbyte) 'v', (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z' } count:64];
              ComItextpdfTextPdfCodecBase64__ORDERED_DECODABET_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 339
                -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 340
                -5, -5,
#line 341
                -9, -9,
#line 342
                -5,
#line 343
                -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 344
                -9, -9, -9, -9, -9,
#line 345
                -5,
#line 346
                -9, -9, -9, -9, -9, -9, -9, -9, -9, -9,
#line 347
                -9,
#line 348
                -9,
#line 349
                0,
#line 350
                -9,
#line 351
                -9,
#line 352
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
#line 353
                -9, -9, -9,
#line 354
                -1,
#line 355
                -9, -9, -9,
#line 356
                11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
#line 357
                24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
#line 358
                -9, -9, -9, -9,
#line 359
                37,
#line 360
                -9,
#line 361
                38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
#line 362
                51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
#line 363
                -9, -9, -9, -9 } count:127];
                ComItextpdfTextPdfCodecBase64_initialized = YES;
              }
            }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getAlphabetWithInt:", "getAlphabet", "[B", 0x1a, NULL },
    { "getDecodabetWithInt:", "getDecodabet", "[B", 0x1a, NULL },
    { "init", "Base64", NULL, 0x2, NULL },
    { "usageWithNSString:", "usage", "V", 0x1a, NULL },
    { "encode3to4WithByteArray:withByteArray:withInt:withInt:", "encode3to4", "[B", 0xa, NULL },
    { "encode3to4WithByteArray:withInt:withInt:withByteArray:withInt:withInt:", "encode3to4", "[B", 0xa, NULL },
    { "encodeObjectWithJavaIoSerializable:", "encodeObject", "Ljava.lang.String;", 0x9, NULL },
    { "encodeObjectWithJavaIoSerializable:withInt:", "encodeObject", "Ljava.lang.String;", 0x9, NULL },
    { "encodeBytesWithByteArray:", "encodeBytes", "Ljava.lang.String;", 0x9, NULL },
    { "encodeBytesWithByteArray:withInt:", "encodeBytes", "Ljava.lang.String;", 0x9, NULL },
    { "encodeBytesWithByteArray:withInt:withInt:", "encodeBytes", "Ljava.lang.String;", 0x9, NULL },
    { "encodeBytesWithByteArray:withInt:withInt:withInt:", "encodeBytes", "Ljava.lang.String;", 0x9, NULL },
    { "decode4to3WithByteArray:withInt:withByteArray:withInt:withInt:", "decode4to3", "I", 0xa, NULL },
    { "decodeWithByteArray:withInt:withInt:withInt:", "decode", "[B", 0x9, NULL },
    { "decodeWithNSString:", "decode", "[B", 0x9, NULL },
    { "decodeWithNSString:withInt:", "decode", "[B", 0x9, NULL },
    { "decodeToObjectWithNSString:", "decodeToObject", "Ljava.lang.Object;", 0x9, NULL },
    { "encodeToFileWithByteArray:withNSString:", "encodeToFile", "Z", 0x9, NULL },
    { "decodeToFileWithNSString:withNSString:", "decodeToFile", "Z", 0x9, NULL },
    { "decodeFromFileWithNSString:", "decodeFromFile", "[B", 0x9, NULL },
    { "encodeFromFileWithNSString:", "encodeFromFile", "Ljava.lang.String;", 0x9, NULL },
    { "encodeFileToFileWithNSString:withNSString:", "encodeFileToFile", "V", 0x9, NULL },
    { "decodeFileToFileWithNSString:withNSString:", "decodeFileToFile", "V", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NO_OPTIONS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBase64_NO_OPTIONS },
    { "ENCODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBase64_ENCODE },
    { "DECODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBase64_DECODE },
    { "GZIP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBase64_GZIP },
    { "DONT_BREAK_LINES_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBase64_DONT_BREAK_LINES },
    { "URL_SAFE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBase64_URL_SAFE },
    { "ORDERED_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBase64_ORDERED },
    { "MAX_LINE_LENGTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBase64_MAX_LINE_LENGTH },
    { "EQUALS_SIGN_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComItextpdfTextPdfCodecBase64_EQUALS_SIGN },
    { "NEW_LINE_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComItextpdfTextPdfCodecBase64_NEW_LINE },
    { "PREFERRED_ENCODING_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfTextPdfCodecBase64_PREFERRED_ENCODING_,  },
    { "WHITE_SPACE_ENC_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComItextpdfTextPdfCodecBase64_WHITE_SPACE_ENC },
    { "EQUALS_SIGN_ENC_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComItextpdfTextPdfCodecBase64_EQUALS_SIGN_ENC },
    { "_STANDARD_ALPHABET_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecBase64__STANDARD_ALPHABET_,  },
    { "_STANDARD_DECODABET_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecBase64__STANDARD_DECODABET_,  },
    { "_URL_SAFE_ALPHABET_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecBase64__URL_SAFE_ALPHABET_,  },
    { "_URL_SAFE_DECODABET_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecBase64__URL_SAFE_DECODABET_,  },
    { "_ORDERED_ALPHABET_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecBase64__ORDERED_ALPHABET_,  },
    { "_ORDERED_DECODABET_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecBase64__ORDERED_DECODABET_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecBase64 = { "Base64", "com.itextpdf.text.pdf.codec", NULL, 0x1, 23, methods, 19, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecBase64;
}

@end


#line 1279
@implementation ComItextpdfTextPdfCodecBase64_InputStream


#line 1298
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return
#line 1299
  [self initComItextpdfTextPdfCodecBase64_InputStreamWithJavaIoInputStream:inArg withInt:ComItextpdfTextPdfCodecBase64_DECODE];
}


#line 1324
- (instancetype)initComItextpdfTextPdfCodecBase64_InputStreamWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                                                           withInt:(jint)options {
  if (self =
#line 1325
  [super initWithJavaIoInputStream:inArg]) {
    
#line 1326
    self->breakLines_ = ((options & ComItextpdfTextPdfCodecBase64_DONT_BREAK_LINES) != ComItextpdfTextPdfCodecBase64_DONT_BREAK_LINES);
    
#line 1327
    self->encode_ = ((options & ComItextpdfTextPdfCodecBase64_ENCODE) == ComItextpdfTextPdfCodecBase64_ENCODE);
    
#line 1328
    self->bufferLength_ = encode_ ? 4 : 3;
    
#line 1329
    self->buffer_ = [IOSByteArray arrayWithLength:bufferLength_];
    
#line 1330
    self->position_ = -1;
    
#line 1331
    self->lineLength_ = 0;
    
#line 1332
    self->options_ = options;
    
#line 1333
    self->alphabet_ = [ComItextpdfTextPdfCodecBase64 getAlphabetWithInt:options];
    
#line 1334
    self->decodabet_ = [ComItextpdfTextPdfCodecBase64 getDecodabetWithInt:options];
  }
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                  withInt:(jint)options {
  return [self initComItextpdfTextPdfCodecBase64_InputStreamWithJavaIoInputStream:
#line 1324
inArg withInt:options];
}


#line 1344
- (jint)read {
  
#line 1346
  if (position_ < 0) {
    if (encode_) {
      IOSByteArray *b3 = [IOSByteArray arrayWithLength:3];
      jint numBinaryBytes = 0;
      for (jint i = 0; i < 3; i++) {
        @try {
          jint b = [((JavaIoInputStream *) nil_chk(in_)) read];
          
#line 1355
          if (b >= 0) {
            *IOSByteArray_GetRef(b3, i) = (jbyte) b;
            numBinaryBytes++;
          }
        }
        @catch (
#line 1361
        JavaIoIOException *e) {
          
#line 1363
          if (i == 0)
#line 1364
          @throw e;
        }
      }
      
#line 1369
      if (numBinaryBytes > 0) {
        (void) [ComItextpdfTextPdfCodecBase64 encode3to4WithByteArray:b3 withInt:0 withInt:numBinaryBytes withByteArray:buffer_ withInt:0 withInt:options_];
        position_ = 0;
        numSigBytes_ = 4;
      }
      else {
        return -1;
      }
    }
    else {
      
#line 1381
      IOSByteArray *b4 = [IOSByteArray arrayWithLength:4];
      jint i = 0;
      for (i = 0; i < 4; i++) {
        
#line 1385
        jint b = 0;
        do {
          
#line 1386
          b = [((JavaIoInputStream *) nil_chk(in_)) read];
        }
        while (
#line 1387
        b >= 0 && IOSByteArray_Get(nil_chk(decodabet_), b & (jint) 0x7f) <= ComItextpdfTextPdfCodecBase64_WHITE_SPACE_ENC);
        
#line 1389
        if (b < 0)
#line 1390
        break;
        
#line 1392
        *IOSByteArray_GetRef(b4, i) = (jbyte) b;
      }
      
#line 1395
      if (i == 4) {
        numSigBytes_ = [ComItextpdfTextPdfCodecBase64 decode4to3WithByteArray:b4 withInt:0 withByteArray:buffer_ withInt:0 withInt:options_];
        position_ = 0;
      }
      else if (i == 0) {
        return -1;
      }
      else {
        
#line 1404
        @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"improperly.padded.base64.input" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
    }
  }
  
#line 1411
  if (position_ >= 0) {
    
#line 1413
    if (position_ >= numSigBytes_)
#line 1414
    return -1;
    
#line 1416
    if (encode_ && breakLines_ && lineLength_ >= ComItextpdfTextPdfCodecBase64_MAX_LINE_LENGTH) {
      lineLength_ = 0;
      return 0x000a;
    }
    else {
      lineLength_++;
      
#line 1425
      jint b = IOSByteArray_Get(nil_chk(buffer_), position_++);
      
#line 1427
      if (position_ >= bufferLength_)
#line 1428
      position_ = -1;
      
#line 1430
      return b & (jint) 0xFF;
    }
  }
  else {
    
#line 1438
    @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"error.in.base64.code.reading.stream" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}


#line 1455
- (jint)readWithByteArray:(IOSByteArray *)dest
                  withInt:(jint)off
                  withInt:(jint)len {
  
#line 1456
  jint i;
  jint b;
  for (i = 0; i < len; i++) {
    b = [self read];
    
#line 1464
    if (b >= 0)
#line 1465
    *IOSByteArray_GetRef(nil_chk(dest), off + i) = (jbyte) b;
    else if (i == 0)
#line 1467
    return -1;
    else
#line 1469
    break;
  }
  return i;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecBase64_InputStream *)other {
  [super copyAllFieldsTo:other];
  other->alphabet_ = alphabet_;
  other->breakLines_ = breakLines_;
  other->buffer_ = buffer_;
  other->bufferLength_ = bufferLength_;
  other->decodabet_ = decodabet_;
  other->encode_ = encode_;
  other->lineLength_ = lineLength_;
  other->numSigBytes_ = numSigBytes_;
  other->options_ = options_;
  other->position_ = position_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoInputStream:", "InputStream", NULL, 0x1, NULL },
    { "initWithJavaIoInputStream:withInt:", "InputStream", NULL, 0x1, NULL },
    { "read", NULL, "I", 0x1, "Ljava.io.IOException;" },
    { "readWithByteArray:withInt:withInt:", "read", "I", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "encode_", NULL, 0x2, "Z", NULL,  },
    { "position_", NULL, 0x2, "I", NULL,  },
    { "buffer_", NULL, 0x2, "[B", NULL,  },
    { "bufferLength_", NULL, 0x2, "I", NULL,  },
    { "numSigBytes_", NULL, 0x2, "I", NULL,  },
    { "lineLength_", NULL, 0x2, "I", NULL,  },
    { "breakLines_", NULL, 0x2, "Z", NULL,  },
    { "options_", NULL, 0x2, "I", NULL,  },
    { "alphabet_", NULL, 0x2, "[B", NULL,  },
    { "decodabet_", NULL, 0x2, "[B", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecBase64_InputStream = { "InputStream", "com.itextpdf.text.pdf.codec", "Base64", 0x9, 4, methods, 10, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecBase64_InputStream;
}

@end


#line 1493
@implementation ComItextpdfTextPdfCodecBase64_OutputStream


#line 1512
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  return
#line 1513
  [self initComItextpdfTextPdfCodecBase64_OutputStreamWithJavaIoOutputStream:outArg withInt:ComItextpdfTextPdfCodecBase64_ENCODE];
}


#line 1537
- (instancetype)initComItextpdfTextPdfCodecBase64_OutputStreamWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                                                             withInt:(jint)options {
  if (self =
#line 1538
  [super initWithJavaIoOutputStream:outArg]) {
    
#line 1539
    self->breakLines_ = ((options & ComItextpdfTextPdfCodecBase64_DONT_BREAK_LINES) != ComItextpdfTextPdfCodecBase64_DONT_BREAK_LINES);
    
#line 1540
    self->encode_ = ((options & ComItextpdfTextPdfCodecBase64_ENCODE) == ComItextpdfTextPdfCodecBase64_ENCODE);
    
#line 1541
    self->bufferLength_ = encode_ ? 3 : 4;
    
#line 1542
    self->buffer_ = [IOSByteArray arrayWithLength:bufferLength_];
    
#line 1543
    self->position_ = 0;
    
#line 1544
    self->lineLength_ = 0;
    
#line 1545
    self->suspendEncoding__ = NO;
    
#line 1546
    self->b4_ = [IOSByteArray arrayWithLength:4];
    
#line 1547
    self->options_ = options;
    
#line 1548
    self->alphabet_ = [ComItextpdfTextPdfCodecBase64 getAlphabetWithInt:options];
    
#line 1549
    self->decodabet_ = [ComItextpdfTextPdfCodecBase64 getDecodabetWithInt:options];
  }
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                                   withInt:(jint)options {
  return [self initComItextpdfTextPdfCodecBase64_OutputStreamWithJavaIoOutputStream:
#line 1537
outArg withInt:options];
}


#line 1565
- (void)writeWithInt:(jint)theByte {
  
#line 1567
  if (suspendEncoding__) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:theByte];
    return;
  }
  
#line 1573
  if (encode_) {
    *IOSByteArray_GetRef(nil_chk(buffer_), position_++) = (jbyte) theByte;
    if (position_ >= bufferLength_) {
      
#line 1577
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:[ComItextpdfTextPdfCodecBase64 encode3to4WithByteArray:b4_ withByteArray:buffer_ withInt:bufferLength_ withInt:options_]];
      
#line 1579
      lineLength_ += 4;
      if (breakLines_ && lineLength_ >= ComItextpdfTextPdfCodecBase64_MAX_LINE_LENGTH) {
        [out_ writeWithInt:ComItextpdfTextPdfCodecBase64_NEW_LINE];
        lineLength_ = 0;
      }
      
#line 1585
      position_ = 0;
    }
  }
  else {
    
#line 1592
    if (IOSByteArray_Get(nil_chk(decodabet_), theByte & (jint) 0x7f) > ComItextpdfTextPdfCodecBase64_WHITE_SPACE_ENC) {
      *IOSByteArray_GetRef(nil_chk(buffer_), position_++) = (jbyte) theByte;
      if (position_ >= bufferLength_) {
        
#line 1596
        jint len = [ComItextpdfTextPdfCodecBase64 decode4to3WithByteArray:buffer_ withInt:0 withByteArray:b4_ withInt:0 withInt:options_];
        [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:b4_ withInt:0 withInt:len];
        
#line 1599
        position_ = 0;
      }
    }
    else if (IOSByteArray_Get(decodabet_, theByte & (jint) 0x7f) != ComItextpdfTextPdfCodecBase64_WHITE_SPACE_ENC) {
      @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.character.in.base64.data" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
}


#line 1619
- (void)writeWithByteArray:(IOSByteArray *)theBytes
                   withInt:(jint)off
                   withInt:(jint)len {
  
#line 1621
  if (suspendEncoding__) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:theBytes withInt:off withInt:len];
    return;
  }
  
#line 1626
  for (jint i = 0; i < len; i++) {
    [self writeWithInt:IOSByteArray_Get(nil_chk(theBytes), off + i)];
  }
}


#line 1638
- (void)flushBase64 {
  
#line 1639
  if (position_ > 0) {
    if (encode_) {
      [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:[ComItextpdfTextPdfCodecBase64 encode3to4WithByteArray:b4_ withByteArray:buffer_ withInt:position_ withInt:options_]];
      position_ = 0;
    }
    else {
      @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"base64.input.not.properly.padded" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
}


#line 1657
- (void)close {
  
#line 1659
  [self flushBase64];
  
#line 1663
  [super close];
  
#line 1665
  buffer_ = nil;
  out_ = nil;
}


#line 1678
- (void)suspendEncoding {
  
#line 1679
  [self flushBase64];
  self->suspendEncoding__ = YES;
}


#line 1691
- (void)resumeEncoding {
  
#line 1692
  self->suspendEncoding__ = NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecBase64_OutputStream *)other {
  [super copyAllFieldsTo:other];
  other->alphabet_ = alphabet_;
  other->b4_ = b4_;
  other->breakLines_ = breakLines_;
  other->buffer_ = buffer_;
  other->bufferLength_ = bufferLength_;
  other->decodabet_ = decodabet_;
  other->encode_ = encode_;
  other->lineLength_ = lineLength_;
  other->options_ = options_;
  other->position_ = position_;
  other->suspendEncoding__ = suspendEncoding__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoOutputStream:", "OutputStream", NULL, 0x1, NULL },
    { "initWithJavaIoOutputStream:withInt:", "OutputStream", NULL, 0x1, NULL },
    { "writeWithInt:", "write", "V", 0x1, "Ljava.io.IOException;" },
    { "writeWithByteArray:withInt:withInt:", "write", "V", 0x1, "Ljava.io.IOException;" },
    { "flushBase64", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "close", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "suspendEncoding", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "resumeEncoding", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "encode_", NULL, 0x2, "Z", NULL,  },
    { "position_", NULL, 0x2, "I", NULL,  },
    { "buffer_", NULL, 0x2, "[B", NULL,  },
    { "bufferLength_", NULL, 0x2, "I", NULL,  },
    { "lineLength_", NULL, 0x2, "I", NULL,  },
    { "breakLines_", NULL, 0x2, "Z", NULL,  },
    { "b4_", NULL, 0x2, "[B", NULL,  },
    { "suspendEncoding__", "suspendEncoding", 0x2, "Z", NULL,  },
    { "options_", NULL, 0x2, "I", NULL,  },
    { "alphabet_", NULL, 0x2, "[B", NULL,  },
    { "decodabet_", NULL, 0x2, "[B", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecBase64_OutputStream = { "OutputStream", "com.itextpdf.text.pdf.codec", "Base64", 0x9, 8, methods, 11, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecBase64_OutputStream;
}

@end
