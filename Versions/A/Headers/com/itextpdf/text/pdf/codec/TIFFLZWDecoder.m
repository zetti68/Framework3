//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/TIFFLZWDecoder.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/TIFFLZWDecoder.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/codec/TIFFLZWDecoder.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"


#line 54
@implementation ComItextpdfTextPdfCodecTIFFLZWDecoder


#line 73
- (instancetype)initWithInt:(jint)w
                    withInt:(jint)predictor
                    withInt:(jint)samplesPerPixel {
  if (self = [super init]) {
    data_ =
#line 57
    nil;
    bitsToGet_ =
#line 58
    9;
    nextData_ =
#line 63
    0;
    nextBits_ =
#line 64
    0;
    andTable_ = [IOSIntArray arrayWithInts:(jint[]){
#line 67
      511,
#line 68
      1023,
#line 69
      2047,
#line 70
      4095 } count:4];
      
#line 74
      self->w_ = w;
      
#line 75
      self->predictor_ = predictor;
      
#line 76
      self->samplesPerPixel_ = samplesPerPixel;
    }
    return self;
  }


#line 86
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)uncompData
                              withInt:(jint)h {
  
#line 88
  if (IOSByteArray_Get(nil_chk(data), 0) == (jbyte) (jint) 0x00 && IOSByteArray_Get(data, 1) == (jbyte) (jint) 0x01) {
    @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"tiff.5.0.style.lzw.codes.are.not.supported" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  
#line 92
  [self initializeStringTable];
  
#line 94
  self->data_ = data;
  self->h_ = h;
  self->uncompData_ = uncompData;
  
#line 99
  bytePointer_ = 0;
  bitPointer_ = 0;
  dstIndex_ = 0;
  
#line 104
  nextData_ = 0;
  nextBits_ = 0;
  
#line 107
  jint code, oldCode = 0;
  IOSByteArray *string;
  
#line 110
  while (((code = [self getNextCode]) != 257) &&
#line 111
  dstIndex_ < ((IOSByteArray *) nil_chk(uncompData))->size_) {
    
#line 113
    if (code == 256) {
      
#line 115
      [self initializeStringTable];
      code = [self getNextCode];
      
#line 118
      if (code == 257) {
        break;
      }
      
#line 122
      [self writeStringWithByteArray:IOSObjectArray_Get(nil_chk(stringTable_), code)];
      oldCode = code;
    }
    else {
      
#line 127
      if (code < tableIndex_) {
        
#line 129
        string = IOSObjectArray_Get(nil_chk(stringTable_), code);
        
#line 131
        [self writeStringWithByteArray:string];
        [self addStringToTableWithByteArray:IOSObjectArray_Get(stringTable_, oldCode) withByte:IOSByteArray_Get(nil_chk(string), 0)];
        oldCode = code;
      }
      else {
        
#line 137
        string = IOSObjectArray_Get(nil_chk(stringTable_), oldCode);
        string = [self composeStringWithByteArray:string withByte:IOSByteArray_Get(nil_chk(string), 0)];
        [self writeStringWithByteArray:string];
        [self addStringToTableWithByteArray:string];
        oldCode = code;
      }
    }
  }
  
#line 149
  if (predictor_ == 2) {
    
#line 151
    jint count;
    for (jint j = 0; j < h; j++) {
      
#line 154
      count = samplesPerPixel_ * (j * w_ + 1);
      
#line 156
      for (jint i = samplesPerPixel_; i < w_ * samplesPerPixel_; i++) {
        
#line 158
        *IOSByteArray_GetRef(nil_chk(uncompData), count) += IOSByteArray_Get(uncompData, count - samplesPerPixel_);
        count++;
      }
    }
  }
  
#line 164
  return uncompData;
}


#line 171
- (void)initializeStringTable {
  
#line 173
  stringTable_ = [IOSObjectArray arrayWithLength:4096 type:[IOSByteArray iosClass]];
  
#line 175
  for (jint i = 0; i < 256; i++) {
    IOSObjectArray_SetAndConsume(stringTable_, i, [IOSByteArray newArrayWithLength:1]);
    *IOSByteArray_GetRef(nil_chk(IOSObjectArray_Get(stringTable_, i)), 0) = (jbyte) i;
  }
  
#line 180
  tableIndex_ = 258;
  bitsToGet_ = 9;
}

- (void)writeStringWithByteArray:(IOSByteArray *)string {
  
#line 189
  jint max = ((IOSByteArray *) nil_chk(uncompData_))->size_ - dstIndex_;
  if (((IOSByteArray *) nil_chk(string))->size_ < max)
#line 191
  max = string->size_;
  [JavaLangSystem arraycopyWithId:string withInt:0 withId:uncompData_ withInt:dstIndex_ withInt:max];
  dstIndex_ += max;
}


#line 199
- (void)addStringToTableWithByteArray:(IOSByteArray *)oldString
                             withByte:(jbyte)newString {
  
#line 200
  jint length = ((IOSByteArray *) nil_chk(oldString))->size_;
  IOSByteArray *string = [IOSByteArray arrayWithLength:length + 1];
  [JavaLangSystem arraycopyWithId:oldString withInt:0 withId:string withInt:0 withInt:length];
  *IOSByteArray_GetRef(string, length) = newString;
  
#line 206
  IOSObjectArray_Set(nil_chk(stringTable_), tableIndex_++, string);
  
#line 208
  if (tableIndex_ == 511) {
    bitsToGet_ = 10;
  }
  else
#line 210
  if (tableIndex_ == 1023) {
    bitsToGet_ = 11;
  }
  else
#line 212
  if (tableIndex_ == 2047) {
    bitsToGet_ = 12;
  }
}


#line 220
- (void)addStringToTableWithByteArray:(IOSByteArray *)string {
  
#line 223
  IOSObjectArray_Set(nil_chk(stringTable_), tableIndex_++, string);
  
#line 225
  if (tableIndex_ == 511) {
    bitsToGet_ = 10;
  }
  else
#line 227
  if (tableIndex_ == 1023) {
    bitsToGet_ = 11;
  }
  else
#line 229
  if (tableIndex_ == 2047) {
    bitsToGet_ = 12;
  }
}


#line 237
- (IOSByteArray *)composeStringWithByteArray:(IOSByteArray *)oldString
                                    withByte:(jbyte)newString {
  
#line 238
  jint length = ((IOSByteArray *) nil_chk(oldString))->size_;
  IOSByteArray *string = [IOSByteArray arrayWithLength:length + 1];
  [JavaLangSystem arraycopyWithId:oldString withInt:0 withId:string withInt:0 withInt:length];
  *IOSByteArray_GetRef(string, length) = newString;
  
#line 243
  return string;
}


#line 247
- (jint)getNextCode {
  
#line 252
  @try {
    nextData_ = (LShift32(nextData_, 8)) | (IOSByteArray_Get(nil_chk(data_), bytePointer_++) & (jint) 0xff);
    nextBits_ += 8;
    
#line 256
    if (nextBits_ < bitsToGet_) {
      nextData_ = (LShift32(nextData_, 8)) | (IOSByteArray_Get(data_, bytePointer_++) & (jint) 0xff);
      nextBits_ += 8;
    }
    
#line 261
    jint code =
#line 262
    (RShift32(nextData_, (nextBits_ - bitsToGet_))) & IOSIntArray_Get(nil_chk(andTable_), bitsToGet_ - 9);
    nextBits_ -= bitsToGet_;
    
#line 265
    return code;
  }
  @catch (
#line 266
  JavaLangArrayIndexOutOfBoundsException *e) {
    
#line 268
    return 257;
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecTIFFLZWDecoder *)other {
  [super copyAllFieldsTo:other];
  other->andTable_ = andTable_;
  other->bitPointer_ = bitPointer_;
  other->bitsToGet_ = bitsToGet_;
  other->bytePointer_ = bytePointer_;
  other->data_ = data_;
  other->dstIndex_ = dstIndex_;
  other->h_ = h_;
  other->nextBits_ = nextBits_;
  other->nextData_ = nextData_;
  other->predictor_ = predictor_;
  other->samplesPerPixel_ = samplesPerPixel_;
  other->stringTable_ = stringTable_;
  other->tableIndex_ = tableIndex_;
  other->uncompData_ = uncompData_;
  other->w_ = w_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:withInt:", "TIFFLZWDecoder", NULL, 0x1, NULL },
    { "decodeWithByteArray:withByteArray:withInt:", "decode", "[B", 0x1, NULL },
    { "initializeStringTable", NULL, "V", 0x1, NULL },
    { "writeStringWithByteArray:", "writeString", "V", 0x1, NULL },
    { "addStringToTableWithByteArray:withByte:", "addStringToTable", "V", 0x1, NULL },
    { "addStringToTableWithByteArray:", "addStringToTable", "V", 0x1, NULL },
    { "composeStringWithByteArray:withByte:", "composeString", "[B", 0x1, NULL },
    { "getNextCode", NULL, "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "stringTable_", NULL, 0x0, "[[B", NULL,  },
    { "data_", NULL, 0x0, "[B", NULL,  },
    { "uncompData_", NULL, 0x0, "[B", NULL,  },
    { "tableIndex_", NULL, 0x0, "I", NULL,  },
    { "bitsToGet_", NULL, 0x0, "I", NULL,  },
    { "bytePointer_", NULL, 0x0, "I", NULL,  },
    { "bitPointer_", NULL, 0x0, "I", NULL,  },
    { "dstIndex_", NULL, 0x0, "I", NULL,  },
    { "w_", NULL, 0x0, "I", NULL,  },
    { "h_", NULL, 0x0, "I", NULL,  },
    { "predictor_", NULL, 0x0, "I", NULL,  },
    { "samplesPerPixel_", NULL, 0x0, "I", NULL,  },
    { "nextData_", NULL, 0x0, "I", NULL,  },
    { "nextBits_", NULL, 0x0, "I", NULL,  },
    { "andTable_", NULL, 0x0, "[I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecTIFFLZWDecoder = { "TIFFLZWDecoder", "com.itextpdf.text.pdf.codec", NULL, 0x1, 8, methods, 15, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecTIFFLZWDecoder;
}

@end
