//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/TiffImage.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/TiffImage.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/ImgRaw.h"
#include "com/itextpdf/text/Jpeg.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/InvalidImageException.h"
#include "com/itextpdf/text/pdf/ICC_Profile.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/codec/CCITTG4Encoder.h"
#include "com/itextpdf/text/pdf/codec/TIFFConstants.h"
#include "com/itextpdf/text/pdf/codec/TIFFDirectory.h"
#include "com/itextpdf/text/pdf/codec/TIFFFaxDecoder.h"
#include "com/itextpdf/text/pdf/codec/TIFFField.h"
#include "com/itextpdf/text/pdf/codec/TIFFLZWDecoder.h"
#include "com/itextpdf/text/pdf/codec/TiffImage.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/zip/DataFormatException.h"
#include "java/util/zip/DeflaterOutputStream.h"
#include "java/util/zip/Inflater.h"


#line 69
@implementation ComItextpdfTextPdfCodecTiffImage


#line 75
+ (jint)getNumberOfPagesWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s {
  
#line 76
  @try {
    return [ComItextpdfTextPdfCodecTIFFDirectory getNumDirectoriesWithComItextpdfTextPdfRandomAccessFileOrArray:s];
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 84
+ (jint)getDpiWithComItextpdfTextPdfCodecTIFFField:(ComItextpdfTextPdfCodecTIFFField *)fd
                                           withInt:(jint)resolutionUnit {
  
#line 85
  if (fd == nil)
#line 86
  return 0;
  IOSLongArray *res = [((ComItextpdfTextPdfCodecTIFFField *) nil_chk(fd)) getAsRationalWithInt:0];
  jfloat frac = (jfloat) IOSLongArray_Get(nil_chk(res), 0) / (jfloat) IOSLongArray_Get(res, 1);
  jint dpi = 0;
  switch (resolutionUnit) {
    case ComItextpdfTextPdfCodecTIFFConstants_RESUNIT_INCH:
    case ComItextpdfTextPdfCodecTIFFConstants_RESUNIT_NONE:
    dpi = J2ObjCFpToInt((frac + 0.5));
    break;
    case ComItextpdfTextPdfCodecTIFFConstants_RESUNIT_CENTIMETER:
    dpi = J2ObjCFpToInt((frac * 2.54 + 0.5));
    break;
  }
  return dpi;
}


#line 102
+ (ComItextpdfTextImage *)getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s
                                                                        withBoolean:(jboolean)recoverFromImageError
                                                                            withInt:(jint)page
                                                                        withBoolean:(jboolean)direct {
  
#line 103
  if (page < 1)
#line 104
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.page.number.must.be.gt.eq.1" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  @try {
    ComItextpdfTextPdfCodecTIFFDirectory *dir = [[ComItextpdfTextPdfCodecTIFFDirectory alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:s withInt:page - 1];
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_TILEWIDTH])
#line 108
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"tiles.are.not.supported" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    jint compression = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_COMPRESSION];
    switch (compression) {
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLEW:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLE:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX3:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX4:
      break;
      default:
      return [ComItextpdfTextPdfCodecTiffImage getTiffImageColorWithComItextpdfTextPdfCodecTIFFDirectory:dir withComItextpdfTextPdfRandomAccessFileOrArray:s];
    }
    jfloat rotation = 0;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ORIENTATION]) {
      jint rot = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ORIENTATION];
      if (rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_BOTRIGHT || rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_BOTLEFT)
#line 123
      rotation = (jfloat) JavaLangMath_PI;
      else if (rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_LEFTTOP || rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_LEFTBOT)
#line 125
      rotation = (jfloat) (JavaLangMath_PI / 2.0);
      else if (rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_RIGHTTOP || rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_RIGHTBOT)
#line 127
      rotation = -(jfloat) (JavaLangMath_PI / 2.0);
    }
    
#line 130
    ComItextpdfTextImage *img = nil;
    jlong tiffT4Options = 0;
    jlong tiffT6Options = 0;
    jint fillOrder = 1;
    jint h = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_IMAGELENGTH];
    jint w = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_IMAGEWIDTH];
    jint dpiX = 0;
    jint dpiY = 0;
    jfloat XYRatio = 0;
    jint resolutionUnit = ComItextpdfTextPdfCodecTIFFConstants_RESUNIT_INCH;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT])
#line 141
    resolutionUnit = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT];
    dpiX = [ComItextpdfTextPdfCodecTiffImage getDpiWithComItextpdfTextPdfCodecTIFFField:[dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_XRESOLUTION] withInt:resolutionUnit];
    dpiY = [ComItextpdfTextPdfCodecTiffImage getDpiWithComItextpdfTextPdfCodecTIFFField:[dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_YRESOLUTION] withInt:resolutionUnit];
    if (resolutionUnit == ComItextpdfTextPdfCodecTIFFConstants_RESUNIT_NONE) {
      if (dpiY != 0)
#line 146
      XYRatio = (jfloat) dpiX / (jfloat) dpiY;
      dpiX = 0;
      dpiY = 0;
    }
    jint rowsStrip = h;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP])
#line 152
    rowsStrip = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP];
    if (rowsStrip <= 0 || rowsStrip > h)
#line 154
    rowsStrip = h;
    IOSLongArray *offset = [ComItextpdfTextPdfCodecTiffImage getArrayLongShortWithComItextpdfTextPdfCodecTIFFDirectory:dir withInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_STRIPOFFSETS];
    IOSLongArray *size = [ComItextpdfTextPdfCodecTiffImage getArrayLongShortWithComItextpdfTextPdfCodecTIFFDirectory:dir withInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_STRIPBYTECOUNTS];
    if ((size == nil || (size->size_ == 1 && (IOSLongArray_Get(size, 0) == 0 || IOSLongArray_Get(size, 0) + IOSLongArray_Get(nil_chk(offset), 0) > [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) length]))) && h == rowsStrip) {
      size = [IOSLongArray arrayWithLongs:(jlong[]){ [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) length] - (jint) IOSLongArray_Get(nil_chk(offset), 0) } count:1];
    }
    jboolean reverse = NO;
    ComItextpdfTextPdfCodecTIFFField *fillOrderField = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_FILLORDER];
    if (fillOrderField != nil)
#line 163
    fillOrder = [fillOrderField getAsIntWithInt:0];
    reverse = (fillOrder == ComItextpdfTextPdfCodecTIFFConstants_FILLORDER_LSB2MSB);
    jint params = 0;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_PHOTOMETRIC]) {
      jlong photo = [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_PHOTOMETRIC];
      if (photo == ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISBLACK)
#line 169
      params |= ComItextpdfTextElement_CCITT_BLACKIS1;
    }
    jint imagecomp = 0;
    {
      
#line 181
      ComItextpdfTextPdfCodecTIFFField *t4OptionsField;
      
#line 192
      ComItextpdfTextPdfCodecTIFFField *t6OptionsField;
      
#line 172
      switch (compression) {
        case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLEW:
        case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLE:
        imagecomp = ComItextpdfTextElement_CCITTG3_1D;
        params |= ComItextpdfTextElement_CCITT_ENCODEDBYTEALIGN | ComItextpdfTextElement_CCITT_ENDOFBLOCK;
        break;
        case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX3:
        imagecomp = ComItextpdfTextElement_CCITTG3_1D;
        params |= ComItextpdfTextElement_CCITT_ENDOFLINE | ComItextpdfTextElement_CCITT_ENDOFBLOCK;
        t4OptionsField = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_GROUP3OPTIONS];
        if (t4OptionsField != nil) {
          tiffT4Options = [t4OptionsField getAsLongWithInt:0];
          if ((tiffT4Options & ComItextpdfTextPdfCodecTIFFConstants_GROUP3OPT_2DENCODING) != 0)
#line 185
          imagecomp = ComItextpdfTextElement_CCITTG3_2D;
          if ((tiffT4Options & ComItextpdfTextPdfCodecTIFFConstants_GROUP3OPT_FILLBITS) != 0)
#line 187
          params |= ComItextpdfTextElement_CCITT_ENCODEDBYTEALIGN;
        }
        break;
        case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX4:
        imagecomp = ComItextpdfTextElement_CCITTG4;
        t6OptionsField = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_GROUP4OPTIONS];
        if (t6OptionsField != nil)
#line 194
        tiffT6Options = [t6OptionsField getAsLongWithInt:0];
        break;
      }
    }
    
#line 197
    if (direct && rowsStrip == h) {
      IOSByteArray *im = [IOSByteArray arrayWithLength:(jint) IOSLongArray_Get(nil_chk(size), 0)];
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) seekWithLong:IOSLongArray_Get(nil_chk(offset), 0)];
      [s readFullyWithByteArray:im];
      img = [ComItextpdfTextImage getInstanceWithInt:w withInt:h withBoolean:NO withInt:imagecomp withInt:params withByteArray:im];
      [((ComItextpdfTextImage *) nil_chk(img)) setInvertedWithBoolean:YES];
    }
    else {
      jint rowsLeft = h;
      ComItextpdfTextPdfCodecCCITTG4Encoder *g4 = [[ComItextpdfTextPdfCodecCCITTG4Encoder alloc] initWithInt:w];
      for (jint k = 0; k < ((IOSLongArray *) nil_chk(offset))->size_; ++k) {
        IOSByteArray *im = [IOSByteArray arrayWithLength:(jint) IOSLongArray_Get(nil_chk(size), k)];
        [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) seekWithLong:IOSLongArray_Get(offset, k)];
        [s readFullyWithByteArray:im];
        jint height = [JavaLangMath minWithInt:rowsStrip withInt:rowsLeft];
        ComItextpdfTextPdfCodecTIFFFaxDecoder *decoder = [[ComItextpdfTextPdfCodecTIFFFaxDecoder alloc] initWithInt:fillOrder withInt:w withInt:height];
        [decoder setRecoverFromImageErrorWithBoolean:recoverFromImageError];
        IOSByteArray *outBuf = [IOSByteArray arrayWithLength:(w + 7) / 8 * height];
        switch (compression) {
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLEW:
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLE:
          [decoder decode1DWithByteArray:outBuf withByteArray:im withInt:0 withInt:height];
          [g4 fax4EncodeWithByteArray:outBuf withInt:height];
          break;
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX3:
          @try {
            [decoder decode2DWithByteArray:outBuf withByteArray:im withInt:0 withInt:height withLong:tiffT4Options];
          }
          @catch (JavaLangRuntimeException *e) {
            
#line 227
            tiffT4Options ^= ComItextpdfTextPdfCodecTIFFConstants_GROUP3OPT_FILLBITS;
            @try {
              [decoder decode2DWithByteArray:outBuf withByteArray:im withInt:0 withInt:height withLong:tiffT4Options];
            }
            @catch (JavaLangRuntimeException *e2) {
              if (!recoverFromImageError)
#line 233
              @throw e;
              if (rowsStrip == 1)
#line 235
              @throw e;
              
#line 238
              im = [IOSByteArray arrayWithLength:(jint) IOSLongArray_Get(size, 0)];
              [s seekWithLong:IOSLongArray_Get(offset, 0)];
              [s readFullyWithByteArray:im];
              img = [ComItextpdfTextImage getInstanceWithInt:w withInt:h withBoolean:NO withInt:imagecomp withInt:params withByteArray:im];
              [((ComItextpdfTextImage *) nil_chk(img)) setInvertedWithBoolean:YES];
              [img setDpiWithInt:dpiX withInt:dpiY];
              [img setXYRatioWithFloat:XYRatio];
              [img setOriginalTypeWithInt:ComItextpdfTextImage_ORIGINAL_TIFF];
              if (rotation != 0)
#line 247
              [img setInitialRotationWithFloat:rotation];
              return img;
            }
          }
          [g4 fax4EncodeWithByteArray:outBuf withInt:height];
          break;
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX4:
          @try {
            [decoder decodeT6WithByteArray:outBuf withByteArray:im withInt:0 withInt:height withLong:tiffT6Options];
          }
          @catch (
#line 256
          ComItextpdfTextExceptionsInvalidImageException *e) {
            if (!recoverFromImageError) {
              @throw e;
            }
          }
          
#line 262
          [g4 fax4EncodeWithByteArray:outBuf withInt:height];
          break;
        }
        rowsLeft -= rowsStrip;
      }
      IOSByteArray *g4pic = [g4 close];
      img = [ComItextpdfTextImage getInstanceWithInt:w withInt:h withBoolean:NO withInt:ComItextpdfTextElement_CCITTG4 withInt:params & ComItextpdfTextElement_CCITT_BLACKIS1 withByteArray:g4pic];
    }
    [((ComItextpdfTextImage *) nil_chk(img)) setDpiWithInt:dpiX withInt:dpiY];
    [img setXYRatioWithFloat:XYRatio];
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE]) {
      @try {
        ComItextpdfTextPdfCodecTIFFField *fd = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE];
        ComItextpdfTextPdfICC_Profile *icc_prof = [ComItextpdfTextPdfICC_Profile getInstanceWithByteArray:[((ComItextpdfTextPdfCodecTIFFField *) nil_chk(fd)) getAsBytes]];
        if ([((ComItextpdfTextPdfICC_Profile *) nil_chk(icc_prof)) getNumComponents] == 1)
#line 277
        [img tagICCWithComItextpdfTextPdfICC_Profile:icc_prof];
      }
      @catch (JavaLangRuntimeException *e) {
      }
    }
    
#line 283
    [img setOriginalTypeWithInt:ComItextpdfTextImage_ORIGINAL_TIFF];
    if (rotation != 0)
#line 285
    [img setInitialRotationWithFloat:rotation];
    return img;
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 293
+ (ComItextpdfTextImage *)getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s
                                                                        withBoolean:(jboolean)recoverFromImageError
                                                                            withInt:(jint)page {
  
#line 294
  return [ComItextpdfTextPdfCodecTiffImage getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:s withBoolean:recoverFromImageError withInt:page withBoolean:NO];
}


#line 302
+ (ComItextpdfTextImage *)getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s
                                                                            withInt:(jint)page {
  
#line 303
  return [ComItextpdfTextPdfCodecTiffImage getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:s withInt:page withBoolean:NO];
}


#line 314
+ (ComItextpdfTextImage *)getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s
                                                                            withInt:(jint)page
                                                                        withBoolean:(jboolean)direct {
  
#line 315
  return [ComItextpdfTextPdfCodecTiffImage getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:s withBoolean:NO withInt:page withBoolean:direct];
}


#line 318
+ (ComItextpdfTextImage *)getTiffImageColorWithComItextpdfTextPdfCodecTIFFDirectory:(ComItextpdfTextPdfCodecTIFFDirectory *)dir
                                      withComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)s {
  
#line 319
  @try {
    jint compression = (jint) [((ComItextpdfTextPdfCodecTIFFDirectory *) nil_chk(dir)) getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_COMPRESSION];
    jint predictor = 1;
    ComItextpdfTextPdfCodecTIFFLZWDecoder *lzwDecoder = nil;
    switch (compression) {
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_NONE:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_LZW:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_PACKBITS:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_DEFLATE:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_ADOBE_DEFLATE:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_OJPEG:
      case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_JPEG:
      break;
      default:
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.compression.1.is.not.supported" withInt:compression]];
    }
    jint photometric = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_PHOTOMETRIC];
    switch (photometric) {
      case ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISWHITE:
      case ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISBLACK:
      case ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_RGB:
      case ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_SEPARATED:
      case ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_PALETTE:
      break;
      default:
      if (compression != ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_OJPEG && compression != ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_JPEG)
#line 345
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.photometric.1.is.not.supported" withInt:photometric]];
    }
    jfloat rotation = 0;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ORIENTATION]) {
      jint rot = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ORIENTATION];
      if (rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_BOTRIGHT || rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_BOTLEFT)
#line 351
      rotation = (jfloat) JavaLangMath_PI;
      else if (rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_LEFTTOP || rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_LEFTBOT)
#line 353
      rotation = (jfloat) (JavaLangMath_PI / 2.0);
      else if (rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_RIGHTTOP || rot == ComItextpdfTextPdfCodecTIFFConstants_ORIENTATION_RIGHTBOT)
#line 355
      rotation = -(jfloat) (JavaLangMath_PI / 2.0);
    }
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_PLANARCONFIG] &&
#line 358
    [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_PLANARCONFIG] == ComItextpdfTextPdfCodecTIFFConstants_PLANARCONFIG_SEPARATE)
#line 359
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"planar.images.are.not.supported" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    jint extraSamples = 0;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_EXTRASAMPLES])
#line 362
    extraSamples = 1;
    jint samplePerPixel = 1;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_SAMPLESPERPIXEL])
#line 365
    samplePerPixel = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_SAMPLESPERPIXEL];
    jint bitsPerSample = 1;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_BITSPERSAMPLE])
#line 368
    bitsPerSample = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_BITSPERSAMPLE];
    switch (bitsPerSample) {
      case 1:
      case 2:
      case 4:
      case 8:
      break;
      default:
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"bits.per.sample.1.is.not.supported" withInt:bitsPerSample]];
    }
    ComItextpdfTextImage *img = nil;
    
#line 380
    jint h = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_IMAGELENGTH];
    jint w = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_IMAGEWIDTH];
    jint dpiX = 0;
    jint dpiY = 0;
    jint resolutionUnit = ComItextpdfTextPdfCodecTIFFConstants_RESUNIT_INCH;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT])
#line 386
    resolutionUnit = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT];
    dpiX = [ComItextpdfTextPdfCodecTiffImage getDpiWithComItextpdfTextPdfCodecTIFFField:[dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_XRESOLUTION] withInt:resolutionUnit];
    dpiY = [ComItextpdfTextPdfCodecTiffImage getDpiWithComItextpdfTextPdfCodecTIFFField:[dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_YRESOLUTION] withInt:resolutionUnit];
    jint fillOrder = 1;
    jboolean reverse = NO;
    ComItextpdfTextPdfCodecTIFFField *fillOrderField = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_FILLORDER];
    if (fillOrderField != nil)
#line 393
    fillOrder = [fillOrderField getAsIntWithInt:0];
    reverse = (fillOrder == ComItextpdfTextPdfCodecTIFFConstants_FILLORDER_LSB2MSB);
    jint rowsStrip = h;
    if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP])
#line 397
    rowsStrip = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP];
    if (rowsStrip <= 0 || rowsStrip > h)
#line 399
    rowsStrip = h;
    IOSLongArray *offset = [ComItextpdfTextPdfCodecTiffImage getArrayLongShortWithComItextpdfTextPdfCodecTIFFDirectory:dir withInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_STRIPOFFSETS];
    IOSLongArray *size = [ComItextpdfTextPdfCodecTiffImage getArrayLongShortWithComItextpdfTextPdfCodecTIFFDirectory:dir withInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_STRIPBYTECOUNTS];
    if ((size == nil || (size->size_ == 1 && (IOSLongArray_Get(size, 0) == 0 || IOSLongArray_Get(size, 0) + IOSLongArray_Get(nil_chk(offset), 0) > [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) length]))) && h == rowsStrip) {
      size = [IOSLongArray arrayWithLongs:(jlong[]){ [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) length] - (jint) IOSLongArray_Get(nil_chk(offset), 0) } count:1];
    }
    if (compression == ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_LZW || compression == ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_DEFLATE || compression == ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_ADOBE_DEFLATE) {
      ComItextpdfTextPdfCodecTIFFField *predictorField = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_PREDICTOR];
      if (predictorField != nil) {
        predictor = [predictorField getAsIntWithInt:0];
        if (predictor != 1 && predictor != 2) {
          @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.value.for.predictor.in.tiff.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
        }
        if (predictor == 2 && bitsPerSample != 8) {
          @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.bit.samples.are.not.supported.for.horizontal.differencing.predictor" withInt:bitsPerSample]];
        }
      }
    }
    if (compression == ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_LZW) {
      lzwDecoder = [[ComItextpdfTextPdfCodecTIFFLZWDecoder alloc] initWithInt:w withInt:predictor withInt:samplePerPixel];
    }
    jint rowsLeft = h;
    JavaIoByteArrayOutputStream *stream = nil;
    JavaIoByteArrayOutputStream *mstream = nil;
    JavaUtilZipDeflaterOutputStream *zip = nil;
    JavaUtilZipDeflaterOutputStream *mzip = nil;
    if (extraSamples > 0) {
      mstream = [[JavaIoByteArrayOutputStream alloc] init];
      mzip = [[JavaUtilZipDeflaterOutputStream alloc] initWithJavaIoOutputStream:mstream];
    }
    
#line 430
    ComItextpdfTextPdfCodecCCITTG4Encoder *g4 = nil;
    if (bitsPerSample == 1 && samplePerPixel == 1 && photometric != ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_PALETTE) {
      g4 = [[ComItextpdfTextPdfCodecCCITTG4Encoder alloc] initWithInt:w];
    }
    else {
      stream = [[JavaIoByteArrayOutputStream alloc] init];
      if (compression != ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_OJPEG && compression != ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_JPEG)
#line 437
      zip = [[JavaUtilZipDeflaterOutputStream alloc] initWithJavaIoOutputStream:stream];
    }
    if (compression == ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_OJPEG) {
      
#line 444
      if ((![dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_JPEGIFOFFSET])) {
        @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"missing.tag.s.for.ojpeg.compression" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
      jint jpegOffset = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_JPEGIFOFFSET];
      jint jpegLength = (jint) [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) length] - jpegOffset;
      
#line 450
      if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_JPEGIFBYTECOUNT]) {
        jpegLength = (jint) [dir getFieldAsLongWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_JPEGIFBYTECOUNT] +
#line 452
        (jint) IOSLongArray_Get(nil_chk(size), 0);
      }
      
#line 455
      IOSByteArray *jpeg = [IOSByteArray arrayWithLength:[JavaLangMath minWithInt:jpegLength withInt:(jint) [s length] - jpegOffset]];
      
#line 457
      jint posFilePointer = (jint) [s getFilePointer];
      posFilePointer += jpegOffset;
      [s seekWithLong:posFilePointer];
      [s readFullyWithByteArray:jpeg];
      img = [[ComItextpdfTextJpeg alloc] initWithByteArray:jpeg];
    }
    else if (compression == ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_JPEG) {
      if (((IOSLongArray *) nil_chk(size))->size_ > 1)
#line 465
      @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"compression.jpeg.is.only.supported.with.a.single.strip.this.image.has.1.strips" withInt:size->size_]];
      IOSByteArray *jpeg = [IOSByteArray arrayWithLength:(jint) IOSLongArray_Get(size, 0)];
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) seekWithLong:IOSLongArray_Get(nil_chk(offset), 0)];
      [s readFullyWithByteArray:jpeg];
      
#line 471
      ComItextpdfTextPdfCodecTIFFField *jpegtables = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_JPEGTABLES];
      if (jpegtables != nil) {
        IOSByteArray *temp = [jpegtables getAsBytes];
        jint tableoffset = 0;
        jint tablelength = ((IOSByteArray *) nil_chk(temp))->size_;
        
#line 477
        if (IOSByteArray_Get(temp, 0) == (jbyte) (jint) 0xFF && IOSByteArray_Get(temp, 1) == (jbyte) (jint) 0xD8) {
          tableoffset = 2;
          tablelength -= 2;
        }
        
#line 482
        if (IOSByteArray_Get(temp, temp->size_ - 2) == (jbyte) (jint) 0xFF && IOSByteArray_Get(temp, temp->size_ - 1) == (jbyte) (jint) 0xD9)
#line 483
        tablelength -= 2;
        IOSByteArray *tables = [IOSByteArray arrayWithLength:tablelength];
        [JavaLangSystem arraycopyWithId:temp withInt:tableoffset withId:tables withInt:0 withInt:tablelength];
        
#line 487
        IOSByteArray *jpegwithtables = [IOSByteArray arrayWithLength:jpeg->size_ + tables->size_];
        [JavaLangSystem arraycopyWithId:jpeg withInt:0 withId:jpegwithtables withInt:0 withInt:2];
        [JavaLangSystem arraycopyWithId:tables withInt:0 withId:jpegwithtables withInt:2 withInt:tables->size_];
        [JavaLangSystem arraycopyWithId:jpeg withInt:2 withId:jpegwithtables withInt:tables->size_ + 2 withInt:jpeg->size_ - 2];
        jpeg = jpegwithtables;
      }
      img = [[ComItextpdfTextJpeg alloc] initWithByteArray:jpeg];
      if (photometric == ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_RGB) {
        [img setColorTransformWithInt:0];
      }
    }
    else {
      for (jint k = 0; k < ((IOSLongArray *) nil_chk(offset))->size_; ++k) {
        IOSByteArray *im = [IOSByteArray arrayWithLength:(jint) IOSLongArray_Get(nil_chk(size), k)];
        [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(s)) seekWithLong:IOSLongArray_Get(offset, k)];
        [s readFullyWithByteArray:im];
        jint height = [JavaLangMath minWithInt:rowsStrip withInt:rowsLeft];
        IOSByteArray *outBuf = nil;
        if (compression != ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_NONE)
#line 506
        outBuf = [IOSByteArray arrayWithLength:(w * bitsPerSample * samplePerPixel + 7) / 8 * height];
        if (reverse)
#line 508
        [ComItextpdfTextPdfCodecTIFFFaxDecoder reverseBitsWithByteArray:im];
        switch (compression) {
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_DEFLATE:
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_ADOBE_DEFLATE:
          [ComItextpdfTextPdfCodecTiffImage inflateWithByteArray:im withByteArray:outBuf];
          [ComItextpdfTextPdfCodecTiffImage applyPredictorWithByteArray:outBuf withInt:predictor withInt:w withInt:height withInt:samplePerPixel];
          break;
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_NONE:
          outBuf = im;
          break;
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_PACKBITS:
          [ComItextpdfTextPdfCodecTiffImage decodePackbitsWithByteArray:im withByteArray:outBuf];
          break;
          case ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_LZW:
          (void) [((ComItextpdfTextPdfCodecTIFFLZWDecoder *) nil_chk(lzwDecoder)) decodeWithByteArray:im withByteArray:outBuf withInt:height];
          break;
        }
        if (bitsPerSample == 1 && samplePerPixel == 1 && photometric != ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_PALETTE) {
          [((ComItextpdfTextPdfCodecCCITTG4Encoder *) nil_chk(g4)) fax4EncodeWithByteArray:outBuf withInt:height];
        }
        else {
          if (extraSamples > 0)
#line 530
          (void) [ComItextpdfTextPdfCodecTiffImage ProcessExtraSamplesWithJavaUtilZipDeflaterOutputStream:zip withJavaUtilZipDeflaterOutputStream:mzip withByteArray:outBuf withInt:samplePerPixel withInt:bitsPerSample withInt:w withInt:height];
          else
#line 532
          [((JavaUtilZipDeflaterOutputStream *) nil_chk(zip)) writeWithByteArray:outBuf];
        }
        rowsLeft -= rowsStrip;
      }
      if (bitsPerSample == 1 && samplePerPixel == 1 && photometric != ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_PALETTE) {
        img = [ComItextpdfTextImage getInstanceWithInt:w withInt:h withBoolean:NO withInt:ComItextpdfTextElement_CCITTG4 withInt:
#line 538
        photometric == ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISBLACK ? ComItextpdfTextElement_CCITT_BLACKIS1 : 0 withByteArray:[((ComItextpdfTextPdfCodecCCITTG4Encoder *) nil_chk(g4)) close]];
      }
      else {
        [((JavaUtilZipDeflaterOutputStream *) nil_chk(zip)) close];
        img = [[ComItextpdfTextImgRaw alloc] initWithInt:w withInt:h withInt:samplePerPixel - extraSamples withInt:bitsPerSample withByteArray:[((JavaIoByteArrayOutputStream *) nil_chk(stream)) toByteArray]];
        [img setDeflatedWithBoolean:YES];
      }
    }
    [((ComItextpdfTextImage *) nil_chk(img)) setDpiWithInt:dpiX withInt:dpiY];
    if (compression != ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_OJPEG && compression != ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_JPEG) {
      if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE]) {
        @try {
          ComItextpdfTextPdfCodecTIFFField *fd = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE];
          ComItextpdfTextPdfICC_Profile *icc_prof = [ComItextpdfTextPdfICC_Profile getInstanceWithByteArray:[((ComItextpdfTextPdfCodecTIFFField *) nil_chk(fd)) getAsBytes]];
          if (samplePerPixel - extraSamples == [((ComItextpdfTextPdfICC_Profile *) nil_chk(icc_prof)) getNumComponents])
#line 553
          [img tagICCWithComItextpdfTextPdfICC_Profile:icc_prof];
        }
        @catch (JavaLangRuntimeException *e) {
        }
      }
      
#line 559
      if ([dir isTagPresentWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_COLORMAP]) {
        ComItextpdfTextPdfCodecTIFFField *fd = [dir getFieldWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_COLORMAP];
        IOSCharArray *rgb = [((ComItextpdfTextPdfCodecTIFFField *) nil_chk(fd)) getAsChars];
        IOSByteArray *palette = [IOSByteArray arrayWithLength:((IOSCharArray *) nil_chk(rgb))->size_];
        jint gColor = rgb->size_ / 3;
        jint bColor = gColor * 2;
        for (jint k = 0; k < gColor; ++k) {
          *IOSByteArray_GetRef(palette, k * 3) = (jbyte) (URShift32(IOSCharArray_Get(rgb, k), 8));
          *IOSByteArray_GetRef(palette, k * 3 + 1) = (jbyte) (URShift32(IOSCharArray_Get(rgb, k + gColor), 8));
          *IOSByteArray_GetRef(palette, k * 3 + 2) = (jbyte) (URShift32(IOSCharArray_Get(rgb, k + bColor), 8));
        }
        
#line 573
        jboolean colormapBroken = YES;
        for (jint k = 0; k < palette->size_; ++k) {
          if (IOSByteArray_Get(palette, k) != 0) {
            colormapBroken = NO;
            break;
          }
        }
        if (colormapBroken) {
          for (jint k = 0; k < gColor; ++k) {
            *IOSByteArray_GetRef(palette, k * 3) = (jbyte) IOSCharArray_Get(rgb, k);
            *IOSByteArray_GetRef(palette, k * 3 + 1) = (jbyte) IOSCharArray_Get(rgb, k + gColor);
            *IOSByteArray_GetRef(palette, k * 3 + 2) = (jbyte) IOSCharArray_Get(rgb, k + bColor);
          }
        }
        ComItextpdfTextPdfPdfArray *indexed = [[ComItextpdfTextPdfPdfArray alloc] init];
        [indexed addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_INDEXED_()];
        [indexed addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
        [indexed addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:gColor - 1]];
        [indexed addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithByteArray:palette]];
        ComItextpdfTextPdfPdfDictionary *additional = [[ComItextpdfTextPdfPdfDictionary alloc] init];
        [additional putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:indexed];
        [img setAdditionalWithComItextpdfTextPdfPdfDictionary:additional];
      }
      [img setOriginalTypeWithInt:ComItextpdfTextImage_ORIGINAL_TIFF];
    }
    if (photometric == ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISWHITE)
#line 599
    [img setInvertedWithBoolean:YES];
    if (rotation != 0)
#line 601
    [img setInitialRotationWithFloat:rotation];
    if (extraSamples > 0) {
      [((JavaUtilZipDeflaterOutputStream *) nil_chk(mzip)) close];
      ComItextpdfTextImage *mimg = [ComItextpdfTextImage getInstanceWithInt:w withInt:h withInt:1 withInt:bitsPerSample withByteArray:[((JavaIoByteArrayOutputStream *) nil_chk(mstream)) toByteArray]];
      [((ComItextpdfTextImage *) nil_chk(mimg)) makeMask];
      [mimg setDeflatedWithBoolean:YES];
      [img setImageMaskWithComItextpdfTextImage:mimg];
    }
    return img;
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 616
+ (ComItextpdfTextImage *)ProcessExtraSamplesWithJavaUtilZipDeflaterOutputStream:(JavaUtilZipDeflaterOutputStream *)zip
                                             withJavaUtilZipDeflaterOutputStream:(JavaUtilZipDeflaterOutputStream *)mzip
                                                                   withByteArray:(IOSByteArray *)outBuf
                                                                         withInt:(jint)samplePerPixel
                                                                         withInt:(jint)bitsPerSample
                                                                         withInt:(jint)width
                                                                         withInt:(jint)height {
  
#line 617
  if (bitsPerSample == 8) {
    IOSByteArray *mask = [IOSByteArray arrayWithLength:width * height];
    jint mptr = 0;
    jint optr = 0;
    jint total = width * height * samplePerPixel;
    for (jint k = 0; k < total; k += samplePerPixel) {
      for (jint s = 0; s < samplePerPixel - 1; ++s) {
        *IOSByteArray_GetRef(nil_chk(outBuf), optr++) = IOSByteArray_Get(outBuf, k + s);
      }
      *IOSByteArray_GetRef(mask, mptr++) = IOSByteArray_Get(nil_chk(outBuf), k + samplePerPixel - 1);
    }
    [((JavaUtilZipDeflaterOutputStream *) nil_chk(zip)) writeWithByteArray:outBuf withInt:0 withInt:optr];
    [((JavaUtilZipDeflaterOutputStream *) nil_chk(mzip)) writeWithByteArray:mask withInt:0 withInt:mptr];
  }
  else
#line 632
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"extra.samples.are.not.supported" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  return nil;
}


#line 636
+ (IOSLongArray *)getArrayLongShortWithComItextpdfTextPdfCodecTIFFDirectory:(ComItextpdfTextPdfCodecTIFFDirectory *)dir
                                                                    withInt:(jint)tag {
  
#line 637
  ComItextpdfTextPdfCodecTIFFField *field = [((ComItextpdfTextPdfCodecTIFFDirectory *) nil_chk(dir)) getFieldWithInt:tag];
  if (field == nil)
#line 639
  return nil;
  IOSLongArray *offset;
  if ([((ComItextpdfTextPdfCodecTIFFField *) nil_chk(field)) getType] == ComItextpdfTextPdfCodecTIFFField_TIFF_LONG)
#line 642
  offset = [field getAsLongs];
  else {
    IOSCharArray *temp = [field getAsChars];
    offset = [IOSLongArray arrayWithLength:((IOSCharArray *) nil_chk(temp))->size_];
    for (jint k = 0; k < temp->size_; ++k)
#line 647
    *IOSLongArray_GetRef(offset, k) = IOSCharArray_Get(temp, k);
  }
  return offset;
}


#line 653
+ (void)decodePackbitsWithByteArray:(IOSByteArray *)data
                      withByteArray:(IOSByteArray *)dst {
  
#line 654
  jint srcCount = 0, dstCount = 0;
  jbyte repeat, b;
  
#line 657
  @try {
    while (dstCount < ((IOSByteArray *) nil_chk(dst))->size_) {
      b = IOSByteArray_Get(nil_chk(data), srcCount++);
      if (b >= 0 && b <= 127) {
        
#line 662
        for (jint i = 0; i < (b + 1); i++) {
          *IOSByteArray_GetRef(dst, dstCount++) = IOSByteArray_Get(data, srcCount++);
        }
      }
      else if (b <= -1 && b >= -127) {
        
#line 668
        repeat = IOSByteArray_Get(data, srcCount++);
        for (jint i = 0; i < (-b + 1); i++) {
          *IOSByteArray_GetRef(dst, dstCount++) = repeat;
        }
      }
      else {
        srcCount++;
      }
    }
  }
  @catch (JavaLangException *e) {
  }
}


#line 683
+ (void)inflateWithByteArray:(IOSByteArray *)deflated
               withByteArray:(IOSByteArray *)inflated {
  
#line 684
  JavaUtilZipInflater *inflater = [[JavaUtilZipInflater alloc] init];
  [inflater setInputWithByteArray:deflated];
  @try {
    [inflater inflateWithByteArray:inflated];
  }
  @catch (JavaUtilZipDataFormatException *dfe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:dfe];
  }
}


#line 694
+ (void)applyPredictorWithByteArray:(IOSByteArray *)uncompData
                            withInt:(jint)predictor
                            withInt:(jint)w
                            withInt:(jint)h
                            withInt:(jint)samplesPerPixel {
  
#line 695
  if (predictor != 2)
#line 696
  return;
  jint count;
  for (jint j = 0; j < h; j++) {
    count = samplesPerPixel * (j * w + 1);
    for (jint i = samplesPerPixel; i < w * samplesPerPixel; i++) {
      *IOSByteArray_GetRef(nil_chk(uncompData), count) += IOSByteArray_Get(uncompData, count - samplesPerPixel);
      count++;
    }
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getNumberOfPagesWithComItextpdfTextPdfRandomAccessFileOrArray:", "getNumberOfPages", "I", 0x9, NULL },
    { "getDpiWithComItextpdfTextPdfCodecTIFFField:withInt:", "getDpi", "I", 0x8, NULL },
    { "getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:withBoolean:withInt:withBoolean:", "getTiffImage", "Lcom.itextpdf.text.Image;", 0x9, NULL },
    { "getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:withBoolean:withInt:", "getTiffImage", "Lcom.itextpdf.text.Image;", 0x9, NULL },
    { "getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:withInt:", "getTiffImage", "Lcom.itextpdf.text.Image;", 0x9, NULL },
    { "getTiffImageWithComItextpdfTextPdfRandomAccessFileOrArray:withInt:withBoolean:", "getTiffImage", "Lcom.itextpdf.text.Image;", 0x9, NULL },
    { "getTiffImageColorWithComItextpdfTextPdfCodecTIFFDirectory:withComItextpdfTextPdfRandomAccessFileOrArray:", "getTiffImageColor", "Lcom.itextpdf.text.Image;", 0xc, NULL },
    { "ProcessExtraSamplesWithJavaUtilZipDeflaterOutputStream:withJavaUtilZipDeflaterOutputStream:withByteArray:withInt:withInt:withInt:withInt:", "ProcessExtraSamples", "Lcom.itextpdf.text.Image;", 0x8, "Ljava.io.IOException;" },
    { "getArrayLongShortWithComItextpdfTextPdfCodecTIFFDirectory:withInt:", "getArrayLongShort", "[J", 0x8, NULL },
    { "decodePackbitsWithByteArray:withByteArray:", "decodePackbits", "V", 0x9, NULL },
    { "inflateWithByteArray:withByteArray:", "inflate", "V", 0x9, NULL },
    { "applyPredictorWithByteArray:withInt:withInt:withInt:withInt:", "applyPredictor", "V", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecTiffImage = { "TiffImage", "com.itextpdf.text.pdf.codec", NULL, 0x1, 13, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfCodecTiffImage;
}

@end
