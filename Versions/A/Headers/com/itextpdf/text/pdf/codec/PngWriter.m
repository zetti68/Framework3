//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/PngWriter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/PngWriter.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocWriter.h"
#include "com/itextpdf/text/pdf/codec/PngWriter.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/util/zip/DeflaterOutputStream.h"

BOOL ComItextpdfTextPdfCodecPngWriter_initialized = NO;


#line 60
@implementation ComItextpdfTextPdfCodecPngWriter

IOSByteArray * ComItextpdfTextPdfCodecPngWriter_PNG_SIGNTURE_;
IOSByteArray * ComItextpdfTextPdfCodecPngWriter_IHDR_;
IOSByteArray * ComItextpdfTextPdfCodecPngWriter_PLTE_;
IOSByteArray * ComItextpdfTextPdfCodecPngWriter_IDAT_;
IOSByteArray * ComItextpdfTextPdfCodecPngWriter_IEND_;
IOSByteArray * ComItextpdfTextPdfCodecPngWriter_iCCP_;
IOSIntArray * ComItextpdfTextPdfCodecPngWriter_crc_table_;


#line 73
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)outp {
  if (self = [super init]) {
    
#line 74
    self->outp_ = outp;
    
#line 75
    [((JavaIoOutputStream *) nil_chk(outp)) writeWithByteArray:ComItextpdfTextPdfCodecPngWriter_PNG_SIGNTURE_];
  }
  return self;
}


#line 78
- (void)writeHeaderWithInt:(jint)width
                   withInt:(jint)height
                   withInt:(jint)bitDepth
                   withInt:(jint)colorType {
  
#line 79
  JavaIoByteArrayOutputStream *ms = [[JavaIoByteArrayOutputStream alloc] init];
  [ComItextpdfTextPdfCodecPngWriter outputIntWithInt:width withJavaIoOutputStream:ms];
  [ComItextpdfTextPdfCodecPngWriter outputIntWithInt:height withJavaIoOutputStream:ms];
  [ms writeWithInt:bitDepth];
  [ms writeWithInt:colorType];
  [ms writeWithInt:0];
  [ms writeWithInt:0];
  [ms writeWithInt:0];
  [self writeChunkWithByteArray:ComItextpdfTextPdfCodecPngWriter_IHDR_ withByteArray:[ms toByteArray]];
}


#line 90
- (void)writeEnd {
  
#line 91
  [self writeChunkWithByteArray:ComItextpdfTextPdfCodecPngWriter_IEND_ withByteArray:[IOSByteArray arrayWithLength:0]];
}


#line 94
- (void)writeDataWithByteArray:(IOSByteArray *)data
                       withInt:(jint)stride {
  
#line 95
  JavaIoByteArrayOutputStream *stream = [[JavaIoByteArrayOutputStream alloc] init];
  JavaUtilZipDeflaterOutputStream *zip = [[JavaUtilZipDeflaterOutputStream alloc] initWithJavaIoOutputStream:stream];
  jint k;
  for (k = 0; k < ((IOSByteArray *) nil_chk(data))->size_ - stride; k += stride) {
    [zip writeWithInt:0];
    [zip writeWithByteArray:data withInt:k withInt:stride];
  }
  jint remaining = data->size_ - k;
  if (remaining > 0) {
    [zip writeWithInt:0];
    [zip writeWithByteArray:data withInt:k withInt:remaining];
  }
  [zip close];
  [self writeChunkWithByteArray:ComItextpdfTextPdfCodecPngWriter_IDAT_ withByteArray:[stream toByteArray]];
}


#line 111
- (void)writePaletteWithByteArray:(IOSByteArray *)data {
  
#line 112
  [self writeChunkWithByteArray:ComItextpdfTextPdfCodecPngWriter_PLTE_ withByteArray:data];
}


#line 115
- (void)writeIccProfileWithByteArray:(IOSByteArray *)data {
  
#line 116
  JavaIoByteArrayOutputStream *stream = [[JavaIoByteArrayOutputStream alloc] init];
  [stream writeWithInt:(jbyte) 'I'];
  [stream writeWithInt:(jbyte) 'C'];
  [stream writeWithInt:(jbyte) 'C'];
  [stream writeWithInt:0];
  [stream writeWithInt:0];
  JavaUtilZipDeflaterOutputStream *zip = [[JavaUtilZipDeflaterOutputStream alloc] initWithJavaIoOutputStream:stream];
  [zip writeWithByteArray:data];
  [zip close];
  [self writeChunkWithByteArray:ComItextpdfTextPdfCodecPngWriter_iCCP_ withByteArray:[stream toByteArray]];
}


#line 128
+ (void)make_crc_table {
  
#line 129
  if (ComItextpdfTextPdfCodecPngWriter_crc_table_ != nil)
#line 130
  return;
  IOSIntArray *crc2 = [IOSIntArray arrayWithLength:256];
  for (jint n = 0; n < 256; n++) {
    jint c = n;
    for (jint k = 0; k < 8; k++) {
      if ((c & 1) != 0)
#line 136
      c = (jint) 0xedb88320 ^ (URShift32(c, 1));
      else
#line 138
      c = URShift32(c, 1);
    }
    *IOSIntArray_GetRef(crc2, n) = c;
  }
  ComItextpdfTextPdfCodecPngWriter_crc_table_ = crc2;
}


#line 145
+ (jint)update_crcWithInt:(jint)crc
            withByteArray:(IOSByteArray *)buf
                  withInt:(jint)offset
                  withInt:(jint)len {
  
#line 146
  jint c = crc;
  
#line 148
  if (ComItextpdfTextPdfCodecPngWriter_crc_table_ == nil)
#line 149
  [ComItextpdfTextPdfCodecPngWriter make_crc_table];
  for (jint n = 0; n < len; n++) {
    c = IOSIntArray_Get(nil_chk(ComItextpdfTextPdfCodecPngWriter_crc_table_), (c ^ IOSByteArray_Get(nil_chk(buf), n + offset)) & (jint) 0xff) ^ (URShift32(c, 8));
  }
  return c;
}


#line 156
+ (jint)crcWithByteArray:(IOSByteArray *)buf
                 withInt:(jint)offset
                 withInt:(jint)len {
  
#line 157
  return [ComItextpdfTextPdfCodecPngWriter update_crcWithInt:(jint) 0xffffffff withByteArray:buf withInt:offset withInt:len] ^ (jint) 0xffffffff;
}


#line 160
+ (jint)crcWithByteArray:(IOSByteArray *)buf {
  
#line 161
  return [ComItextpdfTextPdfCodecPngWriter update_crcWithInt:(jint) 0xffffffff withByteArray:buf withInt:0 withInt:((IOSByteArray *) nil_chk(buf))->size_] ^ (jint) 0xffffffff;
}


#line 164
- (void)outputIntWithInt:(jint)n {
  
#line 165
  [ComItextpdfTextPdfCodecPngWriter outputIntWithInt:n withJavaIoOutputStream:outp_];
}


#line 168
+ (void)outputIntWithInt:(jint)n
  withJavaIoOutputStream:(JavaIoOutputStream *)s {
  
#line 169
  [((JavaIoOutputStream *) nil_chk(s)) writeWithInt:(jbyte) (RShift32(n, 24))];
  [s writeWithInt:(jbyte) (RShift32(n, 16))];
  [s writeWithInt:(jbyte) (RShift32(n, 8))];
  [s writeWithInt:(jbyte) n];
}


#line 175
- (void)writeChunkWithByteArray:(IOSByteArray *)chunkType
                  withByteArray:(IOSByteArray *)data {
  
#line 176
  [self outputIntWithInt:((IOSByteArray *) nil_chk(data))->size_];
  [((JavaIoOutputStream *) nil_chk(outp_)) writeWithByteArray:chunkType withInt:0 withInt:4];
  [outp_ writeWithByteArray:data];
  jint c = [ComItextpdfTextPdfCodecPngWriter update_crcWithInt:(jint) 0xffffffff withByteArray:chunkType withInt:0 withInt:((IOSByteArray *) nil_chk(chunkType))->size_];
  c = [ComItextpdfTextPdfCodecPngWriter update_crcWithInt:c withByteArray:data withInt:0 withInt:data->size_] ^ (jint) 0xffffffff;
  [self outputIntWithInt:c];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecPngWriter *)other {
  [super copyAllFieldsTo:other];
  other->outp_ = outp_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfCodecPngWriter class]) {
    ComItextpdfTextPdfCodecPngWriter_PNG_SIGNTURE_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 61
      (jbyte) 137, 80, 78, 71, 13, 10, 26, 10 } count:8];
      ComItextpdfTextPdfCodecPngWriter_IHDR_ =
#line 63
      [ComItextpdfTextDocWriter getISOBytesWithNSString:@"IHDR"];
      ComItextpdfTextPdfCodecPngWriter_PLTE_ =
#line 64
      [ComItextpdfTextDocWriter getISOBytesWithNSString:@"PLTE"];
      ComItextpdfTextPdfCodecPngWriter_IDAT_ =
#line 65
      [ComItextpdfTextDocWriter getISOBytesWithNSString:@"IDAT"];
      ComItextpdfTextPdfCodecPngWriter_IEND_ =
#line 66
      [ComItextpdfTextDocWriter getISOBytesWithNSString:@"IEND"];
      ComItextpdfTextPdfCodecPngWriter_iCCP_ =
#line 67
      [ComItextpdfTextDocWriter getISOBytesWithNSString:@"iCCP"];
      ComItextpdfTextPdfCodecPngWriter_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoOutputStream:", "PngWriter", NULL, 0x1, "Ljava.io.IOException;" },
    { "writeHeaderWithInt:withInt:withInt:withInt:", "writeHeader", "V", 0x1, "Ljava.io.IOException;" },
    { "writeEnd", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "writeDataWithByteArray:withInt:", "writeData", "V", 0x1, "Ljava.io.IOException;" },
    { "writePaletteWithByteArray:", "writePalette", "V", 0x1, "Ljava.io.IOException;" },
    { "writeIccProfileWithByteArray:", "writeIccProfile", "V", 0x1, "Ljava.io.IOException;" },
    { "make_crc_table", NULL, "V", 0xa, NULL },
    { "update_crcWithInt:withByteArray:withInt:withInt:", "update_crc", "I", 0xa, NULL },
    { "crcWithByteArray:withInt:withInt:", "crc", "I", 0xa, NULL },
    { "crcWithByteArray:", "crc", "I", 0xa, NULL },
    { "outputIntWithInt:", "outputInt", "V", 0x1, "Ljava.io.IOException;" },
    { "outputIntWithInt:withJavaIoOutputStream:", "outputInt", "V", 0x9, "Ljava.io.IOException;" },
    { "writeChunkWithByteArray:withByteArray:", "writeChunk", "V", 0x1, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PNG_SIGNTURE_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecPngWriter_PNG_SIGNTURE_,  },
    { "IHDR_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecPngWriter_IHDR_,  },
    { "PLTE_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecPngWriter_PLTE_,  },
    { "IDAT_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecPngWriter_IDAT_,  },
    { "IEND_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecPngWriter_IEND_,  },
    { "iCCP_", NULL, 0x1a, "[B", &ComItextpdfTextPdfCodecPngWriter_iCCP_,  },
    { "crc_table_", NULL, 0xa, "[I", &ComItextpdfTextPdfCodecPngWriter_crc_table_,  },
    { "outp_", NULL, 0x2, "Ljava.io.OutputStream;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecPngWriter = { "PngWriter", "com.itextpdf.text.pdf.codec", NULL, 0x1, 13, methods, 8, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecPngWriter;
}

@end
