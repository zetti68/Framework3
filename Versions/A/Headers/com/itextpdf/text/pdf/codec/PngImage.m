//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/PngImage.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/PngImage.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/ImgRaw.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/ICC_Profile.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/codec/PngImage.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/net/URL.h"
#include "java/util/zip/Inflater.h"
#include "java/util/zip/InflaterInputStream.h"

BOOL ComItextpdfTextPdfCodecPngImage_initialized = NO;


#line 123
@implementation ComItextpdfTextPdfCodecPngImage

IOSIntArray * ComItextpdfTextPdfCodecPngImage_PNGID_;
NSString * ComItextpdfTextPdfCodecPngImage_IHDR_ = 
#line 128
@"IHDR";
NSString * ComItextpdfTextPdfCodecPngImage_PLTE_ = 
#line 131
@"PLTE";
NSString * ComItextpdfTextPdfCodecPngImage_IDAT_ = 
#line 134
@"IDAT";
NSString * ComItextpdfTextPdfCodecPngImage_IEND_ = 
#line 137
@"IEND";
NSString * ComItextpdfTextPdfCodecPngImage_tRNS_ = 
#line 140
@"tRNS";
NSString * ComItextpdfTextPdfCodecPngImage_pHYs_ = 
#line 143
@"pHYs";
NSString * ComItextpdfTextPdfCodecPngImage_gAMA_ = 
#line 146
@"gAMA";
NSString * ComItextpdfTextPdfCodecPngImage_cHRM_ = 
#line 149
@"cHRM";
NSString * ComItextpdfTextPdfCodecPngImage_sRGB_ = 
#line 152
@"sRGB";
NSString * ComItextpdfTextPdfCodecPngImage_iCCP_ = 
#line 155
@"iCCP";
IOSObjectArray * ComItextpdfTextPdfCodecPngImage_intents_;


#line 200
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is {
  if (self = [super init]) {
    additional_ =
#line 175
    [[ComItextpdfTextPdfPdfDictionary alloc] init];
    idat_ =
#line 179
    [[ComItextpdfTextPdfCodecPngImage_NewByteArrayOutputStream alloc] init];
    transRedGray_ =
#line 185
    -1;
    transGreen_ =
#line 186
    -1;
    transBlue_ =
#line 187
    -1;
    gamma_ =
#line 191
    1.0f;
    hasCHRM_ =
#line 192
    NO;
    
#line 201
    self->is_ = is;
  }
  return self;
}


#line 209
+ (ComItextpdfTextImage *)getImageWithJavaNetURL:(JavaNetURL *)url {
  
#line 210
  JavaIoInputStream *is = nil;
  @try {
    is = [((JavaNetURL *) nil_chk(url)) openStream];
    ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecPngImage getImageWithJavaIoInputStream:is];
    [((ComItextpdfTextImage *) nil_chk(img)) setUrlWithJavaNetURL:url];
    return img;
  }
  @finally {
    if (is != nil) {
      [is close];
    }
  }
}


#line 229
+ (ComItextpdfTextImage *)getImageWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 230
  ComItextpdfTextPdfCodecPngImage *png = [[ComItextpdfTextPdfCodecPngImage alloc] initWithJavaIoInputStream:is];
  return [png getImage];
}


#line 239
+ (ComItextpdfTextImage *)getImageWithNSString:(NSString *)file {
  
#line 240
  return [ComItextpdfTextPdfCodecPngImage getImageWithJavaNetURL:[ComItextpdfTextUtilities toURLWithNSString:file]];
}


#line 248
+ (ComItextpdfTextImage *)getImageWithByteArray:(IOSByteArray *)data {
  
#line 249
  JavaIoByteArrayInputStream *is = [[JavaIoByteArrayInputStream alloc] initWithByteArray:data];
  ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecPngImage getImageWithJavaIoInputStream:is];
  [((ComItextpdfTextImage *) nil_chk(img)) setOriginalDataWithByteArray:data];
  return img;
}


#line 255
- (jboolean)checkMarkerWithNSString:(NSString *)s {
  
#line 256
  if (((jint) [((NSString *) nil_chk(s)) length]) != 4)
#line 257
  return NO;
  for (jint k = 0; k < 4; ++k) {
    jchar c = [s charAtWithInt:k];
    if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))
#line 261
    return NO;
  }
  return YES;
}


#line 266
- (void)readPng {
  
#line 267
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(ComItextpdfTextPdfCodecPngImage_PNGID_))->size_; i++) {
    if (IOSIntArray_Get(ComItextpdfTextPdfCodecPngImage_PNGID_, i) != [((JavaIoInputStream *) nil_chk(is_)) read]) {
      @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"file.is.not.a.valid.png" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  IOSByteArray *buffer = [IOSByteArray arrayWithLength:ComItextpdfTextPdfCodecPngImage_TRANSFERSIZE];
  while (YES) {
    jint len = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_];
    NSString *marker = [ComItextpdfTextPdfCodecPngImage getStringWithJavaIoInputStream:is_];
    if (len < 0 || ![self checkMarkerWithNSString:marker])
#line 277
    @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"corrupted.png.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_IDAT_)) isEqual:marker]) {
      jint size;
      while (len != 0) {
        size = [((JavaIoInputStream *) nil_chk(is_)) readWithByteArray:buffer withInt:0 withInt:[JavaLangMath minWithInt:len withInt:ComItextpdfTextPdfCodecPngImage_TRANSFERSIZE]];
        if (size < 0)
#line 283
        return;
        [((ComItextpdfTextPdfCodecPngImage_NewByteArrayOutputStream *) nil_chk(idat_)) writeWithByteArray:buffer withInt:0 withInt:size];
        len -= size;
      }
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_tRNS_)) isEqual:marker]) {
      switch (colorType_) {
        case 0:
        if (len >= 2) {
          len -= 2;
          jint gray = [ComItextpdfTextPdfCodecPngImage getWordWithJavaIoInputStream:is_];
          if (bitDepth_ == 16)
#line 295
          transRedGray_ = gray;
          else
#line 297
          [((ComItextpdfTextPdfPdfDictionary *) nil_chk(additional_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MASK_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:JreStrcat("CICIC", '[', gray, ' ', gray, ']')]];
        }
        break;
        case 2:
        if (len >= 6) {
          len -= 6;
          jint red = [ComItextpdfTextPdfCodecPngImage getWordWithJavaIoInputStream:is_];
          jint green = [ComItextpdfTextPdfCodecPngImage getWordWithJavaIoInputStream:is_];
          jint blue = [ComItextpdfTextPdfCodecPngImage getWordWithJavaIoInputStream:is_];
          if (bitDepth_ == 16) {
            transRedGray_ = red;
            transGreen_ = green;
            transBlue_ = blue;
          }
          else
#line 312
          [((ComItextpdfTextPdfPdfDictionary *) nil_chk(additional_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MASK_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:JreStrcat("CICICICICICIC", '[', red, ' ', red, ' ', green, ' ', green, ' ', blue, ' ', blue, ']')]];
        }
        break;
        case 3:
        if (len > 0) {
          trans_ = [IOSByteArray arrayWithLength:len];
          for (jint k = 0; k < len; ++k)
#line 319
          *IOSByteArray_GetRef(trans_, k) = (jbyte) [((JavaIoInputStream *) nil_chk(is_)) read];
          len = 0;
        }
        break;
      }
      [ComItextpdfTextUtilities skipWithJavaIoInputStream:is_ withInt:len];
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_IHDR_)) isEqual:marker]) {
      width_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_];
      height_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_];
      
#line 330
      bitDepth_ = [((JavaIoInputStream *) nil_chk(is_)) read];
      colorType_ = [is_ read];
      compressionMethod_ = [is_ read];
      filterMethod_ = [is_ read];
      interlaceMethod_ = [is_ read];
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_PLTE_)) isEqual:marker]) {
      if (colorType_ == 3) {
        ComItextpdfTextPdfPdfArray *colorspace = [[ComItextpdfTextPdfPdfArray alloc] init];
        [colorspace addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_INDEXED_()];
        [colorspace addWithComItextpdfTextPdfPdfObject:[self getColorspace]];
        [colorspace addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:len / 3 - 1]];
        ComItextpdfTextPdfByteBuffer *colortable = [[ComItextpdfTextPdfByteBuffer alloc] init];
        while ((len--) > 0) {
          (void) [colortable append_iWithInt:[((JavaIoInputStream *) nil_chk(is_)) read]];
        }
        [colorspace addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithByteArray:colorTable_ = [colortable toByteArray]]];
        [((ComItextpdfTextPdfPdfDictionary *) nil_chk(additional_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:colorspace];
      }
      else {
        [ComItextpdfTextUtilities skipWithJavaIoInputStream:is_ withInt:len];
      }
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_pHYs_)) isEqual:marker]) {
      jint dx = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_];
      jint dy = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_];
      jint unit = [((JavaIoInputStream *) nil_chk(is_)) read];
      if (unit == 1) {
        dpiX_ = J2ObjCFpToInt((dx * 0.0254f + 0.5f));
        dpiY_ = J2ObjCFpToInt((dy * 0.0254f + 0.5f));
      }
      else {
        if (dy != 0)
#line 363
        XYRatio_ = (jfloat) dx / (jfloat) dy;
      }
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_cHRM_)) isEqual:marker]) {
      xW_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_] / 100000.0f;
      yW_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_] / 100000.0f;
      xR_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_] / 100000.0f;
      yR_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_] / 100000.0f;
      xG_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_] / 100000.0f;
      yG_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_] / 100000.0f;
      xB_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_] / 100000.0f;
      yB_ = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_] / 100000.0f;
      hasCHRM_ = !([JavaLangMath absWithFloat:xW_] < 0.0001f || [JavaLangMath absWithFloat:yW_] < 0.0001f || [JavaLangMath absWithFloat:xR_] < 0.0001f || [JavaLangMath absWithFloat:yR_] < 0.0001f || [JavaLangMath absWithFloat:xG_] < 0.0001f || [JavaLangMath absWithFloat:yG_] < 0.0001f || [JavaLangMath absWithFloat:xB_] < 0.0001f || [JavaLangMath absWithFloat:yB_] < 0.0001f);
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_sRGB_)) isEqual:marker]) {
      jint ri = [((JavaIoInputStream *) nil_chk(is_)) read];
      intent_ = IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfCodecPngImage_intents_), ri);
      gamma_ = 2.2f;
      xW_ = 0.3127f;
      yW_ = 0.329f;
      xR_ = 0.64f;
      yR_ = 0.33f;
      xG_ = 0.3f;
      yG_ = 0.6f;
      xB_ = 0.15f;
      yB_ = 0.06f;
      hasCHRM_ = YES;
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_gAMA_)) isEqual:marker]) {
      jint gm = [ComItextpdfTextPdfCodecPngImage getIntWithJavaIoInputStream:is_];
      if (gm != 0) {
        gamma_ = 100000.0f / gm;
        if (!hasCHRM_) {
          xW_ = 0.3127f;
          yW_ = 0.329f;
          xR_ = 0.64f;
          yR_ = 0.33f;
          xG_ = 0.3f;
          yG_ = 0.6f;
          xB_ = 0.15f;
          yB_ = 0.06f;
          hasCHRM_ = YES;
        }
      }
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_iCCP_)) isEqual:marker]) {
      do {
        --len;
      }
      while (
#line 411
      [((JavaIoInputStream *) nil_chk(is_)) read] != 0);
      [((JavaIoInputStream *) nil_chk(is_)) read];
      --len;
      IOSByteArray *icccom = [IOSByteArray arrayWithLength:len];
      jint p = 0;
      while (len > 0) {
        jint r = [is_ readWithByteArray:icccom withInt:p withInt:len];
        if (r < 0)
#line 419
        @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"premature.end.of.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
        p += r;
        len -= r;
      }
      IOSByteArray *iccp = [ComItextpdfTextPdfPdfReader FlateDecodeWithByteArray:icccom withBoolean:YES];
      icccom = nil;
      @try {
        icc_profile_ = [ComItextpdfTextPdfICC_Profile getInstanceWithByteArray:iccp];
      }
      @catch (JavaLangRuntimeException *e) {
        icc_profile_ = nil;
      }
    }
    else if ([((NSString *) nil_chk(ComItextpdfTextPdfCodecPngImage_IEND_)) isEqual:marker]) {
      break;
    }
    else {
      [ComItextpdfTextUtilities skipWithJavaIoInputStream:is_ withInt:len];
    }
    [ComItextpdfTextUtilities skipWithJavaIoInputStream:is_ withInt:4];
  }
}


#line 442
- (ComItextpdfTextPdfPdfObject *)getColorspace {
  
#line 443
  if (icc_profile_ != nil) {
    if ((colorType_ & 2) == 0)
#line 445
    return ComItextpdfTextPdfPdfName_get_DEVICEGRAY_();
    else
#line 447
    return ComItextpdfTextPdfPdfName_get_DEVICERGB_();
  }
  if (gamma_ == 1.0f && !hasCHRM_) {
    if ((colorType_ & 2) == 0)
#line 451
    return ComItextpdfTextPdfPdfName_get_DEVICEGRAY_();
    else
#line 453
    return ComItextpdfTextPdfPdfName_get_DEVICERGB_();
  }
  else {
    ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] init];
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    if ((colorType_ & 2) == 0) {
      if (gamma_ == 1.0f)
#line 460
      return ComItextpdfTextPdfPdfName_get_DEVICEGRAY_();
      [array addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CALGRAY_()];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_GAMMA_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:gamma_]];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WHITEPOINT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:@"[1 1 1]"]];
      [array addWithComItextpdfTextPdfPdfObject:dic];
    }
    else {
      ComItextpdfTextPdfPdfObject *wp = [[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:@"[1 1 1]"];
      [array addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CALRGB_()];
      if (gamma_ != 1.0f) {
        ComItextpdfTextPdfPdfArray *gm = [[ComItextpdfTextPdfPdfArray alloc] init];
        ComItextpdfTextPdfPdfNumber *n = [[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:gamma_];
        [gm addWithComItextpdfTextPdfPdfObject:n];
        [gm addWithComItextpdfTextPdfPdfObject:n];
        [gm addWithComItextpdfTextPdfPdfObject:n];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_GAMMA_() withComItextpdfTextPdfPdfObject:gm];
      }
      if (hasCHRM_) {
        jfloat z = yW_ * ((xG_ - xB_) * yR_ - (xR_ - xB_) * yG_ + (xR_ - xG_) * yB_);
        jfloat YA = yR_ * ((xG_ - xB_) * yW_ - (xW_ - xB_) * yG_ + (xW_ - xG_) * yB_) / z;
        jfloat XA = YA * xR_ / yR_;
        jfloat ZA = YA * ((1 - xR_) / yR_ - 1);
        jfloat YB = -yG_ * ((xR_ - xB_) * yW_ - (xW_ - xB_) * yR_ + (xW_ - xR_) * yB_) / z;
        jfloat XB = YB * xG_ / yG_;
        jfloat ZB = YB * ((1 - xG_) / yG_ - 1);
        jfloat YC = yB_ * ((xR_ - xG_) * yW_ - (xW_ - xG_) * yW_ + (xW_ - xR_) * yG_) / z;
        jfloat XC = YC * xB_ / yB_;
        jfloat ZC = YC * ((1 - xB_) / yB_ - 1);
        jfloat XW = XA + XB + XC;
        jfloat YW = 1;
        jfloat ZW = ZA + ZB + ZC;
        ComItextpdfTextPdfPdfArray *wpa = [[ComItextpdfTextPdfPdfArray alloc] init];
        [wpa addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:XW]];
        [wpa addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:YW]];
        [wpa addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:ZW]];
        wp = wpa;
        ComItextpdfTextPdfPdfArray *matrix = [[ComItextpdfTextPdfPdfArray alloc] init];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:XA]];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:YA]];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:ZA]];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:XB]];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:YB]];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:ZB]];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:XC]];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:YC]];
        [matrix addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:ZC]];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MATRIX_() withComItextpdfTextPdfPdfObject:matrix];
      }
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WHITEPOINT_() withComItextpdfTextPdfPdfObject:wp];
      [array addWithComItextpdfTextPdfPdfObject:dic];
    }
    return array;
  }
}


#line 515
- (ComItextpdfTextImage *)getImage {
  
#line 516
  [self readPng];
  @try {
    jint pal0 = 0;
    jint palIdx = 0;
    palShades_ = NO;
    if (trans_ != nil) {
      for (jint k = 0; k < trans_->size_; ++k) {
        jint n = IOSByteArray_Get(trans_, k) & (jint) 0xff;
        if (n == 0) {
          ++pal0;
          palIdx = k;
        }
        if (n != 0 && n != 255) {
          palShades_ = YES;
          break;
        }
      }
    }
    if ((colorType_ & 4) != 0)
#line 535
    palShades_ = YES;
    genBWMask_ = (!palShades_ && (pal0 > 1 || transRedGray_ >= 0));
    if (!palShades_ && !genBWMask_ && pal0 == 1) {
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(additional_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MASK_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:JreStrcat("CICIC", '[', palIdx, ' ', palIdx, ']')]];
    }
    jboolean needDecode = (interlaceMethod_ == 1) || (bitDepth_ == 16) || ((colorType_ & 4) != 0) || palShades_ || genBWMask_;
    switch (colorType_) {
      case 0:
      inputBands_ = 1;
      break;
      case 2:
      inputBands_ = 3;
      break;
      case 3:
      inputBands_ = 1;
      break;
      case 4:
      inputBands_ = 2;
      break;
      case 6:
      inputBands_ = 4;
      break;
    }
    if (needDecode)
#line 559
    [self decodeIdat];
    jint components = inputBands_;
    if ((colorType_ & 4) != 0)
#line 562
    --components;
    jint bpc = bitDepth_;
    if (bpc == 16)
#line 565
    bpc = 8;
    ComItextpdfTextImage *img;
    if (image_ != nil) {
      if (colorType_ == 3)
#line 569
      img = [[ComItextpdfTextImgRaw alloc] initWithInt:width_ withInt:height_ withInt:components withInt:bpc withByteArray:image_];
      else
#line 571
      img = [ComItextpdfTextImage getInstanceWithInt:width_ withInt:height_ withInt:components withInt:bpc withByteArray:image_];
    }
    else {
      img = [[ComItextpdfTextImgRaw alloc] initWithInt:width_ withInt:height_ withInt:components withInt:bpc withByteArray:[((ComItextpdfTextPdfCodecPngImage_NewByteArrayOutputStream *) nil_chk(idat_)) toByteArray]];
      [img setDeflatedWithBoolean:YES];
      ComItextpdfTextPdfPdfDictionary *decodeparms = [[ComItextpdfTextPdfPdfDictionary alloc] init];
      [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:bitDepth_]];
      [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PREDICTOR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:15]];
      [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLUMNS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:width_]];
      [decodeparms putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:(colorType_ == 3 || (colorType_ & 2) == 0) ? 1 : 3]];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(additional_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODEPARMS_() withComItextpdfTextPdfPdfObject:decodeparms];
    }
    if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(additional_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_()] == nil)
#line 584
    [additional_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:[self getColorspace]];
    if (intent_ != nil)
#line 586
    [additional_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INTENT_() withComItextpdfTextPdfPdfObject:intent_];
    if ([additional_ size] > 0)
#line 588
    [((ComItextpdfTextImage *) nil_chk(img)) setAdditionalWithComItextpdfTextPdfPdfDictionary:additional_];
    if (icc_profile_ != nil)
#line 590
    [((ComItextpdfTextImage *) nil_chk(img)) tagICCWithComItextpdfTextPdfICC_Profile:icc_profile_];
    if (palShades_) {
      ComItextpdfTextImage *im2 = [ComItextpdfTextImage getInstanceWithInt:width_ withInt:height_ withInt:1 withInt:8 withByteArray:smask_];
      [((ComItextpdfTextImage *) nil_chk(im2)) makeMask];
      [((ComItextpdfTextImage *) nil_chk(img)) setImageMaskWithComItextpdfTextImage:im2];
    }
    if (genBWMask_) {
      ComItextpdfTextImage *im2 = [ComItextpdfTextImage getInstanceWithInt:width_ withInt:height_ withInt:1 withInt:1 withByteArray:smask_];
      [((ComItextpdfTextImage *) nil_chk(im2)) makeMask];
      [((ComItextpdfTextImage *) nil_chk(img)) setImageMaskWithComItextpdfTextImage:im2];
    }
    [((ComItextpdfTextImage *) nil_chk(img)) setDpiWithInt:dpiX_ withInt:dpiY_];
    [img setXYRatioWithFloat:XYRatio_];
    [img setOriginalTypeWithInt:ComItextpdfTextImage_ORIGINAL_PNG];
    return img;
  }
  @catch (JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 611
- (void)decodeIdat {
  
#line 612
  jint nbitDepth = bitDepth_;
  if (nbitDepth == 16)
#line 614
  nbitDepth = 8;
  jint size = -1;
  bytesPerPixel_ = (bitDepth_ == 16) ? 2 : 1;
  switch (colorType_) {
    case 0:
    size = (nbitDepth * width_ + 7) / 8 * height_;
    break;
    case 2:
    size = width_ * 3 * height_;
    bytesPerPixel_ *= 3;
    break;
    case 3:
    if (interlaceMethod_ == 1)
#line 627
    size = (nbitDepth * width_ + 7) / 8 * height_;
    bytesPerPixel_ = 1;
    break;
    case 4:
    size = width_ * height_;
    bytesPerPixel_ *= 2;
    break;
    case 6:
    size = width_ * 3 * height_;
    bytesPerPixel_ *= 4;
    break;
  }
  if (size >= 0)
#line 640
  image_ = [IOSByteArray arrayWithLength:size];
  if (palShades_)
#line 642
  smask_ = [IOSByteArray arrayWithLength:width_ * height_];
  else if (genBWMask_)
#line 644
  smask_ = [IOSByteArray arrayWithLength:(width_ + 7) / 8 * height_];
  JavaIoByteArrayInputStream *bai = [[JavaIoByteArrayInputStream alloc] initWithByteArray:[((ComItextpdfTextPdfCodecPngImage_NewByteArrayOutputStream *) nil_chk(idat_)) getBuf] withInt:0 withInt:[idat_ size]];
  JavaIoInputStream *infStream = [[JavaUtilZipInflaterInputStream alloc] initWithJavaIoInputStream:bai withJavaUtilZipInflater:[[JavaUtilZipInflater alloc] init]];
  dataStream_ = [[JavaIoDataInputStream alloc] initWithJavaIoInputStream:infStream];
  
#line 649
  if (interlaceMethod_ != 1) {
    [self decodePassWithInt:0 withInt:0 withInt:1 withInt:1 withInt:width_ withInt:height_];
  }
  else {
    [self decodePassWithInt:0 withInt:0 withInt:8 withInt:8 withInt:(width_ + 7) / 8 withInt:(height_ + 7) / 8];
    [self decodePassWithInt:4 withInt:0 withInt:8 withInt:8 withInt:(width_ + 3) / 8 withInt:(height_ + 7) / 8];
    [self decodePassWithInt:0 withInt:4 withInt:4 withInt:8 withInt:(width_ + 3) / 4 withInt:(height_ + 3) / 8];
    [self decodePassWithInt:2 withInt:0 withInt:4 withInt:4 withInt:(width_ + 1) / 4 withInt:(height_ + 3) / 4];
    [self decodePassWithInt:0 withInt:2 withInt:2 withInt:4 withInt:(width_ + 1) / 2 withInt:(height_ + 1) / 4];
    [self decodePassWithInt:1 withInt:0 withInt:2 withInt:2 withInt:width_ / 2 withInt:(height_ + 1) / 2];
    [self decodePassWithInt:0 withInt:1 withInt:1 withInt:2 withInt:width_ withInt:height_ / 2];
  }
}


#line 664
- (void)decodePassWithInt:(jint)xOffset
                  withInt:(jint)yOffset
                  withInt:(jint)xStep
                  withInt:(jint)yStep
                  withInt:(jint)passWidth
                  withInt:(jint)passHeight {
  
#line 667
  if ((passWidth == 0) || (passHeight == 0)) {
    return;
  }
  
#line 671
  jint bytesPerRow = (inputBands_ * passWidth * bitDepth_ + 7) / 8;
  IOSByteArray *curr = [IOSByteArray arrayWithLength:bytesPerRow];
  IOSByteArray *prior = [IOSByteArray arrayWithLength:bytesPerRow];
  
#line 676
  jint srcY, dstY;
  for (srcY = 0, dstY = yOffset;
#line 678
  srcY < passHeight;
#line 679
  srcY++, dstY += yStep) {
    
#line 681
    jint filter = 0;
    @try {
      filter = [((JavaIoDataInputStream *) nil_chk(dataStream_)) read];
      [dataStream_ readFullyWithByteArray:curr withInt:0 withInt:bytesPerRow];
    }
    @catch (
#line 685
    JavaLangException *e) {
    }
    
#line 689
    switch (filter) {
      case ComItextpdfTextPdfCodecPngImage_PNG_FILTER_NONE:
      break;
      case ComItextpdfTextPdfCodecPngImage_PNG_FILTER_SUB:
      [ComItextpdfTextPdfCodecPngImage decodeSubFilterWithByteArray:curr withInt:bytesPerRow withInt:bytesPerPixel_];
      break;
      case ComItextpdfTextPdfCodecPngImage_PNG_FILTER_UP:
      [ComItextpdfTextPdfCodecPngImage decodeUpFilterWithByteArray:curr withByteArray:prior withInt:bytesPerRow];
      break;
      case ComItextpdfTextPdfCodecPngImage_PNG_FILTER_AVERAGE:
      [ComItextpdfTextPdfCodecPngImage decodeAverageFilterWithByteArray:curr withByteArray:prior withInt:bytesPerRow withInt:bytesPerPixel_];
      break;
      case ComItextpdfTextPdfCodecPngImage_PNG_FILTER_PAETH:
      [ComItextpdfTextPdfCodecPngImage decodePaethFilterWithByteArray:curr withByteArray:prior withInt:bytesPerRow withInt:bytesPerPixel_];
      break;
      default:
      
#line 706
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"png.filter.unknown" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    
#line 709
    [self processPixelsWithByteArray:curr withInt:xOffset withInt:xStep withInt:dstY withInt:passWidth];
    
#line 712
    IOSByteArray *tmp = prior;
    prior = curr;
    curr = tmp;
  }
}


#line 718
- (void)processPixelsWithByteArray:(IOSByteArray *)curr
                           withInt:(jint)xOffset
                           withInt:(jint)step
                           withInt:(jint)y
                           withInt:(jint)width {
  
#line 719
  jint srcX, dstX;
  
#line 721
  IOSIntArray *out = [self getPixelWithByteArray:curr];
  jint sizes = 0;
  switch (colorType_) {
    case 0:
    case 3:
    case 4:
    sizes = 1;
    break;
    case 2:
    case 6:
    sizes = 3;
    break;
  }
  if (image_ != nil) {
    dstX = xOffset;
    jint yStride = (sizes * self->width_ * (bitDepth_ == 16 ? 8 : bitDepth_) + 7) / 8;
    for (srcX = 0; srcX < width; srcX++) {
      [ComItextpdfTextPdfCodecPngImage setPixelWithByteArray:image_ withIntArray:out withInt:inputBands_ * srcX withInt:sizes withInt:dstX withInt:y withInt:bitDepth_ withInt:yStride];
      dstX += step;
    }
  }
  if (palShades_) {
    if ((colorType_ & 4) != 0) {
      if (bitDepth_ == 16) {
        for (jint k = 0; k < width; ++k)
#line 746
        URShiftAssignInt(IOSIntArray_GetRef(nil_chk(out), k * inputBands_ + sizes), 8);
      }
      jint yStride = self->width_;
      dstX = xOffset;
      for (srcX = 0; srcX < width; srcX++) {
        [ComItextpdfTextPdfCodecPngImage setPixelWithByteArray:smask_ withIntArray:out withInt:inputBands_ * srcX + sizes withInt:1 withInt:dstX withInt:y withInt:8 withInt:yStride];
        dstX += step;
      }
    }
    else {
      jint yStride = self->width_;
      IOSIntArray *v = [IOSIntArray arrayWithLength:1];
      dstX = xOffset;
      for (srcX = 0; srcX < width; srcX++) {
        jint idx = IOSIntArray_Get(nil_chk(out), srcX);
        if (idx < ((IOSByteArray *) nil_chk(trans_))->size_)
#line 762
        *IOSIntArray_GetRef(v, 0) = IOSByteArray_Get(trans_, idx);
        else
#line 764
        *IOSIntArray_GetRef(v, 0) = 255;
        [ComItextpdfTextPdfCodecPngImage setPixelWithByteArray:smask_ withIntArray:v withInt:0 withInt:1 withInt:dstX withInt:y withInt:8 withInt:yStride];
        dstX += step;
      }
    }
  }
  else if (genBWMask_) {
    switch (colorType_) {
      case 3:
      {
        
#line 773
        jint yStride = (self->width_ + 7) / 8;
        IOSIntArray *v = [IOSIntArray arrayWithLength:1];
        dstX = xOffset;
        for (srcX = 0; srcX < width; srcX++) {
          jint idx = IOSIntArray_Get(nil_chk(out), srcX);
          *IOSIntArray_GetRef(v, 0) = ((idx < ((IOSByteArray *) nil_chk(trans_))->size_ && IOSByteArray_Get(trans_, idx) == 0) ? 1 : 0);
          [ComItextpdfTextPdfCodecPngImage setPixelWithByteArray:smask_ withIntArray:v withInt:0 withInt:1 withInt:dstX withInt:y withInt:1 withInt:yStride];
          dstX += step;
        }
        break;
      }
      case 0:
      {
        
#line 785
        jint yStride = (self->width_ + 7) / 8;
        IOSIntArray *v = [IOSIntArray arrayWithLength:1];
        dstX = xOffset;
        for (srcX = 0; srcX < width; srcX++) {
          jint g = IOSIntArray_Get(nil_chk(out), srcX);
          *IOSIntArray_GetRef(v, 0) = (g == transRedGray_ ? 1 : 0);
          [ComItextpdfTextPdfCodecPngImage setPixelWithByteArray:smask_ withIntArray:v withInt:0 withInt:1 withInt:dstX withInt:y withInt:1 withInt:yStride];
          dstX += step;
        }
        break;
      }
      case 2:
      {
        
#line 797
        jint yStride = (self->width_ + 7) / 8;
        IOSIntArray *v = [IOSIntArray arrayWithLength:1];
        dstX = xOffset;
        for (srcX = 0; srcX < width; srcX++) {
          jint markRed = inputBands_ * srcX;
          *IOSIntArray_GetRef(v, 0) = (IOSIntArray_Get(nil_chk(out), markRed) == transRedGray_ && IOSIntArray_Get(out, markRed + 1) == transGreen_ &&
#line 803
          IOSIntArray_Get(out, markRed + 2) == transBlue_ ? 1 : 0);
          [ComItextpdfTextPdfCodecPngImage setPixelWithByteArray:smask_ withIntArray:v withInt:0 withInt:1 withInt:dstX withInt:y withInt:1 withInt:yStride];
          dstX += step;
        }
        break;
      }
    }
  }
}


#line 813
+ (jint)getPixelWithByteArray:(IOSByteArray *)image
                      withInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)bitDepth
                      withInt:(jint)bytesPerRow {
  
#line 814
  if (bitDepth == 8) {
    jint pos = bytesPerRow * y + x;
    return IOSByteArray_Get(nil_chk(image), pos) & (jint) 0xff;
  }
  else {
    jint pos = bytesPerRow * y + x / (8 / bitDepth);
    jint v = RShift32(IOSByteArray_Get(nil_chk(image), pos), (8 - bitDepth * (x % (8 / bitDepth)) - bitDepth));
    return v & ((LShift32(1, bitDepth)) - 1);
  }
}


#line 825
+ (void)setPixelWithByteArray:(IOSByteArray *)image
                 withIntArray:(IOSIntArray *)data
                      withInt:(jint)offset
                      withInt:(jint)size
                      withInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)bitDepth
                      withInt:(jint)bytesPerRow {
  
#line 826
  if (bitDepth == 8) {
    jint pos = bytesPerRow * y + size * x;
    for (jint k = 0; k < size; ++k)
#line 829
    *IOSByteArray_GetRef(nil_chk(image), pos + k) = (jbyte) IOSIntArray_Get(nil_chk(data), k + offset);
  }
  else if (bitDepth == 16) {
    jint pos = bytesPerRow * y + size * x;
    for (jint k = 0; k < size; ++k)
#line 834
    *IOSByteArray_GetRef(nil_chk(image), pos + k) = (jbyte) (URShift32(IOSIntArray_Get(nil_chk(data), k + offset), 8));
  }
  else {
    jint pos = bytesPerRow * y + x / (8 / bitDepth);
    jint v = LShift32(IOSIntArray_Get(nil_chk(data), offset), (8 - bitDepth * (x % (8 / bitDepth)) - bitDepth));
    *IOSByteArray_GetRef(nil_chk(image), pos) |= v;
  }
}


#line 843
- (IOSIntArray *)getPixelWithByteArray:(IOSByteArray *)curr {
  
#line 844
  switch (bitDepth_) {
    case 8:
    {
      
#line 846
      IOSIntArray *out = [IOSIntArray arrayWithLength:((IOSByteArray *) nil_chk(curr))->size_];
      for (jint k = 0; k < out->size_; ++k)
#line 848
      *IOSIntArray_GetRef(out, k) = IOSByteArray_Get(curr, k) & (jint) 0xff;
      return out;
    }
    case 16:
    {
      
#line 852
      IOSIntArray *out = [IOSIntArray arrayWithLength:((IOSByteArray *) nil_chk(curr))->size_ / 2];
      for (jint k = 0; k < out->size_; ++k)
#line 854
      *IOSIntArray_GetRef(out, k) = (LShift32((IOSByteArray_Get(curr, k * 2) & (jint) 0xff), 8)) + (IOSByteArray_Get(curr, k * 2 + 1) & (jint) 0xff);
      return out;
    }
    default:
    {
      
#line 858
      IOSIntArray *out = [IOSIntArray arrayWithLength:((IOSByteArray *) nil_chk(curr))->size_ * 8 / bitDepth_];
      jint idx = 0;
      jint passes = 8 / bitDepth_;
      jint mask = (LShift32(1, bitDepth_)) - 1;
      for (jint k = 0; k < curr->size_; ++k) {
        for (jint j = passes - 1; j >= 0; --j) {
          *IOSIntArray_GetRef(out, idx++) = (URShift32(IOSByteArray_Get(curr, k), (bitDepth_ * j))) & mask;
        }
      }
      return out;
    }
  }
}


#line 872
+ (void)decodeSubFilterWithByteArray:(IOSByteArray *)curr
                             withInt:(jint)count
                             withInt:(jint)bpp {
  
#line 873
  for (jint i = bpp; i < count; i++) {
    jint val;
    
#line 876
    val = IOSByteArray_Get(nil_chk(curr), i) & (jint) 0xff;
    val += IOSByteArray_Get(curr, i - bpp) & (jint) 0xff;
    
#line 879
    *IOSByteArray_GetRef(curr, i) = (jbyte) val;
  }
}


#line 883
+ (void)decodeUpFilterWithByteArray:(IOSByteArray *)curr
                      withByteArray:(IOSByteArray *)prev
                            withInt:(jint)count {
  
#line 885
  for (jint i = 0; i < count; i++) {
    jint raw = IOSByteArray_Get(nil_chk(curr), i) & (jint) 0xff;
    jint prior = IOSByteArray_Get(nil_chk(prev), i) & (jint) 0xff;
    
#line 889
    *IOSByteArray_GetRef(curr, i) = (jbyte) (raw + prior);
  }
}


#line 893
+ (void)decodeAverageFilterWithByteArray:(IOSByteArray *)curr
                           withByteArray:(IOSByteArray *)prev
                                 withInt:(jint)count
                                 withInt:(jint)bpp {
  
#line 895
  jint raw, priorPixel, priorRow;
  
#line 897
  for (jint i = 0; i < bpp; i++) {
    raw = IOSByteArray_Get(nil_chk(curr), i) & (jint) 0xff;
    priorRow = IOSByteArray_Get(nil_chk(prev), i) & (jint) 0xff;
    
#line 901
    *IOSByteArray_GetRef(curr, i) = (jbyte) (raw + priorRow / 2);
  }
  
#line 904
  for (jint i = bpp; i < count; i++) {
    raw = IOSByteArray_Get(nil_chk(curr), i) & (jint) 0xff;
    priorPixel = IOSByteArray_Get(curr, i - bpp) & (jint) 0xff;
    priorRow = IOSByteArray_Get(nil_chk(prev), i) & (jint) 0xff;
    
#line 909
    *IOSByteArray_GetRef(curr, i) = (jbyte) (raw + (priorPixel + priorRow) / 2);
  }
}


#line 913
+ (jint)paethPredictorWithInt:(jint)a
                      withInt:(jint)b
                      withInt:(jint)c {
  
#line 914
  jint p = a + b - c;
  jint pa = [JavaLangMath absWithInt:p - a];
  jint pb = [JavaLangMath absWithInt:p - b];
  jint pc = [JavaLangMath absWithInt:p - c];
  
#line 919
  if ((pa <= pb) && (pa <= pc)) {
    return a;
  }
  else
#line 921
  if (pb <= pc) {
    return b;
  }
  else {
    
#line 924
    return c;
  }
}


#line 928
+ (void)decodePaethFilterWithByteArray:(IOSByteArray *)curr
                         withByteArray:(IOSByteArray *)prev
                               withInt:(jint)count
                               withInt:(jint)bpp {
  
#line 930
  jint raw, priorPixel, priorRow, priorRowPixel;
  
#line 932
  for (jint i = 0; i < bpp; i++) {
    raw = IOSByteArray_Get(nil_chk(curr), i) & (jint) 0xff;
    priorRow = IOSByteArray_Get(nil_chk(prev), i) & (jint) 0xff;
    
#line 936
    *IOSByteArray_GetRef(curr, i) = (jbyte) (raw + priorRow);
  }
  
#line 939
  for (jint i = bpp; i < count; i++) {
    raw = IOSByteArray_Get(nil_chk(curr), i) & (jint) 0xff;
    priorPixel = IOSByteArray_Get(curr, i - bpp) & (jint) 0xff;
    priorRow = IOSByteArray_Get(nil_chk(prev), i) & (jint) 0xff;
    priorRowPixel = IOSByteArray_Get(prev, i - bpp) & (jint) 0xff;
    
#line 945
    *IOSByteArray_GetRef(curr, i) = (jbyte) (raw + [ComItextpdfTextPdfCodecPngImage paethPredictorWithInt:priorPixel withInt:
#line 946
    priorRow withInt:
#line 947
    priorRowPixel]);
  }
}


#line 964
+ (jint)getIntWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 965
  return (LShift32([((JavaIoInputStream *) nil_chk(is)) read], 24)) + (LShift32([is read], 16)) + (LShift32([is read], 8)) + [is read];
}


#line 975
+ (jint)getWordWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 976
  return (LShift32([((JavaIoInputStream *) nil_chk(is)) read], 8)) + [is read];
}


#line 986
+ (NSString *)getStringWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 987
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  for (jint i = 0; i < 4; i++) {
    (void) [buf appendWithChar:(jchar) [((JavaIoInputStream *) nil_chk(is)) read]];
  }
  return [buf description];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecPngImage *)other {
  [super copyAllFieldsTo:other];
  other->XYRatio_ = XYRatio_;
  other->additional_ = additional_;
  other->bitDepth_ = bitDepth_;
  other->bytesPerPixel_ = bytesPerPixel_;
  other->colorTable_ = colorTable_;
  other->colorType_ = colorType_;
  other->compressionMethod_ = compressionMethod_;
  other->dataStream_ = dataStream_;
  other->dpiX_ = dpiX_;
  other->dpiY_ = dpiY_;
  other->filterMethod_ = filterMethod_;
  other->gamma_ = gamma_;
  other->genBWMask_ = genBWMask_;
  other->hasCHRM_ = hasCHRM_;
  other->height_ = height_;
  other->icc_profile_ = icc_profile_;
  other->idat_ = idat_;
  other->image_ = image_;
  other->inputBands_ = inputBands_;
  other->intent_ = intent_;
  other->interlaceMethod_ = interlaceMethod_;
  other->is_ = is_;
  other->palShades_ = palShades_;
  other->smask_ = smask_;
  other->trans_ = trans_;
  other->transBlue_ = transBlue_;
  other->transGreen_ = transGreen_;
  other->transRedGray_ = transRedGray_;
  other->width_ = width_;
  other->xB_ = xB_;
  other->xG_ = xG_;
  other->xR_ = xR_;
  other->xW_ = xW_;
  other->yB_ = yB_;
  other->yG_ = yG_;
  other->yR_ = yR_;
  other->yW_ = yW_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfCodecPngImage class]) {
    ComItextpdfTextPdfCodecPngImage_PNGID_ = [IOSIntArray arrayWithInts:(jint[]){
#line 125
      137, 80, 78, 71, 13, 10, 26, 10 } count:8];
      ComItextpdfTextPdfCodecPngImage_intents_ = [IOSObjectArray arrayWithObjects:(id[]){ ComItextpdfTextPdfPdfName_get_PERCEPTUAL_(), ComItextpdfTextPdfPdfName_get_RELATIVECOLORIMETRIC_(), ComItextpdfTextPdfPdfName_get_SATURATION_(), ComItextpdfTextPdfPdfName_get_ABSOLUTECOLORIMETRIC_() } count:4 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfName class]]];
      ComItextpdfTextPdfCodecPngImage_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoInputStream:", "PngImage", NULL, 0x0, NULL },
    { "getImageWithJavaNetURL:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "getImageWithJavaIoInputStream:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "getImageWithNSString:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "getImageWithByteArray:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "checkMarkerWithNSString:", "checkMarker", "Z", 0x0, NULL },
    { "readPng", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "getColorspace", NULL, "Lcom.itextpdf.text.pdf.PdfObject;", 0x0, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x0, "Ljava.io.IOException;" },
    { "decodeIdat", NULL, "V", 0x0, NULL },
    { "decodePassWithInt:withInt:withInt:withInt:withInt:withInt:", "decodePass", "V", 0x0, NULL },
    { "processPixelsWithByteArray:withInt:withInt:withInt:withInt:", "processPixels", "V", 0x0, NULL },
    { "getPixelWithByteArray:withInt:withInt:withInt:withInt:", "getPixel", "I", 0x8, NULL },
    { "setPixelWithByteArray:withIntArray:withInt:withInt:withInt:withInt:withInt:withInt:", "setPixel", "V", 0x8, NULL },
    { "getPixelWithByteArray:", "getPixel", "[I", 0x0, NULL },
    { "decodeSubFilterWithByteArray:withInt:withInt:", "decodeSubFilter", "V", 0xa, NULL },
    { "decodeUpFilterWithByteArray:withByteArray:withInt:", "decodeUpFilter", "V", 0xa, NULL },
    { "decodeAverageFilterWithByteArray:withByteArray:withInt:withInt:", "decodeAverageFilter", "V", 0xa, NULL },
    { "paethPredictorWithInt:withInt:withInt:", "paethPredictor", "I", 0xa, NULL },
    { "decodePaethFilterWithByteArray:withByteArray:withInt:withInt:", "decodePaethFilter", "V", 0xa, NULL },
    { "getIntWithJavaIoInputStream:", "getInt", "I", 0x19, "Ljava.io.IOException;" },
    { "getWordWithJavaIoInputStream:", "getWord", "I", 0x19, "Ljava.io.IOException;" },
    { "getStringWithJavaIoInputStream:", "getString", "Ljava.lang.String;", 0x19, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PNGID_", NULL, 0x19, "[I", &ComItextpdfTextPdfCodecPngImage_PNGID_,  },
    { "IHDR_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_IHDR_,  },
    { "PLTE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_PLTE_,  },
    { "IDAT_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_IDAT_,  },
    { "IEND_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_IEND_,  },
    { "tRNS_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_tRNS_,  },
    { "pHYs_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_pHYs_,  },
    { "gAMA_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_gAMA_,  },
    { "cHRM_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_cHRM_,  },
    { "sRGB_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_sRGB_,  },
    { "iCCP_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfCodecPngImage_iCCP_,  },
    { "TRANSFERSIZE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecPngImage_TRANSFERSIZE },
    { "PNG_FILTER_NONE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecPngImage_PNG_FILTER_NONE },
    { "PNG_FILTER_SUB_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecPngImage_PNG_FILTER_SUB },
    { "PNG_FILTER_UP_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecPngImage_PNG_FILTER_UP },
    { "PNG_FILTER_AVERAGE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecPngImage_PNG_FILTER_AVERAGE },
    { "PNG_FILTER_PAETH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecPngImage_PNG_FILTER_PAETH },
    { "intents_", NULL, 0x1a, "[Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfCodecPngImage_intents_,  },
    { "is_", NULL, 0x0, "Ljava.io.InputStream;", NULL,  },
    { "dataStream_", NULL, 0x0, "Ljava.io.DataInputStream;", NULL,  },
    { "width_", NULL, 0x0, "I", NULL,  },
    { "height_", NULL, 0x0, "I", NULL,  },
    { "bitDepth_", NULL, 0x0, "I", NULL,  },
    { "colorType_", NULL, 0x0, "I", NULL,  },
    { "compressionMethod_", NULL, 0x0, "I", NULL,  },
    { "filterMethod_", NULL, 0x0, "I", NULL,  },
    { "interlaceMethod_", NULL, 0x0, "I", NULL,  },
    { "additional_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "image_", NULL, 0x0, "[B", NULL,  },
    { "smask_", NULL, 0x0, "[B", NULL,  },
    { "trans_", NULL, 0x0, "[B", NULL,  },
    { "idat_", NULL, 0x0, "Lcom.itextpdf.text.pdf.codec.PngImage$NewByteArrayOutputStream;", NULL,  },
    { "dpiX_", NULL, 0x0, "I", NULL,  },
    { "dpiY_", NULL, 0x0, "I", NULL,  },
    { "XYRatio_", NULL, 0x0, "F", NULL,  },
    { "genBWMask_", NULL, 0x0, "Z", NULL,  },
    { "palShades_", NULL, 0x0, "Z", NULL,  },
    { "transRedGray_", NULL, 0x0, "I", NULL,  },
    { "transGreen_", NULL, 0x0, "I", NULL,  },
    { "transBlue_", NULL, 0x0, "I", NULL,  },
    { "inputBands_", NULL, 0x0, "I", NULL,  },
    { "bytesPerPixel_", NULL, 0x0, "I", NULL,  },
    { "colorTable_", NULL, 0x0, "[B", NULL,  },
    { "gamma_", NULL, 0x0, "F", NULL,  },
    { "hasCHRM_", NULL, 0x0, "Z", NULL,  },
    { "xW_", NULL, 0x0, "F", NULL,  },
    { "yW_", NULL, 0x0, "F", NULL,  },
    { "xR_", NULL, 0x0, "F", NULL,  },
    { "yR_", NULL, 0x0, "F", NULL,  },
    { "xG_", NULL, 0x0, "F", NULL,  },
    { "yG_", NULL, 0x0, "F", NULL,  },
    { "xB_", NULL, 0x0, "F", NULL,  },
    { "yB_", NULL, 0x0, "F", NULL,  },
    { "intent_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "icc_profile_", NULL, 0x0, "Lcom.itextpdf.text.pdf.ICC_Profile;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecPngImage = { "PngImage", "com.itextpdf.text.pdf.codec", NULL, 0x1, 23, methods, 55, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecPngImage;
}

@end


#line 951
@implementation ComItextpdfTextPdfCodecPngImage_NewByteArrayOutputStream


#line 952
- (IOSByteArray *)getBuf {
  return buf_;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getBuf", NULL, "[B", 0x1, NULL },
    { "init", NULL, NULL, 0x0, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecPngImage_NewByteArrayOutputStream = { "NewByteArrayOutputStream", "com.itextpdf.text.pdf.codec", "PngImage", 0x8, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfCodecPngImage_NewByteArrayOutputStream;
}

@end
