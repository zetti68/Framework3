//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/JBIG2SegmentReader.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/JBIG2SegmentReader.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/codec/JBIG2SegmentReader.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"


#line 71
@implementation ComItextpdfTextPdfCodecJBIG2SegmentReader


#line 195
- (instancetype)initWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)ra {
  if (self = [super init]) {
    segments_ =
#line 97
    [[JavaUtilTreeMap alloc] init];
    pages_ =
#line 98
    [[JavaUtilTreeMap alloc] init];
    globals_ =
#line 99
    [[JavaUtilTreeSet alloc] init];
    number_of_pages_ =
#line 103
    -1;
    read__ =
#line 104
    NO;
    
#line 196
    self->ra_ = ra;
  }
  return self;
}


#line 199
+ (IOSByteArray *)copyByteArrayWithByteArray:(IOSByteArray *)b {
  
#line 200
  IOSByteArray *bc = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(b))->size_];
  [JavaLangSystem arraycopyWithId:b withInt:0 withId:bc withInt:0 withInt:b->size_];
  return bc;
}


#line 205
- (void)read {
  
#line 206
  if (self->read__) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"already.attempted.a.read.on.this.jbig2.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  self->read__ = YES;
  
#line 211
  [self readFileHeader];
  
#line 213
  if (self->sequential_) {
    
#line 215
    do {
      ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *tmp = [self readHeader];
      [self readSegmentWithComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment:tmp];
      (void) [((id<JavaUtilSortedMap>) nil_chk(segments_)) putWithId:[JavaLangInteger valueOfWithInt:((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(tmp))->segmentNumber_] withId:tmp];
    }
    while (
#line 219
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(self->ra_)) getFilePointer] < [self->ra_ length]);
  }
  else {
    ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *tmp;
    do {
      tmp = [self readHeader];
      (void) [((id<JavaUtilSortedMap>) nil_chk(segments_)) putWithId:[JavaLangInteger valueOfWithInt:((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(tmp))->segmentNumber_] withId:tmp];
    }
    while (
#line 226
    tmp->type_ != ComItextpdfTextPdfCodecJBIG2SegmentReader_END_OF_FILE);
    id<JavaUtilIterator> segs = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilSortedMap>) nil_chk(segments_)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(segs)) hasNext]) {
      [self readSegmentWithComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment:[segments_ getWithId:[segs next]]];
    }
  }
}


#line 234
- (void)readSegmentWithComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment:(ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *)s {
  
#line 235
  jint ptr = (jint) [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(ra_)) getFilePointer];
  
#line 237
  if (((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->dataLength_ == (jlong) 0xffffffffl) {
    
#line 239
    return;
  }
  
#line 242
  IOSByteArray *data = [IOSByteArray arrayWithLength:(jint) s->dataLength_];
  [ra_ readWithByteArray:data];
  s->data_ = data;
  
#line 246
  if (s->type_ == ComItextpdfTextPdfCodecJBIG2SegmentReader_PAGE_INFORMATION) {
    jint last = (jint) [ra_ getFilePointer];
    [ra_ seekWithLong:ptr];
    jint page_bitmap_width = [ra_ readInt];
    jint page_bitmap_height = [ra_ readInt];
    [ra_ seekWithLong:last];
    ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *p = [((id<JavaUtilSortedMap>) nil_chk(pages_)) getWithId:[JavaLangInteger valueOfWithInt:s->page_]];
    if (p == nil) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"referring.to.widht.height.of.page.we.havent.seen.yet.1" withInt:s->page_]];
    }
    
#line 257
    ((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *) nil_chk(p))->pageBitmapWidth_ = page_bitmap_width;
    p->pageBitmapHeight_ = page_bitmap_height;
  }
}


#line 262
- (ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *)readHeader {
  
#line 263
  jint ptr = (jint) [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(ra_)) getFilePointer];
  
#line 265
  jint segment_number = [ra_ readInt];
  ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *s = [[ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment alloc] initWithInt:segment_number];
  
#line 269
  jint segment_header_flags = [ra_ read];
  jboolean deferred_non_retain = (segment_header_flags & (jint) 0x80) == (jint) 0x80;
  s->deferredNonRetain_ = deferred_non_retain;
  jboolean page_association_size = (segment_header_flags & (jint) 0x40) == (jint) 0x40;
  jint segment_type = segment_header_flags & (jint) 0x3f;
  s->type_ = segment_type;
  
#line 277
  jint referred_to_byte0 = [ra_ read];
  jint count_of_referred_to_segments = RShift32((referred_to_byte0 & (jint) 0xE0), 5);
  IOSIntArray *referred_to_segment_numbers = nil;
  IOSBooleanArray *segment_retention_flags = nil;
  
#line 282
  if (count_of_referred_to_segments == 7) {
    
#line 284
    [ra_ seekWithLong:[ra_ getFilePointer] - 1];
    count_of_referred_to_segments = [ra_ readInt] & (jint) 0x1fffffff;
    segment_retention_flags = [IOSBooleanArray arrayWithLength:count_of_referred_to_segments + 1];
    jint i = 0;
    jint referred_to_current_byte = 0;
    do {
      jint j = i % 8;
      if (j == 0) {
        referred_to_current_byte = [ra_ read];
      }
      *IOSBooleanArray_GetRef(segment_retention_flags, i) = (RShift32(((LShift32((jint) 0x1, j)) & referred_to_current_byte), j) == (jint) 0x1);
      i++;
    }
    while (
#line 296
    i <= count_of_referred_to_segments);
  }
  else if (count_of_referred_to_segments <= 4) {
    
#line 300
    segment_retention_flags = [IOSBooleanArray arrayWithLength:count_of_referred_to_segments + 1];
    referred_to_byte0 &= (jint) 0x1f;
    for (jint i = 0; i <= count_of_referred_to_segments; i++) {
      *IOSBooleanArray_GetRef(segment_retention_flags, i) = (RShift32(((LShift32((jint) 0x1, i)) & referred_to_byte0), i) == (jint) 0x1);
    }
  }
  else if (count_of_referred_to_segments == 5 || count_of_referred_to_segments == 6) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"count.of.referred.to.segments.had.bad.value.in.header.for.segment.1.starting.at.2" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:segment_number], [NSString valueOfInt:ptr] } count:2 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  s->segmentRetentionFlags_ = segment_retention_flags;
  s->countOfReferredToSegments_ = count_of_referred_to_segments;
  
#line 313
  referred_to_segment_numbers = [IOSIntArray arrayWithLength:count_of_referred_to_segments + 1];
  for (jint i = 1; i <= count_of_referred_to_segments; i++) {
    if (segment_number <= 256) {
      *IOSIntArray_GetRef(referred_to_segment_numbers, i) = [ra_ read];
    }
    else
#line 317
    if (segment_number <= 65536) {
      *IOSIntArray_GetRef(referred_to_segment_numbers, i) = [ra_ readUnsignedShort];
    }
    else {
      
#line 320
      *IOSIntArray_GetRef(referred_to_segment_numbers, i) = (jint) [ra_ readUnsignedInt];
    }
  }
  s->referredToSegmentNumbers_ = referred_to_segment_numbers;
  
#line 326
  jint segment_page_association;
  jint page_association_offset = (jint) [ra_ getFilePointer] - ptr;
  if (page_association_size) {
    segment_page_association = [ra_ readInt];
  }
  else {
    
#line 331
    segment_page_association = [ra_ read];
  }
  if (segment_page_association < 0) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"page.1.invalid.for.segment.2.starting.at.3" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfInt:segment_page_association], [NSString valueOfInt:segment_number], [NSString valueOfInt:ptr] } count:3 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  s->page_ = segment_page_association;
  
#line 338
  s->page_association_size_ = page_association_size;
  s->page_association_offset_ = page_association_offset;
  
#line 341
  if (segment_page_association > 0 && ![((id<JavaUtilSortedMap>) nil_chk(pages_)) containsKeyWithId:[JavaLangInteger valueOfWithInt:segment_page_association]]) {
    (void) [pages_ putWithId:[JavaLangInteger valueOfWithInt:segment_page_association] withId:[[ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page alloc] initWithInt:segment_page_association withComItextpdfTextPdfCodecJBIG2SegmentReader:self]];
  }
  if (segment_page_association > 0) {
    [((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *) nil_chk([((id<JavaUtilSortedMap>) nil_chk(pages_)) getWithId:[JavaLangInteger valueOfWithInt:segment_page_association]])) addSegmentWithComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment:s];
  }
  else {
    
#line 347
    [((id<JavaUtilSortedSet>) nil_chk(globals_)) addWithId:s];
  }
  
#line 351
  jlong segment_data_length = [ra_ readUnsignedInt];
  
#line 353
  s->dataLength_ = segment_data_length;
  
#line 355
  jint end_ptr = (jint) [ra_ getFilePointer];
  [ra_ seekWithLong:ptr];
  IOSByteArray *header_data = [IOSByteArray arrayWithLength:end_ptr - ptr];
  [ra_ readWithByteArray:header_data];
  s->headerData_ = header_data;
  
#line 361
  return s;
}


#line 364
- (void)readFileHeader {
  
#line 365
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(ra_)) seekWithLong:0];
  IOSByteArray *idstring = [IOSByteArray arrayWithLength:8];
  [ra_ readWithByteArray:idstring];
  
#line 369
  IOSByteArray *refidstring = [IOSByteArray arrayWithBytes:(jbyte[]){ (jbyte) (jint) 0x97, (jint) 0x4A, (jint) 0x42, (jint) 0x32, (jint) 0x0D, (jint) 0x0A, (jint) 0x1A, (jint) 0x0A } count:8];
  
#line 371
  for (jint i = 0; i < idstring->size_; i++) {
    if (IOSByteArray_Get(idstring, i) != IOSByteArray_Get(refidstring, i)) {
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"file.header.idstring.not.good.at.byte.1" withInt:i]];
    }
  }
  
#line 377
  jint fileheaderflags = [ra_ read];
  
#line 379
  self->sequential_ = ((fileheaderflags & (jint) 0x1) == (jint) 0x1);
  self->number_of_pages_known_ = ((fileheaderflags & (jint) 0x2) == (jint) 0x0);
  
#line 382
  if ((fileheaderflags & (jint) 0xfc) != (jint) 0x0) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"file.header.flags.bits.2.7.not.0" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  
#line 386
  if (self->number_of_pages_known_) {
    self->number_of_pages_ = [ra_ readInt];
  }
}


#line 391
- (jint)numberOfPages {
  
#line 392
  return [((id<JavaUtilSortedMap>) nil_chk(pages_)) size];
}


#line 395
- (jint)getPageHeightWithInt:(jint)i {
  
#line 396
  return ((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *) nil_chk([((id<JavaUtilSortedMap>) nil_chk(pages_)) getWithId:[JavaLangInteger valueOfWithInt:i]]))->pageBitmapHeight_;
}


#line 399
- (jint)getPageWidthWithInt:(jint)i {
  
#line 400
  return ((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *) nil_chk([((id<JavaUtilSortedMap>) nil_chk(pages_)) getWithId:[JavaLangInteger valueOfWithInt:i]]))->pageBitmapWidth_;
}


#line 403
- (ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *)getPageWithInt:(jint)page {
  
#line 404
  return [((id<JavaUtilSortedMap>) nil_chk(pages_)) getWithId:[JavaLangInteger valueOfWithInt:page]];
}


#line 407
- (IOSByteArray *)getGlobalWithBoolean:(jboolean)for_embedding {
  
#line 408
  JavaIoByteArrayOutputStream *os = [[JavaIoByteArrayOutputStream alloc] init];
  @try {
    for (id __strong element in nil_chk(globals_)) {
      ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *s = (ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) check_class_cast(element, [ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment class]);
      if (for_embedding &&
#line 413
      (((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->type_ == ComItextpdfTextPdfCodecJBIG2SegmentReader_END_OF_FILE || s->type_ == ComItextpdfTextPdfCodecJBIG2SegmentReader_END_OF_PAGE)) {
        continue;
      }
      [os writeWithByteArray:((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->headerData_];
      [os writeWithByteArray:s->data_];
    }
    [os close];
  }
  @catch (
#line 420
  JavaIoIOException *e) {
    [((JavaIoIOException *) nil_chk(e)) printStackTrace];
  }
  if ([os size] <= 0) {
    return nil;
  }
  return [os toByteArray];
}

- (NSString *)description {
  
#line 431
  if (self->read__) {
    return JreStrcat("$I", @"Jbig2SegmentReader: number of pages: ", [self numberOfPages]);
  }
  else {
    
#line 434
    return @"Jbig2SegmentReader in indeterminate state.";
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecJBIG2SegmentReader *)other {
  [super copyAllFieldsTo:other];
  other->globals_ = globals_;
  other->number_of_pages_ = number_of_pages_;
  other->number_of_pages_known_ = number_of_pages_known_;
  other->pages_ = pages_;
  other->ra_ = ra_;
  other->read__ = read__;
  other->segments_ = segments_;
  other->sequential_ = sequential_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfRandomAccessFileOrArray:", "JBIG2SegmentReader", NULL, 0x1, "Ljava.io.IOException;" },
    { "copyByteArrayWithByteArray:", "copyByteArray", "[B", 0x9, NULL },
    { "read", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "readSegmentWithComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment:", "readSegment", "V", 0x0, "Ljava.io.IOException;" },
    { "readHeader", NULL, "Lcom.itextpdf.text.pdf.codec.JBIG2SegmentReader$JBIG2Segment;", 0x0, "Ljava.io.IOException;" },
    { "readFileHeader", NULL, "V", 0x0, "Ljava.io.IOException;" },
    { "numberOfPages", NULL, "I", 0x1, NULL },
    { "getPageHeightWithInt:", "getPageHeight", "I", 0x1, NULL },
    { "getPageWidthWithInt:", "getPageWidth", "I", 0x1, NULL },
    { "getPageWithInt:", "getPage", "Lcom.itextpdf.text.pdf.codec.JBIG2SegmentReader$JBIG2Page;", 0x1, NULL },
    { "getGlobalWithBoolean:", "getGlobal", "[B", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SYMBOL_DICTIONARY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_SYMBOL_DICTIONARY },
    { "INTERMEDIATE_TEXT_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_INTERMEDIATE_TEXT_REGION },
    { "IMMEDIATE_TEXT_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_IMMEDIATE_TEXT_REGION },
    { "IMMEDIATE_LOSSLESS_TEXT_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_IMMEDIATE_LOSSLESS_TEXT_REGION },
    { "PATTERN_DICTIONARY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_PATTERN_DICTIONARY },
    { "INTERMEDIATE_HALFTONE_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_INTERMEDIATE_HALFTONE_REGION },
    { "IMMEDIATE_HALFTONE_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_IMMEDIATE_HALFTONE_REGION },
    { "IMMEDIATE_LOSSLESS_HALFTONE_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_IMMEDIATE_LOSSLESS_HALFTONE_REGION },
    { "INTERMEDIATE_GENERIC_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_INTERMEDIATE_GENERIC_REGION },
    { "IMMEDIATE_GENERIC_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_IMMEDIATE_GENERIC_REGION },
    { "IMMEDIATE_LOSSLESS_GENERIC_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_IMMEDIATE_LOSSLESS_GENERIC_REGION },
    { "INTERMEDIATE_GENERIC_REFINEMENT_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_INTERMEDIATE_GENERIC_REFINEMENT_REGION },
    { "IMMEDIATE_GENERIC_REFINEMENT_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_IMMEDIATE_GENERIC_REFINEMENT_REGION },
    { "IMMEDIATE_LOSSLESS_GENERIC_REFINEMENT_REGION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_IMMEDIATE_LOSSLESS_GENERIC_REFINEMENT_REGION },
    { "PAGE_INFORMATION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_PAGE_INFORMATION },
    { "END_OF_PAGE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_END_OF_PAGE },
    { "END_OF_STRIPE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_END_OF_STRIPE },
    { "END_OF_FILE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_END_OF_FILE },
    { "PROFILES_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_PROFILES },
    { "TABLES_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_TABLES },
    { "EXTENSION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecJBIG2SegmentReader_EXTENSION },
    { "segments_", NULL, 0x12, "Ljava.util.SortedMap;", NULL,  },
    { "pages_", NULL, 0x12, "Ljava.util.SortedMap;", NULL,  },
    { "globals_", NULL, 0x12, "Ljava.util.SortedSet;", NULL,  },
    { "ra_", NULL, 0x2, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "sequential_", NULL, 0x2, "Z", NULL,  },
    { "number_of_pages_known_", NULL, 0x2, "Z", NULL,  },
    { "number_of_pages_", NULL, 0x2, "I", NULL,  },
    { "read__", "read", 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecJBIG2SegmentReader = { "JBIG2SegmentReader", "com.itextpdf.text.pdf.codec", NULL, 0x1, 12, methods, 29, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecJBIG2SegmentReader;
}

@end


#line 110
@implementation ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment


#line 125
- (instancetype)initWithInt:(jint)segment_number {
  if (self = [super init]) {
    dataLength_ =
#line 113
    -1;
    page_ =
#line 114
    -1;
    referredToSegmentNumbers_ =
#line 115
    nil;
    segmentRetentionFlags_ =
#line 116
    nil;
    type_ =
#line 117
    -1;
    deferredNonRetain_ =
#line 118
    NO;
    countOfReferredToSegments_ =
#line 119
    -1;
    data_ =
#line 120
    nil;
    headerData_ =
#line 121
    nil;
    page_association_size_ =
#line 122
    NO;
    page_association_offset_ =
#line 123
    -1;
    
#line 126
    self->segmentNumber_ = segment_number;
  }
  return self;
}


#line 129
- (jint)compareToWithId:(ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *)s {
  if (s != nil && ![s isKindOfClass:[ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  
#line 130
  return self->segmentNumber_ - ((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->segmentNumber_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *)other {
  [super copyAllFieldsTo:other];
  other->countOfReferredToSegments_ = countOfReferredToSegments_;
  other->data_ = data_;
  other->dataLength_ = dataLength_;
  other->deferredNonRetain_ = deferredNonRetain_;
  other->headerData_ = headerData_;
  other->page_ = page_;
  other->page_association_offset_ = page_association_offset_;
  other->page_association_size_ = page_association_size_;
  other->referredToSegmentNumbers_ = referredToSegmentNumbers_;
  other->segmentNumber_ = segmentNumber_;
  other->segmentRetentionFlags_ = segmentRetentionFlags_;
  other->type_ = type_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "JBIG2Segment", NULL, 0x1, NULL },
    { "compareToWithComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment:", "compareTo", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "segmentNumber_", NULL, 0x11, "I", NULL,  },
    { "dataLength_", NULL, 0x1, "J", NULL,  },
    { "page_", NULL, 0x1, "I", NULL,  },
    { "referredToSegmentNumbers_", NULL, 0x1, "[I", NULL,  },
    { "segmentRetentionFlags_", NULL, 0x1, "[Z", NULL,  },
    { "type_", NULL, 0x1, "I", NULL,  },
    { "deferredNonRetain_", NULL, 0x1, "Z", NULL,  },
    { "countOfReferredToSegments_", NULL, 0x1, "I", NULL,  },
    { "data_", NULL, 0x1, "[B", NULL,  },
    { "headerData_", NULL, 0x1, "[B", NULL,  },
    { "page_association_size_", NULL, 0x1, "Z", NULL,  },
    { "page_association_offset_", NULL, 0x1, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment = { "JBIG2Segment", "com.itextpdf.text.pdf.codec", "JBIG2SegmentReader", 0x9, 2, methods, 12, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment;
}

@end


#line 139
@implementation ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page


#line 145
- (instancetype)initWithInt:(jint)page
withComItextpdfTextPdfCodecJBIG2SegmentReader:(ComItextpdfTextPdfCodecJBIG2SegmentReader *)sr {
  if (self = [super init]) {
    segs_ =
#line 142
    [[JavaUtilTreeMap alloc] init];
    pageBitmapWidth_ =
#line 143
    -1;
    pageBitmapHeight_ =
#line 144
    -1;
    
#line 146
    self->page_ = page;
    
#line 147
    self->sr_ = sr;
  }
  return self;
}


#line 157
- (IOSByteArray *)getDataWithBoolean:(jboolean)for_embedding {
  
#line 158
  JavaIoByteArrayOutputStream *os = [[JavaIoByteArrayOutputStream alloc] init];
  for (JavaLangInteger * __strong sn in nil_chk([((id<JavaUtilSortedMap>) nil_chk(segs_)) keySet])) {
    ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *s = [segs_ getWithId:sn];
    
#line 164
    if (for_embedding &&
#line 165
    (((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->type_ == ComItextpdfTextPdfCodecJBIG2SegmentReader_END_OF_FILE || s->type_ == ComItextpdfTextPdfCodecJBIG2SegmentReader_END_OF_PAGE)) {
      continue;
    }
    
#line 169
    if (for_embedding) {
      
#line 171
      IOSByteArray *headerData_emb = [ComItextpdfTextPdfCodecJBIG2SegmentReader copyByteArrayWithByteArray:((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->headerData_];
      if (s->page_association_size_) {
        *IOSByteArray_GetRef(nil_chk(headerData_emb), s->page_association_offset_) = (jint) 0x0;
        *IOSByteArray_GetRef(headerData_emb, s->page_association_offset_ + 1) = (jint) 0x0;
        *IOSByteArray_GetRef(headerData_emb, s->page_association_offset_ + 2) = (jint) 0x0;
        *IOSByteArray_GetRef(headerData_emb, s->page_association_offset_ + 3) = (jint) 0x1;
      }
      else {
        
#line 178
        *IOSByteArray_GetRef(nil_chk(headerData_emb), s->page_association_offset_) = (jint) 0x1;
      }
      [os writeWithByteArray:headerData_emb];
    }
    else {
      
#line 182
      [os writeWithByteArray:((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->headerData_];
    }
    [os writeWithByteArray:((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->data_];
  }
  [os close];
  return [os toByteArray];
}


#line 189
- (void)addSegmentWithComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment:(ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *)s {
  
#line 190
  (void) [((id<JavaUtilSortedMap>) nil_chk(segs_)) putWithId:[JavaLangInteger valueOfWithInt:((ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment *) nil_chk(s))->segmentNumber_] withId:s];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page *)other {
  [super copyAllFieldsTo:other];
  other->page_ = page_;
  other->pageBitmapHeight_ = pageBitmapHeight_;
  other->pageBitmapWidth_ = pageBitmapWidth_;
  other->segs_ = segs_;
  other->sr_ = sr_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withComItextpdfTextPdfCodecJBIG2SegmentReader:", "JBIG2Page", NULL, 0x1, NULL },
    { "getDataWithBoolean:", "getData", "[B", 0x1, "Ljava.io.IOException;" },
    { "addSegmentWithComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Segment:", "addSegment", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "page_", NULL, 0x11, "I", NULL,  },
    { "sr_", NULL, 0x12, "Lcom.itextpdf.text.pdf.codec.JBIG2SegmentReader;", NULL,  },
    { "segs_", NULL, 0x12, "Ljava.util.SortedMap;", NULL,  },
    { "pageBitmapWidth_", NULL, 0x1, "I", NULL,  },
    { "pageBitmapHeight_", NULL, 0x1, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page = { "JBIG2Page", "com.itextpdf.text.pdf.codec", "JBIG2SegmentReader", 0x9, 3, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecJBIG2SegmentReader_JBIG2Page;
}

@end
