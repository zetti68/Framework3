//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/BmpImage.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/codec/BmpImage.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BadElementException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/ImgRaw.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/codec/BmpImage.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/util/HashMap.h"


#line 116
@implementation ComItextpdfTextPdfCodecBmpImage


#line 168
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                              withBoolean:(jboolean)noHeader
                                  withInt:(jint)size {
  if (self = [super init]) {
    properties_ =
#line 130
    [[JavaUtilHashMap alloc] init];
    
#line 169
    bitmapFileSize_ = size;
    
#line 170
    bitmapOffset_ = 0;
    
#line 171
    [self processWithJavaIoInputStream:is withBoolean:noHeader];
  }
  return self;
}


#line 179
+ (ComItextpdfTextImage *)getImageWithJavaNetURL:(JavaNetURL *)url {
  
#line 180
  JavaIoInputStream *is = nil;
  @try {
    is = [((JavaNetURL *) nil_chk(url)) openStream];
    ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecBmpImage getImageWithJavaIoInputStream:is];
    [((ComItextpdfTextImage *) nil_chk(img)) setUrlWithJavaNetURL:url];
    return img;
  }
  @finally {
    if (is != nil) {
      [is close];
    }
  }
}


#line 199
+ (ComItextpdfTextImage *)getImageWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 200
  return [ComItextpdfTextPdfCodecBmpImage getImageWithJavaIoInputStream:is withBoolean:NO withInt:0];
}


#line 211
+ (ComItextpdfTextImage *)getImageWithJavaIoInputStream:(JavaIoInputStream *)is
                                            withBoolean:(jboolean)noHeader
                                                withInt:(jint)size {
  
#line 212
  ComItextpdfTextPdfCodecBmpImage *bmp = [[ComItextpdfTextPdfCodecBmpImage alloc] initWithJavaIoInputStream:is withBoolean:noHeader withInt:size];
  @try {
    ComItextpdfTextImage *img = [bmp getImage];
    [((ComItextpdfTextImage *) nil_chk(img)) setDpiWithInt:J2ObjCFpToInt((bmp->xPelsPerMeter_ * 0.0254 + 0.5)) withInt:J2ObjCFpToInt((bmp->yPelsPerMeter_ * 0.0254 + 0.5))];
    [img setOriginalTypeWithInt:ComItextpdfTextImage_ORIGINAL_BMP];
    return img;
  }
  @catch (ComItextpdfTextBadElementException *be) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:be];
  }
}


#line 229
+ (ComItextpdfTextImage *)getImageWithNSString:(NSString *)file {
  
#line 230
  return [ComItextpdfTextPdfCodecBmpImage getImageWithJavaNetURL:[ComItextpdfTextUtilities toURLWithNSString:file]];
}


#line 238
+ (ComItextpdfTextImage *)getImageWithByteArray:(IOSByteArray *)data {
  
#line 239
  JavaIoByteArrayInputStream *is = [[JavaIoByteArrayInputStream alloc] initWithByteArray:data];
  ComItextpdfTextImage *img = [ComItextpdfTextPdfCodecBmpImage getImageWithJavaIoInputStream:is];
  [((ComItextpdfTextImage *) nil_chk(img)) setOriginalDataWithByteArray:data];
  return img;
}


#line 246
- (void)processWithJavaIoInputStream:(JavaIoInputStream *)stream
                         withBoolean:(jboolean)noHeader {
  if (noHeader || [stream isKindOfClass:[JavaIoBufferedInputStream class]]) {
    inputStream_ = stream;
  }
  else {
    
#line 250
    inputStream_ = [[JavaIoBufferedInputStream alloc] initWithJavaIoInputStream:stream];
  }
  if (!noHeader) {
    
#line 254
    if (!([self readUnsignedByteWithJavaIoInputStream:inputStream_] == 'B' &&
#line 255
    [self readUnsignedByteWithJavaIoInputStream:inputStream_] == 'M')) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.magic.value.for.bmp.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    
#line 260
    bitmapFileSize_ = [self readDWordWithJavaIoInputStream:inputStream_];
    
#line 263
    [self readWordWithJavaIoInputStream:inputStream_];
    [self readWordWithJavaIoInputStream:inputStream_];
    
#line 267
    bitmapOffset_ = [self readDWordWithJavaIoInputStream:inputStream_];
  }
  
#line 272
  jlong size = [self readDWordWithJavaIoInputStream:inputStream_];
  
#line 274
  if (size == 12) {
    width_ = [self readWordWithJavaIoInputStream:inputStream_];
    height_ = [self readWordWithJavaIoInputStream:inputStream_];
  }
  else {
    
#line 278
    width_ = [self readLongWithJavaIoInputStream:inputStream_];
    height_ = [self readLongWithJavaIoInputStream:inputStream_];
  }
  
#line 282
  jint planes = [self readWordWithJavaIoInputStream:inputStream_];
  bitsPerPixel_ = [self readWordWithJavaIoInputStream:inputStream_];
  
#line 285
  (void) [((JavaUtilHashMap *) nil_chk(properties_)) putWithId:@"color_planes" withId:[JavaLangInteger valueOfWithInt:planes]];
  (void) [properties_ putWithId:@"bits_per_pixel" withId:[JavaLangInteger valueOfWithInt:bitsPerPixel_]];
  
#line 290
  numBands_ = 3;
  if (bitmapOffset_ == 0)
#line 292
  bitmapOffset_ = size;
  if (size == 12) {
    
#line 295
    (void) [properties_ putWithId:@"bmp_version" withId:@"BMP v. 2.x"];
    
#line 298
    if (bitsPerPixel_ == 1) {
      imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_2_1_BIT;
    }
    else
#line 300
    if (bitsPerPixel_ == 4) {
      imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_2_4_BIT;
    }
    else
#line 302
    if (bitsPerPixel_ == 8) {
      imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_2_8_BIT;
    }
    else
#line 304
    if (bitsPerPixel_ == 24) {
      imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_2_24_BIT;
    }
    
#line 309
    jint numberOfEntries = (jint) ((bitmapOffset_ - 14 - size) / 3);
    jint sizeOfPalette = numberOfEntries * 3;
    if (bitmapOffset_ == size) {
      switch (imageType_) {
        case ComItextpdfTextPdfCodecBmpImage_VERSION_2_1_BIT:
        sizeOfPalette = 2 * 3;
        break;
        case ComItextpdfTextPdfCodecBmpImage_VERSION_2_4_BIT:
        sizeOfPalette = 16 * 3;
        break;
        case ComItextpdfTextPdfCodecBmpImage_VERSION_2_8_BIT:
        sizeOfPalette = 256 * 3;
        break;
        case ComItextpdfTextPdfCodecBmpImage_VERSION_2_24_BIT:
        sizeOfPalette = 0;
        break;
      }
      bitmapOffset_ = size + sizeOfPalette;
    }
    [self readPaletteWithInt:sizeOfPalette];
  }
  else {
    compression_ = [self readDWordWithJavaIoInputStream:inputStream_];
    imageSize_ = [self readDWordWithJavaIoInputStream:inputStream_];
    xPelsPerMeter_ = [self readLongWithJavaIoInputStream:inputStream_];
    yPelsPerMeter_ = [self readLongWithJavaIoInputStream:inputStream_];
    jlong colorsUsed = [self readDWordWithJavaIoInputStream:inputStream_];
    jlong colorsImportant = [self readDWordWithJavaIoInputStream:inputStream_];
    
#line 338
    switch ((jint) compression_) {
      case ComItextpdfTextPdfCodecBmpImage_BI_RGB:
      (void) [properties_ putWithId:@"compression" withId:@"BI_RGB"];
      break;
      
#line 343
      case ComItextpdfTextPdfCodecBmpImage_BI_RLE8:
      (void) [properties_ putWithId:@"compression" withId:@"BI_RLE8"];
      break;
      
#line 347
      case ComItextpdfTextPdfCodecBmpImage_BI_RLE4:
      (void) [properties_ putWithId:@"compression" withId:@"BI_RLE4"];
      break;
      
#line 351
      case ComItextpdfTextPdfCodecBmpImage_BI_BITFIELDS:
      (void) [properties_ putWithId:@"compression" withId:@"BI_BITFIELDS"];
      break;
    }
    
#line 356
    (void) [properties_ putWithId:@"x_pixels_per_meter" withId:[JavaLangLong valueOfWithLong:xPelsPerMeter_]];
    (void) [properties_ putWithId:@"y_pixels_per_meter" withId:[JavaLangLong valueOfWithLong:yPelsPerMeter_]];
    (void) [properties_ putWithId:@"colors_used" withId:[JavaLangLong valueOfWithLong:colorsUsed]];
    (void) [properties_ putWithId:@"colors_important" withId:[JavaLangLong valueOfWithLong:colorsImportant]];
    
#line 361
    if (size == 40 || size == 52 || size == 56) {
      {
        
#line 411
        jint numberOfEntries;
        jint sizeOfPalette;
        
#line 363
        switch ((jint) compression_) {
          
#line 365
          case ComItextpdfTextPdfCodecBmpImage_BI_RGB:
          case ComItextpdfTextPdfCodecBmpImage_BI_RLE8:
          case ComItextpdfTextPdfCodecBmpImage_BI_RLE4:
          
#line 369
          if (bitsPerPixel_ == 1) {
            imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_3_1_BIT;
          }
          else
#line 371
          if (bitsPerPixel_ == 4) {
            imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_3_4_BIT;
          }
          else
#line 373
          if (bitsPerPixel_ == 8) {
            imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_3_8_BIT;
          }
          else
#line 375
          if (bitsPerPixel_ == 24) {
            imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_3_24_BIT;
          }
          else
#line 377
          if (bitsPerPixel_ == 16) {
            imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_3_NT_16_BIT;
            redMask_ = (jint) 0x7C00;
            greenMask_ = (jint) 0x3E0;
            blueMask_ = (jint) 0x1F;
            (void) [properties_ putWithId:@"red_mask" withId:[JavaLangInteger valueOfWithInt:redMask_]];
            (void) [properties_ putWithId:@"green_mask" withId:[JavaLangInteger valueOfWithInt:greenMask_]];
            (void) [properties_ putWithId:@"blue_mask" withId:[JavaLangInteger valueOfWithInt:blueMask_]];
          }
          else
#line 385
          if (bitsPerPixel_ == 32) {
            imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_3_NT_32_BIT;
            redMask_ = (jint) 0x00FF0000;
            greenMask_ = (jint) 0x0000FF00;
            blueMask_ = (jint) 0x000000FF;
            (void) [properties_ putWithId:@"red_mask" withId:[JavaLangInteger valueOfWithInt:redMask_]];
            (void) [properties_ putWithId:@"green_mask" withId:[JavaLangInteger valueOfWithInt:greenMask_]];
            (void) [properties_ putWithId:@"blue_mask" withId:[JavaLangInteger valueOfWithInt:blueMask_]];
          }
          
#line 396
          if (size >= 52) {
            redMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
            greenMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
            blueMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
            (void) [properties_ putWithId:@"red_mask" withId:[JavaLangInteger valueOfWithInt:redMask_]];
            (void) [properties_ putWithId:@"green_mask" withId:[JavaLangInteger valueOfWithInt:greenMask_]];
            (void) [properties_ putWithId:@"blue_mask" withId:[JavaLangInteger valueOfWithInt:blueMask_]];
          }
          
#line 405
          if (size == 56) {
            alphaMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
            (void) [properties_ putWithId:@"alpha_mask" withId:[JavaLangInteger valueOfWithInt:alphaMask_]];
          }
          
#line 411
          numberOfEntries = (jint) ((bitmapOffset_ - 14 - size) / 4);
          sizeOfPalette = numberOfEntries * 4;
          if (bitmapOffset_ == size) {
            switch (imageType_) {
              case ComItextpdfTextPdfCodecBmpImage_VERSION_3_1_BIT:
              sizeOfPalette = (jint) (colorsUsed == 0 ? 2 : colorsUsed) * 4;
              break;
              case ComItextpdfTextPdfCodecBmpImage_VERSION_3_4_BIT:
              sizeOfPalette = (jint) (colorsUsed == 0 ? 16 : colorsUsed) * 4;
              break;
              case ComItextpdfTextPdfCodecBmpImage_VERSION_3_8_BIT:
              sizeOfPalette = (jint) (colorsUsed == 0 ? 256 : colorsUsed) * 4;
              break;
              default:
              sizeOfPalette = 0;
              break;
            }
            bitmapOffset_ = size + sizeOfPalette;
          }
          [self readPaletteWithInt:sizeOfPalette];
          
#line 432
          (void) [properties_ putWithId:@"bmp_version" withId:@"BMP v. 3.x"];
          break;
          
#line 435
          case ComItextpdfTextPdfCodecBmpImage_BI_BITFIELDS:
          
#line 437
          if (bitsPerPixel_ == 16) {
            imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_3_NT_16_BIT;
          }
          else
#line 439
          if (bitsPerPixel_ == 32) {
            imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_3_NT_32_BIT;
          }
          
#line 444
          redMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
          greenMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
          blueMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
          
#line 449
          if (size == 56) {
            alphaMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
            (void) [properties_ putWithId:@"alpha_mask" withId:[JavaLangInteger valueOfWithInt:alphaMask_]];
          }
          
#line 454
          (void) [properties_ putWithId:@"red_mask" withId:[JavaLangInteger valueOfWithInt:redMask_]];
          (void) [properties_ putWithId:@"green_mask" withId:[JavaLangInteger valueOfWithInt:greenMask_]];
          (void) [properties_ putWithId:@"blue_mask" withId:[JavaLangInteger valueOfWithInt:blueMask_]];
          
#line 458
          if (colorsUsed != 0) {
            
#line 460
            sizeOfPalette = (jint) colorsUsed * 4;
            [self readPaletteWithInt:sizeOfPalette];
          }
          
#line 464
          (void) [properties_ putWithId:@"bmp_version" withId:@"BMP v. 3.x NT"];
          break;
          
#line 467
          default:
          @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 469
          @"Invalid compression specified in BMP file."];
        }
      }
    }
    else
#line 471
    if (size == 108) {
      
#line 474
      (void) [properties_ putWithId:@"bmp_version" withId:@"BMP v. 4.x"];
      
#line 477
      redMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
      greenMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
      blueMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
      
#line 481
      alphaMask_ = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
      jlong csType = [self readDWordWithJavaIoInputStream:inputStream_];
      jint redX = [self readLongWithJavaIoInputStream:inputStream_];
      jint redY = [self readLongWithJavaIoInputStream:inputStream_];
      jint redZ = [self readLongWithJavaIoInputStream:inputStream_];
      jint greenX = [self readLongWithJavaIoInputStream:inputStream_];
      jint greenY = [self readLongWithJavaIoInputStream:inputStream_];
      jint greenZ = [self readLongWithJavaIoInputStream:inputStream_];
      jint blueX = [self readLongWithJavaIoInputStream:inputStream_];
      jint blueY = [self readLongWithJavaIoInputStream:inputStream_];
      jint blueZ = [self readLongWithJavaIoInputStream:inputStream_];
      jlong gammaRed = [self readDWordWithJavaIoInputStream:inputStream_];
      jlong gammaGreen = [self readDWordWithJavaIoInputStream:inputStream_];
      jlong gammaBlue = [self readDWordWithJavaIoInputStream:inputStream_];
      
#line 496
      if (bitsPerPixel_ == 1) {
        imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_4_1_BIT;
      }
      else
#line 498
      if (bitsPerPixel_ == 4) {
        imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_4_4_BIT;
      }
      else
#line 500
      if (bitsPerPixel_ == 8) {
        imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_4_8_BIT;
      }
      else
#line 502
      if (bitsPerPixel_ == 16) {
        imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_4_16_BIT;
        if ((jint) compression_ == ComItextpdfTextPdfCodecBmpImage_BI_RGB) {
          redMask_ = (jint) 0x7C00;
          greenMask_ = (jint) 0x3E0;
          blueMask_ = (jint) 0x1F;
        }
      }
      else
#line 509
      if (bitsPerPixel_ == 24) {
        imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_4_24_BIT;
      }
      else
#line 511
      if (bitsPerPixel_ == 32) {
        imageType_ = ComItextpdfTextPdfCodecBmpImage_VERSION_4_32_BIT;
        if ((jint) compression_ == ComItextpdfTextPdfCodecBmpImage_BI_RGB) {
          redMask_ = (jint) 0x00FF0000;
          greenMask_ = (jint) 0x0000FF00;
          blueMask_ = (jint) 0x000000FF;
        }
      }
      
#line 520
      (void) [properties_ putWithId:@"red_mask" withId:[JavaLangInteger valueOfWithInt:redMask_]];
      (void) [properties_ putWithId:@"green_mask" withId:[JavaLangInteger valueOfWithInt:greenMask_]];
      (void) [properties_ putWithId:@"blue_mask" withId:[JavaLangInteger valueOfWithInt:blueMask_]];
      (void) [properties_ putWithId:@"alpha_mask" withId:[JavaLangInteger valueOfWithInt:alphaMask_]];
      
#line 526
      jint numberOfEntries = (jint) ((bitmapOffset_ - 14 - size) / 4);
      jint sizeOfPalette = numberOfEntries * 4;
      if (bitmapOffset_ == size) {
        switch (imageType_) {
          case ComItextpdfTextPdfCodecBmpImage_VERSION_4_1_BIT:
          sizeOfPalette = (jint) (colorsUsed == 0 ? 2 : colorsUsed) * 4;
          break;
          case ComItextpdfTextPdfCodecBmpImage_VERSION_4_4_BIT:
          sizeOfPalette = (jint) (colorsUsed == 0 ? 16 : colorsUsed) * 4;
          break;
          case ComItextpdfTextPdfCodecBmpImage_VERSION_4_8_BIT:
          sizeOfPalette = (jint) (colorsUsed == 0 ? 256 : colorsUsed) * 4;
          break;
          default:
          sizeOfPalette = 0;
          break;
        }
        bitmapOffset_ = size + sizeOfPalette;
      }
      [self readPaletteWithInt:sizeOfPalette];
      
#line 547
      switch ((jint) csType) {
        case ComItextpdfTextPdfCodecBmpImage_LCS_CALIBRATED_RGB:
        
#line 550
        (void) [properties_ putWithId:@"color_space" withId:@"LCS_CALIBRATED_RGB"];
        (void) [properties_ putWithId:@"redX" withId:[JavaLangInteger valueOfWithInt:redX]];
        (void) [properties_ putWithId:@"redY" withId:[JavaLangInteger valueOfWithInt:redY]];
        (void) [properties_ putWithId:@"redZ" withId:[JavaLangInteger valueOfWithInt:redZ]];
        (void) [properties_ putWithId:@"greenX" withId:[JavaLangInteger valueOfWithInt:greenX]];
        (void) [properties_ putWithId:@"greenY" withId:[JavaLangInteger valueOfWithInt:greenY]];
        (void) [properties_ putWithId:@"greenZ" withId:[JavaLangInteger valueOfWithInt:greenZ]];
        (void) [properties_ putWithId:@"blueX" withId:[JavaLangInteger valueOfWithInt:blueX]];
        (void) [properties_ putWithId:@"blueY" withId:[JavaLangInteger valueOfWithInt:blueY]];
        (void) [properties_ putWithId:@"blueZ" withId:[JavaLangInteger valueOfWithInt:blueZ]];
        (void) [properties_ putWithId:@"gamma_red" withId:[JavaLangLong valueOfWithLong:gammaRed]];
        (void) [properties_ putWithId:@"gamma_green" withId:[JavaLangLong valueOfWithLong:gammaGreen]];
        (void) [properties_ putWithId:@"gamma_blue" withId:[JavaLangLong valueOfWithLong:gammaBlue]];
        
#line 565
        @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 566
        @"Not implemented yet."];
        
#line 568
        case ComItextpdfTextPdfCodecBmpImage_LCS_sRGB:
        
#line 570
        (void) [properties_ putWithId:@"color_space" withId:@"LCS_sRGB"];
        break;
        
#line 573
        case ComItextpdfTextPdfCodecBmpImage_LCS_CMYK:
        (void) [properties_ putWithId:@"color_space" withId:@"LCS_CMYK"];
        
#line 576
        @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 577
        @"Not implemented yet."];
      }
    }
    else {
      (void) [properties_ putWithId:@"bmp_version" withId:@"BMP v. 5.x"];
      @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 583
      @"BMP version 5 not implemented yet."];
    }
  }
  
#line 587
  if (height_ > 0) {
    
#line 589
    isBottomUp_ = YES;
  }
  else {
    isBottomUp_ = NO;
    height_ = [JavaLangMath absWithInt:height_];
  }
  
#line 596
  if (bitsPerPixel_ == 1 || bitsPerPixel_ == 4 || bitsPerPixel_ == 8) {
    
#line 598
    numBands_ = 1;
    
#line 602
    IOSByteArray *r, *g, *b;
    jint sizep;
    if (imageType_ == ComItextpdfTextPdfCodecBmpImage_VERSION_2_1_BIT ||
#line 605
    imageType_ == ComItextpdfTextPdfCodecBmpImage_VERSION_2_4_BIT ||
#line 606
    imageType_ == ComItextpdfTextPdfCodecBmpImage_VERSION_2_8_BIT) {
      
#line 608
      sizep = ((IOSByteArray *) nil_chk(palette_))->size_ / 3;
      
#line 610
      if (sizep > 256) {
        sizep = 256;
      }
      
#line 614
      jint off;
      r = [IOSByteArray arrayWithLength:sizep];
      g = [IOSByteArray arrayWithLength:sizep];
      b = [IOSByteArray arrayWithLength:sizep];
      for (jint i = 0; i < sizep; i++) {
        off = 3 * i;
        *IOSByteArray_GetRef(b, i) = IOSByteArray_Get(palette_, off);
        *IOSByteArray_GetRef(g, i) = IOSByteArray_Get(palette_, off + 1);
        *IOSByteArray_GetRef(r, i) = IOSByteArray_Get(palette_, off + 2);
      }
    }
    else {
      
#line 625
      sizep = ((IOSByteArray *) nil_chk(palette_))->size_ / 4;
      
#line 627
      if (sizep > 256) {
        sizep = 256;
      }
      
#line 631
      jint off;
      r = [IOSByteArray arrayWithLength:sizep];
      g = [IOSByteArray arrayWithLength:sizep];
      b = [IOSByteArray arrayWithLength:sizep];
      for (jint i = 0; i < sizep; i++) {
        off = 4 * i;
        *IOSByteArray_GetRef(b, i) = IOSByteArray_Get(palette_, off);
        *IOSByteArray_GetRef(g, i) = IOSByteArray_Get(palette_, off + 1);
        *IOSByteArray_GetRef(r, i) = IOSByteArray_Get(palette_, off + 2);
      }
    }
  }
  else if (bitsPerPixel_ == 16) {
    numBands_ = 3;
  }
  else
#line 645
  if (bitsPerPixel_ == 32) {
    numBands_ = alphaMask_ == 0 ? 3 : 4;
  }
  else {
    
#line 651
    numBands_ = 3;
  }
}


#line 655
- (IOSByteArray *)getPaletteWithInt:(jint)group {
  
#line 656
  if (palette_ == nil)
#line 657
  return nil;
  IOSByteArray *np = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(palette_))->size_ / group * 3];
  jint e = palette_->size_ / group;
  for (jint k = 0; k < e; ++k) {
    jint src = k * group;
    jint dest = k * 3;
    *IOSByteArray_GetRef(np, dest + 2) = IOSByteArray_Get(palette_, src++);
    *IOSByteArray_GetRef(np, dest + 1) = IOSByteArray_Get(palette_, src++);
    *IOSByteArray_GetRef(np, dest) = IOSByteArray_Get(palette_, src);
  }
  return np;
}


#line 670
- (ComItextpdfTextImage *)getImage {
  
#line 671
  IOSByteArray *bdata = nil;
  
#line 681
  switch (imageType_) {
    
#line 683
    case ComItextpdfTextPdfCodecBmpImage_VERSION_2_1_BIT:
    
#line 685
    return [self read1BitWithInt:3];
    
#line 687
    case ComItextpdfTextPdfCodecBmpImage_VERSION_2_4_BIT:
    
#line 689
    return [self read4BitWithInt:3];
    
#line 691
    case ComItextpdfTextPdfCodecBmpImage_VERSION_2_8_BIT:
    
#line 693
    return [self read8BitWithInt:3];
    
#line 695
    case ComItextpdfTextPdfCodecBmpImage_VERSION_2_24_BIT:
    
#line 697
    bdata = [IOSByteArray arrayWithLength:width_ * height_ * 3];
    [self read24BitWithByteArray:bdata];
    return [[ComItextpdfTextImgRaw alloc] initWithInt:width_ withInt:height_ withInt:3 withInt:8 withByteArray:bdata];
    
#line 701
    case ComItextpdfTextPdfCodecBmpImage_VERSION_3_1_BIT:
    
#line 703
    return [self read1BitWithInt:4];
    
#line 705
    case ComItextpdfTextPdfCodecBmpImage_VERSION_3_4_BIT:
    switch ((jint) compression_) {
      case ComItextpdfTextPdfCodecBmpImage_BI_RGB:
      return [self read4BitWithInt:4];
      
#line 710
      case ComItextpdfTextPdfCodecBmpImage_BI_RLE4:
      return [self readRLE4];
      
#line 713
      default:
      @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 715
      @"Invalid compression specified for BMP file."];
    }
    
#line 718
    case ComItextpdfTextPdfCodecBmpImage_VERSION_3_8_BIT:
    switch ((jint) compression_) {
      case ComItextpdfTextPdfCodecBmpImage_BI_RGB:
      return [self read8BitWithInt:4];
      
#line 723
      case ComItextpdfTextPdfCodecBmpImage_BI_RLE8:
      return [self readRLE8];
      
#line 726
      default:
      @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 728
      @"Invalid compression specified for BMP file."];
    }
    
#line 731
    case ComItextpdfTextPdfCodecBmpImage_VERSION_3_24_BIT:
    
#line 733
    bdata = [IOSByteArray arrayWithLength:width_ * height_ * 3];
    [self read24BitWithByteArray:bdata];
    return [[ComItextpdfTextImgRaw alloc] initWithInt:width_ withInt:height_ withInt:3 withInt:8 withByteArray:bdata];
    
#line 737
    case ComItextpdfTextPdfCodecBmpImage_VERSION_3_NT_16_BIT:
    return [self read1632BitWithBoolean:NO];
    
#line 740
    case ComItextpdfTextPdfCodecBmpImage_VERSION_3_NT_32_BIT:
    return [self read1632BitWithBoolean:YES];
    
#line 743
    case ComItextpdfTextPdfCodecBmpImage_VERSION_4_1_BIT:
    return [self read1BitWithInt:4];
    
#line 746
    case ComItextpdfTextPdfCodecBmpImage_VERSION_4_4_BIT:
    switch ((jint) compression_) {
      
#line 749
      case ComItextpdfTextPdfCodecBmpImage_BI_RGB:
      return [self read4BitWithInt:4];
      
#line 752
      case ComItextpdfTextPdfCodecBmpImage_BI_RLE4:
      return [self readRLE4];
      
#line 755
      default:
      @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 757
      @"Invalid compression specified for BMP file."];
    }
    
#line 760
    case ComItextpdfTextPdfCodecBmpImage_VERSION_4_8_BIT:
    switch ((jint) compression_) {
      
#line 763
      case ComItextpdfTextPdfCodecBmpImage_BI_RGB:
      return [self read8BitWithInt:4];
      
#line 766
      case ComItextpdfTextPdfCodecBmpImage_BI_RLE8:
      return [self readRLE8];
      
#line 769
      default:
      @throw [[JavaLangRuntimeException alloc] initWithNSString:
#line 771
      @"Invalid compression specified for BMP file."];
    }
    
#line 774
    case ComItextpdfTextPdfCodecBmpImage_VERSION_4_16_BIT:
    return [self read1632BitWithBoolean:NO];
    
#line 777
    case ComItextpdfTextPdfCodecBmpImage_VERSION_4_24_BIT:
    bdata = [IOSByteArray arrayWithLength:width_ * height_ * 3];
    [self read24BitWithByteArray:bdata];
    return [[ComItextpdfTextImgRaw alloc] initWithInt:width_ withInt:height_ withInt:3 withInt:8 withByteArray:bdata];
    
#line 782
    case ComItextpdfTextPdfCodecBmpImage_VERSION_4_32_BIT:
    return [self read1632BitWithBoolean:YES];
  }
  return nil;
}


#line 788
- (ComItextpdfTextImage *)indexedModelWithByteArray:(IOSByteArray *)bdata
                                            withInt:(jint)bpc
                                            withInt:(jint)paletteEntries {
  
#line 789
  ComItextpdfTextImage *img = [[ComItextpdfTextImgRaw alloc] initWithInt:width_ withInt:height_ withInt:1 withInt:bpc withByteArray:bdata];
  ComItextpdfTextPdfPdfArray *colorspace = [[ComItextpdfTextPdfPdfArray alloc] init];
  [colorspace addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_INDEXED_()];
  [colorspace addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
  IOSByteArray *np = [self getPaletteWithInt:paletteEntries];
  jint len = ((IOSByteArray *) nil_chk(np))->size_;
  [colorspace addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:len / 3 - 1]];
  [colorspace addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithByteArray:np]];
  ComItextpdfTextPdfPdfDictionary *ad = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [ad putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withComItextpdfTextPdfPdfObject:colorspace];
  [img setAdditionalWithComItextpdfTextPdfPdfDictionary:ad];
  return img;
}


#line 803
- (void)readPaletteWithInt:(jint)sizeOfPalette {
  
#line 804
  if (sizeOfPalette == 0) {
    return;
  }
  
#line 808
  palette_ = [IOSByteArray arrayWithLength:sizeOfPalette];
  jint bytesRead = 0;
  while (bytesRead < sizeOfPalette) {
    jint r = [((JavaIoInputStream *) nil_chk(inputStream_)) readWithByteArray:palette_ withInt:bytesRead withInt:sizeOfPalette - bytesRead];
    if (r < 0) {
      @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"incomplete.palette" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    bytesRead += r;
  }
  (void) [((JavaUtilHashMap *) nil_chk(properties_)) putWithId:@"palette" withId:palette_];
}


#line 821
- (ComItextpdfTextImage *)read1BitWithInt:(jint)paletteEntries {
  
#line 822
  IOSByteArray *bdata = [IOSByteArray arrayWithLength:(width_ + 7) / 8 * height_];
  jint padding = 0;
  jint bytesPerScanline = J2ObjCFpToInt([JavaLangMath ceilWithDouble:width_ / 8.0]);
  
#line 826
  jint remainder = bytesPerScanline % 4;
  if (remainder != 0) {
    padding = 4 - remainder;
  }
  
#line 831
  jint imSize = (bytesPerScanline + padding) * height_;
  
#line 834
  IOSByteArray *values = [IOSByteArray arrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 838
    imSize - bytesRead];
  }
  
#line 841
  if (isBottomUp_) {
    
#line 846
    for (jint i = 0; i < height_; i++) {
      [JavaLangSystem arraycopyWithId:values withInt:
#line 848
      imSize - (i + 1) * (bytesPerScanline + padding) withId:
#line 849
      bdata withInt:
#line 850
      i * bytesPerScanline withInt:bytesPerScanline];
    }
  }
  else {
    for (jint i = 0; i < height_; i++) {
      [JavaLangSystem arraycopyWithId:values withInt:
#line 856
      i * (bytesPerScanline + padding) withId:
#line 857
      bdata withInt:
#line 858
      i * bytesPerScanline withInt:
#line 859
      bytesPerScanline];
    }
  }
  return [self indexedModelWithByteArray:bdata withInt:1 withInt:paletteEntries];
}


#line 866
- (ComItextpdfTextImage *)read4BitWithInt:(jint)paletteEntries {
  
#line 867
  IOSByteArray *bdata = [IOSByteArray arrayWithLength:(width_ + 1) / 2 * height_];
  
#line 870
  jint padding = 0;
  
#line 872
  jint bytesPerScanline = J2ObjCFpToInt([JavaLangMath ceilWithDouble:width_ / 2.0]);
  jint remainder = bytesPerScanline % 4;
  if (remainder != 0) {
    padding = 4 - remainder;
  }
  
#line 878
  jint imSize = (bytesPerScanline + padding) * height_;
  
#line 881
  IOSByteArray *values = [IOSByteArray arrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 885
    imSize - bytesRead];
  }
  
#line 888
  if (isBottomUp_) {
    
#line 892
    for (jint i = 0; i < height_; i++) {
      [JavaLangSystem arraycopyWithId:values withInt:
#line 894
      imSize - (i + 1) * (bytesPerScanline + padding) withId:
#line 895
      bdata withInt:
#line 896
      i * bytesPerScanline withInt:
#line 897
      bytesPerScanline];
    }
  }
  else {
    
#line 900
    for (jint i = 0; i < height_; i++) {
      [JavaLangSystem arraycopyWithId:values withInt:
#line 902
      i * (bytesPerScanline + padding) withId:
#line 903
      bdata withInt:
#line 904
      i * bytesPerScanline withInt:
#line 905
      bytesPerScanline];
    }
  }
  return [self indexedModelWithByteArray:bdata withInt:4 withInt:paletteEntries];
}


#line 912
- (ComItextpdfTextImage *)read8BitWithInt:(jint)paletteEntries {
  
#line 913
  IOSByteArray *bdata = [IOSByteArray arrayWithLength:width_ * height_];
  
#line 915
  jint padding = 0;
  
#line 918
  jint bitsPerScanline = width_ * 8;
  if (bitsPerScanline % 32 != 0) {
    padding = (bitsPerScanline / 32 + 1) * 32 - bitsPerScanline;
    padding = J2ObjCFpToInt([JavaLangMath ceilWithDouble:padding / 8.0]);
  }
  
#line 924
  jint imSize = (width_ + padding) * height_;
  
#line 927
  IOSByteArray *values = [IOSByteArray arrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(inputStream_)) readWithByteArray:values withInt:bytesRead withInt:imSize - bytesRead];
  }
  
#line 933
  if (isBottomUp_) {
    
#line 937
    for (jint i = 0; i < height_; i++) {
      [JavaLangSystem arraycopyWithId:values withInt:
#line 939
      imSize - (i + 1) * (width_ + padding) withId:
#line 940
      bdata withInt:
#line 941
      i * width_ withInt:
#line 942
      width_];
    }
  }
  else {
    
#line 945
    for (jint i = 0; i < height_; i++) {
      [JavaLangSystem arraycopyWithId:values withInt:
#line 947
      i * (width_ + padding) withId:
#line 948
      bdata withInt:
#line 949
      i * width_ withInt:
#line 950
      width_];
    }
  }
  return [self indexedModelWithByteArray:bdata withInt:8 withInt:paletteEntries];
}


#line 957
- (void)read24BitWithByteArray:(IOSByteArray *)bdata {
  
#line 959
  jint padding = 0;
  
#line 962
  jint bitsPerScanline = width_ * 24;
  if (bitsPerScanline % 32 != 0) {
    padding = (bitsPerScanline / 32 + 1) * 32 - bitsPerScanline;
    padding = J2ObjCFpToInt([JavaLangMath ceilWithDouble:padding / 8.0]);
  }
  
#line 969
  jint imSize = (width_ * 3 + 3) / 4 * 4 * height_;
  
#line 971
  IOSByteArray *values = [IOSByteArray arrayWithLength:imSize];
  @try {
    jint bytesRead = 0;
    while (bytesRead < imSize) {
      jint r = [((JavaIoInputStream *) nil_chk(inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 976
      imSize - bytesRead];
      if (r < 0)
#line 978
      break;
      bytesRead += r;
    }
  }
  @catch (
#line 981
  JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
  
#line 985
  jint l = 0, count;
  
#line 987
  if (isBottomUp_) {
    jint max = width_ * height_ * 3 - 1;
    
#line 990
    count = -padding;
    for (jint i = 0; i < height_; i++) {
      l = max - (i + 1) * width_ * 3 + 1;
      count += padding;
      for (jint j = 0; j < width_; j++) {
        *IOSByteArray_GetRef(nil_chk(bdata), l + 2) = IOSByteArray_Get(values, count++);
        *IOSByteArray_GetRef(bdata, l + 1) = IOSByteArray_Get(values, count++);
        *IOSByteArray_GetRef(bdata, l) = IOSByteArray_Get(values, count++);
        l += 3;
      }
    }
  }
  else {
    
#line 1002
    count = -padding;
    for (jint i = 0; i < height_; i++) {
      count += padding;
      for (jint j = 0; j < width_; j++) {
        *IOSByteArray_GetRef(nil_chk(bdata), l + 2) = IOSByteArray_Get(values, count++);
        *IOSByteArray_GetRef(bdata, l + 1) = IOSByteArray_Get(values, count++);
        *IOSByteArray_GetRef(bdata, l) = IOSByteArray_Get(values, count++);
        l += 3;
      }
    }
  }
}


#line 1015
- (jint)findMaskWithInt:(jint)mask {
  
#line 1016
  jint k = 0;
  for (; k < 32; ++k) {
    if ((mask & 1) == 1)
#line 1019
    break;
    URShiftAssignInt(&mask, 1);
  }
  return mask;
}


#line 1025
- (jint)findShiftWithInt:(jint)mask {
  
#line 1026
  jint k = 0;
  for (; k < 32; ++k) {
    if ((mask & 1) == 1)
#line 1029
    break;
    URShiftAssignInt(&mask, 1);
  }
  return k;
}


#line 1035
- (ComItextpdfTextImage *)read1632BitWithBoolean:(jboolean)is32 {
  
#line 1037
  jint red_mask = [self findMaskWithInt:redMask_];
  jint red_shift = [self findShiftWithInt:redMask_];
  jint red_factor = red_mask + 1;
  jint green_mask = [self findMaskWithInt:greenMask_];
  jint green_shift = [self findShiftWithInt:greenMask_];
  jint green_factor = green_mask + 1;
  jint blue_mask = [self findMaskWithInt:blueMask_];
  jint blue_shift = [self findShiftWithInt:blueMask_];
  jint blue_factor = blue_mask + 1;
  IOSByteArray *bdata = [IOSByteArray arrayWithLength:width_ * height_ * 3];
  
#line 1048
  jint padding = 0;
  
#line 1050
  if (!is32) {
    
#line 1052
    jint bitsPerScanline = width_ * 16;
    if (bitsPerScanline % 32 != 0) {
      padding = (bitsPerScanline / 32 + 1) * 32 - bitsPerScanline;
      padding = J2ObjCFpToInt([JavaLangMath ceilWithDouble:padding / 8.0]);
    }
  }
  
#line 1059
  jint imSize = (jint) imageSize_;
  if (imSize == 0) {
    imSize = (jint) (bitmapFileSize_ - bitmapOffset_);
  }
  
#line 1064
  jint l = 0;
  jint v;
  if (isBottomUp_) {
    for (jint i = height_ - 1; i >= 0; --i) {
      l = width_ * 3 * i;
      for (jint j = 0; j < width_; j++) {
        if (is32)
#line 1071
        v = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
        else
#line 1073
        v = [self readWordWithJavaIoInputStream:inputStream_];
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (((URShift32(v, red_shift)) & red_mask) * 256 / red_factor);
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (((URShift32(v, green_shift)) & green_mask) * 256 / green_factor);
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (((URShift32(v, blue_shift)) & blue_mask) * 256 / blue_factor);
      }
      for (jint m = 0; m < padding; m++) {
        [((JavaIoInputStream *) nil_chk(inputStream_)) read];
      }
    }
  }
  else {
    
#line 1083
    for (jint i = 0; i < height_; i++) {
      for (jint j = 0; j < width_; j++) {
        if (is32)
#line 1086
        v = (jint) [self readDWordWithJavaIoInputStream:inputStream_];
        else
#line 1088
        v = [self readWordWithJavaIoInputStream:inputStream_];
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (((URShift32(v, red_shift)) & red_mask) * 256 / red_factor);
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (((URShift32(v, green_shift)) & green_mask) * 256 / green_factor);
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (((URShift32(v, blue_shift)) & blue_mask) * 256 / blue_factor);
      }
      for (jint m = 0; m < padding; m++) {
        [((JavaIoInputStream *) nil_chk(inputStream_)) read];
      }
    }
  }
  return [[ComItextpdfTextImgRaw alloc] initWithInt:width_ withInt:height_ withInt:3 withInt:8 withByteArray:bdata];
}


#line 1101
- (ComItextpdfTextImage *)readRLE8 {
  
#line 1104
  jint imSize = (jint) imageSize_;
  if (imSize == 0) {
    imSize = (jint) (bitmapFileSize_ - bitmapOffset_);
  }
  
#line 1110
  IOSByteArray *values = [IOSByteArray arrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 1114
    imSize - bytesRead];
  }
  
#line 1118
  IOSByteArray *val = [self decodeRLEWithBoolean:YES withByteArray:values];
  
#line 1121
  imSize = width_ * height_;
  
#line 1123
  if (isBottomUp_) {
    
#line 1128
    IOSByteArray *temp = [IOSByteArray arrayWithLength:((IOSByteArray *) nil_chk(val))->size_];
    jint bytesPerScanline = width_;
    for (jint i = 0; i < height_; i++) {
      [JavaLangSystem arraycopyWithId:val withInt:
#line 1132
      imSize - (i + 1) * bytesPerScanline withId:
#line 1133
      temp withInt:
#line 1134
      i * bytesPerScanline withInt:bytesPerScanline];
    }
    val = temp;
  }
  return [self indexedModelWithByteArray:val withInt:8 withInt:4];
}


#line 1141
- (ComItextpdfTextImage *)readRLE4 {
  jint imSize = (jint) imageSize_;
  if (imSize == 0) {
    imSize = (jint) (bitmapFileSize_ - bitmapOffset_);
  }
  
#line 1150
  IOSByteArray *values = [IOSByteArray arrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 1154
    imSize - bytesRead];
  }
  
#line 1158
  IOSByteArray *val = [self decodeRLEWithBoolean:NO withByteArray:values];
  
#line 1161
  if (isBottomUp_) {
    
#line 1163
    IOSByteArray *inverted = val;
    val = [IOSByteArray arrayWithLength:width_ * height_];
    jint l = 0, index, lineEnd;
    
#line 1167
    for (jint i = height_ - 1; i >= 0; i--) {
      index = i * width_;
      lineEnd = l + width_;
      while (l != lineEnd) {
        *IOSByteArray_GetRef(val, l++) = IOSByteArray_Get(nil_chk(inverted), index++);
      }
    }
  }
  jint stride = (width_ + 1) / 2;
  IOSByteArray *bdata = [IOSByteArray arrayWithLength:stride * height_];
  jint ptr = 0;
  jint sh = 0;
  for (jint h = 0; h < height_; ++h) {
    for (jint w = 0; w < width_; ++w) {
      if ((w & 1) == 0)
#line 1182
      *IOSByteArray_GetRef(bdata, sh + w / 2) = (jbyte) (LShift32(IOSByteArray_Get(nil_chk(val), ptr++), 4));
      else
#line 1184
      *IOSByteArray_GetRef(bdata, sh + w / 2) |= (jbyte) (IOSByteArray_Get(nil_chk(val), ptr++) & (jint) 0x0f);
    }
    sh += stride;
  }
  return [self indexedModelWithByteArray:bdata withInt:4 withInt:4];
}


#line 1191
- (IOSByteArray *)decodeRLEWithBoolean:(jboolean)is8
                         withByteArray:(IOSByteArray *)values {
  
#line 1192
  IOSByteArray *val = [IOSByteArray arrayWithLength:width_ * height_];
  @try {
    jint ptr = 0;
    jint x = 0;
    jint q = 0;
    for (jint y = 0; y < height_ && ptr < ((IOSByteArray *) nil_chk(values))->size_; ) {
      jint count = IOSByteArray_Get(nil_chk(values), ptr++) & (jint) 0xff;
      if (count != 0) {
        
#line 1201
        jint bt = IOSByteArray_Get(values, ptr++) & (jint) 0xff;
        if (is8) {
          for (jint i = count; i != 0; --i) {
            *IOSByteArray_GetRef(val, q++) = (jbyte) bt;
          }
        }
        else {
          for (jint i = 0; i < count; ++i) {
            *IOSByteArray_GetRef(val, q++) = (jbyte) ((i & 1) == 1 ? bt & (jint) 0x0f : (URShift32(bt, 4)) & (jint) 0x0f);
          }
        }
        x += count;
      }
      else {
        
#line 1216
        count = IOSByteArray_Get(values, ptr++) & (jint) 0xff;
        if (count == 1)
#line 1218
        break;
        switch (count) {
          case 0:
          x = 0;
          ++y;
          q = y * width_;
          break;
          case 2:
          
#line 1227
          x += IOSByteArray_Get(values, ptr++) & (jint) 0xff;
          y += IOSByteArray_Get(values, ptr++) & (jint) 0xff;
          q = y * width_ + x;
          break;
          default:
          
#line 1233
          if (is8) {
            for (jint i = count; i != 0; --i)
#line 1235
            *IOSByteArray_GetRef(val, q++) = (jbyte) (IOSByteArray_Get(values, ptr++) & (jint) 0xff);
          }
          else {
            jint bt = 0;
            for (jint i = 0; i < count; ++i) {
              if ((i & 1) == 0)
#line 1241
              bt = IOSByteArray_Get(values, ptr++) & (jint) 0xff;
              *IOSByteArray_GetRef(val, q++) = (jbyte) ((i & 1) == 1 ? bt & (jint) 0x0f : (URShift32(bt, 4)) & (jint) 0x0f);
            }
          }
          x += count;
          
#line 1247
          if (is8) {
            if ((count & 1) == 1)
#line 1249
            ++ptr;
          }
          else {
            if ((count & 3) == 1 || (count & 3) == 2)
#line 1253
            ++ptr;
          }
          break;
        }
      }
    }
  }
  @catch (JavaLangRuntimeException *e) {
  }
  
#line 1264
  return val;
}


#line 1270
- (jint)readUnsignedByteWithJavaIoInputStream:(JavaIoInputStream *)stream {
  
#line 1271
  return [((JavaIoInputStream *) nil_chk(stream)) read] & (jint) 0xff;
}


#line 1275
- (jint)readUnsignedShortWithJavaIoInputStream:(JavaIoInputStream *)stream {
  jint b1 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jint b2 = [self readUnsignedByteWithJavaIoInputStream:stream];
  return ((LShift32(b2, 8)) | b1) & (jint) 0xffff;
}


#line 1282
- (jint)readShortWithJavaIoInputStream:(JavaIoInputStream *)stream {
  
#line 1283
  jint b1 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jint b2 = [self readUnsignedByteWithJavaIoInputStream:stream];
  return (LShift32(b2, 8)) | b1;
}


#line 1289
- (jint)readWordWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return [self readUnsignedShortWithJavaIoInputStream:stream];
}


#line 1294
- (jlong)readUnsignedIntWithJavaIoInputStream:(JavaIoInputStream *)stream {
  
#line 1295
  jint b1 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jint b2 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jint b3 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jint b4 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jlong l = (((LShift32(b4, 24)) | (LShift32(b3, 16))) | (LShift32(b2, 8))) | b1;
  return l & (jint) 0xffffffff;
}


#line 1304
- (jint)readIntWithJavaIoInputStream:(JavaIoInputStream *)stream {
  jint b1 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jint b2 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jint b3 = [self readUnsignedByteWithJavaIoInputStream:stream];
  jint b4 = [self readUnsignedByteWithJavaIoInputStream:stream];
  return (((LShift32(b4, 24)) | (LShift32(b3, 16))) | (LShift32(b2, 8))) | b1;
}


#line 1313
- (jlong)readDWordWithJavaIoInputStream:(JavaIoInputStream *)stream {
  
#line 1314
  return [self readUnsignedIntWithJavaIoInputStream:stream];
}


#line 1318
- (jint)readLongWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return [self readIntWithJavaIoInputStream:stream];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCodecBmpImage *)other {
  [super copyAllFieldsTo:other];
  other->alphaMask_ = alphaMask_;
  other->bitmapFileSize_ = bitmapFileSize_;
  other->bitmapOffset_ = bitmapOffset_;
  other->bitsPerPixel_ = bitsPerPixel_;
  other->blueMask_ = blueMask_;
  other->compression_ = compression_;
  other->greenMask_ = greenMask_;
  other->height_ = height_;
  other->imageSize_ = imageSize_;
  other->imageType_ = imageType_;
  other->inputStream_ = inputStream_;
  other->isBottomUp_ = isBottomUp_;
  other->numBands_ = numBands_;
  other->palette_ = palette_;
  other->properties_ = properties_;
  other->redMask_ = redMask_;
  other->width_ = width_;
  other->xPelsPerMeter_ = xPelsPerMeter_;
  other->yPelsPerMeter_ = yPelsPerMeter_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoInputStream:withBoolean:withInt:", "BmpImage", NULL, 0x0, "Ljava.io.IOException;" },
    { "getImageWithJavaNetURL:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "getImageWithJavaIoInputStream:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "getImageWithJavaIoInputStream:withBoolean:withInt:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "getImageWithNSString:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "getImageWithByteArray:", "getImage", "Lcom.itextpdf.text.Image;", 0x9, "Ljava.io.IOException;" },
    { "processWithJavaIoInputStream:withBoolean:", "process", "V", 0x4, "Ljava.io.IOException;" },
    { "getPaletteWithInt:", "getPalette", "[B", 0x2, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.BadElementException;" },
    { "indexedModelWithByteArray:withInt:withInt:", "indexedModel", "Lcom.itextpdf.text.Image;", 0x2, "Lcom.itextpdf.text.BadElementException;" },
    { "readPaletteWithInt:", "readPalette", "V", 0x2, "Ljava.io.IOException;" },
    { "read1BitWithInt:", "read1Bit", "Lcom.itextpdf.text.Image;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.BadElementException;" },
    { "read4BitWithInt:", "read4Bit", "Lcom.itextpdf.text.Image;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.BadElementException;" },
    { "read8BitWithInt:", "read8Bit", "Lcom.itextpdf.text.Image;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.BadElementException;" },
    { "read24BitWithByteArray:", "read24Bit", "V", 0x2, NULL },
    { "findMaskWithInt:", "findMask", "I", 0x2, NULL },
    { "findShiftWithInt:", "findShift", "I", 0x2, NULL },
    { "read1632BitWithBoolean:", "read1632Bit", "Lcom.itextpdf.text.Image;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.BadElementException;" },
    { "readRLE8", NULL, "Lcom.itextpdf.text.Image;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.BadElementException;" },
    { "readRLE4", NULL, "Lcom.itextpdf.text.Image;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.BadElementException;" },
    { "decodeRLEWithBoolean:withByteArray:", "decodeRLE", "[B", 0x2, NULL },
    { "readUnsignedByteWithJavaIoInputStream:", "readUnsignedByte", "I", 0x2, "Ljava.io.IOException;" },
    { "readUnsignedShortWithJavaIoInputStream:", "readUnsignedShort", "I", 0x2, "Ljava.io.IOException;" },
    { "readShortWithJavaIoInputStream:", "readShort", "I", 0x2, "Ljava.io.IOException;" },
    { "readWordWithJavaIoInputStream:", "readWord", "I", 0x2, "Ljava.io.IOException;" },
    { "readUnsignedIntWithJavaIoInputStream:", "readUnsignedInt", "J", 0x2, "Ljava.io.IOException;" },
    { "readIntWithJavaIoInputStream:", "readInt", "I", 0x2, "Ljava.io.IOException;" },
    { "readDWordWithJavaIoInputStream:", "readDWord", "J", 0x2, "Ljava.io.IOException;" },
    { "readLongWithJavaIoInputStream:", "readLong", "I", 0x2, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputStream_", NULL, 0x2, "Ljava.io.InputStream;", NULL,  },
    { "bitmapFileSize_", NULL, 0x2, "J", NULL,  },
    { "bitmapOffset_", NULL, 0x2, "J", NULL,  },
    { "compression_", NULL, 0x2, "J", NULL,  },
    { "imageSize_", NULL, 0x2, "J", NULL,  },
    { "palette_", NULL, 0x2, "[B", NULL,  },
    { "imageType_", NULL, 0x2, "I", NULL,  },
    { "numBands_", NULL, 0x2, "I", NULL,  },
    { "isBottomUp_", NULL, 0x2, "Z", NULL,  },
    { "bitsPerPixel_", NULL, 0x2, "I", NULL,  },
    { "redMask_", NULL, 0x2, "I", NULL,  },
    { "greenMask_", NULL, 0x2, "I", NULL,  },
    { "blueMask_", NULL, 0x2, "I", NULL,  },
    { "alphaMask_", NULL, 0x2, "I", NULL,  },
    { "properties_", NULL, 0x1, "Ljava.util.HashMap;", NULL,  },
    { "xPelsPerMeter_", NULL, 0x2, "J", NULL,  },
    { "yPelsPerMeter_", NULL, 0x2, "J", NULL,  },
    { "VERSION_2_1_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_2_1_BIT },
    { "VERSION_2_4_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_2_4_BIT },
    { "VERSION_2_8_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_2_8_BIT },
    { "VERSION_2_24_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_2_24_BIT },
    { "VERSION_3_1_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_3_1_BIT },
    { "VERSION_3_4_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_3_4_BIT },
    { "VERSION_3_8_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_3_8_BIT },
    { "VERSION_3_24_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_3_24_BIT },
    { "VERSION_3_NT_16_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_3_NT_16_BIT },
    { "VERSION_3_NT_32_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_3_NT_32_BIT },
    { "VERSION_4_1_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_4_1_BIT },
    { "VERSION_4_4_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_4_4_BIT },
    { "VERSION_4_8_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_4_8_BIT },
    { "VERSION_4_16_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_4_16_BIT },
    { "VERSION_4_24_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_4_24_BIT },
    { "VERSION_4_32_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_VERSION_4_32_BIT },
    { "LCS_CALIBRATED_RGB_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_LCS_CALIBRATED_RGB },
    { "LCS_sRGB_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_LCS_sRGB },
    { "LCS_CMYK_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_LCS_CMYK },
    { "BI_RGB_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_BI_RGB },
    { "BI_RLE8_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_BI_RLE8 },
    { "BI_RLE4_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_BI_RLE4 },
    { "BI_BITFIELDS_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfCodecBmpImage_BI_BITFIELDS },
    { "width_", NULL, 0x0, "I", NULL,  },
    { "height_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCodecBmpImage = { "BmpImage", "com.itextpdf.text.pdf.codec", NULL, 0x1, 29, methods, 42, fields, 0, NULL};
  return &_ComItextpdfTextPdfCodecBmpImage;
}

@end
