//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/SequenceList.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/SequenceList.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/SequenceList.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"


#line 62
@implementation ComItextpdfTextPdfSequenceList

NSString * ComItextpdfTextPdfSequenceList_NOT_OTHER_ = 
#line 75
@"-,!0123456789";


#line 88
- (instancetype)initWithNSString:(NSString *)range {
  if (self = [super init]) {
    
#line 89
    ptr_ = 0;
    
#line 90
    text_ = [((NSString *) nil_chk(range)) toCharArray];
  }
  return self;
}


#line 93
- (jchar)nextChar {
  
#line 94
  while (YES) {
    if (ptr_ >= ((IOSCharArray *) nil_chk(text_))->size_)
#line 96
    return ComItextpdfTextPdfSequenceList_EOT;
    jchar c = IOSCharArray_Get(text_, ptr_++);
    if (c > ' ')
#line 99
    return c;
  }
}


#line 103
- (void)putBack {
  
#line 104
  --ptr_;
  if (ptr_ < 0)
#line 106
  ptr_ = 0;
}


#line 109
- (jint)getType {
  
#line 110
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  jint state = ComItextpdfTextPdfSequenceList_FIRST;
  while (YES) {
    jchar c = [self nextChar];
    if (c == ComItextpdfTextPdfSequenceList_EOT) {
      if (state == ComItextpdfTextPdfSequenceList_DIGIT) {
        number_ = [JavaLangInteger parseIntWithNSString:other_ = [buf description]];
        return ComItextpdfTextPdfSequenceList_NUMBER;
      }
      else if (state == ComItextpdfTextPdfSequenceList_OTHER) {
        other_ = [((NSString *) nil_chk([buf description])) lowercaseString];
        return ComItextpdfTextPdfSequenceList_TEXT;
      }
      return ComItextpdfTextPdfSequenceList_END;
    }
    switch (state) {
      case ComItextpdfTextPdfSequenceList_FIRST:
      switch (c) {
        case '!':
        return ComItextpdfTextPdfSequenceList_NOT;
        case '-':
        return ComItextpdfTextPdfSequenceList_MINUS;
        case ',':
        return ComItextpdfTextPdfSequenceList_COMMA;
      }
      (void) [buf appendWithChar:c];
      if (c >= '0' && c <= '9')
#line 137
      state = ComItextpdfTextPdfSequenceList_DIGIT;
      else
#line 139
      state = ComItextpdfTextPdfSequenceList_OTHER;
      break;
      case ComItextpdfTextPdfSequenceList_DIGIT:
      if (c >= '0' && c <= '9')
#line 143
      (void) [buf appendWithChar:c];
      else {
        [self putBack];
        number_ = [JavaLangInteger parseIntWithNSString:other_ = [buf description]];
        return ComItextpdfTextPdfSequenceList_NUMBER;
      }
      break;
      case ComItextpdfTextPdfSequenceList_OTHER:
      if ([((NSString *) nil_chk(ComItextpdfTextPdfSequenceList_NOT_OTHER_)) indexOf:c] < 0)
#line 152
      (void) [buf appendWithChar:c];
      else {
        [self putBack];
        other_ = [((NSString *) nil_chk([buf description])) lowercaseString];
        return ComItextpdfTextPdfSequenceList_TEXT;
      }
      break;
    }
  }
}


#line 163
- (void)otherProc {
  
#line 164
  if ([((NSString *) nil_chk(other_)) isEqual:@"odd"] || [other_ isEqual:@"o"]) {
    odd_ = YES;
    even_ = NO;
  }
  else if ([other_ isEqual:@"even"] || [other_ isEqual:@"e"]) {
    odd_ = NO;
    even_ = YES;
  }
}


#line 174
- (jboolean)getAttributes {
  
#line 175
  low_ = -1;
  high_ = -1;
  odd_ = even_ = inverse_ = NO;
  jint state = ComItextpdfTextPdfSequenceList_OTHER;
  while (YES) {
    jint type = [self getType];
    if (type == ComItextpdfTextPdfSequenceList_END || type == ComItextpdfTextPdfSequenceList_COMMA) {
      if (state == ComItextpdfTextPdfSequenceList_DIGIT)
#line 183
      high_ = low_;
      return type == ComItextpdfTextPdfSequenceList_END;
    }
    switch (state) {
      case ComItextpdfTextPdfSequenceList_OTHER:
      switch (type) {
        case ComItextpdfTextPdfSequenceList_NOT:
        inverse_ = YES;
        break;
        case ComItextpdfTextPdfSequenceList_MINUS:
        state = ComItextpdfTextPdfSequenceList_DIGIT2;
        break;
        default:
        if (type == ComItextpdfTextPdfSequenceList_NUMBER) {
          low_ = number_;
          state = ComItextpdfTextPdfSequenceList_DIGIT;
        }
        else
#line 201
        [self otherProc];
        break;
      }
      break;
      case ComItextpdfTextPdfSequenceList_DIGIT:
      switch (type) {
        case ComItextpdfTextPdfSequenceList_NOT:
        inverse_ = YES;
        state = ComItextpdfTextPdfSequenceList_OTHER;
        high_ = low_;
        break;
        case ComItextpdfTextPdfSequenceList_MINUS:
        state = ComItextpdfTextPdfSequenceList_DIGIT2;
        break;
        default:
        high_ = low_;
        state = ComItextpdfTextPdfSequenceList_OTHER;
        [self otherProc];
        break;
      }
      break;
      case ComItextpdfTextPdfSequenceList_DIGIT2:
      switch (type) {
        case ComItextpdfTextPdfSequenceList_NOT:
        inverse_ = YES;
        state = ComItextpdfTextPdfSequenceList_OTHER;
        break;
        case ComItextpdfTextPdfSequenceList_MINUS:
        break;
        case ComItextpdfTextPdfSequenceList_NUMBER:
        high_ = number_;
        state = ComItextpdfTextPdfSequenceList_OTHER;
        break;
        default:
        state = ComItextpdfTextPdfSequenceList_OTHER;
        [self otherProc];
        break;
      }
      break;
    }
  }
}


#line 250
+ (id<JavaUtilList>)expandWithNSString:(NSString *)ranges
                               withInt:(jint)maxNumber {
  
#line 251
  ComItextpdfTextPdfSequenceList *parse = [[ComItextpdfTextPdfSequenceList alloc] initWithNSString:ranges];
  JavaUtilLinkedList *list = [[JavaUtilLinkedList alloc] init];
  jboolean sair = NO;
  while (!sair) {
    sair = [parse getAttributes];
    if (parse->low_ == -1 && parse->high_ == -1 && !parse->even_ && !parse->odd_)
#line 257
    continue;
    if (parse->low_ < 1)
#line 259
    parse->low_ = 1;
    if (parse->high_ < 1 || parse->high_ > maxNumber)
#line 261
    parse->high_ = maxNumber;
    if (parse->low_ > maxNumber)
#line 263
    parse->low_ = maxNumber;
    
#line 266
    jint inc = 1;
    if (parse->inverse_) {
      if (parse->low_ > parse->high_) {
        jint t = parse->low_;
        parse->low_ = parse->high_;
        parse->high_ = t;
      }
      for (id<JavaUtilListIterator> it = [list listIterator]; [((id<JavaUtilListIterator>) nil_chk(it)) hasNext]; ) {
        jint n = [((JavaLangInteger *) nil_chk([it next])) intValue];
        if (parse->even_ && (n & 1) == 1)
#line 276
        continue;
        if (parse->odd_ && (n & 1) == 0)
#line 278
        continue;
        if (n >= parse->low_ && n <= parse->high_)
#line 280
        [it remove];
      }
    }
    else {
      if (parse->low_ > parse->high_) {
        inc = -1;
        if (parse->odd_ || parse->even_) {
          --inc;
          if (parse->even_)
#line 289
          parse->low_ &= ~1;
          else
#line 291
          parse->low_ -= (parse->low_ & 1) == 1 ? 0 : 1;
        }
        for (jint k = parse->low_; k >= parse->high_; k += inc)
#line 294
        [list addWithId:[JavaLangInteger valueOfWithInt:k]];
      }
      else {
        if (parse->odd_ || parse->even_) {
          ++inc;
          if (parse->odd_)
#line 300
          parse->low_ |= 1;
          else
#line 302
          parse->low_ += (parse->low_ & 1) == 1 ? 1 : 0;
        }
        for (jint k = parse->low_; k <= parse->high_; k += inc) {
          [list addWithId:[JavaLangInteger valueOfWithInt:k]];
        }
      }
    }
  }
  
#line 313
  return list;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfSequenceList *)other {
  [super copyAllFieldsTo:other];
  other->even_ = even_;
  other->high_ = high_;
  other->inverse_ = inverse_;
  other->low_ = low_;
  other->number_ = number_;
  other->odd_ = odd_;
  other->other_ = other_;
  other->ptr_ = ptr_;
  other->text_ = text_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "SequenceList", NULL, 0x4, NULL },
    { "nextChar", NULL, "C", 0x4, NULL },
    { "putBack", NULL, "V", 0x4, NULL },
    { "getType", NULL, "I", 0x4, NULL },
    { "otherProc", NULL, "V", 0x2, NULL },
    { "getAttributes", NULL, "Z", 0x4, NULL },
    { "expandWithNSString:withInt:", "expand", "Ljava.util.List;", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "COMMA_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_COMMA },
    { "MINUS_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_MINUS },
    { "NOT_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_NOT },
    { "TEXT_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_TEXT },
    { "NUMBER_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_NUMBER },
    { "END_", NULL, 0x1c, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_END },
    { "EOT_", NULL, 0x1c, "C", NULL, .constantValue.asUnichar = ComItextpdfTextPdfSequenceList_EOT },
    { "FIRST_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_FIRST },
    { "DIGIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_DIGIT },
    { "OTHER_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_OTHER },
    { "DIGIT2_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfSequenceList_DIGIT2 },
    { "NOT_OTHER_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfTextPdfSequenceList_NOT_OTHER_,  },
    { "text_", NULL, 0x4, "[C", NULL,  },
    { "ptr_", NULL, 0x4, "I", NULL,  },
    { "number_", NULL, 0x4, "I", NULL,  },
    { "other_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "low_", NULL, 0x4, "I", NULL,  },
    { "high_", NULL, 0x4, "I", NULL,  },
    { "odd_", NULL, 0x4, "Z", NULL,  },
    { "even_", NULL, 0x4, "Z", NULL,  },
    { "inverse_", NULL, 0x4, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfSequenceList = { "SequenceList", "com.itextpdf.text.pdf", NULL, 0x1, 7, methods, 21, fields, 0, NULL};
  return &_ComItextpdfTextPdfSequenceList;
}

@end
