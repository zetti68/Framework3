//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfStamperImp.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfStamperImp.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocWriter.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/Version.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/BadPasswordException.h"
#include "com/itextpdf/text/log/Counter.h"
#include "com/itextpdf/text/log/CounterFactory.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/FdfReader.h"
#include "com/itextpdf/text/pdf/ICC_Profile.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/OutputStreamCounter.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PageResources.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfAppearance.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfContents.h"
#include "com/itextpdf/text/pdf/PdfDate.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfDocument.h"
#include "com/itextpdf/text/pdf/PdfEncryption.h"
#include "com/itextpdf/text/pdf/PdfException.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfImportedPage.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLayer.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNameTree.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfOCG.h"
#include "com/itextpdf/text/pdf/PdfOCProperties.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfPageLabels.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfReaderInstance.h"
#include "com/itextpdf/text/pdf/PdfRectangle.h"
#include "com/itextpdf/text/pdf/PdfStamper.h"
#include "com/itextpdf/text/pdf/PdfStamperImp.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfTemplate.h"
#include "com/itextpdf/text/pdf/PdfTransition.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/StampContent.h"
#include "com/itextpdf/text/pdf/collection/PdfCollection.h"
#include "com/itextpdf/text/pdf/internal/PdfIsoKeys.h"
#include "com/itextpdf/text/pdf/internal/PdfVersionImp.h"
#include "com/itextpdf/text/pdf/internal/PdfViewerPreferencesImp.h"
#include "com/itextpdf/text/xml/xmp/PdfProperties.h"
#include "com/itextpdf/text/xml/xmp/XmpBasicProperties.h"
#include "com/itextpdf/text/xml/xmp/XmpWriter.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPMeta.h"
#include "com/itextpdf/xmp/XMPMetaFactory.h"
#include "com/itextpdf/xmp/options/SerializeOptions.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 78
@implementation ComItextpdfTextPdfPdfStamperImp


#line 105
- (id<ComItextpdfTextLogCounter>)getCounter {
  
#line 106
  return COUNTER_;
}


#line 118
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                             withJavaIoOutputStream:(JavaIoOutputStream *)os
                                           withChar:(jchar)pdfVersion
                                        withBoolean:(jboolean)append {
  if (self =
#line 119
  [super initWithComItextpdfTextPdfPdfDocument:[[ComItextpdfTextPdfPdfDocument alloc] init] withJavaIoOutputStream:os]) {
    readers2intrefs_ =
#line 79
    [[JavaUtilHashMap alloc] init];
    readers2file_ =
#line 80
    [[JavaUtilHashMap alloc] init];
    myXref_ =
#line 83
    [[ComItextpdfTextPdfIntHashtable alloc] init];
    pagesToContent_ =
#line 85
    [[JavaUtilHashMap alloc] init];
    closed_ =
#line 86
    NO;
    rotateContents_ =
#line 88
    YES;
    flat_ =
#line 90
    NO;
    flatFreeText_ =
#line 91
    NO;
    namePtr_ = [IOSIntArray arrayWithInts:(jint[]){
#line 92
      0 } count:1];
      partialFlattening_ =
#line 93
      [[JavaUtilHashSet alloc] init];
      useVp_ =
#line 94
      NO;
      viewerPreferences_ =
#line 95
      [[ComItextpdfTextPdfInternalPdfViewerPreferencesImp alloc] init];
      fieldTemplates_ =
#line 96
      [[JavaUtilHashSet alloc] init];
      fieldsAdded_ =
#line 97
      NO;
      sigFlags_ =
#line 98
      0;
      COUNTER_ =
#line 104
      [ComItextpdfTextLogCounterFactory getCounterWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfStamper class]]];
      
#line 120
      if (![((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) isOpenedWithFullPermissions])
#line 121
      @throw [[ComItextpdfTextExceptionsBadPasswordException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"pdfreader.not.opened.with.owner.password" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      
#line 122
      if ([reader isTampered])
#line 123
      @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.original.document.was.reused.read.it.again.from.file" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
      
#line 124
      [reader setTamperedWithBoolean:YES];
      
#line 125
      self->reader_ = reader;
      
#line 126
      file_ = [reader getSafeFile];
      
#line 127
      self->append_ = append;
      
#line 128
      if ([reader isEncrypted] && (append || ComItextpdfTextPdfPdfReader_get_unethicalreading_())) {
        crypto_ = [[ComItextpdfTextPdfPdfEncryption alloc] initWithComItextpdfTextPdfPdfEncryption:[reader getDecrypt]];
      }
      
#line 131
      if (append) {
        if ([reader isRebuilt])
#line 133
        @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"append.mode.requires.a.document.without.errors.even.if.recovery.was.possible" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
        [((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk(pdf_version_)) setAppendmodeWithBoolean:YES];
        IOSByteArray *buf = [IOSByteArray arrayWithLength:8192];
        jint n;
        while ((n = [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(file_)) readWithByteArray:buf]) > 0)
#line 138
        [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(self->os_)) writeWithByteArray:buf withInt:0 withInt:n];
        prevxref_ = [reader getLastXref];
        [reader setAppendableWithBoolean:YES];
      }
      else {
        if (pdfVersion == 0)
#line 144
        [super setPdfVersionWithChar:[reader getPdfVersion]];
        else
#line 146
        [super setPdfVersionWithChar:pdfVersion];
      }
      
#line 148
      [super open];
      
#line 149
      [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addWriterWithComItextpdfTextPdfPdfWriter:self];
      
#line 150
      if (append) {
        [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) setRefnumWithInt:[reader getXrefSize]];
        marked_ = [[ComItextpdfTextPdfIntHashtable alloc] init];
        if ([reader isNewXrefType])
#line 154
        fullCompression_ = YES;
        if ([reader isHybridXref])
#line 156
        fullCompression_ = NO;
      }
      
#line 158
      initialXrefSize_ = [reader getXrefSize];
      
#line 159
      [self readColorProfile];
    }
    return self;
  }


#line 162
- (void)readColorProfile {
  
#line 163
  ComItextpdfTextPdfPdfObject *outputIntents = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTPUTINTENTS_()];
  if (outputIntents != nil && [((ComItextpdfTextPdfPdfArray *) check_class_cast(outputIntents, [ComItextpdfTextPdfPdfArray class])) size] > 0) {
    ComItextpdfTextPdfPdfStream *iccProfileStream = nil;
    for (jint i = 0; i < [((ComItextpdfTextPdfPdfArray *) check_class_cast(outputIntents, [ComItextpdfTextPdfPdfArray class])) size]; i++) {
      ComItextpdfTextPdfPdfDictionary *outputIntentDictionary = [((ComItextpdfTextPdfPdfArray *) check_class_cast(outputIntents, [ComItextpdfTextPdfPdfArray class])) getAsDictWithInt:i];
      if (outputIntentDictionary != nil) {
        iccProfileStream = [outputIntentDictionary getAsStreamWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESTOUTPUTPROFILE_()];
        if (iccProfileStream != nil)
#line 171
        break;
      }
    }
    
#line 175
    if ([iccProfileStream isKindOfClass:[ComItextpdfTextPdfPRStream class]]) {
      @try {
        colorProfile_ = [ComItextpdfTextPdfICC_Profile getInstanceWithByteArray:[ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(iccProfileStream, [ComItextpdfTextPdfPRStream class])]];
      }
      @catch (
#line 178
      JavaIoIOException *exc) {
        @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:exc];
      }
    }
  }
}


#line 185
- (void)setViewerPreferences {
  
#line 186
  [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) setViewerPreferencesWithComItextpdfTextPdfInternalPdfViewerPreferencesImp:viewerPreferences_];
  [self markUsedWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([reader_ getTrailer])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()]];
}


#line 190
- (void)closeWithJavaUtilMap:(id<JavaUtilMap>)moreInfo {
  
#line 191
  if (closed_)
#line 192
  return;
  if (useVp_) {
    [self setViewerPreferences];
  }
  if (flat_)
#line 197
  [self flatFields];
  if (flatFreeText_)
#line 199
  [self flatFreeTextFields];
  [self addFieldResources];
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  [((ComItextpdfTextPdfInternalPdfVersionImp *) nil_chk([self getPdfVersion])) addToCatalogWithComItextpdfTextPdfPdfDictionary:catalog];
  ComItextpdfTextPdfPdfDictionary *acroForm = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()] withComItextpdfTextPdfPdfObject:[reader_ getCatalog]], [ComItextpdfTextPdfPdfDictionary class]);
  if (acroFields_ != nil) {
    [self markUsedWithComItextpdfTextPdfPdfObject:acroForm];
  }
  if (sigFlags_ != 0) {
    if (acroForm != nil) {
      [acroForm putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIGFLAGS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:sigFlags_]];
      [self markUsedWithComItextpdfTextPdfPdfObject:acroForm];
      [self markUsedWithComItextpdfTextPdfPdfObject:catalog];
    }
  }
  closed_ = YES;
  [self addSharedObjectsToBody];
  [self setOutlines];
  [self setJavaScript];
  [self addFileAttachments];
  
#line 220
  if (extraCatalog_ != nil) {
    [catalog mergeDifferentWithComItextpdfTextPdfPdfDictionary:extraCatalog_];
  }
  if (openAction_ != nil) {
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OPENACTION_() withComItextpdfTextPdfPdfObject:openAction_];
  }
  if (((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_))->pageLabels_ != nil) {
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGELABELS_() withComItextpdfTextPdfPdfObject:[pdf_->pageLabels_ getDictionaryWithComItextpdfTextPdfPdfWriter:self]];
  }
  
#line 230
  if (![((JavaUtilHashSet *) nil_chk(documentOCG_)) isEmpty]) {
    [self fillOCPropertiesWithBoolean:NO];
    ComItextpdfTextPdfPdfDictionary *ocdict = [catalog getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCPROPERTIES_()];
    if (ocdict == nil) {
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk([reader_ getCatalog])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCPROPERTIES_() withComItextpdfTextPdfPdfObject:OCProperties_];
    }
    else {
      [ocdict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCGS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfOCProperties *) nil_chk(OCProperties_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCGS_()]];
      ComItextpdfTextPdfPdfDictionary *ddict = [ocdict getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()];
      if (ddict == nil) {
        ddict = [[ComItextpdfTextPdfPdfDictionary alloc] init];
        [ocdict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_() withComItextpdfTextPdfPdfObject:ddict];
      }
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(ddict)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDER_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([OCProperties_ getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDER_()]];
      [ddict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RBGROUPS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([OCProperties_ getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RBGROUPS_()]];
      [ddict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OFF_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([OCProperties_ getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OFF_()]];
      [ddict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([OCProperties_ getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()]];
    }
    [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:self withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_LAYER withId:OCProperties_];
  }
  
#line 251
  jint skipInfo = -1;
  ComItextpdfTextPdfPdfIndirectReference *iInfo = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([reader_ getTrailer])) getAsIndirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INFO_()];
  if (iInfo != nil) {
    skipInfo = [iInfo getNumber];
  }
  ComItextpdfTextPdfPdfDictionary *oldInfo = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([reader_ getTrailer])) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_INFO_()];
  NSString *producer = nil;
  if (oldInfo != nil && [oldInfo getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PRODUCER_()] != nil) {
    producer = [((ComItextpdfTextPdfPdfString *) nil_chk([oldInfo getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PRODUCER_()])) toUnicodeString];
  }
  ComItextpdfTextVersion *version_ = [ComItextpdfTextVersion getInstance];
  if (producer == nil || [((NSString *) nil_chk([((ComItextpdfTextVersion *) nil_chk(version_)) getVersion])) indexOfString:[version_ getProduct]] == -1) {
    producer = [((ComItextpdfTextVersion *) nil_chk(version_)) getVersion];
  }
  else {
    jint idx = [producer indexOfString:@"; modified using"];
    JavaLangStringBuffer *buf;
    if (idx == -1)
#line 269
    buf = [[JavaLangStringBuffer alloc] initWithNSString:producer];
    else
#line 271
    buf = [[JavaLangStringBuffer alloc] initWithNSString:[producer substring:0 endIndex:idx]];
    (void) [((JavaLangStringBuffer *) nil_chk(buf)) appendWithNSString:@"; modified using "];
    (void) [buf appendWithNSString:[version_ getVersion]];
    producer = [buf description];
  }
  ComItextpdfTextPdfPdfIndirectReference *info = nil;
  ComItextpdfTextPdfPdfDictionary *newInfo = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  if (oldInfo != nil) {
    for (id __strong element in nil_chk([oldInfo getKeys])) {
      ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
      ComItextpdfTextPdfPdfObject *value = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[oldInfo getWithComItextpdfTextPdfPdfName:key]];
      [newInfo putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
    }
  }
  if (moreInfo != nil) {
    for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([moreInfo entrySet])) {
      NSString *key = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
      ComItextpdfTextPdfPdfName *keyName = [[ComItextpdfTextPdfPdfName alloc] initWithNSString:key];
      NSString *value = [entry_ getValue];
      if (value == nil)
#line 291
      [newInfo removeWithComItextpdfTextPdfPdfName:keyName];
      else
#line 293
      [newInfo putWithComItextpdfTextPdfPdfName:keyName withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:value withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
    }
  }
  ComItextpdfTextPdfPdfDate *date = [[ComItextpdfTextPdfPdfDate alloc] init];
  [newInfo putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MODDATE_() withComItextpdfTextPdfPdfObject:date];
  [newInfo putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PRODUCER_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:producer withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
  if (append_) {
    if (iInfo == nil) {
      info = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:newInfo withBoolean:NO])) getIndirectReference];
    }
    else {
      
#line 303
      info = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:newInfo withInt:[iInfo getNumber] withBoolean:NO])) getIndirectReference];
    }
  }
  else {
    
#line 306
    info = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:newInfo withBoolean:NO])) getIndirectReference];
  }
  
#line 309
  IOSByteArray *altMetadata = nil;
  ComItextpdfTextPdfPdfObject *xmpo = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[catalog getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_METADATA_()]];
  if (xmpo != nil && [xmpo isStream]) {
    altMetadata = [ComItextpdfTextPdfPdfReader getStreamBytesRawWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(xmpo, [ComItextpdfTextPdfPRStream class])];
    (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:[catalog getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_METADATA_()]];
  }
  ComItextpdfTextPdfPdfStream *xmp = nil;
  if (xmpMetadata_ != nil) {
    altMetadata = xmpMetadata_;
  }
  else
#line 318
  if (xmpWriter_ != nil) {
    @try {
      JavaIoByteArrayOutputStream *baos = [[JavaIoByteArrayOutputStream alloc] init];
      [ComItextpdfTextXmlXmpPdfProperties setProducerWithComItextpdfXmpXMPMeta:[xmpWriter_ getXmpMeta] withNSString:producer];
      [ComItextpdfTextXmlXmpXmpBasicProperties setModDateWithComItextpdfXmpXMPMeta:[xmpWriter_ getXmpMeta] withNSString:[date getW3CDate]];
      [ComItextpdfTextXmlXmpXmpBasicProperties setMetaDataDateWithComItextpdfXmpXMPMeta:[xmpWriter_ getXmpMeta] withNSString:[date getW3CDate]];
      [xmpWriter_ serializeWithJavaIoOutputStream:baos];
      [xmpWriter_ close];
      xmp = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[baos toByteArray]];
    }
    @catch (
#line 327
    ComItextpdfXmpXMPException *exc) {
      xmpWriter_ = nil;
    }
  }
  if (xmp == nil && altMetadata != nil) {
    @try {
      JavaIoByteArrayOutputStream *baos = [[JavaIoByteArrayOutputStream alloc] init];
      if (moreInfo == nil || xmpMetadata_ != nil) {
        id<ComItextpdfXmpXMPMeta> xmpMeta = [ComItextpdfXmpXMPMetaFactory parseFromBufferWithByteArray:altMetadata];
        
#line 337
        [ComItextpdfTextXmlXmpPdfProperties setProducerWithComItextpdfXmpXMPMeta:xmpMeta withNSString:producer];
        [ComItextpdfTextXmlXmpXmpBasicProperties setModDateWithComItextpdfXmpXMPMeta:xmpMeta withNSString:[date getW3CDate]];
        [ComItextpdfTextXmlXmpXmpBasicProperties setMetaDataDateWithComItextpdfXmpXMPMeta:xmpMeta withNSString:[date getW3CDate]];
        
#line 341
        ComItextpdfXmpOptionsSerializeOptions *serializeOptions = [[ComItextpdfXmpOptionsSerializeOptions alloc] init];
        (void) [serializeOptions setPaddingWithInt:2000];
        [ComItextpdfXmpXMPMetaFactory serializeWithComItextpdfXmpXMPMeta:xmpMeta withJavaIoOutputStream:baos withComItextpdfXmpOptionsSerializeOptions:serializeOptions];
      }
      else {
        
#line 345
        ComItextpdfTextXmlXmpXmpWriter *xmpw = [self createXmpWriterWithJavaIoByteArrayOutputStream:baos withComItextpdfTextPdfPdfDictionary:newInfo];
        [((ComItextpdfTextXmlXmpXmpWriter *) nil_chk(xmpw)) close];
      }
      xmp = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[baos toByteArray]];
    }
    @catch (
#line 349
    ComItextpdfXmpXMPException *e) {
      xmp = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:altMetadata];
    }
    @catch (
#line 351
    JavaIoIOException *e) {
      xmp = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:altMetadata];
    }
  }
  if (xmp != nil) {
    [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_METADATA_()];
    [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_XML_()];
    if (crypto_ != nil && ![crypto_ isMetadataEncrypted]) {
      ComItextpdfTextPdfPdfArray *ar = [[ComItextpdfTextPdfPdfArray alloc] init];
      [ar addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_CRYPT_()];
      [xmp putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_() withComItextpdfTextPdfPdfObject:ar];
    }
    if (append_ && xmpo != nil) {
      (void) [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:xmp withComItextpdfTextPdfPdfIndirectReference:[xmpo getIndRef]];
    }
    else {
      [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_METADATA_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:xmp])) getIndirectReference]];
      [self markUsedWithComItextpdfTextPdfPdfObject:catalog];
    }
  }
  [self closeWithComItextpdfTextPdfPdfIndirectReference:info withInt:skipInfo];
}


#line 374
- (void)closeWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)info
                                                withInt:(jint)skipInfo {
  
#line 375
  [self alterContents];
  jint rootN = [((ComItextpdfTextPdfPRIndirectReference *) nil_chk(((ComItextpdfTextPdfPRIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfReader *) nil_chk(reader_))->trailer_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()], [ComItextpdfTextPdfPRIndirectReference class])))) getNumber];
  if (append_) {
    IOSIntArray *keys = [((ComItextpdfTextPdfIntHashtable *) nil_chk(marked_)) getKeys];
    for (jint k = 0; k < ((IOSIntArray *) nil_chk(keys))->size_; ++k) {
      jint j = IOSIntArray_Get(keys, k);
      ComItextpdfTextPdfPdfObject *obj = [reader_ getPdfObjectReleaseWithInt:j];
      if (obj != nil && skipInfo != j && j < initialXrefSize_) {
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:obj withComItextpdfTextPdfPdfIndirectReference:[obj getIndRef] withBoolean:j != rootN];
      }
    }
    for (jint k = initialXrefSize_; k < [reader_ getXrefSize]; ++k) {
      ComItextpdfTextPdfPdfObject *obj = [reader_ getPdfObjectWithInt:k];
      if (obj != nil) {
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:obj withInt:[self getNewObjectNumberWithComItextpdfTextPdfPdfReader:reader_ withInt:k withInt:0]];
      }
    }
  }
  else {
    for (jint k = 1; k < [reader_ getXrefSize]; ++k) {
      ComItextpdfTextPdfPdfObject *obj = [reader_ getPdfObjectReleaseWithInt:k];
      if (obj != nil && skipInfo != k) {
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:obj withInt:[self getNewObjectNumberWithComItextpdfTextPdfPdfReader:reader_ withInt:k withInt:0] withBoolean:k != rootN];
      }
    }
  }
  
#line 402
  ComItextpdfTextPdfPdfIndirectReference *encryption = nil;
  ComItextpdfTextPdfPdfObject *fileID = nil;
  if (crypto_ != nil) {
    if (append_) {
      encryption = [reader_ getCryptoRef];
    }
    else {
      ComItextpdfTextPdfPdfIndirectObject *encryptionObject = [self addToBodyWithComItextpdfTextPdfPdfObject:[crypto_ getEncryptionDictionary] withBoolean:NO];
      encryption = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(encryptionObject)) getIndirectReference];
    }
    fileID = [crypto_ getFileIDWithBoolean:YES];
  }
  else {
    ComItextpdfTextPdfPdfArray *IDs = [reader_->trailer_ getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ID_()];
    if (IDs != nil && [IDs getAsStringWithInt:0] != nil) {
      fileID = [ComItextpdfTextPdfPdfEncryption createInfoIdWithByteArray:[((ComItextpdfTextPdfPdfString *) nil_chk([IDs getAsStringWithInt:0])) getBytes] withBoolean:YES];
    }
    else {
      fileID = [ComItextpdfTextPdfPdfEncryption createInfoIdWithByteArray:[ComItextpdfTextPdfPdfEncryption createDocumentId] withBoolean:YES];
    }
  }
  ComItextpdfTextPdfPRIndirectReference *iRoot = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([reader_->trailer_ getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROOT_()], [ComItextpdfTextPdfPRIndirectReference class]);
  ComItextpdfTextPdfPdfIndirectReference *root = [[ComItextpdfTextPdfPdfIndirectReference alloc] initWithInt:0 withInt:[self getNewObjectNumberWithComItextpdfTextPdfPdfReader:reader_ withInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(iRoot)) getNumber] withInt:0]];
  
#line 426
  [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) writeCrossReferenceTableWithJavaIoOutputStream:os_ withComItextpdfTextPdfPdfIndirectReference:root withComItextpdfTextPdfPdfIndirectReference:info withComItextpdfTextPdfPdfIndirectReference:encryption withComItextpdfTextPdfPdfObject:fileID withLong:prevxref_];
  if (fullCompression_) {
    [ComItextpdfTextPdfPdfWriter writeKeyInfoWithJavaIoOutputStream:os_];
    [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@"startxref\n"]];
    [os_ writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:[NSString valueOfLong:[body_ offset]]]];
    [os_ writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:@"\n%%EOF\n"]];
  }
  else {
    ComItextpdfTextPdfPdfWriter_PdfTrailer *trailer = [[ComItextpdfTextPdfPdfWriter_PdfTrailer alloc] initWithInt:[body_ size] withLong:
#line 435
    [body_ offset] withComItextpdfTextPdfPdfIndirectReference:
#line 436
    root withComItextpdfTextPdfPdfIndirectReference:
#line 437
    info withComItextpdfTextPdfPdfIndirectReference:
#line 438
    encryption withComItextpdfTextPdfPdfObject:
#line 439
    fileID withLong:prevxref_];
    [trailer toPdfWithComItextpdfTextPdfPdfWriter:self withJavaIoOutputStream:os_];
  }
  [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) flush];
  if ([self isCloseStream])
#line 444
  [os_ close];
  [((id<ComItextpdfTextLogCounter>) nil_chk([self getCounter])) writtenWithLong:[os_ getCounter]];
}


#line 448
- (void)applyRotationWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)pageN
                        withComItextpdfTextPdfByteBuffer:(ComItextpdfTextPdfByteBuffer *)outArg {
  
#line 449
  if (!rotateContents_)
#line 450
  return;
  ComItextpdfTextRectangle *page = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageSizeWithRotationWithComItextpdfTextPdfPdfDictionary:pageN];
  jint rotation = [((ComItextpdfTextRectangle *) nil_chk(page)) getRotation];
  switch (rotation) {
    case 90:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(outArg)) appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATE90_()];
    (void) [outArg appendWithFloat:[page getTop]];
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([outArg appendWithChar:' '])) appendWithChar:'0'])) appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATEFINAL_()];
    break;
    case 180:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(outArg)) appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATE180_()];
    (void) [outArg appendWithFloat:[page getRight]];
    (void) [outArg appendWithChar:' '];
    (void) [outArg appendWithFloat:[page getTop]];
    (void) [outArg appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATEFINAL_()];
    break;
    case 270:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(outArg)) appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATE270_()];
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([outArg appendWithChar:'0'])) appendWithChar:' '];
    (void) [outArg appendWithFloat:[page getRight]];
    (void) [outArg appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATEFINAL_()];
    break;
  }
}


#line 475
- (void)alterContents {
  
#line 476
  for (id __strong element in nil_chk([((JavaUtilHashMap *) nil_chk(pagesToContent_)) values])) {
    ComItextpdfTextPdfPdfStamperImp_PageStamp *ps = (ComItextpdfTextPdfPdfStamperImp_PageStamp *) check_class_cast(element, [ComItextpdfTextPdfPdfStamperImp_PageStamp class]);
    ComItextpdfTextPdfPdfDictionary *pageN = ((ComItextpdfTextPdfPdfStamperImp_PageStamp *) nil_chk(ps))->pageN_;
    [self markUsedWithComItextpdfTextPdfPdfObject:pageN];
    ComItextpdfTextPdfPdfArray *ar = nil;
    ComItextpdfTextPdfPdfObject *content = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageN)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()] withComItextpdfTextPdfPdfObject:pageN];
    if (content == nil) {
      ar = [[ComItextpdfTextPdfPdfArray alloc] init];
      [pageN putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:ar];
    }
    else if ([content isArray]) {
      ar = (ComItextpdfTextPdfPdfArray *) check_class_cast(content, [ComItextpdfTextPdfPdfArray class]);
      [self markUsedWithComItextpdfTextPdfPdfObject:ar];
    }
    else if ([content isStream]) {
      ar = [[ComItextpdfTextPdfPdfArray alloc] init];
      [ar addWithComItextpdfTextPdfPdfObject:[pageN getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()]];
      [pageN putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:ar];
    }
    else {
      ar = [[ComItextpdfTextPdfPdfArray alloc] init];
      [pageN putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:ar];
    }
    ComItextpdfTextPdfByteBuffer *out = [[ComItextpdfTextPdfByteBuffer alloc] init];
    if (ps->under_ != nil) {
      (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_SAVESTATE_()];
      [self applyRotationWithComItextpdfTextPdfPdfDictionary:pageN withComItextpdfTextPdfByteBuffer:out];
      (void) [out appendWithComItextpdfTextPdfByteBuffer:[ps->under_ getInternalBuffer]];
      (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_RESTORESTATE_()];
    }
    if (ps->over_ != nil)
#line 507
    (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_SAVESTATE_()];
    ComItextpdfTextPdfPdfStream *stream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[out toByteArray]];
    [stream flateCompressWithInt:compressionLevel_];
    [((ComItextpdfTextPdfPdfArray *) nil_chk(ar)) addFirstWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:stream])) getIndirectReference]];
    [out reset];
    if (ps->over_ != nil) {
      (void) [out appendWithChar:' '];
      (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_RESTORESTATE_()];
      ComItextpdfTextPdfByteBuffer *buf = [ps->over_ getInternalBuffer];
      (void) [out appendWithByteArray:[((ComItextpdfTextPdfByteBuffer *) nil_chk(buf)) getBuffer] withInt:0 withInt:ps->replacePoint_];
      (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_SAVESTATE_()];
      [self applyRotationWithComItextpdfTextPdfPdfDictionary:pageN withComItextpdfTextPdfByteBuffer:out];
      (void) [out appendWithByteArray:[buf getBuffer] withInt:ps->replacePoint_ withInt:[buf size] - ps->replacePoint_];
      (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_RESTORESTATE_()];
      stream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[out toByteArray]];
      [stream flateCompressWithInt:compressionLevel_];
      [ar addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:stream])) getIndirectReference]];
    }
    [self alterResourcesWithComItextpdfTextPdfPdfStamperImp_PageStamp:ps];
  }
}


#line 529
- (void)alterResourcesWithComItextpdfTextPdfPdfStamperImp_PageStamp:(ComItextpdfTextPdfPdfStamperImp_PageStamp *)ps {
  
#line 530
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfStamperImp_PageStamp *) nil_chk(ps))->pageN_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPageResources *) nil_chk(ps->pageResources_)) getResources]];
}


#line 534
- (jint)getNewObjectNumberWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                  withInt:(jint)number
                                                  withInt:(jint)generation {
  ComItextpdfTextPdfIntHashtable *ref = [((JavaUtilHashMap *) nil_chk(readers2intrefs_)) getWithId:reader];
  if (ref != nil) {
    jint n = [ref getWithInt:number];
    if (n == 0) {
      n = [self getIndirectReferenceNumber];
      [ref putWithInt:number withInt:n];
    }
    return n;
  }
  if (currentPdfReaderInstance_ == nil) {
    if (append_ && number < initialXrefSize_)
#line 546
    return number;
    jint n = [((ComItextpdfTextPdfIntHashtable *) nil_chk(myXref_)) getWithInt:number];
    if (n == 0) {
      n = [self getIndirectReferenceNumber];
      [myXref_ putWithInt:number withInt:n];
    }
    return n;
  }
  else
#line 555
  return [currentPdfReaderInstance_ getNewObjectNumberWithInt:number withInt:generation];
}


#line 559
- (ComItextpdfTextPdfRandomAccessFileOrArray *)getReaderFileWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 560
  if ([((JavaUtilHashMap *) nil_chk(readers2intrefs_)) containsKeyWithId:reader]) {
    ComItextpdfTextPdfRandomAccessFileOrArray *raf = [((JavaUtilHashMap *) nil_chk(readers2file_)) getWithId:reader];
    if (raf != nil)
#line 563
    return raf;
    return [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getSafeFile];
  }
  if (currentPdfReaderInstance_ == nil)
#line 567
  return file_;
  else
#line 569
  return [currentPdfReaderInstance_ getReaderFile];
}

- (void)registerReaderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                          withBoolean:(jboolean)openFile {
  
#line 578
  if ([((JavaUtilHashMap *) nil_chk(readers2intrefs_)) containsKeyWithId:reader])
#line 579
  return;
  (void) [readers2intrefs_ putWithId:reader withId:[[ComItextpdfTextPdfIntHashtable alloc] init]];
  if (openFile) {
    ComItextpdfTextPdfRandomAccessFileOrArray *raf = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getSafeFile];
    (void) [((JavaUtilHashMap *) nil_chk(readers2file_)) putWithId:reader withId:raf];
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(raf)) reOpen];
  }
}


#line 591
- (void)unRegisterReaderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  if (![((JavaUtilHashMap *) nil_chk(readers2intrefs_)) containsKeyWithId:reader])
#line 593
  return;
  (void) [readers2intrefs_ removeWithId:reader];
  ComItextpdfTextPdfRandomAccessFileOrArray *raf = [((JavaUtilHashMap *) nil_chk(readers2file_)) getWithId:reader];
  if (raf == nil)
#line 597
  return;
  (void) [readers2file_ removeWithId:reader];
  @try {
    
#line 599
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(raf)) close];
  }
  @catch (
#line 599
  JavaLangException *e) {
  }
}


#line 602
+ (void)findAllObjectsWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj
                   withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)hits {
  
#line 603
  if (obj == nil)
#line 604
  return;
  {
    
#line 607
    ComItextpdfTextPdfPRIndirectReference *iref;
    
#line 616
    ComItextpdfTextPdfPdfArray *a;
    
#line 623
    ComItextpdfTextPdfPdfDictionary *dic;
    
#line 605
    switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type]) {
      case ComItextpdfTextPdfPdfObject_INDIRECT:
      iref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class]);
      if (reader != [iref getReader])
#line 609
      return;
      if ([((ComItextpdfTextPdfIntHashtable *) nil_chk(hits)) containsKeyWithInt:[iref getNumber]])
#line 611
      return;
      [hits putWithInt:[iref getNumber] withInt:1];
      [ComItextpdfTextPdfPdfStamperImp findAllObjectsWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj] withComItextpdfTextPdfIntHashtable:hits];
      return;
      case ComItextpdfTextPdfPdfObject_ARRAY:
      a = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
      for (jint k = 0; k < [a size]; ++k) {
        [ComItextpdfTextPdfPdfStamperImp findAllObjectsWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfObject:[a getPdfObjectWithInt:k] withComItextpdfTextPdfIntHashtable:hits];
      }
      return;
      case ComItextpdfTextPdfPdfObject_DICTIONARY:
      case ComItextpdfTextPdfPdfObject_STREAM:
      dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
      for (id __strong element in nil_chk([dic getKeys])) {
        ComItextpdfTextPdfPdfName *name = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
        [ComItextpdfTextPdfPdfStamperImp findAllObjectsWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfObject:[dic getWithComItextpdfTextPdfPdfName:name] withComItextpdfTextPdfIntHashtable:hits];
      }
      return;
    }
  }
}


#line 636
- (void)addCommentsWithComItextpdfTextPdfFdfReader:(ComItextpdfTextPdfFdfReader *)fdf {
  
#line 637
  if ([((JavaUtilHashMap *) nil_chk(readers2intrefs_)) containsKeyWithId:fdf])
#line 638
  return;
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfFdfReader *) nil_chk(fdf)) getCatalog];
  catalog = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FDF_()];
  if (catalog == nil)
#line 642
  return;
  ComItextpdfTextPdfPdfArray *annots = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
  if (annots == nil || [annots size] == 0)
#line 645
  return;
  [self registerReaderWithComItextpdfTextPdfPdfReader:fdf withBoolean:NO];
  ComItextpdfTextPdfIntHashtable *hits = [[ComItextpdfTextPdfIntHashtable alloc] init];
  JavaUtilHashMap *irt = [[JavaUtilHashMap alloc] init];
  JavaUtilArrayList *an = [[JavaUtilArrayList alloc] init];
  for (jint k = 0; k < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++k) {
    ComItextpdfTextPdfPdfObject *obj = [annots getPdfObjectWithInt:k];
    ComItextpdfTextPdfPdfDictionary *annot = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj], [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfNumber *page = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(annot)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGE_()];
    if (page == nil || [page intValue] >= [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getNumberOfPages])
#line 655
    continue;
    [ComItextpdfTextPdfPdfStamperImp findAllObjectsWithComItextpdfTextPdfPdfReader:fdf withComItextpdfTextPdfPdfObject:obj withComItextpdfTextPdfIntHashtable:hits];
    [an addWithId:obj];
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type] == ComItextpdfTextPdfPdfObject_INDIRECT) {
      ComItextpdfTextPdfPdfObject *nm = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[annot getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NM_()]];
      if (nm != nil && [nm type] == ComItextpdfTextPdfPdfObject_STRING)
#line 661
      (void) [irt putWithId:[nm description] withId:obj];
    }
  }
  IOSIntArray *arhits = [hits getKeys];
  for (jint k = 0; k < ((IOSIntArray *) nil_chk(arhits))->size_; ++k) {
    jint n = IOSIntArray_Get(arhits, k);
    ComItextpdfTextPdfPdfObject *obj = [fdf getPdfObjectWithInt:n];
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type] == ComItextpdfTextPdfPdfObject_DICTIONARY) {
      ComItextpdfTextPdfPdfObject *str = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_IRT_()]];
      if (str != nil && [str type] == ComItextpdfTextPdfPdfObject_STRING) {
        ComItextpdfTextPdfPdfObject *i = [irt getWithId:[str description]];
        if (i != nil) {
          ComItextpdfTextPdfPdfDictionary *dic2 = [[ComItextpdfTextPdfPdfDictionary alloc] init];
          [dic2 mergeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])];
          [dic2 putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_IRT_() withComItextpdfTextPdfPdfObject:i];
          obj = dic2;
        }
      }
    }
    (void) [self addToBodyWithComItextpdfTextPdfPdfObject:obj withInt:[self getNewObjectNumberWithComItextpdfTextPdfPdfReader:fdf withInt:n withInt:0]];
  }
  for (jint k = 0; k < [an size]; ++k) {
    ComItextpdfTextPdfPdfObject *obj = [an getWithInt:k];
    ComItextpdfTextPdfPdfDictionary *annot = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj], [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfNumber *page = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(annot)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGE_()];
    ComItextpdfTextPdfPdfDictionary *dic = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:[((ComItextpdfTextPdfPdfNumber *) nil_chk(page)) intValue] + 1];
    ComItextpdfTextPdfPdfArray *annotsp = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()] withComItextpdfTextPdfPdfObject:dic], [ComItextpdfTextPdfPdfArray class]);
    if (annotsp == nil) {
      annotsp = [[ComItextpdfTextPdfPdfArray alloc] init];
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_() withComItextpdfTextPdfPdfObject:annotsp];
      [self markUsedWithComItextpdfTextPdfPdfObject:dic];
    }
    [self markUsedWithComItextpdfTextPdfPdfObject:annotsp];
    [((ComItextpdfTextPdfPdfArray *) nil_chk(annotsp)) addWithComItextpdfTextPdfPdfObject:obj];
  }
}


#line 698
- (ComItextpdfTextPdfPdfStamperImp_PageStamp *)getPageStampWithInt:(jint)pageNum {
  
#line 699
  ComItextpdfTextPdfPdfDictionary *pageN = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:pageNum];
  ComItextpdfTextPdfPdfStamperImp_PageStamp *ps = [((JavaUtilHashMap *) nil_chk(pagesToContent_)) getWithId:pageN];
  if (ps == nil) {
    ps = [[ComItextpdfTextPdfPdfStamperImp_PageStamp alloc] initWithComItextpdfTextPdfPdfStamperImp:self withComItextpdfTextPdfPdfReader:reader_ withComItextpdfTextPdfPdfDictionary:pageN];
    (void) [pagesToContent_ putWithId:pageN withId:ps];
  }
  return ps;
}


#line 708
- (ComItextpdfTextPdfPdfContentByte *)getUnderContentWithInt:(jint)pageNum {
  
#line 709
  if (pageNum < 1 || pageNum > [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getNumberOfPages])
#line 710
  return nil;
  ComItextpdfTextPdfPdfStamperImp_PageStamp *ps = [self getPageStampWithInt:pageNum];
  if (((ComItextpdfTextPdfPdfStamperImp_PageStamp *) nil_chk(ps))->under_ == nil)
#line 713
  ps->under_ = [[ComItextpdfTextPdfStampContent alloc] initWithComItextpdfTextPdfPdfStamperImp:self withComItextpdfTextPdfPdfStamperImp_PageStamp:ps];
  return ps->under_;
}


#line 717
- (ComItextpdfTextPdfPdfContentByte *)getOverContentWithInt:(jint)pageNum {
  
#line 718
  if (pageNum < 1 || pageNum > [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getNumberOfPages])
#line 719
  return nil;
  ComItextpdfTextPdfPdfStamperImp_PageStamp *ps = [self getPageStampWithInt:pageNum];
  if (((ComItextpdfTextPdfPdfStamperImp_PageStamp *) nil_chk(ps))->over_ == nil)
#line 722
  ps->over_ = [[ComItextpdfTextPdfStampContent alloc] initWithComItextpdfTextPdfPdfStamperImp:self withComItextpdfTextPdfPdfStamperImp_PageStamp:ps];
  return ps->over_;
}


#line 726
- (void)correctAcroFieldPagesWithInt:(jint)page {
  
#line 727
  if (acroFields_ == nil)
#line 728
  return;
  if (page > [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getNumberOfPages])
#line 730
  return;
  id<JavaUtilMap> fields = [((ComItextpdfTextPdfAcroFields *) nil_chk(acroFields_)) getFields];
  for (ComItextpdfTextPdfAcroFields_Item * __strong item in nil_chk([((id<JavaUtilMap>) nil_chk(fields)) values])) {
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      jint p = [((JavaLangInteger *) nil_chk([item getPageWithInt:k])) intValue];
      if (p >= page)
#line 736
      [item forcePageWithInt:k withInt:p + 1];
    }
  }
}


#line 741
+ (void)moveRectangleWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic2
                         withComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)r
                                                 withInt:(jint)pageImported
                           withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                                            withNSString:(NSString *)name {
  
#line 742
  ComItextpdfTextRectangle *m = [((ComItextpdfTextPdfPdfReader *) nil_chk(r)) getBoxSizeWithInt:pageImported withNSString:name];
  if (m == nil)
#line 744
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic2)) removeWithComItextpdfTextPdfPdfName:key];
  else
#line 746
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic2)) putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithComItextpdfTextRectangle:m]];
}


#line 749
- (void)replacePageWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)r
                                           withInt:(jint)pageImported
                                           withInt:(jint)pageReplaced {
  
#line 750
  ComItextpdfTextPdfPdfDictionary *pageN = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:pageReplaced];
  if ([((JavaUtilHashMap *) nil_chk(pagesToContent_)) containsKeyWithId:pageN])
#line 752
  @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"this.page.cannot.be.replaced.new.content.was.already.added" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPdfImportedPage *p = [self getImportedPageWithComItextpdfTextPdfPdfReader:r withInt:pageImported];
  ComItextpdfTextPdfPdfDictionary *dic2 = [reader_ getPageNReleaseWithInt:pageReplaced];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic2)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()];
  [dic2 removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()];
  [ComItextpdfTextPdfPdfStamperImp moveRectangleWithComItextpdfTextPdfPdfDictionary:dic2 withComItextpdfTextPdfPdfReader:r withInt:pageImported withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MEDIABOX_() withNSString:@"media"];
  [ComItextpdfTextPdfPdfStamperImp moveRectangleWithComItextpdfTextPdfPdfDictionary:dic2 withComItextpdfTextPdfPdfReader:r withInt:pageImported withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CROPBOX_() withNSString:@"crop"];
  [ComItextpdfTextPdfPdfStamperImp moveRectangleWithComItextpdfTextPdfPdfDictionary:dic2 withComItextpdfTextPdfPdfReader:r withInt:pageImported withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRIMBOX_() withNSString:@"trim"];
  [ComItextpdfTextPdfPdfStamperImp moveRectangleWithComItextpdfTextPdfPdfDictionary:dic2 withComItextpdfTextPdfPdfReader:r withInt:pageImported withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ARTBOX_() withNSString:@"art"];
  [ComItextpdfTextPdfPdfStamperImp moveRectangleWithComItextpdfTextPdfPdfDictionary:dic2 withComItextpdfTextPdfPdfReader:r withInt:pageImported withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BLEEDBOX_() withNSString:@"bleed"];
  [dic2 putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROTATE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[((ComItextpdfTextPdfPdfReader *) nil_chk(r)) getPageRotationWithInt:pageImported]]];
  ComItextpdfTextPdfPdfContentByte *cb = [self getOverContentWithInt:pageReplaced];
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) addTemplateWithComItextpdfTextPdfPdfTemplate:p withFloat:0 withFloat:0];
  ComItextpdfTextPdfPdfStamperImp_PageStamp *ps = [pagesToContent_ getWithId:pageN];
  ((ComItextpdfTextPdfPdfStamperImp_PageStamp *) nil_chk(ps))->replacePoint_ = [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfStampContent *) nil_chk(ps->over_)) getInternalBuffer])) size];
}


#line 769
- (void)insertPageWithInt:(jint)pageNumber
withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)mediabox {
  
#line 770
  ComItextpdfTextRectangle *media = [[ComItextpdfTextRectangle alloc] initWithComItextpdfTextRectangle:mediabox];
  jint rotation = [media getRotation] % 360;
  ComItextpdfTextPdfPdfDictionary *page = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PAGE_()];
  [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfDictionary alloc] init]];
  [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROTATE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:rotation]];
  [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MEDIABOX_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithComItextpdfTextRectangle:media withInt:rotation]];
  ComItextpdfTextPdfPRIndirectReference *pref = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) addPdfObjectWithComItextpdfTextPdfPdfObject:page];
  ComItextpdfTextPdfPdfDictionary *parent;
  ComItextpdfTextPdfPRIndirectReference *parentRef;
  if (pageNumber > [reader_ getNumberOfPages]) {
    ComItextpdfTextPdfPdfDictionary *lastPage = [reader_ getPageNReleaseWithInt:[reader_ getNumberOfPages]];
    parentRef = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(lastPage)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()], [ComItextpdfTextPdfPRIndirectReference class]);
    parentRef = [[ComItextpdfTextPdfPRIndirectReference alloc] initWithComItextpdfTextPdfPdfReader:reader_ withInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(parentRef)) getNumber]];
    parent = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:parentRef], [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfArray *kids = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(parent)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()] withComItextpdfTextPdfPdfObject:parent], [ComItextpdfTextPdfPdfArray class]);
    [((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) addWithComItextpdfTextPdfPdfObject:pref];
    [self markUsedWithComItextpdfTextPdfPdfObject:kids];
    [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(reader_->pageRefs_)) insertPageWithInt:pageNumber withComItextpdfTextPdfPRIndirectReference:pref];
  }
  else {
    if (pageNumber < 1)
#line 791
    pageNumber = 1;
    ComItextpdfTextPdfPdfDictionary *firstPage = [reader_ getPageNWithInt:pageNumber];
    ComItextpdfTextPdfPRIndirectReference *firstPageRef = [reader_ getPageOrigRefWithInt:pageNumber];
    [reader_ releasePageWithInt:pageNumber];
    parentRef = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(firstPage)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()], [ComItextpdfTextPdfPRIndirectReference class]);
    parentRef = [[ComItextpdfTextPdfPRIndirectReference alloc] initWithComItextpdfTextPdfPdfReader:reader_ withInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(parentRef)) getNumber]];
    parent = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:parentRef], [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfArray *kids = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(parent)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()] withComItextpdfTextPdfPdfObject:parent], [ComItextpdfTextPdfPdfArray class]);
    jint len = [((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) size];
    jint num = [((ComItextpdfTextPdfPRIndirectReference *) nil_chk(firstPageRef)) getNumber];
    for (jint k = 0; k < len; ++k) {
      ComItextpdfTextPdfPRIndirectReference *cur = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([kids getPdfObjectWithInt:k], [ComItextpdfTextPdfPRIndirectReference class]);
      if (num == [((ComItextpdfTextPdfPRIndirectReference *) nil_chk(cur)) getNumber]) {
        [kids addWithInt:k withComItextpdfTextPdfPdfObject:pref];
        break;
      }
    }
    if (len == [kids size])
#line 809
    @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"internal.inconsistence" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    [self markUsedWithComItextpdfTextPdfPdfObject:kids];
    [((ComItextpdfTextPdfPdfReader_PageRefs *) nil_chk(reader_->pageRefs_)) insertPageWithInt:pageNumber withComItextpdfTextPdfPRIndirectReference:pref];
    [self correctAcroFieldPagesWithInt:pageNumber];
  }
  [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:parentRef];
  while (parent != nil) {
    [self markUsedWithComItextpdfTextPdfPdfObject:parent];
    ComItextpdfTextPdfPdfNumber *count = (ComItextpdfTextPdfPdfNumber *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(parent)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_()]], [ComItextpdfTextPdfPdfNumber class]);
    [parent putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COUNT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[((ComItextpdfTextPdfPdfNumber *) nil_chk(count)) intValue] + 1]];
    parent = [parent getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()];
  }
}


#line 827
- (jboolean)isRotateContents {
  return self->rotateContents_;
}


#line 835
- (void)setRotateContentsWithBoolean:(jboolean)rotateContents {
  
#line 836
  self->rotateContents_ = rotateContents;
}


#line 839
- (jboolean)isContentWritten {
  
#line 840
  return [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) size] > 1;
}


#line 843
- (ComItextpdfTextPdfAcroFields *)getAcroFields {
  
#line 844
  if (acroFields_ == nil) {
    acroFields_ = [[ComItextpdfTextPdfAcroFields alloc] initWithComItextpdfTextPdfPdfReader:reader_ withComItextpdfTextPdfPdfWriter:self];
    @try {
      for (NSString * __strong key in nil_chk([((id<JavaUtilMap>) nil_chk([acroFields_ getFields])) keySet])) {
        if (ComItextpdfTextPdfAcroFields_FIELD_TYPE_TEXT != [acroFields_ getFieldTypeWithNSString:key])
#line 849
        continue;
        NSString *value = [((NSString *) nil_chk([acroFields_ getFieldWithNSString:key])) trim];
        if (((jint) [((NSString *) nil_chk(value)) length]) > 0) {
          [acroFields_ setFieldWithNSString:key withNSString:value withNSString:value];
        }
      }
    }
    @catch (ComItextpdfTextDocumentException *de) {
    }
    @catch (
#line 859
    JavaIoIOException *ioe) {
    }
  }
  
#line 863
  return acroFields_;
}


#line 866
- (void)setFormFlatteningWithBoolean:(jboolean)flat {
  
#line 867
  self->flat_ = flat;
}


#line 870
- (void)setFreeTextFlatteningWithBoolean:(jboolean)flat {
  
#line 871
  self->flatFreeText_ = flat;
}


#line 874
- (jboolean)partialFormFlatteningWithNSString:(NSString *)name {
  
#line 875
  (void) [self getAcroFields];
  if (![((id<JavaUtilMap>) nil_chk([((ComItextpdfTextPdfAcroFields *) nil_chk(acroFields_)) getFields])) containsKeyWithId:name])
#line 877
  return NO;
  [((JavaUtilHashSet *) nil_chk(partialFlattening_)) addWithId:name];
  return YES;
}


#line 882
- (void)flatFields {
  
#line 883
  if (append_)
#line 884
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"field.flattening.is.not.supported.in.append.mode" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  (void) [self getAcroFields];
  id<JavaUtilMap> fields = [((ComItextpdfTextPdfAcroFields *) nil_chk(acroFields_)) getFields];
  if (fieldsAdded_ && [((JavaUtilHashSet *) nil_chk(partialFlattening_)) isEmpty]) {
    for (NSString * __strong s in nil_chk([((id<JavaUtilMap>) nil_chk(fields)) keySet])) {
      [partialFlattening_ addWithId:s];
    }
  }
  ComItextpdfTextPdfPdfDictionary *acroForm = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
  ComItextpdfTextPdfPdfArray *acroFds = nil;
  if (acroForm != nil) {
    acroFds = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[acroForm getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_()] withComItextpdfTextPdfPdfObject:acroForm], [ComItextpdfTextPdfPdfArray class]);
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(fields)) entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    if (![((JavaUtilHashSet *) nil_chk(partialFlattening_)) isEmpty] && ![partialFlattening_ containsWithId:name])
#line 900
    continue;
    ComItextpdfTextPdfAcroFields_Item *item = [entry_ getValue];
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      ComItextpdfTextPdfPdfDictionary *merged = [item getMergedWithInt:k];
      ComItextpdfTextPdfPdfNumber *ff = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()];
      jint flags = 0;
      if (ff != nil)
#line 907
      flags = [ff intValue];
      jint page = [((JavaLangInteger *) nil_chk([item getPageWithInt:k])) intValue];
      if (page < 1)
#line 910
      continue;
      ComItextpdfTextPdfPdfDictionary *appDic = [merged getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
      if (appDic != nil && (flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT) != 0 && (flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_HIDDEN) == 0) {
        ComItextpdfTextPdfPdfObject *obj = [appDic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_()];
        ComItextpdfTextPdfPdfAppearance *app = nil;
        if (obj != nil) {
          ComItextpdfTextPdfPdfObject *objReal = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj];
          if ([obj isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]] && ![obj isIndirect])
#line 918
          app = [[ComItextpdfTextPdfPdfAppearance alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])];
          else if ([objReal isKindOfClass:[ComItextpdfTextPdfPdfStream class]]) {
            [((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfDictionary *) check_class_cast(objReal, [ComItextpdfTextPdfPdfDictionary class])))) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_FORM_()];
            app = [[ComItextpdfTextPdfPdfAppearance alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])];
          }
          else {
            if (objReal != nil && [objReal isDictionary]) {
              ComItextpdfTextPdfPdfName *as = [merged getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()];
              if (as != nil) {
                ComItextpdfTextPdfPdfIndirectReference *iref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) check_class_cast(objReal, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:as], [ComItextpdfTextPdfPdfIndirectReference class]);
                if (iref != nil) {
                  app = [[ComItextpdfTextPdfPdfAppearance alloc] initWithComItextpdfTextPdfPdfIndirectReference:iref];
                  if ([iref isIndirect]) {
                    objReal = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:iref];
                    [((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfDictionary *) check_class_cast(objReal, [ComItextpdfTextPdfPdfDictionary class])))) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_FORM_()];
                  }
                }
              }
            }
          }
        }
        if (app != nil) {
          ComItextpdfTextRectangle *box = [ComItextpdfTextPdfPdfReader getNormalizedRectangleWithComItextpdfTextPdfPdfArray:[merged getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_()]];
          ComItextpdfTextPdfPdfContentByte *cb = [self getOverContentWithInt:page];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) setLiteralWithNSString:@"Q "];
          [cb addTemplateWithComItextpdfTextPdfPdfTemplate:app withFloat:[((ComItextpdfTextRectangle *) nil_chk(box)) getLeft] withFloat:[box getBottom]];
          [cb setLiteralWithNSString:@"q "];
        }
      }
      if ([partialFlattening_ isEmpty])
#line 948
      continue;
      ComItextpdfTextPdfPdfDictionary *pageDic = [reader_ getPageNWithInt:page];
      ComItextpdfTextPdfPdfArray *annots = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
      if (annots == nil)
#line 952
      continue;
      for (jint idx = 0; idx < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++idx) {
        ComItextpdfTextPdfPdfObject *ran = [annots getPdfObjectWithInt:idx];
        if (![((ComItextpdfTextPdfPdfObject *) nil_chk(ran)) isIndirect])
#line 956
        continue;
        ComItextpdfTextPdfPdfObject *ran2 = [item getWidgetRefWithInt:k];
        if (![((ComItextpdfTextPdfPdfObject *) nil_chk(ran2)) isIndirect])
#line 959
        continue;
        if ([((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(ran, [ComItextpdfTextPdfPRIndirectReference class])) getNumber] == [((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(ran2, [ComItextpdfTextPdfPRIndirectReference class])) getNumber]) {
          (void) [annots removeWithInt:idx--];
          ComItextpdfTextPdfPRIndirectReference *wdref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(ran2, [ComItextpdfTextPdfPRIndirectReference class]);
          while (YES) {
            ComItextpdfTextPdfPdfDictionary *wd = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:wdref], [ComItextpdfTextPdfPdfDictionary class]);
            ComItextpdfTextPdfPRIndirectReference *parentRef = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(wd)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()], [ComItextpdfTextPdfPRIndirectReference class]);
            (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:wdref];
            if (parentRef == nil) {
              for (jint fr = 0; fr < [((ComItextpdfTextPdfPdfArray *) nil_chk(acroFds)) size]; ++fr) {
                ComItextpdfTextPdfPdfObject *h = [acroFds getPdfObjectWithInt:fr];
                if ([((ComItextpdfTextPdfPdfObject *) nil_chk(h)) isIndirect] && [((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(h, [ComItextpdfTextPdfPRIndirectReference class])) getNumber] == [wdref getNumber]) {
                  (void) [acroFds removeWithInt:fr];
                  --fr;
                }
              }
              break;
            }
            ComItextpdfTextPdfPdfDictionary *parent = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:parentRef], [ComItextpdfTextPdfPdfDictionary class]);
            ComItextpdfTextPdfPdfArray *kids = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(parent)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()];
            for (jint fr = 0; fr < [((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) size]; ++fr) {
              ComItextpdfTextPdfPdfObject *h = [kids getPdfObjectWithInt:fr];
              if ([((ComItextpdfTextPdfPdfObject *) nil_chk(h)) isIndirect] && [((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(h, [ComItextpdfTextPdfPRIndirectReference class])) getNumber] == [wdref getNumber]) {
                (void) [kids removeWithInt:fr];
                --fr;
              }
            }
            if (![kids isEmpty])
#line 987
            break;
            wdref = parentRef;
          }
        }
      }
      if ([annots isEmpty]) {
        (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:[pageDic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()]];
        [pageDic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
      }
    }
  }
  if (!fieldsAdded_ && [((JavaUtilHashSet *) nil_chk(partialFlattening_)) isEmpty]) {
    for (jint page = 1; page <= [reader_ getNumberOfPages]; ++page) {
      ComItextpdfTextPdfPdfDictionary *pageDic = [reader_ getPageNWithInt:page];
      ComItextpdfTextPdfPdfArray *annots = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
      if (annots == nil)
#line 1003
      continue;
      for (jint idx = 0; idx < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++idx) {
        ComItextpdfTextPdfPdfObject *annoto = [annots getDirectObjectWithInt:idx];
        if ([annoto isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]] && ![((ComItextpdfTextPdfPdfObject *) nil_chk(annoto)) isIndirect])
#line 1007
        continue;
        if (![((ComItextpdfTextPdfPdfObject *) nil_chk(annoto)) isDictionary] || [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_WIDGET_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(annoto, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()]]) {
          (void) [annots removeWithInt:idx];
          --idx;
        }
      }
      if ([annots isEmpty]) {
        (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:[pageDic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()]];
        [pageDic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
      }
    }
    [self eliminateAcroformObjects];
  }
}


#line 1022
- (void)eliminateAcroformObjects {
  
#line 1023
  ComItextpdfTextPdfPdfObject *acro = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
  if (acro == nil)
#line 1025
  return;
  ComItextpdfTextPdfPdfDictionary *acrodic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:acro], [ComItextpdfTextPdfPdfDictionary class]);
  [reader_ killXrefWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(acrodic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XFA_()]];
  [acrodic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XFA_()];
  ComItextpdfTextPdfPdfObject *iFields = [acrodic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_()];
  if (iFields != nil) {
    ComItextpdfTextPdfPdfDictionary *kids = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [kids putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:iFields];
    [self sweepKidsWithComItextpdfTextPdfPdfObject:kids];
    (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:iFields];
    [acrodic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] init]];
  }
  [acrodic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIGFLAGS_()];
  [acrodic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEEDAPPEARANCES_()];
  [acrodic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_()];
}


#line 1044
- (void)sweepKidsWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  ComItextpdfTextPdfPdfObject *oo = [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:obj];
  if (oo == nil || ![oo isDictionary])
#line 1047
  return;
  ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(oo, [ComItextpdfTextPdfPdfDictionary class]);
  ComItextpdfTextPdfPdfArray *kids = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()]], [ComItextpdfTextPdfPdfArray class]);
  if (kids == nil)
#line 1051
  return;
  for (jint k = 0; k < [((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) size]; ++k) {
    [self sweepKidsWithComItextpdfTextPdfPdfObject:[kids getPdfObjectWithInt:k]];
  }
}


#line 1057
- (void)flatFreeTextFields {
  if (append_)
#line 1060
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"freetext.flattening.is.not.supported.in.append.mode" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 1062
  for (jint page = 1; page <= [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getNumberOfPages]; ++page) {
    
#line 1064
    ComItextpdfTextPdfPdfDictionary *pageDic = [reader_ getPageNWithInt:page];
    ComItextpdfTextPdfPdfArray *annots = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
    if (annots == nil)
#line 1067
    continue;
    for (jint idx = 0; idx < [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size]; ++idx) {
      
#line 1070
      ComItextpdfTextPdfPdfObject *annoto = [annots getDirectObjectWithInt:idx];
      if ([annoto isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]] && ![((ComItextpdfTextPdfPdfObject *) nil_chk(annoto)) isIndirect])
#line 1072
      continue;
      
#line 1074
      ComItextpdfTextPdfPdfDictionary *annDic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(annoto, [ComItextpdfTextPdfPdfDictionary class]);
      if (![((ComItextpdfTextPdfPdfName *) nil_chk(((ComItextpdfTextPdfPdfName *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(annDic)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()], [ComItextpdfTextPdfPdfName class])))) isEqual:ComItextpdfTextPdfPdfName_get_FREETEXT_()])
#line 1076
      continue;
      ComItextpdfTextPdfPdfNumber *ff = [annDic getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_F_()];
      jint flags = ff != nil ? [ff intValue] : 0;
      
#line 1080
      if ((flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT) != 0 && (flags & ComItextpdfTextPdfPdfAnnotation_FLAGS_HIDDEN) == 0) {
        
#line 1082
        ComItextpdfTextPdfPdfObject *obj1 = [annDic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
        if (obj1 == nil)
#line 1084
        continue;
        ComItextpdfTextPdfPdfDictionary *appDic = [obj1 isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]] ?
#line 1086
        (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj1], [ComItextpdfTextPdfPdfDictionary class]) : (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj1, [ComItextpdfTextPdfPdfDictionary class]);
        ComItextpdfTextPdfPdfObject *obj = [appDic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_()];
        ComItextpdfTextPdfPdfAppearance *app = nil;
        ComItextpdfTextPdfPdfObject *objReal = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj];
        
#line 1091
        if ([obj isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]] && ![((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect])
#line 1092
        app = [[ComItextpdfTextPdfPdfAppearance alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])];
        else if ([objReal isKindOfClass:[ComItextpdfTextPdfPdfStream class]]) {
          
#line 1095
          [((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfDictionary *) check_class_cast(objReal, [ComItextpdfTextPdfPdfDictionary class])))) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_FORM_()];
          app = [[ComItextpdfTextPdfPdfAppearance alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])];
        }
        else {
          
#line 1100
          if ([((ComItextpdfTextPdfPdfObject *) nil_chk(objReal)) isDictionary]) {
            
#line 1102
            ComItextpdfTextPdfPdfName *as_p = [appDic getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()];
            if (as_p != nil) {
              
#line 1105
              ComItextpdfTextPdfPdfIndirectReference *iref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) check_class_cast(objReal, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:as_p], [ComItextpdfTextPdfPdfIndirectReference class]);
              if (iref != nil) {
                
#line 1108
                app = [[ComItextpdfTextPdfPdfAppearance alloc] initWithComItextpdfTextPdfPdfIndirectReference:iref];
                if ([iref isIndirect]) {
                  
#line 1111
                  objReal = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:iref];
                  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfDictionary *) check_class_cast(objReal, [ComItextpdfTextPdfPdfDictionary class])))) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_FORM_()];
                }
              }
            }
          }
        }
        if (app != nil) {
          
#line 1120
          ComItextpdfTextRectangle *box = [ComItextpdfTextPdfPdfReader getNormalizedRectangleWithComItextpdfTextPdfPdfArray:[annDic getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_()]];
          ComItextpdfTextPdfPdfContentByte *cb = [self getOverContentWithInt:page];
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) setLiteralWithNSString:@"Q "];
          [cb addTemplateWithComItextpdfTextPdfPdfTemplate:app withFloat:[((ComItextpdfTextRectangle *) nil_chk(box)) getLeft] withFloat:[box getBottom]];
          [cb setLiteralWithNSString:@"q "];
        }
      }
    }
    for (jint idx = 0; idx < [annots size]; ++idx) {
      
#line 1130
      ComItextpdfTextPdfPdfDictionary *annot = [annots getAsDictWithInt:idx];
      if (annot != nil) {
        
#line 1133
        if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_FREETEXT_())) isEqual:[annot getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()]]) {
          
#line 1135
          (void) [annots removeWithInt:idx];
          --idx;
        }
      }
    }
    if ([annots isEmpty]) {
      
#line 1142
      (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:[pageDic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()]];
      [pageDic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
    }
  }
}


#line 1152
- (ComItextpdfTextPdfPdfIndirectReference *)getPageReferenceWithInt:(jint)page {
  
#line 1153
  ComItextpdfTextPdfPdfIndirectReference *ref = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageOrigRefWithInt:page];
  if (ref == nil)
#line 1155
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.page.number.1" withInt:page]];
  return ref;
}


#line 1163
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
  
#line 1164
  @throw [[JavaLangRuntimeException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"unsupported.in.this.context.use.pdfstamper.addannotation" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 1167
- (void)addDocumentFieldWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
  
#line 1168
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *acroForm = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()] withComItextpdfTextPdfPdfObject:catalog], [ComItextpdfTextPdfPdfDictionary class]);
  if (acroForm == nil) {
    acroForm = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_() withComItextpdfTextPdfPdfObject:acroForm];
    [self markUsedWithComItextpdfTextPdfPdfObject:catalog];
  }
  ComItextpdfTextPdfPdfArray *fields = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(acroForm)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_()] withComItextpdfTextPdfPdfObject:acroForm], [ComItextpdfTextPdfPdfArray class]);
  if (fields == nil) {
    fields = [[ComItextpdfTextPdfPdfArray alloc] init];
    [acroForm putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_() withComItextpdfTextPdfPdfObject:fields];
    [self markUsedWithComItextpdfTextPdfPdfObject:acroForm];
  }
  if (![acroForm containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_()]) {
    [acroForm putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"/Helv 0 Tf 0 g "]];
    [self markUsedWithComItextpdfTextPdfPdfObject:acroForm];
  }
  [((ComItextpdfTextPdfPdfArray *) nil_chk(fields)) addWithComItextpdfTextPdfPdfObject:ref];
  [self markUsedWithComItextpdfTextPdfPdfObject:fields];
}


#line 1189
- (void)addFieldResources {
  
#line 1190
  if ([((JavaUtilHashSet *) nil_chk(fieldTemplates_)) isEmpty])
#line 1191
  return;
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *acroForm = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()] withComItextpdfTextPdfPdfObject:catalog], [ComItextpdfTextPdfPdfDictionary class]);
  if (acroForm == nil) {
    acroForm = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_() withComItextpdfTextPdfPdfObject:acroForm];
    [self markUsedWithComItextpdfTextPdfPdfObject:catalog];
  }
  ComItextpdfTextPdfPdfDictionary *dr = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(acroForm)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_()] withComItextpdfTextPdfPdfObject:acroForm], [ComItextpdfTextPdfPdfDictionary class]);
  if (dr == nil) {
    dr = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [acroForm putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_() withComItextpdfTextPdfPdfObject:dr];
    [self markUsedWithComItextpdfTextPdfPdfObject:acroForm];
  }
  [self markUsedWithComItextpdfTextPdfPdfObject:dr];
  for (ComItextpdfTextPdfPdfTemplate * __strong template_ in fieldTemplates_) {
    [ComItextpdfTextPdfPdfFormField mergeResourcesWithComItextpdfTextPdfPdfDictionary:dr withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([((ComItextpdfTextPdfPdfTemplate *) nil_chk(template_)) getResources], [ComItextpdfTextPdfPdfDictionary class]) withComItextpdfTextPdfPdfStamperImp:self];
  }
  
#line 1210
  ComItextpdfTextPdfPdfDictionary *fonts = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dr)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  if (fonts == nil) {
    fonts = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [dr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_() withComItextpdfTextPdfPdfObject:fonts];
  }
  if (![((ComItextpdfTextPdfPdfDictionary *) nil_chk(fonts)) containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HELV_()]) {
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_HELVETICA_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_WIN_ANSI_ENCODING_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAME_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_HELV_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TYPE1_()];
    [fonts putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HELV_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:dic])) getIndirectReference]];
  }
  if (![fonts containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ZADB_()]) {
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ZAPFDINGBATS_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAME_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ZADB_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TYPE1_()];
    [fonts putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ZADB_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:dic])) getIndirectReference]];
  }
  if ([acroForm getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_()] == nil) {
    [acroForm putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"/Helv 0 Tf 0 g "]];
    [self markUsedWithComItextpdfTextPdfPdfObject:acroForm];
  }
}


#line 1236
- (void)expandFieldsWithComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)field
                                 withJavaUtilArrayList:(JavaUtilArrayList *)allAnnots {
  
#line 1237
  [((JavaUtilArrayList *) nil_chk(allAnnots)) addWithId:field];
  JavaUtilArrayList *kids = [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) getKids];
  if (kids != nil) {
    for (jint k = 0; k < [kids size]; ++k)
#line 1241
    [self expandFieldsWithComItextpdfTextPdfPdfFormField:[kids getWithInt:k] withJavaUtilArrayList:allAnnots];
  }
}


#line 1245
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot
                     withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)pageN {
  
#line 1246
  @try {
    JavaUtilArrayList *allAnnots = [[JavaUtilArrayList alloc] init];
    if ([((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) isForm]) {
      fieldsAdded_ = YES;
      (void) [self getAcroFields];
      ComItextpdfTextPdfPdfFormField *field = (ComItextpdfTextPdfPdfFormField *) check_class_cast(annot, [ComItextpdfTextPdfPdfFormField class]);
      if ([field getParent] != nil)
#line 1253
      return;
      [self expandFieldsWithComItextpdfTextPdfPdfFormField:field withJavaUtilArrayList:allAnnots];
    }
    else
#line 1257
    [allAnnots addWithId:annot];
    for (jint k = 0; k < [allAnnots size]; ++k) {
      annot = [allAnnots getWithInt:k];
      if ([((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) getPlaceInPage] > 0)
#line 1261
      pageN = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:[annot getPlaceInPage]];
      if ([annot isForm]) {
        if (![annot isUsed]) {
          JavaUtilHashSet *templates = [annot getTemplates];
          if (templates != nil)
#line 1266
          [((JavaUtilHashSet *) nil_chk(fieldTemplates_)) addAllWithJavaUtilCollection:templates];
        }
        ComItextpdfTextPdfPdfFormField *field = (ComItextpdfTextPdfPdfFormField *) check_class_cast(annot, [ComItextpdfTextPdfPdfFormField class]);
        if ([field getParent] == nil)
#line 1270
        [self addDocumentFieldWithComItextpdfTextPdfPdfIndirectReference:[field getIndirectReference]];
      }
      if ([annot isAnnotation]) {
        ComItextpdfTextPdfPdfObject *pdfobj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageN)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()] withComItextpdfTextPdfPdfObject:pageN];
        ComItextpdfTextPdfPdfArray *annots = nil;
        if (pdfobj == nil || ![pdfobj isArray]) {
          annots = [[ComItextpdfTextPdfPdfArray alloc] init];
          [pageN putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_() withComItextpdfTextPdfPdfObject:annots];
          [self markUsedWithComItextpdfTextPdfPdfObject:pageN];
        }
        else
#line 1281
        annots = (ComItextpdfTextPdfPdfArray *) check_class_cast(pdfobj, [ComItextpdfTextPdfPdfArray class]);
        [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) addWithComItextpdfTextPdfPdfObject:[annot getIndirectReference]];
        [self markUsedWithComItextpdfTextPdfPdfObject:annots];
        if (![annot isUsed]) {
          ComItextpdfTextPdfPdfRectangle *rect = (ComItextpdfTextPdfPdfRectangle *) check_class_cast([annot getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_()], [ComItextpdfTextPdfPdfRectangle class]);
          if (rect != nil && ([rect left] != 0 || [rect right] != 0 || [rect top] != 0 || [rect bottom] != 0)) {
            jint rotation = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageRotationWithComItextpdfTextPdfPdfDictionary:pageN];
            ComItextpdfTextRectangle *pageSize = [reader_ getPageSizeWithRotationWithComItextpdfTextPdfPdfDictionary:pageN];
            switch (rotation) {
              case 90:
              [annot putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 1292
              [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getTop] - [rect top] withFloat:
#line 1293
              [rect right] withFloat:
#line 1294
              [pageSize getTop] - [rect bottom] withFloat:
#line 1295
              [rect left]]];
              break;
              case 180:
              [annot putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 1299
              [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [rect left] withFloat:
#line 1300
              [pageSize getTop] - [rect bottom] withFloat:
#line 1301
              [pageSize getRight] - [rect right] withFloat:
#line 1302
              [pageSize getTop] - [rect top]]];
              break;
              case 270:
              [annot putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 1306
              [rect bottom] withFloat:
#line 1307
              [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [rect left] withFloat:
#line 1308
              [rect top] withFloat:
#line 1309
              [pageSize getRight] - [rect right]]];
              break;
            }
          }
        }
      }
      if (![annot isUsed]) {
        [annot setUsed];
        (void) [self addToBodyWithComItextpdfTextPdfPdfObject:annot withComItextpdfTextPdfPdfIndirectReference:[annot getIndirectReference]];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 1327
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot
                                                 withInt:(jint)page {
  
#line 1328
  [((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) setPageWithInt:page];
  [self addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot withComItextpdfTextPdfPdfDictionary:[((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:page]];
}


#line 1332
- (void)outlineTravelWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)outline {
  
#line 1333
  while (outline != nil) {
    ComItextpdfTextPdfPdfDictionary *outlineR = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:outline], [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPRIndirectReference *first = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(outlineR)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIRST_()], [ComItextpdfTextPdfPRIndirectReference class]);
    if (first != nil) {
      [self outlineTravelWithComItextpdfTextPdfPRIndirectReference:first];
    }
    (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:[outlineR getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEST_()]];
    (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:[outlineR getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_()]];
    (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:outline];
    outline = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([outlineR getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEXT_()], [ComItextpdfTextPdfPRIndirectReference class]);
  }
}


#line 1346
- (void)deleteOutlines {
  
#line 1347
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  ComItextpdfTextPdfPdfObject *obj = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTLINES_()];
  if (obj == nil)
#line 1350
  return;
  if ([obj isKindOfClass:[ComItextpdfTextPdfPRIndirectReference class]]) {
    ComItextpdfTextPdfPRIndirectReference *outlines = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class]);
    [self outlineTravelWithComItextpdfTextPdfPRIndirectReference:outlines];
    (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:outlines];
  }
  [catalog removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OUTLINES_()];
  [self markUsedWithComItextpdfTextPdfPdfObject:catalog];
}


#line 1360
- (void)setJavaScript {
  
#line 1361
  JavaUtilHashMap *djs = [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getDocumentLevelJS];
  if ([((JavaUtilHashMap *) nil_chk(djs)) isEmpty])
#line 1363
  return;
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *names = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_()] withComItextpdfTextPdfPdfObject:catalog], [ComItextpdfTextPdfPdfDictionary class]);
  if (names == nil) {
    names = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_() withComItextpdfTextPdfPdfObject:names];
    [self markUsedWithComItextpdfTextPdfPdfObject:catalog];
  }
  [self markUsedWithComItextpdfTextPdfPdfObject:names];
  ComItextpdfTextPdfPdfDictionary *tree = [ComItextpdfTextPdfPdfNameTree writeTreeWithJavaUtilHashMap:djs withComItextpdfTextPdfPdfWriter:self];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(names)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_JAVASCRIPT_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:tree])) getIndirectReference]];
}


#line 1376
- (void)addFileAttachments {
  
#line 1377
  JavaUtilHashMap *fs = [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getDocumentFileAttachment];
  if ([((JavaUtilHashMap *) nil_chk(fs)) isEmpty])
#line 1379
  return;
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *names = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_()] withComItextpdfTextPdfPdfObject:catalog], [ComItextpdfTextPdfPdfDictionary class]);
  if (names == nil) {
    names = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [catalog putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAMES_() withComItextpdfTextPdfPdfObject:names];
    [self markUsedWithComItextpdfTextPdfPdfObject:catalog];
  }
  [self markUsedWithComItextpdfTextPdfPdfObject:names];
  JavaUtilHashMap *old = [ComItextpdfTextPdfPdfNameTree readTreeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(names)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EMBEDDEDFILES_()]], [ComItextpdfTextPdfPdfDictionary class])];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([fs entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    jint k = 0;
    JavaLangStringBuilder *nn = [[JavaLangStringBuilder alloc] initWithNSString:name];
    while ([((JavaUtilHashMap *) nil_chk(old)) containsKeyWithId:[nn description]]) {
      ++k;
      (void) [((JavaLangStringBuilder *) nil_chk([nn appendWithNSString:@" "])) appendWithInt:k];
    }
    (void) [old putWithId:[nn description] withId:[entry_ getValue]];
  }
  ComItextpdfTextPdfPdfDictionary *tree = [ComItextpdfTextPdfPdfNameTree writeTreeWithJavaUtilHashMap:old withComItextpdfTextPdfPdfWriter:self];
  
#line 1401
  ComItextpdfTextPdfPdfObject *oldEmbeddedFiles = [names getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EMBEDDEDFILES_()];
  if (oldEmbeddedFiles != nil) {
    (void) [ComItextpdfTextPdfPdfReader killIndirectWithComItextpdfTextPdfPdfObject:oldEmbeddedFiles];
  }
  
#line 1407
  [names putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EMBEDDEDFILES_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:tree])) getIndirectReference]];
}

- (void)makePackageWithComItextpdfTextPdfCollectionPdfCollection:(ComItextpdfTextPdfCollectionPdfCollection *)collection {
  
#line 1415
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLLECTION_() withComItextpdfTextPdfPdfObject:collection];
}


#line 1419
- (void)setOutlines {
  
#line 1420
  if (newBookmarks_ == nil)
#line 1421
  return;
  [self deleteOutlines];
  if ([((id<JavaUtilList>) nil_chk(newBookmarks_)) isEmpty])
#line 1424
  return;
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog];
  jboolean namedAsNames = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DESTS_()] != nil;
  [self writeOutlinesWithComItextpdfTextPdfPdfDictionary:catalog withBoolean:namedAsNames];
  [self markUsedWithComItextpdfTextPdfPdfObject:catalog];
}


#line 1437
- (void)setViewerPreferencesWithInt:(jint)preferences {
  
#line 1438
  useVp_ = YES;
  [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) setViewerPreferencesWithInt:preferences];
}


#line 1448
- (void)addViewerPreferenceWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                         withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 1449
  useVp_ = YES;
  [((ComItextpdfTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) addViewerPreferenceWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
}


#line 1458
- (void)setSigFlagsWithInt:(jint)f {
  
#line 1459
  sigFlags_ |= f;
}


#line 1469
- (void)setPageActionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)actionType
                   withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 1470
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"use.setpageaction.pdfname.actiontype.pdfaction.action.int.page" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 1481
- (void)setPageActionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)actionType
                   withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action
                                           withInt:(jint)page {
  
#line 1482
  if (![((ComItextpdfTextPdfPdfName *) nil_chk(actionType)) isEqual:ComItextpdfTextPdfPdfWriter_get_PAGE_OPEN_()] && ![actionType isEqual:ComItextpdfTextPdfPdfWriter_get_PAGE_CLOSE_()])
#line 1483
  @throw [[ComItextpdfTextPdfPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.page.additional.action.type.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [actionType description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPdfDictionary *pg = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:page];
  ComItextpdfTextPdfPdfDictionary *aa = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(pg)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AA_()] withComItextpdfTextPdfPdfObject:pg], [ComItextpdfTextPdfPdfDictionary class]);
  if (aa == nil) {
    aa = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [pg putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AA_() withComItextpdfTextPdfPdfObject:aa];
    [self markUsedWithComItextpdfTextPdfPdfObject:pg];
  }
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(aa)) putWithComItextpdfTextPdfPdfName:actionType withComItextpdfTextPdfPdfObject:action];
  [self markUsedWithComItextpdfTextPdfPdfObject:aa];
}

- (void)setDurationWithInt:(jint)seconds {
  
#line 1501
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"use.setpageaction.pdfname.actiontype.pdfaction.action.int.page" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 1509
- (void)setTransitionWithComItextpdfTextPdfPdfTransition:(ComItextpdfTextPdfPdfTransition *)transition {
  
#line 1510
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"use.setpageaction.pdfname.actiontype.pdfaction.action.int.page" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 1518
- (void)setDurationWithInt:(jint)seconds
                   withInt:(jint)page {
  
#line 1519
  ComItextpdfTextPdfPdfDictionary *pg = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:page];
  if (seconds < 0)
#line 1521
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pg)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DUR_()];
  else
#line 1523
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pg)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DUR_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:seconds]];
  [self markUsedWithComItextpdfTextPdfPdfObject:pg];
}

- (void)setTransitionWithComItextpdfTextPdfPdfTransition:(ComItextpdfTextPdfPdfTransition *)transition
                                                 withInt:(jint)page {
  
#line 1533
  ComItextpdfTextPdfPdfDictionary *pg = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:page];
  if (transition == nil)
#line 1535
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pg)) removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANS_()];
  else
#line 1537
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pg)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TRANS_() withComItextpdfTextPdfPdfObject:[transition getTransitionDictionary]];
  [self markUsedWithComItextpdfTextPdfPdfObject:pg];
}


#line 1541
- (void)markUsedWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 1542
  if (append_ && obj != nil) {
    ComItextpdfTextPdfPRIndirectReference *ref = nil;
    if ([obj type] == ComItextpdfTextPdfPdfObject_INDIRECT)
#line 1545
    ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class]);
    else
#line 1547
    ref = [obj getIndRef];
    if (ref != nil)
#line 1549
    [((ComItextpdfTextPdfIntHashtable *) nil_chk(marked_)) putWithInt:[ref getNumber] withInt:1];
  }
}


#line 1553
- (void)markUsedWithInt:(jint)num {
  
#line 1554
  if (append_)
#line 1555
  [((ComItextpdfTextPdfIntHashtable *) nil_chk(marked_)) putWithInt:num withInt:1];
}


#line 1562
- (jboolean)isAppend {
  
#line 1563
  return append_;
}


#line 1577
- (void)setAdditionalActionWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)actionType
                         withComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 1578
  if (!([((ComItextpdfTextPdfPdfName *) nil_chk(actionType)) isEqual:ComItextpdfTextPdfPdfWriter_get_DOCUMENT_CLOSE_()] ||
#line 1579
  [actionType isEqual:ComItextpdfTextPdfPdfWriter_get_WILL_SAVE_()] ||
#line 1580
  [actionType isEqual:ComItextpdfTextPdfPdfWriter_get_DID_SAVE_()] ||
#line 1581
  [actionType isEqual:ComItextpdfTextPdfPdfWriter_get_WILL_PRINT_()] ||
#line 1582
  [actionType isEqual:ComItextpdfTextPdfPdfWriter_get_DID_PRINT_()])) {
    @throw [[ComItextpdfTextPdfPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.additional.action.type.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [actionType description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  ComItextpdfTextPdfPdfDictionary *aa = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AA_()];
  if (aa == nil) {
    if (action == nil)
#line 1588
    return;
    aa = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [((ComItextpdfTextPdfPdfDictionary *) nil_chk([reader_ getCatalog])) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AA_() withComItextpdfTextPdfPdfObject:aa];
  }
  [self markUsedWithComItextpdfTextPdfPdfObject:aa];
  if (action == nil)
#line 1594
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(aa)) removeWithComItextpdfTextPdfPdfName:actionType];
  else
#line 1596
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(aa)) putWithComItextpdfTextPdfPdfName:actionType withComItextpdfTextPdfPdfObject:action];
}


#line 1603
- (void)setOpenActionWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 1604
  openAction_ = action;
}


#line 1611
- (void)setOpenActionWithNSString:(NSString *)name {
  
#line 1612
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"open.actions.by.name.are.not.supported" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 1619
- (void)setThumbnailWithComItextpdfTextImage:(ComItextpdfTextImage *)image {
  
#line 1620
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"use.pdfstamper.setthumbnail" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 1623
- (void)setThumbnailWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                                     withInt:(jint)page {
  
#line 1624
  ComItextpdfTextPdfPdfIndirectReference *thumb = [self getImageReferenceWithComItextpdfTextPdfPdfName:[self addDirectImageSimpleWithComItextpdfTextImage:image]];
  [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) resetReleasePage];
  ComItextpdfTextPdfPdfDictionary *dic = [reader_ getPageNWithInt:page];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_THUMB_() withComItextpdfTextPdfPdfObject:thumb];
  [reader_ resetReleasePage];
}


#line 1632
- (ComItextpdfTextPdfPdfContentByte *)getDirectContentUnder {
  
#line 1633
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"use.pdfstamper.getundercontent.or.pdfstamper.getovercontent" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 1637
- (ComItextpdfTextPdfPdfContentByte *)getDirectContent {
  @throw [[JavaLangUnsupportedOperationException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"use.pdfstamper.getundercontent.or.pdfstamper.getovercontent" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 1647
- (void)readOCProperties {
  
#line 1648
  if (![((JavaUtilHashSet *) nil_chk(documentOCG_)) isEmpty]) {
    return;
  }
  ComItextpdfTextPdfPdfDictionary *dict = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getCatalog])) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCPROPERTIES_()];
  if (dict == nil) {
    return;
  }
  ComItextpdfTextPdfPdfArray *ocgs = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dict)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OCGS_()];
  ComItextpdfTextPdfPdfIndirectReference *ref;
  ComItextpdfTextPdfPdfLayer *layer;
  JavaUtilHashMap *ocgmap = [[JavaUtilHashMap alloc] init];
  for (id<JavaUtilIterator> i = [((ComItextpdfTextPdfPdfArray *) nil_chk(ocgs)) listIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([i next], [ComItextpdfTextPdfPdfIndirectReference class]);
    layer = [[ComItextpdfTextPdfPdfLayer alloc] initWithNSString:nil];
    [layer setRefWithComItextpdfTextPdfPdfIndirectReference:ref];
    [layer setOnPanelWithBoolean:NO];
    [layer mergeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:ref], [ComItextpdfTextPdfPdfDictionary class])];
    (void) [ocgmap putWithId:[((ComItextpdfTextPdfPdfIndirectReference *) nil_chk(ref)) description] withId:layer];
  }
  ComItextpdfTextPdfPdfDictionary *d = [dict getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_D_()];
  ComItextpdfTextPdfPdfArray *off = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(d)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_OFF_()];
  if (off != nil) {
    for (id<JavaUtilIterator> i = [off listIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
      ref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([i next], [ComItextpdfTextPdfPdfIndirectReference class]);
      layer = [ocgmap getWithId:[((ComItextpdfTextPdfPdfIndirectReference *) nil_chk(ref)) description]];
      [((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) setOnWithBoolean:NO];
    }
  }
  ComItextpdfTextPdfPdfArray *order = [d getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ORDER_()];
  if (order != nil) {
    [self addOrderWithComItextpdfTextPdfPdfLayer:nil withComItextpdfTextPdfPdfArray:order withJavaUtilMap:ocgmap];
  }
  [documentOCG_ addAllWithJavaUtilCollection:[ocgmap values]];
  OCGRadioGroup_ = [d getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RBGROUPS_()];
  if (OCGRadioGroup_ == nil)
#line 1683
  OCGRadioGroup_ = [[ComItextpdfTextPdfPdfArray alloc] init];
  OCGLocked_ = [d getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LOCKED_()];
  if (OCGLocked_ == nil)
#line 1686
  OCGLocked_ = [[ComItextpdfTextPdfPdfArray alloc] init];
}


#line 1696
- (void)addOrderWithComItextpdfTextPdfPdfLayer:(ComItextpdfTextPdfPdfLayer *)parent
                withComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)arr
                               withJavaUtilMap:(id<JavaUtilMap>)ocgmap {
  
#line 1697
  ComItextpdfTextPdfPdfObject *obj;
  ComItextpdfTextPdfPdfLayer *layer;
  for (jint i = 0; i < [((ComItextpdfTextPdfPdfArray *) nil_chk(arr)) size]; i++) {
    obj = [arr getPdfObjectWithInt:i];
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect]) {
      layer = [((id<JavaUtilMap>) nil_chk(ocgmap)) getWithId:[obj description]];
      if (layer != nil) {
        [layer setOnPanelWithBoolean:YES];
        [self registerLayerWithComItextpdfTextPdfPdfOCG:layer];
        if (parent != nil) {
          [parent addChildWithComItextpdfTextPdfPdfLayer:layer];
        }
        if ([arr size] > i + 1 && [((ComItextpdfTextPdfPdfObject *) nil_chk([arr getPdfObjectWithInt:i + 1])) isArray]) {
          i++;
          [self addOrderWithComItextpdfTextPdfPdfLayer:layer withComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast([arr getPdfObjectWithInt:i], [ComItextpdfTextPdfPdfArray class]) withJavaUtilMap:ocgmap];
        }
      }
    }
    else if ([obj isArray]) {
      ComItextpdfTextPdfPdfArray *sub = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
      if ([sub isEmpty]) return;
      obj = [sub getPdfObjectWithInt:0];
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isString]) {
        layer = [[ComItextpdfTextPdfPdfLayer alloc] initWithNSString:[obj description]];
        [layer setOnPanelWithBoolean:YES];
        [self registerLayerWithComItextpdfTextPdfPdfOCG:layer];
        if (parent != nil) {
          [parent addChildWithComItextpdfTextPdfPdfLayer:layer];
        }
        ComItextpdfTextPdfPdfArray *array = [[ComItextpdfTextPdfPdfArray alloc] init];
        for (id<JavaUtilIterator> j = [sub listIterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
          [array addWithComItextpdfTextPdfPdfObject:[j next]];
        }
        [self addOrderWithComItextpdfTextPdfPdfLayer:layer withComItextpdfTextPdfPdfArray:array withJavaUtilMap:ocgmap];
      }
      else {
        [self addOrderWithComItextpdfTextPdfPdfLayer:parent withComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]) withJavaUtilMap:ocgmap];
      }
    }
  }
}


#line 1745
- (id<JavaUtilMap>)getPdfLayers {
  
#line 1746
  if ([((JavaUtilHashSet *) nil_chk(documentOCG_)) isEmpty]) {
    [self readOCProperties];
  }
  JavaUtilHashMap *map = [[JavaUtilHashMap alloc] init];
  ComItextpdfTextPdfPdfLayer *layer;
  NSString *key;
  for (id<ComItextpdfTextPdfPdfOCG> __strong pdfOCG in documentOCG_) {
    layer = (ComItextpdfTextPdfPdfLayer *) check_class_cast(pdfOCG, [ComItextpdfTextPdfPdfLayer class]);
    if ([((ComItextpdfTextPdfPdfLayer *) nil_chk(layer)) getTitle] == nil) {
      key = [((ComItextpdfTextPdfPdfString *) nil_chk([layer getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAME_()])) description];
    }
    else {
      key = [layer getTitle];
    }
    if ([map containsKeyWithId:key]) {
      jint seq = 2;
      NSString *tmp = JreStrcat("$CIC", key, '(', seq, ')');
      while ([map containsKeyWithId:tmp]) {
        seq++;
        tmp = JreStrcat("$CIC", key, '(', seq, ')');
      }
      key = tmp;
    }
    (void) [map putWithId:key withId:layer];
  }
  return map;
}


#line 1774
- (void)createXmpMetadata {
  
#line 1775
  @try {
    xmpWriter_ = [self createXmpWriterWithJavaIoByteArrayOutputStream:nil withJavaUtilHashMap:[((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getInfo]];
    xmpMetadata_ = nil;
  }
  @catch (
#line 1778
  JavaIoIOException *ioe) {
    [((JavaIoIOException *) nil_chk(ioe)) printStackTrace];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfStamperImp *)other {
  [super copyAllFieldsTo:other];
  other->COUNTER_ = COUNTER_;
  other->acroFields_ = acroFields_;
  other->append_ = append_;
  other->closed_ = closed_;
  other->fieldTemplates_ = fieldTemplates_;
  other->fieldsAdded_ = fieldsAdded_;
  other->file_ = file_;
  other->flat_ = flat_;
  other->flatFreeText_ = flatFreeText_;
  other->initialXrefSize_ = initialXrefSize_;
  other->marked_ = marked_;
  other->myXref_ = myXref_;
  other->namePtr_ = namePtr_;
  other->openAction_ = openAction_;
  other->pagesToContent_ = pagesToContent_;
  other->partialFlattening_ = partialFlattening_;
  other->reader_ = reader_;
  other->readers2file_ = readers2file_;
  other->readers2intrefs_ = readers2intrefs_;
  other->rotateContents_ = rotateContents_;
  other->sigFlags_ = sigFlags_;
  other->useVp_ = useVp_;
  other->viewerPreferences_ = viewerPreferences_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCounter", NULL, "Lcom.itextpdf.text.log.Counter;", 0x4, NULL },
    { "initWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withChar:withBoolean:", "PdfStamperImp", NULL, 0x4, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "readColorProfile", NULL, "V", 0x4, NULL },
    { "setViewerPreferences", NULL, "V", 0x4, NULL },
    { "closeWithJavaUtilMap:", "close", "V", 0x4, "Ljava.io.IOException;" },
    { "closeWithComItextpdfTextPdfPdfIndirectReference:withInt:", "close", "V", 0x4, "Ljava.io.IOException;" },
    { "applyRotationWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfByteBuffer:", "applyRotation", "V", 0x0, NULL },
    { "alterContents", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "alterResourcesWithComItextpdfTextPdfPdfStamperImp_PageStamp:", "alterResources", "V", 0x0, NULL },
    { "getNewObjectNumberWithComItextpdfTextPdfPdfReader:withInt:withInt:", "getNewObjectNumber", "I", 0x4, NULL },
    { "getReaderFileWithComItextpdfTextPdfPdfReader:", "getReaderFile", "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", 0x0, NULL },
    { "registerReaderWithComItextpdfTextPdfPdfReader:withBoolean:", "registerReader", "V", 0x1, "Ljava.io.IOException;" },
    { "unRegisterReaderWithComItextpdfTextPdfPdfReader:", "unRegisterReader", "V", 0x1, NULL },
    { "findAllObjectsWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfIntHashtable:", "findAllObjects", "V", 0x8, NULL },
    { "addCommentsWithComItextpdfTextPdfFdfReader:", "addComments", "V", 0x1, "Ljava.io.IOException;" },
    { "getPageStampWithInt:", "getPageStamp", "Lcom.itextpdf.text.pdf.PdfStamperImp$PageStamp;", 0x0, NULL },
    { "getUnderContentWithInt:", "getUnderContent", "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x0, NULL },
    { "getOverContentWithInt:", "getOverContent", "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x0, NULL },
    { "correctAcroFieldPagesWithInt:", "correctAcroFieldPages", "V", 0x0, NULL },
    { "moveRectangleWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfReader:withInt:withComItextpdfTextPdfPdfName:withNSString:", "moveRectangle", "V", 0xa, NULL },
    { "replacePageWithComItextpdfTextPdfPdfReader:withInt:withInt:", "replacePage", "V", 0x0, NULL },
    { "insertPageWithInt:withComItextpdfTextRectangle:", "insertPage", "V", 0x0, NULL },
    { "isRotateContents", NULL, "Z", 0x0, NULL },
    { "setRotateContentsWithBoolean:", "setRotateContents", "V", 0x0, NULL },
    { "isContentWritten", NULL, "Z", 0x0, NULL },
    { "getAcroFields", NULL, "Lcom.itextpdf.text.pdf.AcroFields;", 0x0, NULL },
    { "setFormFlatteningWithBoolean:", "setFormFlattening", "V", 0x0, NULL },
    { "setFreeTextFlatteningWithBoolean:", "setFreeTextFlattening", "V", 0x0, NULL },
    { "partialFormFlatteningWithNSString:", "partialFormFlattening", "Z", 0x0, NULL },
    { "flatFields", NULL, "V", 0x4, NULL },
    { "eliminateAcroformObjects", NULL, "V", 0x0, NULL },
    { "sweepKidsWithComItextpdfTextPdfPdfObject:", "sweepKids", "V", 0x0, NULL },
    { "flatFreeTextFields", NULL, "V", 0x4, NULL },
    { "getPageReferenceWithInt:", "getPageReference", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addAnnotation", "V", 0x1, NULL },
    { "addDocumentFieldWithComItextpdfTextPdfPdfIndirectReference:", "addDocumentField", "V", 0x0, NULL },
    { "addFieldResources", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "expandFieldsWithComItextpdfTextPdfPdfFormField:withJavaUtilArrayList:", "expandFields", "V", 0x0, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:withComItextpdfTextPdfPdfDictionary:", "addAnnotation", "V", 0x0, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:withInt:", "addAnnotation", "V", 0x0, NULL },
    { "outlineTravelWithComItextpdfTextPdfPRIndirectReference:", "outlineTravel", "V", 0x2, NULL },
    { "deleteOutlines", NULL, "V", 0x0, NULL },
    { "setJavaScript", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "addFileAttachments", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "makePackageWithComItextpdfTextPdfCollectionPdfCollection:", "makePackage", "V", 0x0, NULL },
    { "setOutlines", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "setViewerPreferencesWithInt:", "setViewerPreferences", "V", 0x1, NULL },
    { "addViewerPreferenceWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "addViewerPreference", "V", 0x1, NULL },
    { "setSigFlagsWithInt:", "setSigFlags", "V", 0x1, NULL },
    { "setPageActionWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfAction:", "setPageAction", "V", 0x1, "Lcom.itextpdf.text.pdf.PdfException;" },
    { "setPageActionWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfAction:withInt:", "setPageAction", "V", 0x0, "Lcom.itextpdf.text.pdf.PdfException;" },
    { "setDurationWithInt:", "setDuration", "V", 0x1, NULL },
    { "setTransitionWithComItextpdfTextPdfPdfTransition:", "setTransition", "V", 0x1, NULL },
    { "setDurationWithInt:withInt:", "setDuration", "V", 0x0, NULL },
    { "setTransitionWithComItextpdfTextPdfPdfTransition:withInt:", "setTransition", "V", 0x0, NULL },
    { "markUsedWithComItextpdfTextPdfPdfObject:", "markUsed", "V", 0x4, NULL },
    { "markUsedWithInt:", "markUsed", "V", 0x4, NULL },
    { "isAppend", NULL, "Z", 0x0, NULL },
    { "setAdditionalActionWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfAction:", "setAdditionalAction", "V", 0x1, "Lcom.itextpdf.text.pdf.PdfException;" },
    { "setOpenActionWithComItextpdfTextPdfPdfAction:", "setOpenAction", "V", 0x1, NULL },
    { "setOpenActionWithNSString:", "setOpenAction", "V", 0x1, NULL },
    { "setThumbnailWithComItextpdfTextImage:", "setThumbnail", "V", 0x1, NULL },
    { "setThumbnailWithComItextpdfTextImage:withInt:", "setThumbnail", "V", 0x0, "Lcom.itextpdf.text.pdf.PdfException;Lcom.itextpdf.text.DocumentException;" },
    { "getDirectContentUnder", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getDirectContent", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "readOCProperties", NULL, "V", 0x4, NULL },
    { "addOrderWithComItextpdfTextPdfPdfLayer:withComItextpdfTextPdfPdfArray:withJavaUtilMap:", "addOrder", "V", 0x2, NULL },
    { "getPdfLayers", NULL, "Ljava.util.Map;", 0x1, NULL },
    { "createXmpMetadata", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "readers2intrefs_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "readers2file_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "file_", NULL, 0x4, "Lcom.itextpdf.text.pdf.RandomAccessFileOrArray;", NULL,  },
    { "reader_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "myXref_", NULL, 0x0, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "pagesToContent_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "closed_", NULL, 0x4, "Z", NULL,  },
    { "rotateContents_", NULL, 0x2, "Z", NULL,  },
    { "acroFields_", NULL, 0x4, "Lcom.itextpdf.text.pdf.AcroFields;", NULL,  },
    { "flat_", NULL, 0x4, "Z", NULL,  },
    { "flatFreeText_", NULL, 0x4, "Z", NULL,  },
    { "namePtr_", NULL, 0x4, "[I", NULL,  },
    { "partialFlattening_", NULL, 0x4, "Ljava.util.HashSet;", NULL,  },
    { "useVp_", NULL, 0x4, "Z", NULL,  },
    { "viewerPreferences_", NULL, 0x4, "Lcom.itextpdf.text.pdf.internal.PdfViewerPreferencesImp;", NULL,  },
    { "fieldTemplates_", NULL, 0x4, "Ljava.util.HashSet;", NULL,  },
    { "fieldsAdded_", NULL, 0x4, "Z", NULL,  },
    { "sigFlags_", NULL, 0x4, "I", NULL,  },
    { "append_", NULL, 0x4, "Z", NULL,  },
    { "marked_", NULL, 0x4, "Lcom.itextpdf.text.pdf.IntHashtable;", NULL,  },
    { "initialXrefSize_", NULL, 0x4, "I", NULL,  },
    { "openAction_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfAction;", NULL,  },
    { "COUNTER_", NULL, 0x4, "Lcom.itextpdf.text.log.Counter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfStamperImp = { "PdfStamperImp", "com.itextpdf.text.pdf", NULL, 0x0, 69, methods, 23, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfStamperImp;
}

@end


#line 1783
@implementation ComItextpdfTextPdfPdfStamperImp_PageStamp


#line 1791
- (instancetype)initWithComItextpdfTextPdfPdfStamperImp:(ComItextpdfTextPdfPdfStamperImp *)stamper
                        withComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                    withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)pageN {
  if (self = [super init]) {
    replacePoint_ =
#line 1789
    0;
    
#line 1792
    self->pageN_ = pageN;
    
#line 1793
    pageResources_ = [[ComItextpdfTextPdfPageResources alloc] init];
    
#line 1794
    ComItextpdfTextPdfPdfDictionary *resources = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageN)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()];
    
#line 1795
    [pageResources_ setOriginalResourcesWithComItextpdfTextPdfPdfDictionary:resources withIntArray:((ComItextpdfTextPdfPdfStamperImp *) nil_chk(stamper))->namePtr_];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfStamperImp_PageStamp *)other {
  [super copyAllFieldsTo:other];
  other->over_ = over_;
  other->pageN_ = pageN_;
  other->pageResources_ = pageResources_;
  other->replacePoint_ = replacePoint_;
  other->under_ = under_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfStamperImp:withComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfDictionary:", "PageStamp", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pageN_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "under_", NULL, 0x0, "Lcom.itextpdf.text.pdf.StampContent;", NULL,  },
    { "over_", NULL, 0x0, "Lcom.itextpdf.text.pdf.StampContent;", NULL,  },
    { "pageResources_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PageResources;", NULL,  },
    { "replacePoint_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfStamperImp_PageStamp = { "PageStamp", "com.itextpdf.text.pdf", "PdfStamperImp", 0x8, 1, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfStamperImp_PageStamp;
}

@end
