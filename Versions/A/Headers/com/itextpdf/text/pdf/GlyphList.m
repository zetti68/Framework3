//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/GlyphList.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/GlyphList.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/io/StreamUtil.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/GlyphList.h"
#include "com/itextpdf/text/pdf/PdfEncodings.h"
#include "com/itextpdf/text/pdf/fonts/FontsResourceAnchor.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/StringTokenizer.h"

BOOL ComItextpdfTextPdfGlyphList_initialized = NO;


#line 55
@implementation ComItextpdfTextPdfGlyphList

JavaUtilHashMap * ComItextpdfTextPdfGlyphList_unicode2names_;
JavaUtilHashMap * ComItextpdfTextPdfGlyphList_names2unicode_;


#line 112
+ (IOSIntArray *)nameToUnicodeWithNSString:(NSString *)name {
  
#line 113
  IOSIntArray *v = [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfGlyphList_names2unicode_)) getWithId:name];
  if (v == nil && ((jint) [((NSString *) nil_chk(name)) length]) == 7 && [((NSString *) nil_chk([name lowercaseString])) hasPrefix:@"uni"]) {
    @try {
      return [IOSIntArray arrayWithInts:(jint[]){ [JavaLangInteger parseIntWithNSString:[name substring:3] withInt:16] } count:1];
    }
    @catch (JavaLangException *ex) {
    }
  }
  return v;
}


#line 124
+ (NSString *)unicodeToNameWithInt:(jint)num {
  
#line 125
  return [((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfGlyphList_unicode2names_)) getWithId:[JavaLangInteger valueOfWithInt:num]];
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfGlyphList class]) {
    ComItextpdfTextPdfGlyphList_unicode2names_ =
#line 56
    [[JavaUtilHashMap alloc] init];
    ComItextpdfTextPdfGlyphList_names2unicode_ =
#line 57
    [[JavaUtilHashMap alloc] init];
    {
      
#line 60
      JavaIoInputStream *is = nil;
      @try {
        is = [ComItextpdfTextIoStreamUtil getResourceStreamWithNSString:JreStrcat("$$", ComItextpdfTextPdfBaseFont_get_RESOURCE_PATH_(), @"glyphlist.txt") withJavaLangClassLoader:[[((ComItextpdfTextPdfFontsFontsResourceAnchor *) [[ComItextpdfTextPdfFontsFontsResourceAnchor alloc] init]) getClass] getClassLoader]];
        if (is == nil) {
          NSString *msg = @"glyphlist.txt not found as resource. (It must exist as resource in the package com.itextpdf.text.pdf.fonts)";
          @throw [[JavaLangException alloc] initWithNSString:msg];
        }
        IOSByteArray *buf = [IOSByteArray arrayWithLength:1024];
        JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] init];
        while (YES) {
          jint size = [((JavaIoInputStream *) nil_chk(is)) readWithByteArray:buf];
          if (size < 0)
#line 72
          break;
          [out writeWithByteArray:buf withInt:0 withInt:size];
        }
        [((JavaIoInputStream *) nil_chk(is)) close];
        is = nil;
        NSString *s = [ComItextpdfTextPdfPdfEncodings convertToStringWithByteArray:[out toByteArray] withNSString:nil];
        JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:s withNSString:@"\x0d\n"];
        while ([tk hasMoreTokens]) {
          NSString *line = [tk nextToken];
          if ([((NSString *) nil_chk(line)) hasPrefix:@"#"])
#line 82
          continue;
          JavaUtilStringTokenizer *t2 = [[JavaUtilStringTokenizer alloc] initWithNSString:line withNSString:@" ;\x0d\n\t\x0c"];
          NSString *name = nil;
          NSString *hex = nil;
          if (![t2 hasMoreTokens])
#line 87
          continue;
          name = [t2 nextToken];
          if (![t2 hasMoreTokens])
#line 90
          continue;
          hex = [t2 nextToken];
          JavaLangInteger *num = [JavaLangInteger valueOfWithNSString:hex withInt:16];
          (void) [ComItextpdfTextPdfGlyphList_unicode2names_ putWithId:num withId:name];
          (void) [ComItextpdfTextPdfGlyphList_names2unicode_ putWithId:name withId:[IOSIntArray arrayWithInts:(jint[]){ [num intValue] } count:1]];
        }
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"glyphlist.txt loading error: ", [((JavaLangException *) nil_chk(e)) getMessage])];
      }
      @finally {
        if (is != nil) {
          @try {
            [is close];
          }
          @catch (JavaLangException *e) {
          }
        }
      }
    }
    ComItextpdfTextPdfGlyphList_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "nameToUnicodeWithNSString:", "nameToUnicode", "[I", 0x9, NULL },
    { "unicodeToNameWithInt:", "unicodeToName", "Ljava.lang.String;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "unicode2names_", NULL, 0xa, "Ljava.util.HashMap;", &ComItextpdfTextPdfGlyphList_unicode2names_,  },
    { "names2unicode_", NULL, 0xa, "Ljava.util.HashMap;", &ComItextpdfTextPdfGlyphList_names2unicode_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfGlyphList = { "GlyphList", "com.itextpdf.text.pdf", NULL, 0x1, 3, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfGlyphList;
}

@end
