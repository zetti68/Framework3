//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfStructTreeController.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfStructTreeController.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BadPdfFormatException.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfCopy.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNull.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfStructTreeController.h"
#include "com/itextpdf/text/pdf/PdfStructureTreeRoot.h"
#include "com/itextpdf/text/pdf/RefKey.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


#line 52
@implementation ComItextpdfTextPdfPdfStructTreeController


#line 67
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                      withComItextpdfTextPdfPdfCopy:(ComItextpdfTextPdfPdfCopy *)writer {
  if (self = [super init]) {
    roleMap_ =
#line 59
    nil;
    sourceRoleMap_ =
#line 60
    nil;
    sourceClassMap_ =
#line 61
    nil;
    nullReference_ =
#line 62
    nil;
    
#line 68
    if (![((ComItextpdfTextPdfPdfCopy *) nil_chk(writer)) isTagged])
#line 69
    @throw [[ComItextpdfTextPdfBadPdfFormatException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"no.structtreeroot.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    
#line 70
    self->writer_ = writer;
    
#line 71
    structureTreeRoot_ = [writer getStructureTreeRoot];
    
#line 72
    [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENTTREE_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTELEM_()]];
    
#line 73
    [self setReaderWithComItextpdfTextPdfPdfReader:reader];
  }
  return self;
}


#line 76
- (void)setReaderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 77
  self->reader_ = reader;
  ComItextpdfTextPdfPdfObject *obj = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTTREEROOT_()];
  obj = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:obj];
  if ((obj == nil) || (![obj isDictionary]))
#line 81
  @throw [[ComItextpdfTextPdfBadPdfFormatException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"no.structtreeroot.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  structTreeRoot_ = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
  obj = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(structTreeRoot_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENTTREE_()]];
  if (obj == nil || ![obj isDictionary])
#line 85
  @throw [[ComItextpdfTextPdfBadPdfFormatException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.does.not.contain.parenttree" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  parentTree_ = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
  sourceRoleMap_ = nil;
  sourceClassMap_ = nil;
  nullReference_ = nil;
}


#line 92
+ (jboolean)checkTaggedWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 93
  ComItextpdfTextPdfPdfObject *obj = [((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTTREEROOT_()];
  obj = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:obj];
  if (obj == nil || ![obj isDictionary])
#line 96
  return NO;
  ComItextpdfTextPdfPdfDictionary *structTreeRoot = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
  obj = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(structTreeRoot)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENTTREE_()]];
  if (obj == nil || ![obj isDictionary])
#line 100
  return NO;
  return YES;
}


#line 104
+ (ComItextpdfTextPdfPdfObject *)getDirectObjectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 105
  if (object == nil)
#line 106
  return nil;
  while ([((ComItextpdfTextPdfPdfObject *) nil_chk(object)) isIndirect])
#line 108
  object = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:object];
  return object;
}


#line 112
- (void)copyStructTreeForPageWithComItextpdfTextPdfPdfNumber:(ComItextpdfTextPdfPdfNumber *)sourceArrayNumber
                                                     withInt:(jint)newArrayNumber {
  
#line 118
  if ([self copyPageMarksWithComItextpdfTextPdfPdfDictionary:parentTree_ withComItextpdfTextPdfPdfNumber:sourceArrayNumber withInt:newArrayNumber] == ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND()) {
    @throw [[ComItextpdfTextPdfBadPdfFormatException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"invalid.structparent" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}


#line 123
- (ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum *)copyPageMarksWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)parentTree
                                                                               withComItextpdfTextPdfPdfNumber:(ComItextpdfTextPdfPdfNumber *)arrayNumber
                                                                                                       withInt:(jint)newArrayNumber {
  
#line 124
  ComItextpdfTextPdfPdfArray *pages = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(parentTree)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NUMS_()]], [ComItextpdfTextPdfPdfArray class]);
  if (pages == nil) {
    ComItextpdfTextPdfPdfArray *kids = (ComItextpdfTextPdfPdfArray *) check_class_cast([ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[parentTree getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_()]], [ComItextpdfTextPdfPdfArray class]);
    if (kids == nil)
#line 128
    return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND();
    jint cur = [((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) size] / 2;
    jint begin = 0;
    while (YES) {
      ComItextpdfTextPdfPdfDictionary *kidTree = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[kids getPdfObjectWithInt:cur + begin]], [ComItextpdfTextPdfPdfDictionary class]);
      switch ([[self copyPageMarksWithComItextpdfTextPdfPdfDictionary:kidTree withComItextpdfTextPdfPdfNumber:arrayNumber withInt:newArrayNumber] ordinal]) {
        case ComItextpdfTextPdfPdfStructTreeController_returnType_FOUND:
        return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_FOUND();
        case ComItextpdfTextPdfPdfStructTreeController_returnType_ABOVE:
        begin += cur;
        cur /= 2;
        if (cur == 0)
#line 140
        cur = 1;
        if (cur + begin == [kids size])
#line 142
        return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_ABOVE();
        break;
        case ComItextpdfTextPdfPdfStructTreeController_returnType_BELOW:
        if (cur + begin == 0)
#line 146
        return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_BELOW();
        if (cur == 0)
#line 148
        return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND();
        cur /= 2;
        break;
        default:
        return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND();
      }
    }
  }
  else {
    
#line 156
    if ([pages size] == 0)
#line 157
    return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND();
    return [self findAndCopyMarksWithComItextpdfTextPdfPdfArray:pages withInt:[((ComItextpdfTextPdfPdfNumber *) nil_chk(arrayNumber)) intValue] withInt:newArrayNumber];
  }
}


#line 162
- (ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum *)findAndCopyMarksWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)pages
                                                                                                     withInt:(jint)arrayNumber
                                                                                                     withInt:(jint)newArrayNumber {
  
#line 163
  if ([((ComItextpdfTextPdfPdfNumber *) nil_chk([((ComItextpdfTextPdfPdfArray *) nil_chk(pages)) getAsNumberWithInt:0])) intValue] > arrayNumber)
#line 164
  return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_BELOW();
  if ([((ComItextpdfTextPdfPdfNumber *) nil_chk([pages getAsNumberWithInt:[pages size] - 2])) intValue] < arrayNumber)
#line 166
  return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_ABOVE();
  jint cur = [pages size] / 4;
  jint begin = 0;
  jint curNumber;
  while (YES) {
    curNumber = [((ComItextpdfTextPdfPdfNumber *) nil_chk([pages getAsNumberWithInt:(begin + cur) * 2])) intValue];
    if (curNumber == arrayNumber) {
      ComItextpdfTextPdfPdfObject *obj = [pages getPdfObjectWithInt:(begin + cur) * 2 + 1];
      ComItextpdfTextPdfPdfObject *obj1 = obj;
      while ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect]) obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:obj];
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isArray]) {
        ComItextpdfTextPdfPdfObject *firstNotNullKid = nil;
        for (ComItextpdfTextPdfPdfObject * __strong numObj in (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class])) {
          if ([((ComItextpdfTextPdfPdfObject *) nil_chk(numObj)) isNull]) {
            if (nullReference_ == nil)
#line 181
            nullReference_ = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((ComItextpdfTextPdfPdfCopy *) nil_chk(writer_)) addToBodyWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNull alloc] init]])) getIndirectReference];
            [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) setPageMarkWithInt:newArrayNumber withComItextpdfTextPdfPdfIndirectReference:nullReference_];
          }
          else {
            
#line 184
            ComItextpdfTextPdfPdfObject *res = [((ComItextpdfTextPdfPdfCopy *) nil_chk(writer_)) copyObjectWithComItextpdfTextPdfPdfObject:numObj withBoolean:YES withBoolean:NO];
            if (firstNotNullKid == nil) firstNotNullKid = res;
            [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) setPageMarkWithInt:newArrayNumber withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(res, [ComItextpdfTextPdfPdfIndirectReference class])];
          }
        }
        
#line 190
        ComItextpdfTextPdfPdfObject *structKids = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(structTreeRoot_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
        if (structKids == nil || (![structKids isArray] && ![structKids isIndirect])) {
          
#line 193
          [self addKidWithComItextpdfTextPdfPdfDictionary:structureTreeRoot_ withComItextpdfTextPdfPdfObject:firstNotNullKid];
        }
        else {
          
#line 195
          if ([structKids isIndirect]) {
            [self addKidWithComItextpdfTextPdfPdfObject:structKids];
          }
          else {
            
#line 198
            for (ComItextpdfTextPdfPdfObject * __strong kid in (ComItextpdfTextPdfPdfArray *) check_class_cast(structKids, [ComItextpdfTextPdfPdfArray class]))
#line 199
            [self addKidWithComItextpdfTextPdfPdfObject:kid];
          }
        }
      }
      else
#line 202
      if ([obj isDictionary]) {
        ComItextpdfTextPdfPdfDictionary *k = [ComItextpdfTextPdfPdfStructTreeController getKDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])];
        if (k == nil)
#line 205
        return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND();
        ComItextpdfTextPdfPdfObject *res = [((ComItextpdfTextPdfPdfCopy *) nil_chk(writer_)) copyObjectWithComItextpdfTextPdfPdfObject:obj1 withBoolean:YES withBoolean:NO];
        [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) setAnnotationMarkWithInt:newArrayNumber withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(res, [ComItextpdfTextPdfPdfIndirectReference class])];
      }
      else return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND();
      return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_FOUND();
    }
    if (curNumber < arrayNumber) {
      begin += cur;
      cur /= 2;
      if (cur == 0)
#line 216
      cur = 1;
      if (cur + begin == [pages size])
#line 218
      return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND();
      continue;
    }
    if (cur + begin == 0)
#line 222
    return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_BELOW();
    if (cur == 0)
#line 224
    return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_get_NOTFOUND();
    cur /= 2;
  }
}


#line 229
+ (ComItextpdfTextPdfPdfDictionary *)getKDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)obj {
  
#line 230
  ComItextpdfTextPdfPdfDictionary *k = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(obj)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
  if (k != nil) {
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_OBJR_())) isEqual:[k getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()]]) {
      return k;
    }
  }
  else {
    
#line 236
    ComItextpdfTextPdfPdfArray *k1 = [obj getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
    if (k1 == nil)
#line 238
    return nil;
    for (jint i = 0; i < [((ComItextpdfTextPdfPdfArray *) nil_chk(k1)) size]; i++) {
      k = [k1 getAsDictWithInt:i];
      if (k != nil) {
        if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_OBJR_())) isEqual:[k getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()]]) {
          return k;
        }
      }
    }
  }
  return nil;
}


#line 251
- (void)addKidWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 252
  if (![((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isIndirect]) return;
  ComItextpdfTextPdfPRIndirectReference *currRef = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class]);
  ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPRIndirectReference:currRef];
  if (![((JavaUtilHashMap *) nil_chk(((ComItextpdfTextPdfPdfCopy *) nil_chk(writer_))->indirects_)) containsKeyWithId:key]) {
    (void) [writer_ copyIndirectWithComItextpdfTextPdfPRIndirectReference:currRef withBoolean:YES withBoolean:NO];
  }
  ComItextpdfTextPdfPdfIndirectReference *newKid = [((ComItextpdfTextPdfPdfCopy_IndirectReferences *) nil_chk([writer_->indirects_ getWithId:key])) getRef];
  
#line 260
  if (writer_->updateRootKids_) {
    [self addKidWithComItextpdfTextPdfPdfDictionary:structureTreeRoot_ withComItextpdfTextPdfPdfObject:newKid];
  }
}


#line 265
+ (ComItextpdfTextPdfPdfArray *)getDirectArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)inArg {
  
#line 266
  ComItextpdfTextPdfPdfArray *out = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint i = 0; i < [((ComItextpdfTextPdfPdfArray *) nil_chk(inArg)) size]; ++i) {
    ComItextpdfTextPdfPdfObject *value = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[inArg getPdfObjectWithInt:i]];
    if (value == nil)
#line 270
    continue;
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(value)) isArray]) {
      [out addWithComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfStructTreeController getDirectArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(value, [ComItextpdfTextPdfPdfArray class])]];
    }
    else
#line 273
    if ([value isDictionary]) {
      [out addWithComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfStructTreeController getDirectDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(value, [ComItextpdfTextPdfPdfDictionary class])]];
    }
    else {
      
#line 276
      [out addWithComItextpdfTextPdfPdfObject:value];
    }
  }
  return out;
}


#line 282
+ (ComItextpdfTextPdfPdfDictionary *)getDirectDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)inArg {
  
#line 283
  ComItextpdfTextPdfPdfDictionary *out = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(((ComItextpdfTextPdfPdfDictionary *) nil_chk(inArg))->hashMap_)) entrySet])) {
    ComItextpdfTextPdfPdfObject *value = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]];
    if (value == nil)
#line 287
    continue;
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(value)) isArray]) {
      [out putWithComItextpdfTextPdfPdfName:[entry_ getKey] withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfStructTreeController getDirectArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(value, [ComItextpdfTextPdfPdfArray class])]];
    }
    else
#line 290
    if ([value isDictionary]) {
      [out putWithComItextpdfTextPdfPdfName:[entry_ getKey] withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfStructTreeController getDirectDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(value, [ComItextpdfTextPdfPdfDictionary class])]];
    }
    else {
      
#line 293
      [out putWithComItextpdfTextPdfPdfName:[entry_ getKey] withComItextpdfTextPdfPdfObject:value];
    }
  }
  return out;
}


#line 299
+ (jboolean)compareObjectsWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value1
                          withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value2 {
  
#line 300
  value2 = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:value2];
  if (value2 == nil)
#line 302
  return NO;
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(value1)) type] != [((ComItextpdfTextPdfPdfObject *) nil_chk(value2)) type])
#line 304
  return NO;
  
#line 306
  if ([value1 isBoolean]) {
    if (value1 == value2)
#line 308
    return YES;
    if ([value2 isKindOfClass:[ComItextpdfTextPdfPdfBoolean class]]) {
      return [((ComItextpdfTextPdfPdfBoolean *) check_class_cast(value1, [ComItextpdfTextPdfPdfBoolean class])) booleanValue] == [((ComItextpdfTextPdfPdfBoolean *) check_class_cast(value2, [ComItextpdfTextPdfPdfBoolean class])) booleanValue];
    }
    return NO;
  }
  else
#line 313
  if ([value1 isName]) {
    return [value1 isEqual:value2];
  }
  else
#line 315
  if ([value1 isNumber]) {
    if (value1 == value2)
#line 317
    return YES;
    if ([value2 isKindOfClass:[ComItextpdfTextPdfPdfNumber class]]) {
      return [((ComItextpdfTextPdfPdfNumber *) check_class_cast(value1, [ComItextpdfTextPdfPdfNumber class])) doubleValue] == [((ComItextpdfTextPdfPdfNumber *) check_class_cast(value2, [ComItextpdfTextPdfPdfNumber class])) doubleValue];
    }
    return NO;
  }
  else
#line 322
  if ([value1 isNull]) {
    if (value1 == value2)
#line 324
    return YES;
    if ([value2 isKindOfClass:[ComItextpdfTextPdfPdfNull class]])
#line 326
    return YES;
    return NO;
  }
  else
#line 328
  if ([value1 isString]) {
    if (value1 == value2)
#line 330
    return YES;
    if ([value2 isKindOfClass:[ComItextpdfTextPdfPdfString class]]) {
      return ((((ComItextpdfTextPdfPdfString *) check_class_cast(value2, [ComItextpdfTextPdfPdfString class]))->value_ == nil && ((ComItextpdfTextPdfPdfString *) check_class_cast(value1, [ComItextpdfTextPdfPdfString class]))->value_ == nil) ||
#line 333
      (((ComItextpdfTextPdfPdfString *) check_class_cast(value1, [ComItextpdfTextPdfPdfString class]))->value_ != nil && [((ComItextpdfTextPdfPdfString *) check_class_cast(value1, [ComItextpdfTextPdfPdfString class]))->value_ isEqual:((ComItextpdfTextPdfPdfString *) check_class_cast(value2, [ComItextpdfTextPdfPdfString class]))->value_]));
    }
    return NO;
  }
  if ([value1 isArray]) {
    ComItextpdfTextPdfPdfArray *array1 = (ComItextpdfTextPdfPdfArray *) check_class_cast(value1, [ComItextpdfTextPdfPdfArray class]);
    ComItextpdfTextPdfPdfArray *array2 = (ComItextpdfTextPdfPdfArray *) check_class_cast(value2, [ComItextpdfTextPdfPdfArray class]);
    if ([array1 size] != [array2 size])
#line 341
    return NO;
    for (jint i = 0; i < [array1 size]; ++i)
#line 343
    if (![ComItextpdfTextPdfPdfStructTreeController compareObjectsWithComItextpdfTextPdfPdfObject:[array1 getPdfObjectWithInt:i] withComItextpdfTextPdfPdfObject:[array2 getPdfObjectWithInt:i]])
#line 344
    return NO;
    return YES;
  }
  if ([value1 isDictionary]) {
    ComItextpdfTextPdfPdfDictionary *first = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(value1, [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfDictionary *second = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(value2, [ComItextpdfTextPdfPdfDictionary class]);
    if ([first size] != [second size])
#line 351
    return NO;
    for (ComItextpdfTextPdfPdfName * __strong name in nil_chk([((JavaUtilHashMap *) nil_chk(first->hashMap_)) keySet])) {
      if (![ComItextpdfTextPdfPdfStructTreeController compareObjectsWithComItextpdfTextPdfPdfObject:[first getWithComItextpdfTextPdfPdfName:name] withComItextpdfTextPdfPdfObject:[second getWithComItextpdfTextPdfPdfName:name]])
#line 354
      return NO;
    }
    return YES;
  }
  return NO;
}


#line 361
- (void)addClassWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 362
  object = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:object];
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(object)) isDictionary]) {
    ComItextpdfTextPdfPdfObject *curClass = [((ComItextpdfTextPdfPdfDictionary *) check_class_cast(object, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_C_()];
    if (curClass == nil)
#line 366
    return;
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(curClass)) isArray]) {
      ComItextpdfTextPdfPdfArray *array = (ComItextpdfTextPdfPdfArray *) check_class_cast(curClass, [ComItextpdfTextPdfPdfArray class]);
      for (jint i = 0; i < [array size]; ++i) {
        [self addClassWithComItextpdfTextPdfPdfObject:[array getPdfObjectWithInt:i]];
      }
    }
    else
#line 372
    if ([curClass isName])
#line 373
    [self addClassWithComItextpdfTextPdfPdfObject:curClass];
  }
  else
#line 374
  if ([object isName]) {
    ComItextpdfTextPdfPdfName *name = (ComItextpdfTextPdfPdfName *) check_class_cast(object, [ComItextpdfTextPdfPdfName class]);
    if (sourceClassMap_ == nil) {
      object = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(structTreeRoot_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CLASSMAP_()]];
      if (object == nil || ![object isDictionary]) {
        return;
      }
      sourceClassMap_ = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(object, [ComItextpdfTextPdfPdfDictionary class]);
    }
    object = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(sourceClassMap_)) getWithComItextpdfTextPdfPdfName:name]];
    if (object == nil) {
      return;
    }
    ComItextpdfTextPdfPdfObject *put = [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) getMappedClassWithComItextpdfTextPdfPdfName:name];
    if (put != nil) {
      if (![ComItextpdfTextPdfPdfStructTreeController compareObjectsWithComItextpdfTextPdfPdfObject:put withComItextpdfTextPdfPdfObject:object]) {
        @throw [[ComItextpdfTextPdfBadPdfFormatException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"conflict.in.classmap" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
      }
    }
    else {
      
#line 393
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(object)) isDictionary])
#line 394
      [structureTreeRoot_ mapClassWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfStructTreeController getDirectDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(object, [ComItextpdfTextPdfPdfDictionary class])]];
      else if ([object isArray]) {
        [structureTreeRoot_ mapClassWithComItextpdfTextPdfPdfName:name withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfPdfStructTreeController getDirectArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(object, [ComItextpdfTextPdfPdfArray class])]];
      }
    }
  }
}


#line 402
- (void)addRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)structType {
  
#line 403
  if (structType == nil) {
    return;
  }
  for (ComItextpdfTextPdfPdfName * __strong name in nil_chk([((ComItextpdfTextPdfPdfCopy *) nil_chk(writer_)) getStandardStructElems])) {
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(name)) isEqual:structType])
#line 408
    return;
  }
  if (sourceRoleMap_ == nil) {
    ComItextpdfTextPdfPdfObject *object = [ComItextpdfTextPdfPdfStructTreeController getDirectObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(structTreeRoot_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROLEMAP_()]];
    if (object == nil || ![object isDictionary]) {
      return;
    }
    sourceRoleMap_ = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(object, [ComItextpdfTextPdfPdfDictionary class]);
  }
  ComItextpdfTextPdfPdfObject *object = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(sourceRoleMap_)) getWithComItextpdfTextPdfPdfName:structType];
  if (object == nil || ![object isName]) {
    return;
  }
  ComItextpdfTextPdfPdfObject *currentRole;
  if (roleMap_ == nil) {
    roleMap_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ROLEMAP_() withComItextpdfTextPdfPdfObject:roleMap_];
    [roleMap_ putWithComItextpdfTextPdfPdfName:structType withComItextpdfTextPdfPdfObject:object];
  }
  else
#line 426
  if ((currentRole = [roleMap_ getWithComItextpdfTextPdfPdfName:structType]) != nil) {
    if (![((ComItextpdfTextPdfPdfObject *) nil_chk(currentRole)) isEqual:object]) {
      @throw [[ComItextpdfTextPdfBadPdfFormatException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"conflict.in.rolemap" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  else {
    
#line 431
    [roleMap_ putWithComItextpdfTextPdfPdfName:structType withComItextpdfTextPdfPdfObject:object];
  }
}


#line 435
- (void)addKidWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)parent
                  withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)kid {
  
#line 436
  ComItextpdfTextPdfPdfObject *kidObj = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(parent)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
  ComItextpdfTextPdfPdfArray *kids;
  if ([kidObj isKindOfClass:[ComItextpdfTextPdfPdfArray class]]) {
    kids = (ComItextpdfTextPdfPdfArray *) check_class_cast(kidObj, [ComItextpdfTextPdfPdfArray class]);
  }
  else {
    
#line 441
    kids = [[ComItextpdfTextPdfPdfArray alloc] init];
    if (kidObj != nil)
#line 443
    [kids addWithComItextpdfTextPdfPdfObject:kidObj];
  }
  [((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) addWithComItextpdfTextPdfPdfObject:kid];
  [parent putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_() withComItextpdfTextPdfPdfObject:kids];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfStructTreeController *)other {
  [super copyAllFieldsTo:other];
  other->nullReference_ = nullReference_;
  other->parentTree_ = parentTree_;
  other->reader_ = reader_;
  other->roleMap_ = roleMap_;
  other->sourceClassMap_ = sourceClassMap_;
  other->sourceRoleMap_ = sourceRoleMap_;
  other->structTreeRoot_ = structTreeRoot_;
  other->structureTreeRoot_ = structureTreeRoot_;
  other->writer_ = writer_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfCopy:", "PdfStructTreeController", NULL, 0x4, "Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "setReaderWithComItextpdfTextPdfPdfReader:", "setReader", "V", 0x4, "Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "checkTaggedWithComItextpdfTextPdfPdfReader:", "checkTagged", "Z", 0x9, NULL },
    { "getDirectObjectWithComItextpdfTextPdfPdfObject:", "getDirectObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x9, NULL },
    { "copyStructTreeForPageWithComItextpdfTextPdfPdfNumber:withInt:", "copyStructTreeForPage", "V", 0x1, "Lcom.itextpdf.text.pdf.BadPdfFormatException;Ljava.io.IOException;" },
    { "copyPageMarksWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfNumber:withInt:", "copyPageMarks", "Lcom.itextpdf.text.pdf.PdfStructTreeController$returnType;", 0x2, "Lcom.itextpdf.text.pdf.BadPdfFormatException;Ljava.io.IOException;" },
    { "findAndCopyMarksWithComItextpdfTextPdfPdfArray:withInt:withInt:", "findAndCopyMarks", "Lcom.itextpdf.text.pdf.PdfStructTreeController$returnType;", 0x2, "Lcom.itextpdf.text.pdf.BadPdfFormatException;Ljava.io.IOException;" },
    { "getKDictWithComItextpdfTextPdfPdfDictionary:", "getKDict", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x8, NULL },
    { "addKidWithComItextpdfTextPdfPdfObject:", "addKid", "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "getDirectArrayWithComItextpdfTextPdfPdfArray:", "getDirectArray", "Lcom.itextpdf.text.pdf.PdfArray;", 0xa, NULL },
    { "getDirectDictWithComItextpdfTextPdfPdfDictionary:", "getDirectDict", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0xa, NULL },
    { "compareObjectsWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfObject:", "compareObjects", "Z", 0x9, NULL },
    { "addClassWithComItextpdfTextPdfPdfObject:", "addClass", "V", 0x4, "Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "addRoleWithComItextpdfTextPdfPdfName:", "addRole", "V", 0x4, "Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "addKidWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfObject:", "addKid", "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "structTreeRoot_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "writer_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfCopy;", NULL,  },
    { "structureTreeRoot_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfStructureTreeRoot;", NULL,  },
    { "parentTree_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "reader_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "roleMap_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "sourceRoleMap_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "sourceClassMap_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "nullReference_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfStructTreeController = { "PdfStructTreeController", "com.itextpdf.text.pdf", NULL, 0x1, 15, methods, 9, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfStructTreeController;
}

@end

#line 65

BOOL ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_initialized = NO;

ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum *ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_values_[4];

@implementation ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

FOUNDATION_EXPORT IOSObjectArray *ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_values() {
  return [IOSObjectArray arrayWithObjects:ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_values_ count:4 type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum class]]];
}
+ (IOSObjectArray *)values {
  return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_values();
}

+ (ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum *)valueOfWithNSString:(NSString *)name {
  return ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_valueOfWithNSString_(name);
}

ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum *ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_valueOfWithNSString_(NSString *name) {
  for (int i = 0; i < 4; i++) {
    ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum *e = ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum class]) {
    ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_BELOW = [[ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum alloc] initWithNSString:@"BELOW" withInt:0];
    ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_FOUND = [[ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum alloc] initWithNSString:@"FOUND" withInt:1];
    ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_ABOVE = [[ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum alloc] initWithNSString:@"ABOVE" withInt:2];
    ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_NOTFOUND = [[ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum alloc] initWithNSString:@"NOTFOUND" withInt:3];
    ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "init", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BELOW", "BELOW", 0x4019, "Lcom.itextpdf.text.pdf.PdfStructTreeController$returnType;", &ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_BELOW,  },
    { "FOUND", "FOUND", 0x4019, "Lcom.itextpdf.text.pdf.PdfStructTreeController$returnType;", &ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_FOUND,  },
    { "ABOVE", "ABOVE", 0x4019, "Lcom.itextpdf.text.pdf.PdfStructTreeController$returnType;", &ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_ABOVE,  },
    { "NOTFOUND", "NOTFOUND", 0x4019, "Lcom.itextpdf.text.pdf.PdfStructTreeController$returnType;", &ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum_NOTFOUND,  },
  };
  static const char *superclass_type_args[] = {"Lcom.itextpdf.text.pdf.PdfStructTreeController$returnType;"};
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum = { "returnType", "com.itextpdf.text.pdf", "PdfStructTreeController", 0x4019, 1, methods, 4, fields, 1, superclass_type_args};
  return &_ComItextpdfTextPdfPdfStructTreeController_returnTypeEnum;
}

@end
