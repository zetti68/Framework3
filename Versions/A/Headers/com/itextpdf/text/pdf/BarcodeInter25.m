//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BarcodeInter25.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BarcodeInter25.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BarcodeInter25.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"

BOOL ComItextpdfTextPdfBarcodeInter25_initialized = NO;


#line 71
@implementation ComItextpdfTextPdfBarcodeInter25

IOSObjectArray * ComItextpdfTextPdfBarcodeInter25_BARS_;


#line 90
- (instancetype)init {
  if (self = [super init]) {
    
#line 91
    @try {
      x_ = 0.8f;
      n_ = 2;
      font_ = [ComItextpdfTextPdfBaseFont createFontWithNSString:@"Helvetica" withNSString:@"winansi" withBoolean:NO];
      size_ = 8;
      baseline_ = size_;
      barHeight_ = size_ * 3;
      textAlignment_ = ComItextpdfTextElement_ALIGN_CENTER;
      generateChecksum_ = NO;
      checksumText_ = NO;
    }
    @catch (JavaLangException *e) {
      @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
    }
  }
  return self;
}


#line 111
+ (NSString *)keepNumbersWithNSString:(NSString *)text {
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  for (jint k = 0; k < ((jint) [((NSString *) nil_chk(text)) length]); ++k) {
    jchar c = [text charAtWithInt:k];
    if (c >= '0' && c <= '9')
#line 116
    (void) [sb appendWithChar:c];
  }
  return [sb description];
}


#line 125
+ (jchar)getChecksumWithNSString:(NSString *)text {
  
#line 126
  jint mul = 3;
  jint total = 0;
  for (jint k = ((jint) [((NSString *) nil_chk(text)) length]) - 1; k >= 0; --k) {
    jint n = [text charAtWithInt:k] - '0';
    total += mul * n;
    mul ^= 2;
  }
  return (jchar) (((10 - (total % 10)) % 10) + '0');
}


#line 140
+ (IOSByteArray *)getBarsInter25WithNSString:(NSString *)text {
  
#line 141
  text = [ComItextpdfTextPdfBarcodeInter25 keepNumbersWithNSString:text];
  if ((((jint) [((NSString *) nil_chk(text)) length]) & 1) != 0)
#line 143
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.text.length.must.be.even" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  IOSByteArray *bars = [IOSByteArray arrayWithLength:((jint) [text length]) * 5 + 7];
  jint pb = 0;
  *IOSByteArray_GetRef(bars, pb++) = 0;
  *IOSByteArray_GetRef(bars, pb++) = 0;
  *IOSByteArray_GetRef(bars, pb++) = 0;
  *IOSByteArray_GetRef(bars, pb++) = 0;
  jint len = ((jint) [text length]) / 2;
  for (jint k = 0; k < len; ++k) {
    jint c1 = [text charAtWithInt:k * 2] - '0';
    jint c2 = [text charAtWithInt:k * 2 + 1] - '0';
    IOSByteArray *b1 = IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfBarcodeInter25_BARS_), c1);
    IOSByteArray *b2 = IOSObjectArray_Get(ComItextpdfTextPdfBarcodeInter25_BARS_, c2);
    for (jint j = 0; j < 5; ++j) {
      *IOSByteArray_GetRef(bars, pb++) = IOSByteArray_Get(nil_chk(b1), j);
      *IOSByteArray_GetRef(bars, pb++) = IOSByteArray_Get(nil_chk(b2), j);
    }
  }
  *IOSByteArray_GetRef(bars, pb++) = 1;
  *IOSByteArray_GetRef(bars, pb++) = 0;
  *IOSByteArray_GetRef(bars, pb++) = 0;
  return bars;
}


#line 171
- (ComItextpdfTextRectangle *)getBarcodeSize {
  
#line 172
  jfloat fontX = 0;
  jfloat fontY = 0;
  if (font_ != nil) {
    if (baseline_ > 0)
#line 176
    fontY = baseline_ - [font_ getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:size_];
    else
#line 178
    fontY = -baseline_ + size_;
    NSString *fullCode = code_;
    if (generateChecksum_ && checksumText_)
#line 181
    fullCode = JreStrcat("$C", fullCode, [ComItextpdfTextPdfBarcodeInter25 getChecksumWithNSString:fullCode]);
    fontX = [font_ getWidthPointWithNSString:altText_ != nil ? altText_ : fullCode withFloat:size_];
  }
  NSString *fullCode = [ComItextpdfTextPdfBarcodeInter25 keepNumbersWithNSString:code_];
  jint len = ((jint) [((NSString *) nil_chk(fullCode)) length]);
  if (generateChecksum_)
#line 187
  ++len;
  jfloat fullWidth = len * (3 * x_ + 2 * x_ * n_) + (6 + n_) * x_;
  fullWidth = [JavaLangMath maxWithFloat:fullWidth withFloat:fontX];
  jfloat fullHeight = barHeight_ + fontY;
  return [[ComItextpdfTextRectangle alloc] initWithFloat:fullWidth withFloat:fullHeight];
}


#line 230
- (ComItextpdfTextRectangle *)placeBarcodeWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)cb
                                                  withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)barColor
                                                  withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)textColor {
  
#line 231
  NSString *fullCode = code_;
  jfloat fontX = 0;
  if (font_ != nil) {
    if (generateChecksum_ && checksumText_)
#line 235
    fullCode = JreStrcat("$C", fullCode, [ComItextpdfTextPdfBarcodeInter25 getChecksumWithNSString:fullCode]);
    fontX = [font_ getWidthPointWithNSString:fullCode = altText_ != nil ? altText_ : fullCode withFloat:size_];
  }
  NSString *bCode = [ComItextpdfTextPdfBarcodeInter25 keepNumbersWithNSString:code_];
  if (generateChecksum_)
#line 240
  bCode = JreStrcat("$C", bCode, [ComItextpdfTextPdfBarcodeInter25 getChecksumWithNSString:bCode]);
  jint len = ((jint) [((NSString *) nil_chk(bCode)) length]);
  jfloat fullWidth = len * (3 * x_ + 2 * x_ * n_) + (6 + n_) * x_;
  jfloat barStartX = 0;
  jfloat textStartX = 0;
  switch (textAlignment_) {
    case ComItextpdfTextElement_ALIGN_LEFT:
    break;
    case ComItextpdfTextElement_ALIGN_RIGHT:
    if (fontX > fullWidth)
#line 250
    barStartX = fontX - fullWidth;
    else
#line 252
    textStartX = fullWidth - fontX;
    break;
    default:
    if (fontX > fullWidth)
#line 256
    barStartX = (fontX - fullWidth) / 2;
    else
#line 258
    textStartX = (fullWidth - fontX) / 2;
    break;
  }
  jfloat barStartY = 0;
  jfloat textStartY = 0;
  if (font_ != nil) {
    if (baseline_ <= 0)
#line 265
    textStartY = barHeight_ - baseline_;
    else {
      textStartY = -[font_ getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:size_];
      barStartY = textStartY + baseline_;
    }
  }
  IOSByteArray *bars = [ComItextpdfTextPdfBarcodeInter25 getBarsInter25WithNSString:bCode];
  jboolean print = YES;
  if (barColor != nil)
#line 274
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) setColorFillWithComItextpdfTextBaseColor:barColor];
  for (jint k = 0; k < ((IOSByteArray *) nil_chk(bars))->size_; ++k) {
    jfloat w = (IOSByteArray_Get(bars, k) == 0 ? x_ : x_ * n_);
    if (print)
#line 278
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) rectangleWithFloat:barStartX withFloat:barStartY withFloat:w - inkSpreading_ withFloat:barHeight_];
    print = !print;
    barStartX += w;
  }
  [((ComItextpdfTextPdfPdfContentByte *) nil_chk(cb)) fill];
  if (font_ != nil) {
    if (textColor != nil)
#line 285
    [cb setColorFillWithComItextpdfTextBaseColor:textColor];
    [cb beginText];
    [cb setFontAndSizeWithComItextpdfTextPdfBaseFont:font_ withFloat:size_];
    [cb setTextMatrixWithFloat:textStartX withFloat:textStartY];
    [cb showTextWithNSString:fullCode];
    [cb endText];
  }
  return [self getBarcodeSize];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfBarcodeInter25 class]) {
    ComItextpdfTextPdfBarcodeInter25_BARS_ = [IOSObjectArray arrayWithObjects:(id[]){ [IOSByteArray arrayWithBytes:(jbyte[]){
#line 77
      0, 0, 1, 1, 0 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 78
        1, 0, 0, 0, 1 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 79
          0, 1, 0, 0, 1 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 80
            1, 1, 0, 0, 0 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 81
              0, 0, 1, 0, 1 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 82
                1, 0, 1, 0, 0 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 83
                  0, 1, 1, 0, 0 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 84
                    0, 0, 0, 1, 1 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 85
                      1, 0, 0, 1, 0 } count:5], [IOSByteArray arrayWithBytes:(jbyte[]){
#line 86
                        0, 1, 0, 1, 0 } count:5] } count:10 type:[IOSByteArray iosClass]];
                        ComItextpdfTextPdfBarcodeInter25_initialized = YES;
                      }
                    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BarcodeInter25", NULL, 0x1, NULL },
    { "keepNumbersWithNSString:", "keepNumbers", "Ljava.lang.String;", 0x9, NULL },
    { "getChecksumWithNSString:", "getChecksum", "C", 0x9, NULL },
    { "getBarsInter25WithNSString:", "getBarsInter25", "[B", 0x9, NULL },
    { "getBarcodeSize", NULL, "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "placeBarcodeWithComItextpdfTextPdfPdfContentByte:withComItextpdfTextBaseColor:withComItextpdfTextBaseColor:", "placeBarcode", "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BARS_", NULL, 0x1a, "[[B", &ComItextpdfTextPdfBarcodeInter25_BARS_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfBarcodeInter25 = { "BarcodeInter25", "com.itextpdf.text.pdf", NULL, 0x1, 6, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfBarcodeInter25;
}

@end
