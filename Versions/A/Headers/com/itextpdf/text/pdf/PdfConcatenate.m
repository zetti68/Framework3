//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfConcatenate.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfConcatenate.java"

#include "IOSClass.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/pdf/PdfConcatenate.h"
#include "com/itextpdf/text/pdf/PdfCopy.h"
#include "com/itextpdf/text/pdf/PdfImportedPage.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfSmartCopy.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"


#line 57
@implementation ComItextpdfTextPdfPdfConcatenate


#line 67
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  return
#line 68
  [self initComItextpdfTextPdfPdfConcatenateWithJavaIoOutputStream:os withBoolean:NO];
}


#line 76
- (instancetype)initComItextpdfTextPdfPdfConcatenateWithJavaIoOutputStream:(JavaIoOutputStream *)os
                                                               withBoolean:(jboolean)smart {
  if (self = [super init]) {
    
#line 77
    document_ = [[ComItextpdfTextDocument alloc] init];
    
#line 78
    if (smart)
#line 79
    copy__ = [[ComItextpdfTextPdfPdfSmartCopy alloc] initWithComItextpdfTextDocument:document_ withJavaIoOutputStream:os];
    else
#line 81
    copy__ = [[ComItextpdfTextPdfPdfCopy alloc] initWithComItextpdfTextDocument:document_ withJavaIoOutputStream:os];
  }
  return self;
}

- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os
                               withBoolean:(jboolean)smart {
  return [self initComItextpdfTextPdfPdfConcatenateWithJavaIoOutputStream:
#line 76
os withBoolean:smart];
}


#line 91
- (jint)addPagesWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 92
  [self open];
  jint n = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getNumberOfPages];
  for (jint i = 1; i <= n; i++) {
    [copy__ addPageWithComItextpdfTextPdfPdfImportedPage:[((ComItextpdfTextPdfPdfCopy *) nil_chk(copy__)) getImportedPageWithComItextpdfTextPdfPdfReader:reader withInt:i]];
  }
  [((ComItextpdfTextPdfPdfCopy *) nil_chk(copy__)) freeReaderWithComItextpdfTextPdfPdfReader:reader];
  [reader close];
  return n;
}


#line 105
- (ComItextpdfTextPdfPdfCopy *)getWriter {
  
#line 106
  return copy__;
}


#line 113
- (void)open {
  
#line 114
  if (![((ComItextpdfTextDocument *) nil_chk(document_)) isOpen]) {
    [document_ open];
  }
}


#line 122
- (void)close {
  
#line 123
  [((ComItextpdfTextDocument *) nil_chk(document_)) close];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfConcatenate *)other {
  [super copyAllFieldsTo:other];
  other->copy__ = copy__;
  other->document_ = document_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoOutputStream:", "PdfConcatenate", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "initWithJavaIoOutputStream:withBoolean:", "PdfConcatenate", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addPagesWithComItextpdfTextPdfPdfReader:", "addPages", "I", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getWriter", NULL, "Lcom.itextpdf.text.pdf.PdfCopy;", 0x1, NULL },
    { "open", NULL, "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "document_", NULL, 0x4, "Lcom.itextpdf.text.Document;", NULL,  },
    { "copy__", "copy", 0x4, "Lcom.itextpdf.text.pdf.PdfCopy;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfConcatenate = { "PdfConcatenate", "com.itextpdf.text.pdf", NULL, 0x1, 6, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfConcatenate;
}

@end
