//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CFFFontSubset.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CFFFontSubset.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/CFFFont.h"
#include "com/itextpdf/text/pdf/CFFFontSubset.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfCFFFontSubset_initialized = NO;


#line 64
@implementation ComItextpdfTextPdfCFFFontSubset

IOSObjectArray * ComItextpdfTextPdfCFFFontSubset_SubrsFunctions_;
IOSObjectArray * ComItextpdfTextPdfCFFFontSubset_SubrsEscapeFuncs_;


#line 168
- (instancetype)initWithComItextpdfTextPdfRandomAccessFileOrArray:(ComItextpdfTextPdfRandomAccessFileOrArray *)rf
                                              withJavaUtilHashMap:(JavaUtilHashMap *)GlyphsUsed {
  if (self =
#line 170
  [super initWithComItextpdfTextPdfRandomAccessFileOrArray:rf]) {
    FDArrayUsed_ =
#line 105
    [[JavaUtilHashSet alloc] init];
    hGSubrsUsed_ =
#line 117
    [[JavaUtilHashMap alloc] init];
    lGSubrsUsed_ =
#line 121
    [[JavaUtilArrayList alloc] init];
    hSubrsUsedNonCID_ =
#line 125
    [[JavaUtilHashMap alloc] init];
    lSubrsUsedNonCID_ =
#line 129
    [[JavaUtilArrayList alloc] init];
    GBias_ =
#line 150
    0;
    NumOfHints_ =
#line 160
    0;
    
#line 171
    self->GlyphsUsed_ = GlyphsUsed;
    
#line 173
    glyphsInList_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:[((JavaUtilHashMap *) nil_chk(GlyphsUsed)) keySet]];
    
#line 176
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fonts_))->size_; ++i) {
      
#line 179
      [self seekWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->charstringsOffset_];
      ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->nglyphs_ = [self getCard16];
      
#line 183
      [self seekWithInt:stringIndexOffset_];
      ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->nstrings_ = [self getCard16] + ((IOSObjectArray *) nil_chk(ComItextpdfTextPdfCFFFont_get_standardStrings_()))->size_;
      
#line 187
      ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->charstringsOffsets_ = [self getIndexWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->charstringsOffset_];
      
#line 190
      if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->fdselectOffset_ >= 0) {
        
#line 193
        [self readFDSelectWithInt:i];
        
#line 195
        [self BuildFDArrayUsedWithInt:i];
      }
      if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->isCID_)
#line 199
      [self ReadFDArrayWithInt:i];
      
#line 201
      ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->CharsetLength_ = [self CountCharsetWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->charsetOffset_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, i)))->nglyphs_];
    }
  }
  return self;
}


#line 211
- (jint)CountCharsetWithInt:(jint)Offset
                    withInt:(jint)NumofGlyphs {
  
#line 212
  jint format;
  jint Length = 0;
  [self seekWithInt:Offset];
  
#line 216
  format = [self getCard8];
  
#line 218
  switch (format) {
    case 0:
    Length = 1 + 2 * NumofGlyphs;
    break;
    case 1:
    Length = 1 + 3 * [self CountRangeWithInt:NumofGlyphs withInt:1];
    break;
    case 2:
    Length = 1 + 4 * [self CountRangeWithInt:NumofGlyphs withInt:2];
    break;
    default:
    break;
  }
  return Length;
}


#line 240
- (jint)CountRangeWithInt:(jint)NumofGlyphs
                  withInt:(jint)Type {
  
#line 241
  jint num = 0;
  jchar Sid;
  jint i = 1, nLeft;
  while (i < NumofGlyphs) {
    num++;
    Sid = [self getCard16];
    if (Type == 1)
#line 248
    nLeft = [self getCard8];
    else
#line 250
    nLeft = [self getCard16];
    i += nLeft + 1;
  }
  return num;
}

- (void)readFDSelectWithInt:(jint)Font {
  
#line 264
  jint NumOfGlyphs = ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->nglyphs_;
  IOSIntArray *FDSelect = [IOSIntArray arrayWithLength:NumOfGlyphs];
  
#line 267
  [self seekWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdselectOffset_];
  
#line 269
  ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDSelectFormat_ = [self getCard8];
  {
    
#line 286
    jint nRanges;
    jint l;
    
#line 289
    jint first;
    
#line 271
    switch (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDSelectFormat_) {
      
#line 274
      case 0:
      for (jint i = 0; i < NumOfGlyphs; i++) {
        
#line 277
        *IOSIntArray_GetRef(FDSelect, i) = [self getCard8];
      }
      
#line 281
      ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDSelectLength_ = ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->nglyphs_ + 1;
      break;
      case 3:
      
#line 286
      nRanges = [self getCard16];
      l = 0;
      
#line 289
      first = [self getCard16];
      for (jint i = 0; i < nRanges; i++) {
        
#line 293
        jint fd = [self getCard8];
        
#line 295
        jint last = [self getCard16];
        
#line 297
        jint steps = last - first;
        for (jint k = 0; k < steps; k++) {
          
#line 300
          *IOSIntArray_GetRef(FDSelect, l) = fd;
          l++;
        }
        
#line 304
        first = last;
      }
      
#line 307
      ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDSelectLength_ = 1 + 2 + nRanges * 3 + 2;
      break;
      default:
      break;
    }
  }
  ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDSelect_ = FDSelect;
}


#line 320
- (void)BuildFDArrayUsedWithInt:(jint)Font {
  
#line 322
  IOSIntArray *FDSelect = ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->FDSelect_;
  
#line 324
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(glyphsInList_)) size]; i++) {
    
#line 327
    jint glyph = [((JavaLangInteger *) nil_chk([glyphsInList_ getWithInt:i])) intValue];
    
#line 329
    jint FD = IOSIntArray_Get(nil_chk(FDSelect), glyph);
    
#line 331
    [((JavaUtilHashSet *) nil_chk(FDArrayUsed_)) addWithId:[JavaLangInteger valueOfWithInt:FD]];
  }
}

- (void)ReadFDArrayWithInt:(jint)Font {
  
#line 341
  [self seekWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->fdarrayOffset_];
  ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayCount_ = [self getCard16];
  ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsize_ = [self getCard8];
  
#line 346
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsize_ < 4)
#line 347
  ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsize_++;
  ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsets_ = [self getIndexWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdarrayOffset_];
}


#line 359
- (IOSByteArray *)ProcessWithNSString:(NSString *)fontName {
  
#line 360
  @try {
    
#line 363
    [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) reOpen];
    
#line 365
    jint j;
    for (j = 0; j < ((IOSObjectArray *) nil_chk(fonts_))->size_; j++)
#line 367
    if ([((NSString *) nil_chk(fontName)) isEqual:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, j)))->name_]) break;
    if (j == fonts_->size_) return nil;
    
#line 371
    if (gsubrIndexOffset_ >= 0)
#line 372
    GBias_ = [self CalcBiasWithInt:gsubrIndexOffset_ withInt:j];
    
#line 375
    [self BuildNewCharStringWithInt:j];
    
#line 377
    [self BuildNewLGSubrsWithInt:j];
    
#line 379
    IOSByteArray *Ret = [self BuildNewFileWithInt:j];
    return Ret;
  }
  @finally {
    @try {
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
}


#line 399
- (jint)CalcBiasWithInt:(jint)Offset
                withInt:(jint)Font {
  
#line 401
  [self seekWithInt:Offset];
  jint nSubrs = [self getCard16];
  
#line 404
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->CharstringType_ == 1)
#line 405
  return 0;
  else
#line 407
  if (nSubrs < 1240)
#line 408
  return 107;
  else if (nSubrs < 33900)
#line 410
  return 1131;
  else
#line 412
  return 32768;
}


#line 420
- (void)BuildNewCharStringWithInt:(jint)FontIndex {
  
#line 422
  NewCharStringsIndex_ = [self BuildNewIndexWithIntArray:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), FontIndex)))->charstringsOffsets_ withJavaUtilHashMap:GlyphsUsed_ withByte:ComItextpdfTextPdfCFFFontSubset_ENDCHAR_OP];
}


#line 432
- (void)BuildNewLGSubrsWithInt:(jint)Font {
  
#line 436
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->isCID_) {
    
#line 440
    hSubrsUsed_ = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_))->size_ type:[IOSClass classWithClass:[JavaUtilHashMap class]]];
    lSubrsUsed_ = [IOSObjectArray arrayWithLength:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_->size_ type:[IOSClass classWithClass:[JavaUtilArrayList class]]];
    
#line 443
    NewLSubrsIndex_ = [IOSObjectArray arrayWithLength:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_->size_ type:[IOSByteArray iosClass]];
    
#line 445
    ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffset_ = [IOSIntArray arrayWithLength:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_->size_];
    
#line 447
    ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffsetsArray_ = [IOSObjectArray arrayWithLength:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_->size_ type:[IOSIntArray iosClass]];
    
#line 450
    JavaUtilArrayList *FDInList = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:FDArrayUsed_];
    
#line 452
    for (jint j = 0; j < [FDInList size]; j++) {
      
#line 455
      jint FD = [((JavaLangInteger *) nil_chk([FDInList getWithInt:j])) intValue];
      IOSObjectArray_SetAndConsume(hSubrsUsed_, FD, [[JavaUtilHashMap alloc] init]);
      IOSObjectArray_SetAndConsume(lSubrsUsed_, FD, [[JavaUtilArrayList alloc] init]);
      
#line 460
      [self BuildFDSubrsOffsetsWithInt:Font withInt:FD];
      
#line 462
      if (IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffset_, FD) >= 0) {
        
#line 466
        [self BuildSubrUsedWithInt:Font withInt:FD withInt:IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffset_, FD) withIntArray:IOSObjectArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffsetsArray_, FD) withJavaUtilHashMap:IOSObjectArray_Get(hSubrsUsed_, FD) withJavaUtilArrayList:IOSObjectArray_Get(lSubrsUsed_, FD)];
        
#line 468
        IOSObjectArray_Set(NewLSubrsIndex_, FD, [self BuildNewIndexWithIntArray:IOSObjectArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffsetsArray_, FD) withJavaUtilHashMap:IOSObjectArray_Get(hSubrsUsed_, FD) withByte:ComItextpdfTextPdfCFFFontSubset_RETURN_OP]);
      }
    }
  }
  else
#line 473
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateSubrs_ >= 0) {
    
#line 476
    ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->SubrsOffsets_ = [self getIndexWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateSubrs_];
    
#line 479
    [self BuildSubrUsedWithInt:Font withInt:-1 withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateSubrs_ withIntArray:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->SubrsOffsets_ withJavaUtilHashMap:hSubrsUsedNonCID_ withJavaUtilArrayList:lSubrsUsedNonCID_];
  }
  
#line 483
  [self BuildGSubrsUsedWithInt:Font];
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateSubrs_ >= 0)
#line 486
  NewSubrsIndexNonCID_ = [self BuildNewIndexWithIntArray:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->SubrsOffsets_ withJavaUtilHashMap:hSubrsUsedNonCID_ withByte:ComItextpdfTextPdfCFFFontSubset_RETURN_OP];
  
#line 488
  NewGSubrsIndex_ = [self BuildNewIndexWithIntArray:gsubrOffsets_ withJavaUtilHashMap:hGSubrsUsed_ withByte:ComItextpdfTextPdfCFFFontSubset_RETURN_OP];
}


#line 497
- (void)BuildFDSubrsOffsetsWithInt:(jint)Font
                           withInt:(jint)FD {
  
#line 500
  *IOSIntArray_GetRef(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->PrivateSubrsOffset_), FD) = -1;
  
#line 502
  [self seekWithInt:IOSIntArray_Get(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_), FD)];
  
#line 504
  while ([self getPosition] < IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_, FD) + IOSIntArray_Get(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateLengths_), FD)) {
    
#line 506
    [self getDictItem];
    
#line 508
    if ([@"Subrs" isEqual:key_])
#line 509
    *IOSIntArray_GetRef(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffset_, FD) = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(nil_chk(args_), 0), [JavaLangInteger class])))) intValue] + IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_, FD);
  }
  
#line 512
  if (IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffset_, FD) >= 0)
#line 513
  IOSObjectArray_Set(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffsetsArray_), FD, [self getIndexWithInt:IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffset_, FD)]);
}


#line 527
- (void)BuildSubrUsedWithInt:(jint)Font
                     withInt:(jint)FD
                     withInt:(jint)SubrOffset
                withIntArray:(IOSIntArray *)SubrsOffsets
         withJavaUtilHashMap:(JavaUtilHashMap *)hSubr
       withJavaUtilArrayList:(JavaUtilArrayList *)lSubr {
  
#line 531
  jint LBias = [self CalcBiasWithInt:SubrOffset withInt:Font];
  
#line 534
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(glyphsInList_)) size]; i++) {
    
#line 536
    jint glyph = [((JavaLangInteger *) nil_chk([glyphsInList_ getWithInt:i])) intValue];
    jint Start = IOSIntArray_Get(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->charstringsOffsets_), glyph);
    jint End = IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->charstringsOffsets_, glyph + 1);
    
#line 541
    if (FD >= 0) {
      
#line 543
      [self EmptyStack];
      NumOfHints_ = 0;
      
#line 546
      jint GlyphFD = IOSIntArray_Get(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDSelect_), glyph);
      
#line 548
      if (GlyphFD == FD)
#line 550
      [self ReadASubrWithInt:Start withInt:End withInt:GBias_ withInt:LBias withJavaUtilHashMap:hSubr withJavaUtilArrayList:lSubr withIntArray:SubrsOffsets];
    }
    else
#line 555
    [self ReadASubrWithInt:Start withInt:End withInt:GBias_ withInt:LBias withJavaUtilHashMap:hSubr withJavaUtilArrayList:lSubr withIntArray:SubrsOffsets];
  }
  
#line 558
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(lSubr)) size]; i++) {
    
#line 561
    jint Subr = [((JavaLangInteger *) nil_chk([lSubr getWithInt:i])) intValue];
    
#line 563
    if (Subr < ((IOSIntArray *) nil_chk(SubrsOffsets))->size_ - 1 && Subr >= 0) {
      
#line 566
      jint Start = IOSIntArray_Get(SubrsOffsets, Subr);
      jint End = IOSIntArray_Get(SubrsOffsets, Subr + 1);
      [self ReadASubrWithInt:Start withInt:End withInt:GBias_ withInt:LBias withJavaUtilHashMap:hSubr withJavaUtilArrayList:lSubr withIntArray:SubrsOffsets];
    }
  }
}


#line 578
- (void)BuildGSubrsUsedWithInt:(jint)Font {
  
#line 580
  jint LBias = 0;
  jint SizeOfNonCIDSubrsUsed = 0;
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->privateSubrs_ >= 0) {
    
#line 584
    LBias = [self CalcBiasWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateSubrs_ withInt:Font];
    SizeOfNonCIDSubrsUsed = [((JavaUtilArrayList *) nil_chk(lSubrsUsedNonCID_)) size];
  }
  
#line 589
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(lGSubrsUsed_)) size]; i++) {
    
#line 592
    jint Subr = [((JavaLangInteger *) nil_chk([lGSubrsUsed_ getWithInt:i])) intValue];
    if (Subr < ((IOSIntArray *) nil_chk(gsubrOffsets_))->size_ - 1 && Subr >= 0) {
      
#line 596
      jint Start = IOSIntArray_Get(gsubrOffsets_, Subr);
      jint End = IOSIntArray_Get(gsubrOffsets_, Subr + 1);
      
#line 599
      if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->isCID_)
#line 600
      [self ReadASubrWithInt:Start withInt:End withInt:GBias_ withInt:0 withJavaUtilHashMap:hGSubrsUsed_ withJavaUtilArrayList:lGSubrsUsed_ withIntArray:nil];
      else {
        
#line 603
        [self ReadASubrWithInt:Start withInt:End withInt:GBias_ withInt:LBias withJavaUtilHashMap:hSubrsUsedNonCID_ withJavaUtilArrayList:lSubrsUsedNonCID_ withIntArray:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->SubrsOffsets_];
        if (SizeOfNonCIDSubrsUsed < [((JavaUtilArrayList *) nil_chk(lSubrsUsedNonCID_)) size]) {
          
#line 606
          for (jint j = SizeOfNonCIDSubrsUsed; j < [lSubrsUsedNonCID_ size]; j++) {
            
#line 609
            jint LSubr = [((JavaLangInteger *) nil_chk([lSubrsUsedNonCID_ getWithInt:j])) intValue];
            if (LSubr < ((IOSIntArray *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->SubrsOffsets_))->size_ - 1 && LSubr >= 0) {
              
#line 613
              jint LStart = IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->SubrsOffsets_, LSubr);
              jint LEnd = IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->SubrsOffsets_, LSubr + 1);
              [self ReadASubrWithInt:LStart withInt:LEnd withInt:GBias_ withInt:LBias withJavaUtilHashMap:hSubrsUsedNonCID_ withJavaUtilArrayList:lSubrsUsedNonCID_ withIntArray:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->SubrsOffsets_];
            }
          }
          SizeOfNonCIDSubrsUsed = [lSubrsUsedNonCID_ size];
        }
      }
    }
  }
}


#line 636
- (void)ReadASubrWithInt:(jint)begin
                 withInt:(jint)end
                 withInt:(jint)GBias
                 withInt:(jint)LBias
     withJavaUtilHashMap:(JavaUtilHashMap *)hSubr
   withJavaUtilArrayList:(JavaUtilArrayList *)lSubr
            withIntArray:(IOSIntArray *)LSubrsOffsets {
  
#line 639
  [self EmptyStack];
  NumOfHints_ = 0;
  
#line 642
  [self seekWithInt:begin];
  while ([self getPosition] < end) {
    
#line 646
    [self ReadCommand];
    jint pos = [self getPosition];
    id TopElement = nil;
    if (arg_count_ > 0)
#line 650
    TopElement = IOSObjectArray_Get(nil_chk(args_), arg_count_ - 1);
    jint NumOfArgs = arg_count_;
    
#line 653
    [self HandelStack];
    
#line 655
    if ([@"callsubr" isEqual:key_]) {
      
#line 658
      if (NumOfArgs > 0) {
        
#line 661
        jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(TopElement, [JavaLangInteger class])))) intValue] + LBias;
        
#line 663
        if (![((JavaUtilHashMap *) nil_chk(hSubr)) containsKeyWithId:[JavaLangInteger valueOfWithInt:Subr]]) {
          
#line 665
          (void) [hSubr putWithId:[JavaLangInteger valueOfWithInt:Subr] withId:nil];
          [((JavaUtilArrayList *) nil_chk(lSubr)) addWithId:[JavaLangInteger valueOfWithInt:Subr]];
        }
        [self CalcHintsWithInt:IOSIntArray_Get(nil_chk(LSubrsOffsets), Subr) withInt:IOSIntArray_Get(LSubrsOffsets, Subr + 1) withInt:LBias withInt:GBias withIntArray:LSubrsOffsets];
        [self seekWithInt:pos];
      }
    }
    else
#line 673
    if ([@"callgsubr" isEqual:key_]) {
      
#line 676
      if (NumOfArgs > 0) {
        
#line 679
        jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(TopElement, [JavaLangInteger class])))) intValue] + GBias;
        
#line 681
        if (![((JavaUtilHashMap *) nil_chk(hGSubrsUsed_)) containsKeyWithId:[JavaLangInteger valueOfWithInt:Subr]]) {
          
#line 683
          (void) [hGSubrsUsed_ putWithId:[JavaLangInteger valueOfWithInt:Subr] withId:nil];
          [((JavaUtilArrayList *) nil_chk(lGSubrsUsed_)) addWithId:[JavaLangInteger valueOfWithInt:Subr]];
        }
        [self CalcHintsWithInt:IOSIntArray_Get(nil_chk(gsubrOffsets_), Subr) withInt:IOSIntArray_Get(gsubrOffsets_, Subr + 1) withInt:LBias withInt:GBias withIntArray:LSubrsOffsets];
        [self seekWithInt:pos];
      }
    }
    else
#line 691
    if ([@"hstem" isEqual:key_] || [@"vstem" isEqual:key_] || [@"hstemhm" isEqual:key_] || [@"vstemhm" isEqual:key_])
#line 693
    NumOfHints_ += NumOfArgs / 2;
    else
#line 695
    if ([@"hintmask" isEqual:key_] || [@"cntrmask" isEqual:key_]) {
      
#line 698
      jint SizeOfMask = NumOfHints_ / 8;
      if (NumOfHints_ % 8 != 0 || SizeOfMask == 0)
#line 700
      SizeOfMask++;
      
#line 702
      for (jint i = 0; i < SizeOfMask; i++)
#line 703
      [self getCard8];
    }
  }
}


#line 712
- (void)HandelStack {
  
#line 715
  jint StackHandel = [self StackOpp];
  if (StackHandel < 2) {
    
#line 719
    if (StackHandel == 1)
#line 720
    [self PushStack];
    else {
      
#line 725
      StackHandel *= -1;
      for (jint i = 0; i < StackHandel; i++)
#line 727
      [self PopStack];
    }
  }
  else
#line 733
  [self EmptyStack];
}


#line 740
- (jint)StackOpp {
  
#line 742
  if ([@"ifelse" isEqual:key_])
#line 743
  return -3;
  if ([@"roll" isEqual:key_] || [@"put" isEqual:key_])
#line 745
  return -2;
  if ([@"callsubr" isEqual:key_] || [@"callgsubr" isEqual:key_] || [@"add" isEqual:key_] || [@"sub" isEqual:key_] ||
#line 747
  [@"div" isEqual:key_] || [@"mul" isEqual:key_] || [@"drop" isEqual:key_] || [@"and" isEqual:key_] ||
#line 748
  [@"or" isEqual:key_] || [@"eq" isEqual:key_])
#line 749
  return -1;
  if ([@"abs" isEqual:key_] || [@"neg" isEqual:key_] || [@"sqrt" isEqual:key_] || [@"exch" isEqual:key_] ||
#line 751
  [@"index" isEqual:key_] || [@"get" isEqual:key_] || [@"not" isEqual:key_] || [@"return" isEqual:key_])
#line 752
  return 0;
  if ([@"random" isEqual:key_] || [@"dup" isEqual:key_])
#line 754
  return 1;
  return 2;
}


#line 762
- (void)EmptyStack {
  
#line 765
  for (jint i = 0; i < arg_count_; i++) IOSObjectArray_Set(nil_chk(args_), i, nil);
  arg_count_ = 0;
}


#line 773
- (void)PopStack {
  
#line 775
  if (arg_count_ > 0) {
    
#line 777
    IOSObjectArray_Set(nil_chk(args_), arg_count_ - 1, nil);
    arg_count_--;
  }
}


#line 786
- (void)PushStack {
  
#line 788
  arg_count_++;
}


#line 794
- (void)ReadCommand {
  
#line 796
  key_ = nil;
  jboolean gotKey = NO;
  
#line 799
  while (!gotKey) {
    
#line 801
    jchar b0 = [self getCard8];
    
#line 803
    if (b0 == 28) {
      
#line 805
      jint first = [self getCard8];
      jint second = [self getCard8];
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:(LShift32(first, 8)) | second]);
      arg_count_++;
      continue;
    }
    if (b0 >= 32 && b0 <= 246) {
      
#line 813
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:b0 - 139]);
      arg_count_++;
      continue;
    }
    if (b0 >= 247 && b0 <= 250) {
      
#line 819
      jint w = [self getCard8];
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:(b0 - 247) * 256 + w + 108]);
      arg_count_++;
      continue;
    }
    if (b0 >= 251 && b0 <= 254) {
      
#line 826
      jint w = [self getCard8];
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:-(b0 - 251) * 256 - w - 108]);
      arg_count_++;
      continue;
    }
    if (b0 == 255) {
      
#line 833
      jint first = [self getCard8];
      jint second = [self getCard8];
      jint third = [self getCard8];
      jint fourth = [self getCard8];
      IOSObjectArray_Set(nil_chk(args_), arg_count_, [JavaLangInteger valueOfWithInt:(((LShift32(first, 24)) | (LShift32(second, 16))) | (LShift32(third, 8))) | fourth]);
      arg_count_++;
      continue;
    }
    if (b0 <= 31 && b0 != 28) {
      
#line 843
      gotKey = YES;
      
#line 846
      if (b0 == 12) {
        
#line 848
        jint b1 = [self getCard8];
        if (b1 > ((IOSObjectArray *) nil_chk(ComItextpdfTextPdfCFFFontSubset_SubrsEscapeFuncs_))->size_ - 1)
#line 850
        b1 = ComItextpdfTextPdfCFFFontSubset_SubrsEscapeFuncs_->size_ - 1;
        key_ = IOSObjectArray_Get(ComItextpdfTextPdfCFFFontSubset_SubrsEscapeFuncs_, b1);
      }
      else
#line 854
      key_ = IOSObjectArray_Get(nil_chk(ComItextpdfTextPdfCFFFontSubset_SubrsFunctions_), b0);
      continue;
    }
  }
}


#line 870
- (jint)CalcHintsWithInt:(jint)begin
                 withInt:(jint)end
                 withInt:(jint)LBias
                 withInt:(jint)GBias
            withIntArray:(IOSIntArray *)LSubrsOffsets {
  [self seekWithInt:begin];
  while ([self getPosition] < end) {
    
#line 877
    [self ReadCommand];
    jint pos = [self getPosition];
    id TopElement = nil;
    if (arg_count_ > 0)
#line 881
    TopElement = IOSObjectArray_Get(nil_chk(args_), arg_count_ - 1);
    jint NumOfArgs = arg_count_;
    
#line 884
    [self HandelStack];
    
#line 886
    if ([@"callsubr" isEqual:key_]) {
      
#line 888
      if (NumOfArgs > 0) {
        
#line 890
        jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(TopElement, [JavaLangInteger class])))) intValue] + LBias;
        [self CalcHintsWithInt:IOSIntArray_Get(nil_chk(LSubrsOffsets), Subr) withInt:IOSIntArray_Get(LSubrsOffsets, Subr + 1) withInt:LBias withInt:GBias withIntArray:LSubrsOffsets];
        [self seekWithInt:pos];
      }
    }
    else
#line 896
    if ([@"callgsubr" isEqual:key_]) {
      
#line 898
      if (NumOfArgs > 0) {
        
#line 900
        jint Subr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(TopElement, [JavaLangInteger class])))) intValue] + GBias;
        [self CalcHintsWithInt:IOSIntArray_Get(nil_chk(gsubrOffsets_), Subr) withInt:IOSIntArray_Get(gsubrOffsets_, Subr + 1) withInt:LBias withInt:GBias withIntArray:LSubrsOffsets];
        [self seekWithInt:pos];
      }
    }
    else
#line 906
    if ([@"hstem" isEqual:key_] || [@"vstem" isEqual:key_] || [@"hstemhm" isEqual:key_] || [@"vstemhm" isEqual:key_])
#line 908
    NumOfHints_ += NumOfArgs / 2;
    else
#line 910
    if ([@"hintmask" isEqual:key_] || [@"cntrmask" isEqual:key_]) {
      
#line 913
      jint SizeOfMask = NumOfHints_ / 8;
      if (NumOfHints_ % 8 != 0 || SizeOfMask == 0)
#line 915
      SizeOfMask++;
      
#line 917
      for (jint i = 0; i < SizeOfMask; i++)
#line 918
      [self getCard8];
    }
  }
  return NumOfHints_;
}


#line 934
- (IOSByteArray *)BuildNewIndexWithIntArray:(IOSIntArray *)Offsets
                        withJavaUtilHashMap:(JavaUtilHashMap *)Used
                                   withByte:(jbyte)OperatorForUnusedEntries {
  
#line 936
  jint unusedCount = 0;
  jint Offset = 0;
  IOSIntArray *NewOffsets = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(Offsets))->size_];
  
#line 940
  for (jint i = 0; i < Offsets->size_; ++i) {
    
#line 942
    *IOSIntArray_GetRef(NewOffsets, i) = Offset;
    
#line 945
    if ([((JavaUtilHashMap *) nil_chk(Used)) containsKeyWithId:[JavaLangInteger valueOfWithInt:i]]) {
      Offset += IOSIntArray_Get(Offsets, i + 1) - IOSIntArray_Get(Offsets, i);
    }
    else {
      unusedCount++;
    }
  }
  
#line 953
  IOSByteArray *NewObjects = [IOSByteArray arrayWithLength:Offset + unusedCount];
  
#line 955
  jint unusedOffset = 0;
  for (jint i = 0; i < Offsets->size_ - 1; ++i) {
    
#line 958
    jint start = IOSIntArray_Get(NewOffsets, i);
    jint end = IOSIntArray_Get(NewOffsets, i + 1);
    *IOSIntArray_GetRef(NewOffsets, i) = start + unusedOffset;
    
#line 963
    if (start != end) {
      
#line 967
      [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(buf_)) seekWithLong:IOSIntArray_Get(Offsets, i)];
      
#line 969
      [buf_ readFullyWithByteArray:NewObjects withInt:start + unusedOffset withInt:end - start];
    }
    else {
      
#line 971
      *IOSByteArray_GetRef(NewObjects, start + unusedOffset) = OperatorForUnusedEntries;
      unusedOffset++;
    }
  }
  *IOSIntArray_GetRef(NewOffsets, Offsets->size_ - 1) += unusedOffset;
  
#line 977
  return [self AssembleIndexWithIntArray:NewOffsets withByteArray:NewObjects];
}


#line 987
- (IOSByteArray *)AssembleIndexWithIntArray:(IOSIntArray *)NewOffsets
                              withByteArray:(IOSByteArray *)NewObjects {
  
#line 990
  jchar Count = (jchar) (((IOSIntArray *) nil_chk(NewOffsets))->size_ - 1);
  
#line 992
  jint Size = IOSIntArray_Get(NewOffsets, NewOffsets->size_ - 1);
  
#line 994
  jbyte Offsize;
  if (Size <= (jint) 0xff) Offsize = 1;
  else if (Size <= (jint) 0xffff) Offsize = 2;
  else if (Size <= (jint) 0xffffff) Offsize = 3;
  else Offsize = 4;
  
#line 1001
  IOSByteArray *NewIndex = [IOSByteArray arrayWithLength:2 + 1 + Offsize * (Count + 1) + ((IOSByteArray *) nil_chk(NewObjects))->size_];
  
#line 1003
  jint Place = 0;
  
#line 1005
  *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((URShift32(Count, 8)) & (jint) 0xff);
  *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((URShift32(Count, 0)) & (jint) 0xff);
  
#line 1008
  *IOSByteArray_GetRef(NewIndex, Place++) = Offsize;
  {
    IOSIntArray *a__ = NewOffsets;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint newOffset = *b__++;
      
#line 1012
      jint Num = newOffset - IOSIntArray_Get(NewOffsets, 0) + 1;
      
#line 1014
      switch (Offsize) {
        case 4:
        *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((URShift32(Num, 24)) & (jint) 0xff);
        case 3:
        *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((URShift32(Num, 16)) & (jint) 0xff);
        case 2:
        *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((URShift32(Num, 8)) & (jint) 0xff);
        case 1:
        *IOSByteArray_GetRef(NewIndex, Place++) = (jbyte) ((URShift32(Num, 0)) & (jint) 0xff);
      }
    }
  }
  {
    IOSByteArray *a__ =
#line 1026
    NewObjects;
    jbyte const *b__ = a__->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte newObject = *b__++;
      
#line 1027
      *IOSByteArray_GetRef(NewIndex, Place++) = newObject;
    }
  }
  return NewIndex;
}


#line 1038
- (IOSByteArray *)BuildNewFileWithInt:(jint)Font {
  
#line 1041
  OutputList_ = [[JavaUtilLinkedList alloc] init];
  
#line 1044
  [self CopyHeader];
  
#line 1047
  [self BuildIndexHeaderWithInt:1 withInt:1 withInt:1];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) (1 + ((jint) [((NSString *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->name_)) length]))]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_StringItem alloc] initWithNSString:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->name_]];
  
#line 1052
  [self BuildIndexHeaderWithInt:1 withInt:2 withInt:1];
  ComItextpdfTextPdfCFFFont_OffsetItem *topdictIndex1Ref = [[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:2];
  [OutputList_ addLastWithId:topdictIndex1Ref];
  ComItextpdfTextPdfCFFFont_IndexBaseItem *topdictBase = [[ComItextpdfTextPdfCFFFont_IndexBaseItem alloc] init];
  [OutputList_ addLastWithId:topdictBase];
  
#line 1059
  ComItextpdfTextPdfCFFFont_OffsetItem *charsetRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  ComItextpdfTextPdfCFFFont_OffsetItem *charstringsRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  ComItextpdfTextPdfCFFFont_OffsetItem *fdarrayRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  ComItextpdfTextPdfCFFFont_OffsetItem *fdselectRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  ComItextpdfTextPdfCFFFont_OffsetItem *privateRef = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
  
#line 1066
  if (!((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->isCID_) {
    
#line 1068
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->nstrings_]];
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->nstrings_ + 1]];
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:0]];
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 12]];
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 30]];
    
#line 1074
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->nglyphs_]];
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 12]];
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 34]];
  }
  
#line 1082
  [self seekWithInt:IOSIntArray_Get(nil_chk(topdictOffsets_), Font)];
  
#line 1084
  while ([self getPosition] < IOSIntArray_Get(topdictOffsets_, Font + 1)) {
    jint p1 = [self getPosition];
    [self getDictItem];
    jint p2 = [self getPosition];
    
#line 1089
    if ([@"Encoding" isEqual:key_] ||
#line 1091
    [@"Private" isEqual:key_] ||
#line 1092
    [@"FDSelect" isEqual:key_] ||
#line 1093
    [@"FDArray" isEqual:key_] ||
#line 1094
    [@"charset" isEqual:key_] ||
#line 1095
    [@"CharStrings" isEqual:key_]) {
    }
    else {
      
#line 1099
      [OutputList_ addWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:p1 withInt:p2 - p1]];
    }
  }
  
#line 1103
  [self CreateKeysWithComItextpdfTextPdfCFFFont_OffsetItem:fdarrayRef withComItextpdfTextPdfCFFFont_OffsetItem:fdselectRef withComItextpdfTextPdfCFFFont_OffsetItem:charsetRef withComItextpdfTextPdfCFFFont_OffsetItem:charstringsRef];
  
#line 1106
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexMarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:topdictIndex1Ref withComItextpdfTextPdfCFFFont_IndexBaseItem:topdictBase]];
  
#line 1110
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->isCID_)
#line 1111
  [OutputList_ addLastWithId:[self getEntireIndexRangeWithInt:stringIndexOffset_]];
  else
#line 1116
  [self CreateNewStringIndexWithInt:Font];
  
#line 1119
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithByteArray:NewGSubrsIndex_] withInt:0 withInt:((IOSByteArray *) nil_chk(NewGSubrsIndex_))->size_]];
  
#line 1123
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->isCID_) {
    
#line 1128
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:fdselectRef]];
    
#line 1130
    if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdselectOffset_ >= 0)
#line 1131
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdselectOffset_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDSelectLength_]];
    else
#line 1134
    [self CreateFDSelectWithComItextpdfTextPdfCFFFont_OffsetItem:fdselectRef withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->nglyphs_];
    
#line 1138
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:charsetRef]];
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->charsetOffset_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->CharsetLength_]];
    
#line 1143
    if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdarrayOffset_ >= 0) {
      
#line 1146
      [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:fdarrayRef]];
      
#line 1148
      [self ReconstructWithInt:Font];
    }
    else
#line 1152
    [self CreateFDArrayWithComItextpdfTextPdfCFFFont_OffsetItem:fdarrayRef withComItextpdfTextPdfCFFFont_OffsetItem:privateRef withInt:Font];
  }
  else {
    
#line 1159
    [self CreateFDSelectWithComItextpdfTextPdfCFFFont_OffsetItem:fdselectRef withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->nglyphs_];
    
#line 1161
    [self CreateCharsetWithComItextpdfTextPdfCFFFont_OffsetItem:charsetRef withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->nglyphs_];
    
#line 1163
    [self CreateFDArrayWithComItextpdfTextPdfCFFFont_OffsetItem:fdarrayRef withComItextpdfTextPdfCFFFont_OffsetItem:privateRef withInt:Font];
  }
  
#line 1167
  if (((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateOffset_ >= 0) {
    
#line 1170
    ComItextpdfTextPdfCFFFont_IndexBaseItem *PrivateBase = [[ComItextpdfTextPdfCFFFont_IndexBaseItem alloc] init];
    [OutputList_ addLastWithId:PrivateBase];
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:privateRef]];
    
#line 1174
    ComItextpdfTextPdfCFFFont_OffsetItem *Subr = [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init];
    
#line 1176
    [self CreateNonCIDPrivateWithInt:Font withComItextpdfTextPdfCFFFont_OffsetItem:Subr];
    
#line 1178
    [self CreateNonCIDSubrsWithInt:Font withComItextpdfTextPdfCFFFont_IndexBaseItem:PrivateBase withComItextpdfTextPdfCFFFont_OffsetItem:Subr];
  }
  
#line 1182
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:charstringsRef]];
  
#line 1185
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithByteArray:NewCharStringsIndex_] withInt:0 withInt:((IOSByteArray *) nil_chk(NewCharStringsIndex_))->size_]];
  
#line 1188
  IOSIntArray *currentOffset = [IOSIntArray arrayWithLength:1];
  *IOSIntArray_GetRef(currentOffset, 0) = 0;
  
#line 1191
  id<JavaUtilIterator> listIter = [OutputList_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComItextpdfTextPdfCFFFont_Item *item = [listIter next];
    [((ComItextpdfTextPdfCFFFont_Item *) nil_chk(item)) incrementWithIntArray:currentOffset];
  }
  
#line 1197
  listIter = [OutputList_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComItextpdfTextPdfCFFFont_Item *item = [listIter next];
    [((ComItextpdfTextPdfCFFFont_Item *) nil_chk(item)) xref];
  }
  
#line 1203
  jint size = IOSIntArray_Get(currentOffset, 0);
  IOSByteArray *b = [IOSByteArray arrayWithLength:size];
  
#line 1207
  listIter = [OutputList_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(listIter)) hasNext]) {
    ComItextpdfTextPdfCFFFont_Item *item = [listIter next];
    [((ComItextpdfTextPdfCFFFont_Item *) nil_chk(item)) emitWithByteArray:b];
  }
  
#line 1213
  return b;
}


#line 1219
- (void)CopyHeader {
  
#line 1221
  [self seekWithInt:0];
  jint major = [self getCard8];
  jint minor = [self getCard8];
  jint hdrSize = [self getCard8];
  jint offSize = [self getCard8];
  nextIndexOffset_ = hdrSize;
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:0 withInt:hdrSize]];
}


#line 1236
- (void)BuildIndexHeaderWithInt:(jint)Count
                        withInt:(jint)Offsize
                        withInt:(jint)First {
  
#line 1239
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) Count]];
  
#line 1241
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) Offsize]];
  
#line 1243
  switch (Offsize) {
    case 1:
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) First]];
    break;
    case 2:
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) First]];
    break;
    case 3:
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt24Item alloc] initWithInt:(jchar) First]];
    break;
    case 4:
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt32Item alloc] initWithInt:(jchar) First]];
    break;
    default:
    break;
  }
}


#line 1268
- (void)CreateKeysWithComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)fdarrayRef
                  withComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)fdselectRef
                  withComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)charsetRef
                  withComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)charstringsRef {
  
#line 1271
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:fdarrayRef];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 12]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 36]];
  
#line 1275
  [OutputList_ addLastWithId:fdselectRef];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 12]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 37]];
  
#line 1279
  [OutputList_ addLastWithId:charsetRef];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 15]];
  
#line 1282
  [OutputList_ addLastWithId:charstringsRef];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 17]];
}


#line 1291
- (void)CreateNewStringIndexWithInt:(jint)Font {
  
#line 1293
  NSString *fdFontName = JreStrcat("$$", ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->name_, @"-OneRange");
  if (((jint) [fdFontName length]) > 127)
#line 1295
  fdFontName = [fdFontName substring:0 endIndex:127];
  NSString *extraStrings = JreStrcat("$$", @"AdobeIdentity", fdFontName);
  
#line 1298
  jint origStringsLen = IOSIntArray_Get(stringOffsets_, ((IOSIntArray *) nil_chk(stringOffsets_))->size_ - 1) - IOSIntArray_Get(
#line 1299
  stringOffsets_, 0);
  jint stringsBaseOffset = IOSIntArray_Get(stringOffsets_, 0) - 1;
  
#line 1302
  jbyte stringsIndexOffSize;
  if (origStringsLen + ((jint) [extraStrings length]) <= (jint) 0xff) stringsIndexOffSize = 1;
  else if (origStringsLen + ((jint) [extraStrings length]) <= (jint) 0xffff) stringsIndexOffSize = 2;
  else if (origStringsLen + ((jint) [extraStrings length]) <= (jint) 0xffffff) stringsIndexOffSize = 3;
  else stringsIndexOffSize = 4;
  
#line 1308
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) (stringOffsets_->size_ - 1 + 3)]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) stringsIndexOffSize]];
  {
    IOSIntArray *a__ =
#line 1310
    stringOffsets_;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint stringOffset = *b__++;
      
#line 1311
      [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:stringsIndexOffSize withInt:
#line 1312
      stringOffset - stringsBaseOffset]];
    }
  }
  
#line 1313
  jint currentStringsOffset = IOSIntArray_Get(stringOffsets_, stringOffsets_->size_ - 1) -
#line 1314
  stringsBaseOffset;
  
#line 1316
  currentStringsOffset += ((jint) [@"Adobe" length]);
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:stringsIndexOffSize withInt:currentStringsOffset]];
  currentStringsOffset += ((jint) [@"Identity" length]);
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:stringsIndexOffSize withInt:currentStringsOffset]];
  currentStringsOffset += ((jint) [((NSString *) nil_chk(fdFontName)) length]);
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:stringsIndexOffSize withInt:currentStringsOffset]];
  
#line 1323
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:IOSIntArray_Get(stringOffsets_, 0) withInt:origStringsLen]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_StringItem alloc] initWithNSString:extraStrings]];
}


#line 1333
- (void)CreateFDSelectWithComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)fdselectRef
                                                       withInt:(jint)nglyphs {
  
#line 1335
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:fdselectRef]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 3]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 1]];
  
#line 1339
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 0]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 0]];
  
#line 1342
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) nglyphs]];
}


#line 1351
- (void)CreateCharsetWithComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)charsetRef
                                                      withInt:(jint)nglyphs {
  
#line 1353
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:charsetRef]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 2]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) 1]];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt16Item alloc] initWithChar:(jchar) (nglyphs - 1)]];
}


#line 1367
- (void)CreateFDArrayWithComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)fdarrayRef
                     withComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)privateRef
                                                      withInt:(jint)Font {
  
#line 1369
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:fdarrayRef]];
  
#line 1371
  [self BuildIndexHeaderWithInt:1 withInt:1 withInt:1];
  
#line 1374
  ComItextpdfTextPdfCFFFont_OffsetItem *privateIndex1Ref = [[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:1];
  [OutputList_ addLastWithId:privateIndex1Ref];
  ComItextpdfTextPdfCFFFont_IndexBaseItem *privateBase = [[ComItextpdfTextPdfCFFFont_IndexBaseItem alloc] init];
  
#line 1378
  [OutputList_ addLastWithId:privateBase];
  
#line 1381
  jint NewSize = ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->privateLength_;
  
#line 1383
  jint OrgSubrsOffsetSize = [self CalcSubrOffsetSizeWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateOffset_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateLength_];
  
#line 1385
  if (OrgSubrsOffsetSize != 0)
#line 1386
  NewSize += 5 - OrgSubrsOffsetSize;
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:NewSize]];
  [OutputList_ addLastWithId:privateRef];
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 18]];
  
#line 1391
  [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexMarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:privateIndex1Ref withComItextpdfTextPdfCFFFont_IndexBaseItem:privateBase]];
}


#line 1398
- (void)ReconstructWithInt:(jint)Font {
  
#line 1401
  IOSObjectArray *fdPrivate = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->FDArrayOffsets_))->size_ - 1 type:[IOSClass classWithClass:[ComItextpdfTextPdfCFFFont_DictOffsetItem class]]];
  IOSObjectArray *fdPrivateBase = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_))->size_ type:[IOSClass classWithClass:[ComItextpdfTextPdfCFFFont_IndexBaseItem class]]];
  IOSObjectArray *fdSubrs = [IOSObjectArray arrayWithLength:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_->size_ type:[IOSClass classWithClass:[ComItextpdfTextPdfCFFFont_DictOffsetItem class]]];
  
#line 1405
  [self ReconstructFDArrayWithInt:Font withComItextpdfTextPdfCFFFont_OffsetItemArray:fdPrivate];
  [self ReconstructPrivateDictWithInt:Font withComItextpdfTextPdfCFFFont_OffsetItemArray:fdPrivate withComItextpdfTextPdfCFFFont_IndexBaseItemArray:fdPrivateBase withComItextpdfTextPdfCFFFont_OffsetItemArray:fdSubrs];
  [self ReconstructPrivateSubrsWithInt:Font withComItextpdfTextPdfCFFFont_IndexBaseItemArray:fdPrivateBase withComItextpdfTextPdfCFFFont_OffsetItemArray:fdSubrs];
}


#line 1415
- (void)ReconstructFDArrayWithInt:(jint)Font
withComItextpdfTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdPrivate {
  
#line 1418
  [self BuildIndexHeaderWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->FDArrayCount_ withInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsize_ withInt:1];
  
#line 1421
  IOSObjectArray *fdOffsets = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsets_))->size_ - 1 type:[IOSClass classWithClass:[ComItextpdfTextPdfCFFFont_IndexOffsetItem class]]];
  for (jint i = 0; i < ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsets_->size_ - 1; i++) {
    
#line 1424
    IOSObjectArray_SetAndConsume(fdOffsets, i, [[ComItextpdfTextPdfCFFFont_IndexOffsetItem alloc] initWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsize_]);
    [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:IOSObjectArray_Get(fdOffsets, i)];
  }
  
#line 1429
  ComItextpdfTextPdfCFFFont_IndexBaseItem *fdArrayBase = [[ComItextpdfTextPdfCFFFont_IndexBaseItem alloc] init];
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:fdArrayBase];
  
#line 1436
  for (jint k = 0; k < ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsets_->size_ - 1; k++) {
    
#line 1440
    [self seekWithInt:IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsets_, k)];
    while ([self getPosition] < IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->FDArrayOffsets_, k + 1)) {
      
#line 1443
      jint p1 = [self getPosition];
      [self getDictItem];
      jint p2 = [self getPosition];
      
#line 1448
      if ([@"Private" isEqual:key_]) {
        
#line 1450
        jint NewSize = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(nil_chk(args_), 0), [JavaLangInteger class])))) intValue];
        
#line 1452
        jint OrgSubrsOffsetSize = [self CalcSubrOffsetSizeWithInt:IOSIntArray_Get(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_), k) withInt:IOSIntArray_Get(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateLengths_), k)];
        
#line 1454
        if (OrgSubrsOffsetSize != 0)
#line 1455
        NewSize += 5 - OrgSubrsOffsetSize;
        
#line 1457
        [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_DictNumberItem alloc] initWithInt:NewSize]];
        IOSObjectArray_SetAndConsume(nil_chk(fdPrivate), k, [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init]);
        [OutputList_ addLastWithId:IOSObjectArray_Get(fdPrivate, k)];
        [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 18]];
        
#line 1462
        [self seekWithInt:p2];
      }
      else
#line 1466
      [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:p1 withInt:p2 - p1]];
    }
    
#line 1470
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_IndexMarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:IOSObjectArray_Get(fdOffsets, k) withComItextpdfTextPdfCFFFont_IndexBaseItem:fdArrayBase]];
  }
}


#line 1480
- (void)ReconstructPrivateDictWithInt:(jint)Font
withComItextpdfTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdPrivate
withComItextpdfTextPdfCFFFont_IndexBaseItemArray:(IOSObjectArray *)fdPrivateBase
withComItextpdfTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdSubrs {
  
#line 1487
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->fdprivateOffsets_))->size_; i++) {
    
#line 1492
    [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_MarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:IOSObjectArray_Get(nil_chk(fdPrivate), i)]];
    IOSObjectArray_SetAndConsume(nil_chk(fdPrivateBase), i, [[ComItextpdfTextPdfCFFFont_IndexBaseItem alloc] init]);
    [OutputList_ addLastWithId:IOSObjectArray_Get(fdPrivateBase, i)];
    
#line 1496
    [self seekWithInt:IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_, i)];
    while ([self getPosition] < IOSIntArray_Get(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateOffsets_, i) + IOSIntArray_Get(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->fdprivateLengths_), i)) {
      
#line 1499
      jint p1 = [self getPosition];
      [self getDictItem];
      jint p2 = [self getPosition];
      
#line 1504
      if ([@"Subrs" isEqual:key_]) {
        IOSObjectArray_SetAndConsume(nil_chk(fdSubrs), i, [[ComItextpdfTextPdfCFFFont_DictOffsetItem alloc] init]);
        [OutputList_ addLastWithId:IOSObjectArray_Get(fdSubrs, i)];
        [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 19]];
      }
      else
#line 1511
      [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:p1 withInt:p2 - p1]];
    }
  }
}


#line 1524
- (void)ReconstructPrivateSubrsWithInt:(jint)Font
withComItextpdfTextPdfCFFFont_IndexBaseItemArray:(IOSObjectArray *)fdPrivateBase
withComItextpdfTextPdfCFFFont_OffsetItemArray:(IOSObjectArray *)fdSubrs {
  
#line 1528
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->fdprivateLengths_))->size_; i++) {
    
#line 1532
    if (IOSObjectArray_Get(nil_chk(fdSubrs), i) != nil && IOSIntArray_Get(nil_chk(((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->PrivateSubrsOffset_), i) >= 0) {
      
#line 1534
      [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_SubrMarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:IOSObjectArray_Get(fdSubrs, i) withComItextpdfTextPdfCFFFont_IndexBaseItem:IOSObjectArray_Get(nil_chk(fdPrivateBase), i)]];
      if (IOSObjectArray_Get(nil_chk(NewLSubrsIndex_), i) != nil)
#line 1536
      [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithByteArray:IOSObjectArray_Get(NewLSubrsIndex_, i)] withInt:0 withInt:((IOSByteArray *) nil_chk(IOSObjectArray_Get(NewLSubrsIndex_, i)))->size_]];
    }
  }
}


#line 1548
- (jint)CalcSubrOffsetSizeWithInt:(jint)Offset
                          withInt:(jint)Size {
  
#line 1551
  jint OffsetSize = 0;
  
#line 1553
  [self seekWithInt:Offset];
  
#line 1555
  while ([self getPosition] < Offset + Size) {
    
#line 1557
    jint p1 = [self getPosition];
    [self getDictItem];
    jint p2 = [self getPosition];
    
#line 1561
    if ([@"Subrs" isEqual:key_]) {
      
#line 1563
      OffsetSize = p2 - p1 - 1;
    }
  }
  
#line 1568
  return OffsetSize;
}


#line 1576
- (jint)countEntireIndexRangeWithInt:(jint)indexOffset {
  
#line 1579
  [self seekWithInt:indexOffset];
  
#line 1581
  jint count = [self getCard16];
  
#line 1583
  if (count == 0)
#line 1584
  return 2;
  else {
    
#line 1588
    jint indexOffSize = [self getCard8];
    
#line 1590
    [self seekWithInt:indexOffset + 2 + 1 + count * indexOffSize];
    
#line 1592
    jint size = [self getOffsetWithInt:indexOffSize] - 1;
    
#line 1594
    return 2 + 1 + (count + 1) * indexOffSize + size;
  }
}

- (void)CreateNonCIDPrivateWithInt:(jint)Font
withComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)Subr {
  
#line 1607
  [self seekWithInt:((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(nil_chk(fonts_), Font)))->privateOffset_];
  while ([self getPosition] < ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateOffset_ + ((ComItextpdfTextPdfCFFFont_Font *) nil_chk(IOSObjectArray_Get(fonts_, Font)))->privateLength_) {
    
#line 1610
    jint p1 = [self getPosition];
    [self getDictItem];
    jint p2 = [self getPosition];
    
#line 1615
    if ([@"Subrs" isEqual:key_]) {
      [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:Subr];
      [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_UInt8Item alloc] initWithChar:(jchar) 19]];
    }
    else
#line 1621
    [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:buf_ withInt:p1 withInt:p2 - p1]];
  }
}


#line 1632
- (void)CreateNonCIDSubrsWithInt:(jint)Font
withComItextpdfTextPdfCFFFont_IndexBaseItem:(ComItextpdfTextPdfCFFFont_IndexBaseItem *)PrivateBase
withComItextpdfTextPdfCFFFont_OffsetItem:(ComItextpdfTextPdfCFFFont_OffsetItem *)Subrs {
  
#line 1635
  [((JavaUtilLinkedList *) nil_chk(OutputList_)) addLastWithId:[[ComItextpdfTextPdfCFFFont_SubrMarkerItem alloc] initWithComItextpdfTextPdfCFFFont_OffsetItem:Subrs withComItextpdfTextPdfCFFFont_IndexBaseItem:PrivateBase]];
  
#line 1637
  if (NewSubrsIndexNonCID_ != nil) {
    [OutputList_ addLastWithId:[[ComItextpdfTextPdfCFFFont_RangeItem alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithByteArray:NewSubrsIndexNonCID_] withInt:0 withInt:NewSubrsIndexNonCID_->size_]];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfCFFFontSubset *)other {
  [super copyAllFieldsTo:other];
  other->FDArrayUsed_ = FDArrayUsed_;
  other->GBias_ = GBias_;
  other->GlyphsUsed_ = GlyphsUsed_;
  other->NewCharStringsIndex_ = NewCharStringsIndex_;
  other->NewGSubrsIndex_ = NewGSubrsIndex_;
  other->NewLSubrsIndex_ = NewLSubrsIndex_;
  other->NewSubrsIndexNonCID_ = NewSubrsIndexNonCID_;
  other->NumOfHints_ = NumOfHints_;
  other->OutputList_ = OutputList_;
  other->glyphsInList_ = glyphsInList_;
  other->hGSubrsUsed_ = hGSubrsUsed_;
  other->hSubrsUsed_ = hSubrsUsed_;
  other->hSubrsUsedNonCID_ = hSubrsUsedNonCID_;
  other->lGSubrsUsed_ = lGSubrsUsed_;
  other->lSubrsUsed_ = lSubrsUsed_;
  other->lSubrsUsedNonCID_ = lSubrsUsedNonCID_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfCFFFontSubset class]) {
    ComItextpdfTextPdfCFFFontSubset_SubrsFunctions_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 70
      @"RESERVED_0", @"hstem", @"RESERVED_2", @"vstem", @"vmoveto", @"rlineto", @"hlineto", @"vlineto",
#line 71
      @"rrcurveto", @"RESERVED_9", @"callsubr", @"return", @"escape", @"RESERVED_13",
#line 72
      @"endchar", @"RESERVED_15", @"RESERVED_16", @"RESERVED_17", @"hstemhm", @"hintmask",
#line 73
      @"cntrmask", @"rmoveto", @"hmoveto", @"vstemhm", @"rcurveline", @"rlinecurve", @"vvcurveto",
#line 74
      @"hhcurveto", @"shortint", @"callgsubr", @"vhcurveto", @"hvcurveto" } count:32 type:[IOSClass classWithClass:[NSString class]]];
      ComItextpdfTextPdfCFFFontSubset_SubrsEscapeFuncs_ = [IOSObjectArray arrayWithObjects:(id[]){
#line 80
        @"RESERVED_0", @"RESERVED_1", @"RESERVED_2", @"and", @"or", @"not", @"RESERVED_6",
#line 81
        @"RESERVED_7", @"RESERVED_8", @"abs", @"add", @"sub", @"div", @"RESERVED_13", @"neg",
#line 82
        @"eq", @"RESERVED_16", @"RESERVED_17", @"drop", @"RESERVED_19", @"put", @"get", @"ifelse",
#line 83
        @"random", @"mul", @"RESERVED_25", @"sqrt", @"dup", @"exch", @"index", @"roll", @"RESERVED_31",
#line 84
        @"RESERVED_32", @"RESERVED_33", @"hflex", @"flex", @"hflex1", @"flex1", @"RESERVED_REST" } count:39 type:[IOSClass classWithClass:[NSString class]]];
        ComItextpdfTextPdfCFFFontSubset_initialized = YES;
      }
    }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfRandomAccessFileOrArray:withJavaUtilHashMap:", "CFFFontSubset", NULL, 0x1, NULL },
    { "CountCharsetWithInt:withInt:", "CountCharset", "I", 0x0, NULL },
    { "CountRangeWithInt:withInt:", "CountRange", "I", 0x0, NULL },
    { "readFDSelectWithInt:", "readFDSelect", "V", 0x4, NULL },
    { "BuildFDArrayUsedWithInt:", "BuildFDArrayUsed", "V", 0x4, NULL },
    { "ReadFDArrayWithInt:", "ReadFDArray", "V", 0x4, NULL },
    { "ProcessWithNSString:", "Process", "[B", 0x1, "Ljava.io.IOException;" },
    { "CalcBiasWithInt:withInt:", "CalcBias", "I", 0x4, NULL },
    { "BuildNewCharStringWithInt:", "BuildNewCharString", "V", 0x4, "Ljava.io.IOException;" },
    { "BuildNewLGSubrsWithInt:", "BuildNewLGSubrs", "V", 0x4, "Ljava.io.IOException;" },
    { "BuildFDSubrsOffsetsWithInt:withInt:", "BuildFDSubrsOffsets", "V", 0x4, NULL },
    { "BuildSubrUsedWithInt:withInt:withInt:withIntArray:withJavaUtilHashMap:withJavaUtilArrayList:", "BuildSubrUsed", "V", 0x4, NULL },
    { "BuildGSubrsUsedWithInt:", "BuildGSubrsUsed", "V", 0x4, NULL },
    { "ReadASubrWithInt:withInt:withInt:withInt:withJavaUtilHashMap:withJavaUtilArrayList:withIntArray:", "ReadASubr", "V", 0x4, NULL },
    { "HandelStack", NULL, "V", 0x4, NULL },
    { "StackOpp", NULL, "I", 0x4, NULL },
    { "EmptyStack", NULL, "V", 0x4, NULL },
    { "PopStack", NULL, "V", 0x4, NULL },
    { "PushStack", NULL, "V", 0x4, NULL },
    { "ReadCommand", NULL, "V", 0x4, NULL },
    { "CalcHintsWithInt:withInt:withInt:withInt:withIntArray:", "CalcHints", "I", 0x4, NULL },
    { "BuildNewIndexWithIntArray:withJavaUtilHashMap:withByte:", "BuildNewIndex", "[B", 0x4, "Ljava.io.IOException;" },
    { "AssembleIndexWithIntArray:withByteArray:", "AssembleIndex", "[B", 0x4, NULL },
    { "BuildNewFileWithInt:", "BuildNewFile", "[B", 0x4, NULL },
    { "CopyHeader", NULL, "V", 0x4, NULL },
    { "BuildIndexHeaderWithInt:withInt:withInt:", "BuildIndexHeader", "V", 0x4, NULL },
    { "CreateKeysWithComItextpdfTextPdfCFFFont_OffsetItem:withComItextpdfTextPdfCFFFont_OffsetItem:withComItextpdfTextPdfCFFFont_OffsetItem:withComItextpdfTextPdfCFFFont_OffsetItem:", "CreateKeys", "V", 0x4, NULL },
    { "CreateNewStringIndexWithInt:", "CreateNewStringIndex", "V", 0x4, NULL },
    { "CreateFDSelectWithComItextpdfTextPdfCFFFont_OffsetItem:withInt:", "CreateFDSelect", "V", 0x4, NULL },
    { "CreateCharsetWithComItextpdfTextPdfCFFFont_OffsetItem:withInt:", "CreateCharset", "V", 0x4, NULL },
    { "CreateFDArrayWithComItextpdfTextPdfCFFFont_OffsetItem:withComItextpdfTextPdfCFFFont_OffsetItem:withInt:", "CreateFDArray", "V", 0x4, NULL },
    { "ReconstructWithInt:", "Reconstruct", "V", 0x0, NULL },
    { "ReconstructFDArrayWithInt:withComItextpdfTextPdfCFFFont_OffsetItemArray:", "ReconstructFDArray", "V", 0x0, NULL },
    { "ReconstructPrivateDictWithInt:withComItextpdfTextPdfCFFFont_OffsetItemArray:withComItextpdfTextPdfCFFFont_IndexBaseItemArray:withComItextpdfTextPdfCFFFont_OffsetItemArray:", "ReconstructPrivateDict", "V", 0x0, NULL },
    { "ReconstructPrivateSubrsWithInt:withComItextpdfTextPdfCFFFont_IndexBaseItemArray:withComItextpdfTextPdfCFFFont_OffsetItemArray:", "ReconstructPrivateSubrs", "V", 0x0, NULL },
    { "CalcSubrOffsetSizeWithInt:withInt:", "CalcSubrOffsetSize", "I", 0x0, NULL },
    { "countEntireIndexRangeWithInt:", "countEntireIndexRange", "I", 0x4, NULL },
    { "CreateNonCIDPrivateWithInt:withComItextpdfTextPdfCFFFont_OffsetItem:", "CreateNonCIDPrivate", "V", 0x0, NULL },
    { "CreateNonCIDSubrsWithInt:withComItextpdfTextPdfCFFFont_IndexBaseItem:withComItextpdfTextPdfCFFFont_OffsetItem:", "CreateNonCIDSubrs", "V", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SubrsFunctions_", NULL, 0x18, "[Ljava.lang.String;", &ComItextpdfTextPdfCFFFontSubset_SubrsFunctions_,  },
    { "SubrsEscapeFuncs_", NULL, 0x18, "[Ljava.lang.String;", &ComItextpdfTextPdfCFFFontSubset_SubrsEscapeFuncs_,  },
    { "ENDCHAR_OP_", NULL, 0x18, "B", NULL, .constantValue.asChar = ComItextpdfTextPdfCFFFontSubset_ENDCHAR_OP },
    { "RETURN_OP_", NULL, 0x18, "B", NULL, .constantValue.asChar = ComItextpdfTextPdfCFFFontSubset_RETURN_OP },
    { "GlyphsUsed_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "glyphsInList_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "FDArrayUsed_", NULL, 0x0, "Ljava.util.HashSet;", NULL,  },
    { "hSubrsUsed_", NULL, 0x0, "[Ljava.util.HashMap;", NULL,  },
    { "lSubrsUsed_", NULL, 0x0, "[Ljava.util.ArrayList;", NULL,  },
    { "hGSubrsUsed_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "lGSubrsUsed_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "hSubrsUsedNonCID_", NULL, 0x0, "Ljava.util.HashMap;", NULL,  },
    { "lSubrsUsedNonCID_", NULL, 0x0, "Ljava.util.ArrayList;", NULL,  },
    { "NewLSubrsIndex_", NULL, 0x0, "[[B", NULL,  },
    { "NewSubrsIndexNonCID_", NULL, 0x0, "[B", NULL,  },
    { "NewGSubrsIndex_", NULL, 0x0, "[B", NULL,  },
    { "NewCharStringsIndex_", NULL, 0x0, "[B", NULL,  },
    { "GBias_", NULL, 0x0, "I", NULL,  },
    { "OutputList_", NULL, 0x0, "Ljava.util.LinkedList;", NULL,  },
    { "NumOfHints_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfCFFFontSubset = { "CFFFontSubset", "com.itextpdf.text.pdf", NULL, 0x1, 39, methods, 20, fields, 0, NULL};
  return &_ComItextpdfTextPdfCFFFontSubset;
}

@end
