//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPRow.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfPRow.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/log/Logger.h"
#include "com/itextpdf/text/log/LoggerFactory.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/ColumnText.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfPCell.h"
#include "com/itextpdf/text/pdf/PdfPCellEvent.h"
#include "com/itextpdf/text/pdf/PdfPHeaderCell.h"
#include "com/itextpdf/text/pdf/PdfPRow.h"
#include "com/itextpdf/text/pdf/PdfPTable.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"


#line 59
@implementation ComItextpdfTextPdfPdfPRow


#line 101
- (instancetype)initWithComItextpdfTextPdfPdfPCellArray:(IOSObjectArray *)cells {
  return
#line 102
  [self initComItextpdfTextPdfPdfPRowWithComItextpdfTextPdfPdfPCellArray:cells withComItextpdfTextPdfPdfPRow:nil];
}


#line 105
- (instancetype)initComItextpdfTextPdfPdfPRowWithComItextpdfTextPdfPdfPCellArray:(IOSObjectArray *)cells
                                                   withComItextpdfTextPdfPdfPRow:(ComItextpdfTextPdfPdfPRow *)source {
  if (self = [super init]) {
    LOGGER_ =
#line 61
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPRow class]]];
    mayNotBreak_ =
#line 64
    NO;
    maxHeight_ =
#line 84
    0;
    calculated_ =
#line 86
    NO;
    adjusted_ =
#line 87
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_TR_();
    accessibleAttributes_ =
#line 92
    nil;
    id__ =
#line 93
    [[ComItextpdfTextAccessibleElementId alloc] init];
    self->cells_ = cells;
    
#line 107
    widths_ = [IOSFloatArray arrayWithLength:((IOSObjectArray *) nil_chk(cells))->size_];
    
#line 108
    [self initExtraHeights];
    
#line 109
    if (source != nil) {
      self->id__ = source->id__;
      self->role_ = source->role_;
      if (source->accessibleAttributes_ != nil)
#line 113
      self->accessibleAttributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:source->accessibleAttributes_];
    }
  }
  return self;
}

- (instancetype)initWithComItextpdfTextPdfPdfPCellArray:(IOSObjectArray *)cells
                          withComItextpdfTextPdfPdfPRow:(ComItextpdfTextPdfPdfPRow *)source {
  return [self initComItextpdfTextPdfPdfPRowWithComItextpdfTextPdfPdfPCellArray:
#line 105
cells withComItextpdfTextPdfPdfPRow:source];
}


#line 122
- (instancetype)initWithComItextpdfTextPdfPdfPRow:(ComItextpdfTextPdfPdfPRow *)row {
  if (self = [super init]) {
    LOGGER_ =
#line 61
    [ComItextpdfTextLogLoggerFactory getLoggerWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPRow class]]];
    mayNotBreak_ =
#line 64
    NO;
    maxHeight_ =
#line 84
    0;
    calculated_ =
#line 86
    NO;
    adjusted_ =
#line 87
    NO;
    role_ = ComItextpdfTextPdfPdfName_get_TR_();
    accessibleAttributes_ =
#line 92
    nil;
    id__ =
#line 93
    [[ComItextpdfTextAccessibleElementId alloc] init];
    
#line 123
    mayNotBreak_ = ((ComItextpdfTextPdfPdfPRow *) nil_chk(row))->mayNotBreak_;
    
#line 124
    maxHeight_ = row->maxHeight_;
    
#line 125
    calculated_ = row->calculated_;
    
#line 126
    cells_ = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(row->cells_))->size_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPCell class]]];
    
#line 127
    for (jint k = 0; k < cells_->size_; ++k) {
      if (IOSObjectArray_Get(row->cells_, k) != nil) {
        if ([IOSObjectArray_Get(row->cells_, k) isKindOfClass:[ComItextpdfTextPdfPdfPHeaderCell class]])
#line 130
        IOSObjectArray_SetAndConsume(cells_, k, [[ComItextpdfTextPdfPdfPHeaderCell alloc] initWithComItextpdfTextPdfPdfPHeaderCell:(ComItextpdfTextPdfPdfPHeaderCell *) check_class_cast(IOSObjectArray_Get(row->cells_, k), [ComItextpdfTextPdfPdfPHeaderCell class])]);
        else
#line 132
        IOSObjectArray_SetAndConsume(cells_, k, [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPdfPdfPCell:IOSObjectArray_Get(row->cells_, k)]);
      }
    }
    
#line 135
    widths_ = [IOSFloatArray arrayWithLength:cells_->size_];
    
#line 136
    [JavaLangSystem arraycopyWithId:row->widths_ withInt:0 withId:widths_ withInt:0 withInt:cells_->size_];
    
#line 137
    [self initExtraHeights];
    
#line 138
    self->id__ = row->id__;
    
#line 139
    self->role_ = row->role_;
    
#line 140
    if (row->accessibleAttributes_ != nil)
#line 141
    self->accessibleAttributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:row->accessibleAttributes_];
  }
  return self;
}


#line 150
- (jboolean)setWidthsWithFloatArray:(IOSFloatArray *)widths {
  
#line 151
  if (((IOSFloatArray *) nil_chk(widths))->size_ != ((IOSObjectArray *) nil_chk(cells_))->size_)
#line 152
  return NO;
  [JavaLangSystem arraycopyWithId:widths withInt:0 withId:self->widths_ withInt:0 withInt:cells_->size_];
  jfloat total = 0;
  calculated_ = NO;
  for (jint k = 0; k < widths->size_; ++k) {
    ComItextpdfTextPdfPdfPCell *cell = IOSObjectArray_Get(cells_, k);
    
#line 159
    if (cell == nil) {
      total += IOSFloatArray_Get(widths, k);
      continue;
    }
    
#line 164
    [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) setLeftWithFloat:total];
    jint last = k + [cell getColspan];
    for (; k < last; ++k)
#line 167
    total += IOSFloatArray_Get(widths, k);
    --k;
    [cell setRightWithFloat:total];
    [cell setTopWithFloat:0];
  }
  return YES;
}


#line 179
- (void)initExtraHeights {
  
#line 180
  extraHeights_ = [IOSFloatArray arrayWithLength:((IOSObjectArray *) nil_chk(cells_))->size_];
  for (jint i = 0; i < extraHeights_->size_; i++) {
    *IOSFloatArray_GetRef(extraHeights_, i) = 0;
  }
}


#line 192
- (void)setExtraHeightWithInt:(jint)cell
                    withFloat:(jfloat)height {
  
#line 193
  if (cell < 0 || cell >= ((IOSObjectArray *) nil_chk(cells_))->size_)
#line 194
  return;
  *IOSFloatArray_GetRef(nil_chk(extraHeights_), cell) = height;
}


#line 201
- (void)calculateHeights {
  maxHeight_ = 0;
  for (jint k = 0; k < ((IOSObjectArray *) nil_chk(cells_))->size_; ++k) {
    ComItextpdfTextPdfPdfPCell *cell = IOSObjectArray_Get(cells_, k);
    jfloat height = 0;
    if (cell == nil) {
      continue;
    }
    else {
      height = [cell getMaxHeight];
      if ((height > maxHeight_) && ([cell getRowspan] == 1))
#line 212
      maxHeight_ = height;
    }
  }
  calculated_ = YES;
}


#line 221
- (void)setMayNotBreakWithBoolean:(jboolean)mayNotBreak {
  
#line 222
  self->mayNotBreak_ = mayNotBreak;
}


#line 228
- (jboolean)isMayNotBreak {
  
#line 229
  return mayNotBreak_;
}


#line 242
- (void)writeBorderAndBackgroundWithFloat:(jfloat)xPos
                                withFloat:(jfloat)yPos
                                withFloat:(jfloat)currentMaxHeight
           withComItextpdfTextPdfPdfPCell:(ComItextpdfTextPdfPdfPCell *)cell
withComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 243
  ComItextpdfTextBaseColor *background = [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) getBackgroundColor];
  if (background != nil || [cell hasBorders]) {
    
#line 246
    jfloat right = [cell getRight] + xPos;
    jfloat top = [cell getTop] + yPos;
    jfloat left = [cell getLeft] + xPos;
    jfloat bottom = top - currentMaxHeight;
    
#line 251
    if (background != nil) {
      ComItextpdfTextPdfPdfContentByte *backgr = IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_BACKGROUNDCANVAS);
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(backgr)) setColorFillWithComItextpdfTextBaseColor:background];
      [backgr rectangleWithFloat:left withFloat:bottom withFloat:right - left withFloat:top - bottom];
      [backgr fill];
    }
    if ([cell hasBorders]) {
      ComItextpdfTextRectangle *newRect = [[ComItextpdfTextRectangle alloc] initWithFloat:left withFloat:bottom withFloat:right withFloat:top];
      
#line 260
      [newRect cloneNonPositionParametersWithComItextpdfTextRectangle:cell];
      [newRect setBackgroundColorWithComItextpdfTextBaseColor:nil];
      
#line 263
      ComItextpdfTextPdfPdfContentByte *lineCanvas = IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_LINECANVAS);
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(lineCanvas)) rectangleWithComItextpdfTextRectangle:newRect];
    }
  }
}


#line 272
- (void)saveAndRotateCanvasesWithComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases
                                                             withFloat:(jfloat)a
                                                             withFloat:(jfloat)b
                                                             withFloat:(jfloat)c
                                                             withFloat:(jfloat)d
                                                             withFloat:(jfloat)e
                                                             withFloat:(jfloat)f {
  
#line 273
  jint last = ComItextpdfTextPdfPdfPTable_TEXTCANVAS + 1;
  if (canvasesPos_ == nil)
#line 275
  canvasesPos_ = [IOSIntArray arrayWithLength:last * 2];
  for (jint k = 0; k < last; ++k) {
    ComItextpdfTextPdfByteBuffer *bb = [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(nil_chk(canvases), k))) getInternalBuffer];
    *IOSIntArray_GetRef(nil_chk(canvasesPos_), k * 2) = [((ComItextpdfTextPdfByteBuffer *) nil_chk(bb)) size];
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, k))) saveState];
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, k))) concatCTMWithFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f];
    *IOSIntArray_GetRef(canvasesPos_, k * 2 + 1) = [bb size];
  }
}


#line 288
- (void)restoreCanvasesWithComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 289
  jint last = ComItextpdfTextPdfPdfPTable_TEXTCANVAS + 1;
  for (jint k = 0; k < last; ++k) {
    ComItextpdfTextPdfByteBuffer *bb = [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(nil_chk(canvases), k))) getInternalBuffer];
    jint p1 = [((ComItextpdfTextPdfByteBuffer *) nil_chk(bb)) size];
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, k))) restoreState];
    if (p1 == IOSIntArray_Get(nil_chk(canvasesPos_), k * 2 + 1))
#line 295
    [bb setSizeWithInt:IOSIntArray_Get(canvasesPos_, k * 2)];
  }
}

+ (jfloat)setColumnWithComItextpdfTextPdfColumnText:(ComItextpdfTextPdfColumnText *)ct
                                          withFloat:(jfloat)left
                                          withFloat:(jfloat)bottom
                                          withFloat:(jfloat)right
                                          withFloat:(jfloat)top {
  
#line 303
  if (left > right)
#line 304
  right = left;
  if (bottom > top)
#line 306
  top = bottom;
  [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) setSimpleColumnWithFloat:left withFloat:bottom withFloat:right withFloat:top];
  return top;
}


#line 325
- (void)writeCellsWithInt:(jint)colStart
                  withInt:(jint)colEnd
                withFloat:(jfloat)xPos
                withFloat:(jfloat)yPos
withComItextpdfTextPdfPdfContentByteArray:(IOSObjectArray *)canvases
              withBoolean:(jboolean)reusable {
  
#line 326
  if (!calculated_)
#line 327
  [self calculateHeights];
  if (colEnd < 0)
#line 329
  colEnd = ((IOSObjectArray *) nil_chk(cells_))->size_;
  else
#line 331
  colEnd = [JavaLangMath minWithInt:colEnd withInt:((IOSObjectArray *) nil_chk(cells_))->size_];
  if (colStart < 0)
#line 333
  colStart = 0;
  if (colStart >= colEnd)
#line 335
  return;
  
#line 337
  jint newStart;
  for (newStart = colStart; newStart >= 0; --newStart) {
    if (IOSObjectArray_Get(nil_chk(cells_), newStart) != nil)
#line 340
    break;
    if (newStart > 0)
#line 342
    xPos -= IOSFloatArray_Get(nil_chk(widths_), newStart - 1);
  }
  
#line 345
  if (newStart < 0)
#line 346
  newStart = 0;
  if (IOSObjectArray_Get(nil_chk(cells_), newStart) != nil)
#line 348
  xPos -= [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(cells_, newStart))) getLeft];
  
#line 350
  if ([ComItextpdfTextPdfPdfPRow isTaggedWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(nil_chk(canvases), ComItextpdfTextPdfPdfPTable_TEXTCANVAS)]) {
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:self];
  }
  for (jint k = newStart; k < colEnd; ++k) {
    ComItextpdfTextPdfPdfPCell *cell = IOSObjectArray_Get(cells_, k);
    if (cell == nil)
#line 356
    continue;
    if ([ComItextpdfTextPdfPdfPRow isTaggedWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS)]) {
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:cell];
    }
    jfloat currentMaxHeight = maxHeight_ + IOSFloatArray_Get(nil_chk(extraHeights_), k);
    
#line 362
    [self writeBorderAndBackgroundWithFloat:xPos withFloat:yPos withFloat:currentMaxHeight withComItextpdfTextPdfPdfPCell:cell withComItextpdfTextPdfPdfContentByteArray:canvases];
    
#line 364
    ComItextpdfTextImage *img = [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) getImage];
    
#line 366
    jfloat tly = [cell getTop] + yPos - [cell getEffectivePaddingTop];
    if ([cell getHeight] <= currentMaxHeight) {
      switch ([cell getVerticalAlignment]) {
        case ComItextpdfTextElement_ALIGN_BOTTOM:
        tly = [cell getTop] + yPos - currentMaxHeight + [cell getHeight] -
#line 371
        [cell getEffectivePaddingTop];
        break;
        case ComItextpdfTextElement_ALIGN_MIDDLE:
        tly = [cell getTop] + yPos + ([cell getHeight] - currentMaxHeight) / 2 -
#line 375
        [cell getEffectivePaddingTop];
        break;
        default:
        break;
      }
    }
    if (img != nil) {
      if ([cell getRotation] != 0) {
        img = [ComItextpdfTextImage getInstanceWithComItextpdfTextImage:img];
        [img setRotationWithFloat:[((ComItextpdfTextImage *) nil_chk(img)) getImageRotation] + (jfloat) ([cell getRotation] * JavaLangMath_PI / 180.0)];
      }
      jboolean vf = NO;
      if ([cell getHeight] > currentMaxHeight) {
        if (![((ComItextpdfTextImage *) nil_chk(img)) isScaleToFitHeight]) {
          continue;
        }
        [img scalePercentWithFloat:100];
        jfloat scale_ = (currentMaxHeight - [cell getEffectivePaddingTop] - [cell getEffectivePaddingBottom]) /
#line 394
        [img getScaledHeight];
        [img scalePercentWithFloat:scale_ * 100];
        vf = YES;
      }
      jfloat left = [cell getLeft] + xPos +
#line 399
      [cell getEffectivePaddingLeft];
      if (vf) {
        switch ([cell getHorizontalAlignment]) {
          case ComItextpdfTextElement_ALIGN_CENTER:
          left = xPos +
#line 404
          ([cell getLeft] + [cell getEffectivePaddingLeft] +
#line 405
          [cell getRight] -
#line 406
          [cell getEffectivePaddingRight] - [((ComItextpdfTextImage *) nil_chk(img)) getScaledWidth]) /
#line 407
          2;
          break;
          case ComItextpdfTextElement_ALIGN_RIGHT:
          left = xPos + [cell getRight] -
#line 411
          [cell getEffectivePaddingRight] -
#line 412
          [((ComItextpdfTextImage *) nil_chk(img)) getScaledWidth];
          break;
          default:
          break;
        }
        tly = [cell getTop] + yPos - [cell getEffectivePaddingTop];
      }
      [img setAbsolutePositionWithFloat:left withFloat:tly - [((ComItextpdfTextImage *) nil_chk(img)) getScaledHeight]];
      @try {
        if ([ComItextpdfTextPdfPdfPRow isTaggedWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS)]) {
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) openMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:img];
        }
        [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) addImageWithComItextpdfTextImage:img];
        if ([ComItextpdfTextPdfPdfPRow isTaggedWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS)]) {
          [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:img];
        }
      }
      @catch (
#line 428
      ComItextpdfTextDocumentException *e) {
        @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
      }
    }
    else {
      if ([cell getRotation] == 90 || [cell getRotation] == 270) {
        jfloat netWidth = currentMaxHeight - [cell getEffectivePaddingTop] - [cell getEffectivePaddingBottom];
        jfloat netHeight = [cell getWidth] - [cell getEffectivePaddingLeft] - [cell getEffectivePaddingRight];
        ComItextpdfTextPdfColumnText *ct = [ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:[cell getColumn]];
        [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) setCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases];
        [ct setSimpleColumnWithFloat:0 withFloat:0 withFloat:netWidth + 0.001f withFloat:-netHeight];
        @try {
          [ct goWithBoolean:YES];
        }
        @catch (
#line 441
        ComItextpdfTextDocumentException *e) {
          @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
        }
        jfloat calcHeight = -[ct getYLine];
        if (netWidth <= 0 || netHeight <= 0)
#line 446
        calcHeight = 0;
        if (calcHeight > 0) {
          if ([cell isUseDescender])
#line 449
          calcHeight -= [ct getDescender];
          if (reusable)
#line 451
          ct = [ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:[cell getColumn]];
          else
#line 453
          ct = [cell getColumn];
          [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) setCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases];
          [ct setSimpleColumnWithFloat:-0.003f withFloat:-0.001f withFloat:netWidth + 0.003f withFloat:calcHeight];
          jfloat pivotX;
          jfloat pivotY;
          if ([cell getRotation] == 90) {
            pivotY = [cell getTop] + yPos - currentMaxHeight + [cell getEffectivePaddingBottom];
            switch ([cell getVerticalAlignment]) {
              case ComItextpdfTextElement_ALIGN_BOTTOM:
              pivotX = [cell getLeft] + xPos + [cell getWidth] - [cell getEffectivePaddingRight];
              break;
              case ComItextpdfTextElement_ALIGN_MIDDLE:
              pivotX = [cell getLeft] + xPos + ([cell getWidth] + [cell getEffectivePaddingLeft] - [cell getEffectivePaddingRight] + calcHeight) / 2;
              break;
              default:
              pivotX = [cell getLeft] + xPos + [cell getEffectivePaddingLeft] + calcHeight;
              break;
            }
            [self saveAndRotateCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases withFloat:0 withFloat:1 withFloat:-1 withFloat:0 withFloat:pivotX withFloat:pivotY];
          }
          else {
            pivotY = [cell getTop] + yPos - [cell getEffectivePaddingTop];
            switch ([cell getVerticalAlignment]) {
              case ComItextpdfTextElement_ALIGN_BOTTOM:
              pivotX = [cell getLeft] + xPos + [cell getEffectivePaddingLeft];
              break;
              case ComItextpdfTextElement_ALIGN_MIDDLE:
              pivotX = [cell getLeft] + xPos + ([cell getWidth] + [cell getEffectivePaddingLeft] - [cell getEffectivePaddingRight] - calcHeight) / 2;
              break;
              default:
              pivotX = [cell getLeft] + xPos + [cell getWidth] - [cell getEffectivePaddingRight] - calcHeight;
              break;
            }
            [self saveAndRotateCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases withFloat:0 withFloat:-1 withFloat:1 withFloat:0 withFloat:pivotX withFloat:pivotY];
          }
          @try {
            [ct go];
          }
          @catch (
#line 490
          ComItextpdfTextDocumentException *e) {
            @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
          }
          @finally {
            
#line 493
            [self restoreCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases];
          }
        }
      }
      else {
        jfloat fixedHeight = [cell getFixedHeight];
        jfloat rightLimit = [cell getRight] + xPos -
#line 500
        [cell getEffectivePaddingRight];
        jfloat leftLimit = [cell getLeft] + xPos +
#line 502
        [cell getEffectivePaddingLeft];
        if ([cell isNoWrap]) {
          switch ([cell getHorizontalAlignment]) {
            case ComItextpdfTextElement_ALIGN_CENTER:
            rightLimit += 10000;
            leftLimit -= 10000;
            break;
            case ComItextpdfTextElement_ALIGN_RIGHT:
            if ([cell getRotation] == 180) {
              rightLimit += ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT;
            }
            else {
              leftLimit -= ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT;
            }
            break;
            default:
            if ([cell getRotation] == 180) {
              leftLimit -= ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT;
            }
            else {
              rightLimit += ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT;
            }
            break;
          }
        }
        ComItextpdfTextPdfColumnText *ct;
        if (reusable)
#line 529
        ct = [ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:[cell getColumn]];
        else
#line 531
        ct = [cell getColumn];
        [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) setCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases];
        jfloat bry = tly -
#line 534
        (currentMaxHeight -
#line 535
        [cell getEffectivePaddingTop] - [cell getEffectivePaddingBottom]);
        if (fixedHeight > 0) {
          if ([cell getHeight] > currentMaxHeight) {
            tly = [cell getTop] + yPos - [cell getEffectivePaddingTop];
            bry = [cell getTop] + yPos - currentMaxHeight + [cell getEffectivePaddingBottom];
          }
        }
        if ((tly > bry || [ct zeroHeightElement]) && leftLimit < rightLimit) {
          [ct setSimpleColumnWithFloat:leftLimit withFloat:bry - 0.001f withFloat:rightLimit withFloat:tly];
          if ([cell getRotation] == 180) {
            jfloat shx = leftLimit + rightLimit;
            jfloat shy = yPos + yPos - currentMaxHeight + [cell getEffectivePaddingBottom] - [cell getEffectivePaddingTop];
            [self saveAndRotateCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases withFloat:-1 withFloat:0 withFloat:0 withFloat:-1 withFloat:shx withFloat:shy];
          }
          @try {
            [ct go];
          }
          @catch (
#line 551
          ComItextpdfTextDocumentException *e) {
            @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
          }
          @finally {
            
#line 554
            if ([cell getRotation] == 180) {
              [self restoreCanvasesWithComItextpdfTextPdfPdfContentByteArray:canvases];
            }
          }
        }
      }
    }
    id<ComItextpdfTextPdfPdfPCellEvent> evt = [cell getCellEvent];
    if (evt != nil) {
      ComItextpdfTextRectangle *rect = [[ComItextpdfTextRectangle alloc] initWithFloat:[cell getLeft] + xPos withFloat:[cell getTop] +
#line 564
      yPos - currentMaxHeight withFloat:[cell getRight] + xPos withFloat:[cell getTop] +
#line 565
      yPos];
      [evt cellLayoutWithComItextpdfTextPdfPdfPCell:cell withComItextpdfTextRectangle:rect withComItextpdfTextPdfPdfContentByteArray:canvases];
    }
    if ([ComItextpdfTextPdfPdfPRow isTaggedWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS)]) {
      [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:cell];
    }
  }
  if ([ComItextpdfTextPdfPdfPRow isTaggedWithComItextpdfTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS)]) {
    [((ComItextpdfTextPdfPdfContentByte *) nil_chk(IOSObjectArray_Get(canvases, ComItextpdfTextPdfPdfPTable_TEXTCANVAS))) closeMCBlockWithComItextpdfTextPdfInterfacesIAccessibleElement:self];
  }
}


#line 582
- (jboolean)isCalculated {
  
#line 583
  return calculated_;
}


#line 591
- (jfloat)getMaxHeights {
  
#line 592
  if (!calculated_)
#line 593
  [self calculateHeights];
  return maxHeight_;
}


#line 603
- (void)setMaxHeightsWithFloat:(jfloat)maxHeight {
  
#line 604
  self->maxHeight_ = maxHeight;
}

- (IOSFloatArray *)getEventWidthWithFloat:(jfloat)xPos
                           withFloatArray:(IOSFloatArray *)absoluteWidths {
  
#line 610
  jint n = 1;
  for (jint k = 0; k < ((IOSObjectArray *) nil_chk(cells_))->size_; ) {
    if (IOSObjectArray_Get(cells_, k) != nil) {
      n++;
      k += [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(cells_, k))) getColspan];
    }
    else {
      while (k < cells_->size_ && IOSObjectArray_Get(cells_, k) == nil) {
        n++;
        k++;
      }
    }
  }
  IOSFloatArray *width = [IOSFloatArray arrayWithLength:n];
  *IOSFloatArray_GetRef(width, 0) = xPos;
  n = 1;
  for (jint k = 0; k < cells_->size_ && n < width->size_; ) {
    if (IOSObjectArray_Get(cells_, k) != nil) {
      jint colspan = [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(cells_, k))) getColspan];
      *IOSFloatArray_GetRef(width, n) = IOSFloatArray_Get(width, n - 1);
      for (jint i = 0; i < colspan && k < ((IOSFloatArray *) nil_chk(absoluteWidths))->size_; i++) {
        *IOSFloatArray_GetRef(width, n) += IOSFloatArray_Get(nil_chk(absoluteWidths), k++);
      }
      n++;
    }
    else {
      *IOSFloatArray_GetRef(width, n) = IOSFloatArray_Get(width, n - 1);
      while (k < cells_->size_ && IOSObjectArray_Get(cells_, k) == nil) {
        *IOSFloatArray_GetRef(width, n) += IOSFloatArray_Get(nil_chk(absoluteWidths), k++);
      }
      n++;
    }
  }
  return width;
}


#line 653
- (void)copyRowContentWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table
                                              withInt:(jint)idx {
  
#line 654
  if (table == nil) {
    return;
  }
  ComItextpdfTextPdfPdfPCell *copy_;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(cells_))->size_; ++i) {
    jint lastRow = idx;
    copy_ = IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk([((ComItextpdfTextPdfPdfPTable *) nil_chk(table)) getRowWithInt:lastRow])) getCells]), i);
    while (copy_ == nil && lastRow > 0) {
      copy_ = IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk([table getRowWithInt:--lastRow])) getCells]), i);
    }
    if (IOSObjectArray_Get(cells_, i) != nil && copy_ != nil) {
      [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(cells_, i))) setColumnWithComItextpdfTextPdfColumnText:[copy_ getColumn]];
      self->calculated_ = NO;
    }
  }
}


#line 680
- (ComItextpdfTextPdfPdfPRow *)splitRowWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)table
                                                               withInt:(jint)rowIndex
                                                             withFloat:(jfloat)new_height {
  
#line 681
  [((id<ComItextpdfTextLogLogger>) nil_chk(LOGGER_)) infoWithNSString:JreStrcat("$ICF", @"Splitting ", rowIndex, ' ', new_height)];
  
#line 683
  IOSObjectArray *newCells = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(cells_))->size_ type:[IOSClass classWithClass:[ComItextpdfTextPdfPdfPCell class]]];
  IOSFloatArray *fixHs = [IOSFloatArray arrayWithLength:cells_->size_];
  IOSFloatArray *minHs = [IOSFloatArray arrayWithLength:cells_->size_];
  jboolean allEmpty = YES;
  
#line 688
  for (jint k = 0; k < cells_->size_; ++k) {
    jfloat newHeight = new_height;
    ComItextpdfTextPdfPdfPCell *cell = IOSObjectArray_Get(cells_, k);
    if (cell == nil) {
      jint index = rowIndex;
      if ([((ComItextpdfTextPdfPdfPTable *) nil_chk(table)) rowSpanAboveWithInt:index withInt:k]) {
        while ([table rowSpanAboveWithInt:--index withInt:k]) {
          newHeight += [((ComItextpdfTextPdfPdfPRow *) nil_chk([table getRowWithInt:index])) getMaxHeights];
        }
        ComItextpdfTextPdfPdfPRow *row = [table getRowWithInt:index];
        if (row != nil && IOSObjectArray_Get(nil_chk([row getCells]), k) != nil) {
          IOSObjectArray_SetAndConsume(newCells, k, [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPdfPdfPCell:IOSObjectArray_Get(nil_chk([row getCells]), k)]);
          [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(newCells, k))) setColumnWithComItextpdfTextPdfColumnText:nil];
          [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(newCells, k))) setRowspanWithInt:[((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(nil_chk([row getCells]), k))) getRowspan] - rowIndex + index];
          allEmpty = NO;
        }
      }
      continue;
    }
    *IOSFloatArray_GetRef(fixHs, k) = [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) getFixedHeight];
    *IOSFloatArray_GetRef(minHs, k) = [cell getMinimumHeight];
    ComItextpdfTextImage *img = [cell getImage];
    ComItextpdfTextPdfPdfPCell *newCell = [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPdfPdfPCell:cell];
    if (img != nil) {
      jfloat padding = [cell getEffectivePaddingBottom] + [cell getEffectivePaddingTop] + 2;
      if (([img isScaleToFitHeight] || [img getScaledHeight] + padding < newHeight) &&
#line 714
      newHeight > padding) {
        [newCell setPhraseWithComItextpdfTextPhrase:nil];
        allEmpty = NO;
      }
    }
    else {
      jfloat y;
      ComItextpdfTextPdfColumnText *ct = [ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:[cell getColumn]];
      jfloat left = [cell getLeft] + [cell getEffectivePaddingLeft];
      jfloat bottom = [cell getTop] + [cell getEffectivePaddingBottom] - newHeight;
      jfloat right = [cell getRight] - [cell getEffectivePaddingRight];
      jfloat top = [cell getTop] - [cell getEffectivePaddingTop];
      switch ([cell getRotation]) {
        case 90:
        case 270:
        y = [ComItextpdfTextPdfPdfPRow setColumnWithComItextpdfTextPdfColumnText:ct withFloat:bottom withFloat:left withFloat:top withFloat:right];
        break;
        default:
        y = [ComItextpdfTextPdfPdfPRow setColumnWithComItextpdfTextPdfColumnText:ct withFloat:left withFloat:bottom + 0.00001f withFloat:[cell isNoWrap] ? ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT : right withFloat:top];
        break;
      }
      jint status;
      @try {
        status = [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) goWithBoolean:YES];
      }
      @catch (ComItextpdfTextDocumentException *e) {
        @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
      }
      jboolean thisEmpty = [((ComItextpdfTextPdfColumnText *) nil_chk(ct)) getYLine] == y;
      if (thisEmpty) {
        [newCell setColumnWithComItextpdfTextPdfColumnText:[ComItextpdfTextPdfColumnText duplicateWithComItextpdfTextPdfColumnText:[cell getColumn]]];
        [ct setFilledWidthWithFloat:0];
      }
      else if ((status & ComItextpdfTextPdfColumnText_NO_MORE_TEXT) == 0) {
        [newCell setColumnWithComItextpdfTextPdfColumnText:ct];
        [ct setFilledWidthWithFloat:0];
      }
      else
#line 752
      [newCell setPhraseWithComItextpdfTextPhrase:nil];
      allEmpty = (allEmpty && thisEmpty);
    }
    IOSObjectArray_Set(newCells, k, newCell);
    [cell setFixedHeightWithFloat:newHeight];
  }
  if (allEmpty) {
    for (jint k = 0; k < cells_->size_; ++k) {
      ComItextpdfTextPdfPdfPCell *cell = IOSObjectArray_Get(cells_, k);
      if (cell == nil)
#line 762
      continue;
      if (IOSFloatArray_Get(fixHs, k) > 0)
#line 764
      [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) setFixedHeightWithFloat:IOSFloatArray_Get(fixHs, k)];
      else
#line 766
      [((ComItextpdfTextPdfPdfPCell *) nil_chk(cell)) setMinimumHeightWithFloat:IOSFloatArray_Get(minHs, k)];
    }
    return nil;
  }
  [self calculateHeights];
  ComItextpdfTextPdfPdfPRow *split = [[ComItextpdfTextPdfPdfPRow alloc] initWithComItextpdfTextPdfPdfPCellArray:newCells withComItextpdfTextPdfPdfPRow:self];
  split->widths_ = (IOSFloatArray *) check_class_cast([((IOSFloatArray *) nil_chk(widths_)) clone], [IOSFloatArray class]);
  return split;
}


#line 777
- (jfloat)getMaxRowHeightsWithoutCalculating {
  
#line 778
  return maxHeight_;
}


#line 782
- (void)setFinalMaxHeightsWithFloat:(jfloat)maxHeight {
  [self setMaxHeightsWithFloat:maxHeight];
  calculated_ = YES;
}


#line 796
- (void)splitRowspansWithComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)original
                                             withInt:(jint)originalIdx
                     withComItextpdfTextPdfPdfPTable:(ComItextpdfTextPdfPdfPTable *)part
                                             withInt:(jint)partIdx {
  
#line 797
  if (original == nil || part == nil) {
    return;
  }
  jint i = 0;
  while (i < ((IOSObjectArray *) nil_chk(cells_))->size_) {
    if (IOSObjectArray_Get(cells_, i) == nil) {
      jint splittedRowIdx = [((ComItextpdfTextPdfPdfPTable *) nil_chk(original)) getCellStartRowIndexWithInt:originalIdx withInt:i];
      jint copyRowIdx = [((ComItextpdfTextPdfPdfPTable *) nil_chk(part)) getCellStartRowIndexWithInt:partIdx withInt:i];
      ComItextpdfTextPdfPdfPCell *splitted = IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk([original getRowWithInt:splittedRowIdx])) getCells]),
#line 806
      i);
      ComItextpdfTextPdfPdfPCell *copy_ = IOSObjectArray_Get(nil_chk([((ComItextpdfTextPdfPdfPRow *) nil_chk([part getRowWithInt:copyRowIdx])) getCells]),
#line 808
      i);
      if (splitted != nil) {
        NSAssert((copy_ != nil), @"com/itextpdf/text/pdf/PdfPRow.java:810 condition failed: assert (copy != null);");
        IOSObjectArray_SetAndConsume(cells_, i, [[ComItextpdfTextPdfPdfPCell alloc] initWithComItextpdfTextPdfPdfPCell:copy_]);
        jint rowspanOnPreviousPage = partIdx - copyRowIdx + 1;
        [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(cells_, i))) setRowspanWithInt:[((ComItextpdfTextPdfPdfPCell *) nil_chk(copy_)) getRowspan] - rowspanOnPreviousPage];
        [splitted setRowspanWithInt:rowspanOnPreviousPage];
        self->calculated_ = NO;
      }
      ++i;
    }
    else {
      i += [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(cells_, i))) getColspan];
    }
  }
}


#line 833
- (IOSObjectArray *)getCells {
  
#line 834
  return cells_;
}


#line 841
- (jboolean)hasRowspan {
  
#line 842
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(cells_))->size_; i++) {
    if (IOSObjectArray_Get(cells_, i) != nil && [((ComItextpdfTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(cells_, i))) getRowspan] > 1)
#line 844
    return YES;
  }
  return NO;
}


#line 849
- (jboolean)isAdjusted {
  
#line 850
  return adjusted_;
}


#line 853
- (void)setAdjustedWithBoolean:(jboolean)adjusted {
  
#line 854
  self->adjusted_ = adjusted;
}


#line 857
- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 858
  if (accessibleAttributes_ != nil)
#line 859
  return [accessibleAttributes_ getWithId:key];
  else
#line 861
  return nil;
}


#line 864
- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 865
  if (accessibleAttributes_ == nil)
#line 866
  accessibleAttributes_ = [[JavaUtilHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(accessibleAttributes_)) putWithId:key withId:value];
}


#line 870
- (JavaUtilHashMap *)getAccessibleAttributes {
  
#line 871
  return accessibleAttributes_;
}


#line 874
- (ComItextpdfTextPdfPdfName *)getRole {
  
#line 875
  return role_;
}


#line 878
- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role {
  
#line 879
  self->role_ = role;
}


#line 882
- (ComItextpdfTextAccessibleElementId *)getId {
  
#line 883
  return id__;
}


#line 886
- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_ {
  
#line 887
  self->id__ = id_;
}


#line 890
+ (jboolean)isTaggedWithComItextpdfTextPdfPdfContentByte:(ComItextpdfTextPdfPdfContentByte *)canvas {
  
#line 891
  return canvas != nil && canvas->writer_ != nil && [canvas->writer_ isTagged];
}


#line 894
- (jboolean)isInline {
  
#line 895
  return NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfPRow *)other {
  [super copyAllFieldsTo:other];
  other->LOGGER_ = LOGGER_;
  other->accessibleAttributes_ = accessibleAttributes_;
  other->adjusted_ = adjusted_;
  other->calculated_ = calculated_;
  other->canvasesPos_ = canvasesPos_;
  other->cells_ = cells_;
  other->extraHeights_ = extraHeights_;
  other->id__ = id__;
  other->maxHeight_ = maxHeight_;
  other->mayNotBreak_ = mayNotBreak_;
  other->role_ = role_;
  other->widths_ = widths_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfPCellArray:", "PdfPRow", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfPCellArray:withComItextpdfTextPdfPdfPRow:", "PdfPRow", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfPRow:", "PdfPRow", NULL, 0x1, NULL },
    { "setWidthsWithFloatArray:", "setWidths", "Z", 0x1, NULL },
    { "initExtraHeights", NULL, "V", 0x4, NULL },
    { "setExtraHeightWithInt:withFloat:", "setExtraHeight", "V", 0x1, NULL },
    { "calculateHeights", NULL, "V", 0x4, NULL },
    { "setMayNotBreakWithBoolean:", "setMayNotBreak", "V", 0x1, NULL },
    { "isMayNotBreak", NULL, "Z", 0x1, NULL },
    { "writeBorderAndBackgroundWithFloat:withFloat:withFloat:withComItextpdfTextPdfPdfPCell:withComItextpdfTextPdfPdfContentByteArray:", "writeBorderAndBackground", "V", 0x1, NULL },
    { "saveAndRotateCanvasesWithComItextpdfTextPdfPdfContentByteArray:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "saveAndRotateCanvases", "V", 0x4, NULL },
    { "restoreCanvasesWithComItextpdfTextPdfPdfContentByteArray:", "restoreCanvases", "V", 0x4, NULL },
    { "setColumnWithComItextpdfTextPdfColumnText:withFloat:withFloat:withFloat:withFloat:", "setColumn", "F", 0x9, NULL },
    { "writeCellsWithInt:withInt:withFloat:withFloat:withComItextpdfTextPdfPdfContentByteArray:withBoolean:", "writeCells", "V", 0x1, NULL },
    { "isCalculated", NULL, "Z", 0x1, NULL },
    { "getMaxHeights", NULL, "F", 0x1, NULL },
    { "setMaxHeightsWithFloat:", "setMaxHeights", "V", 0x1, NULL },
    { "getEventWidthWithFloat:withFloatArray:", "getEventWidth", "[F", 0x0, NULL },
    { "copyRowContentWithComItextpdfTextPdfPdfPTable:withInt:", "copyRowContent", "V", 0x1, NULL },
    { "splitRowWithComItextpdfTextPdfPdfPTable:withInt:withFloat:", "splitRow", "Lcom.itextpdf.text.pdf.PdfPRow;", 0x1, NULL },
    { "getMaxRowHeightsWithoutCalculating", NULL, "F", 0x1, NULL },
    { "setFinalMaxHeightsWithFloat:", "setFinalMaxHeights", "V", 0x1, NULL },
    { "splitRowspansWithComItextpdfTextPdfPdfPTable:withInt:withComItextpdfTextPdfPdfPTable:withInt:", "splitRowspans", "V", 0x1, NULL },
    { "getCells", NULL, "[Lcom.itextpdf.text.pdf.PdfPCell;", 0x1, NULL },
    { "hasRowspan", NULL, "Z", 0x1, NULL },
    { "isAdjusted", NULL, "Z", 0x1, NULL },
    { "setAdjustedWithBoolean:", "setAdjusted", "V", 0x1, NULL },
    { "getAccessibleAttributeWithComItextpdfTextPdfPdfName:", "getAccessibleAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAccessibleAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAccessibleAttribute", "V", 0x1, NULL },
    { "getAccessibleAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getRole", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "setRoleWithComItextpdfTextPdfPdfName:", "setRole", "V", 0x1, NULL },
    { "getId", NULL, "Lcom.itextpdf.text.AccessibleElementId;", 0x1, NULL },
    { "setIdWithComItextpdfTextAccessibleElementId:", "setId", "V", 0x1, NULL },
    { "isTaggedWithComItextpdfTextPdfPdfContentByte:", "isTagged", "Z", 0xa, NULL },
    { "isInline", NULL, "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER_", NULL, 0x12, "Lcom.itextpdf.text.log.Logger;", NULL,  },
    { "mayNotBreak_", NULL, 0x1, "Z", NULL,  },
    { "BOTTOM_LIMIT_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfPRow_BOTTOM_LIMIT },
    { "RIGHT_LIMIT_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfPdfPRow_RIGHT_LIMIT },
    { "cells_", NULL, 0x4, "[Lcom.itextpdf.text.pdf.PdfPCell;", NULL,  },
    { "widths_", NULL, 0x4, "[F", NULL,  },
    { "extraHeights_", NULL, 0x4, "[F", NULL,  },
    { "maxHeight_", NULL, 0x4, "F", NULL,  },
    { "calculated_", NULL, 0x4, "Z", NULL,  },
    { "adjusted_", NULL, 0x4, "Z", NULL,  },
    { "canvasesPos_", NULL, 0x2, "[I", NULL,  },
    { "role_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "accessibleAttributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "id__", "id", 0x4, "Lcom.itextpdf.text.AccessibleElementId;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfPRow = { "PdfPRow", "com.itextpdf.text.pdf", NULL, 0x1, 36, methods, 14, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfPRow;
}

@end
