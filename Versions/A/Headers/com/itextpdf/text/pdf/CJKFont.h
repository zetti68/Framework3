//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/CJKFont.java
//

#ifndef _ComItextpdfTextPdfCJKFont_H_
#define _ComItextpdfTextPdfCJKFont_H_

#include "J2ObjC_header.h"
#include "com/itextpdf/text/pdf/BaseFont.h"

@class ComItextpdfTextPdfIntHashtable;
@class ComItextpdfTextPdfPdfIndirectReference;
@class ComItextpdfTextPdfPdfStream;
@class ComItextpdfTextPdfPdfWriter;
@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilProperties;

@interface ComItextpdfTextPdfCJKFont : ComItextpdfTextPdfBaseFont

#pragma mark Public

- (jboolean)charExistsWithInt:(jint)c;

- (IOSByteArray *)convertToBytesWithNSString:(NSString *)text;

- (IOSObjectArray *)getAllNameEntries;

- (IOSIntArray *)getCharBBoxWithInt:(jint)c;

- (jint)getCidCodeWithInt:(jint)c;

+ (NSString *)GetCompatibleFontWithNSString:(NSString *)enc;

- (IOSObjectArray *)getFamilyFontName;

- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize;

- (IOSObjectArray *)getFullFontName;

- (ComItextpdfTextPdfPdfStream *)getFullFontStream;

- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2;

- (NSString *)getPostscriptFontName;

- (jint)getUnicodeEquivalentWithInt:(jint)c;

- (jint)getWidthWithInt:(jint)char1;

- (jint)getWidthWithNSString:(NSString *)text;

- (jboolean)hasKernPairs;

+ (jboolean)isCJKFontWithNSString:(NSString *)fontName
                     withNSString:(NSString *)enc;

- (jboolean)isIdentity;

- (jboolean)setCharAdvanceWithInt:(jint)c
                          withInt:(jint)advance;

- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern;

- (void)setPostscriptFontNameWithNSString:(NSString *)name;

#pragma mark Protected

- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)fontName
                    withNSString:(NSString *)enc
                     withBoolean:(jboolean)emb;

- (IOSByteArray *)convertToBytesWithInt:(jint)char1;

+ (NSString *)convertToHCIDMetricsWithIntArray:(IOSIntArray *)keys
            withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)h;

+ (NSString *)convertToVCIDMetricsWithIntArray:(IOSIntArray *)keys
            withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)v
            withComItextpdfTextPdfIntHashtable:(ComItextpdfTextPdfIntHashtable *)h;

+ (ComItextpdfTextPdfIntHashtable *)createMetricWithNSString:(NSString *)s;

- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name;

- (NSString *)getUniMap;

- (void)writeFontWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
      withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                               withNSObjectArray:(IOSObjectArray *)params;

@end

J2OBJC_STATIC_INIT(ComItextpdfTextPdfCJKFont)

FOUNDATION_EXPORT NSString *ComItextpdfTextPdfCJKFont_CJK_ENCODING_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfCJKFont, CJK_ENCODING_, NSString *)

FOUNDATION_EXPORT JavaUtilProperties *ComItextpdfTextPdfCJKFont_cjkFonts_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfCJKFont, cjkFonts_, JavaUtilProperties *)
J2OBJC_STATIC_FIELD_SETTER(ComItextpdfTextPdfCJKFont, cjkFonts_, JavaUtilProperties *)

FOUNDATION_EXPORT JavaUtilProperties *ComItextpdfTextPdfCJKFont_cjkEncodings_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfCJKFont, cjkEncodings_, JavaUtilProperties *)
J2OBJC_STATIC_FIELD_SETTER(ComItextpdfTextPdfCJKFont, cjkEncodings_, JavaUtilProperties *)

FOUNDATION_EXPORT NSString *ComItextpdfTextPdfCJKFont_RESOURCE_PATH_CMAP_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfCJKFont, RESOURCE_PATH_CMAP_, NSString *)

FOUNDATION_EXPORT void ComItextpdfTextPdfCJKFont_initWithNSString_withNSString_withBoolean_(ComItextpdfTextPdfCJKFont *self, NSString *fontName, NSString *enc, jboolean emb);

FOUNDATION_EXPORT ComItextpdfTextPdfCJKFont *new_ComItextpdfTextPdfCJKFont_initWithNSString_withNSString_withBoolean_(NSString *fontName, NSString *enc, jboolean emb) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT NSString *ComItextpdfTextPdfCJKFont_GetCompatibleFontWithNSString_(NSString *enc);

FOUNDATION_EXPORT jboolean ComItextpdfTextPdfCJKFont_isCJKFontWithNSString_withNSString_(NSString *fontName, NSString *enc);

FOUNDATION_EXPORT ComItextpdfTextPdfIntHashtable *ComItextpdfTextPdfCJKFont_createMetricWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *ComItextpdfTextPdfCJKFont_convertToHCIDMetricsWithIntArray_withComItextpdfTextPdfIntHashtable_(IOSIntArray *keys, ComItextpdfTextPdfIntHashtable *h);

FOUNDATION_EXPORT NSString *ComItextpdfTextPdfCJKFont_convertToVCIDMetricsWithIntArray_withComItextpdfTextPdfIntHashtable_withComItextpdfTextPdfIntHashtable_(IOSIntArray *keys, ComItextpdfTextPdfIntHashtable *v, ComItextpdfTextPdfIntHashtable *h);

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextPdfCJKFont)

#endif // _ComItextpdfTextPdfCJKFont_H_
