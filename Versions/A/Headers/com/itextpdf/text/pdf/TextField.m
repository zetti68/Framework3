//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TextField.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/TextField.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/Phrase.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/pdf/BaseField.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/ColumnText.h"
#include "com/itextpdf/text/pdf/FontSelector.h"
#include "com/itextpdf/text/pdf/GrayColor.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfAppearance.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBorderDictionary.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDashPattern.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/TextField.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"


#line 63
@implementation ComItextpdfTextPdfTextField


#line 89
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                       withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)box
                                       withNSString:(NSString *)fieldName {
  if (self =
#line 90
  [super initWithComItextpdfTextPdfPdfWriter:writer withComItextpdfTextRectangle:box withNSString:fieldName]) {
    choiceSelections_ =
#line 75
    [[JavaUtilArrayList alloc] init];
  }
  return self;
}


#line 93
+ (jboolean)checkRTLWithNSString:(NSString *)text {
  
#line 94
  if (text == nil || ((jint) [text length]) == 0)
#line 95
  return NO;
  IOSCharArray *cc = [((NSString *) nil_chk(text)) toCharArray];
  for (jint k = 0; k < ((IOSCharArray *) nil_chk(cc))->size_; ++k) {
    jint c = IOSCharArray_Get(cc, k);
    if (c >= (jint) 0x590 && c < (jint) 0x0780)
#line 100
    return YES;
  }
  return NO;
}


#line 105
+ (void)changeFontSizeWithComItextpdfTextPhrase:(ComItextpdfTextPhrase *)p
                                      withFloat:(jfloat)size {
  
#line 106
  for (jint k = 0; k < [((ComItextpdfTextPhrase *) nil_chk(p)) size]; ++k)
#line 107
  [((ComItextpdfTextFont *) nil_chk([((ComItextpdfTextChunk *) nil_chk(((ComItextpdfTextChunk *) check_class_cast([p getWithInt:k], [ComItextpdfTextChunk class])))) getFont])) setSizeWithFloat:size];
}


#line 110
- (ComItextpdfTextPhrase *)composePhraseWithNSString:(NSString *)text
                      withComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)ufont
                        withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                           withFloat:(jfloat)fontSize {
  
#line 111
  ComItextpdfTextPhrase *phrase = nil;
  if (extensionFont_ == nil && (substitutionFonts_ == nil || [substitutionFonts_ isEmpty]))
#line 113
  phrase = [[ComItextpdfTextPhrase alloc] initWithComItextpdfTextChunk:[[ComItextpdfTextChunk alloc] initWithNSString:text withComItextpdfTextFont:[[ComItextpdfTextFont alloc] initWithComItextpdfTextPdfBaseFont:ufont withFloat:fontSize withInt:0 withComItextpdfTextBaseColor:color]]];
  else {
    ComItextpdfTextPdfFontSelector *fs = [[ComItextpdfTextPdfFontSelector alloc] init];
    [fs addFontWithComItextpdfTextFont:[[ComItextpdfTextFont alloc] initWithComItextpdfTextPdfBaseFont:ufont withFloat:fontSize withInt:0 withComItextpdfTextBaseColor:color]];
    if (extensionFont_ != nil)
#line 118
    [fs addFontWithComItextpdfTextFont:[[ComItextpdfTextFont alloc] initWithComItextpdfTextPdfBaseFont:extensionFont_ withFloat:fontSize withInt:0 withComItextpdfTextBaseColor:color]];
    if (substitutionFonts_ != nil) {
      for (jint k = 0; k < [substitutionFonts_ size]; ++k)
#line 121
      [fs addFontWithComItextpdfTextFont:[[ComItextpdfTextFont alloc] initWithComItextpdfTextPdfBaseFont:[substitutionFonts_ getWithInt:k] withFloat:fontSize withInt:0 withComItextpdfTextBaseColor:color]];
    }
    phrase = [fs processWithNSString:text];
  }
  return phrase;
}


#line 135
+ (NSString *)removeCRLFWithNSString:(NSString *)text {
  if ([((NSString *) nil_chk(text)) indexOf:0x000a] >= 0 || [text indexOf:0x000d] >= 0) {
    IOSCharArray *p = [text toCharArray];
    JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] initWithInt:((IOSCharArray *) nil_chk(p))->size_];
    for (jint k = 0; k < p->size_; ++k) {
      jchar c = IOSCharArray_Get(p, k);
      if (c == 0x000a)
#line 142
      (void) [sb appendWithChar:' '];
      else if (c == 0x000d) {
        (void) [sb appendWithChar:' '];
        if (k < p->size_ - 1 && IOSCharArray_Get(p, k + 1) == 0x000a)
#line 146
        ++k;
      }
      else
#line 149
      (void) [sb appendWithChar:c];
    }
    return [sb description];
  }
  return text;
}


#line 164
+ (NSString *)obfuscatePasswordWithNSString:(NSString *)text {
  
#line 165
  IOSCharArray *pchar = [IOSCharArray arrayWithLength:((jint) [((NSString *) nil_chk(text)) length])];
  for (jint i = 0; i < ((jint) [text length]); i++)
#line 167
  *IOSCharArray_GetRef(pchar, i) = '*';
  return [NSString stringWithCharacters:pchar];
}


#line 177
- (ComItextpdfTextPdfPdfAppearance *)getAppearance {
  
#line 178
  ComItextpdfTextPdfPdfAppearance *app = [self getBorderAppearance];
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) beginVariableText];
  if (text_ == nil || ((jint) [text_ length]) == 0) {
    [app endVariableText];
    return app;
  }
  
#line 185
  jboolean borderExtra = borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_BEVELED || borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_INSET;
  jfloat h = [((ComItextpdfTextRectangle *) nil_chk(box_)) getHeight] - borderWidth_ * 2 - extraMarginTop_;
  jfloat bw2 = borderWidth_;
  if (borderExtra) {
    h -= borderWidth_ * 2;
    bw2 *= 2;
  }
  jfloat offsetX = [JavaLangMath maxWithFloat:bw2 withFloat:1];
  jfloat offX = [JavaLangMath minWithFloat:bw2 withFloat:offsetX];
  [app saveState];
  [app rectangleWithFloat:offX withFloat:offX withFloat:[box_ getWidth] - 2 * offX withFloat:[box_ getHeight] - 2 * offX];
  [app clip];
  [app newPath];
  NSString *ptext;
  if ((options_ & ComItextpdfTextPdfBaseField_PASSWORD) != 0)
#line 200
  ptext = [ComItextpdfTextPdfTextField obfuscatePasswordWithNSString:text_];
  else if ((options_ & ComItextpdfTextPdfBaseField_MULTILINE) == 0)
#line 202
  ptext = [ComItextpdfTextPdfTextField removeCRLFWithNSString:text_];
  else
#line 204
  ptext = text_;
  ComItextpdfTextPdfBaseFont *ufont = [self getRealFont];
  ComItextpdfTextBaseColor *fcolor = textColor_ == nil ? ComItextpdfTextPdfGrayColor_get_GRAYBLACK_() : textColor_;
  jint rtl = [ComItextpdfTextPdfTextField checkRTLWithNSString:ptext] ? ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_LTR : ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
  jfloat usize = fontSize_;
  ComItextpdfTextPhrase *phrase = [self composePhraseWithNSString:ptext withComItextpdfTextPdfBaseFont:ufont withComItextpdfTextBaseColor:fcolor withFloat:usize];
  if ((options_ & ComItextpdfTextPdfBaseField_MULTILINE) != 0) {
    jfloat width = [box_ getWidth] - 4 * offsetX - extraMarginLeft_;
    jfloat factor = [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXURY withFloat:1] - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXLLY withFloat:1];
    ComItextpdfTextPdfColumnText *ct = [[ComItextpdfTextPdfColumnText alloc] initWithComItextpdfTextPdfPdfContentByte:nil];
    if (usize == 0) {
      usize = h / factor;
      if (usize > 4) {
        if (usize > 12)
#line 218
        usize = 12;
        jfloat step = [JavaLangMath maxWithFloat:(usize - 4) / 10 withFloat:0.2f];
        [ct setSimpleColumnWithFloat:0 withFloat:-h withFloat:width withFloat:0];
        [ct setAlignmentWithInt:alignment_];
        [ct setRunDirectionWithInt:rtl];
        for (; usize > 4; usize -= step) {
          [ct setYLineWithFloat:0];
          [ComItextpdfTextPdfTextField changeFontSizeWithComItextpdfTextPhrase:phrase withFloat:usize];
          [ct setTextWithComItextpdfTextPhrase:phrase];
          [ct setLeadingWithFloat:factor * usize];
          jint status = [ct goWithBoolean:YES];
          if ((status & ComItextpdfTextPdfColumnText_NO_MORE_COLUMN) == 0)
#line 230
          break;
        }
      }
      if (usize < 4)
#line 234
      usize = 4;
    }
    [ComItextpdfTextPdfTextField changeFontSizeWithComItextpdfTextPhrase:phrase withFloat:usize];
    [ct setCanvasWithComItextpdfTextPdfPdfContentByte:app];
    jfloat leading = usize * factor;
    jfloat offsetY = offsetX + h - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXURY withFloat:usize];
    [ct setSimpleColumnWithFloat:extraMarginLeft_ + 2 * offsetX withFloat:-20000 withFloat:[box_ getWidth] - 2 * offsetX withFloat:offsetY + leading];
    [ct setLeadingWithFloat:leading];
    [ct setAlignmentWithInt:alignment_];
    [ct setRunDirectionWithInt:rtl];
    [ct setTextWithComItextpdfTextPhrase:phrase];
    [ct go];
  }
  else {
    if (usize == 0) {
      jfloat maxCalculatedSize = h / ([((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXURX withFloat:1] - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXLLY withFloat:1]);
      [ComItextpdfTextPdfTextField changeFontSizeWithComItextpdfTextPhrase:phrase withFloat:1];
      jfloat wd = [ComItextpdfTextPdfColumnText getWidthWithComItextpdfTextPhrase:phrase withInt:rtl withInt:0];
      if (wd == 0)
#line 253
      usize = maxCalculatedSize;
      else
#line 255
      usize = [JavaLangMath minWithFloat:maxCalculatedSize withFloat:([box_ getWidth] - extraMarginLeft_ - 4 * offsetX) / wd];
      if (usize < 4)
#line 257
      usize = 4;
    }
    [ComItextpdfTextPdfTextField changeFontSizeWithComItextpdfTextPhrase:phrase withFloat:usize];
    jfloat offsetY = offX + ([box_ getHeight] - 2 * offX - [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:usize]) / 2;
    if (offsetY < offX)
#line 262
    offsetY = offX;
    if (offsetY - offX < -[ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:usize]) {
      jfloat ny = -[ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:usize] + offX;
      jfloat dy = [box_ getHeight] - offX - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:usize];
      offsetY = [JavaLangMath minWithFloat:ny withFloat:[JavaLangMath maxWithFloat:offsetY withFloat:dy]];
    }
    if ((options_ & ComItextpdfTextPdfBaseField_COMB) != 0 && maxCharacterLength_ > 0) {
      jint textLen = [JavaLangMath minWithInt:maxCharacterLength_ withInt:((jint) [((NSString *) nil_chk(ptext)) length])];
      jint position = 0;
      if (alignment_ == ComItextpdfTextElement_ALIGN_RIGHT)
#line 272
      position = maxCharacterLength_ - textLen;
      else if (alignment_ == ComItextpdfTextElement_ALIGN_CENTER)
#line 274
      position = (maxCharacterLength_ - textLen) / 2;
      jfloat step = ([box_ getWidth] - extraMarginLeft_) / maxCharacterLength_;
      jfloat start = step / 2 + position * step;
      if (textColor_ == nil)
#line 278
      [app setGrayFillWithFloat:0];
      else
#line 280
      [app setColorFillWithComItextpdfTextBaseColor:textColor_];
      [app beginText];
      for (jint k = 0; k < [((ComItextpdfTextPhrase *) nil_chk(phrase)) size]; ++k) {
        ComItextpdfTextChunk *ck = (ComItextpdfTextChunk *) check_class_cast([phrase getWithInt:k], [ComItextpdfTextChunk class]);
        ComItextpdfTextPdfBaseFont *bf = [((ComItextpdfTextFont *) nil_chk([((ComItextpdfTextChunk *) nil_chk(ck)) getFont])) getBaseFont];
        [app setFontAndSizeWithComItextpdfTextPdfBaseFont:bf withFloat:usize];
        JavaLangStringBuffer *sb = [ck appendWithNSString:@""];
        for (jint j = 0; j < [((JavaLangStringBuffer *) nil_chk(sb)) sequenceLength]; ++j) {
          NSString *c = [sb substringWithInt:j withInt:j + 1];
          jfloat wd = [((ComItextpdfTextPdfBaseFont *) nil_chk(bf)) getWidthPointWithNSString:c withFloat:usize];
          [app setTextMatrixWithFloat:extraMarginLeft_ + start - wd / 2 withFloat:offsetY - extraMarginTop_];
          [app showTextWithNSString:c];
          start += step;
        }
      }
      [app endText];
    }
    else {
      jfloat x;
      switch (alignment_) {
        case ComItextpdfTextElement_ALIGN_RIGHT:
        x = extraMarginLeft_ + [box_ getWidth] - 2 * offsetX;
        break;
        case ComItextpdfTextElement_ALIGN_CENTER:
        x = extraMarginLeft_ + [box_ getWidth] / 2;
        break;
        default:
        x = extraMarginLeft_ + 2 * offsetX;
      }
      [ComItextpdfTextPdfColumnText showTextAlignedWithComItextpdfTextPdfPdfContentByte:app withInt:alignment_ withComItextpdfTextPhrase:phrase withFloat:x withFloat:offsetY - extraMarginTop_ withFloat:0 withInt:rtl withInt:0];
    }
  }
  [app restoreState];
  [app endVariableText];
  return app;
}


#line 323
- (ComItextpdfTextPdfPdfAppearance *)getListAppearance {
  
#line 324
  ComItextpdfTextPdfPdfAppearance *app = [self getBorderAppearance];
  if (choices_ == nil || choices_->size_ == 0) {
    return app;
  }
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) beginVariableText];
  
#line 330
  jint topChoice = [self getTopChoice];
  
#line 332
  ComItextpdfTextPdfBaseFont *ufont = [self getRealFont];
  jfloat usize = fontSize_;
  if (usize == 0)
#line 335
  usize = 12;
  
#line 337
  jboolean borderExtra = borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_BEVELED || borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_INSET;
  jfloat h = [((ComItextpdfTextRectangle *) nil_chk(box_)) getHeight] - borderWidth_ * 2;
  jfloat offsetX = borderWidth_;
  if (borderExtra) {
    h -= borderWidth_ * 2;
    offsetX *= 2;
  }
  
#line 345
  jfloat leading = [((ComItextpdfTextPdfBaseFont *) nil_chk(ufont)) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXURY withFloat:usize] - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXLLY withFloat:usize];
  jint maxFit = J2ObjCFpToInt((h / leading)) + 1;
  jint first = 0;
  jint last = 0;
  first = topChoice;
  last = first + maxFit;
  if (last > ((IOSObjectArray *) nil_chk(choices_))->size_)
#line 352
  last = choices_->size_;
  topFirst_ = first;
  [app saveState];
  [app rectangleWithFloat:offsetX withFloat:offsetX withFloat:[box_ getWidth] - 2 * offsetX withFloat:[box_ getHeight] - 2 * offsetX];
  [app clip];
  [app newPath];
  ComItextpdfTextBaseColor *fcolor = textColor_ == nil ? ComItextpdfTextPdfGrayColor_get_GRAYBLACK_() : textColor_;
  
#line 362
  [app setColorFillWithComItextpdfTextBaseColor:[[ComItextpdfTextBaseColor alloc] initWithInt:10 withInt:36 withInt:106]];
  for (jint curVal = 0; curVal < [((JavaUtilArrayList *) nil_chk(choiceSelections_)) size]; ++curVal) {
    jint curChoice = [((JavaLangInteger *) nil_chk(([choiceSelections_ getWithInt:curVal]))) intValue];
    
#line 367
    if (curChoice >= first && curChoice <= last) {
      [app rectangleWithFloat:offsetX withFloat:offsetX + h - (curChoice - first + 1) * leading withFloat:[box_ getWidth] - 2 * offsetX withFloat:leading];
      [app fill];
    }
  }
  jfloat xp = offsetX * 2;
  jfloat yp = offsetX + h - [ufont getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_BBOXURY withFloat:usize];
  for (jint idx = first; idx < last; ++idx, yp -= leading) {
    NSString *ptext = IOSObjectArray_Get(choices_, idx);
    jint rtl = [ComItextpdfTextPdfTextField checkRTLWithNSString:ptext] ? ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_LTR : ComItextpdfTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
    ptext = [ComItextpdfTextPdfTextField removeCRLFWithNSString:ptext];
    
#line 379
    ComItextpdfTextBaseColor *textCol = [choiceSelections_ containsWithId:[JavaLangInteger valueOfWithInt:idx]] ? ComItextpdfTextPdfGrayColor_get_GRAYWHITE_() : fcolor;
    ComItextpdfTextPhrase *phrase = [self composePhraseWithNSString:ptext withComItextpdfTextPdfBaseFont:ufont withComItextpdfTextBaseColor:textCol withFloat:usize];
    [ComItextpdfTextPdfColumnText showTextAlignedWithComItextpdfTextPdfPdfContentByte:app withInt:ComItextpdfTextElement_ALIGN_LEFT withComItextpdfTextPhrase:phrase withFloat:xp withFloat:yp withFloat:0 withInt:rtl withInt:0];
  }
  [app restoreState];
  [app endVariableText];
  return app;
}


#line 394
- (ComItextpdfTextPdfPdfFormField *)getTextField {
  
#line 395
  if (maxCharacterLength_ <= 0)
#line 396
  options_ &= ~ComItextpdfTextPdfBaseField_COMB;
  if ((options_ & ComItextpdfTextPdfBaseField_COMB) != 0)
#line 398
  options_ &= ~ComItextpdfTextPdfBaseField_MULTILINE;
  ComItextpdfTextPdfPdfFormField *field = [ComItextpdfTextPdfPdfFormField createTextFieldWithComItextpdfTextPdfPdfWriter:writer_ withBoolean:NO withBoolean:NO withInt:maxCharacterLength_];
  [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) setWidgetWithComItextpdfTextRectangle:box_ withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_HIGHLIGHT_INVERT_()];
  switch (alignment_) {
    case ComItextpdfTextElement_ALIGN_CENTER:
    [field setQuaddingWithInt:ComItextpdfTextPdfPdfFormField_Q_CENTER];
    break;
    case ComItextpdfTextElement_ALIGN_RIGHT:
    [field setQuaddingWithInt:ComItextpdfTextPdfPdfFormField_Q_RIGHT];
    break;
  }
  if (rotation_ != 0)
#line 410
  [field setMKRotationWithInt:rotation_];
  if (fieldName_ != nil) {
    [field setFieldNameWithNSString:fieldName_];
    if (![@"" isEqual:text_])
#line 414
    [field setValueAsStringWithNSString:text_];
    if (defaultText_ != nil)
#line 416
    [field setDefaultValueAsStringWithNSString:defaultText_];
    if ((options_ & ComItextpdfTextPdfBaseField_READ_ONLY) != 0)
#line 418
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_READ_ONLY];
    if ((options_ & ComItextpdfTextPdfBaseField_REQUIRED) != 0)
#line 420
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_REQUIRED];
    if ((options_ & ComItextpdfTextPdfBaseField_MULTILINE) != 0)
#line 422
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_MULTILINE];
    if ((options_ & ComItextpdfTextPdfBaseField_DO_NOT_SCROLL) != 0)
#line 424
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_DONOTSCROLL];
    if ((options_ & ComItextpdfTextPdfBaseField_PASSWORD) != 0)
#line 426
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_PASSWORD];
    if ((options_ & ComItextpdfTextPdfBaseField_FILE_SELECTION) != 0)
#line 428
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_FILESELECT];
    if ((options_ & ComItextpdfTextPdfBaseField_DO_NOT_SPELL_CHECK) != 0)
#line 430
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_DONOTSPELLCHECK];
    if ((options_ & ComItextpdfTextPdfBaseField_COMB) != 0)
#line 432
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_COMB];
  }
  [field setBorderStyleWithComItextpdfTextPdfPdfBorderDictionary:[[ComItextpdfTextPdfPdfBorderDictionary alloc] initWithFloat:borderWidth_ withInt:borderStyle_ withComItextpdfTextPdfPdfDashPattern:[[ComItextpdfTextPdfPdfDashPattern alloc] initWithFloat:3]]];
  ComItextpdfTextPdfPdfAppearance *tp = [self getAppearance];
  [field setAppearanceWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_APPEARANCE_NORMAL_() withComItextpdfTextPdfPdfTemplate:tp];
  ComItextpdfTextPdfPdfAppearance *da = (ComItextpdfTextPdfPdfAppearance *) check_class_cast([((ComItextpdfTextPdfPdfAppearance *) nil_chk(tp)) getDuplicate], [ComItextpdfTextPdfPdfAppearance class]);
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(da)) setFontAndSizeWithComItextpdfTextPdfBaseFont:[self getRealFont] withFloat:fontSize_];
  if (textColor_ == nil)
#line 440
  [da setGrayFillWithFloat:0];
  else
#line 442
  [da setColorFillWithComItextpdfTextBaseColor:textColor_];
  [field setDefaultAppearanceStringWithComItextpdfTextPdfPdfContentByte:da];
  if (borderColor_ != nil)
#line 445
  [field setMKBorderColorWithComItextpdfTextBaseColor:borderColor_];
  if (backgroundColor_ != nil)
#line 447
  [field setMKBackgroundColorWithComItextpdfTextBaseColor:backgroundColor_];
  switch (visibility_) {
    case ComItextpdfTextPdfBaseField_HIDDEN:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_HIDDEN];
    break;
    case ComItextpdfTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT:
    break;
    case ComItextpdfTextPdfBaseField_HIDDEN_BUT_PRINTABLE:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_NOVIEW];
    break;
    default:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT];
    break;
  }
  return field;
}


#line 470
- (ComItextpdfTextPdfPdfFormField *)getComboField {
  
#line 471
  return [self getChoiceFieldWithBoolean:NO];
}


#line 480
- (ComItextpdfTextPdfPdfFormField *)getListField {
  
#line 481
  return [self getChoiceFieldWithBoolean:YES];
}


#line 484
- (jint)getTopChoice {
  
#line 485
  if (choiceSelections_ == nil || [choiceSelections_ size] == 0) {
    return 0;
  }
  
#line 489
  JavaLangInteger *firstValue = [((JavaUtilArrayList *) nil_chk(choiceSelections_)) getWithInt:0];
  
#line 491
  if (firstValue == nil) {
    return 0;
  }
  
#line 495
  jint topChoice = 0;
  if (choices_ != nil) {
    topChoice = [((JavaLangInteger *) nil_chk(firstValue)) intValue];
    topChoice = [JavaLangMath minWithInt:topChoice withInt:choices_->size_];
    topChoice = [JavaLangMath maxWithInt:0 withInt:topChoice];
  }
  return topChoice;
}


#line 504
- (ComItextpdfTextPdfPdfFormField *)getChoiceFieldWithBoolean:(jboolean)isList {
  
#line 505
  options_ &= ~ComItextpdfTextPdfBaseField_MULTILINE & ~ComItextpdfTextPdfBaseField_COMB;
  IOSObjectArray *uchoices = choices_;
  if (uchoices == nil)
#line 508
  uchoices = [IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSString class]]];
  
#line 510
  jint topChoice = [self getTopChoice];
  
#line 512
  if (((IOSObjectArray *) nil_chk(uchoices))->size_ > 0 && topChoice >= 0)
#line 513
  text_ = IOSObjectArray_Get(uchoices, topChoice);
  
#line 515
  if (text_ == nil)
#line 516
  text_ = @"";
  
#line 518
  ComItextpdfTextPdfPdfFormField *field = nil;
  IOSObjectArray *mix = nil;
  
#line 521
  if (choiceExports_ == nil) {
    if (isList)
#line 523
    field = [ComItextpdfTextPdfPdfFormField createListWithComItextpdfTextPdfPdfWriter:writer_ withNSStringArray:uchoices withInt:topChoice];
    else
#line 525
    field = [ComItextpdfTextPdfPdfFormField createComboWithComItextpdfTextPdfPdfWriter:writer_ withBoolean:(options_ & ComItextpdfTextPdfBaseField_EDIT) != 0 withNSStringArray:uchoices withInt:topChoice];
  }
  else {
    mix = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ uchoices->size_, 2 } type:[IOSClass classWithClass:[NSString class]]];
    for (jint k = 0; k < mix->size_; ++k)
#line 530
    IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(mix, k)), 0, IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(mix, k)), 1, IOSObjectArray_Get(uchoices, k)));
    jint top = [JavaLangMath minWithInt:uchoices->size_ withInt:choiceExports_->size_];
    for (jint k = 0; k < top; ++k) {
      if (IOSObjectArray_Get(choiceExports_, k) != nil)
#line 534
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(mix, k)), 0, IOSObjectArray_Get(choiceExports_, k));
    }
    if (isList)
#line 537
    field = [ComItextpdfTextPdfPdfFormField createListWithComItextpdfTextPdfPdfWriter:writer_ withNSStringArray2:mix withInt:topChoice];
    else
#line 539
    field = [ComItextpdfTextPdfPdfFormField createComboWithComItextpdfTextPdfPdfWriter:writer_ withBoolean:(options_ & ComItextpdfTextPdfBaseField_EDIT) != 0 withNSStringArray2:mix withInt:topChoice];
  }
  [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) setWidgetWithComItextpdfTextRectangle:box_ withComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_HIGHLIGHT_INVERT_()];
  if (rotation_ != 0)
#line 543
  [field setMKRotationWithInt:rotation_];
  if (fieldName_ != nil) {
    [field setFieldNameWithNSString:fieldName_];
    if (uchoices->size_ > 0) {
      if (mix != nil) {
        if ([((JavaUtilArrayList *) nil_chk(choiceSelections_)) size] < 2) {
          [field setValueAsStringWithNSString:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mix, topChoice)), 0)];
          [field setDefaultValueAsStringWithNSString:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mix, topChoice)), 0)];
        }
        else {
          
#line 552
          [self writeMultipleValuesWithComItextpdfTextPdfPdfFormField:field withNSStringArray2:mix];
        }
      }
      else {
        
#line 555
        if ([((JavaUtilArrayList *) nil_chk(choiceSelections_)) size] < 2) {
          [field setValueAsStringWithNSString:text_];
          [field setDefaultValueAsStringWithNSString:text_];
        }
        else {
          
#line 559
          [self writeMultipleValuesWithComItextpdfTextPdfPdfFormField:field withNSStringArray2:nil];
        }
      }
    }
    if ((options_ & ComItextpdfTextPdfBaseField_READ_ONLY) != 0)
#line 564
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_READ_ONLY];
    if ((options_ & ComItextpdfTextPdfBaseField_REQUIRED) != 0)
#line 566
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_REQUIRED];
    if ((options_ & ComItextpdfTextPdfBaseField_DO_NOT_SPELL_CHECK) != 0)
#line 568
    [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_DONOTSPELLCHECK];
    if ((options_ & ComItextpdfTextPdfBaseField_MULTISELECT) != 0) {
      [field setFieldFlagsWithInt:ComItextpdfTextPdfPdfFormField_FF_MULTISELECT];
    }
  }
  [field setBorderStyleWithComItextpdfTextPdfPdfBorderDictionary:[[ComItextpdfTextPdfPdfBorderDictionary alloc] initWithFloat:borderWidth_ withInt:borderStyle_ withComItextpdfTextPdfPdfDashPattern:[[ComItextpdfTextPdfPdfDashPattern alloc] initWithFloat:3]]];
  ComItextpdfTextPdfPdfAppearance *tp;
  if (isList) {
    tp = [self getListAppearance];
    if (topFirst_ > 0)
#line 578
    [field putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TI_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:topFirst_]];
  }
  else
#line 581
  tp = [self getAppearance];
  [field setAppearanceWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfAnnotation_get_APPEARANCE_NORMAL_() withComItextpdfTextPdfPdfTemplate:tp];
  ComItextpdfTextPdfPdfAppearance *da = (ComItextpdfTextPdfPdfAppearance *) check_class_cast([((ComItextpdfTextPdfPdfAppearance *) nil_chk(tp)) getDuplicate], [ComItextpdfTextPdfPdfAppearance class]);
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(da)) setFontAndSizeWithComItextpdfTextPdfBaseFont:[self getRealFont] withFloat:fontSize_];
  if (textColor_ == nil)
#line 586
  [da setGrayFillWithFloat:0];
  else
#line 588
  [da setColorFillWithComItextpdfTextBaseColor:textColor_];
  [field setDefaultAppearanceStringWithComItextpdfTextPdfPdfContentByte:da];
  if (borderColor_ != nil)
#line 591
  [field setMKBorderColorWithComItextpdfTextBaseColor:borderColor_];
  if (backgroundColor_ != nil)
#line 593
  [field setMKBackgroundColorWithComItextpdfTextBaseColor:backgroundColor_];
  switch (visibility_) {
    case ComItextpdfTextPdfBaseField_HIDDEN:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_HIDDEN];
    break;
    case ComItextpdfTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT:
    break;
    case ComItextpdfTextPdfBaseField_HIDDEN_BUT_PRINTABLE:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT | ComItextpdfTextPdfPdfAnnotation_FLAGS_NOVIEW];
    break;
    default:
    [field setFlagsWithInt:ComItextpdfTextPdfPdfAnnotation_FLAGS_PRINT];
    break;
  }
  return field;
}


#line 610
- (void)writeMultipleValuesWithComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)field
                                           withNSStringArray2:(IOSObjectArray *)mix {
  
#line 611
  ComItextpdfTextPdfPdfArray *indexes = [[ComItextpdfTextPdfPdfArray alloc] init];
  ComItextpdfTextPdfPdfArray *values = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(choiceSelections_)) size]; ++i) {
    jint idx = [((JavaLangInteger *) nil_chk(([choiceSelections_ getWithInt:i]))) intValue];
    [indexes addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:idx]];
    
#line 617
    if (mix != nil)
#line 618
    [values addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(mix, idx)), 0)]];
    else if (choices_ != nil)
#line 620
    [values addWithComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:IOSObjectArray_Get(choices_, idx)]];
  }
  
#line 623
  [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_() withComItextpdfTextPdfPdfObject:values];
  [field putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_I_() withComItextpdfTextPdfPdfObject:indexes];
}


#line 632
- (NSString *)getDefaultText {
  
#line 633
  return self->defaultText_;
}


#line 640
- (void)setDefaultTextWithNSString:(NSString *)defaultText {
  
#line 641
  self->defaultText_ = defaultText;
}


#line 648
- (IOSObjectArray *)getChoices {
  
#line 649
  return self->choices_;
}


#line 656
- (void)setChoicesWithNSStringArray:(IOSObjectArray *)choices {
  
#line 657
  self->choices_ = choices;
}


#line 664
- (IOSObjectArray *)getChoiceExports {
  
#line 665
  return self->choiceExports_;
}


#line 674
- (void)setChoiceExportsWithNSStringArray:(IOSObjectArray *)choiceExports {
  
#line 675
  self->choiceExports_ = choiceExports;
}


#line 682
- (jint)getChoiceSelection {
  
#line 683
  return [self getTopChoice];
}


#line 692
- (JavaUtilArrayList *)getChoiceSelections {
  
#line 693
  return choiceSelections_;
}


#line 700
- (void)setChoiceSelectionWithInt:(jint)choiceSelection {
  
#line 701
  choiceSelections_ = [[JavaUtilArrayList alloc] init];
  [choiceSelections_ addWithId:[JavaLangInteger valueOfWithInt:choiceSelection]];
}


#line 710
- (void)addChoiceSelectionWithInt:(jint)selection {
  
#line 711
  if ((self->options_ & ComItextpdfTextPdfBaseField_MULTISELECT) != 0) {
    [((JavaUtilArrayList *) nil_chk(choiceSelections_)) addWithId:[JavaLangInteger valueOfWithInt:selection]];
  }
}


#line 721
- (void)setChoiceSelectionsWithJavaUtilArrayList:(JavaUtilArrayList *)selections {
  
#line 722
  if (selections != nil) {
    choiceSelections_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:selections];
    if ([choiceSelections_ size] > 1 && (options_ & ComItextpdfTextPdfBaseField_MULTISELECT) == 0) {
      
#line 726
      while ([choiceSelections_ size] > 1) {
        (void) [choiceSelections_ removeWithInt:1];
      }
    }
  }
  else {
    [((JavaUtilArrayList *) nil_chk(choiceSelections_)) clear];
  }
}


#line 736
- (jint)getTopFirst {
  
#line 737
  return topFirst_;
}


#line 745
- (void)setExtraMarginWithFloat:(jfloat)extraMarginLeft
                      withFloat:(jfloat)extraMarginTop {
  
#line 746
  self->extraMarginLeft_ = extraMarginLeft;
  self->extraMarginTop_ = extraMarginTop;
}


#line 760
- (JavaUtilArrayList *)getSubstitutionFonts {
  
#line 761
  return self->substitutionFonts_;
}


#line 769
- (void)setSubstitutionFontsWithJavaUtilArrayList:(JavaUtilArrayList *)substitutionFonts {
  
#line 770
  self->substitutionFonts_ = substitutionFonts;
}


#line 783
- (ComItextpdfTextPdfBaseFont *)getExtensionFont {
  
#line 784
  return self->extensionFont_;
}


#line 792
- (void)setExtensionFontWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)extensionFont {
  
#line 793
  self->extensionFont_ = extensionFont;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfTextField *)other {
  [super copyAllFieldsTo:other];
  other->choiceExports_ = choiceExports_;
  other->choiceSelections_ = choiceSelections_;
  other->choices_ = choices_;
  other->defaultText_ = defaultText_;
  other->extensionFont_ = extensionFont_;
  other->extraMarginLeft_ = extraMarginLeft_;
  other->extraMarginTop_ = extraMarginTop_;
  other->substitutionFonts_ = substitutionFonts_;
  other->topFirst_ = topFirst_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:withComItextpdfTextRectangle:withNSString:", "TextField", NULL, 0x1, NULL },
    { "checkRTLWithNSString:", "checkRTL", "Z", 0xa, NULL },
    { "changeFontSizeWithComItextpdfTextPhrase:withFloat:", "changeFontSize", "V", 0xa, NULL },
    { "composePhraseWithNSString:withComItextpdfTextPdfBaseFont:withComItextpdfTextBaseColor:withFloat:", "composePhrase", "Lcom.itextpdf.text.Phrase;", 0x2, NULL },
    { "removeCRLFWithNSString:", "removeCRLF", "Ljava.lang.String;", 0x9, NULL },
    { "obfuscatePasswordWithNSString:", "obfuscatePassword", "Ljava.lang.String;", 0x9, NULL },
    { "getAppearance", NULL, "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getListAppearance", NULL, "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x0, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getTextField", NULL, "Lcom.itextpdf.text.pdf.PdfFormField;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getComboField", NULL, "Lcom.itextpdf.text.pdf.PdfFormField;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getListField", NULL, "Lcom.itextpdf.text.pdf.PdfFormField;", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getTopChoice", NULL, "I", 0x2, NULL },
    { "getChoiceFieldWithBoolean:", "getChoiceField", "Lcom.itextpdf.text.pdf.PdfFormField;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "writeMultipleValuesWithComItextpdfTextPdfPdfFormField:withNSStringArray2:", "writeMultipleValues", "V", 0x2, NULL },
    { "getDefaultText", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setDefaultTextWithNSString:", "setDefaultText", "V", 0x1, NULL },
    { "getChoices", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "setChoicesWithNSStringArray:", "setChoices", "V", 0x1, NULL },
    { "getChoiceExports", NULL, "[Ljava.lang.String;", 0x1, NULL },
    { "setChoiceExportsWithNSStringArray:", "setChoiceExports", "V", 0x1, NULL },
    { "getChoiceSelection", NULL, "I", 0x1, NULL },
    { "getChoiceSelections", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "setChoiceSelectionWithInt:", "setChoiceSelection", "V", 0x1, NULL },
    { "addChoiceSelectionWithInt:", "addChoiceSelection", "V", 0x1, NULL },
    { "setChoiceSelectionsWithJavaUtilArrayList:", "setChoiceSelections", "V", 0x1, NULL },
    { "getTopFirst", NULL, "I", 0x0, NULL },
    { "setExtraMarginWithFloat:withFloat:", "setExtraMargin", "V", 0x1, NULL },
    { "getSubstitutionFonts", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "setSubstitutionFontsWithJavaUtilArrayList:", "setSubstitutionFonts", "V", 0x1, NULL },
    { "getExtensionFont", NULL, "Lcom.itextpdf.text.pdf.BaseFont;", 0x1, NULL },
    { "setExtensionFontWithComItextpdfTextPdfBaseFont:", "setExtensionFont", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultText_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "choices_", NULL, 0x2, "[Ljava.lang.String;", NULL,  },
    { "choiceExports_", NULL, 0x2, "[Ljava.lang.String;", NULL,  },
    { "choiceSelections_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "topFirst_", NULL, 0x2, "I", NULL,  },
    { "extraMarginLeft_", NULL, 0x2, "F", NULL,  },
    { "extraMarginTop_", NULL, 0x2, "F", NULL,  },
    { "substitutionFonts_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "extensionFont_", NULL, 0x2, "Lcom.itextpdf.text.pdf.BaseFont;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfTextField = { "TextField", "com.itextpdf.text.pdf", NULL, 0x1, 31, methods, 9, fields, 0, NULL};
  return &_ComItextpdfTextPdfTextField;
}

@end
