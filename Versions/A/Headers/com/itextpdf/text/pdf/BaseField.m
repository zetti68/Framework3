//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BaseField.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/BaseField.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseField.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/PdfAppearance.h"
#include "com/itextpdf/text/pdf/PdfBorderDictionary.h"
#include "com/itextpdf/text/pdf/PdfCopyFieldsImp.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfBaseField_initialized = NO;


#line 61
@implementation ComItextpdfTextPdfBaseField

JavaUtilHashMap * ComItextpdfTextPdfBaseField_fieldKeys_;


#line 161
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                       withComItextpdfTextRectangle:(ComItextpdfTextRectangle *)box
                                       withNSString:(NSString *)fieldName {
  if (self = [super init]) {
    borderWidth_ =
#line 122
    ComItextpdfTextPdfBaseField_BORDER_WIDTH_THIN;
    borderStyle_ =
#line 123
    ComItextpdfTextPdfPdfBorderDictionary_STYLE_SOLID;
    fontSize_ =
#line 128
    0;
    alignment_ =
#line 129
    ComItextpdfTextElement_ALIGN_LEFT;
    rotation_ =
#line 135
    0;
    
#line 162
    self->writer_ = writer;
    
#line 163
    [self setBoxWithComItextpdfTextRectangle:box];
    
#line 164
    self->fieldName_ = fieldName;
  }
  return self;
}


#line 167
- (ComItextpdfTextPdfBaseFont *)getRealFont {
  
#line 168
  if (font_ == nil)
#line 169
  return [ComItextpdfTextPdfBaseFont createFontWithNSString:ComItextpdfTextPdfBaseFont_get_HELVETICA_() withNSString:ComItextpdfTextPdfBaseFont_get_WINANSI_() withBoolean:NO];
  else
#line 171
  return font_;
}


#line 174
- (ComItextpdfTextPdfPdfAppearance *)getBorderAppearance {
  
#line 175
  ComItextpdfTextPdfPdfAppearance *app = [ComItextpdfTextPdfPdfAppearance createAppearanceWithComItextpdfTextPdfPdfWriter:writer_ withFloat:[((ComItextpdfTextRectangle *) nil_chk(box_)) getWidth] withFloat:[box_ getHeight]];
  switch (rotation_) {
    case 90:
    [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) setMatrixWithFloat:0 withFloat:1 withFloat:-1 withFloat:0 withFloat:[box_ getHeight] withFloat:0];
    break;
    case 180:
    [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) setMatrixWithFloat:-1 withFloat:0 withFloat:0 withFloat:-1 withFloat:[box_ getWidth] withFloat:[box_ getHeight]];
    break;
    case 270:
    [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) setMatrixWithFloat:0 withFloat:-1 withFloat:1 withFloat:0 withFloat:0 withFloat:[box_ getWidth]];
    break;
  }
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) saveState];
  
#line 189
  if (backgroundColor_ != nil) {
    [app setColorFillWithComItextpdfTextBaseColor:backgroundColor_];
    [app rectangleWithFloat:0 withFloat:0 withFloat:[box_ getWidth] withFloat:[box_ getHeight]];
    [app fill];
  }
  
#line 195
  if (borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_UNDERLINE) {
    if (borderWidth_ != 0 && borderColor_ != nil) {
      [app setColorStrokeWithComItextpdfTextBaseColor:borderColor_];
      [app setLineWidthWithFloat:borderWidth_];
      [app moveToWithFloat:0 withFloat:borderWidth_ / 2];
      [app lineToWithFloat:[box_ getWidth] withFloat:borderWidth_ / 2];
      [app stroke];
    }
  }
  else if (borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_BEVELED) {
    if (borderWidth_ != 0 && borderColor_ != nil) {
      [app setColorStrokeWithComItextpdfTextBaseColor:borderColor_];
      [app setLineWidthWithFloat:borderWidth_];
      [app rectangleWithFloat:borderWidth_ / 2 withFloat:borderWidth_ / 2 withFloat:[box_ getWidth] - borderWidth_ withFloat:[box_ getHeight] - borderWidth_];
      [app stroke];
    }
    
#line 212
    ComItextpdfTextBaseColor *actual = backgroundColor_;
    if (actual == nil)
#line 214
    actual = ComItextpdfTextBaseColor_get_WHITE_();
    [app setGrayFillWithFloat:1];
    [self drawTopFrameWithComItextpdfTextPdfPdfAppearance:app];
    [app setColorFillWithComItextpdfTextBaseColor:[((ComItextpdfTextBaseColor *) nil_chk(actual)) darker]];
    [self drawBottomFrameWithComItextpdfTextPdfPdfAppearance:app];
  }
  else if (borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_INSET) {
    if (borderWidth_ != 0 && borderColor_ != nil) {
      [app setColorStrokeWithComItextpdfTextBaseColor:borderColor_];
      [app setLineWidthWithFloat:borderWidth_];
      [app rectangleWithFloat:borderWidth_ / 2 withFloat:borderWidth_ / 2 withFloat:[box_ getWidth] - borderWidth_ withFloat:[box_ getHeight] - borderWidth_];
      [app stroke];
    }
    
#line 228
    [app setGrayFillWithFloat:0.5f];
    [self drawTopFrameWithComItextpdfTextPdfPdfAppearance:app];
    [app setGrayFillWithFloat:0.75f];
    [self drawBottomFrameWithComItextpdfTextPdfPdfAppearance:app];
  }
  else {
    if (borderWidth_ != 0 && borderColor_ != nil) {
      if (borderStyle_ == ComItextpdfTextPdfPdfBorderDictionary_STYLE_DASHED)
#line 236
      [app setLineDashWithFloat:3 withFloat:0];
      [app setColorStrokeWithComItextpdfTextBaseColor:borderColor_];
      [app setLineWidthWithFloat:borderWidth_];
      [app rectangleWithFloat:borderWidth_ / 2 withFloat:borderWidth_ / 2 withFloat:[box_ getWidth] - borderWidth_ withFloat:[box_ getHeight] - borderWidth_];
      [app stroke];
      if ((options_ & ComItextpdfTextPdfBaseField_COMB) != 0 && maxCharacterLength_ > 1) {
        jfloat step = [box_ getWidth] / maxCharacterLength_;
        jfloat yb = borderWidth_ / 2;
        jfloat yt = [box_ getHeight] - borderWidth_ / 2;
        for (jint k = 1; k < maxCharacterLength_; ++k) {
          jfloat x = step * k;
          [app moveToWithFloat:x withFloat:yb];
          [app lineToWithFloat:x withFloat:yt];
        }
        [app stroke];
      }
    }
  }
  [app restoreState];
  return app;
}


#line 258
+ (JavaUtilArrayList *)getHardBreaksWithNSString:(NSString *)text {
  
#line 259
  JavaUtilArrayList *arr = [[JavaUtilArrayList alloc] init];
  IOSCharArray *cs = [((NSString *) nil_chk(text)) toCharArray];
  jint len = ((IOSCharArray *) nil_chk(cs))->size_;
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  for (jint k = 0; k < len; ++k) {
    jchar c = IOSCharArray_Get(cs, k);
    if (c == 0x000d) {
      if (k + 1 < len && IOSCharArray_Get(cs, k + 1) == 0x000a)
#line 267
      ++k;
      [arr addWithId:[buf description]];
      buf = [[JavaLangStringBuffer alloc] init];
    }
    else if (c == 0x000a) {
      [arr addWithId:[buf description]];
      buf = [[JavaLangStringBuffer alloc] init];
    }
    else
#line 276
    (void) [buf appendWithChar:c];
  }
  [arr addWithId:[buf description]];
  return arr;
}


#line 282
+ (void)trimRightWithJavaLangStringBuffer:(JavaLangStringBuffer *)buf {
  
#line 283
  jint len = [((JavaLangStringBuffer *) nil_chk(buf)) sequenceLength];
  while (YES) {
    if (len == 0)
#line 286
    return;
    if ([buf charAtWithInt:--len] != ' ')
#line 288
    return;
    [buf setLengthWithInt:len];
  }
}


#line 293
+ (JavaUtilArrayList *)breakLinesWithJavaUtilArrayList:(JavaUtilArrayList *)breaks
                        withComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)font
                                             withFloat:(jfloat)fontSize
                                             withFloat:(jfloat)width {
  
#line 294
  JavaUtilArrayList *lines = [[JavaUtilArrayList alloc] init];
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] init];
  for (jint ck = 0; ck < [((JavaUtilArrayList *) nil_chk(breaks)) size]; ++ck) {
    [buf setLengthWithInt:0];
    jfloat w = 0;
    IOSCharArray *cs = [((NSString *) nil_chk([breaks getWithInt:ck])) toCharArray];
    jint len = ((IOSCharArray *) nil_chk(cs))->size_;
    
#line 302
    jint state = 0;
    jint lastspace = -1;
    jchar c = 0;
    jint refk = 0;
    for (jint k = 0; k < len; ++k) {
      c = IOSCharArray_Get(cs, k);
      switch (state) {
        case 0:
        w += [((ComItextpdfTextPdfBaseFont *) nil_chk(font)) getWidthPointWithInt:c withFloat:fontSize];
        (void) [buf appendWithChar:c];
        if (w > width) {
          w = 0;
          if ([buf sequenceLength] > 1) {
            --k;
            [buf setLengthWithInt:[buf sequenceLength] - 1];
          }
          [lines addWithId:[buf description]];
          [buf setLengthWithInt:0];
          refk = k;
          if (c == ' ')
#line 322
          state = 2;
          else
#line 324
          state = 1;
        }
        else {
          if (c != ' ')
#line 328
          state = 1;
        }
        break;
        case 1:
        w += [((ComItextpdfTextPdfBaseFont *) nil_chk(font)) getWidthPointWithInt:c withFloat:fontSize];
        (void) [buf appendWithChar:c];
        if (c == ' ')
#line 335
        lastspace = k;
        if (w > width) {
          w = 0;
          if (lastspace >= 0) {
            k = lastspace;
            [buf setLengthWithInt:lastspace - refk];
            [ComItextpdfTextPdfBaseField trimRightWithJavaLangStringBuffer:buf];
            [lines addWithId:[buf description]];
            [buf setLengthWithInt:0];
            refk = k;
            lastspace = -1;
            state = 2;
          }
          else {
            if ([buf sequenceLength] > 1) {
              --k;
              [buf setLengthWithInt:[buf sequenceLength] - 1];
            }
            [lines addWithId:[buf description]];
            [buf setLengthWithInt:0];
            refk = k;
            if (c == ' ')
#line 357
            state = 2;
          }
        }
        break;
        case 2:
        if (c != ' ') {
          w = 0;
          --k;
          state = 1;
        }
        break;
      }
    }
    [ComItextpdfTextPdfBaseField trimRightWithJavaLangStringBuffer:buf];
    [lines addWithId:[buf description]];
  }
  return lines;
}


#line 376
- (void)drawTopFrameWithComItextpdfTextPdfPdfAppearance:(ComItextpdfTextPdfPdfAppearance *)app {
  
#line 377
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) moveToWithFloat:borderWidth_ withFloat:borderWidth_];
  [app lineToWithFloat:borderWidth_ withFloat:[((ComItextpdfTextRectangle *) nil_chk(box_)) getHeight] - borderWidth_];
  [app lineToWithFloat:[box_ getWidth] - borderWidth_ withFloat:[box_ getHeight] - borderWidth_];
  [app lineToWithFloat:[box_ getWidth] - 2 * borderWidth_ withFloat:[box_ getHeight] - 2 * borderWidth_];
  [app lineToWithFloat:2 * borderWidth_ withFloat:[box_ getHeight] - 2 * borderWidth_];
  [app lineToWithFloat:2 * borderWidth_ withFloat:2 * borderWidth_];
  [app lineToWithFloat:borderWidth_ withFloat:borderWidth_];
  [app fill];
}


#line 387
- (void)drawBottomFrameWithComItextpdfTextPdfPdfAppearance:(ComItextpdfTextPdfPdfAppearance *)app {
  
#line 388
  [((ComItextpdfTextPdfPdfAppearance *) nil_chk(app)) moveToWithFloat:borderWidth_ withFloat:borderWidth_];
  [app lineToWithFloat:[((ComItextpdfTextRectangle *) nil_chk(box_)) getWidth] - borderWidth_ withFloat:borderWidth_];
  [app lineToWithFloat:[box_ getWidth] - borderWidth_ withFloat:[box_ getHeight] - borderWidth_];
  [app lineToWithFloat:[box_ getWidth] - 2 * borderWidth_ withFloat:[box_ getHeight] - 2 * borderWidth_];
  [app lineToWithFloat:[box_ getWidth] - 2 * borderWidth_ withFloat:2 * borderWidth_];
  [app lineToWithFloat:2 * borderWidth_ withFloat:2 * borderWidth_];
  [app lineToWithFloat:borderWidth_ withFloat:borderWidth_];
  [app fill];
}

- (jfloat)getBorderWidth {
  
#line 401
  return self->borderWidth_;
}


#line 408
- (void)setBorderWidthWithFloat:(jfloat)borderWidth {
  
#line 409
  self->borderWidth_ = borderWidth;
}


#line 415
- (jint)getBorderStyle {
  
#line 416
  return self->borderStyle_;
}


#line 425
- (void)setBorderStyleWithInt:(jint)borderStyle {
  
#line 426
  self->borderStyle_ = borderStyle;
}


#line 432
- (ComItextpdfTextBaseColor *)getBorderColor {
  
#line 433
  return self->borderColor_;
}


#line 440
- (void)setBorderColorWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)borderColor {
  
#line 441
  self->borderColor_ = borderColor;
}


#line 447
- (ComItextpdfTextBaseColor *)getBackgroundColor {
  
#line 448
  return self->backgroundColor_;
}


#line 455
- (void)setBackgroundColorWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)backgroundColor {
  
#line 456
  self->backgroundColor_ = backgroundColor;
}


#line 462
- (ComItextpdfTextBaseColor *)getTextColor {
  
#line 463
  return self->textColor_;
}


#line 470
- (void)setTextColorWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)textColor {
  
#line 471
  self->textColor_ = textColor;
}


#line 477
- (ComItextpdfTextPdfBaseFont *)getFont {
  
#line 478
  return self->font_;
}


#line 485
- (void)setFontWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)font {
  
#line 486
  self->font_ = font;
}


#line 492
- (jfloat)getFontSize {
  
#line 493
  return self->fontSize_;
}


#line 500
- (void)setFontSizeWithFloat:(jfloat)fontSize {
  
#line 501
  self->fontSize_ = fontSize;
}


#line 507
- (jint)getAlignment {
  
#line 508
  return self->alignment_;
}


#line 515
- (void)setAlignmentWithInt:(jint)alignment {
  
#line 516
  self->alignment_ = alignment;
}


#line 522
- (NSString *)getText {
  
#line 523
  return self->text_;
}


#line 529
- (void)setTextWithNSString:(NSString *)text {
  
#line 530
  self->text_ = text;
}


#line 536
- (ComItextpdfTextRectangle *)getBox {
  
#line 537
  return self->box_;
}


#line 543
- (void)setBoxWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)box {
  
#line 544
  if (box == nil) {
    self->box_ = nil;
  }
  else {
    self->box_ = [[ComItextpdfTextRectangle alloc] initWithComItextpdfTextRectangle:box];
    [self->box_ normalize];
  }
}


#line 556
- (jint)getRotation {
  
#line 557
  return self->rotation_;
}


#line 564
- (void)setRotationWithInt:(jint)rotation {
  
#line 565
  if (rotation % 90 != 0)
#line 566
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"rotation.must.be.a.multiple.of.90" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  rotation %= 360;
  if (rotation < 0)
#line 569
  rotation += 360;
  self->rotation_ = rotation;
}

- (void)setRotationFromPageWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)page {
  
#line 578
  [self setRotationWithInt:[((ComItextpdfTextRectangle *) nil_chk(page)) getRotation]];
}


#line 584
- (jint)getVisibility {
  
#line 585
  return self->visibility_;
}


#line 593
- (void)setVisibilityWithInt:(jint)visibility {
  
#line 594
  self->visibility_ = visibility;
}


#line 600
- (NSString *)getFieldName {
  
#line 601
  return self->fieldName_;
}


#line 608
- (void)setFieldNameWithNSString:(NSString *)fieldName {
  
#line 609
  self->fieldName_ = fieldName;
}


#line 615
- (jint)getOptions {
  
#line 616
  return self->options_;
}


#line 626
- (void)setOptionsWithInt:(jint)options {
  
#line 627
  self->options_ = options;
}


#line 633
- (jint)getMaxCharacterLength {
  
#line 634
  return self->maxCharacterLength_;
}


#line 641
- (void)setMaxCharacterLengthWithInt:(jint)maxCharacterLength {
  
#line 642
  self->maxCharacterLength_ = maxCharacterLength;
}


#line 649
- (ComItextpdfTextPdfPdfWriter *)getWriter {
  
#line 650
  return writer_;
}


#line 657
- (void)setWriterWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 658
  self->writer_ = writer;
}


#line 667
+ (void)moveFieldsWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)from
                  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)to {
  
#line 668
  for (id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(from)) getKeys])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComItextpdfTextPdfPdfName *key = [i next];
    if ([((JavaUtilHashMap *) nil_chk(ComItextpdfTextPdfBaseField_fieldKeys_)) containsKeyWithId:key]) {
      if (to != nil)
#line 672
      [to putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[from getWithComItextpdfTextPdfPdfName:key]];
      [i remove];
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfBaseField *)other {
  [super copyAllFieldsTo:other];
  other->alignment_ = alignment_;
  other->backgroundColor_ = backgroundColor_;
  other->borderColor_ = borderColor_;
  other->borderStyle_ = borderStyle_;
  other->borderWidth_ = borderWidth_;
  other->box_ = box_;
  other->fieldName_ = fieldName_;
  other->font_ = font_;
  other->fontSize_ = fontSize_;
  other->maxCharacterLength_ = maxCharacterLength_;
  other->options_ = options_;
  other->rotation_ = rotation_;
  other->text_ = text_;
  other->textColor_ = textColor_;
  other->visibility_ = visibility_;
  other->writer_ = writer_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfBaseField class]) {
    ComItextpdfTextPdfBaseField_fieldKeys_ =
#line 149
    [[JavaUtilHashMap alloc] init];
    {
      
#line 152
      [ComItextpdfTextPdfBaseField_fieldKeys_ putAllWithJavaUtilMap:ComItextpdfTextPdfPdfCopyFieldsImp_get_fieldKeys_()];
      (void) [ComItextpdfTextPdfBaseField_fieldKeys_ putWithId:ComItextpdfTextPdfPdfName_get_T_() withId:[JavaLangInteger valueOfWithInt:1]];
    }
    ComItextpdfTextPdfBaseField_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:withComItextpdfTextRectangle:withNSString:", "BaseField", NULL, 0x1, NULL },
    { "getRealFont", NULL, "Lcom.itextpdf.text.pdf.BaseFont;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.DocumentException;" },
    { "getBorderAppearance", NULL, "Lcom.itextpdf.text.pdf.PdfAppearance;", 0x4, NULL },
    { "getHardBreaksWithNSString:", "getHardBreaks", "Ljava.util.ArrayList;", 0xc, NULL },
    { "trimRightWithJavaLangStringBuffer:", "trimRight", "V", 0xc, NULL },
    { "breakLinesWithJavaUtilArrayList:withComItextpdfTextPdfBaseFont:withFloat:withFloat:", "breakLines", "Ljava.util.ArrayList;", 0xc, NULL },
    { "drawTopFrameWithComItextpdfTextPdfPdfAppearance:", "drawTopFrame", "V", 0x2, NULL },
    { "drawBottomFrameWithComItextpdfTextPdfPdfAppearance:", "drawBottomFrame", "V", 0x2, NULL },
    { "getBorderWidth", NULL, "F", 0x1, NULL },
    { "setBorderWidthWithFloat:", "setBorderWidth", "V", 0x1, NULL },
    { "getBorderStyle", NULL, "I", 0x1, NULL },
    { "setBorderStyleWithInt:", "setBorderStyle", "V", 0x1, NULL },
    { "getBorderColor", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
    { "setBorderColorWithComItextpdfTextBaseColor:", "setBorderColor", "V", 0x1, NULL },
    { "getBackgroundColor", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
    { "setBackgroundColorWithComItextpdfTextBaseColor:", "setBackgroundColor", "V", 0x1, NULL },
    { "getTextColor", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
    { "setTextColorWithComItextpdfTextBaseColor:", "setTextColor", "V", 0x1, NULL },
    { "getFont", NULL, "Lcom.itextpdf.text.pdf.BaseFont;", 0x1, NULL },
    { "setFontWithComItextpdfTextPdfBaseFont:", "setFont", "V", 0x1, NULL },
    { "getFontSize", NULL, "F", 0x1, NULL },
    { "setFontSizeWithFloat:", "setFontSize", "V", 0x1, NULL },
    { "getAlignment", NULL, "I", 0x1, NULL },
    { "setAlignmentWithInt:", "setAlignment", "V", 0x1, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setTextWithNSString:", "setText", "V", 0x1, NULL },
    { "getBox", NULL, "Lcom.itextpdf.text.Rectangle;", 0x1, NULL },
    { "setBoxWithComItextpdfTextRectangle:", "setBox", "V", 0x1, NULL },
    { "getRotation", NULL, "I", 0x1, NULL },
    { "setRotationWithInt:", "setRotation", "V", 0x1, NULL },
    { "setRotationFromPageWithComItextpdfTextRectangle:", "setRotationFromPage", "V", 0x1, NULL },
    { "getVisibility", NULL, "I", 0x1, NULL },
    { "setVisibilityWithInt:", "setVisibility", "V", 0x1, NULL },
    { "getFieldName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setFieldNameWithNSString:", "setFieldName", "V", 0x1, NULL },
    { "getOptions", NULL, "I", 0x1, NULL },
    { "setOptionsWithInt:", "setOptions", "V", 0x1, NULL },
    { "getMaxCharacterLength", NULL, "I", 0x1, NULL },
    { "setMaxCharacterLengthWithInt:", "setMaxCharacterLength", "V", 0x1, NULL },
    { "getWriter", NULL, "Lcom.itextpdf.text.pdf.PdfWriter;", 0x1, NULL },
    { "setWriterWithComItextpdfTextPdfPdfWriter:", "setWriter", "V", 0x1, NULL },
    { "moveFieldsWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfDictionary:", "moveFields", "V", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BORDER_WIDTH_THIN_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfBaseField_BORDER_WIDTH_THIN },
    { "BORDER_WIDTH_MEDIUM_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfBaseField_BORDER_WIDTH_MEDIUM },
    { "BORDER_WIDTH_THICK_", NULL, 0x19, "F", NULL, .constantValue.asFloat = ComItextpdfTextPdfBaseField_BORDER_WIDTH_THICK },
    { "VISIBLE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_VISIBLE },
    { "HIDDEN_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_HIDDEN },
    { "VISIBLE_BUT_DOES_NOT_PRINT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_VISIBLE_BUT_DOES_NOT_PRINT },
    { "HIDDEN_BUT_PRINTABLE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_HIDDEN_BUT_PRINTABLE },
    { "READ_ONLY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_READ_ONLY },
    { "REQUIRED_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_REQUIRED },
    { "MULTILINE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_MULTILINE },
    { "DO_NOT_SCROLL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_DO_NOT_SCROLL },
    { "PASSWORD_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_PASSWORD },
    { "FILE_SELECTION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_FILE_SELECTION },
    { "DO_NOT_SPELL_CHECK_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_DO_NOT_SPELL_CHECK },
    { "EDIT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_EDIT },
    { "MULTISELECT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_MULTISELECT },
    { "COMB_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfBaseField_COMB },
    { "borderWidth_", NULL, 0x4, "F", NULL,  },
    { "borderStyle_", NULL, 0x4, "I", NULL,  },
    { "borderColor_", NULL, 0x4, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "backgroundColor_", NULL, 0x4, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "textColor_", NULL, 0x4, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "font_", NULL, 0x4, "Lcom.itextpdf.text.pdf.BaseFont;", NULL,  },
    { "fontSize_", NULL, 0x4, "F", NULL,  },
    { "alignment_", NULL, 0x4, "I", NULL,  },
    { "writer_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfWriter;", NULL,  },
    { "text_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "box_", NULL, 0x4, "Lcom.itextpdf.text.Rectangle;", NULL,  },
    { "rotation_", NULL, 0x4, "I", NULL,  },
    { "visibility_", NULL, 0x4, "I", NULL,  },
    { "fieldName_", NULL, 0x4, "Ljava.lang.String;", NULL,  },
    { "options_", NULL, 0x4, "I", NULL,  },
    { "maxCharacterLength_", NULL, 0x4, "I", NULL,  },
    { "fieldKeys_", NULL, 0x1a, "Ljava.util.HashMap;", &ComItextpdfTextPdfBaseField_fieldKeys_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfBaseField = { "BaseField", "com.itextpdf.text.pdf", NULL, 0x401, 42, methods, 34, fields, 0, NULL};
  return &_ComItextpdfTextPdfBaseField;
}

@end
