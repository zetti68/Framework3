//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfCopy.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfCopy.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/BadPasswordException.h"
#include "com/itextpdf/text/log/Counter.h"
#include "com/itextpdf/text/log/CounterFactory.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/BadPdfFormatException.h"
#include "com/itextpdf/text/pdf/ByteBuffer.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PageResources.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfContents.h"
#include "com/itextpdf/text/pdf/PdfCopy.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfDocument.h"
#include "com/itextpdf/text/pdf/PdfException.h"
#include "com/itextpdf/text/pdf/PdfFormField.h"
#include "com/itextpdf/text/pdf/PdfImportedPage.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNull.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfOutline.h"
#include "com/itextpdf/text/pdf/PdfPage.h"
#include "com/itextpdf/text/pdf/PdfPageEvent.h"
#include "com/itextpdf/text/pdf/PdfPages.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfReaderInstance.h"
#include "com/itextpdf/text/pdf/PdfRectangle.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfStructTreeController.h"
#include "com/itextpdf/text/pdf/PdfStructureTreeRoot.h"
#include "com/itextpdf/text/pdf/PdfTemplate.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/RefKey.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/TreeSet.h"

BOOL ComItextpdfTextPdfPdfCopy_initialized = NO;


#line 66
@implementation ComItextpdfTextPdfPdfCopy

id<ComItextpdfTextLogCounter> ComItextpdfTextPdfPdfCopy_COUNTER_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfCopy_annotId_;
jint ComItextpdfTextPdfPdfCopy_annotIdCnt_ = 
#line 119
0;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfCopy_iTextTag_;
JavaLangInteger * ComItextpdfTextPdfPdfCopy_zero_;
JavaUtilHashSet * ComItextpdfTextPdfPdfCopy_widgetKeys_;
JavaUtilHashSet * ComItextpdfTextPdfPdfCopy_fieldKeys_;


#line 92
- (id<ComItextpdfTextLogCounter>)getCounter {
  
#line 93
  return ComItextpdfTextPdfPdfCopy_COUNTER_;
}


#line 172
- (instancetype)initWithComItextpdfTextDocument:(ComItextpdfTextDocument *)document
                         withJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self =
#line 173
  [super initWithComItextpdfTextPdfPdfDocument:[[ComItextpdfTextPdfPdfDocument alloc] init] withJavaIoOutputStream:os]) {
    namePtr_ = [IOSIntArray arrayWithInts:(jint[]){
#line 100
      0 } count:1];
      rotateContents_ =
#line 102
      YES;
      structTreeController_ =
#line 105
      nil;
      currentStructArrayNumber_ =
#line 106
      0;
      updateRootKids_ =
#line 116
      NO;
      mergeFields__ =
#line 121
      NO;
      needAppearances_ =
#line 122
      NO;
      mergeFieldsInternalCall_ =
#line 135
      NO;
      mergedRadioButtons_ =
#line 138
      [[JavaUtilHashSet alloc] init];
      mergedTextFields_ =
#line 139
      [[JavaUtilHashMap alloc] init];
      
#line 174
      [((ComItextpdfTextDocument *) nil_chk(document)) addDocListenerWithComItextpdfTextDocListener:pdf_];
      
#line 175
      [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) addWriterWithComItextpdfTextPdfPdfWriter:self];
      
#line 176
      indirectMap_ = [[JavaUtilHashMap alloc] init];
      
#line 177
      parentObjects_ = [[JavaUtilHashMap alloc] init];
      
#line 178
      disableIndirects_ = [[JavaUtilHashSet alloc] init];
      
#line 180
      indirectObjects_ = [[JavaUtilHashMap alloc] init];
      
#line 181
      savedObjects_ = [[JavaUtilArrayList alloc] init];
      
#line 182
      importedPages_ = [[JavaUtilArrayList alloc] init];
    }
    return self;
  }


#line 191
- (void)setPageEventWithComItextpdfTextPdfPdfPageEvent:(id<ComItextpdfTextPdfPdfPageEvent>)event {
  
#line 192
  @throw [[JavaLangUnsupportedOperationException alloc] init];
}


#line 199
- (jboolean)isRotateContents {
  
#line 200
  return self->rotateContents_;
}


#line 207
- (void)setRotateContentsWithBoolean:(jboolean)rotateContents {
  
#line 208
  self->rotateContents_ = rotateContents;
}


#line 211
- (void)setMergeFields {
  
#line 212
  self->mergeFields__ = YES;
  resources_ = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  fields_ = [[JavaUtilArrayList alloc] init];
  calculationOrder_ = [[JavaUtilArrayList alloc] init];
  fieldTree_ = [[JavaUtilHashMap alloc] init];
  unmergedMap_ = [[JavaUtilHashMap alloc] init];
  unmergedSet_ = [[JavaUtilHashSet alloc] init];
  mergedMap_ = [[JavaUtilHashMap alloc] init];
  mergedSet_ = [[JavaUtilHashSet alloc] init];
}


#line 230
- (ComItextpdfTextPdfPdfImportedPage *)getImportedPageWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                                              withInt:(jint)pageNumber {
  
#line 231
  if (mergeFields__ && !mergeFieldsInternalCall_) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.method.cannot.be.used.in.mergeFields.mode.please.use.addDocument" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"getImportedPage" } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if (mergeFields__) {
    ComItextpdfTextPdfPdfCopy_ImportedPage *newPage = [[ComItextpdfTextPdfPdfCopy_ImportedPage alloc] initWithComItextpdfTextPdfPdfReader:reader withInt:pageNumber withBoolean:mergeFields__];
    [((JavaUtilArrayList *) nil_chk(importedPages_)) addWithId:newPage];
  }
  if (structTreeController_ != nil)
#line 239
  structTreeController_->reader_ = nil;
  [((JavaUtilHashSet *) nil_chk(disableIndirects_)) clear];
  [((JavaUtilHashMap *) nil_chk(parentObjects_)) clear];
  return [self getImportedPageImplWithComItextpdfTextPdfPdfReader:reader withInt:pageNumber];
}


#line 245
- (ComItextpdfTextPdfPdfImportedPage *)getImportedPageWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                                              withInt:(jint)pageNumber
                                                                          withBoolean:(jboolean)keepTaggedPdfStructure {
  
#line 246
  if (mergeFields__ && !mergeFieldsInternalCall_) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.method.cannot.be.used.in.mergeFields.mode.please.use.addDocument" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"getImportedPage" } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  updateRootKids_ = NO;
  if (!keepTaggedPdfStructure) {
    if (mergeFields__) {
      ComItextpdfTextPdfPdfCopy_ImportedPage *newPage = [[ComItextpdfTextPdfPdfCopy_ImportedPage alloc] initWithComItextpdfTextPdfPdfReader:reader withInt:pageNumber withBoolean:mergeFields__];
      [((JavaUtilArrayList *) nil_chk(importedPages_)) addWithId:newPage];
    }
    return [self getImportedPageImplWithComItextpdfTextPdfPdfReader:reader withInt:pageNumber];
  }
  if (structTreeController_ != nil) {
    if (reader != structTreeController_->reader_)
#line 259
    [structTreeController_ setReaderWithComItextpdfTextPdfPdfReader:reader];
  }
  else {
    
#line 261
    structTreeController_ = [[ComItextpdfTextPdfPdfStructTreeController alloc] initWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfCopy:self];
  }
  ComItextpdfTextPdfPdfCopy_ImportedPage *newPage = [[ComItextpdfTextPdfPdfCopy_ImportedPage alloc] initWithComItextpdfTextPdfPdfReader:reader withInt:pageNumber withBoolean:mergeFields__];
  switch ([self checkStructureTreeRootKidsWithComItextpdfTextPdfPdfCopy_ImportedPage:newPage]) {
    case -1:
    [self clearIndirectsWithComItextpdfTextPdfPdfReader:reader];
    updateRootKids_ = YES;
    break;
    case 0:
    updateRootKids_ = NO;
    break;
    case 1:
    updateRootKids_ = YES;
    break;
  }
  [((JavaUtilArrayList *) nil_chk(importedPages_)) addWithId:newPage];
  
#line 278
  [((JavaUtilHashSet *) nil_chk(disableIndirects_)) clear];
  [((JavaUtilHashMap *) nil_chk(parentObjects_)) clear];
  return [self getImportedPageImplWithComItextpdfTextPdfPdfReader:reader withInt:pageNumber];
}


#line 283
- (void)clearIndirectsWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 284
  JavaUtilHashMap *currIndirects = [((JavaUtilHashMap *) nil_chk(indirectMap_)) getWithId:reader];
  JavaUtilArrayList *forDelete = [[JavaUtilArrayList alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(currIndirects)) entrySet])) {
    ComItextpdfTextPdfPdfIndirectReference *iRef = ((ComItextpdfTextPdfPdfCopy_IndirectReferences *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue]))->theRef_;
    ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:iRef];
    ComItextpdfTextPdfPdfIndirectObject *iobj = [((JavaUtilHashMap *) nil_chk(indirectObjects_)) getWithId:key];
    if (iobj == nil) {
      [forDelete addWithId:[entry_ getKey]];
    }
    else if ([((ComItextpdfTextPdfPdfObject *) nil_chk(iobj->object_)) isArray] || [iobj->object_ isDictionary] || [iobj->object_ isStream]) {
      [forDelete addWithId:[entry_ getKey]];
    }
  }
  
#line 298
  for (ComItextpdfTextPdfRefKey * __strong key in forDelete)
#line 299
  (void) [currIndirects removeWithId:key];
}


#line 305
- (jint)checkStructureTreeRootKidsWithComItextpdfTextPdfPdfCopy_ImportedPage:(ComItextpdfTextPdfPdfCopy_ImportedPage *)newPage {
  
#line 307
  if ([((JavaUtilArrayList *) nil_chk(importedPages_)) size] == 0) return 1;
  jboolean readerExist = NO;
  for (ComItextpdfTextPdfPdfCopy_ImportedPage * __strong page in importedPages_) {
    if ([((ComItextpdfTextPdfPdfReader *) nil_chk(((ComItextpdfTextPdfPdfCopy_ImportedPage *) nil_chk(page))->reader_)) isEqual:((ComItextpdfTextPdfPdfCopy_ImportedPage *) nil_chk(newPage))->reader_]) {
      readerExist = YES;
      break;
    }
  }
  
#line 317
  if (!readerExist) return 1;
  
#line 319
  ComItextpdfTextPdfPdfCopy_ImportedPage *lastPage = [importedPages_ getWithInt:[importedPages_ size] - 1];
  jboolean equalReader = [((ComItextpdfTextPdfPdfReader *) nil_chk(((ComItextpdfTextPdfPdfCopy_ImportedPage *) nil_chk(lastPage))->reader_)) isEqual:((ComItextpdfTextPdfPdfCopy_ImportedPage *) nil_chk(newPage))->reader_];
  
#line 322
  if (equalReader && newPage->pageNumber_ > lastPage->pageNumber_) return 0;
  
#line 324
  return -1;
}


#line 327
- (void)fixStructureTreeRootWithJavaUtilHashSet:(JavaUtilHashSet *)activeKeys
                            withJavaUtilHashSet:(JavaUtilHashSet *)activeClassMaps {
  
#line 328
  JavaUtilHashMap *newClassMap = [[JavaUtilHashMap alloc] initWithInt:[((JavaUtilHashSet *) nil_chk(activeClassMaps)) size]];
  for (ComItextpdfTextPdfPdfName * __strong key in activeClassMaps) {
    ComItextpdfTextPdfPdfObject *cm = [((JavaUtilHashMap *) nil_chk(((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_))->classes_)) getWithId:key];
    if (cm != nil) (void) [newClassMap putWithId:key withId:cm];
  }
  
#line 334
  ((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_))->classes_ = newClassMap;
  
#line 336
  ComItextpdfTextPdfPdfArray *kids = [structureTreeRoot_ getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
  if (kids != nil) {
    for (jint i = 0; i < [kids size]; ++i) {
      ComItextpdfTextPdfPdfIndirectReference *iref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([kids getPdfObjectWithInt:i], [ComItextpdfTextPdfPdfIndirectReference class]);
      ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:iref];
      if (![((JavaUtilHashSet *) nil_chk(activeKeys)) containsWithId:key]) (void) [kids removeWithInt:i--];
    }
  }
}


#line 346
- (ComItextpdfTextPdfPdfImportedPage *)getImportedPageImplWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                                                  withInt:(jint)pageNumber {
  
#line 347
  if (currentPdfReaderInstance_ != nil) {
    if ([currentPdfReaderInstance_ getReader] != reader) {
      
#line 358
      currentPdfReaderInstance_ = [super getPdfReaderInstanceWithComItextpdfTextPdfPdfReader:reader];
    }
  }
  else {
    currentPdfReaderInstance_ = [super getPdfReaderInstanceWithComItextpdfTextPdfPdfReader:reader];
  }
  
#line 366
  return [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk(currentPdfReaderInstance_)) getImportedPageWithInt:pageNumber];
}


#line 378
- (ComItextpdfTextPdfPdfIndirectReference *)copyIndirectWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)inArg
                                                                                      withBoolean:(jboolean)keepStructure
                                                                                      withBoolean:(jboolean)directRootKids {
  
#line 379
  ComItextpdfTextPdfPdfIndirectReference *theRef;
  ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPRIndirectReference:inArg];
  ComItextpdfTextPdfPdfCopy_IndirectReferences *iRef = [((JavaUtilHashMap *) nil_chk(indirects_)) getWithId:key];
  ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:inArg];
  if ((keepStructure) && (directRootKids))
#line 384
  if ([obj isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]]) {
    ComItextpdfTextPdfPdfDictionary *dict = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
    if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(dict)) containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()])
#line 387
    return nil;
  }
  
#line 390
  if (iRef != nil) {
    theRef = [iRef getRef];
    if ([iRef getCopied]) {
      return theRef;
    }
  }
  else {
    theRef = [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) getPdfIndirectReference];
    iRef = [[ComItextpdfTextPdfPdfCopy_IndirectReferences alloc] initWithComItextpdfTextPdfPdfIndirectReference:theRef];
    (void) [indirects_ putWithId:key withId:iRef];
  }
  
#line 402
  if (obj != nil && [obj isDictionary]) {
    ComItextpdfTextPdfPdfObject *type = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()]];
    if (type != nil && [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_PAGE_())) isEqual:type]) {
      return theRef;
    }
  }
  [((ComItextpdfTextPdfPdfCopy_IndirectReferences *) nil_chk(iRef)) setCopied];
  if (obj != nil) (void) [((JavaUtilHashMap *) nil_chk(parentObjects_)) putWithId:obj withId:inArg];
  ComItextpdfTextPdfPdfObject *res = [self copyObjectWithComItextpdfTextPdfPdfObject:obj withBoolean:keepStructure withBoolean:directRootKids];
  if ([((JavaUtilHashSet *) nil_chk(disableIndirects_)) containsWithId:obj])
#line 412
  [iRef setNotCopied];
  if (res != nil) {
    
#line 415
    (void) [self addToBodyWithComItextpdfTextPdfPdfObject:res withComItextpdfTextPdfPdfIndirectReference:theRef];
    return theRef;
  }
  else {
    (void) [indirects_ removeWithId:key];
    return nil;
  }
}

- (ComItextpdfTextPdfPdfIndirectReference *)copyIndirectWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)inArg {
  
#line 435
  return [self copyIndirectWithComItextpdfTextPdfPRIndirectReference:inArg withBoolean:NO withBoolean:NO];
}


#line 442
- (ComItextpdfTextPdfPdfDictionary *)copyDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)inArg
                                                                           withBoolean:(jboolean)keepStruct
                                                                           withBoolean:(jboolean)directRootKids {
  
#line 444
  ComItextpdfTextPdfPdfDictionary *out = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  ComItextpdfTextPdfPdfObject *type = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(inArg)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()]];
  
#line 447
  if (keepStruct) {
    
#line 449
    if ((directRootKids) && ([inArg containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()])) {
      
#line 451
      ComItextpdfTextPdfPdfObject *curr = inArg;
      [((JavaUtilHashSet *) nil_chk(disableIndirects_)) addWithId:curr];
      while ([((JavaUtilHashMap *) nil_chk(parentObjects_)) containsKeyWithId:curr] && !([disableIndirects_ containsWithId:curr])) {
        curr = [parentObjects_ getWithId:curr];
        [disableIndirects_ addWithId:curr];
      }
      return nil;
    }
    
#line 460
    ComItextpdfTextPdfPdfName *structType = [inArg getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()];
    [((ComItextpdfTextPdfPdfStructTreeController *) nil_chk(structTreeController_)) addRoleWithComItextpdfTextPdfPdfName:structType];
    [structTreeController_ addClassWithComItextpdfTextPdfPdfObject:inArg];
  }
  if (structTreeController_ != nil && structTreeController_->reader_ != nil && ([inArg containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTPARENTS_()] || [inArg containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTPARENT_()])) {
    ComItextpdfTextPdfPdfName *key = ComItextpdfTextPdfPdfName_get_STRUCTPARENT_();
    if ([inArg containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTPARENTS_()]) {
      key = ComItextpdfTextPdfPdfName_get_STRUCTPARENTS_();
    }
    ComItextpdfTextPdfPdfObject *value = [inArg getWithComItextpdfTextPdfPdfName:key];
    [out putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:currentStructArrayNumber_]];
    [structTreeController_ copyStructTreeForPageWithComItextpdfTextPdfPdfNumber:(ComItextpdfTextPdfPdfNumber *) check_class_cast(value, [ComItextpdfTextPdfPdfNumber class]) withInt:currentStructArrayNumber_++];
  }
  for (id __strong element in nil_chk([inArg getKeys])) {
    ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
    ComItextpdfTextPdfPdfObject *value = [inArg getWithComItextpdfTextPdfPdfName:key];
    if (structTreeController_ != nil && structTreeController_->reader_ != nil && ([((ComItextpdfTextPdfPdfName *) nil_chk(key)) isEqual:ComItextpdfTextPdfPdfName_get_STRUCTPARENTS_()] || [key isEqual:ComItextpdfTextPdfPdfName_get_STRUCTPARENT_()])) {
      continue;
    }
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_PAGE_())) isEqual:type]) {
      if (![((ComItextpdfTextPdfPdfName *) nil_chk(key)) isEqual:ComItextpdfTextPdfPdfName_get_B_()] && ![key isEqual:ComItextpdfTextPdfPdfName_get_PARENT_()]) {
        (void) [((JavaUtilHashMap *) nil_chk(parentObjects_)) putWithId:value withId:inArg];
        ComItextpdfTextPdfPdfObject *res = [self copyObjectWithComItextpdfTextPdfPdfObject:value withBoolean:keepStruct withBoolean:directRootKids];
        if (res != nil)
#line 484
        [out putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:res];
      }
    }
    else {
      ComItextpdfTextPdfPdfObject *res;
      if (tagged_ && [((ComItextpdfTextPdfPdfObject *) nil_chk(value)) isIndirect] && [self isStructTreeRootReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(value, [ComItextpdfTextPdfPRIndirectReference class])]) {
        res = [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) getReference];
      }
      else {
        
#line 492
        res = [self copyObjectWithComItextpdfTextPdfPdfObject:value withBoolean:keepStruct withBoolean:directRootKids];
      }
      if (res != nil)
#line 495
      [out putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:res];
    }
  }
  
#line 499
  return out;
}


#line 506
- (ComItextpdfTextPdfPdfDictionary *)copyDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)inArg {
  
#line 508
  return [self copyDictionaryWithComItextpdfTextPdfPdfDictionary:inArg withBoolean:NO withBoolean:NO];
}


#line 514
- (ComItextpdfTextPdfPdfStream *)copyStreamWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)inArg {
  
#line 515
  ComItextpdfTextPdfPRStream *out = [[ComItextpdfTextPdfPRStream alloc] initWithComItextpdfTextPdfPRStream:inArg withComItextpdfTextPdfPdfDictionary:nil];
  
#line 517
  for (id __strong element in nil_chk([((ComItextpdfTextPdfPRStream *) nil_chk(inArg)) getKeys])) {
    ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
    ComItextpdfTextPdfPdfObject *value = [inArg getWithComItextpdfTextPdfPdfName:key];
    (void) [((JavaUtilHashMap *) nil_chk(parentObjects_)) putWithId:value withId:inArg];
    ComItextpdfTextPdfPdfObject *res = [self copyObjectWithComItextpdfTextPdfPdfObject:value];
    if (res != nil)
#line 523
    [out putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:res];
  }
  
#line 526
  return out;
}


#line 533
- (ComItextpdfTextPdfPdfArray *)copyArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)inArg
                                                            withBoolean:(jboolean)keepStruct
                                                            withBoolean:(jboolean)directRootKids {
  ComItextpdfTextPdfPdfArray *out = [[ComItextpdfTextPdfPdfArray alloc] init];
  
#line 536
  for (id<JavaUtilIterator> i = [((ComItextpdfTextPdfPdfArray *) nil_chk(inArg)) listIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComItextpdfTextPdfPdfObject *value = [i next];
    (void) [((JavaUtilHashMap *) nil_chk(parentObjects_)) putWithId:value withId:inArg];
    ComItextpdfTextPdfPdfObject *res = [self copyObjectWithComItextpdfTextPdfPdfObject:value withBoolean:keepStruct withBoolean:directRootKids];
    if (res != nil)
#line 541
    [out addWithComItextpdfTextPdfPdfObject:res];
  }
  return out;
}

- (ComItextpdfTextPdfPdfArray *)copyArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)inArg {
  
#line 551
  return [self copyArrayWithComItextpdfTextPdfPdfArray:inArg withBoolean:NO withBoolean:NO];
}


#line 557
- (ComItextpdfTextPdfPdfObject *)copyObjectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)inArg
                                                               withBoolean:(jboolean)keepStruct
                                                               withBoolean:(jboolean)directRootKids {
  
#line 558
  if (inArg == nil)
#line 559
  return ComItextpdfTextPdfPdfNull_get_PDFNULL_();
  switch (((ComItextpdfTextPdfPdfObject *) nil_chk(inArg))->type__) {
    case ComItextpdfTextPdfPdfObject_DICTIONARY:
    return [self copyDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(inArg, [ComItextpdfTextPdfPdfDictionary class]) withBoolean:keepStruct withBoolean:directRootKids];
    case ComItextpdfTextPdfPdfObject_INDIRECT:
    if (!keepStruct && !directRootKids)
#line 566
    return [self copyIndirectWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(inArg, [ComItextpdfTextPdfPRIndirectReference class])];
    else
#line 568
    return [self copyIndirectWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(inArg, [ComItextpdfTextPdfPRIndirectReference class]) withBoolean:keepStruct withBoolean:directRootKids];
    case ComItextpdfTextPdfPdfObject_ARRAY:
    return [self copyArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(inArg, [ComItextpdfTextPdfPdfArray class]) withBoolean:keepStruct withBoolean:directRootKids];
    case ComItextpdfTextPdfPdfObject_NUMBER:
    case ComItextpdfTextPdfPdfObject_NAME:
    case ComItextpdfTextPdfPdfObject_STRING:
    case ComItextpdfTextPdfPdfObject_NULL:
    case ComItextpdfTextPdfPdfObject_BOOLEAN:
    case 0:
    return inArg;
    case ComItextpdfTextPdfPdfObject_STREAM:
    return [self copyStreamWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(inArg, [ComItextpdfTextPdfPRStream class])];
    
#line 581
    default:
    if (inArg->type__ < 0) {
      NSString *lit = [((ComItextpdfTextPdfPdfLiteral *) check_class_cast(inArg, [ComItextpdfTextPdfPdfLiteral class])) description];
      if ([((NSString *) nil_chk(lit)) isEqual:@"true"] || [lit isEqual:@"false"]) {
        return [[ComItextpdfTextPdfPdfBoolean alloc] initWithNSString:lit];
      }
      return [[ComItextpdfTextPdfPdfLiteral alloc] initWithNSString:lit];
    }
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$I", @"CANNOT COPY type ", inArg->type__)];
    return nil;
  }
}


#line 597
- (ComItextpdfTextPdfPdfObject *)copyObjectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)inArg {
  
#line 598
  return [self copyObjectWithComItextpdfTextPdfPdfObject:inArg withBoolean:NO withBoolean:NO];
}


#line 604
- (jint)setFromIPageWithComItextpdfTextPdfPdfImportedPage:(ComItextpdfTextPdfPdfImportedPage *)iPage {
  
#line 605
  jint pageNum = [((ComItextpdfTextPdfPdfImportedPage *) nil_chk(iPage)) getPageNumber];
  ComItextpdfTextPdfPdfReaderInstance *inst = currentPdfReaderInstance_ = [iPage getPdfReaderInstance];
  reader_ = [inst getReader];
  [self setFromReaderWithComItextpdfTextPdfPdfReader:reader_];
  return pageNum;
}


#line 615
- (void)setFromReaderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 616
  self->reader_ = reader;
  indirects_ = [((JavaUtilHashMap *) nil_chk(indirectMap_)) getWithId:reader];
  if (indirects_ == nil) {
    indirects_ = [[JavaUtilHashMap alloc] init];
    (void) [indirectMap_ putWithId:reader withId:indirects_];
  }
}


#line 628
- (void)addPageWithComItextpdfTextPdfPdfImportedPage:(ComItextpdfTextPdfPdfImportedPage *)iPage {
  
#line 629
  if (mergeFields__ && !mergeFieldsInternalCall_) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.method.cannot.be.used.in.mergeFields.mode.please.use.addDocument" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"addPage" } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  
#line 633
  jint pageNum = [self setFromIPageWithComItextpdfTextPdfPdfImportedPage:iPage];
  ComItextpdfTextPdfPdfDictionary *thePage = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageNWithInt:pageNum];
  ComItextpdfTextPdfPRIndirectReference *origRef = [reader_ getPageOrigRefWithInt:pageNum];
  [reader_ releasePageWithInt:pageNum];
  ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPRIndirectReference:origRef];
  ComItextpdfTextPdfPdfIndirectReference *pageRef;
  ComItextpdfTextPdfPdfCopy_IndirectReferences *iRef = [((JavaUtilHashMap *) nil_chk(indirects_)) getWithId:key];
  if (iRef != nil && ![iRef getCopied]) {
    [((JavaUtilArrayList *) nil_chk(pageReferences_)) addWithId:[iRef getRef]];
    [iRef setCopied];
  }
  pageRef = [self getCurrentPage];
  if (iRef == nil) {
    iRef = [[ComItextpdfTextPdfPdfCopy_IndirectReferences alloc] initWithComItextpdfTextPdfPdfIndirectReference:pageRef];
    (void) [indirects_ putWithId:key withId:iRef];
  }
  [((ComItextpdfTextPdfPdfCopy_IndirectReferences *) nil_chk(iRef)) setCopied];
  if (tagged_)
#line 651
  structTreeRootReference_ = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk([reader_ getCatalog])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTTREEROOT_()], [ComItextpdfTextPdfPRIndirectReference class]);
  ComItextpdfTextPdfPdfDictionary *newPage = [self copyDictionaryWithComItextpdfTextPdfPdfDictionary:thePage];
  [((ComItextpdfTextPdfPdfPages *) nil_chk(root_)) addPageWithComItextpdfTextPdfPdfDictionary:newPage];
  [((ComItextpdfTextPdfPdfImportedPage *) nil_chk(iPage)) setCopied];
  ++currentPageNumber_;
  structTreeRootReference_ = nil;
}


#line 666
- (void)addPageWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rect
                                    withInt:(jint)rotation {
  
#line 667
  if (mergeFields__ && !mergeFieldsInternalCall_) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.method.cannot.be.used.in.mergeFields.mode.please.use.addDocument" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ @"addPage" } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  ComItextpdfTextPdfPdfRectangle *mediabox = [[ComItextpdfTextPdfPdfRectangle alloc] initWithComItextpdfTextRectangle:rect withInt:rotation];
  ComItextpdfTextPdfPageResources *resources = [[ComItextpdfTextPdfPageResources alloc] init];
  ComItextpdfTextPdfPdfPage *page = [[ComItextpdfTextPdfPdfPage alloc] initWithComItextpdfTextPdfPdfRectangle:mediabox withJavaUtilHashMap:[[JavaUtilHashMap alloc] init] withComItextpdfTextPdfPdfDictionary:[resources getResources] withInt:0];
  [page putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TABS_() withComItextpdfTextPdfPdfObject:[self getTabs]];
  [((ComItextpdfTextPdfPdfPages *) nil_chk(root_)) addPageWithComItextpdfTextPdfPdfDictionary:page];
  ++currentPageNumber_;
}


#line 678
- (void)addDocumentWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                  withJavaUtilList:(id<JavaUtilList>)pagesToKeep {
  
#line 679
  if ([((JavaUtilHashMap *) nil_chk(indirectMap_)) containsKeyWithId:reader]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"document.1.has.already.been.added" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) selectPagesWithJavaUtilList:pagesToKeep withBoolean:NO];
  [self addDocumentWithComItextpdfTextPdfPdfReader:reader];
}


#line 686
- (void)addDocumentWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 687
  if (![((ComItextpdfTextDocument *) nil_chk(document_)) isOpen]) {
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.is.not.open.yet.you.can.only.add.meta.information" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if ([((JavaUtilHashMap *) nil_chk(indirectMap_)) containsKeyWithId:reader]) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"document.1.has.already.been.added" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) description] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
  if (![((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) isOpenedWithFullPermissions])
#line 694
  @throw [[ComItextpdfTextExceptionsBadPasswordException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"pdfreader.not.opened.with.owner.password" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if (mergeFields__) {
    [reader consolidateNamedDestinations];
    [reader shuffleSubsetNames];
    for (jint i = 1; i <= [reader getNumberOfPages]; i++) {
      ComItextpdfTextPdfPdfDictionary *page = [reader getPageNReleaseWithInt:i];
      if (page != nil && [page containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()]) {
        ComItextpdfTextPdfPdfArray *annots = [page getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()];
        if (annots != nil) {
          for (jint j = 0; j < [annots size]; j++) {
            ComItextpdfTextPdfPdfDictionary *annot = [annots getAsDictWithInt:j];
            if (annot != nil)
#line 706
            [annot putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_ withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:++ComItextpdfTextPdfPdfCopy_annotIdCnt_]];
          }
        }
      }
    }
    ComItextpdfTextPdfAcroFields *acro = [reader getAcroFields];
    
#line 714
    jboolean needapp = ![((ComItextpdfTextPdfAcroFields *) nil_chk(acro)) isGenerateAppearances];
    if (needapp)
#line 716
    needAppearances_ = YES;
    [((JavaUtilArrayList *) nil_chk(fields_)) addWithId:[reader getAcroFields]];
    [self updateCalculationOrderWithComItextpdfTextPdfPdfReader:reader];
  }
  jboolean tagged = self->tagged_ && [ComItextpdfTextPdfPdfStructTreeController checkTaggedWithComItextpdfTextPdfPdfReader:reader];
  mergeFieldsInternalCall_ = YES;
  for (jint i = 1; i <= [reader getNumberOfPages]; i++) {
    [self addPageWithComItextpdfTextPdfPdfImportedPage:[self getImportedPageWithComItextpdfTextPdfPdfReader:reader withInt:i withBoolean:tagged]];
  }
  mergeFieldsInternalCall_ = NO;
}


#line 729
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                       withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
  
#line 730
  return [self addToBodyWithComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfIndirectReference:ref withBoolean:NO];
}


#line 734
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
                                       withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref
                                                                      withBoolean:(jboolean)formBranching {
  
#line 735
  if (formBranching) {
    [self updateReferencesWithComItextpdfTextPdfPdfObject:object];
  }
  ComItextpdfTextPdfPdfIndirectObject *iobj;
  if ((tagged_ || mergeFields__) && indirectObjects_ != nil && ([((ComItextpdfTextPdfPdfObject *) nil_chk(object)) isArray] || [object isDictionary] || [object isStream] || [object isNull])) {
    ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:ref];
    ComItextpdfTextPdfPdfIndirectObject *obj = [indirectObjects_ getWithId:key];
    if (obj == nil) {
      obj = [[ComItextpdfTextPdfPdfIndirectObject alloc] initWithComItextpdfTextPdfPdfIndirectReference:ref withComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfWriter:self];
      (void) [indirectObjects_ putWithId:key withId:obj];
    }
    iobj = obj;
  }
  else {
    
#line 748
    iobj = [super addToBodyWithComItextpdfTextPdfPdfObject:object withComItextpdfTextPdfPdfIndirectReference:ref];
  }
  if (mergeFields__ && [((ComItextpdfTextPdfPdfObject *) nil_chk(object)) isDictionary]) {
    ComItextpdfTextPdfPdfNumber *annotId = [((ComItextpdfTextPdfPdfDictionary *) check_class_cast(object, [ComItextpdfTextPdfPdfDictionary class])) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_];
    if (annotId != nil) {
      if (formBranching) {
        (void) [((JavaUtilHashMap *) nil_chk(mergedMap_)) putWithId:[JavaLangInteger valueOfWithInt:[annotId intValue]] withId:iobj];
        [((JavaUtilHashSet *) nil_chk(mergedSet_)) addWithId:iobj];
      }
      else {
        
#line 757
        (void) [((JavaUtilHashMap *) nil_chk(unmergedMap_)) putWithId:[JavaLangInteger valueOfWithInt:[annotId intValue]] withId:iobj];
        [((JavaUtilHashSet *) nil_chk(unmergedSet_)) addWithId:iobj];
      }
    }
  }
  return iobj;
}


#line 766
- (ComItextpdfTextPdfPdfIndirectObject *)addToBodyWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 767
  ComItextpdfTextPdfPdfIndirectObject *iobj = [super addToBodyWithComItextpdfTextPdfPdfObject:object];
  if ((tagged_ || mergeFields__) && indirectObjects_ != nil) {
    [((JavaUtilArrayList *) nil_chk(savedObjects_)) addWithId:iobj];
    ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithInt:((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(iobj))->number_ withInt:iobj->generation_];
    if (![indirectObjects_ containsKeyWithId:key]) (void) [indirectObjects_ putWithId:key withId:iobj];
  }
  return iobj;
}


#line 777
- (void)flushTaggedObjects {
  @try {
    [self fixTaggedStructure];
  }
  @catch (
#line 780
  JavaLangClassCastException *ex) {
  }
  @finally {
    
#line 781
    [self flushIndirectObjects];
  }
}


#line 785
- (void)flushAcroFields {
  
#line 786
  if (mergeFields__) {
    @try {
      for (ComItextpdfTextPdfPdfReader * __strong reader in nil_chk([((JavaUtilHashMap *) nil_chk(indirectMap_)) keySet])) {
        [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) removeFields];
      }
      [self mergeFields];
      [self createAcroForms];
    }
    @catch (
#line 793
    JavaLangClassCastException *ex) {
    }
    @finally {
      
#line 795
      if (!tagged_)
#line 796
      [self flushIndirectObjects];
    }
  }
}


#line 802
- (void)fixTaggedStructure {
  
#line 803
  JavaUtilHashMap *numTree = [((ComItextpdfTextPdfPdfStructureTreeRoot *) nil_chk(structureTreeRoot_)) getNumTree];
  JavaUtilHashSet *activeKeys = [[JavaUtilHashSet alloc] init];
  JavaUtilArrayList *actives = [[JavaUtilArrayList alloc] init];
  jint pageRefIndex = 0;
  
#line 808
  if (mergeFields__ && acroForm_ != nil) {
    [actives addWithId:acroForm_];
    [activeKeys addWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:acroForm_]];
  }
  for (ComItextpdfTextPdfPdfIndirectReference * __strong page in nil_chk(pageReferences_)) {
    [actives addWithId:page];
    [activeKeys addWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:page]];
  }
  
#line 818
  for (jint i = [((JavaUtilHashMap *) nil_chk(numTree)) size] - 1; i >= 0; --i) {
    ComItextpdfTextPdfPdfIndirectReference *currNum = [numTree getWithId:[JavaLangInteger valueOfWithInt:i]];
    ComItextpdfTextPdfRefKey *numKey = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:currNum];
    ComItextpdfTextPdfPdfObject *obj = ((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([((JavaUtilHashMap *) nil_chk(indirectObjects_)) getWithId:numKey]))->object_;
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isDictionary]) {
      jboolean addActiveKeys = NO;
      if ([pageReferences_ containsWithId:[((ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()]]) {
        addActiveKeys = YES;
      }
      else {
        
#line 827
        ComItextpdfTextPdfPdfDictionary *k = [ComItextpdfTextPdfPdfStructTreeController getKDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class])];
        if (k != nil && [pageReferences_ containsWithId:[k getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()]]) {
          addActiveKeys = YES;
        }
      }
      if (addActiveKeys) {
        [activeKeys addWithId:numKey];
        [actives addWithId:currNum];
      }
      else {
        
#line 836
        (void) [numTree removeWithId:[JavaLangInteger valueOfWithInt:i]];
      }
    }
    else
#line 838
    if ([obj isArray]) {
      [activeKeys addWithId:numKey];
      [actives addWithId:currNum];
      ComItextpdfTextPdfPdfArray *currNums = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
      ComItextpdfTextPdfPdfIndirectReference *currPage = [pageReferences_ getWithInt:pageRefIndex++];
      [actives addWithId:currPage];
      [activeKeys addWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:currPage]];
      ComItextpdfTextPdfPdfIndirectReference *prevKid = nil;
      for (jint j = 0; j < [currNums size]; j++) {
        ComItextpdfTextPdfPdfIndirectReference *currKid = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([currNums getDirectObjectWithInt:j], [ComItextpdfTextPdfPdfIndirectReference class]);
        if ([((ComItextpdfTextPdfPdfIndirectReference *) nil_chk(currKid)) isEqual:prevKid]) continue;
        ComItextpdfTextPdfRefKey *kidKey = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:currKid];
        [activeKeys addWithId:kidKey];
        [actives addWithId:currKid];
        
#line 853
        ComItextpdfTextPdfPdfIndirectObject *iobj = [indirectObjects_ getWithId:kidKey];
        if ([((ComItextpdfTextPdfPdfObject *) nil_chk(((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(iobj))->object_)) isDictionary]) {
          ComItextpdfTextPdfPdfDictionary *dict = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(iobj->object_, [ComItextpdfTextPdfPdfDictionary class]);
          ComItextpdfTextPdfPdfIndirectReference *pg = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast([dict getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()], [ComItextpdfTextPdfPdfIndirectReference class]);
          
#line 858
          if (pg != nil && ![pageReferences_ containsWithId:pg] && ![pg isEqual:currPage]) {
            [dict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_() withComItextpdfTextPdfPdfObject:currPage];
            ComItextpdfTextPdfPdfArray *kids = [dict getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
            if (kids != nil) {
              ComItextpdfTextPdfPdfObject *firstKid = [kids getDirectObjectWithInt:0];
              if ([((ComItextpdfTextPdfPdfObject *) nil_chk(firstKid)) isNumber]) (void) [kids removeWithInt:0];
            }
          }
        }
        prevKid = currKid;
      }
    }
  }
  
#line 872
  JavaUtilHashSet *activeClassMaps = [[JavaUtilHashSet alloc] init];
  
#line 874
  [self findActivesWithJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys withJavaUtilHashSet:activeClassMaps];
  
#line 876
  JavaUtilArrayList *newRefs = [self findActiveParentsWithJavaUtilHashSet:activeKeys];
  
#line 878
  [self fixPgKeyWithJavaUtilArrayList:newRefs withJavaUtilHashSet:activeKeys];
  
#line 880
  [self fixStructureTreeRootWithJavaUtilHashSet:activeKeys withJavaUtilHashSet:activeClassMaps];
  
#line 882
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(indirectObjects_)) entrySet])) {
    if (![activeKeys containsWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]]) {
      (void) [entry_ setValueWithId:nil];
    }
    else {
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([entry_ getValue]))->object_)) isArray]) {
        [self removeInactiveReferencesWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([entry_ getValue]))->object_, [ComItextpdfTextPdfPdfArray class]) withJavaUtilHashSet:activeKeys];
      }
      else
#line 889
      if ([((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([entry_ getValue]))->object_ isDictionary]) {
        ComItextpdfTextPdfPdfObject *kids = [((ComItextpdfTextPdfPdfDictionary *) check_class_cast(((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([entry_ getValue]))->object_, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
        if (kids != nil && [kids isArray])
#line 892
        [self removeInactiveReferencesWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(kids, [ComItextpdfTextPdfPdfArray class]) withJavaUtilHashSet:activeKeys];
      }
    }
  }
}


#line 898
- (void)removeInactiveReferencesWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)array
                                           withJavaUtilHashSet:(JavaUtilHashSet *)activeKeys {
  
#line 899
  for (jint i = 0; i < [((ComItextpdfTextPdfPdfArray *) nil_chk(array)) size]; ++i) {
    ComItextpdfTextPdfPdfObject *obj = [array getPdfObjectWithInt:i];
    if (([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type] == 0 && ![((JavaUtilHashSet *) nil_chk(activeKeys)) containsWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])]]) ||
#line 902
    ([obj isDictionary] && [self containsInactivePgWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]) withJavaUtilHashSet:activeKeys]))
#line 903
    (void) [array removeWithInt:i--];
  }
}


#line 907
- (jboolean)containsInactivePgWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dict
                                              withJavaUtilHashSet:(JavaUtilHashSet *)activeKeys {
  
#line 908
  ComItextpdfTextPdfPdfObject *pg = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dict)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()];
  if (pg != nil && ![((JavaUtilHashSet *) nil_chk(activeKeys)) containsWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(pg, [ComItextpdfTextPdfPdfIndirectReference class])]])
#line 910
  return YES;
  return NO;
}


#line 915
- (JavaUtilArrayList *)findActiveParentsWithJavaUtilHashSet:(JavaUtilHashSet *)activeKeys {
  
#line 916
  JavaUtilArrayList *newRefs = [[JavaUtilArrayList alloc] init];
  JavaUtilArrayList *tmpActiveKeys = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:activeKeys];
  for (jint i = 0; i < [tmpActiveKeys size]; ++i) {
    ComItextpdfTextPdfPdfIndirectObject *iobj = [((JavaUtilHashMap *) nil_chk(indirectObjects_)) getWithId:[tmpActiveKeys getWithInt:i]];
    if (iobj == nil || ![((ComItextpdfTextPdfPdfObject *) nil_chk(iobj->object_)) isDictionary]) continue;
    ComItextpdfTextPdfPdfObject *parent = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfDictionary *) check_class_cast(((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(iobj))->object_, [ComItextpdfTextPdfPdfDictionary class])))) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_P_()];
    if (parent != nil && [parent type] == 0) {
      ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(parent, [ComItextpdfTextPdfPdfIndirectReference class])];
      if (![((JavaUtilHashSet *) nil_chk(activeKeys)) containsWithId:key]) {
        [activeKeys addWithId:key];
        [tmpActiveKeys addWithId:key];
        [newRefs addWithId:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(parent, [ComItextpdfTextPdfPdfIndirectReference class])];
      }
    }
  }
  return newRefs;
}


#line 934
- (void)fixPgKeyWithJavaUtilArrayList:(JavaUtilArrayList *)newRefs
                  withJavaUtilHashSet:(JavaUtilHashSet *)activeKeys {
  
#line 935
  for (ComItextpdfTextPdfPdfIndirectReference * __strong iref in nil_chk(newRefs)) {
    ComItextpdfTextPdfPdfIndirectObject *iobj = [((JavaUtilHashMap *) nil_chk(indirectObjects_)) getWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:iref]];
    if (iobj == nil || ![((ComItextpdfTextPdfPdfObject *) nil_chk(iobj->object_)) isDictionary]) continue;
    ComItextpdfTextPdfPdfDictionary *dict = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(iobj))->object_, [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfObject *pg = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dict)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()];
    if (pg == nil || [((JavaUtilHashSet *) nil_chk(activeKeys)) containsWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(pg, [ComItextpdfTextPdfPdfIndirectReference class])]]) continue;
    ComItextpdfTextPdfPdfArray *kids = [dict getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()];
    if (kids == nil) continue;
    for (jint i = 0; i < [((ComItextpdfTextPdfPdfArray *) nil_chk(kids)) size]; ++i) {
      ComItextpdfTextPdfPdfObject *obj = [kids getPdfObjectWithInt:i];
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type] != 0) {
        (void) [kids removeWithInt:i--];
      }
      else {
        
#line 948
        ComItextpdfTextPdfPdfIndirectObject *kid = [indirectObjects_ getWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])]];
        if (kid != nil && [((ComItextpdfTextPdfPdfObject *) nil_chk(kid->object_)) isDictionary]) {
          ComItextpdfTextPdfPdfObject *kidPg = [((ComItextpdfTextPdfPdfDictionary *) check_class_cast(kid->object_, [ComItextpdfTextPdfPdfDictionary class])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()];
          if (kidPg != nil && [((JavaUtilHashSet *) nil_chk(activeKeys)) containsWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(kidPg, [ComItextpdfTextPdfPdfIndirectReference class])]]) {
            [dict putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_() withComItextpdfTextPdfPdfObject:kidPg];
            break;
          }
        }
      }
    }
  }
}


#line 961
- (void)findActivesWithJavaUtilArrayList:(JavaUtilArrayList *)actives
                     withJavaUtilHashSet:(JavaUtilHashSet *)activeKeys
                     withJavaUtilHashSet:(JavaUtilHashSet *)activeClassMaps {
  
#line 963
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(actives)) size]; ++i) {
    ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:[actives getWithInt:i]];
    ComItextpdfTextPdfPdfIndirectObject *iobj = [((JavaUtilHashMap *) nil_chk(indirectObjects_)) getWithId:key];
    if (iobj == nil || iobj->object_ == nil) continue;
    switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(iobj))->object_)) type]) {
      case 0:
      [self findActivesFromReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(iobj->object_, [ComItextpdfTextPdfPdfIndirectReference class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys];
      break;
      case ComItextpdfTextPdfPdfObject_ARRAY:
      [self findActivesFromArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(iobj->object_, [ComItextpdfTextPdfPdfArray class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys withJavaUtilHashSet:activeClassMaps];
      break;
      case ComItextpdfTextPdfPdfObject_DICTIONARY:
      case ComItextpdfTextPdfPdfObject_STREAM:
      [self findActivesFromDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(iobj->object_, [ComItextpdfTextPdfPdfDictionary class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys withJavaUtilHashSet:activeClassMaps];
      break;
    }
  }
}


#line 982
- (void)findActivesFromReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)iref
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)actives
                                                       withJavaUtilHashSet:(JavaUtilHashSet *)activeKeys {
  
#line 983
  ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPdfIndirectReference:iref];
  ComItextpdfTextPdfPdfIndirectObject *iobj = [((JavaUtilHashMap *) nil_chk(indirectObjects_)) getWithId:key];
  if (iobj != nil && [((ComItextpdfTextPdfPdfObject *) nil_chk(iobj->object_)) isDictionary] && [self containsInactivePgWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(iobj->object_, [ComItextpdfTextPdfPdfDictionary class]) withJavaUtilHashSet:activeKeys]) return;
  
#line 987
  if (![((JavaUtilHashSet *) nil_chk(activeKeys)) containsWithId:key]) {
    [activeKeys addWithId:key];
    [((JavaUtilArrayList *) nil_chk(actives)) addWithId:iref];
  }
}


#line 993
- (void)findActivesFromArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)array
                                     withJavaUtilArrayList:(JavaUtilArrayList *)actives
                                       withJavaUtilHashSet:(JavaUtilHashSet *)activeKeys
                                       withJavaUtilHashSet:(JavaUtilHashSet *)activeClassMaps {
  
#line 994
  for (ComItextpdfTextPdfPdfObject * __strong obj in nil_chk(array)) {
    switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type]) {
      case 0:
      [self findActivesFromReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys];
      break;
      case ComItextpdfTextPdfPdfObject_ARRAY:
      [self findActivesFromArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys withJavaUtilHashSet:activeClassMaps];
      break;
      case ComItextpdfTextPdfPdfObject_DICTIONARY:
      case ComItextpdfTextPdfPdfObject_STREAM:
      [self findActivesFromDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys withJavaUtilHashSet:activeClassMaps];
      break;
    }
  }
}


#line 1010
- (void)findActivesFromDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dict
                                         withJavaUtilArrayList:(JavaUtilArrayList *)actives
                                           withJavaUtilHashSet:(JavaUtilHashSet *)activeKeys
                                           withJavaUtilHashSet:(JavaUtilHashSet *)activeClassMaps {
  
#line 1011
  if ([self containsInactivePgWithComItextpdfTextPdfPdfDictionary:dict withJavaUtilHashSet:activeKeys]) return;
  for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(dict)) getKeys])) {
    ComItextpdfTextPdfPdfObject *obj = [dict getWithComItextpdfTextPdfPdfName:key];
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(key)) isEqual:ComItextpdfTextPdfPdfName_get_P_()]) continue;
    else if ([key isEqual:ComItextpdfTextPdfPdfName_get_C_()]) {
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isArray]) {
        for (ComItextpdfTextPdfPdfObject * __strong cm in (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class])) {
          if ([((ComItextpdfTextPdfPdfObject *) nil_chk(cm)) isName]) [((JavaUtilHashSet *) nil_chk(activeClassMaps)) addWithId:(ComItextpdfTextPdfPdfName *) check_class_cast(cm, [ComItextpdfTextPdfPdfName class])];
        }
      }
      else if ([obj isName]) [((JavaUtilHashSet *) nil_chk(activeClassMaps)) addWithId:(ComItextpdfTextPdfPdfName *) check_class_cast(obj, [ComItextpdfTextPdfPdfName class])];
      continue;
    }
    switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) type]) {
      case 0:
      [self findActivesFromReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys];
      break;
      case ComItextpdfTextPdfPdfObject_ARRAY:
      [self findActivesFromArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys withJavaUtilHashSet:activeClassMaps];
      break;
      case ComItextpdfTextPdfPdfObject_DICTIONARY:
      case ComItextpdfTextPdfPdfObject_STREAM:
      [self findActivesFromDictWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]) withJavaUtilArrayList:actives withJavaUtilHashSet:activeKeys withJavaUtilHashSet:activeClassMaps];
      break;
    }
  }
}


#line 1039
- (void)flushIndirectObjects {
  
#line 1040
  for (ComItextpdfTextPdfPdfIndirectObject * __strong iobj in nil_chk(savedObjects_))
#line 1041
  (void) [((JavaUtilHashMap *) nil_chk(indirectObjects_)) removeWithId:[[ComItextpdfTextPdfRefKey alloc] initWithInt:((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(iobj))->number_ withInt:iobj->generation_]];
  JavaUtilHashSet *inactives = [[JavaUtilHashSet alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(indirectObjects_)) entrySet])) {
    if ([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue] != nil) [self writeObjectToBodyWithComItextpdfTextPdfPdfIndirectObject:[entry_ getValue]];
    else [inactives addWithId:[entry_ getKey]];
  }
  JavaUtilArrayList *pdfCrossReferences = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_))->xrefs_];
  for (ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference * __strong cr in pdfCrossReferences) {
    ComItextpdfTextPdfRefKey *key = [[ComItextpdfTextPdfRefKey alloc] initWithInt:[((ComItextpdfTextPdfPdfWriter_PdfBody_PdfCrossReference *) nil_chk(cr)) getRefnum] withInt:0];
    if ([inactives containsWithId:key]) [((JavaUtilTreeSet *) nil_chk(body_->xrefs_)) removeWithId:cr];
  }
  indirectObjects_ = nil;
}


#line 1055
- (void)writeObjectToBodyWithComItextpdfTextPdfPdfIndirectObject:(ComItextpdfTextPdfPdfIndirectObject *)object {
  
#line 1056
  jboolean skipWriting = NO;
  if (mergeFields__) {
    [self updateAnnotationReferencesWithComItextpdfTextPdfPdfObject:((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(object))->object_];
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(object->object_)) isDictionary] || [object->object_ isStream]) {
      ComItextpdfTextPdfPdfDictionary *dictionary = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(object->object_, [ComItextpdfTextPdfPdfDictionary class]);
      if ([((JavaUtilHashSet *) nil_chk(unmergedSet_)) containsWithId:object]) {
        ComItextpdfTextPdfPdfNumber *annotId = [dictionary getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_];
        if (annotId != nil && [((JavaUtilHashMap *) nil_chk(mergedMap_)) containsKeyWithId:[JavaLangInteger valueOfWithInt:[annotId intValue]]])
#line 1064
        skipWriting = YES;
      }
      if ([((JavaUtilHashSet *) nil_chk(mergedSet_)) containsWithId:object]) {
        ComItextpdfTextPdfPdfNumber *annotId = [dictionary getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_];
        if (annotId != nil) {
          ComItextpdfTextPdfPdfIndirectObject *unmerged = [((JavaUtilHashMap *) nil_chk(unmergedMap_)) getWithId:[JavaLangInteger valueOfWithInt:[annotId intValue]]];
          if (unmerged != nil && [unmerged->object_ isDictionary]) {
            ComItextpdfTextPdfPdfNumber *structParent = [((ComItextpdfTextPdfPdfDictionary *) check_class_cast(unmerged->object_, [ComItextpdfTextPdfPdfDictionary class])) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTPARENT_()];
            if (structParent != nil) {
              [dictionary putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTPARENT_() withComItextpdfTextPdfPdfObject:structParent];
            }
          }
        }
      }
    }
  }
  if (!skipWriting) {
    ComItextpdfTextPdfPdfDictionary *dictionary = nil;
    ComItextpdfTextPdfPdfNumber *annotId = nil;
    if (mergeFields__ && [((ComItextpdfTextPdfPdfObject *) nil_chk(((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(object))->object_)) isDictionary]) {
      dictionary = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(object->object_, [ComItextpdfTextPdfPdfDictionary class]);
      annotId = [dictionary getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_];
      if (annotId != nil)
#line 1087
      [dictionary removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_];
    }
    (void) [((ComItextpdfTextPdfPdfWriter_PdfBody *) nil_chk(body_)) addWithComItextpdfTextPdfPdfObject:((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(object))->object_ withInt:object->number_ withInt:object->generation_ withBoolean:YES];
    if (annotId != nil) {
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dictionary)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_ withComItextpdfTextPdfPdfObject:annotId];
    }
  }
}


#line 1096
- (void)updateAnnotationReferencesWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 1097
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isArray]) {
    ComItextpdfTextPdfPdfArray *array = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
    for (jint i = 0; i < [array size]; i++) {
      ComItextpdfTextPdfPdfObject *o = [array getPdfObjectWithInt:i];
      if ([o isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]]) {
        for (ComItextpdfTextPdfPdfIndirectObject * __strong entry_ in nil_chk(unmergedSet_)) {
          if ([((NSString *) nil_chk([((ComItextpdfTextPdfPdfIndirectReference *) nil_chk([((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(entry_)) getIndirectReference])) description])) isEqual:[((ComItextpdfTextPdfPdfObject *) nil_chk(o)) description]]) {
            if ([((ComItextpdfTextPdfPdfObject *) nil_chk(entry_->object_)) isDictionary]) {
              ComItextpdfTextPdfPdfNumber *annotId = [((ComItextpdfTextPdfPdfDictionary *) check_class_cast(entry_->object_, [ComItextpdfTextPdfPdfDictionary class])) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_];
              if (annotId != nil) {
                ComItextpdfTextPdfPdfIndirectObject *merged = [((JavaUtilHashMap *) nil_chk(mergedMap_)) getWithId:[JavaLangInteger valueOfWithInt:[annotId intValue]]];
                if (merged != nil) {
                  (void) [array setWithInt:i withComItextpdfTextPdfPdfObject:[merged getIndirectReference]];
                }
              }
            }
          }
        }
      }
      else {
        
#line 1116
        [self updateAnnotationReferencesWithComItextpdfTextPdfPdfObject:o];
      }
    }
  }
  else
#line 1119
  if ([obj isDictionary] || [obj isStream]) {
    ComItextpdfTextPdfPdfDictionary *dictionary = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
    for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([dictionary getKeys])) {
      ComItextpdfTextPdfPdfObject *o = [dictionary getWithComItextpdfTextPdfPdfName:key];
      if ([o isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]]) {
        for (ComItextpdfTextPdfPdfIndirectObject * __strong entry_ in nil_chk(unmergedSet_)) {
          if ([((NSString *) nil_chk([((ComItextpdfTextPdfPdfIndirectReference *) nil_chk([((ComItextpdfTextPdfPdfIndirectObject *) nil_chk(entry_)) getIndirectReference])) description])) isEqual:[((ComItextpdfTextPdfPdfObject *) nil_chk(o)) description]]) {
            if ([((ComItextpdfTextPdfPdfObject *) nil_chk(entry_->object_)) isDictionary]) {
              ComItextpdfTextPdfPdfNumber *annotId = [((ComItextpdfTextPdfPdfDictionary *) check_class_cast(entry_->object_, [ComItextpdfTextPdfPdfDictionary class])) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_annotId_];
              if (annotId != nil) {
                ComItextpdfTextPdfPdfIndirectObject *merged = [((JavaUtilHashMap *) nil_chk(mergedMap_)) getWithId:[JavaLangInteger valueOfWithInt:[annotId intValue]]];
                if (merged != nil) {
                  [dictionary putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[merged getIndirectReference]];
                }
              }
            }
          }
        }
      }
      else {
        
#line 1138
        [self updateAnnotationReferencesWithComItextpdfTextPdfPdfObject:o];
      }
    }
  }
}


#line 1144
- (void)updateCalculationOrderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 1145
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *acro = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()];
  if (acro == nil)
#line 1148
  return;
  ComItextpdfTextPdfPdfArray *co = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(acro)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CO_()];
  if (co == nil || [co size] == 0)
#line 1151
  return;
  ComItextpdfTextPdfAcroFields *af = [reader getAcroFields];
  for (jint k = 0; k < [((ComItextpdfTextPdfPdfArray *) nil_chk(co)) size]; ++k) {
    ComItextpdfTextPdfPdfObject *obj = [co getPdfObjectWithInt:k];
    if (obj == nil || ![obj isIndirect])
#line 1156
    continue;
    NSString *name = [ComItextpdfTextPdfPdfCopy getCONameWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPRIndirectReference class])];
    if ([((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFieldItemWithNSString:name] == nil)
#line 1159
    continue;
    name = JreStrcat("C$", '.', name);
    if ([((JavaUtilArrayList *) nil_chk(calculationOrder_)) containsWithId:name])
#line 1162
    continue;
    [calculationOrder_ addWithId:name];
  }
}


#line 1167
+ (NSString *)getCONameWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
             withComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref {
  
#line 1168
  NSString *name = @"";
  while (ref != nil) {
    ComItextpdfTextPdfPdfObject *obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:ref];
    if (obj == nil || [obj type] != ComItextpdfTextPdfPdfObject_DICTIONARY)
#line 1172
    break;
    ComItextpdfTextPdfPdfDictionary *dic = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
    ComItextpdfTextPdfPdfString *t = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_()];
    if (t != nil) {
      name = JreStrcat("$C$", [t toUnicodeString], '.', name);
    }
    ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast([dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_()], [ComItextpdfTextPdfPRIndirectReference class]);
  }
  if ([name hasSuffix:@"."])
#line 1181
  name = [name substring:0 endIndex:((jint) [name length]) - 2];
  return name;
}


#line 1185
- (void)mergeFields {
  
#line 1186
  jint pageOffset = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(fields_)) size]; ++k) {
    ComItextpdfTextPdfAcroFields *af = [fields_ getWithInt:k];
    id<JavaUtilMap> fd = [((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFields];
    [self addPageOffsetToFieldWithJavaUtilMap:fd withInt:pageOffset];
    [self mergeWithMasterWithJavaUtilMap:fd];
    pageOffset += [((ComItextpdfTextPdfPdfReader *) nil_chk(af->reader_)) getNumberOfPages];
  }
}


#line 1196
- (void)addPageOffsetToFieldWithJavaUtilMap:(id<JavaUtilMap>)fd
                                    withInt:(jint)pageOffset {
  
#line 1197
  if (pageOffset == 0)
#line 1198
  return;
  for (ComItextpdfTextPdfAcroFields_Item * __strong item in nil_chk([((id<JavaUtilMap>) nil_chk(fd)) values])) {
    for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
      jint p = [((JavaLangInteger *) nil_chk([item getPageWithInt:k])) intValue];
      [item forcePageWithInt:k withInt:p + pageOffset];
    }
  }
}


#line 1207
- (void)mergeWithMasterWithJavaUtilMap:(id<JavaUtilMap>)fd {
  
#line 1208
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(fd)) entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    [self mergeFieldWithNSString:name withComItextpdfTextPdfAcroFields_Item:[entry_ getValue]];
  }
}


#line 1215
- (void)mergeFieldWithNSString:(NSString *)name
withComItextpdfTextPdfAcroFields_Item:(ComItextpdfTextPdfAcroFields_Item *)item {
  JavaUtilHashMap *map = fieldTree_;
  JavaUtilStringTokenizer *tk = [[JavaUtilStringTokenizer alloc] initWithNSString:name withNSString:@"."];
  if (![tk hasMoreTokens])
#line 1219
  return;
  while (YES) {
    NSString *s = [tk nextToken];
    id obj = [((JavaUtilHashMap *) nil_chk(map)) getWithId:s];
    if ([tk hasMoreTokens]) {
      if (obj == nil) {
        obj = [[JavaUtilHashMap alloc] init];
        (void) [map putWithId:s withId:obj];
        map = (JavaUtilHashMap *) check_class_cast(obj, [JavaUtilHashMap class]);
        continue;
      }
      else if ([obj isKindOfClass:[JavaUtilHashMap class]])
#line 1231
      map = (JavaUtilHashMap *) check_class_cast(obj, [JavaUtilHashMap class]);
      else
#line 1233
      return;
    }
    else {
      if ([obj isKindOfClass:[JavaUtilHashMap class]])
#line 1237
      return;
      ComItextpdfTextPdfPdfDictionary *merged = [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) getMergedWithInt:0];
      if (obj == nil) {
        ComItextpdfTextPdfPdfDictionary *field = [[ComItextpdfTextPdfPdfDictionary alloc] init];
        if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_SIG_())) isEqual:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()]])
#line 1242
        hasSignature_ = YES;
        for (id __strong element in nil_chk([merged getKeys])) {
          ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
          if ([((JavaUtilHashSet *) nil_chk(ComItextpdfTextPdfPdfCopy_fieldKeys_)) containsWithId:key])
#line 1246
          [field putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[merged getWithComItextpdfTextPdfPdfName:key]];
        }
        JavaUtilArrayList *list = [[JavaUtilArrayList alloc] init];
        [list addWithId:field];
        [self createWidgetsWithJavaUtilArrayList:list withComItextpdfTextPdfAcroFields_Item:item];
        (void) [map putWithId:s withId:list];
      }
      else {
        JavaUtilArrayList *list = (JavaUtilArrayList *) check_class_cast(obj, [JavaUtilArrayList class]);
        ComItextpdfTextPdfPdfDictionary *field = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([list getWithInt:0], [ComItextpdfTextPdfPdfDictionary class]);
        ComItextpdfTextPdfPdfName *type1 = (ComItextpdfTextPdfPdfName *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(field)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()], [ComItextpdfTextPdfPdfName class]);
        ComItextpdfTextPdfPdfName *type2 = (ComItextpdfTextPdfPdfName *) check_class_cast([((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()], [ComItextpdfTextPdfPdfName class]);
        if (type1 == nil || ![type1 isEqual:type2])
#line 1259
        return;
        jint flag1 = 0;
        ComItextpdfTextPdfPdfObject *f1 = [field getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
        if (f1 != nil && [f1 isNumber])
#line 1263
        flag1 = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(f1, [ComItextpdfTextPdfPdfNumber class])) intValue];
        jint flag2 = 0;
        ComItextpdfTextPdfPdfObject *f2 = [merged getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
        if (f2 != nil && [f2 isNumber])
#line 1267
        flag2 = [((ComItextpdfTextPdfPdfNumber *) check_class_cast(f2, [ComItextpdfTextPdfPdfNumber class])) intValue];
        if ([((ComItextpdfTextPdfPdfName *) nil_chk(type1)) isEqual:ComItextpdfTextPdfPdfName_get_BTN_()]) {
          if (((flag1 ^ flag2) & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) != 0)
#line 1270
          return;
          if ((flag1 & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) == 0 && ((flag1 ^ flag2) & ComItextpdfTextPdfPdfFormField_FF_RADIO) != 0)
#line 1272
          return;
        }
        else if ([type1 isEqual:ComItextpdfTextPdfPdfName_get_CH_()]) {
          if (((flag1 ^ flag2) & ComItextpdfTextPdfPdfFormField_FF_COMBO) != 0)
#line 1276
          return;
        }
        [self createWidgetsWithJavaUtilArrayList:list withComItextpdfTextPdfAcroFields_Item:item];
      }
      return;
    }
  }
}


#line 1285
- (void)createWidgetsWithJavaUtilArrayList:(JavaUtilArrayList *)list
     withComItextpdfTextPdfAcroFields_Item:(ComItextpdfTextPdfAcroFields_Item *)item {
  
#line 1286
  for (jint k = 0; k < [((ComItextpdfTextPdfAcroFields_Item *) nil_chk(item)) size]; ++k) {
    [((JavaUtilArrayList *) nil_chk(list)) addWithId:[item getPageWithInt:k]];
    ComItextpdfTextPdfPdfDictionary *merged = [item getMergedWithInt:k];
    ComItextpdfTextPdfPdfObject *dr = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(merged)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_()];
    if (dr != nil)
#line 1291
    [ComItextpdfTextPdfPdfFormField mergeResourcesWithComItextpdfTextPdfPdfDictionary:resources_ withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:dr], [ComItextpdfTextPdfPdfDictionary class])];
    ComItextpdfTextPdfPdfDictionary *widget = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    for (id __strong element in nil_chk([merged getKeys])) {
      ComItextpdfTextPdfPdfName *key = (ComItextpdfTextPdfPdfName *) check_class_cast(element, [ComItextpdfTextPdfPdfName class]);
      if ([((JavaUtilHashSet *) nil_chk(ComItextpdfTextPdfPdfCopy_widgetKeys_)) containsWithId:key])
#line 1296
      [widget putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[merged getWithComItextpdfTextPdfPdfName:key]];
    }
    [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_iTextTag_ withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:[((JavaLangInteger *) nil_chk([item getTabOrderWithInt:k])) intValue] + 1]];
    [list addWithId:widget];
  }
}


#line 1303
- (ComItextpdfTextPdfPdfObject *)propagateWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 1304
  if (obj == nil) {
    return [[ComItextpdfTextPdfPdfNull alloc] init];
  }
  else
#line 1306
  if ([obj isArray]) {
    ComItextpdfTextPdfPdfArray *a = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
    for (jint i = 0; i < [a size]; i++) {
      (void) [a setWithInt:i withComItextpdfTextPdfPdfObject:[self propagateWithComItextpdfTextPdfPdfObject:[a getPdfObjectWithInt:i]]];
    }
    return a;
  }
  else
#line 1312
  if ([obj isDictionary] || [obj isStream]) {
    ComItextpdfTextPdfPdfDictionary *d = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
    for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([d getKeys])) {
      [d putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[self propagateWithComItextpdfTextPdfPdfObject:[d getWithComItextpdfTextPdfPdfName:key]]];
    }
    return d;
  }
  else
#line 1318
  if ([obj isIndirect]) {
    obj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:obj];
    return [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:[self propagateWithComItextpdfTextPdfPdfObject:obj]])) getIndirectReference];
  }
  else return obj;
}


#line 1325
- (void)createAcroForms {
  
#line 1326
  if ([((JavaUtilHashMap *) nil_chk(fieldTree_)) isEmpty])
#line 1327
  return;
  ComItextpdfTextPdfPdfDictionary *form = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [form putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_() withComItextpdfTextPdfPdfObject:[self propagateWithComItextpdfTextPdfPdfObject:resources_]];
  
#line 1331
  if (needAppearances_) {
    [form putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NEEDAPPEARANCES_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfBoolean_get_PDFTRUE_()];
  }
  [form putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"/Helv 0 Tf 0 g "]];
  tabOrder_ = [[JavaUtilHashMap alloc] init];
  calculationOrderRefs_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:calculationOrder_];
  [form putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_() withComItextpdfTextPdfPdfObject:[self branchFormWithJavaUtilHashMap:fieldTree_ withComItextpdfTextPdfPdfIndirectReference:nil withNSString:@""]];
  if (hasSignature_)
#line 1339
  [form putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SIGFLAGS_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:3]];
  ComItextpdfTextPdfPdfArray *co = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (jint k = 0; k < [calculationOrderRefs_ size]; ++k) {
    id obj = [calculationOrderRefs_ getWithInt:k];
    if ([obj isKindOfClass:[ComItextpdfTextPdfPdfIndirectReference class]])
#line 1344
    [co addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(obj, [ComItextpdfTextPdfPdfIndirectReference class])];
  }
  if ([co size] > 0)
#line 1347
  [form putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CO_() withComItextpdfTextPdfPdfObject:co];
  self->acroForm_ = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:form])) getIndirectReference];
}


#line 1351
- (void)updateReferencesWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)obj {
  
#line 1352
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(obj)) isDictionary] || [obj isStream]) {
    ComItextpdfTextPdfPdfDictionary *dictionary = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(obj, [ComItextpdfTextPdfPdfDictionary class]);
    for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([dictionary getKeys])) {
      ComItextpdfTextPdfPdfObject *o = [dictionary getWithComItextpdfTextPdfPdfName:key];
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(o)) isIndirect]) {
        ComItextpdfTextPdfPdfReader *reader = [((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(o, [ComItextpdfTextPdfPRIndirectReference class])) getReader];
        JavaUtilHashMap *indirects = [((JavaUtilHashMap *) nil_chk(indirectMap_)) getWithId:reader];
        ComItextpdfTextPdfPdfCopy_IndirectReferences *indRef = [((JavaUtilHashMap *) nil_chk(indirects)) getWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(o, [ComItextpdfTextPdfPRIndirectReference class])]];
        if (indRef != nil) {
          [dictionary putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[indRef getRef]];
        }
      }
      else {
        
#line 1364
        [self updateReferencesWithComItextpdfTextPdfPdfObject:o];
      }
    }
  }
  else
#line 1367
  if ([obj isArray]) {
    ComItextpdfTextPdfPdfArray *array = (ComItextpdfTextPdfPdfArray *) check_class_cast(obj, [ComItextpdfTextPdfPdfArray class]);
    for (jint i = 0; i < [array size]; i++) {
      ComItextpdfTextPdfPdfObject *o = [array getPdfObjectWithInt:i];
      if ([((ComItextpdfTextPdfPdfObject *) nil_chk(o)) isIndirect]) {
        ComItextpdfTextPdfPdfReader *reader = [((ComItextpdfTextPdfPRIndirectReference *) check_class_cast(o, [ComItextpdfTextPdfPRIndirectReference class])) getReader];
        JavaUtilHashMap *indirects = [((JavaUtilHashMap *) nil_chk(indirectMap_)) getWithId:reader];
        ComItextpdfTextPdfPdfCopy_IndirectReferences *indRef = [((JavaUtilHashMap *) nil_chk(indirects)) getWithId:[[ComItextpdfTextPdfRefKey alloc] initWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(o, [ComItextpdfTextPdfPRIndirectReference class])]];
        if (indRef != nil) {
          (void) [array setWithInt:i withComItextpdfTextPdfPdfObject:[indRef getRef]];
        }
      }
      else {
        
#line 1379
        [self updateReferencesWithComItextpdfTextPdfPdfObject:o];
      }
    }
  }
}


#line 1386
- (ComItextpdfTextPdfPdfArray *)branchFormWithJavaUtilHashMap:(JavaUtilHashMap *)level
                   withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)parent
                                                 withNSString:(NSString *)fname {
  
#line 1387
  ComItextpdfTextPdfPdfArray *arr = [[ComItextpdfTextPdfPdfArray alloc] init];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((JavaUtilHashMap *) nil_chk(level)) entrySet])) {
    NSString *name = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey];
    id obj = [entry_ getValue];
    ComItextpdfTextPdfPdfIndirectReference *ind = [self getPdfIndirectReference];
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    if (parent != nil)
#line 1394
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:parent];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_T_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:name withNSString:ComItextpdfTextPdfPdfObject_get_TEXT_UNICODE_()]];
    NSString *fname2 = JreStrcat("$C$", fname, '.', name);
    jint coidx = [((JavaUtilArrayList *) nil_chk(calculationOrder_)) indexOfWithId:fname2];
    if (coidx >= 0)
#line 1399
    (void) [((JavaUtilArrayList *) nil_chk(calculationOrderRefs_)) setWithInt:coidx withId:ind];
    if ([obj isKindOfClass:[JavaUtilHashMap class]]) {
      [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:[self branchFormWithJavaUtilHashMap:(JavaUtilHashMap *) check_class_cast(obj, [JavaUtilHashMap class]) withComItextpdfTextPdfPdfIndirectReference:ind withNSString:fname2]];
      [arr addWithComItextpdfTextPdfPdfObject:ind];
      (void) [self addToBodyWithComItextpdfTextPdfPdfObject:dic withComItextpdfTextPdfPdfIndirectReference:ind withBoolean:YES];
    }
    else {
      JavaUtilArrayList *list = (JavaUtilArrayList *) check_class_cast(obj, [JavaUtilArrayList class]);
      [dic mergeDifferentWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([((JavaUtilArrayList *) nil_chk(list)) getWithInt:0], [ComItextpdfTextPdfPdfDictionary class])];
      if ([list size] == 3) {
        [dic mergeDifferentWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([list getWithInt:2], [ComItextpdfTextPdfPdfDictionary class])];
        jint page = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([list getWithInt:1], [JavaLangInteger class])))) intValue];
        ComItextpdfTextPdfPdfArray *annots = ((ComItextpdfTextPdfPdfCopy_ImportedPage *) nil_chk([((JavaUtilArrayList *) nil_chk(importedPages_)) getWithInt:page - 1]))->mergedFields_;
        ComItextpdfTextPdfPdfNumber *nn = (ComItextpdfTextPdfPdfNumber *) check_class_cast([dic getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_iTextTag_], [ComItextpdfTextPdfPdfNumber class]);
        [dic removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_iTextTag_];
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ANNOT_()];
        [self adjustTabOrderWithComItextpdfTextPdfPdfArray:annots withComItextpdfTextPdfPdfIndirectReference:ind withComItextpdfTextPdfPdfNumber:nn];
      }
      else {
        ComItextpdfTextPdfPdfDictionary *field = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([list getWithInt:0], [ComItextpdfTextPdfPdfDictionary class]);
        ComItextpdfTextPdfPdfArray *kids = [[ComItextpdfTextPdfPdfArray alloc] init];
        for (jint k = 1; k < [list size]; k += 2) {
          jint page = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([list getWithInt:k], [JavaLangInteger class])))) intValue];
          ComItextpdfTextPdfPdfArray *annots = ((ComItextpdfTextPdfPdfCopy_ImportedPage *) nil_chk([((JavaUtilArrayList *) nil_chk(importedPages_)) getWithInt:page - 1]))->mergedFields_;
          ComItextpdfTextPdfPdfDictionary *widget = [[ComItextpdfTextPdfPdfDictionary alloc] init];
          [widget mergeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([list getWithInt:k + 1], [ComItextpdfTextPdfPdfDictionary class])];
          [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PARENT_() withComItextpdfTextPdfPdfObject:ind];
          ComItextpdfTextPdfPdfNumber *nn = (ComItextpdfTextPdfPdfNumber *) check_class_cast([widget getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_iTextTag_], [ComItextpdfTextPdfPdfNumber class]);
          [widget removeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfCopy_iTextTag_];
          if ([ComItextpdfTextPdfPdfCopy isTextFieldWithComItextpdfTextPdfPdfDictionary:field]) {
            ComItextpdfTextPdfPdfString *v = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(field)) getAsStringWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()];
            ComItextpdfTextPdfPdfObject *ap = [widget getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_()];
            if (v != nil && ap != nil) {
              if (![((JavaUtilHashMap *) nil_chk(mergedTextFields_)) containsKeyWithId:list]) {
                (void) [mergedTextFields_ putWithId:list withId:ap];
              }
              else {
                
#line 1435
                ComItextpdfTextPdfPdfObject *ap1 = [mergedTextFields_ getWithId:list];
                [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AP_() withComItextpdfTextPdfPdfObject:[self copyObjectWithComItextpdfTextPdfPdfObject:ap1]];
              }
            }
          }
          else
#line 1439
          if ([ComItextpdfTextPdfPdfCopy isCheckButtonWithComItextpdfTextPdfPdfDictionary:field]) {
            ComItextpdfTextPdfPdfName *v = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(field)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()];
            ComItextpdfTextPdfPdfName *as = [widget getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()];
            if (v != nil && as != nil)
#line 1443
            [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:v];
          }
          else
#line 1444
          if ([ComItextpdfTextPdfPdfCopy isRadioButtonWithComItextpdfTextPdfPdfDictionary:field]) {
            ComItextpdfTextPdfPdfName *v = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(field)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_V_()];
            ComItextpdfTextPdfPdfName *as = [widget getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_()];
            if (v != nil && as != nil && ![as isEqual:[self getOffStateNameWithComItextpdfTextPdfPdfDictionary:widget]]) {
              if (![((JavaUtilHashSet *) nil_chk(mergedRadioButtons_)) containsWithId:list]) {
                [mergedRadioButtons_ addWithId:list];
                [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:v];
              }
              else {
                
#line 1452
                [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_AS_() withComItextpdfTextPdfPdfObject:[self getOffStateNameWithComItextpdfTextPdfPdfDictionary:widget]];
              }
            }
          }
          [widget putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ANNOT_()];
          ComItextpdfTextPdfPdfIndirectReference *wref = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:widget withComItextpdfTextPdfPdfIndirectReference:[self getPdfIndirectReference] withBoolean:YES])) getIndirectReference];
          [self adjustTabOrderWithComItextpdfTextPdfPdfArray:annots withComItextpdfTextPdfPdfIndirectReference:wref withComItextpdfTextPdfPdfNumber:nn];
          [kids addWithComItextpdfTextPdfPdfObject:wref];
        }
        [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_KIDS_() withComItextpdfTextPdfPdfObject:kids];
      }
      [arr addWithComItextpdfTextPdfPdfObject:ind];
      (void) [self addToBodyWithComItextpdfTextPdfPdfObject:dic withComItextpdfTextPdfPdfIndirectReference:ind withBoolean:YES];
    }
  }
  return arr;
}


#line 1470
- (void)adjustTabOrderWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)annots
          withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ind
                     withComItextpdfTextPdfPdfNumber:(ComItextpdfTextPdfPdfNumber *)nn {
  
#line 1471
  jint v = [((ComItextpdfTextPdfPdfNumber *) nil_chk(nn)) intValue];
  JavaUtilArrayList *t = [((JavaUtilHashMap *) nil_chk(tabOrder_)) getWithId:annots];
  if (t == nil) {
    t = [[JavaUtilArrayList alloc] init];
    jint size = [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) size] - 1;
    for (jint k = 0; k < size; ++k) {
      [t addWithId:ComItextpdfTextPdfPdfCopy_zero_];
    }
    [t addWithId:[JavaLangInteger valueOfWithInt:v]];
    (void) [tabOrder_ putWithId:annots withId:t];
    [annots addWithComItextpdfTextPdfPdfObject:ind];
  }
  else {
    jint size = [t size] - 1;
    for (jint k = size; k >= 0; --k) {
      if ([((JavaLangInteger *) nil_chk([t getWithInt:k])) intValue] <= v) {
        [t addWithInt:k + 1 withId:[JavaLangInteger valueOfWithInt:v]];
        [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) addWithInt:k + 1 withComItextpdfTextPdfPdfObject:ind];
        size = -2;
        break;
      }
    }
    if (size != -2) {
      [t addWithInt:0 withId:[JavaLangInteger valueOfWithInt:v]];
      [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) addWithInt:0 withComItextpdfTextPdfPdfObject:ind];
    }
  }
}


#line 1505
- (ComItextpdfTextPdfPdfDictionary *)getCatalogWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)rootObj {
  
#line 1506
  @try {
    ComItextpdfTextPdfPdfDictionary *theCat = [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) getCatalogWithComItextpdfTextPdfPdfIndirectReference:rootObj];
    [self buildStructTreeRootForTaggedWithComItextpdfTextPdfPdfDictionary:theCat];
    if (fieldArray_ != nil) {
      [self addFieldResourcesWithComItextpdfTextPdfPdfDictionary:theCat];
    }
    else
#line 1511
    if (mergeFields__ && acroForm_ != nil) {
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(theCat)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_() withComItextpdfTextPdfPdfObject:acroForm_];
    }
    return theCat;
  }
  @catch (JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 1521
- (jboolean)isStructTreeRootReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)prRef {
  
#line 1522
  if (prRef == nil || structTreeRootReference_ == nil)
#line 1523
  return NO;
  return ((ComItextpdfTextPdfPdfIndirectReference *) nil_chk(prRef))->number_ == ((ComItextpdfTextPdfPRIndirectReference *) nil_chk(structTreeRootReference_))->number_ && prRef->generation_ == structTreeRootReference_->generation_;
}


#line 1527
- (void)addFieldResourcesWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)catalog {
  
#line 1528
  if (fieldArray_ == nil)
#line 1529
  return;
  ComItextpdfTextPdfPdfDictionary *acroForm = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_() withComItextpdfTextPdfPdfObject:acroForm];
  [acroForm putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FIELDS_() withComItextpdfTextPdfPdfObject:fieldArray_];
  [acroForm putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DA_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:@"/Helv 0 Tf 0 g "]];
  if ([((JavaUtilHashSet *) nil_chk(fieldTemplates_)) isEmpty])
#line 1535
  return;
  ComItextpdfTextPdfPdfDictionary *dr = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  [acroForm putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DR_() withComItextpdfTextPdfPdfObject:dr];
  for (ComItextpdfTextPdfPdfTemplate * __strong template_ in fieldTemplates_) {
    [ComItextpdfTextPdfPdfFormField mergeResourcesWithComItextpdfTextPdfPdfDictionary:dr withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast([((ComItextpdfTextPdfPdfTemplate *) nil_chk(template_)) getResources], [ComItextpdfTextPdfPdfDictionary class])];
  }
  
#line 1542
  ComItextpdfTextPdfPdfDictionary *fonts = [dr getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  if (fonts == nil) {
    fonts = [[ComItextpdfTextPdfPdfDictionary alloc] init];
    [dr putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_() withComItextpdfTextPdfPdfObject:fonts];
  }
  if (![((ComItextpdfTextPdfPdfDictionary *) nil_chk(fonts)) containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HELV_()]) {
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_HELVETICA_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ENCODING_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_WIN_ANSI_ENCODING_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAME_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_HELV_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TYPE1_()];
    [fonts putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HELV_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:dic])) getIndirectReference]];
  }
  if (![fonts containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ZADB_()]) {
    ComItextpdfTextPdfPdfDictionary *dic = [[ComItextpdfTextPdfPdfDictionary alloc] initWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BASEFONT_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ZAPFDINGBATS_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_NAME_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_ZADB_()];
    [dic putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_() withComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_TYPE1_()];
    [fonts putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ZADB_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([self addToBodyWithComItextpdfTextPdfPdfObject:dic])) getIndirectReference]];
  }
}


#line 1575
- (void)close {
  
#line 1576
  if (open__) {
    [((ComItextpdfTextPdfPdfDocument *) nil_chk(pdf_)) close];
    [super close];
  }
}


#line 1591
- (ComItextpdfTextPdfPdfIndirectReference *)addWithComItextpdfTextPdfPdfOutline:(ComItextpdfTextPdfPdfOutline *)outline {
  
#line 1591
  return nil;
}


#line 1593
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
}


#line 1595
- (ComItextpdfTextPdfPdfIndirectReference *)addWithComItextpdfTextPdfPdfPage:(ComItextpdfTextPdfPdfPage *)page
                                           withComItextpdfTextPdfPdfContents:(ComItextpdfTextPdfPdfContents *)contents {
  
#line 1595
  return nil;
}


#line 1598
- (void)freeReaderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 1599
  ComItextpdfTextPdfPdfArray *array = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(((ComItextpdfTextPdfPdfReader *) nil_chk(reader))->trailer_)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ID_()];
  if (array != nil)
#line 1601
  originalFileID_ = [((ComItextpdfTextPdfPdfString *) nil_chk([array getAsStringWithInt:0])) getBytes];
  (void) [((JavaUtilHashMap *) nil_chk(indirectMap_)) removeWithId:reader];
  
#line 1613
  currentPdfReaderInstance_ = nil;
  
#line 1616
  [super freeReaderWithComItextpdfTextPdfPdfReader:reader];
}


#line 1619
- (ComItextpdfTextPdfPdfName *)getOffStateNameWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)widget {
  
#line 1620
  return ComItextpdfTextPdfPdfName_get_Off_();
}


#line 1664
+ (JavaLangInteger *)getFlagsWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)field {
  
#line 1665
  ComItextpdfTextPdfPdfName *type = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(field)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()];
  if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_BTN_())) isEqual:type])
#line 1667
  return nil;
  ComItextpdfTextPdfPdfNumber *flags = [field getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FF_()];
  if (flags == nil)
#line 1670
  return nil;
  return [JavaLangInteger valueOfWithInt:[((ComItextpdfTextPdfPdfNumber *) nil_chk(flags)) intValue]];
}


#line 1674
+ (jboolean)isCheckButtonWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)field {
  
#line 1675
  JavaLangInteger *flags = [ComItextpdfTextPdfPdfCopy getFlagsWithComItextpdfTextPdfPdfDictionary:field];
  return flags == nil || (([flags intValue] & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) == 0 && ([flags intValue] & ComItextpdfTextPdfPdfFormField_FF_RADIO) == 0);
}


#line 1679
+ (jboolean)isRadioButtonWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)field {
  
#line 1680
  JavaLangInteger *flags = [ComItextpdfTextPdfPdfCopy getFlagsWithComItextpdfTextPdfPdfDictionary:field];
  return flags != nil && ([flags intValue] & ComItextpdfTextPdfPdfFormField_FF_PUSHBUTTON) == 0 && ([flags intValue] & ComItextpdfTextPdfPdfFormField_FF_RADIO) != 0;
}


#line 1684
+ (jboolean)isTextFieldWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)field {
  
#line 1685
  ComItextpdfTextPdfPdfName *type = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(field)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FT_()];
  return [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_TX_())) isEqual:type];
}


#line 1712
- (ComItextpdfTextPdfPdfCopy_PageStamp *)createPageStampWithComItextpdfTextPdfPdfImportedPage:(ComItextpdfTextPdfPdfImportedPage *)iPage {
  
#line 1713
  jint pageNum = [((ComItextpdfTextPdfPdfImportedPage *) nil_chk(iPage)) getPageNumber];
  ComItextpdfTextPdfPdfReader *reader = [((ComItextpdfTextPdfPdfReaderInstance *) nil_chk([iPage getPdfReaderInstance])) getReader];
  ComItextpdfTextPdfPdfDictionary *pageN = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getPageNWithInt:pageNum];
  return [[ComItextpdfTextPdfPdfCopy_PageStamp alloc] initWithComItextpdfTextPdfPdfReader:reader withComItextpdfTextPdfPdfDictionary:pageN withComItextpdfTextPdfPdfCopy:self];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfCopy *)other {
  [super copyAllFieldsTo:other];
  other->acroForm_ = acroForm_;
  other->calculationOrder_ = calculationOrder_;
  other->calculationOrderRefs_ = calculationOrderRefs_;
  other->currentStructArrayNumber_ = currentStructArrayNumber_;
  other->disableIndirects_ = disableIndirects_;
  other->fieldArray_ = fieldArray_;
  other->fieldTemplates_ = fieldTemplates_;
  other->fieldTree_ = fieldTree_;
  other->fields_ = fields_;
  other->hasSignature_ = hasSignature_;
  other->importedPages_ = importedPages_;
  other->indirectMap_ = indirectMap_;
  other->indirectObjects_ = indirectObjects_;
  other->indirects_ = indirects_;
  other->mergeFields__ = mergeFields__;
  other->mergeFieldsInternalCall_ = mergeFieldsInternalCall_;
  other->mergedMap_ = mergedMap_;
  other->mergedRadioButtons_ = mergedRadioButtons_;
  other->mergedSet_ = mergedSet_;
  other->mergedTextFields_ = mergedTextFields_;
  other->namePtr_ = namePtr_;
  other->needAppearances_ = needAppearances_;
  other->parentObjects_ = parentObjects_;
  other->reader_ = reader_;
  other->resources_ = resources_;
  other->rotateContents_ = rotateContents_;
  other->savedObjects_ = savedObjects_;
  other->structTreeController_ = structTreeController_;
  other->structTreeRootReference_ = structTreeRootReference_;
  other->tabOrder_ = tabOrder_;
  other->unmergedMap_ = unmergedMap_;
  other->unmergedSet_ = unmergedSet_;
  other->updateRootKids_ = updateRootKids_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfCopy class]) {
    ComItextpdfTextPdfPdfCopy_COUNTER_ =
#line 91
    [ComItextpdfTextLogCounterFactory getCounterWithIOSClass:[IOSClass classWithClass:[ComItextpdfTextPdfPdfCopy class]]];
    ComItextpdfTextPdfPdfCopy_annotId_ =
#line 118
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"iTextAnnotId"];
    ComItextpdfTextPdfPdfCopy_iTextTag_ =
#line 136
    [[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"_iTextTag_"];
    ComItextpdfTextPdfPdfCopy_zero_ =
#line 137
    [JavaLangInteger valueOfWithInt:0];
    ComItextpdfTextPdfPdfCopy_widgetKeys_ =
#line 1623
    [[JavaUtilHashSet alloc] init];
    ComItextpdfTextPdfPdfCopy_fieldKeys_ =
#line 1624
    [[JavaUtilHashSet alloc] init];
    {
      
#line 1626
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_SUBTYPE_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_CONTENTS_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_RECT_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_NM_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_M_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_F_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_BS_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_BORDER_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_AP_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_AS_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_C_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_A_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_STRUCTPARENT_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_OC_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_H_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_MK_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_DA_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_Q_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_P_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfName_get_TYPE_()];
      [ComItextpdfTextPdfPdfCopy_widgetKeys_ addWithId:ComItextpdfTextPdfPdfCopy_annotId_];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_AA_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_FT_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_TU_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_TM_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_FF_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_V_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_DV_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_DS_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_RV_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_OPT_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_MAXLEN_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_TI_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_I_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_LOCK_()];
      [ComItextpdfTextPdfPdfCopy_fieldKeys_ addWithId:ComItextpdfTextPdfPdfName_get_SV_()];
    }
    ComItextpdfTextPdfPdfCopy_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCounter", NULL, "Lcom.itextpdf.text.log.Counter;", 0x4, NULL },
    { "initWithComItextpdfTextDocument:withJavaIoOutputStream:", "PdfCopy", NULL, 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "setPageEventWithComItextpdfTextPdfPdfPageEvent:", "setPageEvent", "V", 0x1, NULL },
    { "isRotateContents", NULL, "Z", 0x1, NULL },
    { "setRotateContentsWithBoolean:", "setRotateContents", "V", 0x1, NULL },
    { "setMergeFields", NULL, "V", 0x1, NULL },
    { "getImportedPageWithComItextpdfTextPdfPdfReader:withInt:", "getImportedPage", "Lcom.itextpdf.text.pdf.PdfImportedPage;", 0x1, NULL },
    { "getImportedPageWithComItextpdfTextPdfPdfReader:withInt:withBoolean:", "getImportedPage", "Lcom.itextpdf.text.pdf.PdfImportedPage;", 0x1, "Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "clearIndirectsWithComItextpdfTextPdfPdfReader:", "clearIndirects", "V", 0x2, NULL },
    { "checkStructureTreeRootKidsWithComItextpdfTextPdfPdfCopy_ImportedPage:", "checkStructureTreeRootKids", "I", 0x2, NULL },
    { "fixStructureTreeRootWithJavaUtilHashSet:withJavaUtilHashSet:", "fixStructureTreeRoot", "V", 0x4, NULL },
    { "getImportedPageImplWithComItextpdfTextPdfPdfReader:withInt:", "getImportedPageImpl", "Lcom.itextpdf.text.pdf.PdfImportedPage;", 0x4, NULL },
    { "copyIndirectWithComItextpdfTextPdfPRIndirectReference:withBoolean:withBoolean:", "copyIndirect", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "copyIndirectWithComItextpdfTextPdfPRIndirectReference:", "copyIndirect", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "copyDictionaryWithComItextpdfTextPdfPdfDictionary:withBoolean:withBoolean:", "copyDictionary", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "copyDictionaryWithComItextpdfTextPdfPdfDictionary:", "copyDictionary", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "copyStreamWithComItextpdfTextPdfPRStream:", "copyStream", "Lcom.itextpdf.text.pdf.PdfStream;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "copyArrayWithComItextpdfTextPdfPdfArray:withBoolean:withBoolean:", "copyArray", "Lcom.itextpdf.text.pdf.PdfArray;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "copyArrayWithComItextpdfTextPdfPdfArray:", "copyArray", "Lcom.itextpdf.text.pdf.PdfArray;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "copyObjectWithComItextpdfTextPdfPdfObject:withBoolean:withBoolean:", "copyObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "copyObjectWithComItextpdfTextPdfPdfObject:", "copyObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "setFromIPageWithComItextpdfTextPdfPdfImportedPage:", "setFromIPage", "I", 0x4, NULL },
    { "setFromReaderWithComItextpdfTextPdfPdfReader:", "setFromReader", "V", 0x4, NULL },
    { "addPageWithComItextpdfTextPdfPdfImportedPage:", "addPage", "V", 0x1, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "addPageWithComItextpdfTextRectangle:withInt:", "addPage", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "addDocumentWithComItextpdfTextPdfPdfReader:withJavaUtilList:", "addDocument", "V", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "addDocumentWithComItextpdfTextPdfPdfReader:", "addDocument", "V", 0x1, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfIndirectReference:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfIndirectReference:withBoolean:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "addToBodyWithComItextpdfTextPdfPdfObject:", "addToBody", "Lcom.itextpdf.text.pdf.PdfIndirectObject;", 0x1, "Ljava.io.IOException;" },
    { "flushTaggedObjects", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "flushAcroFields", NULL, "V", 0x4, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "fixTaggedStructure", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "removeInactiveReferencesWithComItextpdfTextPdfPdfArray:withJavaUtilHashSet:", "removeInactiveReferences", "V", 0x2, NULL },
    { "containsInactivePgWithComItextpdfTextPdfPdfDictionary:withJavaUtilHashSet:", "containsInactivePg", "Z", 0x2, NULL },
    { "findActiveParentsWithJavaUtilHashSet:", "findActiveParents", "Ljava.util.ArrayList;", 0x2, NULL },
    { "fixPgKeyWithJavaUtilArrayList:withJavaUtilHashSet:", "fixPgKey", "V", 0x2, NULL },
    { "findActivesWithJavaUtilArrayList:withJavaUtilHashSet:withJavaUtilHashSet:", "findActives", "V", 0x2, NULL },
    { "findActivesFromReferenceWithComItextpdfTextPdfPdfIndirectReference:withJavaUtilArrayList:withJavaUtilHashSet:", "findActivesFromReference", "V", 0x2, NULL },
    { "findActivesFromArrayWithComItextpdfTextPdfPdfArray:withJavaUtilArrayList:withJavaUtilHashSet:withJavaUtilHashSet:", "findActivesFromArray", "V", 0x2, NULL },
    { "findActivesFromDictWithComItextpdfTextPdfPdfDictionary:withJavaUtilArrayList:withJavaUtilHashSet:withJavaUtilHashSet:", "findActivesFromDict", "V", 0x2, NULL },
    { "flushIndirectObjects", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeObjectToBodyWithComItextpdfTextPdfPdfIndirectObject:", "writeObjectToBody", "V", 0x2, "Ljava.io.IOException;" },
    { "updateAnnotationReferencesWithComItextpdfTextPdfPdfObject:", "updateAnnotationReferences", "V", 0x2, NULL },
    { "updateCalculationOrderWithComItextpdfTextPdfPdfReader:", "updateCalculationOrder", "V", 0x2, NULL },
    { "getCONameWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPRIndirectReference:", "getCOName", "Ljava.lang.String;", 0xa, NULL },
    { "mergeFields", NULL, "V", 0x2, NULL },
    { "addPageOffsetToFieldWithJavaUtilMap:withInt:", "addPageOffsetToField", "V", 0x2, NULL },
    { "mergeWithMasterWithJavaUtilMap:", "mergeWithMaster", "V", 0x2, NULL },
    { "mergeFieldWithNSString:withComItextpdfTextPdfAcroFields_Item:", "mergeField", "V", 0x2, NULL },
    { "createWidgetsWithJavaUtilArrayList:withComItextpdfTextPdfAcroFields_Item:", "createWidgets", "V", 0x2, NULL },
    { "propagateWithComItextpdfTextPdfPdfObject:", "propagate", "Lcom.itextpdf.text.pdf.PdfObject;", 0x2, "Ljava.io.IOException;" },
    { "createAcroForms", NULL, "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "updateReferencesWithComItextpdfTextPdfPdfObject:", "updateReferences", "V", 0x2, NULL },
    { "branchFormWithJavaUtilHashMap:withComItextpdfTextPdfPdfIndirectReference:withNSString:", "branchForm", "Lcom.itextpdf.text.pdf.PdfArray;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.text.pdf.BadPdfFormatException;" },
    { "adjustTabOrderWithComItextpdfTextPdfPdfArray:withComItextpdfTextPdfPdfIndirectReference:withComItextpdfTextPdfPdfNumber:", "adjustTabOrder", "V", 0x2, NULL },
    { "getCatalogWithComItextpdfTextPdfPdfIndirectReference:", "getCatalog", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x4, NULL },
    { "isStructTreeRootReferenceWithComItextpdfTextPdfPdfIndirectReference:", "isStructTreeRootReference", "Z", 0x4, NULL },
    { "addFieldResourcesWithComItextpdfTextPdfPdfDictionary:", "addFieldResources", "V", 0x2, "Ljava.io.IOException;" },
    { "close", NULL, "V", 0x1, NULL },
    { "addWithComItextpdfTextPdfPdfOutline:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addAnnotation", "V", 0x1, NULL },
    { "addWithComItextpdfTextPdfPdfPage:withComItextpdfTextPdfPdfContents:", "add", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, "Lcom.itextpdf.text.pdf.PdfException;" },
    { "freeReaderWithComItextpdfTextPdfPdfReader:", "freeReader", "V", 0x1, "Ljava.io.IOException;" },
    { "getOffStateNameWithComItextpdfTextPdfPdfDictionary:", "getOffStateName", "Lcom.itextpdf.text.pdf.PdfName;", 0x4, NULL },
    { "getFlagsWithComItextpdfTextPdfPdfDictionary:", "getFlags", "Ljava.lang.Integer;", 0x8, NULL },
    { "isCheckButtonWithComItextpdfTextPdfPdfDictionary:", "isCheckButton", "Z", 0x8, NULL },
    { "isRadioButtonWithComItextpdfTextPdfPdfDictionary:", "isRadioButton", "Z", 0x8, NULL },
    { "isTextFieldWithComItextpdfTextPdfPdfDictionary:", "isTextField", "Z", 0x8, NULL },
    { "createPageStampWithComItextpdfTextPdfPdfImportedPage:", "createPageStamp", "Lcom.itextpdf.text.pdf.PdfCopy$PageStamp;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "COUNTER_", NULL, 0xc, "Lcom.itextpdf.text.log.Counter;", &ComItextpdfTextPdfPdfCopy_COUNTER_,  },
    { "indirects_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "indirectMap_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "parentObjects_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "disableIndirects_", NULL, 0x4, "Ljava.util.HashSet;", NULL,  },
    { "reader_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "namePtr_", NULL, 0x4, "[I", NULL,  },
    { "rotateContents_", NULL, 0x2, "Z", NULL,  },
    { "fieldArray_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfArray;", NULL,  },
    { "fieldTemplates_", NULL, 0x4, "Ljava.util.HashSet;", NULL,  },
    { "structTreeController_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfStructTreeController;", NULL,  },
    { "currentStructArrayNumber_", NULL, 0x2, "I", NULL,  },
    { "structTreeRootReference_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PRIndirectReference;", NULL,  },
    { "indirectObjects_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "savedObjects_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "importedPages_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "updateRootKids_", NULL, 0x4, "Z", NULL,  },
    { "annotId_", NULL, 0xa, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfCopy_annotId_,  },
    { "annotIdCnt_", NULL, 0xa, "I", &ComItextpdfTextPdfPdfCopy_annotIdCnt_,  },
    { "mergeFields__", "mergeFields", 0x4, "Z", NULL,  },
    { "needAppearances_", NULL, 0x2, "Z", NULL,  },
    { "hasSignature_", NULL, 0x2, "Z", NULL,  },
    { "acroForm_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
    { "tabOrder_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "calculationOrderRefs_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "resources_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "fields_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "calculationOrder_", NULL, 0x2, "Ljava.util.ArrayList;", NULL,  },
    { "fieldTree_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "unmergedMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "unmergedSet_", NULL, 0x2, "Ljava.util.HashSet;", NULL,  },
    { "mergedMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "mergedSet_", NULL, 0x2, "Ljava.util.HashSet;", NULL,  },
    { "mergeFieldsInternalCall_", NULL, 0x2, "Z", NULL,  },
    { "iTextTag_", NULL, 0x1a, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfCopy_iTextTag_,  },
    { "zero_", NULL, 0x1a, "Ljava.lang.Integer;", &ComItextpdfTextPdfPdfCopy_zero_,  },
    { "mergedRadioButtons_", NULL, 0x2, "Ljava.util.HashSet;", NULL,  },
    { "mergedTextFields_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
    { "widgetKeys_", NULL, 0x1c, "Ljava.util.HashSet;", &ComItextpdfTextPdfPdfCopy_widgetKeys_,  },
    { "fieldKeys_", NULL, 0x1c, "Ljava.util.HashSet;", &ComItextpdfTextPdfPdfCopy_fieldKeys_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfCopy = { "PdfCopy", "com.itextpdf.text.pdf", NULL, 0x1, 70, methods, 40, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfCopy;
}

@end


#line 71
@implementation ComItextpdfTextPdfPdfCopy_IndirectReferences


#line 74
- (instancetype)initWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
  if (self = [super init]) {
    
#line 75
    theRef_ = ref;
    
#line 76
    hasCopied_ = NO;
  }
  return self;
}


#line 78
- (void)setCopied {
  
#line 78
  hasCopied_ = YES;
}


#line 79
- (void)setNotCopied {
  
#line 79
  hasCopied_ = NO;
}


#line 80
- (jboolean)getCopied {
  
#line 80
  return hasCopied_;
}


#line 81
- (ComItextpdfTextPdfPdfIndirectReference *)getRef {
  
#line 81
  return theRef_;
}

- (NSString *)description {
  
#line 85
  NSString *ext = @"";
  if (hasCopied_) ext = JreStrcat("$$", ext, @" Copied");
  return JreStrcat("@$", [self getRef], ext);
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfCopy_IndirectReferences *)other {
  [super copyAllFieldsTo:other];
  other->hasCopied_ = hasCopied_;
  other->theRef_ = theRef_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfIndirectReference:", "IndirectReferences", NULL, 0x0, NULL },
    { "setCopied", NULL, "V", 0x0, NULL },
    { "setNotCopied", NULL, "V", 0x0, NULL },
    { "getCopied", NULL, "Z", 0x0, NULL },
    { "getRef", NULL, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x0, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "theRef_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfIndirectReference;", NULL,  },
    { "hasCopied_", NULL, 0x0, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfCopy_IndirectReferences = { "IndirectReferences", "com.itextpdf.text.pdf", "PdfCopy", 0x8, 6, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfCopy_IndirectReferences;
}

@end


#line 142
@implementation ComItextpdfTextPdfPdfCopy_ImportedPage


#line 147
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                            withInt:(jint)pageNumber
                                        withBoolean:(jboolean)keepFields {
  if (self = [super init]) {
    
#line 148
    self->pageNumber_ = pageNumber;
    
#line 149
    self->reader_ = reader;
    
#line 150
    if (keepFields) {
      mergedFields_ = [[ComItextpdfTextPdfPdfArray alloc] init];
    }
  }
  return self;
}

- (jboolean)isEqual:(id)o {
  
#line 157
  if (!([o isKindOfClass:[ComItextpdfTextPdfPdfCopy_ImportedPage class]])) return NO;
  ComItextpdfTextPdfPdfCopy_ImportedPage *other = (ComItextpdfTextPdfPdfCopy_ImportedPage *) check_class_cast(o, [ComItextpdfTextPdfPdfCopy_ImportedPage class]);
  return self->pageNumber_ == ((ComItextpdfTextPdfPdfCopy_ImportedPage *) nil_chk(other))->pageNumber_ && [((ComItextpdfTextPdfPdfReader *) nil_chk(self->reader_)) isEqual:other->reader_];
}

- (NSString *)description {
  
#line 163
  return [JavaLangInteger toStringWithInt:pageNumber_];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfCopy_ImportedPage *)other {
  [super copyAllFieldsTo:other];
  other->mergedFields_ = mergedFields_;
  other->pageNumber_ = pageNumber_;
  other->reader_ = reader_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReader:withInt:withBoolean:", "ImportedPage", NULL, 0x0, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pageNumber_", NULL, 0x0, "I", NULL,  },
    { "reader_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "mergedFields_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfArray;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfCopy_ImportedPage = { "ImportedPage", "com.itextpdf.text.pdf", "PdfCopy", 0xc, 3, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfCopy_ImportedPage;
}

@end


#line 1719
@implementation ComItextpdfTextPdfPdfCopy_PageStamp


#line 1728
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)pageN
                      withComItextpdfTextPdfPdfCopy:(ComItextpdfTextPdfPdfCopy *)cstp {
  if (self = [super init]) {
    
#line 1729
    self->pageN_ = pageN;
    
#line 1730
    self->reader_ = reader;
    
#line 1731
    self->cstp_ = cstp;
  }
  return self;
}


#line 1734
- (ComItextpdfTextPdfPdfContentByte *)getUnderContent {
  
#line 1735
  if (under_ == nil) {
    if (pageResources_ == nil) {
      pageResources_ = [[ComItextpdfTextPdfPageResources alloc] init];
      ComItextpdfTextPdfPdfDictionary *resources = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageN_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()];
      [pageResources_ setOriginalResourcesWithComItextpdfTextPdfPdfDictionary:resources withIntArray:((ComItextpdfTextPdfPdfCopy *) nil_chk(cstp_))->namePtr_];
    }
    under_ = [[ComItextpdfTextPdfPdfCopy_StampContent alloc] initWithComItextpdfTextPdfPdfWriter:cstp_ withComItextpdfTextPdfPageResources:pageResources_];
  }
  return under_;
}


#line 1746
- (ComItextpdfTextPdfPdfContentByte *)getOverContent {
  
#line 1747
  if (over_ == nil) {
    if (pageResources_ == nil) {
      pageResources_ = [[ComItextpdfTextPdfPageResources alloc] init];
      ComItextpdfTextPdfPdfDictionary *resources = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageN_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()];
      [pageResources_ setOriginalResourcesWithComItextpdfTextPdfPdfDictionary:resources withIntArray:((ComItextpdfTextPdfPdfCopy *) nil_chk(cstp_))->namePtr_];
    }
    over_ = [[ComItextpdfTextPdfPdfCopy_StampContent alloc] initWithComItextpdfTextPdfPdfWriter:cstp_ withComItextpdfTextPdfPageResources:pageResources_];
  }
  return over_;
}


#line 1758
- (void)alterContents {
  
#line 1759
  if (over_ == nil && under_ == nil)
#line 1760
  return;
  ComItextpdfTextPdfPdfArray *ar = nil;
  ComItextpdfTextPdfPdfObject *content = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageN_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()] withComItextpdfTextPdfPdfObject:pageN_];
  if (content == nil) {
    ar = [[ComItextpdfTextPdfPdfArray alloc] init];
    [pageN_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:ar];
  }
  else
#line 1766
  if ([content isArray]) {
    ar = (ComItextpdfTextPdfPdfArray *) check_class_cast(content, [ComItextpdfTextPdfPdfArray class]);
  }
  else
#line 1768
  if ([content isStream]) {
    ar = [[ComItextpdfTextPdfPdfArray alloc] init];
    [ar addWithComItextpdfTextPdfPdfObject:[pageN_ getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()]];
    [pageN_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:ar];
  }
  else {
    
#line 1773
    ar = [[ComItextpdfTextPdfPdfArray alloc] init];
    [pageN_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_() withComItextpdfTextPdfPdfObject:ar];
  }
  ComItextpdfTextPdfByteBuffer *out = [[ComItextpdfTextPdfByteBuffer alloc] init];
  if (under_ != nil) {
    (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_SAVESTATE_()];
    [self applyRotationWithComItextpdfTextPdfPdfDictionary:pageN_ withComItextpdfTextPdfByteBuffer:out];
    (void) [out appendWithComItextpdfTextPdfByteBuffer:[under_ getInternalBuffer]];
    (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_RESTORESTATE_()];
  }
  if (over_ != nil)
#line 1784
  (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_SAVESTATE_()];
  ComItextpdfTextPdfPdfStream *stream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[out toByteArray]];
  [stream flateCompressWithInt:[((ComItextpdfTextPdfPdfCopy *) nil_chk(cstp_)) getCompressionLevel]];
  ComItextpdfTextPdfPdfIndirectReference *ref1 = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([cstp_ addToBodyWithComItextpdfTextPdfPdfObject:stream])) getIndirectReference];
  [((ComItextpdfTextPdfPdfArray *) nil_chk(ar)) addFirstWithComItextpdfTextPdfPdfObject:ref1];
  [out reset];
  if (over_ != nil) {
    (void) [out appendWithChar:' '];
    (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_RESTORESTATE_()];
    (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_SAVESTATE_()];
    [self applyRotationWithComItextpdfTextPdfPdfDictionary:pageN_ withComItextpdfTextPdfByteBuffer:out];
    (void) [out appendWithComItextpdfTextPdfByteBuffer:[over_ getInternalBuffer]];
    (void) [out appendWithByteArray:ComItextpdfTextPdfPdfContents_get_RESTORESTATE_()];
    stream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[out toByteArray]];
    [stream flateCompressWithInt:[cstp_ getCompressionLevel]];
    [ar addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([cstp_ addToBodyWithComItextpdfTextPdfPdfObject:stream])) getIndirectReference]];
  }
  [pageN_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_() withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPageResources *) nil_chk(pageResources_)) getResources]];
}


#line 1804
- (void)applyRotationWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)pageN
                        withComItextpdfTextPdfByteBuffer:(ComItextpdfTextPdfByteBuffer *)outArg {
  
#line 1805
  if (!((ComItextpdfTextPdfPdfCopy *) nil_chk(cstp_))->rotateContents_)
#line 1806
  return;
  ComItextpdfTextRectangle *page = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageSizeWithRotationWithComItextpdfTextPdfPdfDictionary:pageN];
  jint rotation = [((ComItextpdfTextRectangle *) nil_chk(page)) getRotation];
  switch (rotation) {
    case 90:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(outArg)) appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATE90_()];
    (void) [outArg appendWithFloat:[page getTop]];
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([((ComItextpdfTextPdfByteBuffer *) nil_chk([outArg appendWithChar:' '])) appendWithChar:'0'])) appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATEFINAL_()];
    break;
    case 180:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(outArg)) appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATE180_()];
    (void) [outArg appendWithFloat:[page getRight]];
    (void) [outArg appendWithChar:' '];
    (void) [outArg appendWithFloat:[page getTop]];
    (void) [outArg appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATEFINAL_()];
    break;
    case 270:
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk(outArg)) appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATE270_()];
    (void) [((ComItextpdfTextPdfByteBuffer *) nil_chk([outArg appendWithChar:'0'])) appendWithChar:' '];
    (void) [outArg appendWithFloat:[page getRight]];
    (void) [outArg appendWithByteArray:ComItextpdfTextPdfPdfContents_get_ROTATEFINAL_()];
    break;
  }
}


#line 1831
- (void)addDocumentFieldWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
  
#line 1832
  if (((ComItextpdfTextPdfPdfCopy *) nil_chk(cstp_))->fieldArray_ == nil)
#line 1833
  cstp_->fieldArray_ = [[ComItextpdfTextPdfPdfArray alloc] init];
  [((ComItextpdfTextPdfPdfArray *) nil_chk(cstp_->fieldArray_)) addWithComItextpdfTextPdfPdfObject:ref];
}


#line 1837
- (void)expandFieldsWithComItextpdfTextPdfPdfFormField:(ComItextpdfTextPdfPdfFormField *)field
                                 withJavaUtilArrayList:(JavaUtilArrayList *)allAnnots {
  
#line 1838
  [((JavaUtilArrayList *) nil_chk(allAnnots)) addWithId:field];
  JavaUtilArrayList *kids = [((ComItextpdfTextPdfPdfFormField *) nil_chk(field)) getKids];
  if (kids != nil) {
    for (ComItextpdfTextPdfPdfFormField * __strong f in kids)
#line 1842
    [self expandFieldsWithComItextpdfTextPdfPdfFormField:f withJavaUtilArrayList:allAnnots];
  }
}


#line 1846
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
  
#line 1847
  @try {
    JavaUtilArrayList *allAnnots = [[JavaUtilArrayList alloc] init];
    if ([((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) isForm]) {
      ComItextpdfTextPdfPdfFormField *field = (ComItextpdfTextPdfPdfFormField *) check_class_cast(annot, [ComItextpdfTextPdfPdfFormField class]);
      if ([field getParent] != nil)
#line 1852
      return;
      [self expandFieldsWithComItextpdfTextPdfPdfFormField:field withJavaUtilArrayList:allAnnots];
      if (((ComItextpdfTextPdfPdfCopy *) nil_chk(cstp_))->fieldTemplates_ == nil)
#line 1855
      cstp_->fieldTemplates_ = [[JavaUtilHashSet alloc] init];
    }
    else
#line 1858
    [allAnnots addWithId:annot];
    for (jint k = 0; k < [allAnnots size]; ++k) {
      annot = [allAnnots getWithInt:k];
      if ([((ComItextpdfTextPdfPdfAnnotation *) nil_chk(annot)) isForm]) {
        if (![annot isUsed]) {
          JavaUtilHashSet *templates = [annot getTemplates];
          if (templates != nil)
#line 1865
          [((JavaUtilHashSet *) nil_chk(((ComItextpdfTextPdfPdfCopy *) nil_chk(cstp_))->fieldTemplates_)) addAllWithJavaUtilCollection:templates];
        }
        ComItextpdfTextPdfPdfFormField *field = (ComItextpdfTextPdfPdfFormField *) check_class_cast(annot, [ComItextpdfTextPdfPdfFormField class]);
        if ([field getParent] == nil)
#line 1869
        [self addDocumentFieldWithComItextpdfTextPdfPdfIndirectReference:[field getIndirectReference]];
      }
      if ([annot isAnnotation]) {
        ComItextpdfTextPdfPdfObject *pdfobj = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageN_)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_()] withComItextpdfTextPdfPdfObject:pageN_];
        ComItextpdfTextPdfPdfArray *annots = nil;
        if (pdfobj == nil || ![pdfobj isArray]) {
          annots = [[ComItextpdfTextPdfPdfArray alloc] init];
          [pageN_ putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ANNOTS_() withComItextpdfTextPdfPdfObject:annots];
        }
        else
#line 1879
        annots = (ComItextpdfTextPdfPdfArray *) check_class_cast(pdfobj, [ComItextpdfTextPdfPdfArray class]);
        [((ComItextpdfTextPdfPdfArray *) nil_chk(annots)) addWithComItextpdfTextPdfPdfObject:[annot getIndirectReference]];
        if (![annot isUsed]) {
          ComItextpdfTextPdfPdfRectangle *rect = (ComItextpdfTextPdfPdfRectangle *) check_class_cast([annot getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_()], [ComItextpdfTextPdfPdfRectangle class]);
          if (rect != nil && ([rect left] != 0 || [rect right] != 0 || [rect top] != 0 || [rect bottom] != 0)) {
            jint rotation = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader_)) getPageRotationWithComItextpdfTextPdfPdfDictionary:pageN_];
            ComItextpdfTextRectangle *pageSize = [reader_ getPageSizeWithRotationWithComItextpdfTextPdfPdfDictionary:pageN_];
            switch (rotation) {
              case 90:
              [annot putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 1889
              [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getTop] - [rect bottom] withFloat:
#line 1890
              [rect left] withFloat:
#line 1891
              [pageSize getTop] - [rect top] withFloat:
#line 1892
              [rect right]]];
              break;
              case 180:
              [annot putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 1896
              [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [rect left] withFloat:
#line 1897
              [pageSize getTop] - [rect bottom] withFloat:
#line 1898
              [pageSize getRight] - [rect right] withFloat:
#line 1899
              [pageSize getTop] - [rect top]]];
              break;
              case 270:
              [annot putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RECT_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfRectangle alloc] initWithFloat:
#line 1903
              [rect bottom] withFloat:
#line 1904
              [((ComItextpdfTextRectangle *) nil_chk(pageSize)) getRight] - [rect left] withFloat:
#line 1905
              [rect top] withFloat:
#line 1906
              [pageSize getRight] - [rect right]]];
              break;
            }
          }
        }
      }
      if (![annot isUsed]) {
        [annot setUsed];
        (void) [((ComItextpdfTextPdfPdfCopy *) nil_chk(cstp_)) addToBodyWithComItextpdfTextPdfPdfObject:annot withComItextpdfTextPdfPdfIndirectReference:[annot getIndirectReference]];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfCopy_PageStamp *)other {
  [super copyAllFieldsTo:other];
  other->cstp_ = cstp_;
  other->over_ = over_;
  other->pageN_ = pageN_;
  other->pageResources_ = pageResources_;
  other->reader_ = reader_;
  other->under_ = under_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfCopy:", "PageStamp", NULL, 0x0, NULL },
    { "getUnderContent", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getOverContent", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "alterContents", NULL, "V", 0x1, "Ljava.io.IOException;" },
    { "applyRotationWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfByteBuffer:", "applyRotation", "V", 0x0, NULL },
    { "addDocumentFieldWithComItextpdfTextPdfPdfIndirectReference:", "addDocumentField", "V", 0x2, NULL },
    { "expandFieldsWithComItextpdfTextPdfPdfFormField:withJavaUtilArrayList:", "expandFields", "V", 0x2, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addAnnotation", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pageN_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "under_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfCopy$StampContent;", NULL,  },
    { "over_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfCopy$StampContent;", NULL,  },
    { "pageResources_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PageResources;", NULL,  },
    { "reader_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "cstp_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfCopy;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfCopy_PageStamp = { "PageStamp", "com.itextpdf.text.pdf", "PdfCopy", 0x9, 8, methods, 6, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfCopy_PageStamp;
}

@end


#line 1924
@implementation ComItextpdfTextPdfPdfCopy_StampContent


#line 1928
- (instancetype)initWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                withComItextpdfTextPdfPageResources:(ComItextpdfTextPdfPageResources *)pageResources {
  if (self =
#line 1929
  [super initWithComItextpdfTextPdfPdfWriter:writer]) {
    
#line 1930
    self->pageResources_ = pageResources;
  }
  return self;
}

- (ComItextpdfTextPdfPdfContentByte *)getDuplicate {
  
#line 1941
  return [[ComItextpdfTextPdfPdfCopy_StampContent alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withComItextpdfTextPdfPageResources:pageResources_];
}


#line 1945
- (ComItextpdfTextPdfPageResources *)getPageResources {
  return pageResources_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfCopy_StampContent *)other {
  [super copyAllFieldsTo:other];
  other->pageResources_ = pageResources_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfWriter:withComItextpdfTextPdfPageResources:", "StampContent", NULL, 0x0, NULL },
    { "getDuplicate", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getPageResources", NULL, "Lcom.itextpdf.text.pdf.PageResources;", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pageResources_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PageResources;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfCopy_StampContent = { "StampContent", "com.itextpdf.text.pdf", "PdfCopy", 0x9, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfCopy_StampContent;
}

@end
