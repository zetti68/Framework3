//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/DefaultSplitCharacter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/DefaultSplitCharacter.java"

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/SplitCharacter.h"
#include "com/itextpdf/text/pdf/DefaultSplitCharacter.h"
#include "com/itextpdf/text/pdf/PdfChunk.h"
#include "java/lang/Math.h"

BOOL ComItextpdfTextPdfDefaultSplitCharacter_initialized = NO;


#line 60
@implementation ComItextpdfTextPdfDefaultSplitCharacter

id<ComItextpdfTextSplitCharacter> ComItextpdfTextPdfDefaultSplitCharacter_DEFAULT_;


#line 72
- (instancetype)init {
  return [super init];
}


#line 81
- (instancetype)initWithChar:(jchar)character {
  return
#line 82
  [self initComItextpdfTextPdfDefaultSplitCharacterWithCharArray:[IOSCharArray arrayWithChars:(jchar[]){ character } count:1]];
}


#line 90
- (instancetype)initComItextpdfTextPdfDefaultSplitCharacterWithCharArray:(IOSCharArray *)characters {
  if (self = [super init]) {
    
#line 91
    self->characters_ = characters;
  }
  return self;
}

- (instancetype)initWithCharArray:(IOSCharArray *)characters {
  return [self initComItextpdfTextPdfDefaultSplitCharacterWithCharArray:
#line 90
characters];
}


#line 115
- (jboolean)isSplitCharacterWithInt:(jint)start
                            withInt:(jint)current
                            withInt:(jint)end
                      withCharArray:(IOSCharArray *)cc
withComItextpdfTextPdfPdfChunkArray:(IOSObjectArray *)ck {
  
#line 116
  jchar c = [self getCurrentCharacterWithInt:current withCharArray:cc withComItextpdfTextPdfPdfChunkArray:ck];
  
#line 118
  if (characters_ != nil) {
    for (jint i = 0; i < characters_->size_; i++) {
      if (c == IOSCharArray_Get(characters_, i)) {
        return YES;
      }
    }
    return NO;
  }
  
#line 127
  if (c <= ' ' || c == '-' || c == 0x2010) {
    return YES;
  }
  if (c < (jint) 0x2002)
#line 131
  return NO;
  return ((c >= (jint) 0x2002 && c <= (jint) 0x200b) ||
#line 133
  (c >= (jint) 0x2e80 && c < (jint) 0xd7a0) ||
#line 134
  (c >= (jint) 0xf900 && c < (jint) 0xfb00) ||
#line 135
  (c >= (jint) 0xfe30 && c < (jint) 0xfe50) ||
#line 136
  (c >= (jint) 0xff61 && c < (jint) 0xffa0));
}


#line 147
- (jchar)getCurrentCharacterWithInt:(jint)current
                      withCharArray:(IOSCharArray *)cc
withComItextpdfTextPdfPdfChunkArray:(IOSObjectArray *)ck {
  
#line 148
  if (ck == nil) {
    return IOSCharArray_Get(nil_chk(cc), current);
  }
  return (jchar) [((ComItextpdfTextPdfPdfChunk *) nil_chk(IOSObjectArray_Get(ck, [JavaLangMath minWithInt:current withInt:((IOSObjectArray *) nil_chk(ck))->size_ - 1]))) getUnicodeEquivalentWithInt:IOSCharArray_Get(nil_chk(cc), current)];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfDefaultSplitCharacter *)other {
  [super copyAllFieldsTo:other];
  other->characters_ = characters_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfDefaultSplitCharacter class]) {
    ComItextpdfTextPdfDefaultSplitCharacter_DEFAULT_ =
#line 65
    [[ComItextpdfTextPdfDefaultSplitCharacter alloc] init];
    ComItextpdfTextPdfDefaultSplitCharacter_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DefaultSplitCharacter", NULL, 0x1, NULL },
    { "initWithChar:", "DefaultSplitCharacter", NULL, 0x1, NULL },
    { "initWithCharArray:", "DefaultSplitCharacter", NULL, 0x1, NULL },
    { "isSplitCharacterWithInt:withInt:withInt:withCharArray:withComItextpdfTextPdfPdfChunkArray:", "isSplitCharacter", "Z", 0x1, NULL },
    { "getCurrentCharacterWithInt:withCharArray:withComItextpdfTextPdfPdfChunkArray:", "getCurrentCharacter", "C", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_", NULL, 0x19, "Lcom.itextpdf.text.SplitCharacter;", &ComItextpdfTextPdfDefaultSplitCharacter_DEFAULT_,  },
    { "characters_", NULL, 0x4, "[C", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfDefaultSplitCharacter = { "DefaultSplitCharacter", "com.itextpdf.text.pdf", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfDefaultSplitCharacter;
}

@end
