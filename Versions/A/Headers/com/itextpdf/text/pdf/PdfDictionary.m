//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfDictionary.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfDictionary.java"

#include "IOSClass.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfBoolean.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/internal/PdfIsoKeys.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

BOOL ComItextpdfTextPdfPdfDictionary_initialized = NO;


#line 77
@implementation ComItextpdfTextPdfPdfDictionary

ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfDictionary_FONT_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfDictionary_OUTLINES_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfDictionary_PAGE_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfDictionary_PAGES_;
ComItextpdfTextPdfPdfName * ComItextpdfTextPdfPdfDictionary_CATALOG_;


#line 109
- (instancetype)initComItextpdfTextPdfPdfDictionary {
  if (self =
#line 110
  [super initWithInt:ComItextpdfTextPdfPdfObject_DICTIONARY]) {
    dictionaryType_ =
#line 99
    nil;
    
#line 111
    hashMap_ = [[JavaUtilHashMap alloc] init];
  }
  return self;
}

- (instancetype)init {
  return [self initComItextpdfTextPdfPdfDictionary];
}


#line 119
- (instancetype)initWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)type {
  if (self =
#line 120
  [self initComItextpdfTextPdfPdfDictionary]) {
    
#line 121
    dictionaryType_ = type;
    
#line 122
    [self putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_() withComItextpdfTextPdfPdfObject:dictionaryType_];
  }
  return self;
}


#line 136
- (void)toPdfWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer
                      withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 137
  [ComItextpdfTextPdfPdfWriter checkPdfIsoConformanceWithComItextpdfTextPdfPdfWriter:writer withInt:ComItextpdfTextPdfInternalPdfIsoKeys_PDFISOKEY_OBJECT withId:self];
  [((JavaIoOutputStream *) nil_chk(os)) writeWithInt:'<'];
  [os writeWithInt:'<'];
  
#line 141
  ComItextpdfTextPdfPdfObject *value;
  jint type = 0;
  for (id<JavaUtilMap_Entry> __strong e in nil_chk([((JavaUtilHashMap *) nil_chk(hashMap_)) entrySet])) {
    [((ComItextpdfTextPdfPdfName *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey])) toPdfWithComItextpdfTextPdfPdfWriter:writer withJavaIoOutputStream:os];
    value = [e getValue];
    type = [((ComItextpdfTextPdfPdfObject *) nil_chk(value)) type];
    if (type != ComItextpdfTextPdfPdfObject_ARRAY && type != ComItextpdfTextPdfPdfObject_DICTIONARY && type != ComItextpdfTextPdfPdfObject_NAME && type != ComItextpdfTextPdfPdfObject_STRING)
#line 148
    [os writeWithInt:' '];
    [value toPdfWithComItextpdfTextPdfPdfWriter:writer withJavaIoOutputStream:os];
  }
  [os writeWithInt:'>'];
  [os writeWithInt:'>'];
}

- (NSString *)description {
  
#line 167
  if ([self getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()] == nil)
#line 168
  return @"Dictionary";
  return JreStrcat("$@", @"Dictionary of type: ", [self getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()]);
}


#line 186
- (void)putWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
         withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 187
  if (object == nil || [object isNull])
#line 188
  (void) [((JavaUtilHashMap *) nil_chk(hashMap_)) removeWithId:key];
  else
#line 190
  (void) [((JavaUtilHashMap *) nil_chk(hashMap_)) putWithId:key withId:object];
}


#line 205
- (void)putExWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
           withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 206
  if (value == nil)
#line 207
  return;
  [self putWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
}


#line 221
- (void)putAllWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic {
  
#line 222
  [((JavaUtilHashMap *) nil_chk(hashMap_)) putAllWithJavaUtilMap:((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic))->hashMap_];
}


#line 231
- (void)removeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 232
  (void) [((JavaUtilHashMap *) nil_chk(hashMap_)) removeWithId:key];
}


#line 240
- (void)clear {
  
#line 241
  [((JavaUtilHashMap *) nil_chk(hashMap_)) clear];
}


#line 252
- (ComItextpdfTextPdfPdfObject *)getWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 253
  return [((JavaUtilHashMap *) nil_chk(hashMap_)) getWithId:key];
}


#line 267
- (ComItextpdfTextPdfPdfObject *)getDirectObjectWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 268
  return [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:[self getWithComItextpdfTextPdfPdfName:key]];
}


#line 276
- (id<JavaUtilSet>)getKeys {
  
#line 277
  return [((JavaUtilHashMap *) nil_chk(hashMap_)) keySet];
}


#line 287
- (jint)size {
  
#line 288
  return [((JavaUtilHashMap *) nil_chk(hashMap_)) size];
}


#line 297
- (jboolean)containsWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 298
  return [((JavaUtilHashMap *) nil_chk(hashMap_)) containsKeyWithId:key];
}


#line 308
- (jboolean)isFont {
  
#line 309
  return [self checkTypeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfDictionary_FONT_];
}


#line 317
- (jboolean)isPage {
  
#line 318
  return [self checkTypeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfDictionary_PAGE_];
}


#line 326
- (jboolean)isPages {
  
#line 327
  return [self checkTypeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfDictionary_PAGES_];
}


#line 335
- (jboolean)isCatalog {
  
#line 336
  return [self checkTypeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfDictionary_CATALOG_];
}


#line 344
- (jboolean)isOutlineTree {
  
#line 345
  return [self checkTypeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfDictionary_OUTLINES_];
}


#line 353
- (jboolean)checkTypeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)type {
  
#line 354
  if (type == nil)
#line 355
  return NO;
  if (dictionaryType_ == nil)
#line 357
  dictionaryType_ = [self getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_TYPE_()];
  return [((ComItextpdfTextPdfPdfName *) nil_chk(type)) isEqual:dictionaryType_];
}


#line 363
- (void)mergeWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)other {
  
#line 364
  [((JavaUtilHashMap *) nil_chk(hashMap_)) putAllWithJavaUtilMap:((ComItextpdfTextPdfPdfDictionary *) nil_chk(other))->hashMap_];
}


#line 367
- (void)mergeDifferentWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)other {
  
#line 368
  for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([((JavaUtilHashMap *) nil_chk(((ComItextpdfTextPdfPdfDictionary *) nil_chk(other))->hashMap_)) keySet])) {
    if (![hashMap_ containsKeyWithId:key])
#line 370
    (void) [hashMap_ putWithId:key withId:[other->hashMap_ getWithId:key]];
  }
}


#line 390
- (ComItextpdfTextPdfPdfDictionary *)getAsDictWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 391
  ComItextpdfTextPdfPdfDictionary *dict = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithComItextpdfTextPdfPdfName:key];
  if (orig != nil && [orig isDictionary])
#line 394
  dict = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(orig, [ComItextpdfTextPdfPdfDictionary class]);
  return dict;
}


#line 411
- (ComItextpdfTextPdfPdfArray *)getAsArrayWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 412
  ComItextpdfTextPdfPdfArray *array = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithComItextpdfTextPdfPdfName:key];
  if (orig != nil && [orig isArray])
#line 415
  array = (ComItextpdfTextPdfPdfArray *) check_class_cast(orig, [ComItextpdfTextPdfPdfArray class]);
  return array;
}


#line 432
- (ComItextpdfTextPdfPdfStream *)getAsStreamWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 433
  ComItextpdfTextPdfPdfStream *stream = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithComItextpdfTextPdfPdfName:key];
  if (orig != nil && [orig isStream])
#line 436
  stream = (ComItextpdfTextPdfPdfStream *) check_class_cast(orig, [ComItextpdfTextPdfPdfStream class]);
  return stream;
}


#line 453
- (ComItextpdfTextPdfPdfString *)getAsStringWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 454
  ComItextpdfTextPdfPdfString *string = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithComItextpdfTextPdfPdfName:key];
  if (orig != nil && [orig isString])
#line 457
  string = (ComItextpdfTextPdfPdfString *) check_class_cast(orig, [ComItextpdfTextPdfPdfString class]);
  return string;
}


#line 474
- (ComItextpdfTextPdfPdfNumber *)getAsNumberWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 475
  ComItextpdfTextPdfPdfNumber *number = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithComItextpdfTextPdfPdfName:key];
  if (orig != nil && [orig isNumber])
#line 478
  number = (ComItextpdfTextPdfPdfNumber *) check_class_cast(orig, [ComItextpdfTextPdfPdfNumber class]);
  return number;
}


#line 495
- (ComItextpdfTextPdfPdfName *)getAsNameWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 496
  ComItextpdfTextPdfPdfName *name = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithComItextpdfTextPdfPdfName:key];
  if (orig != nil && [orig isName])
#line 499
  name = (ComItextpdfTextPdfPdfName *) check_class_cast(orig, [ComItextpdfTextPdfPdfName class]);
  return name;
}


#line 516
- (ComItextpdfTextPdfPdfBoolean *)getAsBooleanWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 517
  ComItextpdfTextPdfPdfBoolean *bool_ = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getDirectObjectWithComItextpdfTextPdfPdfName:key];
  if (orig != nil && [orig isBoolean])
#line 520
  bool_ = (ComItextpdfTextPdfPdfBoolean *) check_class_cast(orig, [ComItextpdfTextPdfPdfBoolean class]);
  return bool_;
}


#line 535
- (ComItextpdfTextPdfPdfIndirectReference *)getAsIndirectObjectWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 536
  ComItextpdfTextPdfPdfIndirectReference *ref = nil;
  ComItextpdfTextPdfPdfObject *orig = [self getWithComItextpdfTextPdfPdfName:key];
  if (orig != nil && [orig isIndirect])
#line 539
  ref = (ComItextpdfTextPdfPdfIndirectReference *) check_class_cast(orig, [ComItextpdfTextPdfPdfIndirectReference class]);
  return ref;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfPdfDictionary *)other {
  [super copyAllFieldsTo:other];
  other->dictionaryType_ = dictionaryType_;
  other->hashMap_ = hashMap_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfDictionary class]) {
    ComItextpdfTextPdfPdfDictionary_FONT_ = ComItextpdfTextPdfPdfName_get_FONT_();
    ComItextpdfTextPdfPdfDictionary_OUTLINES_ = ComItextpdfTextPdfPdfName_get_OUTLINES_();
    ComItextpdfTextPdfPdfDictionary_PAGE_ = ComItextpdfTextPdfPdfName_get_PAGE_();
    ComItextpdfTextPdfPdfDictionary_PAGES_ = ComItextpdfTextPdfPdfName_get_PAGES_();
    ComItextpdfTextPdfPdfDictionary_CATALOG_ = ComItextpdfTextPdfPdfName_get_CATALOG_();
    ComItextpdfTextPdfPdfDictionary_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfDictionary", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfPdfName:", "PdfDictionary", NULL, 0x1, NULL },
    { "toPdfWithComItextpdfTextPdfPdfWriter:withJavaIoOutputStream:", "toPdf", "V", 0x1, "Ljava.io.IOException;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "putWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "put", "V", 0x1, NULL },
    { "putExWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "putEx", "V", 0x1, NULL },
    { "putAllWithComItextpdfTextPdfPdfDictionary:", "putAll", "V", 0x1, NULL },
    { "removeWithComItextpdfTextPdfPdfName:", "remove", "V", 0x1, NULL },
    { "clear", NULL, "V", 0x1, NULL },
    { "getWithComItextpdfTextPdfPdfName:", "get", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "getDirectObjectWithComItextpdfTextPdfPdfName:", "getDirectObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "getKeys", NULL, "Ljava.util.Set;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "containsWithComItextpdfTextPdfPdfName:", "contains", "Z", 0x1, NULL },
    { "isFont", NULL, "Z", 0x1, NULL },
    { "isPage", NULL, "Z", 0x1, NULL },
    { "isPages", NULL, "Z", 0x1, NULL },
    { "isCatalog", NULL, "Z", 0x1, NULL },
    { "isOutlineTree", NULL, "Z", 0x1, NULL },
    { "checkTypeWithComItextpdfTextPdfPdfName:", "checkType", "Z", 0x1, NULL },
    { "mergeWithComItextpdfTextPdfPdfDictionary:", "merge", "V", 0x1, NULL },
    { "mergeDifferentWithComItextpdfTextPdfPdfDictionary:", "mergeDifferent", "V", 0x1, NULL },
    { "getAsDictWithComItextpdfTextPdfPdfName:", "getAsDict", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "getAsArrayWithComItextpdfTextPdfPdfName:", "getAsArray", "Lcom.itextpdf.text.pdf.PdfArray;", 0x1, NULL },
    { "getAsStreamWithComItextpdfTextPdfPdfName:", "getAsStream", "Lcom.itextpdf.text.pdf.PdfStream;", 0x1, NULL },
    { "getAsStringWithComItextpdfTextPdfPdfName:", "getAsString", "Lcom.itextpdf.text.pdf.PdfString;", 0x1, NULL },
    { "getAsNumberWithComItextpdfTextPdfPdfName:", "getAsNumber", "Lcom.itextpdf.text.pdf.PdfNumber;", 0x1, NULL },
    { "getAsNameWithComItextpdfTextPdfPdfName:", "getAsName", "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "getAsBooleanWithComItextpdfTextPdfPdfName:", "getAsBoolean", "Lcom.itextpdf.text.pdf.PdfBoolean;", 0x1, NULL },
    { "getAsIndirectObjectWithComItextpdfTextPdfPdfName:", "getAsIndirectObject", "Lcom.itextpdf.text.pdf.PdfIndirectReference;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FONT_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfDictionary_FONT_,  },
    { "OUTLINES_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfDictionary_OUTLINES_,  },
    { "PAGE_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfDictionary_PAGE_,  },
    { "PAGES_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfDictionary_PAGES_,  },
    { "CATALOG_", NULL, 0x19, "Lcom.itextpdf.text.pdf.PdfName;", &ComItextpdfTextPdfPdfDictionary_CATALOG_,  },
    { "dictionaryType_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "hashMap_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfDictionary = { "PdfDictionary", "com.itextpdf.text.pdf", NULL, 0x1, 30, methods, 7, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfDictionary;
}

@end
