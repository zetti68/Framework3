//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfDate.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfDate.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/PdfDate.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Calendar.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/SimpleTimeZone.h"

BOOL ComItextpdfTextPdfPdfDate_initialized = NO;


#line 67
@implementation ComItextpdfTextPdfPdfDate

IOSIntArray * ComItextpdfTextPdfPdfDate_DATE_SPACE_;


#line 80
- (instancetype)initComItextpdfTextPdfPdfDateWithJavaUtilCalendar:(JavaUtilCalendar *)d {
  if (self =
#line 81
  [super init]) {
    
#line 82
    JavaLangStringBuffer *date = [[JavaLangStringBuffer alloc] initWithNSString:@"D:"];
    
#line 83
    (void) [date appendWithNSString:[self setLengthWithInt:[((JavaUtilCalendar *) nil_chk(d)) getWithInt:JavaUtilCalendar_YEAR] withInt:4]];
    
#line 84
    (void) [date appendWithNSString:[self setLengthWithInt:[d getWithInt:JavaUtilCalendar_MONTH] + 1 withInt:2]];
    
#line 85
    (void) [date appendWithNSString:[self setLengthWithInt:[d getWithInt:JavaUtilCalendar_DATE] withInt:2]];
    
#line 86
    (void) [date appendWithNSString:[self setLengthWithInt:[d getWithInt:JavaUtilCalendar_HOUR_OF_DAY] withInt:2]];
    
#line 87
    (void) [date appendWithNSString:[self setLengthWithInt:[d getWithInt:JavaUtilCalendar_MINUTE] withInt:2]];
    
#line 88
    (void) [date appendWithNSString:[self setLengthWithInt:[d getWithInt:JavaUtilCalendar_SECOND] withInt:2]];
    
#line 89
    jint timezone = ([d getWithInt:JavaUtilCalendar_ZONE_OFFSET] + [d getWithInt:JavaUtilCalendar_DST_OFFSET]) / (60 * 60 * 1000);
    
#line 90
    if (timezone == 0) {
      (void) [date appendWithChar:'Z'];
    }
    else if (timezone < 0) {
      (void) [date appendWithChar:'-'];
      timezone = -timezone;
    }
    else {
      (void) [date appendWithChar:'+'];
    }
    
#line 100
    if (timezone != 0) {
      (void) [((JavaLangStringBuffer *) nil_chk([date appendWithNSString:[self setLengthWithInt:timezone withInt:2]])) appendWithChar:'\''];
      jint zone = [JavaLangMath absWithInt:([d getWithInt:JavaUtilCalendar_ZONE_OFFSET] + [d getWithInt:JavaUtilCalendar_DST_OFFSET]) / (60 * 1000)] - (timezone * 60);
      (void) [((JavaLangStringBuffer *) nil_chk([date appendWithNSString:[self setLengthWithInt:zone withInt:2]])) appendWithChar:'\''];
    }
    
#line 105
    value_ = [date description];
  }
  return self;
}

- (instancetype)initWithJavaUtilCalendar:(JavaUtilCalendar *)d {
  return [self initComItextpdfTextPdfPdfDateWithJavaUtilCalendar:
#line 80
d];
}


#line 112
- (instancetype)init {
  return
#line 113
  [self initComItextpdfTextPdfPdfDateWithJavaUtilCalendar:[[JavaUtilGregorianCalendar alloc] init]];
}


#line 125
- (NSString *)setLengthWithInt:(jint)i
                       withInt:(jint)length {
  
#line 126
  JavaLangStringBuffer *tmp = [[JavaLangStringBuffer alloc] init];
  (void) [tmp appendWithInt:i];
  while ([tmp sequenceLength] < length) {
    (void) [tmp insertWithInt:0 withNSString:@"0"];
  }
  [tmp setLengthWithInt:length];
  return [tmp description];
}


#line 139
- (NSString *)getW3CDate {
  
#line 140
  return [ComItextpdfTextPdfPdfDate getW3CDateWithNSString:value_];
}


#line 148
+ (NSString *)getW3CDateWithNSString:(NSString *)d {
  
#line 149
  if ([((NSString *) nil_chk(d)) hasPrefix:@"D:"])
#line 150
  d = [d substring:2];
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  if (((jint) [((NSString *) nil_chk(d)) length]) < 4)
#line 153
  return @"0000";
  (void) [sb appendWithNSString:[d substring:0 endIndex:4]];
  d = [d substring:4];
  if (((jint) [((NSString *) nil_chk(d)) length]) < 2)
#line 157
  return [sb description];
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:'-'])) appendWithNSString:[d substring:0 endIndex:2]];
  d = [d substring:2];
  if (((jint) [((NSString *) nil_chk(d)) length]) < 2)
#line 161
  return [sb description];
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:'-'])) appendWithNSString:[d substring:0 endIndex:2]];
  d = [d substring:2];
  if (((jint) [((NSString *) nil_chk(d)) length]) < 2)
#line 165
  return [sb description];
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:'T'])) appendWithNSString:[d substring:0 endIndex:2]];
  d = [d substring:2];
  if (((jint) [((NSString *) nil_chk(d)) length]) < 2) {
    (void) [sb appendWithNSString:@":00Z"];
    return [sb description];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:':'])) appendWithNSString:[d substring:0 endIndex:2]];
  d = [d substring:2];
  if (((jint) [((NSString *) nil_chk(d)) length]) < 2) {
    (void) [sb appendWithChar:'Z'];
    return [sb description];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:':'])) appendWithNSString:[d substring:0 endIndex:2]];
  d = [d substring:2];
  if ([((NSString *) nil_chk(d)) hasPrefix:@"-"] || [d hasPrefix:@"+"]) {
    NSString *sign = [d substring:0 endIndex:1];
    d = [d substring:1];
    NSString *h = @"00";
    NSString *m = @"00";
    if (((jint) [((NSString *) nil_chk(d)) length]) >= 2) {
      h = [d substring:0 endIndex:2];
      if (((jint) [d length]) > 2) {
        d = [d substring:3];
        if (((jint) [((NSString *) nil_chk(d)) length]) >= 2)
#line 190
        m = [d substring:0 endIndex:2];
      }
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:sign])) appendWithNSString:h])) appendWithChar:':'])) appendWithNSString:m];
      return [sb description];
    }
  }
  (void) [sb appendWithChar:'Z'];
  return [sb description];
}


#line 206
+ (JavaUtilCalendar *)decodeWithNSString:(NSString *)s {
  
#line 207
  @try {
    if ([((NSString *) nil_chk(s)) hasPrefix:@"D:"])
#line 209
    s = [s substring:2];
    JavaUtilGregorianCalendar *calendar;
    jint slen = ((jint) [((NSString *) nil_chk(s)) length]);
    jint idx = [s indexOf:'Z'];
    if (idx >= 0) {
      slen = idx;
      calendar = [[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:[[JavaUtilSimpleTimeZone alloc] initWithInt:0 withNSString:@"ZPDF"]];
    }
    else {
      jint sign = 1;
      idx = [s indexOf:'+'];
      if (idx < 0) {
        idx = [s indexOf:'-'];
        if (idx >= 0)
#line 223
        sign = -1;
      }
      if (idx < 0)
#line 226
      calendar = [[JavaUtilGregorianCalendar alloc] init];
      else {
        jint offset = [JavaLangInteger parseIntWithNSString:[s substring:idx + 1 endIndex:idx + 3]] * 60;
        if (idx + 5 < ((jint) [s length]))
#line 230
        offset += [JavaLangInteger parseIntWithNSString:[s substring:idx + 4 endIndex:idx + 6]];
        calendar = [[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:[[JavaUtilSimpleTimeZone alloc] initWithInt:offset * sign * 60000 withNSString:@"ZPDF"]];
        slen = idx;
      }
    }
    [((JavaUtilGregorianCalendar *) nil_chk(calendar)) clear];
    idx = 0;
    for (jint k = 0; k < ((IOSIntArray *) nil_chk(ComItextpdfTextPdfPdfDate_DATE_SPACE_))->size_; k += 3) {
      if (idx >= slen)
#line 239
      break;
      [calendar setWithInt:IOSIntArray_Get(ComItextpdfTextPdfPdfDate_DATE_SPACE_, k) withInt:[JavaLangInteger parseIntWithNSString:[s substring:idx endIndex:idx + IOSIntArray_Get(ComItextpdfTextPdfPdfDate_DATE_SPACE_, k + 1)]] + IOSIntArray_Get(ComItextpdfTextPdfPdfDate_DATE_SPACE_, k + 2)];
      idx += IOSIntArray_Get(ComItextpdfTextPdfPdfDate_DATE_SPACE_, k + 1);
    }
    return calendar;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfPdfDate class]) {
    ComItextpdfTextPdfPdfDate_DATE_SPACE_ = [IOSIntArray arrayWithInts:(jint[]){
#line 69
      JavaUtilCalendar_YEAR, 4, 0, JavaUtilCalendar_MONTH, 2, -1, JavaUtilCalendar_DAY_OF_MONTH, 2, 0,
#line 70
      JavaUtilCalendar_HOUR_OF_DAY, 2, 0, JavaUtilCalendar_MINUTE, 2, 0, JavaUtilCalendar_SECOND, 2, 0 } count:18];
      ComItextpdfTextPdfPdfDate_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCalendar:", "PdfDate", NULL, 0x1, NULL },
    { "init", "PdfDate", NULL, 0x1, NULL },
    { "setLengthWithInt:withInt:", "setLength", "Ljava.lang.String;", 0x2, NULL },
    { "getW3CDate", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getW3CDateWithNSString:", "getW3CDate", "Ljava.lang.String;", 0x9, NULL },
    { "decodeWithNSString:", "decode", "Ljava.util.Calendar;", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DATE_SPACE_", NULL, 0x1a, "[I", &ComItextpdfTextPdfPdfDate_DATE_SPACE_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfDate = { "PdfDate", "com.itextpdf.text.pdf", NULL, 0x1, 6, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfDate;
}

@end
