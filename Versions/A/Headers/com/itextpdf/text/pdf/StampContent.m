//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/StampContent.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/StampContent.java"

#include "com/itextpdf/text/pdf/PageResources.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfStamperImp.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/StampContent.h"


#line 47
@implementation ComItextpdfTextPdfStampContent


#line 52
- (instancetype)initWithComItextpdfTextPdfPdfStamperImp:(ComItextpdfTextPdfPdfStamperImp *)stamper
          withComItextpdfTextPdfPdfStamperImp_PageStamp:(ComItextpdfTextPdfPdfStamperImp_PageStamp *)ps {
  if (self =
#line 53
  [super initWithComItextpdfTextPdfPdfWriter:stamper]) {
    
#line 54
    self->ps_ = ps;
    
#line 55
    pageResources_ = ((ComItextpdfTextPdfPdfStamperImp_PageStamp *) nil_chk(ps))->pageResources_;
  }
  return self;
}


#line 58
- (void)setActionWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action
                                       withFloat:(jfloat)llx
                                       withFloat:(jfloat)lly
                                       withFloat:(jfloat)urx
                                       withFloat:(jfloat)ury {
  
#line 59
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) check_class_cast(writer_, [ComItextpdfTextPdfPdfStamperImp class])))) addAnnotationWithComItextpdfTextPdfPdfAnnotation:[[ComItextpdfTextPdfPdfAnnotation alloc] initWithComItextpdfTextPdfPdfWriter:writer_ withFloat:llx withFloat:lly withFloat:urx withFloat:ury withComItextpdfTextPdfPdfAction:action] withComItextpdfTextPdfPdfDictionary:((ComItextpdfTextPdfPdfStamperImp_PageStamp *) nil_chk(ps_))->pageN_];
}

- (ComItextpdfTextPdfPdfContentByte *)getDuplicate {
  
#line 69
  return [[ComItextpdfTextPdfStampContent alloc] initWithComItextpdfTextPdfPdfStamperImp:(ComItextpdfTextPdfPdfStamperImp *) check_class_cast(writer_, [ComItextpdfTextPdfPdfStamperImp class]) withComItextpdfTextPdfPdfStamperImp_PageStamp:ps_];
}


#line 72
- (ComItextpdfTextPdfPageResources *)getPageResources {
  
#line 73
  return pageResources_;
}


#line 76
- (void)addAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annot {
  
#line 77
  [((ComItextpdfTextPdfPdfStamperImp *) nil_chk(((ComItextpdfTextPdfPdfStamperImp *) check_class_cast(writer_, [ComItextpdfTextPdfPdfStamperImp class])))) addAnnotationWithComItextpdfTextPdfPdfAnnotation:annot withComItextpdfTextPdfPdfDictionary:((ComItextpdfTextPdfPdfStamperImp_PageStamp *) nil_chk(ps_))->pageN_];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfStampContent *)other {
  [super copyAllFieldsTo:other];
  other->pageResources_ = pageResources_;
  other->ps_ = ps_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfPdfStamperImp:withComItextpdfTextPdfPdfStamperImp_PageStamp:", "StampContent", NULL, 0x0, NULL },
    { "setActionWithComItextpdfTextPdfPdfAction:withFloat:withFloat:withFloat:withFloat:", "setAction", "V", 0x1, NULL },
    { "getDuplicate", NULL, "Lcom.itextpdf.text.pdf.PdfContentByte;", 0x1, NULL },
    { "getPageResources", NULL, "Lcom.itextpdf.text.pdf.PageResources;", 0x0, NULL },
    { "addAnnotationWithComItextpdfTextPdfPdfAnnotation:", "addAnnotation", "V", 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ps_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfStamperImp$PageStamp;", NULL,  },
    { "pageResources_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PageResources;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfStampContent = { "StampContent", "com.itextpdf.text.pdf", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfStampContent;
}

@end
