//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfCopyFormsImp.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfCopyFormsImp.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/IntHashtable.h"
#include "com/itextpdf/text/pdf/PdfCopyFieldsImp.h"
#include "com/itextpdf/text/pdf/PdfCopyFormsImp.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "java/io/OutputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"


#line 59
@implementation ComItextpdfTextPdfPdfCopyFormsImp


#line 66
- (instancetype)initWithJavaIoOutputStream:(JavaIoOutputStream *)os {
  return
#line 67
  [super initWithJavaIoOutputStream:os];
}


#line 75
- (void)copyDocumentFieldsWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 76
  if (![((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) isOpenedWithFullPermissions])
#line 77
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"pdfreader.not.opened.with.owner.password" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  if ([((JavaUtilHashMap *) nil_chk(readers2intrefs_)) containsKeyWithId:reader]) {
    reader = [[ComItextpdfTextPdfPdfReader alloc] initWithComItextpdfTextPdfPdfReader:reader];
  }
  else {
    if ([reader isTampered])
#line 83
    @throw [[ComItextpdfTextDocumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"the.document.was.reused" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    [reader consolidateNamedDestinations];
    [reader setTamperedWithBoolean:YES];
  }
  [reader shuffleSubsetNames];
  (void) [readers2intrefs_ putWithId:reader withId:[[ComItextpdfTextPdfIntHashtable alloc] init]];
  [((JavaUtilArrayList *) nil_chk(fields_)) addWithId:[reader getAcroFields]];
  [self updateCalculationOrderWithComItextpdfTextPdfPdfReader:reader];
}


#line 98
- (void)mergeFields {
  
#line 99
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(fields_)) size]; ++k) {
    id<JavaUtilMap> fd = [((ComItextpdfTextPdfAcroFields *) nil_chk(([fields_ getWithInt:k]))) getFields];
    [self mergeWithMasterWithJavaUtilMap:fd];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoOutputStream:", "PdfCopyFormsImp", NULL, 0x0, "Lcom.itextpdf.text.DocumentException;" },
    { "copyDocumentFieldsWithComItextpdfTextPdfPdfReader:", "copyDocumentFields", "V", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "mergeFields", NULL, "V", 0x0, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfCopyFormsImp = { "PdfCopyFormsImp", "com.itextpdf.text.pdf", NULL, 0x0, 3, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfPdfCopyFormsImp;
}

@end
