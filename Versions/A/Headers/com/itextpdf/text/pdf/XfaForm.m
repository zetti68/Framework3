//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/XfaForm.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/XfaForm.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/pdf/AcroFields.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectObject.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "com/itextpdf/text/pdf/XfaForm.h"
#include "com/itextpdf/text/xml/XmlDomWriter.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/EmptyStackException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/xml/parsers/DocumentBuilder.h"
#include "javax/xml/parsers/DocumentBuilderFactory.h"
#include "javax/xml/parsers/ParserConfigurationException.h"
#include "org/w3c/dom/Attr.h"
#include "org/w3c/dom/Document.h"
#include "org/w3c/dom/Element.h"
#include "org/w3c/dom/NamedNodeMap.h"
#include "org/w3c/dom/Node.h"
#include "org/w3c/dom/NodeList.h"
#include "org/w3c/dom/Text.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"


#line 66
@implementation ComItextpdfTextPdfXfaForm

NSString * ComItextpdfTextPdfXfaForm_XFA_DATA_SCHEMA_ = 
#line 77
@"http://www.xfa.org/schema/xfa-data/1.0/";


#line 82
- (instancetype)init {
  return [super init];
}


#line 92
+ (ComItextpdfTextPdfPdfObject *)getXfaObjectWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 93
  ComItextpdfTextPdfPdfDictionary *af = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()]], [ComItextpdfTextPdfPdfDictionary class]);
  if (af == nil) {
    return nil;
  }
  return [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(af)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XFA_()]];
}


#line 108
- (instancetype)initWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  if (self = [super init]) {
    
#line 109
    self->reader_ = reader;
    
#line 110
    ComItextpdfTextPdfPdfObject *xfa = [ComItextpdfTextPdfXfaForm getXfaObjectWithComItextpdfTextPdfPdfReader:reader];
    
#line 111
    if (xfa == nil) {
      xfaPresent_ = NO;
      return self;
    }
    
#line 115
    xfaPresent_ = YES;
    
#line 116
    JavaIoByteArrayOutputStream *bout = [[JavaIoByteArrayOutputStream alloc] init];
    
#line 117
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(xfa)) isArray]) {
      ComItextpdfTextPdfPdfArray *ar = (ComItextpdfTextPdfPdfArray *) check_class_cast(xfa, [ComItextpdfTextPdfPdfArray class]);
      for (jint k = 1; k < [ar size]; k += 2) {
        ComItextpdfTextPdfPdfObject *ob = [ar getDirectObjectWithInt:k];
        if ([ob isKindOfClass:[ComItextpdfTextPdfPRStream class]]) {
          IOSByteArray *b = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(ob, [ComItextpdfTextPdfPRStream class])];
          [bout writeWithByteArray:b];
        }
      }
    }
    else if ([xfa isKindOfClass:[ComItextpdfTextPdfPRStream class]]) {
      IOSByteArray *b = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *) check_class_cast(xfa, [ComItextpdfTextPdfPRStream class])];
      [bout writeWithByteArray:b];
    }
    
#line 131
    [bout close];
    
#line 132
    JavaxXmlParsersDocumentBuilderFactory *fact = [JavaxXmlParsersDocumentBuilderFactory newInstance];
    
#line 133
    [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(fact)) setNamespaceAwareWithBoolean:YES];
    
#line 134
    JavaxXmlParsersDocumentBuilder *db = [fact newDocumentBuilder];
    
#line 135
    domDocument_ = [((JavaxXmlParsersDocumentBuilder *) nil_chk(db)) parseWithJavaIoInputStream:[[JavaIoByteArrayInputStream alloc] initWithByteArray:[bout toByteArray]]];
    
#line 136
    [self extractNodes];
  }
  return self;
}


#line 143
- (void)extractNodes {
  
#line 144
  id<JavaUtilMap> xfaNodes = [ComItextpdfTextPdfXfaForm extractXFANodesWithOrgW3cDomDocument:domDocument_];
  
#line 146
  if ([((id<JavaUtilMap>) nil_chk(xfaNodes)) containsKeyWithId:@"template"]) {
    templateNode_ = [xfaNodes getWithId:@"template"];
    templateSom_ = [[ComItextpdfTextPdfXfaForm_Xml2SomTemplate alloc] initWithOrgW3cDomNode:templateNode_];
  }
  if ([xfaNodes containsKeyWithId:@"datasets"]) {
    datasetsNode_ = [xfaNodes getWithId:@"datasets"];
    datasetsSom_ = [[ComItextpdfTextPdfXfaForm_Xml2SomDatasets alloc] initWithOrgW3cDomNode:[((id<OrgW3cDomNode>) nil_chk(datasetsNode_)) getFirstChild]];
  }
  if (datasetsNode_ == nil)
#line 155
  [self createDatasetsNodeWithOrgW3cDomNode:[((id<OrgW3cDomDocument>) nil_chk(domDocument_)) getFirstChild]];
}


#line 158
+ (id<JavaUtilMap>)extractXFANodesWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)domDocument {
  
#line 159
  id<JavaUtilMap> xfaNodes = [[JavaUtilHashMap alloc] init];
  id<OrgW3cDomNode> n = [((id<OrgW3cDomDocument>) nil_chk(domDocument)) getFirstChild];
  while ([((id<OrgW3cDomNodeList>) nil_chk([((id<OrgW3cDomNode>) nil_chk(n)) getChildNodes])) getLength] == 0) {
    n = [n getNextSibling];
  }
  n = [((id<OrgW3cDomNode>) nil_chk(n)) getFirstChild];
  while (n != nil) {
    if ([((id<OrgW3cDomNode>) nil_chk(n)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
      NSString *s = [n getLocalName];
      (void) [xfaNodes putWithId:s withId:n];
    }
    n = [n getNextSibling];
  }
  
#line 173
  return xfaNodes;
}

- (void)createDatasetsNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)n {
  
#line 180
  while ([((id<OrgW3cDomNodeList>) nil_chk([((id<OrgW3cDomNode>) nil_chk(n)) getChildNodes])) getLength] == 0) {
    n = [n getNextSibling];
  }
  if (n != nil) {
    id<OrgW3cDomElement> e = [((id<OrgW3cDomDocument>) nil_chk([n getOwnerDocument])) createElementWithNSString:@"xfa:datasets"];
    [((id<OrgW3cDomElement>) nil_chk(e)) setAttributeWithNSString:@"xmlns:xfa" withNSString:ComItextpdfTextPdfXfaForm_XFA_DATA_SCHEMA_];
    datasetsNode_ = e;
    (void) [n appendChildWithOrgW3cDomNode:datasetsNode_];
  }
}


#line 198
+ (void)setXfaWithComItextpdfTextPdfXfaForm:(ComItextpdfTextPdfXfaForm *)form
            withComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
            withComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 199
  ComItextpdfTextPdfPdfDictionary *af = (ComItextpdfTextPdfPdfDictionary *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk([((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog])) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_ACROFORM_()]], [ComItextpdfTextPdfPdfDictionary class]);
  if (af == nil) {
    return;
  }
  ComItextpdfTextPdfPdfObject *xfa = [ComItextpdfTextPdfXfaForm getXfaObjectWithComItextpdfTextPdfPdfReader:reader];
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(xfa)) isArray]) {
    ComItextpdfTextPdfPdfArray *ar = (ComItextpdfTextPdfPdfArray *) check_class_cast(xfa, [ComItextpdfTextPdfPdfArray class]);
    jint t = -1;
    jint d = -1;
    for (jint k = 0; k < [ar size]; k += 2) {
      ComItextpdfTextPdfPdfString *s = [ar getAsStringWithInt:k];
      if ([@"template" isEqual:[((ComItextpdfTextPdfPdfString *) nil_chk(s)) description]]) {
        t = k + 1;
      }
      if ([@"datasets" isEqual:[s description]]) {
        d = k + 1;
      }
    }
    if (t > -1 && d > -1) {
      [reader killXrefWithComItextpdfTextPdfPdfObject:[ar getAsIndirectObjectWithInt:t]];
      [reader killXrefWithComItextpdfTextPdfPdfObject:[ar getAsIndirectObjectWithInt:d]];
      ComItextpdfTextPdfPdfStream *tStream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[ComItextpdfTextPdfXfaForm serializeDocWithOrgW3cDomNode:((ComItextpdfTextPdfXfaForm *) nil_chk(form))->templateNode_]];
      [tStream flateCompressWithInt:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getCompressionLevel]];
      (void) [ar setWithInt:t withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer addToBodyWithComItextpdfTextPdfPdfObject:tStream])) getIndirectReference]];
      ComItextpdfTextPdfPdfStream *dStream = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[ComItextpdfTextPdfXfaForm serializeDocWithOrgW3cDomNode:form->datasetsNode_]];
      [dStream flateCompressWithInt:[writer getCompressionLevel]];
      (void) [ar setWithInt:d withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer addToBodyWithComItextpdfTextPdfPdfObject:dStream])) getIndirectReference]];
      [((ComItextpdfTextPdfPdfDictionary *) nil_chk(af)) putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XFA_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfArray alloc] initWithComItextpdfTextPdfPdfArray:ar]];
      return;
    }
  }
  [reader killXrefWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(af)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XFA_()]];
  ComItextpdfTextPdfPdfStream *str = [[ComItextpdfTextPdfPdfStream alloc] initWithByteArray:[ComItextpdfTextPdfXfaForm serializeDocWithOrgW3cDomNode:((ComItextpdfTextPdfXfaForm *) nil_chk(form))->domDocument_]];
  [str flateCompressWithInt:[((ComItextpdfTextPdfPdfWriter *) nil_chk(writer)) getCompressionLevel]];
  ComItextpdfTextPdfPdfIndirectReference *ref = [((ComItextpdfTextPdfPdfIndirectObject *) nil_chk([writer addToBodyWithComItextpdfTextPdfPdfObject:str])) getIndirectReference];
  [af putWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XFA_() withComItextpdfTextPdfPdfObject:ref];
}


#line 242
- (void)setXfaWithComItextpdfTextPdfPdfWriter:(ComItextpdfTextPdfPdfWriter *)writer {
  
#line 243
  [ComItextpdfTextPdfXfaForm setXfaWithComItextpdfTextPdfXfaForm:self withComItextpdfTextPdfPdfReader:reader_ withComItextpdfTextPdfPdfWriter:writer];
}


#line 252
+ (IOSByteArray *)serializeDocWithOrgW3cDomNode:(id<OrgW3cDomNode>)n {
  
#line 253
  ComItextpdfTextXmlXmlDomWriter *xw = [[ComItextpdfTextXmlXmlDomWriter alloc] init];
  JavaIoByteArrayOutputStream *fout = [[JavaIoByteArrayOutputStream alloc] init];
  [xw setOutputWithJavaIoOutputStream:fout withNSString:nil];
  [xw setCanonicalWithBoolean:NO];
  [xw writeWithOrgW3cDomNode:n];
  [fout close];
  return [fout toByteArray];
}


#line 266
- (jboolean)isXfaPresent {
  
#line 267
  return xfaPresent_;
}


#line 274
- (id<OrgW3cDomDocument>)getDomDocument {
  
#line 275
  return domDocument_;
}


#line 285
- (NSString *)findFieldNameWithNSString:(NSString *)name
       withComItextpdfTextPdfAcroFields:(ComItextpdfTextPdfAcroFields *)af {
  
#line 286
  id<JavaUtilMap> items = [((ComItextpdfTextPdfAcroFields *) nil_chk(af)) getFields];
  if ([((id<JavaUtilMap>) nil_chk(items)) containsKeyWithId:name])
#line 288
  return name;
  if (acroFieldsSom_ == nil) {
    if ([items isEmpty] && xfaPresent_)
#line 291
    acroFieldsSom_ = [[ComItextpdfTextPdfXfaForm_AcroFieldsSearch alloc] initWithJavaUtilCollection:[((JavaUtilHashMap *) nil_chk([((ComItextpdfTextPdfXfaForm_Xml2SomDatasets *) nil_chk(datasetsSom_)) getName2Node])) keySet]];
    else
#line 293
    acroFieldsSom_ = [[ComItextpdfTextPdfXfaForm_AcroFieldsSearch alloc] initWithJavaUtilCollection:[items keySet]];
  }
  if ([((JavaUtilHashMap *) nil_chk([((ComItextpdfTextPdfXfaForm_AcroFieldsSearch *) nil_chk(acroFieldsSom_)) getAcroShort2LongName])) containsKeyWithId:name])
#line 296
  return [((JavaUtilHashMap *) nil_chk([acroFieldsSom_ getAcroShort2LongName])) getWithId:name];
  return [acroFieldsSom_ inverseSearchGlobalWithJavaUtilArrayList:[ComItextpdfTextPdfXfaForm_Xml2Som splitPartsWithNSString:name]];
}


#line 306
- (NSString *)findDatasetsNameWithNSString:(NSString *)name {
  if ([((JavaUtilHashMap *) nil_chk([((ComItextpdfTextPdfXfaForm_Xml2SomDatasets *) nil_chk(datasetsSom_)) getName2Node])) containsKeyWithId:name])
#line 308
  return name;
  return [datasetsSom_ inverseSearchGlobalWithJavaUtilArrayList:[ComItextpdfTextPdfXfaForm_Xml2Som splitPartsWithNSString:name]];
}


#line 318
- (id<OrgW3cDomNode>)findDatasetsNodeWithNSString:(NSString *)name {
  
#line 319
  if (name == nil)
#line 320
  return nil;
  name = [self findDatasetsNameWithNSString:name];
  if (name == nil)
#line 323
  return nil;
  return [((JavaUtilHashMap *) nil_chk([((ComItextpdfTextPdfXfaForm_Xml2SomDatasets *) nil_chk(datasetsSom_)) getName2Node])) getWithId:name];
}


#line 332
+ (NSString *)getNodeTextWithOrgW3cDomNode:(id<OrgW3cDomNode>)n {
  
#line 333
  if (n == nil)
#line 334
  return @"";
  return [ComItextpdfTextPdfXfaForm getNodeTextWithOrgW3cDomNode:n withNSString:@""];
}


#line 339
+ (NSString *)getNodeTextWithOrgW3cDomNode:(id<OrgW3cDomNode>)n
                              withNSString:(NSString *)name {
  
#line 340
  id<OrgW3cDomNode> n2 = [((id<OrgW3cDomNode>) nil_chk(n)) getFirstChild];
  while (n2 != nil) {
    if ([((id<OrgW3cDomNode>) nil_chk(n2)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
      name = [ComItextpdfTextPdfXfaForm getNodeTextWithOrgW3cDomNode:n2 withNSString:name];
    }
    else if ([n2 getNodeType] == OrgW3cDomNode_TEXT_NODE) {
      name = JreStrcat("$$", name, [n2 getNodeValue]);
    }
    n2 = [n2 getNextSibling];
  }
  return name;
}


#line 359
- (void)setNodeTextWithOrgW3cDomNode:(id<OrgW3cDomNode>)n
                        withNSString:(NSString *)text {
  
#line 360
  if (n == nil)
#line 361
  return;
  id<OrgW3cDomNode> nc = nil;
  while ((nc = [((id<OrgW3cDomNode>) nil_chk(n)) getFirstChild]) != nil) {
    (void) [n removeChildWithOrgW3cDomNode:nc];
  }
  if ([((id<OrgW3cDomNamedNodeMap>) nil_chk([n getAttributes])) getNamedItemNSWithNSString:ComItextpdfTextPdfXfaForm_XFA_DATA_SCHEMA_ withNSString:@"dataNode"] != nil)
#line 367
  (void) [((id<OrgW3cDomNamedNodeMap>) nil_chk([n getAttributes])) removeNamedItemNSWithNSString:ComItextpdfTextPdfXfaForm_XFA_DATA_SCHEMA_ withNSString:@"dataNode"];
  (void) [n appendChildWithOrgW3cDomNode:[((id<OrgW3cDomDocument>) nil_chk(domDocument_)) createTextNodeWithNSString:text]];
  changed_ = YES;
}


#line 376
- (void)setXfaPresentWithBoolean:(jboolean)xfaPresent {
  self->xfaPresent_ = xfaPresent;
}


#line 384
- (void)setDomDocumentWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)domDocument {
  
#line 385
  self->domDocument_ = domDocument;
  [self extractNodes];
}


#line 393
- (ComItextpdfTextPdfPdfReader *)getReader {
  
#line 394
  return reader_;
}


#line 401
- (void)setReaderWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader {
  
#line 402
  self->reader_ = reader;
}


#line 409
- (jboolean)isChanged {
  
#line 410
  return changed_;
}


#line 417
- (void)setChangedWithBoolean:(jboolean)changed {
  
#line 418
  self->changed_ = changed;
}


#line 1072
- (ComItextpdfTextPdfXfaForm_Xml2SomTemplate *)getTemplateSom {
  
#line 1073
  return templateSom_;
}


#line 1080
- (void)setTemplateSomWithComItextpdfTextPdfXfaForm_Xml2SomTemplate:(ComItextpdfTextPdfXfaForm_Xml2SomTemplate *)templateSom {
  
#line 1081
  self->templateSom_ = templateSom;
}


#line 1088
- (ComItextpdfTextPdfXfaForm_Xml2SomDatasets *)getDatasetsSom {
  
#line 1089
  return datasetsSom_;
}


#line 1096
- (void)setDatasetsSomWithComItextpdfTextPdfXfaForm_Xml2SomDatasets:(ComItextpdfTextPdfXfaForm_Xml2SomDatasets *)datasetsSom {
  
#line 1097
  self->datasetsSom_ = datasetsSom;
}


#line 1104
- (ComItextpdfTextPdfXfaForm_AcroFieldsSearch *)getAcroFieldsSom {
  
#line 1105
  return acroFieldsSom_;
}


#line 1112
- (void)setAcroFieldsSomWithComItextpdfTextPdfXfaForm_AcroFieldsSearch:(ComItextpdfTextPdfXfaForm_AcroFieldsSearch *)acroFieldsSom {
  
#line 1113
  self->acroFieldsSom_ = acroFieldsSom;
}


#line 1120
- (id<OrgW3cDomNode>)getDatasetsNode {
  
#line 1121
  return datasetsNode_;
}


#line 1124
- (void)fillXfaFormWithJavaIoFile:(JavaIoFile *)file {
  
#line 1125
  [self fillXfaFormWithJavaIoFile:file withBoolean:NO];
}


#line 1127
- (void)fillXfaFormWithJavaIoFile:(JavaIoFile *)file
                      withBoolean:(jboolean)readOnly {
  
#line 1128
  [self fillXfaFormWithJavaIoInputStream:[[JavaIoFileInputStream alloc] initWithJavaIoFile:file] withBoolean:readOnly];
}


#line 1131
- (void)fillXfaFormWithJavaIoInputStream:(JavaIoInputStream *)is {
  
#line 1132
  [self fillXfaFormWithJavaIoInputStream:is withBoolean:NO];
}


#line 1134
- (void)fillXfaFormWithJavaIoInputStream:(JavaIoInputStream *)is
                             withBoolean:(jboolean)readOnly {
  
#line 1135
  [self fillXfaFormWithOrgXmlSaxInputSource:[[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:is] withBoolean:readOnly];
}


#line 1138
- (void)fillXfaFormWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)is {
  
#line 1139
  [self fillXfaFormWithOrgXmlSaxInputSource:is withBoolean:NO];
}


#line 1141
- (void)fillXfaFormWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)is
                                withBoolean:(jboolean)readOnly {
  
#line 1142
  JavaxXmlParsersDocumentBuilderFactory *dbf = [JavaxXmlParsersDocumentBuilderFactory newInstance];
  JavaxXmlParsersDocumentBuilder *db;
  @try {
    db = [((JavaxXmlParsersDocumentBuilderFactory *) nil_chk(dbf)) newDocumentBuilder];
    id<OrgW3cDomDocument> newdoc = [((JavaxXmlParsersDocumentBuilder *) nil_chk(db)) parseWithOrgXmlSaxInputSource:is];
    [self fillXfaFormWithOrgW3cDomNode:[((id<OrgW3cDomDocument>) nil_chk(newdoc)) getDocumentElement] withBoolean:readOnly];
  }
  @catch (
#line 1148
  JavaxXmlParsersParserConfigurationException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
  @catch (
#line 1150
  OrgXmlSaxSAXException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
}


#line 1155
- (void)fillXfaFormWithOrgW3cDomNode:(id<OrgW3cDomNode>)node {
  
#line 1156
  [self fillXfaFormWithOrgW3cDomNode:node withBoolean:NO];
}


#line 1162
- (void)fillXfaFormWithOrgW3cDomNode:(id<OrgW3cDomNode>)node
                         withBoolean:(jboolean)readOnly {
  
#line 1163
  if (readOnly) {
    id<OrgW3cDomNodeList> nodeList = [((id<OrgW3cDomDocument>) nil_chk(domDocument_)) getElementsByTagNameWithNSString:@"field"];
    for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk(nodeList)) getLength]; i++) {
      [((id<OrgW3cDomElement>) nil_chk(((id<OrgW3cDomElement>) check_protocol_cast([nodeList itemWithInt:i], @protocol(OrgW3cDomElement))))) setAttributeWithNSString:@"access" withNSString:@"readOnly"];
    }
  }
  id<OrgW3cDomNodeList> allChilds = [((id<OrgW3cDomNode>) nil_chk(datasetsNode_)) getChildNodes];
  jint len = [((id<OrgW3cDomNodeList>) nil_chk(allChilds)) getLength];
  id<OrgW3cDomNode> data = nil;
  for (jint k = 0; k < len; ++k) {
    id<OrgW3cDomNode> n = [allChilds itemWithInt:k];
    if ([((id<OrgW3cDomNode>) nil_chk(n)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE && [((NSString *) nil_chk([n getLocalName])) isEqual:@"data"] && [((NSString *) nil_chk(ComItextpdfTextPdfXfaForm_XFA_DATA_SCHEMA_)) isEqual:[n getNamespaceURI]]) {
      data = n;
      break;
    }
  }
  if (data == nil) {
    data = [((id<OrgW3cDomDocument>) nil_chk([datasetsNode_ getOwnerDocument])) createElementNSWithNSString:ComItextpdfTextPdfXfaForm_XFA_DATA_SCHEMA_ withNSString:@"xfa:data"];
    (void) [datasetsNode_ appendChildWithOrgW3cDomNode:data];
  }
  id<OrgW3cDomNodeList> list = [((id<OrgW3cDomNode>) nil_chk(data)) getChildNodes];
  if ([((id<OrgW3cDomNodeList>) nil_chk(list)) getLength] == 0) {
    (void) [data appendChildWithOrgW3cDomNode:[((id<OrgW3cDomDocument>) nil_chk(domDocument_)) importNodeWithOrgW3cDomNode:node withBoolean:YES]];
  }
  else {
    
#line 1190
    id<OrgW3cDomNode> firstNode = [self getFirstElementNodeWithOrgW3cDomNode:data];
    if (firstNode != nil)
#line 1192
    (void) [data replaceChildWithOrgW3cDomNode:[((id<OrgW3cDomDocument>) nil_chk(domDocument_)) importNodeWithOrgW3cDomNode:node withBoolean:YES] withOrgW3cDomNode:firstNode];
  }
  [self extractNodes];
  [self setChangedWithBoolean:YES];
}


#line 1198
- (id<OrgW3cDomNode>)getFirstElementNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)src {
  
#line 1199
  id<OrgW3cDomNode> result = nil;
  id<OrgW3cDomNodeList> list = [((id<OrgW3cDomNode>) nil_chk(src)) getChildNodes];
  for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk(list)) getLength]; i++) {
    if ([((id<OrgW3cDomNode>) nil_chk([list itemWithInt:i])) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
      result = [list itemWithInt:i];
      break;
    }
  }
  return result;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfXfaForm *)other {
  [super copyAllFieldsTo:other];
  other->acroFieldsSom_ = acroFieldsSom_;
  other->changed_ = changed_;
  other->datasetsNode_ = datasetsNode_;
  other->datasetsSom_ = datasetsSom_;
  other->domDocument_ = domDocument_;
  other->reader_ = reader_;
  other->templateNode_ = templateNode_;
  other->templateSom_ = templateSom_;
  other->xfaPresent_ = xfaPresent_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XfaForm", NULL, 0x1, NULL },
    { "getXfaObjectWithComItextpdfTextPdfPdfReader:", "getXfaObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x9, NULL },
    { "initWithComItextpdfTextPdfPdfReader:", "XfaForm", NULL, 0x1, "Ljava.io.IOException;Ljavax.xml.parsers.ParserConfigurationException;Lorg.xml.sax.SAXException;" },
    { "extractNodes", NULL, "V", 0x2, NULL },
    { "extractXFANodesWithOrgW3cDomDocument:", "extractXFANodes", "Ljava.util.Map;", 0x9, NULL },
    { "createDatasetsNodeWithOrgW3cDomNode:", "createDatasetsNode", "V", 0x2, NULL },
    { "setXfaWithComItextpdfTextPdfXfaForm:withComItextpdfTextPdfPdfReader:withComItextpdfTextPdfPdfWriter:", "setXfa", "V", 0x9, "Ljava.io.IOException;" },
    { "setXfaWithComItextpdfTextPdfPdfWriter:", "setXfa", "V", 0x1, "Ljava.io.IOException;" },
    { "serializeDocWithOrgW3cDomNode:", "serializeDoc", "[B", 0x9, "Ljava.io.IOException;" },
    { "isXfaPresent", NULL, "Z", 0x1, NULL },
    { "getDomDocument", NULL, "Lorg.w3c.dom.Document;", 0x1, NULL },
    { "findFieldNameWithNSString:withComItextpdfTextPdfAcroFields:", "findFieldName", "Ljava.lang.String;", 0x1, NULL },
    { "findDatasetsNameWithNSString:", "findDatasetsName", "Ljava.lang.String;", 0x1, NULL },
    { "findDatasetsNodeWithNSString:", "findDatasetsNode", "Lorg.w3c.dom.Node;", 0x1, NULL },
    { "getNodeTextWithOrgW3cDomNode:", "getNodeText", "Ljava.lang.String;", 0x9, NULL },
    { "getNodeTextWithOrgW3cDomNode:withNSString:", "getNodeText", "Ljava.lang.String;", 0xa, NULL },
    { "setNodeTextWithOrgW3cDomNode:withNSString:", "setNodeText", "V", 0x1, NULL },
    { "setXfaPresentWithBoolean:", "setXfaPresent", "V", 0x1, NULL },
    { "setDomDocumentWithOrgW3cDomDocument:", "setDomDocument", "V", 0x1, NULL },
    { "getReader", NULL, "Lcom.itextpdf.text.pdf.PdfReader;", 0x1, NULL },
    { "setReaderWithComItextpdfTextPdfPdfReader:", "setReader", "V", 0x1, NULL },
    { "isChanged", NULL, "Z", 0x1, NULL },
    { "setChangedWithBoolean:", "setChanged", "V", 0x1, NULL },
    { "getTemplateSom", NULL, "Lcom.itextpdf.text.pdf.XfaForm$Xml2SomTemplate;", 0x1, NULL },
    { "setTemplateSomWithComItextpdfTextPdfXfaForm_Xml2SomTemplate:", "setTemplateSom", "V", 0x1, NULL },
    { "getDatasetsSom", NULL, "Lcom.itextpdf.text.pdf.XfaForm$Xml2SomDatasets;", 0x1, NULL },
    { "setDatasetsSomWithComItextpdfTextPdfXfaForm_Xml2SomDatasets:", "setDatasetsSom", "V", 0x1, NULL },
    { "getAcroFieldsSom", NULL, "Lcom.itextpdf.text.pdf.XfaForm$AcroFieldsSearch;", 0x1, NULL },
    { "setAcroFieldsSomWithComItextpdfTextPdfXfaForm_AcroFieldsSearch:", "setAcroFieldsSom", "V", 0x1, NULL },
    { "getDatasetsNode", NULL, "Lorg.w3c.dom.Node;", 0x1, NULL },
    { "fillXfaFormWithJavaIoFile:", "fillXfaForm", "V", 0x1, "Ljava.io.IOException;" },
    { "fillXfaFormWithJavaIoFile:withBoolean:", "fillXfaForm", "V", 0x1, "Ljava.io.IOException;" },
    { "fillXfaFormWithJavaIoInputStream:", "fillXfaForm", "V", 0x1, "Ljava.io.IOException;" },
    { "fillXfaFormWithJavaIoInputStream:withBoolean:", "fillXfaForm", "V", 0x1, "Ljava.io.IOException;" },
    { "fillXfaFormWithOrgXmlSaxInputSource:", "fillXfaForm", "V", 0x1, "Ljava.io.IOException;" },
    { "fillXfaFormWithOrgXmlSaxInputSource:withBoolean:", "fillXfaForm", "V", 0x1, "Ljava.io.IOException;" },
    { "fillXfaFormWithOrgW3cDomNode:", "fillXfaForm", "V", 0x1, NULL },
    { "fillXfaFormWithOrgW3cDomNode:withBoolean:", "fillXfaForm", "V", 0x1, NULL },
    { "getFirstElementNodeWithOrgW3cDomNode:", "getFirstElementNode", "Lorg.w3c.dom.Node;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "templateSom_", NULL, 0x2, "Lcom.itextpdf.text.pdf.XfaForm$Xml2SomTemplate;", NULL,  },
    { "templateNode_", NULL, 0x2, "Lorg.w3c.dom.Node;", NULL,  },
    { "datasetsSom_", NULL, 0x2, "Lcom.itextpdf.text.pdf.XfaForm$Xml2SomDatasets;", NULL,  },
    { "datasetsNode_", NULL, 0x2, "Lorg.w3c.dom.Node;", NULL,  },
    { "acroFieldsSom_", NULL, 0x2, "Lcom.itextpdf.text.pdf.XfaForm$AcroFieldsSearch;", NULL,  },
    { "reader_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "xfaPresent_", NULL, 0x2, "Z", NULL,  },
    { "domDocument_", NULL, 0x2, "Lorg.w3c.dom.Document;", NULL,  },
    { "changed_", NULL, 0x2, "Z", NULL,  },
    { "XFA_DATA_SCHEMA_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfXfaForm_XFA_DATA_SCHEMA_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfXfaForm = { "XfaForm", "com.itextpdf.text.pdf", NULL, 0x1, 39, methods, 10, fields, 0, NULL};
  return &_ComItextpdfTextPdfXfaForm;
}

@end


#line 425
@implementation ComItextpdfTextPdfXfaForm_InverseStore


#line 434
- (NSString *)getDefaultName {
  
#line 435
  ComItextpdfTextPdfXfaForm_InverseStore *store = self;
  while (YES) {
    id obj = [((JavaUtilArrayList *) nil_chk(store->follow_)) getWithInt:0];
    if ([obj isKindOfClass:[NSString class]])
#line 439
    return (NSString *) check_class_cast(obj, [NSString class]);
    store = (ComItextpdfTextPdfXfaForm_InverseStore *) check_class_cast(obj, [ComItextpdfTextPdfXfaForm_InverseStore class]);
  }
}


#line 452
- (jboolean)isSimilarWithNSString:(NSString *)name {
  
#line 453
  jint idx = [((NSString *) nil_chk(name)) indexOf:'['];
  name = [name substring:0 endIndex:idx + 1];
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(part_)) size]; ++k) {
    if ([((NSString *) nil_chk([part_ getWithInt:k])) hasPrefix:name])
#line 457
    return YES;
  }
  return NO;
}

- (instancetype)init {
  if (self = [super init]) {
    part_ =
#line 426
    [[JavaUtilArrayList alloc] init];
    follow_ =
#line 427
    [[JavaUtilArrayList alloc] init];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfXfaForm_InverseStore *)other {
  [super copyAllFieldsTo:other];
  other->follow_ = follow_;
  other->part_ = part_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDefaultName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "isSimilarWithNSString:", "isSimilar", "Z", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "part_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "follow_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfXfaForm_InverseStore = { "InverseStore", "com.itextpdf.text.pdf", "XfaForm", 0x9, 3, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfXfaForm_InverseStore;
}

@end


#line 467
@implementation ComItextpdfTextPdfXfaForm_Stack2


#line 474
- (id)peek {
  
#line 475
  if ([self size] == 0)
#line 476
  @throw [[JavaUtilEmptyStackException alloc] init];
  return [self getWithInt:[self size] - 1];
}


#line 484
- (id)pop {
  
#line 485
  if ([self size] == 0)
#line 486
  @throw [[JavaUtilEmptyStackException alloc] init];
  id ret = [self getWithInt:[self size] - 1];
  (void) [self removeWithInt:[self size] - 1];
  return ret;
}


#line 497
- (id)pushWithId:(id)item {
  
#line 498
  [self addWithId:item];
  return item;
}


#line 506
- (jboolean)empty {
  
#line 507
  return [self size] == 0;
}

- (instancetype)init {
  return [super init];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "peek", NULL, "TT;", 0x1, NULL },
    { "pop", NULL, "TT;", 0x1, NULL },
    { "pushWithId:", "push", "TT;", 0x1, NULL },
    { "empty", NULL, "Z", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfTextPdfXfaForm_Stack2_serialVersionUID },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _ComItextpdfTextPdfXfaForm_Stack2 = { "Stack2", "com.itextpdf.text.pdf", "XfaForm", 0x9, 5, methods, 1, fields, 1, superclass_type_args};
  return &_ComItextpdfTextPdfXfaForm_Stack2;
}

@end


#line 514
@implementation ComItextpdfTextPdfXfaForm_Xml2Som


#line 541
+ (NSString *)escapeSomWithNSString:(NSString *)s {
  
#line 542
  if (s == nil)
#line 543
  return @"";
  jint idx = [((NSString *) nil_chk(s)) indexOf:'.'];
  if (idx < 0)
#line 546
  return s;
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  jint last = 0;
  while (idx >= 0) {
    (void) [sb appendWithNSString:[s substring:last endIndex:idx]];
    (void) [sb appendWithChar:'\\'];
    last = idx;
    idx = [s indexOf:'.' fromIndex:idx + 1];
  }
  (void) [sb appendWithNSString:[s substring:last]];
  return [sb description];
}


#line 564
+ (NSString *)unescapeSomWithNSString:(NSString *)s {
  
#line 565
  jint idx = [((NSString *) nil_chk(s)) indexOf:'\\'];
  if (idx < 0)
#line 567
  return s;
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  jint last = 0;
  while (idx >= 0) {
    (void) [sb appendWithNSString:[s substring:last endIndex:idx]];
    last = idx + 1;
    idx = [s indexOf:'\\' fromIndex:idx + 1];
  }
  (void) [sb appendWithNSString:[s substring:last]];
  return [sb description];
}


#line 584
- (NSString *)printStack {
  
#line 585
  if ([((ComItextpdfTextPdfXfaForm_Stack2 *) nil_chk(stack_)) empty])
#line 586
  return @"";
  JavaLangStringBuffer *s = [[JavaLangStringBuffer alloc] init];
  for (jint k = 0; k < [stack_ size]; ++k)
#line 589
  (void) [((JavaLangStringBuffer *) nil_chk([s appendWithChar:'.'])) appendWithNSString:[stack_ getWithInt:k]];
  return [s substringWithInt:1];
}


#line 598
+ (NSString *)getShortNameWithNSString:(NSString *)s {
  
#line 599
  jint idx = [((NSString *) nil_chk(s)) indexOfString:@".#subform["];
  if (idx < 0)
#line 601
  return s;
  jint last = 0;
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  while (idx >= 0) {
    (void) [sb appendWithNSString:[s substring:last endIndex:idx]];
    idx = [s indexOfString:@"]" fromIndex:idx + 10];
    if (idx < 0)
#line 608
    return [sb description];
    last = idx + 1;
    idx = [s indexOfString:@".#subform[" fromIndex:last];
  }
  (void) [sb appendWithNSString:[s substring:last]];
  return [sb description];
}

- (void)inverseSearchAddWithNSString:(NSString *)unstack {
  
#line 621
  [ComItextpdfTextPdfXfaForm_Xml2Som inverseSearchAddWithJavaUtilHashMap:inverseSearch_ withComItextpdfTextPdfXfaForm_Stack2:stack_ withNSString:unstack];
}


#line 630
+ (void)inverseSearchAddWithJavaUtilHashMap:(JavaUtilHashMap *)inverseSearch
       withComItextpdfTextPdfXfaForm_Stack2:(ComItextpdfTextPdfXfaForm_Stack2 *)stack
                               withNSString:(NSString *)unstack {
  
#line 631
  NSString *last = [((ComItextpdfTextPdfXfaForm_Stack2 *) nil_chk(stack)) peek];
  ComItextpdfTextPdfXfaForm_InverseStore *store = [((JavaUtilHashMap *) nil_chk(inverseSearch)) getWithId:last];
  if (store == nil) {
    store = [[ComItextpdfTextPdfXfaForm_InverseStore alloc] init];
    (void) [inverseSearch putWithId:last withId:store];
  }
  for (jint k = [stack size] - 2; k >= 0; --k) {
    last = [stack getWithInt:k];
    ComItextpdfTextPdfXfaForm_InverseStore *store2;
    jint idx = [((JavaUtilArrayList *) nil_chk(((ComItextpdfTextPdfXfaForm_InverseStore *) nil_chk(store))->part_)) indexOfWithId:last];
    if (idx < 0) {
      [store->part_ addWithId:last];
      store2 = [[ComItextpdfTextPdfXfaForm_InverseStore alloc] init];
      [((JavaUtilArrayList *) nil_chk(store->follow_)) addWithId:store2];
    }
    else
#line 647
    store2 = (ComItextpdfTextPdfXfaForm_InverseStore *) check_class_cast([((JavaUtilArrayList *) nil_chk(store->follow_)) getWithInt:idx], [ComItextpdfTextPdfXfaForm_InverseStore class]);
    store = store2;
  }
  [((JavaUtilArrayList *) nil_chk(((ComItextpdfTextPdfXfaForm_InverseStore *) nil_chk(store))->part_)) addWithId:@""];
  [((JavaUtilArrayList *) nil_chk(store->follow_)) addWithId:unstack];
}

- (NSString *)inverseSearchGlobalWithJavaUtilArrayList:(JavaUtilArrayList *)parts {
  
#line 660
  if ([((JavaUtilArrayList *) nil_chk(parts)) isEmpty])
#line 661
  return nil;
  ComItextpdfTextPdfXfaForm_InverseStore *store = [((JavaUtilHashMap *) nil_chk(inverseSearch_)) getWithId:[parts getWithInt:[parts size] - 1]];
  if (store == nil)
#line 664
  return nil;
  for (jint k = [parts size] - 2; k >= 0; --k) {
    NSString *part = [parts getWithInt:k];
    jint idx = [((JavaUtilArrayList *) nil_chk(((ComItextpdfTextPdfXfaForm_InverseStore *) nil_chk(store))->part_)) indexOfWithId:part];
    if (idx < 0) {
      if ([store isSimilarWithNSString:part])
#line 670
      return nil;
      return [store getDefaultName];
    }
    store = (ComItextpdfTextPdfXfaForm_InverseStore *) check_class_cast([((JavaUtilArrayList *) nil_chk(store->follow_)) getWithInt:idx], [ComItextpdfTextPdfXfaForm_InverseStore class]);
  }
  return [((ComItextpdfTextPdfXfaForm_InverseStore *) nil_chk(store)) getDefaultName];
}

+ (ComItextpdfTextPdfXfaForm_Stack2 *)splitPartsWithNSString:(NSString *)name {
  
#line 684
  while ([((NSString *) nil_chk(name)) hasPrefix:@"."])
#line 685
  name = [name substring:1];
  ComItextpdfTextPdfXfaForm_Stack2 *parts = [[ComItextpdfTextPdfXfaForm_Stack2 alloc] init];
  jint last = 0;
  jint pos = 0;
  NSString *part;
  while (YES) {
    pos = last;
    while (YES) {
      pos = [((NSString *) nil_chk(name)) indexOf:'.' fromIndex:pos];
      if (pos < 0)
#line 695
      break;
      if ([name charAtWithInt:pos - 1] == '\\')
#line 697
      ++pos;
      else
#line 699
      break;
    }
    if (pos < 0)
#line 702
    break;
    part = [((NSString *) nil_chk(name)) substring:last endIndex:pos];
    if (![((NSString *) nil_chk(part)) hasSuffix:@"]"])
#line 705
    part = JreStrcat("$$", part, @"[0]");
    [parts addWithId:part];
    last = pos + 1;
  }
  part = [((NSString *) nil_chk(name)) substring:last];
  if (![((NSString *) nil_chk(part)) hasSuffix:@"]"])
#line 711
  part = JreStrcat("$$", part, @"[0]");
  [parts addWithId:part];
  return parts;
}


#line 720
- (JavaUtilArrayList *)getOrder {
  
#line 721
  return order_;
}


#line 728
- (void)setOrderWithJavaUtilArrayList:(JavaUtilArrayList *)order {
  
#line 729
  self->order_ = order;
}


#line 736
- (JavaUtilHashMap *)getName2Node {
  
#line 737
  return name2Node_;
}


#line 744
- (void)setName2NodeWithJavaUtilHashMap:(JavaUtilHashMap *)name2Node {
  
#line 745
  self->name2Node_ = name2Node;
}


#line 752
- (JavaUtilHashMap *)getInverseSearch {
  
#line 753
  return inverseSearch_;
}


#line 760
- (void)setInverseSearchWithJavaUtilHashMap:(JavaUtilHashMap *)inverseSearch {
  
#line 761
  self->inverseSearch_ = inverseSearch;
}

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfXfaForm_Xml2Som *)other {
  [super copyAllFieldsTo:other];
  other->anform_ = anform_;
  other->inverseSearch_ = inverseSearch_;
  other->name2Node_ = name2Node_;
  other->order_ = order_;
  other->stack_ = stack_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "escapeSomWithNSString:", "escapeSom", "Ljava.lang.String;", 0x9, NULL },
    { "unescapeSomWithNSString:", "unescapeSom", "Ljava.lang.String;", 0x9, NULL },
    { "printStack", NULL, "Ljava.lang.String;", 0x4, NULL },
    { "getShortNameWithNSString:", "getShortName", "Ljava.lang.String;", 0x9, NULL },
    { "inverseSearchAddWithNSString:", "inverseSearchAdd", "V", 0x1, NULL },
    { "inverseSearchAddWithJavaUtilHashMap:withComItextpdfTextPdfXfaForm_Stack2:withNSString:", "inverseSearchAdd", "V", 0x9, NULL },
    { "inverseSearchGlobalWithJavaUtilArrayList:", "inverseSearchGlobal", "Ljava.lang.String;", 0x1, NULL },
    { "splitPartsWithNSString:", "splitParts", "Lcom.itextpdf.text.pdf.XfaForm$Stack2;", 0x9, NULL },
    { "getOrder", NULL, "Ljava.util.ArrayList;", 0x1, NULL },
    { "setOrderWithJavaUtilArrayList:", "setOrder", "V", 0x1, NULL },
    { "getName2Node", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "setName2NodeWithJavaUtilHashMap:", "setName2Node", "V", 0x1, NULL },
    { "getInverseSearch", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "setInverseSearchWithJavaUtilHashMap:", "setInverseSearch", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "order_", NULL, 0x4, "Ljava.util.ArrayList;", NULL,  },
    { "name2Node_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "inverseSearch_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "stack_", NULL, 0x4, "Lcom.itextpdf.text.pdf.XfaForm$Stack2;", NULL,  },
    { "anform_", NULL, 0x4, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfXfaForm_Xml2Som = { "Xml2Som", "com.itextpdf.text.pdf", "XfaForm", 0x9, 15, methods, 5, fields, 0, NULL};
  return &_ComItextpdfTextPdfXfaForm_Xml2Som;
}

@end


#line 768
@implementation ComItextpdfTextPdfXfaForm_Xml2SomDatasets


#line 774
- (instancetype)initWithOrgW3cDomNode:(id<OrgW3cDomNode>)n {
  if (self = [super init]) {
    
#line 775
    order_ = [[JavaUtilArrayList alloc] init];
    
#line 776
    name2Node_ = [[JavaUtilHashMap alloc] init];
    
#line 777
    stack_ = [[ComItextpdfTextPdfXfaForm_Stack2 alloc] init];
    
#line 778
    anform_ = 0;
    
#line 779
    inverseSearch_ = [[JavaUtilHashMap alloc] init];
    
#line 780
    [self processDatasetsInternalWithOrgW3cDomNode:n];
  }
  return self;
}


#line 789
- (id<OrgW3cDomNode>)insertNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)n
                                    withNSString:(NSString *)shortName {
  
#line 790
  ComItextpdfTextPdfXfaForm_Stack2 *stack = [ComItextpdfTextPdfXfaForm_Xml2Som splitPartsWithNSString:shortName];
  id<OrgW3cDomDocument> doc = [((id<OrgW3cDomNode>) nil_chk(n)) getOwnerDocument];
  id<OrgW3cDomNode> n2 = nil;
  n = [n getFirstChild];
  while ([((id<OrgW3cDomNode>) nil_chk(n)) getNodeType] != OrgW3cDomNode_ELEMENT_NODE)
#line 795
  n = [n getNextSibling];
  for (jint k = 0; k < [((ComItextpdfTextPdfXfaForm_Stack2 *) nil_chk(stack)) size]; ++k) {
    NSString *part = [stack getWithInt:k];
    jint idx = [((NSString *) nil_chk(part)) lastIndexOf:'['];
    NSString *name = [part substring:0 endIndex:idx];
    idx = [JavaLangInteger parseIntWithNSString:[part substring:idx + 1 endIndex:((jint) [part length]) - 1]];
    jint found = -1;
    for (n2 = [((id<OrgW3cDomNode>) nil_chk(n)) getFirstChild]; n2 != nil; n2 = [n2 getNextSibling]) {
      if ([((id<OrgW3cDomNode>) nil_chk(n2)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
        NSString *s = [ComItextpdfTextPdfXfaForm_Xml2Som escapeSomWithNSString:[n2 getLocalName]];
        if ([((NSString *) nil_chk(s)) isEqual:name]) {
          ++found;
          if (found == idx)
#line 808
          break;
        }
      }
    }
    for (; found < idx; ++found) {
      n2 = [((id<OrgW3cDomDocument>) nil_chk(doc)) createElementNSWithNSString:nil withNSString:name];
      n2 = [n appendChildWithOrgW3cDomNode:n2];
      id<OrgW3cDomNode> attr = [doc createAttributeNSWithNSString:ComItextpdfTextPdfXfaForm_get_XFA_DATA_SCHEMA_() withNSString:@"dataNode"];
      [((id<OrgW3cDomNode>) nil_chk(attr)) setNodeValueWithNSString:@"dataGroup"];
      (void) [((id<OrgW3cDomNamedNodeMap>) nil_chk([((id<OrgW3cDomNode>) nil_chk(n2)) getAttributes])) setNamedItemNSWithOrgW3cDomNode:attr];
    }
    n = n2;
  }
  [ComItextpdfTextPdfXfaForm_Xml2Som inverseSearchAddWithJavaUtilHashMap:inverseSearch_ withComItextpdfTextPdfXfaForm_Stack2:stack withNSString:shortName];
  (void) [((JavaUtilHashMap *) nil_chk(name2Node_)) putWithId:shortName withId:n2];
  [((JavaUtilArrayList *) nil_chk(order_)) addWithId:shortName];
  return n2;
}


#line 827
+ (jboolean)hasChildrenWithOrgW3cDomNode:(id<OrgW3cDomNode>)n {
  
#line 828
  id<OrgW3cDomNode> dataNodeN = [((id<OrgW3cDomNamedNodeMap>) nil_chk([((id<OrgW3cDomNode>) nil_chk(n)) getAttributes])) getNamedItemNSWithNSString:ComItextpdfTextPdfXfaForm_get_XFA_DATA_SCHEMA_() withNSString:@"dataNode"];
  if (dataNodeN != nil) {
    NSString *dataNode = [dataNodeN getNodeValue];
    if ([@"dataGroup" isEqual:dataNode])
#line 832
    return YES;
    else if ([@"dataValue" isEqual:dataNode])
#line 834
    return NO;
  }
  if (![n hasChildNodes])
#line 837
  return NO;
  id<OrgW3cDomNode> n2 = [n getFirstChild];
  while (n2 != nil) {
    if ([((id<OrgW3cDomNode>) nil_chk(n2)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
      return YES;
    }
    n2 = [n2 getNextSibling];
  }
  return NO;
}


#line 848
- (void)processDatasetsInternalWithOrgW3cDomNode:(id<OrgW3cDomNode>)n {
  
#line 849
  if (n != nil) {
    JavaUtilHashMap *ss = [[JavaUtilHashMap alloc] init];
    id<OrgW3cDomNode> n2 = [n getFirstChild];
    while (n2 != nil) {
      if ([((id<OrgW3cDomNode>) nil_chk(n2)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
        NSString *s = [ComItextpdfTextPdfXfaForm_Xml2Som escapeSomWithNSString:[n2 getLocalName]];
        JavaLangInteger *i = [ss getWithId:s];
        if (i == nil)
#line 857
        i = [JavaLangInteger valueOfWithInt:0];
        else
#line 859
        i = [JavaLangInteger valueOfWithInt:[i intValue] + 1];
        (void) [ss putWithId:s withId:i];
        if ([ComItextpdfTextPdfXfaForm_Xml2SomDatasets hasChildrenWithOrgW3cDomNode:n2]) {
          (void) [((ComItextpdfTextPdfXfaForm_Stack2 *) nil_chk(stack_)) pushWithId:JreStrcat("$C$C", s, '[', [((JavaLangInteger *) nil_chk(i)) description], ']')];
          [self processDatasetsInternalWithOrgW3cDomNode:n2];
          (void) [stack_ pop];
        }
        else {
          (void) [((ComItextpdfTextPdfXfaForm_Stack2 *) nil_chk(stack_)) pushWithId:JreStrcat("$C$C", s, '[', [((JavaLangInteger *) nil_chk(i)) description], ']')];
          NSString *unstack = [self printStack];
          [((JavaUtilArrayList *) nil_chk(order_)) addWithId:unstack];
          [self inverseSearchAddWithNSString:unstack];
          (void) [((JavaUtilHashMap *) nil_chk(name2Node_)) putWithId:unstack withId:n2];
          (void) [stack_ pop];
        }
      }
      n2 = [n2 getNextSibling];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgW3cDomNode:", "Xml2SomDatasets", NULL, 0x1, NULL },
    { "insertNodeWithOrgW3cDomNode:withNSString:", "insertNode", "Lorg.w3c.dom.Node;", 0x1, NULL },
    { "hasChildrenWithOrgW3cDomNode:", "hasChildren", "Z", 0xa, NULL },
    { "processDatasetsInternalWithOrgW3cDomNode:", "processDatasetsInternal", "V", 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfXfaForm_Xml2SomDatasets = { "Xml2SomDatasets", "com.itextpdf.text.pdf", "XfaForm", 0x9, 4, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfXfaForm_Xml2SomDatasets;
}

@end


#line 884
@implementation ComItextpdfTextPdfXfaForm_AcroFieldsSearch


#line 891
- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)items {
  if (self = [super init]) {
    
#line 892
    inverseSearch_ = [[JavaUtilHashMap alloc] init];
    
#line 893
    acroShort2LongName_ = [[JavaUtilHashMap alloc] init];
    
#line 894
    for (NSString * __strong string in nil_chk(items)) {
      NSString *itemName = string;
      NSString *itemShort = [ComItextpdfTextPdfXfaForm_Xml2Som getShortNameWithNSString:itemName];
      (void) [acroShort2LongName_ putWithId:itemShort withId:itemName];
      [ComItextpdfTextPdfXfaForm_Xml2Som inverseSearchAddWithJavaUtilHashMap:inverseSearch_ withComItextpdfTextPdfXfaForm_Stack2:[ComItextpdfTextPdfXfaForm_Xml2Som splitPartsWithNSString:itemShort] withNSString:itemName];
    }
  }
  return self;
}


#line 907
- (JavaUtilHashMap *)getAcroShort2LongName {
  
#line 908
  return acroShort2LongName_;
}


#line 916
- (void)setAcroShort2LongNameWithJavaUtilHashMap:(JavaUtilHashMap *)acroShort2LongName {
  
#line 917
  self->acroShort2LongName_ = acroShort2LongName;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfXfaForm_AcroFieldsSearch *)other {
  [super copyAllFieldsTo:other];
  other->acroShort2LongName_ = acroShort2LongName_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCollection:", "AcroFieldsSearch", NULL, 0x1, NULL },
    { "getAcroShort2LongName", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "setAcroShort2LongNameWithJavaUtilHashMap:", "setAcroShort2LongName", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "acroShort2LongName_", NULL, 0x2, "Ljava.util.HashMap;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfXfaForm_AcroFieldsSearch = { "AcroFieldsSearch", "com.itextpdf.text.pdf", "XfaForm", 0x9, 3, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfXfaForm_AcroFieldsSearch;
}

@end


#line 924
@implementation ComItextpdfTextPdfXfaForm_Xml2SomTemplate


#line 932
- (instancetype)initWithOrgW3cDomNode:(id<OrgW3cDomNode>)n {
  if (self = [super init]) {
    
#line 933
    order_ = [[JavaUtilArrayList alloc] init];
    
#line 934
    name2Node_ = [[JavaUtilHashMap alloc] init];
    
#line 935
    stack_ = [[ComItextpdfTextPdfXfaForm_Stack2 alloc] init];
    
#line 936
    anform_ = 0;
    
#line 937
    templateLevel_ = 0;
    
#line 938
    inverseSearch_ = [[JavaUtilHashMap alloc] init];
    
#line 939
    [self processTemplateWithOrgW3cDomNode:n withJavaUtilHashMap:nil];
  }
  return self;
}


#line 947
- (NSString *)getFieldTypeWithNSString:(NSString *)s {
  
#line 948
  id<OrgW3cDomNode> n = [((JavaUtilHashMap *) nil_chk(name2Node_)) getWithId:s];
  if (n == nil)
#line 950
  return nil;
  if ([@"exclGroup" isEqual:[((id<OrgW3cDomNode>) nil_chk(n)) getLocalName]])
#line 952
  return @"exclGroup";
  id<OrgW3cDomNode> ui = [n getFirstChild];
  while (ui != nil) {
    if ([((id<OrgW3cDomNode>) nil_chk(ui)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE && [@"ui" isEqual:[ui getLocalName]]) {
      break;
    }
    ui = [ui getNextSibling];
  }
  if (ui == nil)
#line 961
  return nil;
  id<OrgW3cDomNode> type = [((id<OrgW3cDomNode>) nil_chk(ui)) getFirstChild];
  while (type != nil) {
    if ([((id<OrgW3cDomNode>) nil_chk(type)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE && !([@"extras" isEqual:[type getLocalName]] && [@"picture" isEqual:[type getLocalName]])) {
      return [type getLocalName];
    }
    type = [type getNextSibling];
  }
  return nil;
}


#line 972
- (void)processTemplateWithOrgW3cDomNode:(id<OrgW3cDomNode>)n
                     withJavaUtilHashMap:(JavaUtilHashMap *)ff {
  
#line 973
  if (ff == nil)
#line 974
  ff = [[JavaUtilHashMap alloc] init];
  JavaUtilHashMap *ss = [[JavaUtilHashMap alloc] init];
  id<OrgW3cDomNode> n2 = [((id<OrgW3cDomNode>) nil_chk(n)) getFirstChild];
  while (n2 != nil) {
    if ([((id<OrgW3cDomNode>) nil_chk(n2)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
      NSString *s = [n2 getLocalName];
      if ([@"subform" isEqual:s]) {
        id<OrgW3cDomNode> name = [((id<OrgW3cDomNamedNodeMap>) nil_chk([n2 getAttributes])) getNamedItemWithNSString:@"name"];
        NSString *nn = @"#subform";
        jboolean annon = YES;
        if (name != nil) {
          nn = [ComItextpdfTextPdfXfaForm_Xml2Som escapeSomWithNSString:[name getNodeValue]];
          annon = NO;
        }
        JavaLangInteger *i;
        if (annon) {
          i = [JavaLangInteger valueOfWithInt:anform_];
          ++anform_;
        }
        else {
          i = [ss getWithId:nn];
          if (i == nil)
#line 996
          i = [JavaLangInteger valueOfWithInt:0];
          else
#line 998
          i = [JavaLangInteger valueOfWithInt:[i intValue] + 1];
          (void) [ss putWithId:nn withId:i];
        }
        (void) [((ComItextpdfTextPdfXfaForm_Stack2 *) nil_chk(stack_)) pushWithId:JreStrcat("$C$C", nn, '[', [((JavaLangInteger *) nil_chk(i)) description], ']')];
        ++templateLevel_;
        if (annon)
#line 1004
        [self processTemplateWithOrgW3cDomNode:n2 withJavaUtilHashMap:ff];
        else
#line 1006
        [self processTemplateWithOrgW3cDomNode:n2 withJavaUtilHashMap:nil];
        --templateLevel_;
        (void) [stack_ pop];
      }
      else if ([@"field" isEqual:s] || [@"exclGroup" isEqual:s]) {
        id<OrgW3cDomNode> name = [((id<OrgW3cDomNamedNodeMap>) nil_chk([n2 getAttributes])) getNamedItemWithNSString:@"name"];
        if (name != nil) {
          NSString *nn = [ComItextpdfTextPdfXfaForm_Xml2Som escapeSomWithNSString:[name getNodeValue]];
          JavaLangInteger *i = [((JavaUtilHashMap *) nil_chk(ff)) getWithId:nn];
          if (i == nil)
#line 1016
          i = [JavaLangInteger valueOfWithInt:0];
          else
#line 1018
          i = [JavaLangInteger valueOfWithInt:[i intValue] + 1];
          (void) [ff putWithId:nn withId:i];
          (void) [((ComItextpdfTextPdfXfaForm_Stack2 *) nil_chk(stack_)) pushWithId:JreStrcat("$C$C", nn, '[', [((JavaLangInteger *) nil_chk(i)) description], ']')];
          NSString *unstack = [self printStack];
          [((JavaUtilArrayList *) nil_chk(order_)) addWithId:unstack];
          [self inverseSearchAddWithNSString:unstack];
          (void) [((JavaUtilHashMap *) nil_chk(name2Node_)) putWithId:unstack withId:n2];
          (void) [stack_ pop];
        }
      }
      else if (!dynamicForm_ && templateLevel_ > 0 && [@"occur" isEqual:s]) {
        jint initial = 1;
        jint min = 1;
        jint max = 1;
        id<OrgW3cDomNode> a = [((id<OrgW3cDomNamedNodeMap>) nil_chk([n2 getAttributes])) getNamedItemWithNSString:@"initial"];
        if (a != nil)
#line 1034
        @try {
          
#line 1034
          initial = [JavaLangInteger parseIntWithNSString:[((NSString *) nil_chk([a getNodeValue])) trim]];
        }
        @catch (
#line 1034
        JavaLangException *e) {
        }
        
#line 1035
        a = [((id<OrgW3cDomNamedNodeMap>) nil_chk([n2 getAttributes])) getNamedItemWithNSString:@"min"];
        if (a != nil)
#line 1037
        @try {
          
#line 1037
          min = [JavaLangInteger parseIntWithNSString:[((NSString *) nil_chk([a getNodeValue])) trim]];
        }
        @catch (
#line 1037
        JavaLangException *e) {
        }
        
#line 1038
        a = [((id<OrgW3cDomNamedNodeMap>) nil_chk([n2 getAttributes])) getNamedItemWithNSString:@"max"];
        if (a != nil)
#line 1040
        @try {
          
#line 1040
          max = [JavaLangInteger parseIntWithNSString:[((NSString *) nil_chk([a getNodeValue])) trim]];
        }
        @catch (
#line 1040
        JavaLangException *e) {
        }
        
#line 1041
        if (initial != min || min != max)
#line 1042
        dynamicForm_ = YES;
      }
    }
    n2 = [n2 getNextSibling];
  }
}


#line 1055
- (jboolean)isDynamicForm {
  
#line 1056
  return dynamicForm_;
}


#line 1063
- (void)setDynamicFormWithBoolean:(jboolean)dynamicForm {
  
#line 1064
  self->dynamicForm_ = dynamicForm;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfXfaForm_Xml2SomTemplate *)other {
  [super copyAllFieldsTo:other];
  other->dynamicForm_ = dynamicForm_;
  other->templateLevel_ = templateLevel_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgW3cDomNode:", "Xml2SomTemplate", NULL, 0x1, NULL },
    { "getFieldTypeWithNSString:", "getFieldType", "Ljava.lang.String;", 0x1, NULL },
    { "processTemplateWithOrgW3cDomNode:withJavaUtilHashMap:", "processTemplate", "V", 0x2, NULL },
    { "isDynamicForm", NULL, "Z", 0x1, NULL },
    { "setDynamicFormWithBoolean:", "setDynamicForm", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dynamicForm_", NULL, 0x2, "Z", NULL,  },
    { "templateLevel_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfXfaForm_Xml2SomTemplate = { "Xml2SomTemplate", "com.itextpdf.text.pdf", "XfaForm", 0x9, 5, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfXfaForm_Xml2SomTemplate;
}

@end
