//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfVisibilityExpression.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfVisibilityExpression.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLayer.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfVisibilityExpression.h"
#include "java/lang/IllegalArgumentException.h"


#line 54
@implementation ComItextpdfTextPdfPdfVisibilityExpression


#line 67
- (instancetype)initWithInt:(jint)type {
  if (self =
#line 68
  [super init]) {
    
#line 69
    switch (type) {
      case ComItextpdfTextPdfPdfVisibilityExpression_OR:
      [super addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_OR_()];
      break;
      case ComItextpdfTextPdfPdfVisibilityExpression_AND:
      [super addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_AND_()];
      break;
      case ComItextpdfTextPdfPdfVisibilityExpression_NOT:
      [super addWithComItextpdfTextPdfPdfObject:ComItextpdfTextPdfPdfName_get_NOT_()];
      break;
      default:
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.ve.value" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
  }
  return self;
}


#line 88
- (void)addWithInt:(jint)index
withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)element {
  
#line 89
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.ve.value" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 96
- (jboolean)addWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 97
  if ([object isKindOfClass:[ComItextpdfTextPdfPdfLayer class]])
#line 98
  return [super addWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfLayer *) nil_chk(((ComItextpdfTextPdfPdfLayer *) check_class_cast(object, [ComItextpdfTextPdfPdfLayer class])))) getRef]];
  if ([object isKindOfClass:[ComItextpdfTextPdfPdfVisibilityExpression class]])
#line 100
  return [super addWithComItextpdfTextPdfPdfObject:object];
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.ve.value" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}

- (void)addFirstWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object {
  
#line 109
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.ve.value" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 116
- (jboolean)addWithFloatArray:(IOSFloatArray *)values {
  
#line 117
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.ve.value" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}


#line 124
- (jboolean)addWithIntArray:(IOSIntArray *)values {
  
#line 125
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"illegal.ve.value" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "PdfVisibilityExpression", NULL, 0x1, NULL },
    { "addWithInt:withComItextpdfTextPdfPdfObject:", "add", "V", 0x1, NULL },
    { "addWithComItextpdfTextPdfPdfObject:", "add", "Z", 0x1, NULL },
    { "addFirstWithComItextpdfTextPdfPdfObject:", "addFirst", "V", 0x1, NULL },
    { "addWithFloatArray:", "add", "Z", 0x1, NULL },
    { "addWithIntArray:", "add", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "OR_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfVisibilityExpression_OR },
    { "AND_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfVisibilityExpression_AND },
    { "NOT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextPdfPdfVisibilityExpression_NOT },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfVisibilityExpression = { "PdfVisibilityExpression", "com.itextpdf.text.pdf", NULL, 0x1, 6, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfPdfVisibilityExpression;
}

@end
