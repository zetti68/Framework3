//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/ContentByteUtils.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/ContentByteUtils.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/parser/ContentByteUtils.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/ListIterator.h"


#line 63
@implementation ComItextpdfTextPdfParserContentByteUtils


#line 64
- (instancetype)init {
  return [super init];
}


#line 75
+ (IOSByteArray *)getContentBytesFromContentObjectWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)contentObject {
  
#line 76
  IOSByteArray *result;
  {
    
#line 80
    ComItextpdfTextPdfPRIndirectReference *ref;
    ComItextpdfTextPdfPdfObject *directObject;
    
#line 85
    ComItextpdfTextPdfPRStream *stream;
    
#line 91
    JavaIoByteArrayOutputStream *allBytes;
    ComItextpdfTextPdfPdfArray *contentArray;
    id<JavaUtilListIterator> iter;
    
#line 103
    NSString *msg;
    
#line 77
    switch ([((ComItextpdfTextPdfPdfObject *) nil_chk(contentObject)) type]) {
      
#line 79
      case ComItextpdfTextPdfPdfObject_INDIRECT:
      ref = (ComItextpdfTextPdfPRIndirectReference *) check_class_cast(contentObject, [ComItextpdfTextPdfPRIndirectReference class]);
      directObject = [ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:ref];
      result = [ComItextpdfTextPdfParserContentByteUtils getContentBytesFromContentObjectWithComItextpdfTextPdfPdfObject:directObject];
      break;
      case ComItextpdfTextPdfPdfObject_STREAM:
      stream = (ComItextpdfTextPdfPRStream *) check_class_cast([ComItextpdfTextPdfPdfReader getPdfObjectReleaseWithComItextpdfTextPdfPdfObject:contentObject], [ComItextpdfTextPdfPRStream class]);
      result = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:stream];
      break;
      case ComItextpdfTextPdfPdfObject_ARRAY:
      
#line 91
      allBytes = [[JavaIoByteArrayOutputStream alloc] init];
      contentArray = (ComItextpdfTextPdfPdfArray *) check_class_cast(contentObject, [ComItextpdfTextPdfPdfArray class]);
      iter = [contentArray listIterator];
      while ([((id<JavaUtilListIterator>) nil_chk(iter)) hasNext]) {
        
#line 96
        ComItextpdfTextPdfPdfObject *element = [iter next];
        [allBytes writeWithByteArray:[ComItextpdfTextPdfParserContentByteUtils getContentBytesFromContentObjectWithComItextpdfTextPdfPdfObject:element]];
        [allBytes writeWithInt:(jbyte) ' '];
      }
      result = [allBytes toByteArray];
      break;
      default:
      msg = JreStrcat("$@", @"Unable to handle Content of type ", [contentObject getClass]);
      @throw [[JavaLangIllegalStateException alloc] initWithNSString:msg];
    }
  }
  
#line 106
  return result;
}


#line 117
+ (IOSByteArray *)getContentBytesForPageWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                                withInt:(jint)pageNum {
  
#line 118
  ComItextpdfTextPdfPdfDictionary *pageDictionary = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getPageNWithInt:pageNum];
  ComItextpdfTextPdfPdfObject *contentObject = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDictionary)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_CONTENTS_()];
  if (contentObject == nil)
#line 121
  return [IOSByteArray arrayWithLength:0];
  
#line 123
  IOSByteArray *contentBytes = [ComItextpdfTextPdfParserContentByteUtils getContentBytesFromContentObjectWithComItextpdfTextPdfPdfObject:contentObject];
  return contentBytes;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ContentByteUtils", NULL, 0x2, NULL },
    { "getContentBytesFromContentObjectWithComItextpdfTextPdfPdfObject:", "getContentBytesFromContentObject", "[B", 0x9, "Ljava.io.IOException;" },
    { "getContentBytesForPageWithComItextpdfTextPdfPdfReader:withInt:", "getContentBytesForPage", "[B", 0x9, "Ljava.io.IOException;" },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserContentByteUtils = { "ContentByteUtils", "com.itextpdf.text.pdf.parser", NULL, 0x1, 3, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserContentByteUtils;
}

@end
