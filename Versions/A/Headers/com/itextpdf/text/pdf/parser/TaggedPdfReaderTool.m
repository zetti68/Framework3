//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/TaggedPdfReaderTool.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/TaggedPdfReaderTool.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/parser/FilteredTextRenderListener.h"
#include "com/itextpdf/text/pdf/parser/MarkedContentRenderFilter.h"
#include "com/itextpdf/text/pdf/parser/PdfContentStreamProcessor.h"
#include "com/itextpdf/text/pdf/parser/RenderFilter.h"
#include "com/itextpdf/text/pdf/parser/SimpleTextExtractionStrategy.h"
#include "com/itextpdf/text/pdf/parser/TaggedPdfReaderTool.h"
#include "com/itextpdf/text/pdf/parser/TextExtractionStrategy.h"
#include "com/itextpdf/text/xml/XMLUtil.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"
#include "java/nio/charset/Charset.h"
#include "java/util/Set.h"


#line 68
@implementation ComItextpdfTextPdfParserTaggedPdfReaderTool


#line 86
- (void)convertToXmlWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                             withJavaIoOutputStream:(JavaIoOutputStream *)os
                                       withNSString:(NSString *)charset {
  
#line 88
  self->reader_ = reader;
  JavaIoOutputStreamWriter *outs = [[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:os withNSString:charset];
  out_ = [[JavaIoPrintWriter alloc] initWithJavaIoWriter:outs];
  
#line 92
  ComItextpdfTextPdfPdfDictionary *catalog = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getCatalog];
  ComItextpdfTextPdfPdfDictionary *struct_ = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(catalog)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_STRUCTTREEROOT_()];
  if (struct_ == nil)
#line 95
  @throw [[JavaIoIOException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"no.structtreeroot.found" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 97
  [self inspectChildWithComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(struct_)) getDirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()]];
  [out_ flush];
  [out_ close];
}


#line 111
- (void)convertToXmlWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                             withJavaIoOutputStream:(JavaIoOutputStream *)os {
  
#line 113
  [self convertToXmlWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os withNSString:[((JavaNioCharsetCharset *) nil_chk([JavaNioCharsetCharset defaultCharset])) name]];
}


#line 124
- (void)inspectChildWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)k {
  
#line 125
  if (k == nil)
#line 126
  return;
  if ([k isKindOfClass:[ComItextpdfTextPdfPdfArray class]])
#line 128
  [self inspectChildArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *) check_class_cast(k, [ComItextpdfTextPdfPdfArray class])];
  else if ([k isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]])
#line 130
  [self inspectChildDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(k, [ComItextpdfTextPdfPdfDictionary class])];
}


#line 140
- (void)inspectChildArrayWithComItextpdfTextPdfPdfArray:(ComItextpdfTextPdfPdfArray *)k {
  
#line 141
  if (k == nil)
#line 142
  return;
  for (jint i = 0; i < [((ComItextpdfTextPdfPdfArray *) nil_chk(k)) size]; i++) {
    [self inspectChildWithComItextpdfTextPdfPdfObject:[k getDirectObjectWithInt:i]];
  }
}


#line 155
- (void)inspectChildDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)k {
  
#line 156
  [self inspectChildDictionaryWithComItextpdfTextPdfPdfDictionary:k withBoolean:NO];
}


#line 167
- (void)inspectChildDictionaryWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)k
                                                      withBoolean:(jboolean)inspectAttributes {
  
#line 168
  if (k == nil)
#line 169
  return;
  ComItextpdfTextPdfPdfName *s = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(k)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_S_()];
  if (s != nil) {
    NSString *tagN = [ComItextpdfTextPdfPdfName decodeNameWithNSString:[s description]];
    NSString *tag = [ComItextpdfTextPdfParserTaggedPdfReaderTool fixTagNameWithNSString:tagN];
    [((JavaIoPrintWriter *) nil_chk(out_)) printWithNSString:@"<"];
    [out_ printWithNSString:tag];
    if (inspectAttributes) {
      ComItextpdfTextPdfPdfDictionary *a = [k getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_A_()];
      if (a != nil) {
        id<JavaUtilSet> keys = [a getKeys];
        for (ComItextpdfTextPdfPdfName * __strong key in nil_chk(keys)) {
          [out_ printWithChar:' '];
          ComItextpdfTextPdfPdfObject *value = [a getWithComItextpdfTextPdfPdfName:key];
          value = [ComItextpdfTextPdfPdfReader getPdfObjectWithComItextpdfTextPdfPdfObject:value];
          [out_ printWithNSString:[self xmlNameWithComItextpdfTextPdfPdfName:key]];
          [out_ printWithNSString:@"=\""];
          [out_ printWithNSString:[((ComItextpdfTextPdfPdfObject *) nil_chk(value)) description]];
          [out_ printWithNSString:@"\""];
        }
      }
    }
    [out_ printWithNSString:@">"];
    ComItextpdfTextPdfPdfDictionary *dict = [k getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()];
    if (dict != nil)
#line 194
    [self parseTagWithNSString:tagN withComItextpdfTextPdfPdfObject:[k getDirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()] withComItextpdfTextPdfPdfDictionary:dict];
    [self inspectChildWithComItextpdfTextPdfPdfObject:[k getDirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()]];
    [out_ printWithNSString:@"</"];
    [out_ printWithNSString:tag];
    [out_ printlnWithNSString:@">"];
  }
  else [self inspectChildWithComItextpdfTextPdfPdfObject:[k getDirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_K_()]];
}


#line 203
- (NSString *)xmlNameWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)name {
  
#line 204
  NSString *xmlName = [((NSString *) nil_chk([((ComItextpdfTextPdfPdfName *) nil_chk(name)) description])) replaceFirst:@"/" withReplacement:@""];
  xmlName = JreStrcat("C$", [JavaLangCharacter toLowerCaseWithChar:[((NSString *) nil_chk(xmlName)) charAtWithInt:0]],
#line 206
  [xmlName substring:1]);
  return xmlName;
}


#line 210
+ (NSString *)fixTagNameWithNSString:(NSString *)tag {
  
#line 211
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  for (jint k = 0; k < ((jint) [((NSString *) nil_chk(tag)) length]); ++k) {
    jchar c = [tag charAtWithInt:k];
    jboolean nameStart =
#line 215
    c == ':' ||
#line 216
    (c >= 'A' && c <= 'Z') ||
#line 217
    c == '_' ||
#line 218
    (c >= 'a' && c <= 'z') ||
#line 219
    (c >= 0x00c0 && c <= 0x00d6) ||
#line 220
    (c >= 0x00d8 && c <= 0x00f6) ||
#line 221
    (c >= 0x00f8 && c <= 0x02ff) ||
#line 222
    (c >= 0x0370 && c <= 0x037d) ||
#line 223
    (c >= 0x037f && c <= 0x1fff) ||
#line 224
    (c >= 0x200c && c <= 0x200d) ||
#line 225
    (c >= 0x2070 && c <= 0x218f) ||
#line 226
    (c >= 0x2c00 && c <= 0x2fef) ||
#line 227
    (c >= 0x3001 && c <= 0xd7ff) ||
#line 228
    (c >= 0xf900 && c <= 0xfdcf) ||
#line 229
    (c >= 0xfdf0 && c <= 0xfffd);
    jboolean nameMiddle =
#line 231
    c == '-' ||
#line 232
    c == '.' ||
#line 233
    (c >= '0' && c <= '9') ||
#line 234
    c == 0x00b7 ||
#line 235
    (c >= 0x0300 && c <= 0x036f) ||
#line 236
    (c >= 0x203f && c <= 0x2040) ||
#line 237
    nameStart;
    if (k == 0) {
      if (!nameStart)
#line 240
      c = '_';
    }
    else {
      if (!nameMiddle)
#line 244
      c = '-';
    }
    (void) [sb appendWithChar:c];
  }
  return [sb description];
}


#line 262
- (void)parseTagWithNSString:(NSString *)tag
withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)object
withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)page {
  
#line 265
  if ([object isKindOfClass:[ComItextpdfTextPdfPdfNumber class]]) {
    ComItextpdfTextPdfPdfNumber *mcid = (ComItextpdfTextPdfPdfNumber *) check_class_cast(object, [ComItextpdfTextPdfPdfNumber class]);
    ComItextpdfTextPdfParserRenderFilter *filter = [[ComItextpdfTextPdfParserMarkedContentRenderFilter alloc] initWithInt:[((ComItextpdfTextPdfPdfNumber *) nil_chk(mcid)) intValue]];
    id<ComItextpdfTextPdfParserTextExtractionStrategy> strategy = [[ComItextpdfTextPdfParserSimpleTextExtractionStrategy alloc] init];
    ComItextpdfTextPdfParserFilteredTextRenderListener *listener = [[ComItextpdfTextPdfParserFilteredTextRenderListener alloc] initWithComItextpdfTextPdfParserTextExtractionStrategy:
#line 270
    strategy withComItextpdfTextPdfParserRenderFilterArray:[IOSObjectArray arrayWithObjects:(id[]){ filter } count:1 type:[IOSClass classWithClass:[ComItextpdfTextPdfParserRenderFilter class]]]];
    ComItextpdfTextPdfParserPdfContentStreamProcessor *processor = [[ComItextpdfTextPdfParserPdfContentStreamProcessor alloc] initWithComItextpdfTextPdfParserRenderListener:
#line 272
    listener];
    [processor processContentWithByteArray:[ComItextpdfTextPdfPdfReader getPageContentWithComItextpdfTextPdfPdfDictionary:page] withComItextpdfTextPdfPdfDictionary:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(page)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()]];
    
#line 275
    [((JavaIoPrintWriter *) nil_chk(out_)) printWithNSString:[ComItextpdfTextXmlXMLUtil escapeXMLWithNSString:[listener getResultantText] withBoolean:YES]];
  }
  else
#line 279
  if ([object isKindOfClass:[ComItextpdfTextPdfPdfArray class]]) {
    ComItextpdfTextPdfPdfArray *arr = (ComItextpdfTextPdfPdfArray *) check_class_cast(object, [ComItextpdfTextPdfPdfArray class]);
    jint n = [((ComItextpdfTextPdfPdfArray *) nil_chk(arr)) size];
    for (jint i = 0; i < n; i++) {
      [self parseTagWithNSString:tag withComItextpdfTextPdfPdfObject:[arr getPdfObjectWithInt:i] withComItextpdfTextPdfPdfDictionary:page];
      if (i < n - 1)
#line 285
      [((JavaIoPrintWriter *) nil_chk(out_)) println];
    }
  }
  else
#line 290
  if ([object isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]]) {
    ComItextpdfTextPdfPdfDictionary *mcr = (ComItextpdfTextPdfPdfDictionary *) check_class_cast(object, [ComItextpdfTextPdfPdfDictionary class]);
    [self parseTagWithNSString:tag withComItextpdfTextPdfPdfObject:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(mcr)) getDirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MCID_()] withComItextpdfTextPdfPdfDictionary:[mcr getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_PG_()]];
  }
}

- (instancetype)init {
  return [super init];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserTaggedPdfReaderTool *)other {
  [super copyAllFieldsTo:other];
  other->out_ = out_;
  other->reader_ = reader_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertToXmlWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withNSString:", "convertToXml", "V", 0x1, "Ljava.io.IOException;" },
    { "convertToXmlWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:", "convertToXml", "V", 0x1, "Ljava.io.IOException;" },
    { "inspectChildWithComItextpdfTextPdfPdfObject:", "inspectChild", "V", 0x1, "Ljava.io.IOException;" },
    { "inspectChildArrayWithComItextpdfTextPdfPdfArray:", "inspectChildArray", "V", 0x1, "Ljava.io.IOException;" },
    { "inspectChildDictionaryWithComItextpdfTextPdfPdfDictionary:", "inspectChildDictionary", "V", 0x1, "Ljava.io.IOException;" },
    { "inspectChildDictionaryWithComItextpdfTextPdfPdfDictionary:withBoolean:", "inspectChildDictionary", "V", 0x1, "Ljava.io.IOException;" },
    { "xmlNameWithComItextpdfTextPdfPdfName:", "xmlName", "Ljava.lang.String;", 0x4, NULL },
    { "fixTagNameWithNSString:", "fixTagName", "Ljava.lang.String;", 0xa, NULL },
    { "parseTagWithNSString:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "parseTag", "V", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfReader;", NULL,  },
    { "out_", NULL, 0x4, "Ljava.io.PrintWriter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserTaggedPdfReaderTool = { "TaggedPdfReaderTool", "com.itextpdf.text.pdf.parser", NULL, 0x1, 10, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserTaggedPdfReaderTool;
}

@end
