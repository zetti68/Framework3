//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/LocationTextExtractionStrategy.java
//

#ifndef _ComItextpdfTextPdfParserLocationTextExtractionStrategy_H_
#define _ComItextpdfTextPdfParserLocationTextExtractionStrategy_H_

@class ComItextpdfTextPdfParserImageRenderInfo;
@class ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk;
@class ComItextpdfTextPdfParserTextRenderInfo;
@class ComItextpdfTextPdfParserVector;
@protocol ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunkFilter;
@protocol JavaUtilList;

#import "JreEmulation.h"
#include "com/itextpdf/text/pdf/parser/TextExtractionStrategy.h"
#include "java/lang/Comparable.h"

@interface ComItextpdfTextPdfParserLocationTextExtractionStrategy : NSObject < ComItextpdfTextPdfParserTextExtractionStrategy > {
 @public
  id<JavaUtilList> locationalResult_;
}

- (instancetype)init;

- (void)beginTextBlock;

- (void)endTextBlock;

- (jboolean)startsWithSpaceWithNSString:(NSString *)str;

- (jboolean)endsWithSpaceWithNSString:(NSString *)str;

- (id<JavaUtilList>)filterTextChunksWithJavaUtilList:(id<JavaUtilList>)textChunks
withComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunkFilter:(id<ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunkFilter>)filter;

- (jboolean)isChunkAtWordBoundaryWithComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk:(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk *)chunk
                                 withComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk:(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk *)previousChunk;

- (NSString *)getResultantTextWithComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunkFilter:(id<ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunkFilter>)chunkFilter;

- (NSString *)getResultantText;

- (void)dumpState;

- (void)renderTextWithComItextpdfTextPdfParserTextRenderInfo:(ComItextpdfTextPdfParserTextRenderInfo *)renderInfo;

- (void)renderImageWithComItextpdfTextPdfParserImageRenderInfo:(ComItextpdfTextPdfParserImageRenderInfo *)renderInfo;

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserLocationTextExtractionStrategy *)other;

@end

__attribute__((always_inline)) inline void ComItextpdfTextPdfParserLocationTextExtractionStrategy_init() {}

J2OBJC_FIELD_SETTER(ComItextpdfTextPdfParserLocationTextExtractionStrategy, locationalResult_, id<JavaUtilList>)

FOUNDATION_EXPORT jboolean ComItextpdfTextPdfParserLocationTextExtractionStrategy_DUMP_STATE_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextPdfParserLocationTextExtractionStrategy, DUMP_STATE_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(ComItextpdfTextPdfParserLocationTextExtractionStrategy, DUMP_STATE_, jboolean)

@interface ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk : NSObject < JavaLangComparable > {
 @public
  NSString *text_;
  ComItextpdfTextPdfParserVector *startLocation_;
  ComItextpdfTextPdfParserVector *endLocation_;
  ComItextpdfTextPdfParserVector *orientationVector_;
  jint orientationMagnitude_;
  jint distPerpendicular_;
  jfloat distParallelStart_;
  jfloat distParallelEnd_;
  jfloat charSpaceWidth_;
}

- (instancetype)initWithNSString:(NSString *)string
withComItextpdfTextPdfParserVector:(ComItextpdfTextPdfParserVector *)startLocation
withComItextpdfTextPdfParserVector:(ComItextpdfTextPdfParserVector *)endLocation
                       withFloat:(jfloat)charSpaceWidth;

- (ComItextpdfTextPdfParserVector *)getStartLocation;

- (ComItextpdfTextPdfParserVector *)getEndLocation;

- (NSString *)getText;

- (jfloat)getCharSpaceWidth;

- (void)printDiagnostics;

- (jboolean)sameLineWithComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk:(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk *)as;

- (jfloat)distanceFromEndOfWithComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk:(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk *)other;

- (jint)compareToWithId:(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk *)rhs;

+ (jint)compareIntsWithInt:(jint)int1
                   withInt:(jint)int2;

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk *)other;

@end

__attribute__((always_inline)) inline void ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk_init() {}

J2OBJC_FIELD_SETTER(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk, text_, NSString *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk, startLocation_, ComItextpdfTextPdfParserVector *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk, endLocation_, ComItextpdfTextPdfParserVector *)
J2OBJC_FIELD_SETTER(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk, orientationVector_, ComItextpdfTextPdfParserVector *)

@protocol ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunkFilter < NSObject, JavaObject >

- (jboolean)acceptWithComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk:(ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunk *)textChunk;

@end

__attribute__((always_inline)) inline void ComItextpdfTextPdfParserLocationTextExtractionStrategy_TextChunkFilter_init() {}

#endif // _ComItextpdfTextPdfParserLocationTextExtractionStrategy_H_
