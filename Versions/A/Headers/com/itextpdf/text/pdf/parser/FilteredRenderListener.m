//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/FilteredRenderListener.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/FilteredRenderListener.java"

#include "IOSObjectArray.h"
#include "com/itextpdf/text/pdf/parser/FilteredRenderListener.h"
#include "com/itextpdf/text/pdf/parser/ImageRenderInfo.h"
#include "com/itextpdf/text/pdf/parser/RenderFilter.h"
#include "com/itextpdf/text/pdf/parser/RenderListener.h"
#include "com/itextpdf/text/pdf/parser/TextRenderInfo.h"


#line 52
@implementation ComItextpdfTextPdfParserFilteredRenderListener


#line 64
- (instancetype)initWithComItextpdfTextPdfParserRenderListener:(id<ComItextpdfTextPdfParserRenderListener>)delegate
                 withComItextpdfTextPdfParserRenderFilterArray:(IOSObjectArray *)filters {
  if (self = [super init]) {
    
#line 65
    self->delegate_ = delegate;
    
#line 66
    self->filters_ = filters;
  }
  return self;
}


#line 74
- (void)renderTextWithComItextpdfTextPdfParserTextRenderInfo:(ComItextpdfTextPdfParserTextRenderInfo *)renderInfo {
  {
    IOSObjectArray *a__ =
#line 75
    filters_;
    ComItextpdfTextPdfParserRenderFilter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComItextpdfTextPdfParserRenderFilter * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComItextpdfTextPdfParserRenderFilter *filter = *b__++;
      
#line 76
      if (![((ComItextpdfTextPdfParserRenderFilter *) nil_chk(filter)) allowTextWithComItextpdfTextPdfParserTextRenderInfo:renderInfo])
#line 77
      return;
    }
  }
  
#line 79
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(delegate_)) renderTextWithComItextpdfTextPdfParserTextRenderInfo:renderInfo];
}


#line 86
- (void)beginTextBlock {
  
#line 87
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(delegate_)) beginTextBlock];
}


#line 94
- (void)endTextBlock {
  
#line 95
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(delegate_)) endTextBlock];
}


#line 103
- (void)renderImageWithComItextpdfTextPdfParserImageRenderInfo:(ComItextpdfTextPdfParserImageRenderInfo *)renderInfo {
  {
    IOSObjectArray *a__ =
#line 104
    filters_;
    ComItextpdfTextPdfParserRenderFilter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ComItextpdfTextPdfParserRenderFilter * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ComItextpdfTextPdfParserRenderFilter *filter = *b__++;
      
#line 105
      if (![((ComItextpdfTextPdfParserRenderFilter *) nil_chk(filter)) allowImageWithComItextpdfTextPdfParserImageRenderInfo:renderInfo])
#line 106
      return;
    }
  }
  
#line 108
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(delegate_)) renderImageWithComItextpdfTextPdfParserImageRenderInfo:renderInfo];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserFilteredRenderListener *)other {
  [super copyAllFieldsTo:other];
  other->delegate_ = delegate_;
  other->filters_ = filters_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfParserRenderListener:withComItextpdfTextPdfParserRenderFilterArray:", "FilteredRenderListener", NULL, 0x81, NULL },
    { "renderTextWithComItextpdfTextPdfParserTextRenderInfo:", "renderText", "V", 0x1, NULL },
    { "beginTextBlock", NULL, "V", 0x1, NULL },
    { "endTextBlock", NULL, "V", 0x1, NULL },
    { "renderImageWithComItextpdfTextPdfParserImageRenderInfo:", "renderImage", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.RenderListener;", NULL,  },
    { "filters_", NULL, 0x12, "[Lcom.itextpdf.text.pdf.parser.RenderFilter;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserFilteredRenderListener = { "FilteredRenderListener", "com.itextpdf.text.pdf.parser", NULL, 0x1, 5, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserFilteredRenderListener;
}

@end
