//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/PdfImageObject.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/PdfImageObject.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/Version.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/exceptions/UnsupportedPdfException.h"
#include "com/itextpdf/text/pdf/FilterHandlers.h"
#include "com/itextpdf/text/pdf/PRStream.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/codec/PngWriter.h"
#include "com/itextpdf/text/pdf/codec/TIFFConstants.h"
#include "com/itextpdf/text/pdf/codec/TiffWriter.h"
#include "com/itextpdf/text/pdf/parser/PdfImageObject.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"


#line 72
@implementation ComItextpdfTextPdfParserPdfImageObject


#line 151
- (NSString *)getFileType {
  
#line 152
  return [((ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum *) nil_chk(streamContentType_)) getFileExtension];
}


#line 158
- (ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum *)getImageBytesType {
  
#line 159
  return streamContentType_;
}


#line 169
- (instancetype)initWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream {
  return
#line 170
  [self initComItextpdfTextPdfParserPdfImageObjectWithComItextpdfTextPdfPdfDictionary:stream withByteArray:[ComItextpdfTextPdfPdfReader getStreamBytesRawWithComItextpdfTextPdfPRStream:stream] withComItextpdfTextPdfPdfDictionary:nil];
}


#line 182
- (instancetype)initWithComItextpdfTextPdfPRStream:(ComItextpdfTextPdfPRStream *)stream
               withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic {
  return
#line 183
  [self initComItextpdfTextPdfParserPdfImageObjectWithComItextpdfTextPdfPdfDictionary:stream withByteArray:[ComItextpdfTextPdfPdfReader getStreamBytesRawWithComItextpdfTextPdfPRStream:stream] withComItextpdfTextPdfPdfDictionary:colorSpaceDic];
}


#line 198
- (instancetype)initComItextpdfTextPdfParserPdfImageObjectWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dictionary
                                                                                withByteArray:(IOSByteArray *)samples
                                                          withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic {
  if (self = [super init]) {
    pngColorType_ =
#line 137
    -1;
    streamContentType_ =
#line 149
    nil;
    
#line 200
    self->dictionary_ = dictionary;
    
#line 201
    self->colorSpaceDic_ = colorSpaceDic;
    
#line 202
    ComItextpdfTextPdfParserPdfImageObject_TrackingFilter *trackingFilter = [[ComItextpdfTextPdfParserPdfImageObject_TrackingFilter alloc] init];
    
#line 203
    id<JavaUtilMap> handlers = [[JavaUtilHashMap alloc] initWithJavaUtilMap:
#line 204
    [ComItextpdfTextPdfFilterHandlers getDefaultFilterHandlers]];
    
#line 205
    (void) [handlers putWithId:ComItextpdfTextPdfPdfName_get_JBIG2DECODE_() withId:trackingFilter];
    
#line 206
    (void) [handlers putWithId:ComItextpdfTextPdfPdfName_get_DCTDECODE_() withId:trackingFilter];
    
#line 207
    (void) [handlers putWithId:ComItextpdfTextPdfPdfName_get_JPXDECODE_() withId:trackingFilter];
    
#line 209
    imageBytes_ = [ComItextpdfTextPdfPdfReader decodeBytesWithByteArray:samples withComItextpdfTextPdfPdfDictionary:dictionary withJavaUtilMap:handlers];
    
#line 211
    if (trackingFilter->lastFilterName_ != nil) {
      if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_JBIG2DECODE_())) isEqual:trackingFilter->lastFilterName_])
#line 213
      streamContentType_ = ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_get_JBIG2();
      else if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_DCTDECODE_())) isEqual:trackingFilter->lastFilterName_])
#line 215
      streamContentType_ = ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_get_JPG();
      else if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_JPXDECODE_())) isEqual:trackingFilter->lastFilterName_])
#line 217
      streamContentType_ = ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_get_JP2();
    }
    else {
      
#line 219
      [self decodeImageBytes];
    }
  }
  return self;
}

- (instancetype)initWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dictionary
                                          withByteArray:(IOSByteArray *)samples
                    withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic {
  return [self initComItextpdfTextPdfParserPdfImageObjectWithComItextpdfTextPdfPdfDictionary:
#line 198
dictionary withByteArray:samples withComItextpdfTextPdfPdfDictionary:colorSpaceDic];
}


#line 230
- (ComItextpdfTextPdfPdfObject *)getWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 231
  return [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dictionary_)) getWithComItextpdfTextPdfPdfName:key];
}


#line 239
- (ComItextpdfTextPdfPdfDictionary *)getDictionary {
  
#line 240
  return dictionary_;
}


#line 254
- (void)findColorspaceWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)colorspace
                                          withBoolean:(jboolean)allowIndexed {
  
#line 255
  if (colorspace == nil && bpc_ == 1) {
    stride_ = (width_ * bpc_ + 7) / 8;
    pngColorType_ = 0;
  }
  else
#line 258
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_DEVICEGRAY_())) isEqual:colorspace]) {
    stride_ = (width_ * bpc_ + 7) / 8;
    pngColorType_ = 0;
  }
  else
#line 261
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_DEVICERGB_())) isEqual:colorspace]) {
    if (bpc_ == 8 || bpc_ == 16) {
      stride_ = (width_ * bpc_ * 3 + 7) / 8;
      pngColorType_ = 2;
    }
  }
  else
#line 266
  if ([colorspace isKindOfClass:[ComItextpdfTextPdfPdfArray class]]) {
    ComItextpdfTextPdfPdfArray *ca = (ComItextpdfTextPdfPdfArray *) check_class_cast(colorspace, [ComItextpdfTextPdfPdfArray class]);
    ComItextpdfTextPdfPdfObject *tyca = [((ComItextpdfTextPdfPdfArray *) nil_chk(ca)) getDirectObjectWithInt:0];
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CALGRAY_())) isEqual:tyca]) {
      stride_ = (width_ * bpc_ + 7) / 8;
      pngColorType_ = 0;
    }
    else
#line 272
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_CALRGB_())) isEqual:tyca]) {
      if (bpc_ == 8 || bpc_ == 16) {
        stride_ = (width_ * bpc_ * 3 + 7) / 8;
        pngColorType_ = 2;
      }
    }
    else
#line 277
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_ICCBASED_())) isEqual:tyca]) {
      ComItextpdfTextPdfPRStream *pr = (ComItextpdfTextPdfPRStream *) check_class_cast([ca getDirectObjectWithInt:1], [ComItextpdfTextPdfPRStream class]);
      jint n = [((ComItextpdfTextPdfPdfNumber *) nil_chk([((ComItextpdfTextPdfPRStream *) nil_chk(pr)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_()])) intValue];
      if (n == 1) {
        stride_ = (width_ * bpc_ + 7) / 8;
        pngColorType_ = 0;
        icc_ = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:pr];
      }
      else
#line 284
      if (n == 3) {
        stride_ = (width_ * bpc_ * 3 + 7) / 8;
        pngColorType_ = 2;
        icc_ = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:pr];
      }
    }
    else
#line 289
    if (allowIndexed && [((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_INDEXED_())) isEqual:tyca]) {
      [self findColorspaceWithComItextpdfTextPdfPdfObject:[ca getDirectObjectWithInt:1] withBoolean:NO];
      if (pngColorType_ == 2) {
        ComItextpdfTextPdfPdfObject *id2 = [ca getDirectObjectWithInt:3];
        if ([id2 isKindOfClass:[ComItextpdfTextPdfPdfString class]]) {
          palette_ = [((ComItextpdfTextPdfPdfString *) nil_chk(((ComItextpdfTextPdfPdfString *) check_class_cast(id2, [ComItextpdfTextPdfPdfString class])))) getBytes];
        }
        else
#line 295
        if ([id2 isKindOfClass:[ComItextpdfTextPdfPRStream class]]) {
          palette_ = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:((ComItextpdfTextPdfPRStream *) check_class_cast(id2, [ComItextpdfTextPdfPRStream class]))];
        }
        stride_ = (width_ * bpc_ + 7) / 8;
        pngColorType_ = 3;
      }
    }
  }
}


#line 312
- (void)decodeImageBytes {
  
#line 313
  if (streamContentType_ != nil)
#line 314
  @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 315
  @"Decoding.can't.happen.on.this.type.of.stream.(.1.)" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ streamContentType_ } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 317
  pngColorType_ = -1;
  ComItextpdfTextPdfPdfArray *decode = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(dictionary_)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DECODE_()];
  width_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk([dictionary_ getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIDTH_()])) intValue];
  height_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk([dictionary_ getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HEIGHT_()])) intValue];
  bpc_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk([dictionary_ getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_()])) intValue];
  pngBitDepth_ = bpc_;
  ComItextpdfTextPdfPdfObject *colorspace = [dictionary_ getDirectObjectWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_()];
  if ([colorspace isKindOfClass:[ComItextpdfTextPdfPdfName class]] && colorSpaceDic_ != nil) {
    ComItextpdfTextPdfPdfObject *csLookup = [colorSpaceDic_ getDirectObjectWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *) check_class_cast(colorspace, [ComItextpdfTextPdfPdfName class])];
    if (csLookup != nil)
#line 327
    colorspace = csLookup;
  }
  
#line 330
  palette_ = nil;
  icc_ = nil;
  stride_ = 0;
  [self findColorspaceWithComItextpdfTextPdfPdfObject:colorspace withBoolean:YES];
  JavaIoByteArrayOutputStream *ms = [[JavaIoByteArrayOutputStream alloc] init];
  if (pngColorType_ < 0) {
    if (bpc_ != 8)
#line 337
    @throw [[ComItextpdfTextExceptionsUnsupportedPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 338
    @"the.color.depth.1.is.not.supported" withInt:bpc_]];
    
#line 340
    if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_DEVICECMYK_())) isEqual:colorspace]) {
    }
    else
#line 341
    if ([colorspace isKindOfClass:[ComItextpdfTextPdfPdfArray class]]) {
      ComItextpdfTextPdfPdfArray *ca = (ComItextpdfTextPdfPdfArray *) check_class_cast(colorspace, [ComItextpdfTextPdfPdfArray class]);
      ComItextpdfTextPdfPdfObject *tyca = [((ComItextpdfTextPdfPdfArray *) nil_chk(ca)) getDirectObjectWithInt:0];
      if (![((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_ICCBASED_())) isEqual:tyca])
#line 345
      @throw [[ComItextpdfTextExceptionsUnsupportedPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 346
      @"the.color.space.1.is.not.supported" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ colorspace } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
      ComItextpdfTextPdfPRStream *pr = (ComItextpdfTextPdfPRStream *) check_class_cast([ca getDirectObjectWithInt:1], [ComItextpdfTextPdfPRStream class]);
      jint n = [((ComItextpdfTextPdfPdfNumber *) nil_chk([((ComItextpdfTextPdfPRStream *) nil_chk(pr)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_N_()])) intValue];
      if (n != 4) {
        @throw [[ComItextpdfTextExceptionsUnsupportedPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 351
        @"N.value.1.is.not.supported" withInt:n]];
      }
      icc_ = [ComItextpdfTextPdfPdfReader getStreamBytesWithComItextpdfTextPdfPRStream:pr];
    }
    else @throw [[ComItextpdfTextExceptionsUnsupportedPdfException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:
#line 356
    @"the.color.space.1.is.not.supported" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ colorspace } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    stride_ = 4 * width_;
    ComItextpdfTextPdfCodecTiffWriter *wr = [[ComItextpdfTextPdfCodecTiffWriter alloc] init];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldShort alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_SAMPLESPERPIXEL withInt:4]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldShort alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_BITSPERSAMPLE withIntArray:[IOSIntArray arrayWithInts:(jint[]){ 8, 8,
#line 361
    8, 8 } count:4]]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldShort alloc] initWithInt:
#line 363
    ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_PHOTOMETRIC withInt:ComItextpdfTextPdfCodecTIFFConstants_PHOTOMETRIC_SEPARATED]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldLong alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_IMAGEWIDTH withInt:width_]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldLong alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_IMAGELENGTH withInt:height_]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldShort alloc] initWithInt:
#line 367
    ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_COMPRESSION withInt:ComItextpdfTextPdfCodecTIFFConstants_COMPRESSION_LZW]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldShort alloc] initWithInt:
#line 369
    ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_PREDICTOR withInt:ComItextpdfTextPdfCodecTIFFConstants_PREDICTOR_HORIZONTAL_DIFFERENCING]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldLong alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP withInt:height_]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldRational alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_XRESOLUTION withIntArray:[IOSIntArray arrayWithInts:(jint[]){ 300,
#line 372
    1 } count:2]]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldRational alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_YRESOLUTION withIntArray:[IOSIntArray arrayWithInts:(jint[]){ 300,
#line 374
    1 } count:2]]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldShort alloc] initWithInt:
#line 376
    ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT withInt:ComItextpdfTextPdfCodecTIFFConstants_RESUNIT_INCH]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldAscii alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_SOFTWARE withNSString:[((ComItextpdfTextVersion *) nil_chk([ComItextpdfTextVersion getInstance])) getVersion]]];
    
#line 379
    JavaIoByteArrayOutputStream *comp = [[JavaIoByteArrayOutputStream alloc] init];
    [ComItextpdfTextPdfCodecTiffWriter compressLZWWithJavaIoOutputStream:comp withInt:2 withByteArray:imageBytes_ withInt:height_ withInt:4 withInt:stride_];
    IOSByteArray *buf = [comp toByteArray];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldImage alloc] initWithByteArray:buf]];
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldLong alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_STRIPBYTECOUNTS withInt:((IOSByteArray *) nil_chk(buf))->size_]];
    if (icc_ != nil)
#line 385
    [wr addFieldWithComItextpdfTextPdfCodecTiffWriter_FieldBase:[[ComItextpdfTextPdfCodecTiffWriter_FieldUndefined alloc] initWithInt:ComItextpdfTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE withByteArray:icc_]];
    [wr writeFileWithJavaIoOutputStream:ms];
    streamContentType_ = ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_get_CCITT();
    imageBytes_ = [ms toByteArray];
    return;
  }
  else {
    
#line 391
    ComItextpdfTextPdfCodecPngWriter *png = [[ComItextpdfTextPdfCodecPngWriter alloc] initWithJavaIoOutputStream:ms];
    if (decode != nil) {
      if (pngBitDepth_ == 1) {
        
#line 395
        if ([((ComItextpdfTextPdfPdfNumber *) nil_chk([decode getAsNumberWithInt:0])) intValue] == 1 && [((ComItextpdfTextPdfPdfNumber *) nil_chk([decode getAsNumberWithInt:1])) intValue] == 0) {
          jint len = ((IOSByteArray *) nil_chk(imageBytes_))->size_;
          for (jint t = 0; t < len; ++t) {
            *IOSByteArray_GetRef(imageBytes_, t) ^= (jint) 0xff;
          }
        }
        else {
        }
      }
      else {
      }
    }
    
#line 409
    [png writeHeaderWithInt:width_ withInt:height_ withInt:pngBitDepth_ withInt:pngColorType_];
    if (icc_ != nil)
#line 411
    [png writeIccProfileWithByteArray:icc_];
    if (palette_ != nil)
#line 413
    [png writePaletteWithByteArray:palette_];
    [png writeDataWithByteArray:imageBytes_ withInt:stride_];
    [png writeEnd];
    streamContentType_ = ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_get_PNG();
    imageBytes_ = [ms toByteArray];
  }
}


#line 427
- (IOSByteArray *)getImageAsBytes {
  
#line 428
  return imageBytes_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserPdfImageObject *)other {
  [super copyAllFieldsTo:other];
  other->bpc_ = bpc_;
  other->colorSpaceDic_ = colorSpaceDic_;
  other->dictionary_ = dictionary_;
  other->height_ = height_;
  other->icc_ = icc_;
  other->imageBytes_ = imageBytes_;
  other->palette_ = palette_;
  other->pngBitDepth_ = pngBitDepth_;
  other->pngColorType_ = pngColorType_;
  other->streamContentType_ = streamContentType_;
  other->stride_ = stride_;
  other->width_ = width_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFileType", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getImageBytesType", NULL, "Lcom.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType;", 0x1, NULL },
    { "initWithComItextpdfTextPdfPRStream:", "PdfImageObject", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithComItextpdfTextPdfPRStream:withComItextpdfTextPdfPdfDictionary:", "PdfImageObject", NULL, 0x1, "Ljava.io.IOException;" },
    { "initWithComItextpdfTextPdfPdfDictionary:withByteArray:withComItextpdfTextPdfPdfDictionary:", "PdfImageObject", NULL, 0x4, "Ljava.io.IOException;" },
    { "getWithComItextpdfTextPdfPdfName:", "get", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "getDictionary", NULL, "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x1, NULL },
    { "findColorspaceWithComItextpdfTextPdfPdfObject:withBoolean:", "findColorspace", "V", 0x2, "Ljava.io.IOException;" },
    { "decodeImageBytes", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "getImageAsBytes", NULL, "[B", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dictionary_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "imageBytes_", NULL, 0x2, "[B", NULL,  },
    { "colorSpaceDic_", NULL, 0x2, "Lcom.itextpdf.text.pdf.PdfDictionary;", NULL,  },
    { "pngColorType_", NULL, 0x2, "I", NULL,  },
    { "pngBitDepth_", NULL, 0x2, "I", NULL,  },
    { "width_", NULL, 0x2, "I", NULL,  },
    { "height_", NULL, 0x2, "I", NULL,  },
    { "bpc_", NULL, 0x2, "I", NULL,  },
    { "palette_", NULL, 0x2, "[B", NULL,  },
    { "icc_", NULL, 0x2, "[B", NULL,  },
    { "stride_", NULL, 0x2, "I", NULL,  },
    { "streamContentType_", NULL, 0x2, "Lcom.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfImageObject = { "PdfImageObject", "com.itextpdf.text.pdf.parser", NULL, 0x1, 10, methods, 12, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfImageObject;
}

@end

#line 80

BOOL ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_initialized = NO;

ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum *ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_values_[5];

@implementation ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum


#line 99
- (instancetype)initWithNSString:(NSString *)fileExtension
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  if (self = [super initWithNSString:__name withInt:__ordinal]) {
    
#line 100
    self->fileExtension_ = fileExtension;
  }
  return self;
}


#line 106
- (NSString *)getFileExtension {
  
#line 107
  return fileExtension_;
}

FOUNDATION_EXPORT IOSObjectArray *ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_values() {
  return [IOSObjectArray arrayWithObjects:ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_values_ count:5 type:[IOSClass classWithClass:[ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum class]]];
}
+ (IOSObjectArray *)values {
  return ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_values();
}

+ (ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum *)valueOfWithNSString:(NSString *)name {
  return ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_valueOfWithNSString_(name);
}

ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum *ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_valueOfWithNSString_(NSString *name) {
  for (int i = 0; i < 5; i++) {
    ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum *e = ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum class]) {
    ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_PNG = [[ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum alloc] initWithNSString:
#line 81
    @"png" withNSString:@"PNG" withInt:0];
    ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_JPG = [[ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum alloc] initWithNSString:
#line 82
    @"jpg" withNSString:@"JPG" withInt:1];
    ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_JP2 = [[ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum alloc] initWithNSString:
#line 83
    @"jp2" withNSString:@"JP2" withInt:2];
    ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_CCITT = [[ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum alloc] initWithNSString:
#line 84
    @"tif" withNSString:@"CCITT" withInt:3];
    ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_JBIG2 = [[ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum alloc] initWithNSString:
#line 85
    @"jbig2" withNSString:@"JBIG2" withInt:4];
    ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withInt:", "ImageBytesType", NULL, 0x2, NULL },
    { "getFileExtension", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PNG", "PNG", 0x4019, "Lcom.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType;", &ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_PNG,  },
    { "JPG", "JPG", 0x4019, "Lcom.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType;", &ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_JPG,  },
    { "JP2", "JP2", 0x4019, "Lcom.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType;", &ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_JP2,  },
    { "CCITT", "CCITT", 0x4019, "Lcom.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType;", &ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_CCITT,  },
    { "JBIG2", "JBIG2", 0x4019, "Lcom.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType;", &ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum_JBIG2,  },
    { "fileExtension_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.itextpdf.text.pdf.parser.PdfImageObject$ImageBytesType;"};
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum = { "ImageBytesType", "com.itextpdf.text.pdf.parser", "PdfImageObject", 0x4019, 2, methods, 6, fields, 1, superclass_type_args};
  return &_ComItextpdfTextPdfParserPdfImageObject_ImageBytesTypeEnum;
}

@end


#line 117
@implementation ComItextpdfTextPdfParserPdfImageObject_TrackingFilter


#line 120
- (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)b
        withComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)filterName
      withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)decodeParams
  withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)streamDictionary {
  
#line 122
  lastFilterName_ = filterName;
  return b;
}

- (instancetype)init {
  if (self = [super init]) {
    lastFilterName_ =
#line 118
    nil;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserPdfImageObject_TrackingFilter *)other {
  [super copyAllFieldsTo:other];
  other->lastFilterName_ = lastFilterName_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decodeWithByteArray:withComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:withComItextpdfTextPdfPdfDictionary:", "decode", "[B", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lastFilterName_", NULL, 0x1, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfImageObject_TrackingFilter = { "TrackingFilter", "com.itextpdf.text.pdf.parser", "PdfImageObject", 0xa, 2, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfImageObject_TrackingFilter;
}

@end
