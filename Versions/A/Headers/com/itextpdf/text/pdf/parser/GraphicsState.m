//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/GraphicsState.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/GraphicsState.java"

#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/pdf/CMapAwareDocumentFont.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/parser/GraphicsState.h"
#include "com/itextpdf/text/pdf/parser/Matrix.h"


#line 55
@implementation ComItextpdfTextPdfParserGraphicsState


#line 88
- (instancetype)init {
  if (self = [super init]) {
    
#line 89
    ctm_ = [[ComItextpdfTextPdfParserMatrix alloc] init];
    
#line 90
    characterSpacing_ = 0;
    
#line 91
    wordSpacing_ = 0;
    
#line 92
    horizontalScaling_ = 1.0f;
    
#line 93
    leading_ = 0;
    
#line 94
    font_ = nil;
    
#line 95
    fontSize_ = 0;
    
#line 96
    renderMode_ = 0;
    
#line 97
    rise_ = 0;
    
#line 98
    knockout_ = YES;
    
#line 99
    colorSpaceFill_ = nil;
    
#line 100
    colorSpaceStroke_ = nil;
    
#line 101
    fillColor_ = nil;
    
#line 102
    strokeColor_ = nil;
  }
  return self;
}


#line 109
- (instancetype)initWithComItextpdfTextPdfParserGraphicsState:(ComItextpdfTextPdfParserGraphicsState *)source {
  if (self = [super init]) {
    
#line 112
    ctm_ = ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(source))->ctm_;
    
#line 113
    characterSpacing_ = source->characterSpacing_;
    
#line 114
    wordSpacing_ = source->wordSpacing_;
    
#line 115
    horizontalScaling_ = source->horizontalScaling_;
    
#line 116
    leading_ = source->leading_;
    
#line 117
    font_ = source->font_;
    
#line 118
    fontSize_ = source->fontSize_;
    
#line 119
    renderMode_ = source->renderMode_;
    
#line 120
    rise_ = source->rise_;
    
#line 121
    knockout_ = source->knockout_;
    
#line 122
    colorSpaceFill_ = source->colorSpaceFill_;
    
#line 123
    colorSpaceStroke_ = source->colorSpaceStroke_;
    
#line 124
    fillColor_ = source->fillColor_;
    
#line 125
    strokeColor_ = source->strokeColor_;
  }
  return self;
}


#line 133
- (ComItextpdfTextPdfParserMatrix *)getCtm {
  
#line 134
  return ctm_;
}


#line 142
- (jfloat)getCharacterSpacing {
  
#line 143
  return characterSpacing_;
}


#line 151
- (jfloat)getWordSpacing {
  
#line 152
  return wordSpacing_;
}


#line 160
- (jfloat)getHorizontalScaling {
  
#line 161
  return horizontalScaling_;
}


#line 169
- (jfloat)getLeading {
  
#line 170
  return leading_;
}


#line 178
- (ComItextpdfTextPdfCMapAwareDocumentFont *)getFont {
  
#line 179
  return font_;
}


#line 187
- (jfloat)getFontSize {
  
#line 188
  return fontSize_;
}


#line 196
- (jint)getRenderMode {
  
#line 197
  return renderMode_;
}


#line 205
- (jfloat)getRise {
  
#line 206
  return rise_;
}


#line 214
- (jboolean)isKnockout {
  
#line 215
  return knockout_;
}


#line 221
- (ComItextpdfTextPdfPdfName *)getColorSpaceFill {
  
#line 222
  return colorSpaceFill_;
}


#line 228
- (ComItextpdfTextPdfPdfName *)getColorSpaceStroke {
  
#line 229
  return colorSpaceStroke_;
}


#line 236
- (ComItextpdfTextBaseColor *)getFillColor {
  
#line 237
  return fillColor_;
}


#line 244
- (ComItextpdfTextBaseColor *)getStrokeColor {
  
#line 245
  return strokeColor_;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserGraphicsState *)other {
  [super copyAllFieldsTo:other];
  other->characterSpacing_ = characterSpacing_;
  other->colorSpaceFill_ = colorSpaceFill_;
  other->colorSpaceStroke_ = colorSpaceStroke_;
  other->ctm_ = ctm_;
  other->fillColor_ = fillColor_;
  other->font_ = font_;
  other->fontSize_ = fontSize_;
  other->horizontalScaling_ = horizontalScaling_;
  other->knockout_ = knockout_;
  other->leading_ = leading_;
  other->renderMode_ = renderMode_;
  other->rise_ = rise_;
  other->strokeColor_ = strokeColor_;
  other->wordSpacing_ = wordSpacing_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GraphicsState", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfParserGraphicsState:", "GraphicsState", NULL, 0x1, NULL },
    { "getCtm", NULL, "Lcom.itextpdf.text.pdf.parser.Matrix;", 0x1, NULL },
    { "getCharacterSpacing", NULL, "F", 0x1, NULL },
    { "getWordSpacing", NULL, "F", 0x1, NULL },
    { "getHorizontalScaling", NULL, "F", 0x1, NULL },
    { "getLeading", NULL, "F", 0x1, NULL },
    { "getFont", NULL, "Lcom.itextpdf.text.pdf.CMapAwareDocumentFont;", 0x1, NULL },
    { "getFontSize", NULL, "F", 0x1, NULL },
    { "getRenderMode", NULL, "I", 0x1, NULL },
    { "getRise", NULL, "F", 0x1, NULL },
    { "isKnockout", NULL, "Z", 0x1, NULL },
    { "getColorSpaceFill", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "getColorSpaceStroke", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "getFillColor", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
    { "getStrokeColor", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ctm_", NULL, 0x0, "Lcom.itextpdf.text.pdf.parser.Matrix;", NULL,  },
    { "characterSpacing_", NULL, 0x0, "F", NULL,  },
    { "wordSpacing_", NULL, 0x0, "F", NULL,  },
    { "horizontalScaling_", NULL, 0x0, "F", NULL,  },
    { "leading_", NULL, 0x0, "F", NULL,  },
    { "font_", NULL, 0x0, "Lcom.itextpdf.text.pdf.CMapAwareDocumentFont;", NULL,  },
    { "fontSize_", NULL, 0x0, "F", NULL,  },
    { "renderMode_", NULL, 0x0, "I", NULL,  },
    { "rise_", NULL, 0x0, "F", NULL,  },
    { "knockout_", NULL, 0x0, "Z", NULL,  },
    { "colorSpaceFill_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "colorSpaceStroke_", NULL, 0x0, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "fillColor_", NULL, 0x0, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "strokeColor_", NULL, 0x0, "Lcom.itextpdf.text.BaseColor;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserGraphicsState = { "GraphicsState", "com.itextpdf.text.pdf.parser", NULL, 0x1, 16, methods, 14, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserGraphicsState;
}

@end
