//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/MultiFilteredRenderListener.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/MultiFilteredRenderListener.java"

#include "IOSObjectArray.h"
#include "com/itextpdf/text/pdf/parser/ImageRenderInfo.h"
#include "com/itextpdf/text/pdf/parser/MultiFilteredRenderListener.h"
#include "com/itextpdf/text/pdf/parser/RenderFilter.h"
#include "com/itextpdf/text/pdf/parser/RenderListener.h"
#include "com/itextpdf/text/pdf/parser/TextRenderInfo.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


#line 50
@implementation ComItextpdfTextPdfParserMultiFilteredRenderListener


#line 55
- (instancetype)init {
  if (self = [super init]) {
    
#line 56
    delegates_ = [[JavaUtilArrayList alloc] init];
    
#line 57
    filters_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}


#line 65
- (id)attachRenderListenerWithComItextpdfTextPdfParserRenderListener:(id<ComItextpdfTextPdfParserRenderListener>)delegate
                       withComItextpdfTextPdfParserRenderFilterArray:(IOSObjectArray *)filterSet {
  
#line 66
  [((id<JavaUtilList>) nil_chk(delegates_)) addWithId:delegate];
  [((id<JavaUtilList>) nil_chk(filters_)) addWithId:filterSet];
  
#line 69
  return delegate;
}


#line 72
- (void)beginTextBlock {
  
#line 73
  for (id<ComItextpdfTextPdfParserRenderListener> __strong delegate in nil_chk(delegates_)) {
    [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(delegate)) beginTextBlock];
  }
}


#line 78
- (void)renderTextWithComItextpdfTextPdfParserTextRenderInfo:(ComItextpdfTextPdfParserTextRenderInfo *)renderInfo {
  
#line 79
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(delegates_)) size]; i++) {
    jboolean filtersPassed = YES;
    {
      IOSObjectArray *a__ =
#line 81
      [((id<JavaUtilList>) nil_chk(filters_)) getWithInt:i];
      ComItextpdfTextPdfParserRenderFilter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ComItextpdfTextPdfParserRenderFilter * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComItextpdfTextPdfParserRenderFilter *filter = *b__++;
        
#line 82
        if (![((ComItextpdfTextPdfParserRenderFilter *) nil_chk(filter)) allowTextWithComItextpdfTextPdfParserTextRenderInfo:renderInfo]) {
          filtersPassed = NO;
          break;
        }
      }
    }
    
#line 87
    if (filtersPassed)
#line 88
    [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk([delegates_ getWithInt:i])) renderTextWithComItextpdfTextPdfParserTextRenderInfo:renderInfo];
  }
}


#line 92
- (void)endTextBlock {
  
#line 93
  for (id<ComItextpdfTextPdfParserRenderListener> __strong delegate in nil_chk(delegates_)) {
    [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(delegate)) endTextBlock];
  }
}


#line 98
- (void)renderImageWithComItextpdfTextPdfParserImageRenderInfo:(ComItextpdfTextPdfParserImageRenderInfo *)renderInfo {
  
#line 99
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(delegates_)) size]; i++) {
    jboolean filtersPassed = YES;
    {
      IOSObjectArray *a__ =
#line 101
      [((id<JavaUtilList>) nil_chk(filters_)) getWithInt:i];
      ComItextpdfTextPdfParserRenderFilter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      ComItextpdfTextPdfParserRenderFilter * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ComItextpdfTextPdfParserRenderFilter *filter = *b__++;
        
#line 102
        if (![((ComItextpdfTextPdfParserRenderFilter *) nil_chk(filter)) allowImageWithComItextpdfTextPdfParserImageRenderInfo:renderInfo]) {
          filtersPassed = NO;
          break;
        }
      }
    }
    
#line 107
    if (filtersPassed)
#line 108
    [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk([delegates_ getWithInt:i])) renderImageWithComItextpdfTextPdfParserImageRenderInfo:renderInfo];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserMultiFilteredRenderListener *)other {
  [super copyAllFieldsTo:other];
  other->delegates_ = delegates_;
  other->filters_ = filters_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "MultiFilteredRenderListener", NULL, 0x1, NULL },
    { "attachRenderListenerWithComItextpdfTextPdfParserRenderListener:withComItextpdfTextPdfParserRenderFilterArray:", "attachRenderListener", "TE;", 0x81, NULL },
    { "beginTextBlock", NULL, "V", 0x1, NULL },
    { "renderTextWithComItextpdfTextPdfParserTextRenderInfo:", "renderText", "V", 0x1, NULL },
    { "endTextBlock", NULL, "V", 0x1, NULL },
    { "renderImageWithComItextpdfTextPdfParserImageRenderInfo:", "renderImage", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "delegates_", NULL, 0x12, "Ljava.util.List;", NULL,  },
    { "filters_", NULL, 0x12, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserMultiFilteredRenderListener = { "MultiFilteredRenderListener", "com.itextpdf.text.pdf.parser", NULL, 0x1, 6, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserMultiFilteredRenderListener;
}

@end
