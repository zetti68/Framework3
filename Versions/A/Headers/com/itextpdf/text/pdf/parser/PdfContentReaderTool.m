//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/PdfContentReaderTool.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/PdfContentReaderTool.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/parser/ContentByteUtils.h"
#include "com/itextpdf/text/pdf/parser/LocationTextExtractionStrategy.h"
#include "com/itextpdf/text/pdf/parser/PdfContentReaderTool.h"
#include "com/itextpdf/text/pdf/parser/PdfTextExtractor.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Set.h"


#line 67
@implementation ComItextpdfTextPdfParserPdfContentReaderTool


#line 75
+ (NSString *)getDictionaryDetailWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic {
  
#line 76
  return [ComItextpdfTextPdfParserPdfContentReaderTool getDictionaryDetailWithComItextpdfTextPdfPdfDictionary:dic withInt:0];
}


#line 85
+ (NSString *)getDictionaryDetailWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dic
                                                             withInt:(jint)depth {
  
#line 86
  JavaLangStringBuffer *builder = [[JavaLangStringBuffer alloc] init];
  (void) [builder appendWithChar:'('];
  id<JavaUtilList> subDictionaries = [[JavaUtilArrayList alloc] init];
  for (ComItextpdfTextPdfPdfName * __strong key in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(dic)) getKeys])) {
    ComItextpdfTextPdfPdfObject *val = [dic getDirectObjectWithComItextpdfTextPdfPdfName:key];
    if ([((ComItextpdfTextPdfPdfObject *) nil_chk(val)) isDictionary])
#line 92
    [subDictionaries addWithId:key];
    (void) [builder appendWithId:key];
    (void) [builder appendWithChar:'='];
    (void) [builder appendWithId:val];
    (void) [builder appendWithNSString:@", "];
  }
  if ([builder sequenceLength] >= 2)
#line 99
  [builder setLengthWithInt:[builder sequenceLength] - 2];
  (void) [builder appendWithChar:')'];
  for (ComItextpdfTextPdfPdfName * __strong pdfSubDictionaryName in subDictionaries) {
    (void) [builder appendWithChar:0x000a];
    for (jint i = 0; i < depth + 1; i++) {
      (void) [builder appendWithChar:0x0009];
    }
    (void) [builder appendWithNSString:@"Subdictionary "];
    (void) [builder appendWithId:pdfSubDictionaryName];
    (void) [builder appendWithNSString:@" = "];
    (void) [builder appendWithNSString:[ComItextpdfTextPdfParserPdfContentReaderTool getDictionaryDetailWithComItextpdfTextPdfPdfDictionary:[dic getAsDictWithComItextpdfTextPdfPdfName:pdfSubDictionaryName] withInt:depth + 1]];
  }
  return [builder description];
}


#line 121
+ (NSString *)getXObjectDetailWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)resourceDic {
  
#line 122
  JavaLangStringBuilder *sb = [[JavaLangStringBuilder alloc] init];
  
#line 124
  ComItextpdfTextPdfPdfDictionary *xobjects = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(resourceDic)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XOBJECT_()];
  if (xobjects == nil)
#line 126
  return @"No XObjects";
  for (ComItextpdfTextPdfPdfName * __strong entryName in nil_chk([((ComItextpdfTextPdfPdfDictionary *) nil_chk(xobjects)) getKeys])) {
    ComItextpdfTextPdfPdfStream *xobjectStream = [xobjects getAsStreamWithComItextpdfTextPdfPdfName:entryName];
    
#line 130
    (void) [sb appendWithNSString:JreStrcat("$@$@$@$", @"------ ", entryName, @" - subtype = ", [((ComItextpdfTextPdfPdfStream *) nil_chk(xobjectStream)) getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()], @" = ", [xobjectStream getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LENGTH_()], @" bytes ------\n")];
    
#line 132
    if (![((ComItextpdfTextPdfPdfObject *) nil_chk([xobjectStream getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()])) isEqual:ComItextpdfTextPdfPdfName_get_IMAGE_()]) {
      
#line 134
      IOSByteArray *contentBytes = [ComItextpdfTextPdfParserContentByteUtils getContentBytesFromContentObjectWithComItextpdfTextPdfPdfObject:xobjectStream];
      
#line 136
      JavaIoInputStream *is = [[JavaIoByteArrayInputStream alloc] initWithByteArray:contentBytes];
      jint ch;
      while ((ch = [is read]) != -1) {
        (void) [sb appendWithChar:(jchar) ch];
      }
      
#line 142
      (void) [sb appendWithNSString:JreStrcat("$@$@$", @"------ ", entryName, @" - subtype = ", [xobjectStream getWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()], @"End of Content------\n")];
    }
  }
  
#line 146
  return [sb description];
}


#line 157
+ (void)listContentStreamForPageWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                                                        withInt:(jint)pageNum
                                          withJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  
#line 158
  [((JavaIoPrintWriter *) nil_chk(outArg)) printlnWithNSString:JreStrcat("$I$", @"==============Page ", pageNum, @"====================")];
  [outArg printlnWithNSString:@"- - - - - Dictionary - - - - - -"];
  ComItextpdfTextPdfPdfDictionary *pageDictionary = [((ComItextpdfTextPdfPdfReader *) nil_chk(reader)) getPageNWithInt:pageNum];
  [outArg printlnWithNSString:[ComItextpdfTextPdfParserPdfContentReaderTool getDictionaryDetailWithComItextpdfTextPdfPdfDictionary:pageDictionary]];
  
#line 163
  [outArg printlnWithNSString:@"- - - - - XObject Summary - - - - - -"];
  [outArg printlnWithNSString:[ComItextpdfTextPdfParserPdfContentReaderTool getXObjectDetailWithComItextpdfTextPdfPdfDictionary:[((ComItextpdfTextPdfPdfDictionary *) nil_chk(pageDictionary)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()]]];
  
#line 166
  [outArg printlnWithNSString:@"- - - - - Content Stream - - - - - -"];
  ComItextpdfTextPdfRandomAccessFileOrArray *f = [reader getSafeFile];
  
#line 169
  IOSByteArray *contentBytes = [reader getPageContentWithInt:pageNum withComItextpdfTextPdfRandomAccessFileOrArray:f];
  [((ComItextpdfTextPdfRandomAccessFileOrArray *) nil_chk(f)) close];
  
#line 172
  [outArg flush];
  
#line 174
  JavaIoInputStream *is = [[JavaIoByteArrayInputStream alloc] initWithByteArray:contentBytes];
  jint ch;
  while ((ch = [is read]) != -1) {
    [outArg printWithChar:(jchar) ch];
  }
  
#line 180
  [outArg flush];
  
#line 182
  [outArg printlnWithNSString:@"- - - - - Text Extraction - - - - - -"];
  NSString *extractedText = [ComItextpdfTextPdfParserPdfTextExtractor getTextFromPageWithComItextpdfTextPdfPdfReader:reader withInt:pageNum withComItextpdfTextPdfParserTextExtractionStrategy:[[ComItextpdfTextPdfParserLocationTextExtractionStrategy alloc] init]];
  if (((jint) [((NSString *) nil_chk(extractedText)) length]) != 0)
#line 185
  [outArg printlnWithNSString:extractedText];
  else
#line 187
  [outArg printlnWithNSString:JreStrcat("$I", @"No text found on page ", pageNum)];
  
#line 189
  [outArg println];
}


#line 200
+ (void)listContentStreamWithJavaIoFile:(JavaIoFile *)pdfFile
                  withJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  
#line 201
  ComItextpdfTextPdfPdfReader *reader = [[ComItextpdfTextPdfPdfReader alloc] initWithNSString:[((JavaIoFile *) nil_chk(pdfFile)) getCanonicalPath]];
  
#line 203
  jint maxPageNum = [reader getNumberOfPages];
  
#line 205
  for (jint pageNum = 1; pageNum <= maxPageNum; pageNum++) {
    [ComItextpdfTextPdfParserPdfContentReaderTool listContentStreamForPageWithComItextpdfTextPdfPdfReader:reader withInt:pageNum withJavaIoPrintWriter:outArg];
  }
}


#line 219
+ (void)listContentStreamWithJavaIoFile:(JavaIoFile *)pdfFile
                                withInt:(jint)pageNum
                  withJavaIoPrintWriter:(JavaIoPrintWriter *)outArg {
  
#line 220
  ComItextpdfTextPdfPdfReader *reader = [[ComItextpdfTextPdfPdfReader alloc] initWithNSString:[((JavaIoFile *) nil_chk(pdfFile)) getCanonicalPath]];
  
#line 222
  [ComItextpdfTextPdfParserPdfContentReaderTool listContentStreamForPageWithComItextpdfTextPdfPdfReader:reader withInt:pageNum withJavaIoPrintWriter:outArg];
}


#line 229
+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  @try {
    if (((IOSObjectArray *) nil_chk(args))->size_ < 1 || args->size_ > 3) {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"Usage:  PdfContentReaderTool <pdf file> [<output file>|stdout] [<page num>]"];
      return;
    }
    
#line 236
    JavaIoPrintWriter *writer = [[JavaIoPrintWriter alloc] initWithJavaIoOutputStream:JavaLangSystem_get_out_()];
    if (args->size_ >= 2) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(args, 1))) compareToIgnoreCase:@"stdout"] != 0) {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"Writing PDF content to ", IOSObjectArray_Get(args, 1))];
        writer = [[JavaIoPrintWriter alloc] initWithJavaIoOutputStream:[[JavaIoFileOutputStream alloc] initWithJavaIoFile:[[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, 1)]]];
      }
    }
    
#line 244
    jint pageNum = -1;
    if (args->size_ >= 3) {
      pageNum = [JavaLangInteger parseIntWithNSString:IOSObjectArray_Get(args, 2)];
    }
    
#line 249
    if (pageNum == -1) {
      [ComItextpdfTextPdfParserPdfContentReaderTool listContentStreamWithJavaIoFile:[[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, 0)] withJavaIoPrintWriter:writer];
    }
    else {
      
#line 252
      [ComItextpdfTextPdfParserPdfContentReaderTool listContentStreamWithJavaIoFile:[[JavaIoFile alloc] initWithNSString:IOSObjectArray_Get(args, 0)] withInt:pageNum withJavaIoPrintWriter:writer];
    }
    [writer flush];
    
#line 256
    if (args->size_ >= 2) {
      [writer close];
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$$", @"Finished writing content to ", IOSObjectArray_Get(args, 1))];
    }
  }
  @catch (
#line 260
  JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTraceWithJavaIoPrintStream:JavaLangSystem_get_err_()];
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDictionaryDetailWithComItextpdfTextPdfPdfDictionary:", "getDictionaryDetail", "Ljava.lang.String;", 0x9, NULL },
    { "getDictionaryDetailWithComItextpdfTextPdfPdfDictionary:withInt:", "getDictionaryDetail", "Ljava.lang.String;", 0x9, NULL },
    { "getXObjectDetailWithComItextpdfTextPdfPdfDictionary:", "getXObjectDetail", "Ljava.lang.String;", 0x9, "Ljava.io.IOException;" },
    { "listContentStreamForPageWithComItextpdfTextPdfPdfReader:withInt:withJavaIoPrintWriter:", "listContentStreamForPage", "V", 0x9, "Ljava.io.IOException;" },
    { "listContentStreamWithJavaIoFile:withJavaIoPrintWriter:", "listContentStream", "V", 0x9, "Ljava.io.IOException;" },
    { "listContentStreamWithJavaIoFile:withInt:withJavaIoPrintWriter:", "listContentStream", "V", 0x9, "Ljava.io.IOException;" },
    { "mainWithNSStringArray:", "main", "V", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentReaderTool = { "PdfContentReaderTool", "com.itextpdf.text.pdf.parser", NULL, 0x1, 8, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentReaderTool;
}

@end
