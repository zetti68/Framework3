//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/InlineImageUtils.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/InlineImageUtils.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/pdf/PRTokeniser.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfContentParser.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/parser/InlineImageInfo.h"
#include "com/itextpdf/text/pdf/parser/InlineImageUtils.h"
#include "com/itextpdf/text/pdf/parser/PdfImageObject.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

BOOL ComItextpdfTextPdfParserInlineImageUtils_initialized = NO;


#line 64
@implementation ComItextpdfTextPdfParserInlineImageUtils

id<JavaUtilMap> ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_;
id<JavaUtilMap> ComItextpdfTextPdfParserInlineImageUtils_inlineImageColorSpaceAbbreviationMap_;
id<JavaUtilMap> ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_;


#line 65
- (instancetype)init {
  return [super init];
}


#line 152
+ (ComItextpdfTextPdfParserInlineImageInfo *)parseInlineImageWithComItextpdfTextPdfPdfContentParser:(ComItextpdfTextPdfPdfContentParser *)ps
                                                                withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic {
  
#line 153
  ComItextpdfTextPdfPdfDictionary *inlineImageDictionary = [ComItextpdfTextPdfParserInlineImageUtils parseInlineImageDictionaryWithComItextpdfTextPdfPdfContentParser:ps];
  IOSByteArray *samples = [ComItextpdfTextPdfParserInlineImageUtils parseInlineImageSamplesWithComItextpdfTextPdfPdfDictionary:inlineImageDictionary withComItextpdfTextPdfPdfDictionary:colorSpaceDic withComItextpdfTextPdfPdfContentParser:ps];
  return [[ComItextpdfTextPdfParserInlineImageInfo alloc] initWithByteArray:samples withComItextpdfTextPdfPdfDictionary:inlineImageDictionary];
}


#line 165
+ (ComItextpdfTextPdfPdfDictionary *)parseInlineImageDictionaryWithComItextpdfTextPdfPdfContentParser:(ComItextpdfTextPdfPdfContentParser *)ps {
  
#line 167
  ComItextpdfTextPdfPdfDictionary *dictionary = [[ComItextpdfTextPdfPdfDictionary alloc] init];
  
#line 169
  for (ComItextpdfTextPdfPdfObject *key = [((ComItextpdfTextPdfPdfContentParser *) nil_chk(ps)) readPRObject]; key != nil && ![@"ID" isEqual:[key description]]; key = [ps readPRObject]) {
    ComItextpdfTextPdfPdfObject *value = [ps readPRObject];
    
#line 172
    ComItextpdfTextPdfPdfName *resolvedKey = [((id<JavaUtilMap>) nil_chk(ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_)) getWithId:key];
    if (resolvedKey == nil)
#line 174
    resolvedKey = (ComItextpdfTextPdfPdfName *) check_class_cast(key, [ComItextpdfTextPdfPdfName class]);
    
#line 176
    [dictionary putWithComItextpdfTextPdfPdfName:resolvedKey withComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfParserInlineImageUtils getAlternateValueWithComItextpdfTextPdfPdfName:resolvedKey withComItextpdfTextPdfPdfObject:value]];
  }
  
#line 179
  jint ch = [((ComItextpdfTextPdfPRTokeniser *) nil_chk([ps getTokeniser])) read];
  if (![ComItextpdfTextPdfPRTokeniser isWhitespaceWithInt:ch])
#line 181
  @throw [[JavaIoIOException alloc] initWithNSString:JreStrcat("$I$", @"Unexpected character ", ch, @" found after ID in inline image")];
  
#line 183
  return dictionary;
}


#line 192
+ (ComItextpdfTextPdfPdfObject *)getAlternateValueWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                                                withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 193
  if (key == ComItextpdfTextPdfPdfName_get_FILTER_()) {
    if ([value isKindOfClass:[ComItextpdfTextPdfPdfName class]]) {
      ComItextpdfTextPdfPdfName *altValue = [((id<JavaUtilMap>) nil_chk(ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_)) getWithId:value];
      if (altValue != nil)
#line 197
      return altValue;
    }
    else
#line 198
    if ([value isKindOfClass:[ComItextpdfTextPdfPdfArray class]]) {
      ComItextpdfTextPdfPdfArray *array = ((ComItextpdfTextPdfPdfArray *) check_class_cast(value, [ComItextpdfTextPdfPdfArray class]));
      ComItextpdfTextPdfPdfArray *altArray = [[ComItextpdfTextPdfPdfArray alloc] init];
      jint count = [((ComItextpdfTextPdfPdfArray *) nil_chk(array)) size];
      for (jint i = 0; i < count; i++) {
        [altArray addWithComItextpdfTextPdfPdfObject:[ComItextpdfTextPdfParserInlineImageUtils getAlternateValueWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:[array getPdfObjectWithInt:i]]];
      }
      return altArray;
    }
  }
  else
#line 207
  if (key == ComItextpdfTextPdfPdfName_get_COLORSPACE_()) {
    ComItextpdfTextPdfPdfName *altValue = [((id<JavaUtilMap>) nil_chk(ComItextpdfTextPdfParserInlineImageUtils_inlineImageColorSpaceAbbreviationMap_)) getWithId:value];
    if (altValue != nil)
#line 210
    return altValue;
  }
  
#line 213
  return value;
}


#line 220
+ (jint)getComponentsPerPixelWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)colorSpaceName
                       withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic {
  
#line 221
  if (colorSpaceName == nil)
#line 222
  return 1;
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(colorSpaceName)) isEqual:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()])
#line 224
  return 1;
  if ([colorSpaceName isEqual:ComItextpdfTextPdfPdfName_get_DEVICERGB_()])
#line 226
  return 3;
  if ([colorSpaceName isEqual:ComItextpdfTextPdfPdfName_get_DEVICECMYK_()])
#line 228
  return 4;
  
#line 230
  if (colorSpaceDic != nil) {
    ComItextpdfTextPdfPdfArray *colorSpace = [colorSpaceDic getAsArrayWithComItextpdfTextPdfPdfName:colorSpaceName];
    if (colorSpace != nil) {
      if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_INDEXED_())) isEqual:[colorSpace getAsNameWithInt:0]]) {
        return 1;
      }
    }
    else {
      ComItextpdfTextPdfPdfName *tempName = [colorSpaceDic getAsNameWithComItextpdfTextPdfPdfName:colorSpaceName];
      if (tempName != nil) {
        return [ComItextpdfTextPdfParserInlineImageUtils getComponentsPerPixelWithComItextpdfTextPdfPdfName:tempName withComItextpdfTextPdfPdfDictionary:colorSpaceDic];
      }
    }
  }
  
#line 245
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:JreStrcat("$@", @"Unexpected color space ", colorSpaceName)];
}


#line 255
+ (jint)computeBytesPerRowWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)imageDictionary
                          withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic {
  
#line 256
  ComItextpdfTextPdfPdfNumber *wObj = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(imageDictionary)) getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_WIDTH_()];
  ComItextpdfTextPdfPdfNumber *bpcObj = [imageDictionary getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_()];
  jint cpp = [ComItextpdfTextPdfParserInlineImageUtils getComponentsPerPixelWithComItextpdfTextPdfPdfName:[imageDictionary getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_()] withComItextpdfTextPdfPdfDictionary:colorSpaceDic];
  
#line 260
  jint w = [((ComItextpdfTextPdfPdfNumber *) nil_chk(wObj)) intValue];
  jint bpc = bpcObj != nil ? [bpcObj intValue] : 1;
  
#line 264
  jint bytesPerRow = (w * bpc * cpp + 7) / 8;
  
#line 266
  return bytesPerRow;
}


#line 279
+ (IOSByteArray *)parseUnfilteredSamplesWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)imageDictionary
                                        withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic
                                     withComItextpdfTextPdfPdfContentParser:(ComItextpdfTextPdfPdfContentParser *)ps {
  
#line 282
  if ([((ComItextpdfTextPdfPdfDictionary *) nil_chk(imageDictionary)) containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_()])
#line 283
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Dictionary contains filters"];
  
#line 285
  ComItextpdfTextPdfPdfNumber *h = [imageDictionary getAsNumberWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_HEIGHT_()];
  
#line 287
  jint bytesToRead = [ComItextpdfTextPdfParserInlineImageUtils computeBytesPerRowWithComItextpdfTextPdfPdfDictionary:imageDictionary withComItextpdfTextPdfPdfDictionary:colorSpaceDic] * [((ComItextpdfTextPdfPdfNumber *) nil_chk(h)) intValue];
  IOSByteArray *bytes = [IOSByteArray arrayWithLength:bytesToRead];
  ComItextpdfTextPdfPRTokeniser *tokeniser = [((ComItextpdfTextPdfPdfContentParser *) nil_chk(ps)) getTokeniser];
  
#line 291
  jint shouldBeWhiteSpace = [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokeniser)) read];
  
#line 294
  jint startIndex = 0;
  if (![ComItextpdfTextPdfPRTokeniser isWhitespaceWithInt:shouldBeWhiteSpace] || shouldBeWhiteSpace == 0) {
    *IOSByteArray_GetRef(bytes, 0) = (jbyte) shouldBeWhiteSpace;
    startIndex++;
  }
  for (jint i = startIndex; i < bytesToRead; i++) {
    jint ch = [tokeniser read];
    if (ch == -1)
#line 302
    @throw [[ComItextpdfTextPdfParserInlineImageUtils_InlineImageParseException alloc] initWithNSString:@"End of content stream reached before end of image data"];
    
#line 304
    *IOSByteArray_GetRef(bytes, i) = (jbyte) ch;
  }
  ComItextpdfTextPdfPdfObject *ei = [ps readPRObject];
  if (![((NSString *) nil_chk([((ComItextpdfTextPdfPdfObject *) nil_chk(ei)) description])) isEqual:@"EI"]) {
    
#line 310
    ComItextpdfTextPdfPdfObject *ei2 = [ps readPRObject];
    if (![((NSString *) nil_chk([((ComItextpdfTextPdfPdfObject *) nil_chk(ei2)) description])) isEqual:@"EI"])
#line 312
    @throw [[ComItextpdfTextPdfParserInlineImageUtils_InlineImageParseException alloc] initWithNSString:@"EI not found after end of image data"];
  }
  return bytes;
}


#line 327
+ (IOSByteArray *)parseInlineImageSamplesWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)imageDictionary
                                         withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic
                                      withComItextpdfTextPdfPdfContentParser:(ComItextpdfTextPdfPdfContentParser *)ps {
  
#line 330
  if (![((ComItextpdfTextPdfPdfDictionary *) nil_chk(imageDictionary)) containsWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FILTER_()]) {
    return [ComItextpdfTextPdfParserInlineImageUtils parseUnfilteredSamplesWithComItextpdfTextPdfPdfDictionary:imageDictionary withComItextpdfTextPdfPdfDictionary:colorSpaceDic withComItextpdfTextPdfPdfContentParser:ps];
  }
  
#line 341
  JavaIoByteArrayOutputStream *baos = [[JavaIoByteArrayOutputStream alloc] init];
  JavaIoByteArrayOutputStream *accumulated = [[JavaIoByteArrayOutputStream alloc] init];
  jint ch;
  jint found = 0;
  ComItextpdfTextPdfPRTokeniser *tokeniser = [((ComItextpdfTextPdfPdfContentParser *) nil_chk(ps)) getTokeniser];
  
#line 347
  while ((ch = [((ComItextpdfTextPdfPRTokeniser *) nil_chk(tokeniser)) read]) != -1) {
    if (found == 0 && [ComItextpdfTextPdfPRTokeniser isWhitespaceWithInt:ch]) {
      found++;
      [accumulated writeWithInt:ch];
    }
    else
#line 351
    if (found == 1 && ch == 'E') {
      found++;
      [accumulated writeWithInt:ch];
    }
    else
#line 354
    if (found == 1 && [ComItextpdfTextPdfPRTokeniser isWhitespaceWithInt:ch]) {
      
#line 359
      [baos writeWithByteArray:[accumulated toByteArray]];
      [accumulated reset];
      [accumulated writeWithInt:ch];
    }
    else
#line 362
    if (found == 2 && ch == 'I') {
      found++;
      [accumulated writeWithInt:ch];
    }
    else
#line 365
    if (found == 3 && [ComItextpdfTextPdfPRTokeniser isWhitespaceWithInt:ch]) {
      IOSByteArray *tmp = [baos toByteArray];
      @try {
        (void) [[ComItextpdfTextPdfParserPdfImageObject alloc] initWithComItextpdfTextPdfPdfDictionary:imageDictionary withByteArray:tmp withComItextpdfTextPdfPdfDictionary:colorSpaceDic];
        return tmp;
      }
      @catch (JavaLangException *e) {
        [baos writeWithByteArray:[accumulated toByteArray]];
        [accumulated reset];
        
#line 375
        [baos writeWithInt:ch];
        found = 0;
      }
    }
    else {
      
#line 379
      [baos writeWithByteArray:[accumulated toByteArray]];
      [accumulated reset];
      
#line 382
      [baos writeWithInt:ch];
      found = 0;
    }
  }
  @throw [[ComItextpdfTextPdfParserInlineImageUtils_InlineImageParseException alloc] initWithNSString:@"Could not find image data or EI"];
}

+ (void)initialize {
  if (self == [ComItextpdfTextPdfParserInlineImageUtils class]) {
    {
      
#line 88
      ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ = [[JavaUtilHashMap alloc] init];
      
#line 91
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_() withId:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_COLORSPACE_() withId:ComItextpdfTextPdfPdfName_get_COLORSPACE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_DECODE_() withId:ComItextpdfTextPdfPdfName_get_DECODE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_DECODEPARMS_() withId:ComItextpdfTextPdfPdfName_get_DECODEPARMS_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_FILTER_() withId:ComItextpdfTextPdfPdfName_get_FILTER_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_HEIGHT_() withId:ComItextpdfTextPdfPdfName_get_HEIGHT_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_IMAGEMASK_() withId:ComItextpdfTextPdfPdfName_get_IMAGEMASK_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_INTENT_() withId:ComItextpdfTextPdfPdfName_get_INTENT_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_INTERPOLATE_() withId:ComItextpdfTextPdfPdfName_get_INTERPOLATE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:ComItextpdfTextPdfPdfName_get_WIDTH_() withId:ComItextpdfTextPdfPdfName_get_WIDTH_()];
      
#line 103
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"BPC"] withId:ComItextpdfTextPdfPdfName_get_BITSPERCOMPONENT_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"CS"] withId:ComItextpdfTextPdfPdfName_get_COLORSPACE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"D"] withId:ComItextpdfTextPdfPdfName_get_DECODE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DP"] withId:ComItextpdfTextPdfPdfName_get_DECODEPARMS_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"F"] withId:ComItextpdfTextPdfPdfName_get_FILTER_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"H"] withId:ComItextpdfTextPdfPdfName_get_HEIGHT_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"IM"] withId:ComItextpdfTextPdfPdfName_get_IMAGEMASK_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"I"] withId:ComItextpdfTextPdfPdfName_get_INTERPOLATE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"W"] withId:ComItextpdfTextPdfPdfName_get_WIDTH_()];
    }
    {
      
#line 119
      ComItextpdfTextPdfParserInlineImageUtils_inlineImageColorSpaceAbbreviationMap_ = [[JavaUtilHashMap alloc] init];
      
#line 121
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageColorSpaceAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"G"] withId:ComItextpdfTextPdfPdfName_get_DEVICEGRAY_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageColorSpaceAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"RGB"] withId:ComItextpdfTextPdfPdfName_get_DEVICERGB_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageColorSpaceAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"CMYK"] withId:ComItextpdfTextPdfPdfName_get_DEVICECMYK_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageColorSpaceAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"I"] withId:ComItextpdfTextPdfPdfName_get_INDEXED_()];
    }
    {
      
#line 132
      ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_ = [[JavaUtilHashMap alloc] init];
      
#line 134
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"AHx"] withId:ComItextpdfTextPdfPdfName_get_ASCIIHEXDECODE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"A85"] withId:ComItextpdfTextPdfPdfName_get_ASCII85DECODE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"LZW"] withId:ComItextpdfTextPdfPdfName_get_LZWDECODE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"Fl"] withId:ComItextpdfTextPdfPdfName_get_FLATEDECODE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"RL"] withId:ComItextpdfTextPdfPdfName_get_RUNLENGTHDECODE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"CCF"] withId:ComItextpdfTextPdfPdfName_get_CCITTFAXDECODE_()];
      (void) [ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_ putWithId:[[ComItextpdfTextPdfPdfName alloc] initWithNSString:@"DCT"] withId:ComItextpdfTextPdfPdfName_get_DCTDECODE_()];
    }
    ComItextpdfTextPdfParserInlineImageUtils_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "InlineImageUtils", NULL, 0x2, NULL },
    { "parseInlineImageWithComItextpdfTextPdfPdfContentParser:withComItextpdfTextPdfPdfDictionary:", "parseInlineImage", "Lcom.itextpdf.text.pdf.parser.InlineImageInfo;", 0x9, "Ljava.io.IOException;" },
    { "parseInlineImageDictionaryWithComItextpdfTextPdfPdfContentParser:", "parseInlineImageDictionary", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0xa, "Ljava.io.IOException;" },
    { "getAlternateValueWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "getAlternateValue", "Lcom.itextpdf.text.pdf.PdfObject;", 0xa, NULL },
    { "getComponentsPerPixelWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfDictionary:", "getComponentsPerPixel", "I", 0xa, NULL },
    { "computeBytesPerRowWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfDictionary:", "computeBytesPerRow", "I", 0xa, NULL },
    { "parseUnfilteredSamplesWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfContentParser:", "parseUnfilteredSamples", "[B", 0xa, "Ljava.io.IOException;" },
    { "parseInlineImageSamplesWithComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfDictionary:withComItextpdfTextPdfPdfContentParser:", "parseInlineImageSamples", "[B", 0xa, "Ljava.io.IOException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inlineImageEntryAbbreviationMap_", NULL, 0x1a, "Ljava.util.Map;", &ComItextpdfTextPdfParserInlineImageUtils_inlineImageEntryAbbreviationMap_,  },
    { "inlineImageColorSpaceAbbreviationMap_", NULL, 0x1a, "Ljava.util.Map;", &ComItextpdfTextPdfParserInlineImageUtils_inlineImageColorSpaceAbbreviationMap_,  },
    { "inlineImageFilterAbbreviationMap_", NULL, 0x1a, "Ljava.util.Map;", &ComItextpdfTextPdfParserInlineImageUtils_inlineImageFilterAbbreviationMap_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserInlineImageUtils = { "InlineImageUtils", "com.itextpdf.text.pdf.parser", NULL, 0x11, 8, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserInlineImageUtils;
}

@end


#line 72
@implementation ComItextpdfTextPdfParserInlineImageUtils_InlineImageParseException


#line 76
- (instancetype)initWithNSString:(NSString *)message {
  return
#line 77
  [super initWithNSString:message];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:", "InlineImageParseException", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfTextPdfParserInlineImageUtils_InlineImageParseException_serialVersionUID },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserInlineImageUtils_InlineImageParseException = { "InlineImageParseException", "com.itextpdf.text.pdf.parser", "InlineImageUtils", 0x9, 1, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserInlineImageUtils_InlineImageParseException;
}

@end
