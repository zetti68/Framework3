//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/SimpleTextExtractionStrategy.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/SimpleTextExtractionStrategy.java"

#include "com/itextpdf/text/pdf/parser/ImageRenderInfo.h"
#include "com/itextpdf/text/pdf/parser/LineSegment.h"
#include "com/itextpdf/text/pdf/parser/SimpleTextExtractionStrategy.h"
#include "com/itextpdf/text/pdf/parser/TextRenderInfo.h"
#include "com/itextpdf/text/pdf/parser/Vector.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuffer.h"


#line 61
@implementation ComItextpdfTextPdfParserSimpleTextExtractionStrategy


#line 72
- (instancetype)init {
  if (self = [super init]) {
    result_ =
#line 67
    [[JavaLangStringBuffer alloc] init];
  }
  return self;
}


#line 78
- (void)beginTextBlock {
}


#line 84
- (void)endTextBlock {
}


#line 91
- (NSString *)getResultantText {
  
#line 92
  return [((JavaLangStringBuffer *) nil_chk(result_)) description];
}


#line 101
- (void)appendTextChunkWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  
#line 102
  (void) [((JavaLangStringBuffer *) nil_chk(result_)) appendWithJavaLangCharSequence:text];
}


#line 109
- (void)renderTextWithComItextpdfTextPdfParserTextRenderInfo:(ComItextpdfTextPdfParserTextRenderInfo *)renderInfo {
  
#line 110
  jboolean firstRender = [((JavaLangStringBuffer *) nil_chk(result_)) sequenceLength] == 0;
  jboolean hardReturn = NO;
  
#line 113
  ComItextpdfTextPdfParserLineSegment *segment = [((ComItextpdfTextPdfParserTextRenderInfo *) nil_chk(renderInfo)) getBaseline];
  ComItextpdfTextPdfParserVector *start = [((ComItextpdfTextPdfParserLineSegment *) nil_chk(segment)) getStartPoint];
  ComItextpdfTextPdfParserVector *end = [segment getEndPoint];
  
#line 117
  if (!firstRender) {
    ComItextpdfTextPdfParserVector *x0 = start;
    ComItextpdfTextPdfParserVector *x1 = lastStart_;
    ComItextpdfTextPdfParserVector *x2 = lastEnd_;
    
#line 123
    jfloat dist = [((ComItextpdfTextPdfParserVector *) nil_chk([((ComItextpdfTextPdfParserVector *) nil_chk(([((ComItextpdfTextPdfParserVector *) nil_chk(x2)) subtractWithComItextpdfTextPdfParserVector:x1]))) crossWithComItextpdfTextPdfParserVector:([((ComItextpdfTextPdfParserVector *) nil_chk(x1)) subtractWithComItextpdfTextPdfParserVector:x0])])) lengthSquared] / [((ComItextpdfTextPdfParserVector *) nil_chk([x2 subtractWithComItextpdfTextPdfParserVector:x1])) lengthSquared];
    
#line 125
    jfloat sameLineThreshold = 1.0f;
    if (dist > sameLineThreshold)
#line 127
    hardReturn = YES;
  }
  
#line 133
  if (hardReturn) {
    
#line 135
    [self appendTextChunkWithJavaLangCharSequence:@"\n"];
  }
  else
#line 136
  if (!firstRender) {
    if ([result_ charAtWithInt:[result_ sequenceLength] - 1] != ' ' && ((jint) [((NSString *) nil_chk([renderInfo getText])) length]) > 0 && [((NSString *) nil_chk([renderInfo getText])) charAtWithInt:0] != ' ') {
      jfloat spacing = [((ComItextpdfTextPdfParserVector *) nil_chk([((ComItextpdfTextPdfParserVector *) nil_chk(lastEnd_)) subtractWithComItextpdfTextPdfParserVector:start])) length];
      if (spacing > [renderInfo getSingleSpaceWidth] / 2.0f) {
        [self appendTextChunkWithJavaLangCharSequence:@" "];
      }
    }
  }
  else {
  }
  
#line 149
  [self appendTextChunkWithJavaLangCharSequence:[renderInfo getText]];
  
#line 151
  lastStart_ = start;
  lastEnd_ = end;
}


#line 161
- (void)renderImageWithComItextpdfTextPdfParserImageRenderInfo:(ComItextpdfTextPdfParserImageRenderInfo *)renderInfo {
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserSimpleTextExtractionStrategy *)other {
  [super copyAllFieldsTo:other];
  other->lastEnd_ = lastEnd_;
  other->lastStart_ = lastStart_;
  other->result_ = result_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SimpleTextExtractionStrategy", NULL, 0x1, NULL },
    { "beginTextBlock", NULL, "V", 0x1, NULL },
    { "endTextBlock", NULL, "V", 0x1, NULL },
    { "getResultantText", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "appendTextChunkWithJavaLangCharSequence:", "appendTextChunk", "V", 0x14, NULL },
    { "renderTextWithComItextpdfTextPdfParserTextRenderInfo:", "renderText", "V", 0x1, NULL },
    { "renderImageWithComItextpdfTextPdfParserImageRenderInfo:", "renderImage", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lastStart_", NULL, 0x2, "Lcom.itextpdf.text.pdf.parser.Vector;", NULL,  },
    { "lastEnd_", NULL, 0x2, "Lcom.itextpdf.text.pdf.parser.Vector;", NULL,  },
    { "result_", NULL, 0x12, "Ljava.lang.StringBuffer;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserSimpleTextExtractionStrategy = { "SimpleTextExtractionStrategy", "com.itextpdf.text.pdf.parser", NULL, 0x1, 7, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserSimpleTextExtractionStrategy;
}

@end
