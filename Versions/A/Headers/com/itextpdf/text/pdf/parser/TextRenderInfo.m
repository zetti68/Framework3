//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/TextRenderInfo.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/TextRenderInfo.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/CMapAwareDocumentFont.h"
#include "com/itextpdf/text/pdf/DocumentFont.h"
#include "com/itextpdf/text/pdf/parser/GraphicsState.h"
#include "com/itextpdf/text/pdf/parser/LineSegment.h"
#include "com/itextpdf/text/pdf/parser/MarkedContentInfo.h"
#include "com/itextpdf/text/pdf/parser/Matrix.h"
#include "com/itextpdf/text/pdf/parser/TextRenderInfo.h"
#include "com/itextpdf/text/pdf/parser/Vector.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"


#line 63
@implementation ComItextpdfTextPdfParserTextRenderInfo


#line 81
- (instancetype)initWithNSString:(NSString *)text
withComItextpdfTextPdfParserGraphicsState:(ComItextpdfTextPdfParserGraphicsState *)gs
withComItextpdfTextPdfParserMatrix:(ComItextpdfTextPdfParserMatrix *)textMatrix
          withJavaUtilCollection:(id<JavaUtilCollection>)markedContentInfo {
  if (self = [super init]) {
    
#line 82
    self->text_ = text;
    
#line 83
    self->textToUserSpaceTransformMatrix_ = [((ComItextpdfTextPdfParserMatrix *) nil_chk(textMatrix)) multiplyWithComItextpdfTextPdfParserMatrix:((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs))->ctm_];
    
#line 84
    self->gs_ = gs;
    
#line 85
    self->markedContentInfos_ = [[JavaUtilArrayList alloc] initWithJavaUtilCollection:markedContentInfo];
  }
  return self;
}


#line 95
- (instancetype)initWithComItextpdfTextPdfParserTextRenderInfo:(ComItextpdfTextPdfParserTextRenderInfo *)parent
                                                       withInt:(jint)charIndex
                                                     withFloat:(jfloat)horizontalOffset {
  if (self = [super init]) {
    
#line 96
    self->text_ = [((NSString *) nil_chk(((ComItextpdfTextPdfParserTextRenderInfo *) nil_chk(parent))->text_)) substring:charIndex endIndex:charIndex + 1];
    
#line 97
    self->textToUserSpaceTransformMatrix_ = [((ComItextpdfTextPdfParserMatrix *) [[ComItextpdfTextPdfParserMatrix alloc] initWithFloat:horizontalOffset withFloat:0]) multiplyWithComItextpdfTextPdfParserMatrix:parent->textToUserSpaceTransformMatrix_];
    
#line 98
    self->gs_ = parent->gs_;
    
#line 99
    self->markedContentInfos_ = parent->markedContentInfos_;
  }
  return self;
}


#line 105
- (NSString *)getText {
  
#line 106
  return text_;
}


#line 116
- (jboolean)hasMcidWithInt:(jint)mcid {
  
#line 117
  return [self hasMcidWithInt:mcid withBoolean:NO];
}


#line 128
- (jboolean)hasMcidWithInt:(jint)mcid
               withBoolean:(jboolean)checkTheTopmostLevelOnly {
  
#line 129
  if (checkTheTopmostLevelOnly) {
    if ([(id) markedContentInfos_ isKindOfClass:[JavaUtilArrayList class]]) {
      JavaLangInteger *infoMcid = [self getMcid];
      return (infoMcid != nil) ? [infoMcid intValue] == mcid : NO;
    }
  }
  else {
    
#line 135
    for (ComItextpdfTextPdfParserMarkedContentInfo * __strong info in nil_chk(markedContentInfos_)) {
      if ([((ComItextpdfTextPdfParserMarkedContentInfo *) nil_chk(info)) hasMcid])
#line 137
      if ([info getMcid] == mcid)
#line 138
      return YES;
    }
  }
  return NO;
}


#line 147
- (JavaLangInteger *)getMcid {
  
#line 148
  if ([(id) markedContentInfos_ isKindOfClass:[JavaUtilArrayList class]]) {
    JavaUtilArrayList *mci = (JavaUtilArrayList *) check_class_cast(markedContentInfos_, [JavaUtilArrayList class]);
    ComItextpdfTextPdfParserMarkedContentInfo *info = [((JavaUtilArrayList *) nil_chk(mci)) size] > 0 ? [mci getWithInt:[mci size] - 1] : nil;
    return (info != nil && [info hasMcid]) ? [JavaLangInteger valueOfWithInt:[info getMcid]] : nil;
  }
  return nil;
}


#line 159
- (jfloat)getUnscaledWidth {
  
#line 160
  return [self getStringWidthWithNSString:text_];
}


#line 169
- (ComItextpdfTextPdfParserLineSegment *)getBaseline {
  
#line 170
  return [((ComItextpdfTextPdfParserLineSegment *) nil_chk([self getUnscaledBaselineWithOffsetWithFloat:0 + ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->rise_])) transformByWithComItextpdfTextPdfParserMatrix:textToUserSpaceTransformMatrix_];
}


#line 179
- (ComItextpdfTextPdfParserLineSegment *)getAscentLine {
  
#line 180
  jfloat ascent = [((ComItextpdfTextPdfCMapAwareDocumentFont *) nil_chk([((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_)) getFont])) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_ASCENT withFloat:[gs_ getFontSize]];
  return [((ComItextpdfTextPdfParserLineSegment *) nil_chk([self getUnscaledBaselineWithOffsetWithFloat:ascent + gs_->rise_])) transformByWithComItextpdfTextPdfParserMatrix:textToUserSpaceTransformMatrix_];
}


#line 190
- (ComItextpdfTextPdfParserLineSegment *)getDescentLine {
  
#line 192
  jfloat descent = [((ComItextpdfTextPdfCMapAwareDocumentFont *) nil_chk([((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_)) getFont])) getFontDescriptorWithInt:ComItextpdfTextPdfBaseFont_DESCENT withFloat:[gs_ getFontSize]];
  return [((ComItextpdfTextPdfParserLineSegment *) nil_chk([self getUnscaledBaselineWithOffsetWithFloat:descent + gs_->rise_])) transformByWithComItextpdfTextPdfParserMatrix:textToUserSpaceTransformMatrix_];
}


#line 196
- (ComItextpdfTextPdfParserLineSegment *)getUnscaledBaselineWithOffsetWithFloat:(jfloat)yOffset {
  
#line 199
  jfloat correctedUnscaledWidth = [self getUnscaledWidth] - ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->characterSpacing_ * gs_->horizontalScaling_;
  
#line 201
  return [[ComItextpdfTextPdfParserLineSegment alloc] initWithComItextpdfTextPdfParserVector:[[ComItextpdfTextPdfParserVector alloc] initWithFloat:0 withFloat:yOffset withFloat:1] withComItextpdfTextPdfParserVector:[[ComItextpdfTextPdfParserVector alloc] initWithFloat:correctedUnscaledWidth withFloat:yOffset withFloat:1]];
}


#line 209
- (ComItextpdfTextPdfDocumentFont *)getFont {
  
#line 210
  return [((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_)) getFont];
}


#line 236
- (jfloat)getRise {
  
#line 237
  if (((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->rise_ == 0) return 0;
  
#line 239
  return [self convertHeightFromTextSpaceToUserSpaceWithFloat:gs_->rise_];
}


#line 248
- (jfloat)convertWidthFromTextSpaceToUserSpaceWithFloat:(jfloat)width {
  
#line 249
  ComItextpdfTextPdfParserLineSegment *textSpace = [[ComItextpdfTextPdfParserLineSegment alloc] initWithComItextpdfTextPdfParserVector:[[ComItextpdfTextPdfParserVector alloc] initWithFloat:0 withFloat:0 withFloat:1] withComItextpdfTextPdfParserVector:[[ComItextpdfTextPdfParserVector alloc] initWithFloat:width withFloat:0 withFloat:1]];
  ComItextpdfTextPdfParserLineSegment *userSpace = [textSpace transformByWithComItextpdfTextPdfParserMatrix:textToUserSpaceTransformMatrix_];
  return [((ComItextpdfTextPdfParserLineSegment *) nil_chk(userSpace)) getLength];
}


#line 260
- (jfloat)convertHeightFromTextSpaceToUserSpaceWithFloat:(jfloat)height {
  
#line 261
  ComItextpdfTextPdfParserLineSegment *textSpace = [[ComItextpdfTextPdfParserLineSegment alloc] initWithComItextpdfTextPdfParserVector:[[ComItextpdfTextPdfParserVector alloc] initWithFloat:0 withFloat:0 withFloat:1] withComItextpdfTextPdfParserVector:[[ComItextpdfTextPdfParserVector alloc] initWithFloat:0 withFloat:height withFloat:1]];
  ComItextpdfTextPdfParserLineSegment *userSpace = [textSpace transformByWithComItextpdfTextPdfParserMatrix:textToUserSpaceTransformMatrix_];
  return [((ComItextpdfTextPdfParserLineSegment *) nil_chk(userSpace)) getLength];
}


#line 270
- (jfloat)getSingleSpaceWidth {
  
#line 271
  return [self convertWidthFromTextSpaceToUserSpaceWithFloat:[self getUnscaledFontSpaceWidth]];
}


#line 289
- (jint)getTextRenderMode {
  
#line 290
  return ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->renderMode_;
}


#line 297
- (ComItextpdfTextBaseColor *)getFillColor {
  
#line 298
  return ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->fillColor_;
}


#line 306
- (ComItextpdfTextBaseColor *)getStrokeColor {
  
#line 307
  return ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->strokeColor_;
}


#line 316
- (jfloat)getUnscaledFontSpaceWidth {
  
#line 317
  jchar charToUse = ' ';
  if ([((ComItextpdfTextPdfCMapAwareDocumentFont *) nil_chk(((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->font_)) getWidthWithInt:charToUse] == 0)
#line 319
  charToUse = 0x00a0;
  return [self getStringWidthWithNSString:[NSString valueOfChar:charToUse]];
}


#line 328
- (jfloat)getStringWidthWithNSString:(NSString *)string {
  
#line 329
  ComItextpdfTextPdfDocumentFont *font = ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->font_;
  IOSCharArray *chars = [((NSString *) nil_chk(string)) toCharArray];
  jfloat totalWidth = 0;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    jfloat w = [((ComItextpdfTextPdfDocumentFont *) nil_chk(font)) getWidthWithInt:IOSCharArray_Get(chars, i)] / 1000.0f;
    jfloat wordSpacing = IOSCharArray_Get(chars, i) == 32 ? gs_->wordSpacing_ : 0.0f;
    totalWidth += (w * gs_->fontSize_ + gs_->characterSpacing_ + wordSpacing) * gs_->horizontalScaling_;
  }
  
#line 338
  return totalWidth;
}


#line 346
- (id<JavaUtilList>)getCharacterRenderInfos {
  
#line 347
  id<JavaUtilList> rslt = [[JavaUtilArrayList alloc] initWithInt:((jint) [((NSString *) nil_chk(text_)) length])];
  
#line 349
  ComItextpdfTextPdfDocumentFont *font = ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs_))->font_;
  IOSCharArray *chars = [text_ toCharArray];
  jfloat totalWidth = 0;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    jfloat w = [((ComItextpdfTextPdfDocumentFont *) nil_chk(font)) getWidthWithInt:IOSCharArray_Get(chars, i)] / 1000.0f;
    jfloat wordSpacing = IOSCharArray_Get(chars, i) == 32 ? gs_->wordSpacing_ : 0.0f;
    
#line 356
    ComItextpdfTextPdfParserTextRenderInfo *subInfo = [[ComItextpdfTextPdfParserTextRenderInfo alloc] initWithComItextpdfTextPdfParserTextRenderInfo:self withInt:i withFloat:totalWidth];
    [rslt addWithId:subInfo];
    
#line 359
    totalWidth += (w * gs_->fontSize_ + gs_->characterSpacing_ + wordSpacing) * gs_->horizontalScaling_;
  }
  
#line 363
  return rslt;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserTextRenderInfo *)other {
  [super copyAllFieldsTo:other];
  other->gs_ = gs_;
  other->markedContentInfos_ = markedContentInfos_;
  other->text_ = text_;
  other->textToUserSpaceTransformMatrix_ = textToUserSpaceTransformMatrix_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withComItextpdfTextPdfParserGraphicsState:withComItextpdfTextPdfParserMatrix:withJavaUtilCollection:", "TextRenderInfo", NULL, 0x0, NULL },
    { "initWithComItextpdfTextPdfParserTextRenderInfo:withInt:withFloat:", "TextRenderInfo", NULL, 0x2, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "hasMcidWithInt:", "hasMcid", "Z", 0x1, NULL },
    { "hasMcidWithInt:withBoolean:", "hasMcid", "Z", 0x1, NULL },
    { "getMcid", NULL, "Ljava.lang.Integer;", 0x1, NULL },
    { "getUnscaledWidth", NULL, "F", 0x0, NULL },
    { "getBaseline", NULL, "Lcom.itextpdf.text.pdf.parser.LineSegment;", 0x1, NULL },
    { "getAscentLine", NULL, "Lcom.itextpdf.text.pdf.parser.LineSegment;", 0x1, NULL },
    { "getDescentLine", NULL, "Lcom.itextpdf.text.pdf.parser.LineSegment;", 0x1, NULL },
    { "getUnscaledBaselineWithOffsetWithFloat:", "getUnscaledBaselineWithOffset", "Lcom.itextpdf.text.pdf.parser.LineSegment;", 0x2, NULL },
    { "getFont", NULL, "Lcom.itextpdf.text.pdf.DocumentFont;", 0x1, NULL },
    { "getRise", NULL, "F", 0x1, NULL },
    { "convertWidthFromTextSpaceToUserSpaceWithFloat:", "convertWidthFromTextSpaceToUserSpace", "F", 0x2, NULL },
    { "convertHeightFromTextSpaceToUserSpaceWithFloat:", "convertHeightFromTextSpaceToUserSpace", "F", 0x2, NULL },
    { "getSingleSpaceWidth", NULL, "F", 0x1, NULL },
    { "getTextRenderMode", NULL, "I", 0x1, NULL },
    { "getFillColor", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
    { "getStrokeColor", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
    { "getUnscaledFontSpaceWidth", NULL, "F", 0x2, NULL },
    { "getStringWidthWithNSString:", "getStringWidth", "F", 0x2, NULL },
    { "getCharacterRenderInfos", NULL, "Ljava.util.List;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x12, "Ljava.lang.String;", NULL,  },
    { "textToUserSpaceTransformMatrix_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.Matrix;", NULL,  },
    { "gs_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.GraphicsState;", NULL,  },
    { "markedContentInfos_", NULL, 0x12, "Ljava.util.Collection;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserTextRenderInfo = { "TextRenderInfo", "com.itextpdf.text.pdf.parser", NULL, 0x1, 22, methods, 4, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserTextRenderInfo;
}

@end
