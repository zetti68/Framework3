//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/PdfContentStreamProcessor.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/parser/PdfContentStreamProcessor.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/io/RandomAccessSource.h"
#include "com/itextpdf/text/io/RandomAccessSourceFactory.h"
#include "com/itextpdf/text/pdf/CMYKColor.h"
#include "com/itextpdf/text/pdf/CMapAwareDocumentFont.h"
#include "com/itextpdf/text/pdf/GrayColor.h"
#include "com/itextpdf/text/pdf/PRIndirectReference.h"
#include "com/itextpdf/text/pdf/PRTokeniser.h"
#include "com/itextpdf/text/pdf/PdfArray.h"
#include "com/itextpdf/text/pdf/PdfContentParser.h"
#include "com/itextpdf/text/pdf/PdfDictionary.h"
#include "com/itextpdf/text/pdf/PdfIndirectReference.h"
#include "com/itextpdf/text/pdf/PdfLiteral.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfNumber.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfStream.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/RandomAccessFileOrArray.h"
#include "com/itextpdf/text/pdf/parser/ContentByteUtils.h"
#include "com/itextpdf/text/pdf/parser/ContentOperator.h"
#include "com/itextpdf/text/pdf/parser/GraphicsState.h"
#include "com/itextpdf/text/pdf/parser/ImageRenderInfo.h"
#include "com/itextpdf/text/pdf/parser/InlineImageInfo.h"
#include "com/itextpdf/text/pdf/parser/InlineImageUtils.h"
#include "com/itextpdf/text/pdf/parser/MarkedContentInfo.h"
#include "com/itextpdf/text/pdf/parser/Matrix.h"
#include "com/itextpdf/text/pdf/parser/PdfContentStreamProcessor.h"
#include "com/itextpdf/text/pdf/parser/RenderListener.h"
#include "com/itextpdf/text/pdf/parser/TextRenderInfo.h"
#include "com/itextpdf/text/pdf/parser/XObjectDoHandler.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Map.h"
#include "java/util/Stack.h"


#line 80
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor

NSString * ComItextpdfTextPdfParserPdfContentStreamProcessor_DEFAULTOPERATOR_ = 
#line 85
@"DefaultOperator";


#line 119
- (instancetype)initWithComItextpdfTextPdfParserRenderListener:(id<ComItextpdfTextPdfParserRenderListener>)renderListener {
  if (self = [super init]) {
    gsStack_ =
#line 92
    [[JavaUtilStack alloc] init];
    cachedFonts_ =
#line 106
    [[JavaUtilHashMap alloc] init];
    markedContentStack_ =
#line 111
    [[JavaUtilStack alloc] init];
    
#line 120
    self->renderListener_ = renderListener;
    
#line 121
    operators_ = [[JavaUtilHashMap alloc] init];
    
#line 122
    [self populateOperators];
    
#line 123
    xobjectDoHandlers_ = [[JavaUtilHashMap alloc] init];
    
#line 124
    [self populateXObjectDoHandlers];
    
#line 125
    [self reset];
  }
  return self;
}


#line 128
- (void)populateXObjectDoHandlers {
  
#line 129
  (void) [self registerXObjectDoHandlerWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_DEFAULT_() withComItextpdfTextPdfParserXObjectDoHandler:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_IgnoreXObjectDoHandler alloc] init]];
  (void) [self registerXObjectDoHandlerWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FORM_() withComItextpdfTextPdfParserXObjectDoHandler:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_FormXObjectDoHandler alloc] init]];
  (void) [self registerXObjectDoHandlerWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_IMAGE_() withComItextpdfTextPdfParserXObjectDoHandler:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_ImageXObjectDoHandler alloc] init]];
}


#line 144
- (id<ComItextpdfTextPdfParserXObjectDoHandler>)registerXObjectDoHandlerWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)xobjectSubType
                                                         withComItextpdfTextPdfParserXObjectDoHandler:(id<ComItextpdfTextPdfParserXObjectDoHandler>)handler {
  
#line 145
  return [((id<JavaUtilMap>) nil_chk(xobjectDoHandlers_)) putWithId:xobjectSubType withId:handler];
}


#line 154
- (ComItextpdfTextPdfCMapAwareDocumentFont *)getFontWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ind {
  
#line 155
  JavaLangInteger *n = [JavaLangInteger valueOfWithInt:[((ComItextpdfTextPdfPRIndirectReference *) nil_chk(ind)) getNumber]];
  ComItextpdfTextPdfCMapAwareDocumentFont *font = [((id<JavaUtilMap>) nil_chk(cachedFonts_)) getWithId:n];
  if (font == nil) {
    font = [[ComItextpdfTextPdfCMapAwareDocumentFont alloc] initWithComItextpdfTextPdfPRIndirectReference:ind];
    (void) [cachedFonts_ putWithId:n withId:font];
  }
  return font;
}


#line 164
- (ComItextpdfTextPdfCMapAwareDocumentFont *)getFontWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)fontResource {
  
#line 165
  return [[ComItextpdfTextPdfCMapAwareDocumentFont alloc] initWithComItextpdfTextPdfPdfDictionary:fontResource];
}


#line 171
- (void)populateOperators {
  
#line 173
  (void) [self registerContentOperatorWithNSString:ComItextpdfTextPdfParserPdfContentStreamProcessor_DEFAULTOPERATOR_ withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_IgnoreOperatorContentOperator alloc] init]];
  
#line 175
  (void) [self registerContentOperatorWithNSString:@"q" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_PushGraphicsState alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"Q" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_PopGraphicsState alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"g" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetGrayFill alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"G" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetGrayStroke alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"rg" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetRGBFill alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"RG" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetRGBStroke alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"k" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetCMYKFill alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"K" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetCMYKStroke alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"cs" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorSpaceFill alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"CS" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorSpaceStroke alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"sc" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorFill alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"SC" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorStroke alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"scn" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorFill alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"SCN" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorStroke alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"cm" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_ModifyCurrentTransformationMatrix alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"gs" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_ProcessGraphicsStateResource alloc] init]];
  
#line 192
  ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing *tcOperator = [[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing alloc] init];
  (void) [self registerContentOperatorWithNSString:@"Tc" withComItextpdfTextPdfParserContentOperator:tcOperator];
  ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing *twOperator = [[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing alloc] init];
  (void) [self registerContentOperatorWithNSString:@"Tw" withComItextpdfTextPdfParserContentOperator:twOperator];
  (void) [self registerContentOperatorWithNSString:@"Tz" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextHorizontalScaling alloc] init]];
  ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading *tlOperator = [[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading alloc] init];
  (void) [self registerContentOperatorWithNSString:@"TL" withComItextpdfTextPdfParserContentOperator:tlOperator];
  (void) [self registerContentOperatorWithNSString:@"Tf" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextFont alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"Tr" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextRenderMode alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"Ts" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextRise alloc] init]];
  
#line 203
  (void) [self registerContentOperatorWithNSString:@"BT" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginText alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"ET" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_EndText alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"BMC" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginMarkedContent alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"BDC" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginMarkedContentDictionary alloc] init]];
  (void) [self registerContentOperatorWithNSString:@"EMC" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_EndMarkedContent alloc] init]];
  
#line 209
  ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine *tdOperator = [[ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine alloc] init];
  (void) [self registerContentOperatorWithNSString:@"Td" withComItextpdfTextPdfParserContentOperator:tdOperator];
  (void) [self registerContentOperatorWithNSString:@"TD" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLineWithLeading alloc] initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine:tdOperator withComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading:tlOperator]];
  (void) [self registerContentOperatorWithNSString:@"Tm" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_TextSetTextMatrix alloc] init]];
  ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine *tstarOperator = [[ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine alloc] initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine:tdOperator];
  (void) [self registerContentOperatorWithNSString:@"T*" withComItextpdfTextPdfParserContentOperator:tstarOperator];
  
#line 216
  ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText *tjOperator = [[ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText alloc] init];
  (void) [self registerContentOperatorWithNSString:@"Tj" withComItextpdfTextPdfParserContentOperator:tjOperator];
  ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText *tickOperator = [[ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText alloc] initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine:tstarOperator withComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText:tjOperator];
  (void) [self registerContentOperatorWithNSString:@"'" withComItextpdfTextPdfParserContentOperator:tickOperator];
  (void) [self registerContentOperatorWithNSString:@"\"" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowTextWithSpacing alloc] initWithComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing:twOperator withComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing:tcOperator withComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText:tickOperator]];
  (void) [self registerContentOperatorWithNSString:@"TJ" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowTextArray alloc] init]];
  
#line 223
  (void) [self registerContentOperatorWithNSString:@"Do" withComItextpdfTextPdfParserContentOperator:[[ComItextpdfTextPdfParserPdfContentStreamProcessor_Do alloc] init]];
}


#line 236
- (id<ComItextpdfTextPdfParserContentOperator>)registerContentOperatorWithNSString:(NSString *)operatorString
                                       withComItextpdfTextPdfParserContentOperator:(id<ComItextpdfTextPdfParserContentOperator>)operator_ {
  
#line 237
  return [((id<JavaUtilMap>) nil_chk(operators_)) putWithId:operatorString withId:operator_];
}

- (void)reset {
  
#line 244
  [((JavaUtilStack *) nil_chk(gsStack_)) removeAllElements];
  [gsStack_ addWithId:[[ComItextpdfTextPdfParserGraphicsState alloc] init]];
  textMatrix_ = nil;
  textLineMatrix_ = nil;
  resources_ = [[ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary alloc] init];
}


#line 255
- (ComItextpdfTextPdfParserGraphicsState *)gs {
  
#line 256
  return [((JavaUtilStack *) nil_chk(gsStack_)) peek];
}


#line 264
- (void)invokeOperatorWithComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                 withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 265
  id<ComItextpdfTextPdfParserContentOperator> op = [((id<JavaUtilMap>) nil_chk(operators_)) getWithId:[((ComItextpdfTextPdfPdfLiteral *) nil_chk(operator_)) description]];
  if (op == nil)
#line 267
  op = [operators_ getWithId:ComItextpdfTextPdfParserPdfContentStreamProcessor_DEFAULTOPERATOR_];
  [((id<ComItextpdfTextPdfParserContentOperator>) nil_chk(op)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:self withComItextpdfTextPdfPdfLiteral:operator_ withJavaUtilArrayList:operands];
}


#line 277
- (void)beginMarkedContentWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)tag
                    withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)dict {
  
#line 278
  (void) [((JavaUtilStack *) nil_chk(markedContentStack_)) pushWithId:[[ComItextpdfTextPdfParserMarkedContentInfo alloc] initWithComItextpdfTextPdfPdfName:tag withComItextpdfTextPdfPdfDictionary:dict]];
}


#line 285
- (void)endMarkedContent {
  
#line 286
  (void) [((JavaUtilStack *) nil_chk(markedContentStack_)) pop];
}


#line 296
- (NSString *)decodeWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *)inArg {
  
#line 297
  IOSByteArray *bytes = [((ComItextpdfTextPdfPdfString *) nil_chk(inArg)) getBytes];
  return [((ComItextpdfTextPdfCMapAwareDocumentFont *) nil_chk(((ComItextpdfTextPdfParserGraphicsState *) nil_chk([self gs]))->font_)) decodeWithByteArray:bytes withInt:0 withInt:((IOSByteArray *) nil_chk(bytes))->size_];
}


#line 304
- (void)beginText {
  
#line 305
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(renderListener_)) beginTextBlock];
}


#line 311
- (void)endText {
  
#line 312
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(renderListener_)) endTextBlock];
}


#line 319
- (void)displayPdfStringWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *)string {
  
#line 321
  NSString *unicode = [self decodeWithComItextpdfTextPdfPdfString:string];
  
#line 323
  ComItextpdfTextPdfParserTextRenderInfo *renderInfo = [[ComItextpdfTextPdfParserTextRenderInfo alloc] initWithNSString:unicode withComItextpdfTextPdfParserGraphicsState:[self gs] withComItextpdfTextPdfParserMatrix:textMatrix_ withJavaUtilCollection:markedContentStack_];
  
#line 325
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(renderListener_)) renderTextWithComItextpdfTextPdfParserTextRenderInfo:renderInfo];
  
#line 327
  textMatrix_ = [((ComItextpdfTextPdfParserMatrix *) [[ComItextpdfTextPdfParserMatrix alloc] initWithFloat:[renderInfo getUnscaledWidth] withFloat:0]) multiplyWithComItextpdfTextPdfParserMatrix:textMatrix_];
}


#line 338
- (void)displayXObjectWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)xobjectName {
  
#line 339
  ComItextpdfTextPdfPdfDictionary *xobjects = [((ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary *) nil_chk(resources_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_XOBJECT_()];
  ComItextpdfTextPdfPdfObject *xobject = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(xobjects)) getDirectObjectWithComItextpdfTextPdfPdfName:xobjectName];
  ComItextpdfTextPdfPdfStream *xobjectStream = (ComItextpdfTextPdfPdfStream *) check_class_cast(xobject, [ComItextpdfTextPdfPdfStream class]);
  
#line 343
  ComItextpdfTextPdfPdfName *subType = [((ComItextpdfTextPdfPdfStream *) nil_chk(xobjectStream)) getAsNameWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_SUBTYPE_()];
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(xobject)) isStream]) {
    id<ComItextpdfTextPdfParserXObjectDoHandler> handler = [((id<JavaUtilMap>) nil_chk(xobjectDoHandlers_)) getWithId:subType];
    if (handler == nil)
#line 347
    handler = [xobjectDoHandlers_ getWithId:ComItextpdfTextPdfPdfName_get_DEFAULT_()];
    [((id<ComItextpdfTextPdfParserXObjectDoHandler>) nil_chk(handler)) handleXObjectWithComItextpdfTextPdfParserPdfContentStreamProcessor:self withComItextpdfTextPdfPdfStream:xobjectStream withComItextpdfTextPdfPdfIndirectReference:[xobjects getAsIndirectObjectWithComItextpdfTextPdfPdfName:xobjectName]];
  }
  else {
    
#line 350
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"XObject.1.is.not.a.stream" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ xobjectName } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  }
}


#line 359
- (void)applyTextAdjustWithFloat:(jfloat)tj {
  
#line 360
  jfloat adjustBy = -tj / 1000.0f * ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([self gs]))->fontSize_ * ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([self gs]))->horizontalScaling_;
  
#line 362
  textMatrix_ = [((ComItextpdfTextPdfParserMatrix *) [[ComItextpdfTextPdfParserMatrix alloc] initWithFloat:adjustBy withFloat:0]) multiplyWithComItextpdfTextPdfParserMatrix:textMatrix_];
}


#line 375
- (void)processContentWithByteArray:(IOSByteArray *)contentBytes
withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)resources {
  
#line 376
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary *) nil_chk(self->resources_)) pushWithComItextpdfTextPdfPdfDictionary:resources];
  @try {
    ComItextpdfTextPdfPRTokeniser *tokeniser = [[ComItextpdfTextPdfPRTokeniser alloc] initWithComItextpdfTextPdfRandomAccessFileOrArray:[[ComItextpdfTextPdfRandomAccessFileOrArray alloc] initWithComItextpdfTextIoRandomAccessSource:[((ComItextpdfTextIoRandomAccessSourceFactory *) [[ComItextpdfTextIoRandomAccessSourceFactory alloc] init]) createSourceWithByteArray:contentBytes]]];
    ComItextpdfTextPdfPdfContentParser *ps = [[ComItextpdfTextPdfPdfContentParser alloc] initWithComItextpdfTextPdfPRTokeniser:tokeniser];
    JavaUtilArrayList *operands = [[JavaUtilArrayList alloc] init];
    while ([((JavaUtilArrayList *) nil_chk([ps parseWithJavaUtilArrayList:operands])) size] > 0) {
      ComItextpdfTextPdfPdfLiteral *operator_ = (ComItextpdfTextPdfPdfLiteral *) check_class_cast([operands getWithInt:[operands size] - 1], [ComItextpdfTextPdfPdfLiteral class]);
      if ([@"BI" isEqual:[((ComItextpdfTextPdfPdfLiteral *) nil_chk(operator_)) description]]) {
        
#line 385
        ComItextpdfTextPdfPdfDictionary *colorSpaceDic = resources != nil ? [resources getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_()] : nil;
        [self handleInlineImageWithComItextpdfTextPdfParserInlineImageInfo:[ComItextpdfTextPdfParserInlineImageUtils parseInlineImageWithComItextpdfTextPdfPdfContentParser:ps withComItextpdfTextPdfPdfDictionary:colorSpaceDic] withComItextpdfTextPdfPdfDictionary:colorSpaceDic];
      }
      else {
        
#line 388
        [self invokeOperatorWithComItextpdfTextPdfPdfLiteral:operator_ withJavaUtilArrayList:operands];
      }
    }
  }
  @catch (
#line 393
  JavaLangException *e) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e];
  }
  [self->resources_ pop];
}


#line 405
- (void)handleInlineImageWithComItextpdfTextPdfParserInlineImageInfo:(ComItextpdfTextPdfParserInlineImageInfo *)info
                                 withComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)colorSpaceDic {
  
#line 406
  ComItextpdfTextPdfParserImageRenderInfo *renderInfo = [ComItextpdfTextPdfParserImageRenderInfo createForEmbeddedImageWithComItextpdfTextPdfParserMatrix:((ComItextpdfTextPdfParserGraphicsState *) nil_chk([self gs]))->ctm_ withComItextpdfTextPdfParserInlineImageInfo:info withComItextpdfTextPdfPdfDictionary:colorSpaceDic];
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(renderListener_)) renderImageWithComItextpdfTextPdfParserImageRenderInfo:renderInfo];
}


#line 738
+ (ComItextpdfTextBaseColor *)getColorWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)colorSpace
                                                   withJavaUtilList:(id<JavaUtilList>)operands {
  
#line 739
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_DEVICEGRAY_())) isEqual:colorSpace]) {
    return [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:1 withJavaUtilList:operands];
  }
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_DEVICERGB_())) isEqual:colorSpace]) {
    return [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:3 withJavaUtilList:operands];
  }
  if ([((ComItextpdfTextPdfPdfName *) nil_chk(ComItextpdfTextPdfPdfName_get_DEVICECMYK_())) isEqual:colorSpace]) {
    return [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:4 withJavaUtilList:operands];
  }
  return nil;
}

+ (ComItextpdfTextBaseColor *)getColorWithInt:(jint)nOperands
                             withJavaUtilList:(id<JavaUtilList>)operands {
  
#line 755
  IOSFloatArray *c = [IOSFloatArray arrayWithLength:nOperands];
  for (jint i = 0; i < nOperands; i++) {
    *IOSFloatArray_GetRef(c, i) = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([((id<JavaUtilList>) nil_chk(operands)) getWithInt:i], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  }
  switch (nOperands) {
    case 1:
    return [[ComItextpdfTextPdfGrayColor alloc] initWithFloat:IOSFloatArray_Get(c, 0)];
    case 3:
    return [[ComItextpdfTextBaseColor alloc] initWithFloat:IOSFloatArray_Get(c, 0) withFloat:IOSFloatArray_Get(c, 1) withFloat:IOSFloatArray_Get(c, 2)];
    case 4:
    return [[ComItextpdfTextPdfCMYKColor alloc] initWithFloat:IOSFloatArray_Get(c, 0) withFloat:IOSFloatArray_Get(c, 1) withFloat:IOSFloatArray_Get(c, 2) withFloat:IOSFloatArray_Get(c, 3)];
  }
  return nil;
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)other {
  [super copyAllFieldsTo:other];
  other->cachedFonts_ = cachedFonts_;
  other->gsStack_ = gsStack_;
  other->markedContentStack_ = markedContentStack_;
  other->operators_ = operators_;
  other->renderListener_ = renderListener_;
  other->resources_ = resources_;
  other->textLineMatrix_ = textLineMatrix_;
  other->textMatrix_ = textMatrix_;
  other->xobjectDoHandlers_ = xobjectDoHandlers_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfParserRenderListener:", "PdfContentStreamProcessor", NULL, 0x1, NULL },
    { "populateXObjectDoHandlers", NULL, "V", 0x2, NULL },
    { "registerXObjectDoHandlerWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfParserXObjectDoHandler:", "registerXObjectDoHandler", "Lcom.itextpdf.text.pdf.parser.XObjectDoHandler;", 0x1, NULL },
    { "getFontWithComItextpdfTextPdfPRIndirectReference:", "getFont", "Lcom.itextpdf.text.pdf.CMapAwareDocumentFont;", 0x2, NULL },
    { "getFontWithComItextpdfTextPdfPdfDictionary:", "getFont", "Lcom.itextpdf.text.pdf.CMapAwareDocumentFont;", 0x2, NULL },
    { "populateOperators", NULL, "V", 0x2, NULL },
    { "registerContentOperatorWithNSString:withComItextpdfTextPdfParserContentOperator:", "registerContentOperator", "Lcom.itextpdf.text.pdf.parser.ContentOperator;", 0x1, NULL },
    { "reset", NULL, "V", 0x1, NULL },
    { "gs", NULL, "Lcom.itextpdf.text.pdf.parser.GraphicsState;", 0x2, NULL },
    { "invokeOperatorWithComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invokeOperator", "V", 0x2, "Ljava.lang.Exception;" },
    { "beginMarkedContentWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfDictionary:", "beginMarkedContent", "V", 0x2, NULL },
    { "endMarkedContent", NULL, "V", 0x2, NULL },
    { "decodeWithComItextpdfTextPdfPdfString:", "decode", "Ljava.lang.String;", 0x2, NULL },
    { "beginText", NULL, "V", 0x2, NULL },
    { "endText", NULL, "V", 0x2, NULL },
    { "displayPdfStringWithComItextpdfTextPdfPdfString:", "displayPdfString", "V", 0x2, NULL },
    { "displayXObjectWithComItextpdfTextPdfPdfName:", "displayXObject", "V", 0x2, "Ljava.io.IOException;" },
    { "applyTextAdjustWithFloat:", "applyTextAdjust", "V", 0x2, NULL },
    { "processContentWithByteArray:withComItextpdfTextPdfPdfDictionary:", "processContent", "V", 0x1, NULL },
    { "handleInlineImageWithComItextpdfTextPdfParserInlineImageInfo:withComItextpdfTextPdfPdfDictionary:", "handleInlineImage", "V", 0x4, NULL },
    { "getColorWithComItextpdfTextPdfPdfName:withJavaUtilList:", "getColor", "Lcom.itextpdf.text.BaseColor;", 0xa, NULL },
    { "getColorWithInt:withJavaUtilList:", "getColor", "Lcom.itextpdf.text.BaseColor;", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULTOPERATOR_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextPdfParserPdfContentStreamProcessor_DEFAULTOPERATOR_,  },
    { "operators_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "resources_", NULL, 0x2, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ResourceDictionary;", NULL,  },
    { "gsStack_", NULL, 0x12, "Ljava.util.Stack;", NULL,  },
    { "textMatrix_", NULL, 0x2, "Lcom.itextpdf.text.pdf.parser.Matrix;", NULL,  },
    { "textLineMatrix_", NULL, 0x2, "Lcom.itextpdf.text.pdf.parser.Matrix;", NULL,  },
    { "renderListener_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.RenderListener;", NULL,  },
    { "xobjectDoHandlers_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "cachedFonts_", NULL, 0x12, "Ljava.util.Map;", NULL,  },
    { "markedContentStack_", NULL, 0x12, "Ljava.util.Stack;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor = { "PdfContentStreamProcessor", "com.itextpdf.text.pdf.parser", NULL, 0x1, 22, methods, 10, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor;
}

@end


#line 413
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary

- (instancetype)init {
  if (self = [super init]) {
    resourcesStack_ = [[JavaUtilArrayList alloc] init];
  }
  return self;
}


#line 418
- (void)pushWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)resources {
  
#line 419
  [((id<JavaUtilList>) nil_chk(resourcesStack_)) addWithId:resources];
}


#line 422
- (void)pop {
  
#line 423
  (void) [resourcesStack_ removeWithInt:[((id<JavaUtilList>) nil_chk(resourcesStack_)) size] - 1];
}


#line 427
- (ComItextpdfTextPdfPdfObject *)getDirectObjectWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  for (jint i = [((id<JavaUtilList>) nil_chk(resourcesStack_)) size] - 1; i >= 0; i--) {
    ComItextpdfTextPdfPdfDictionary *subResource = [resourcesStack_ getWithInt:i];
    if (subResource != nil) {
      ComItextpdfTextPdfPdfObject *obj = [subResource getDirectObjectWithComItextpdfTextPdfPdfName:key];
      if (obj != nil) return obj;
    }
  }
  return [super getDirectObjectWithComItextpdfTextPdfPdfName:key];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary *)other {
  [super copyAllFieldsTo:other];
  other->resourcesStack_ = resourcesStack_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ResourceDictionary", NULL, 0x1, NULL },
    { "pushWithComItextpdfTextPdfPdfDictionary:", "push", "V", 0x1, NULL },
    { "pop", NULL, "V", 0x1, NULL },
    { "getDirectObjectWithComItextpdfTextPdfPdfName:", "getDirectObject", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "resourcesStack_", NULL, 0x12, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary = { "ResourceDictionary", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 4, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary;
}

@end


#line 442
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_IgnoreOperatorContentOperator


#line 443
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_IgnoreOperatorContentOperator = { "IgnoreOperatorContentOperator", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_IgnoreOperatorContentOperator;
}

@end


#line 451
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowTextArray


#line 452
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfArray *array = (ComItextpdfTextPdfPdfArray *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfArray class]);
  jfloat tj = 0;
  for (id<JavaUtilIterator> i = [((ComItextpdfTextPdfPdfArray *) nil_chk(array)) listIterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComItextpdfTextPdfPdfObject *entryObj = [i next];
    if ([entryObj isKindOfClass:[ComItextpdfTextPdfPdfString class]]) {
      [((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) displayPdfStringWithComItextpdfTextPdfPdfString:(ComItextpdfTextPdfPdfString *) check_class_cast(entryObj, [ComItextpdfTextPdfPdfString class])];
      tj = 0;
    }
    else {
      
#line 461
      tj = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast(entryObj, [ComItextpdfTextPdfPdfNumber class])))) floatValue];
      [((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) applyTextAdjustWithFloat:tj];
    }
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowTextArray = { "ShowTextArray", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowTextArray;
}

@end


#line 472
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowTextWithSpacing


#line 477
- (instancetype)initWithComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing:(ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing *)setTextWordSpacing
               withComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing:(ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing *)setTextCharacterSpacing
               withComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText:(ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText *)moveNextLineAndShowText {
  if (self = [super init]) {
    
#line 478
    self->setTextWordSpacing_ = setTextWordSpacing;
    
#line 479
    self->setTextCharacterSpacing_ = setTextCharacterSpacing;
    
#line 480
    self->moveNextLineAndShowText_ = moveNextLineAndShowText;
  }
  return self;
}


#line 483
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 484
  ComItextpdfTextPdfPdfNumber *aw = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class]);
  ComItextpdfTextPdfPdfNumber *ac = (ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:1], [ComItextpdfTextPdfPdfNumber class]);
  ComItextpdfTextPdfPdfString *string = (ComItextpdfTextPdfPdfString *) check_class_cast([operands getWithInt:2], [ComItextpdfTextPdfPdfString class]);
  
#line 488
  JavaUtilArrayList *twOperands = [[JavaUtilArrayList alloc] initWithInt:1];
  [twOperands addWithInt:0 withId:aw];
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing *) nil_chk(setTextWordSpacing_)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:twOperands];
  
#line 492
  JavaUtilArrayList *tcOperands = [[JavaUtilArrayList alloc] initWithInt:1];
  [tcOperands addWithInt:0 withId:ac];
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing *) nil_chk(setTextCharacterSpacing_)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:tcOperands];
  
#line 496
  JavaUtilArrayList *tickOperands = [[JavaUtilArrayList alloc] initWithInt:1];
  [tickOperands addWithInt:0 withId:string];
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText *) nil_chk(moveNextLineAndShowText_)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:tickOperands];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowTextWithSpacing *)other {
  [super copyAllFieldsTo:other];
  other->moveNextLineAndShowText_ = moveNextLineAndShowText_;
  other->setTextCharacterSpacing_ = setTextCharacterSpacing_;
  other->setTextWordSpacing_ = setTextWordSpacing_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing:withComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing:withComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText:", "MoveNextLineAndShowTextWithSpacing", NULL, 0x1, NULL },
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "setTextWordSpacing_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextWordSpacing;", NULL,  },
    { "setTextCharacterSpacing_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextCharacterSpacing;", NULL,  },
    { "moveNextLineAndShowText_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$MoveNextLineAndShowText;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowTextWithSpacing = { "MoveNextLineAndShowTextWithSpacing", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowTextWithSpacing;
}

@end


#line 505
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText


#line 508
- (instancetype)initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine:(ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine *)textMoveNextLine
                            withComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText:(ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText *)showText {
  if (self = [super init]) {
    
#line 509
    self->textMoveNextLine_ = textMoveNextLine;
    
#line 510
    self->showText_ = showText;
  }
  return self;
}


#line 513
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 514
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine *) nil_chk(textMoveNextLine_)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:[[JavaUtilArrayList alloc] initWithInt:0]];
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText *) nil_chk(showText_)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:operands];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText *)other {
  [super copyAllFieldsTo:other];
  other->showText_ = showText_;
  other->textMoveNextLine_ = textMoveNextLine_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine:withComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText:", "MoveNextLineAndShowText", NULL, 0x1, NULL },
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "textMoveNextLine_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$TextMoveNextLine;", NULL,  },
    { "showText_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$ShowText;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText = { "MoveNextLineAndShowText", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_MoveNextLineAndShowText;
}

@end


#line 522
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText


#line 523
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfString *string = (ComItextpdfTextPdfPdfString *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfString class]);
  
#line 526
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) displayPdfStringWithComItextpdfTextPdfPdfString:string];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText = { "ShowText", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_ShowText;
}

@end


#line 534
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine

- (instancetype)initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine:(ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine *)moveStartNextLine {
  if (self = [super init]) {
    
#line 537
    self->moveStartNextLine_ = moveStartNextLine;
  }
  return self;
}


#line 540
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 541
  JavaUtilArrayList *tdoperands = [[JavaUtilArrayList alloc] initWithInt:2];
  [tdoperands addWithInt:0 withId:[[ComItextpdfTextPdfPdfNumber alloc] initWithInt:0]];
  [tdoperands addWithInt:1 withId:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:-((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->leading_]];
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine *) nil_chk(moveStartNextLine_)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:tdoperands];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine *)other {
  [super copyAllFieldsTo:other];
  other->moveStartNextLine_ = moveStartNextLine_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine:", "TextMoveNextLine", NULL, 0x1, NULL },
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "moveStartNextLine_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$TextMoveStartNextLine;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine = { "TextMoveNextLine", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 1, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveNextLine;
}

@end


#line 551
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_TextSetTextMatrix


#line 552
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  jfloat a = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat b = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:1], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat c = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:2], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat d = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:3], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat e = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:4], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat f = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:5], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  
#line 560
  ((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->textLineMatrix_ = [[ComItextpdfTextPdfParserMatrix alloc] initWithFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f];
  processor->textMatrix_ = processor->textLineMatrix_;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_TextSetTextMatrix = { "TextSetTextMatrix", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_TextSetTextMatrix;
}

@end


#line 568
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLineWithLeading


#line 571
- (instancetype)initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine:(ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine *)moveStartNextLine
                           withComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading:(ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading *)setTextLeading {
  if (self = [super init]) {
    
#line 572
    self->moveStartNextLine_ = moveStartNextLine;
    
#line 573
    self->setTextLeading_ = setTextLeading;
  }
  return self;
}


#line 575
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 576
  jfloat ty = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:1], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  
#line 578
  JavaUtilArrayList *tlOperands = [[JavaUtilArrayList alloc] initWithInt:1];
  [tlOperands addWithInt:0 withId:[[ComItextpdfTextPdfPdfNumber alloc] initWithFloat:-ty]];
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading *) nil_chk(setTextLeading_)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:tlOperands];
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine *) nil_chk(moveStartNextLine_)) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:operands];
}

- (void)copyAllFieldsTo:(ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLineWithLeading *)other {
  [super copyAllFieldsTo:other];
  other->moveStartNextLine_ = moveStartNextLine_;
  other->setTextLeading_ = setTextLeading_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine:withComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading:", "TextMoveStartNextLineWithLeading", NULL, 0x1, NULL },
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "moveStartNextLine_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$TextMoveStartNextLine;", NULL,  },
    { "setTextLeading_", NULL, 0x12, "Lcom.itextpdf.text.pdf.parser.PdfContentStreamProcessor$SetTextLeading;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLineWithLeading = { "TextMoveStartNextLineWithLeading", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 2, fields, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLineWithLeading;
}

@end


#line 588
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine


#line 589
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  jfloat tx = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat ty = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:1], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  
#line 593
  ComItextpdfTextPdfParserMatrix *translationMatrix = [[ComItextpdfTextPdfParserMatrix alloc] initWithFloat:tx withFloat:ty];
  ((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->textMatrix_ = [translationMatrix multiplyWithComItextpdfTextPdfParserMatrix:processor->textLineMatrix_];
  processor->textLineMatrix_ = processor->textMatrix_;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine = { "TextMoveStartNextLine", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_TextMoveStartNextLine;
}

@end


#line 602
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextFont


#line 603
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfName *fontResourceName = (ComItextpdfTextPdfPdfName *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfName class]);
  jfloat size = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:1], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  
#line 607
  ComItextpdfTextPdfPdfDictionary *fontsDictionary = [((ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary *) nil_chk(((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->resources_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  ComItextpdfTextPdfCMapAwareDocumentFont *font;
  ComItextpdfTextPdfPdfObject *fontObject = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(fontsDictionary)) getWithComItextpdfTextPdfPdfName:fontResourceName];
  if ([fontObject isKindOfClass:[ComItextpdfTextPdfPdfDictionary class]])
#line 611
  font = [processor getFontWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *) check_class_cast(fontObject, [ComItextpdfTextPdfPdfDictionary class])];
  else
#line 613
  font = [processor getFontWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast(fontObject, [ComItextpdfTextPdfPRIndirectReference class])];
  
#line 615
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([processor gs]))->font_ = font;
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([processor gs]))->fontSize_ = size;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextFont = { "SetTextFont", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextFont;
}

@end


#line 624
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextRenderMode


#line 625
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfNumber *render = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class]);
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->renderMode_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk(render)) intValue];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextRenderMode = { "SetTextRenderMode", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextRenderMode;
}

@end


#line 634
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextRise


#line 635
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfNumber *rise = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class]);
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->rise_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk(rise)) floatValue];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextRise = { "SetTextRise", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextRise;
}

@end


#line 644
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading


#line 645
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfNumber *leading = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class]);
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->leading_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk(leading)) floatValue];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading = { "SetTextLeading", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextLeading;
}

@end


#line 654
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextHorizontalScaling


#line 655
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfNumber *scale_ = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class]);
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->horizontalScaling_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk(scale_)) floatValue] / 100.0f;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextHorizontalScaling = { "SetTextHorizontalScaling", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextHorizontalScaling;
}

@end


#line 664
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing


#line 665
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfNumber *charSpace = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class]);
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->characterSpacing_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk(charSpace)) floatValue];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing = { "SetTextCharacterSpacing", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextCharacterSpacing;
}

@end


#line 674
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing


#line 675
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfNumber *wordSpace = (ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class]);
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->wordSpacing_ = [((ComItextpdfTextPdfPdfNumber *) nil_chk(wordSpace)) floatValue];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing = { "SetTextWordSpacing", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetTextWordSpacing;
}

@end


#line 684
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_ProcessGraphicsStateResource


#line 685
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 687
  ComItextpdfTextPdfPdfName *dictionaryName = (ComItextpdfTextPdfPdfName *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfName class]);
  ComItextpdfTextPdfPdfDictionary *extGState = [((ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary *) nil_chk(((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->resources_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_EXTGSTATE_()];
  if (extGState == nil)
#line 690
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"resources.do.not.contain.extgstate.entry.unable.to.process.operator.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ operator_ } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  ComItextpdfTextPdfPdfDictionary *gsDic = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(extGState)) getAsDictWithComItextpdfTextPdfPdfName:dictionaryName];
  if (gsDic == nil)
#line 693
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"1.is.an.unknown.graphics.state.dictionary" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ dictionaryName } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
  
#line 696
  ComItextpdfTextPdfPdfArray *fontParameter = [((ComItextpdfTextPdfPdfDictionary *) nil_chk(gsDic)) getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_FONT_()];
  if (fontParameter != nil) {
    ComItextpdfTextPdfCMapAwareDocumentFont *font = [processor getFontWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *) check_class_cast([fontParameter getPdfObjectWithInt:0], [ComItextpdfTextPdfPRIndirectReference class])];
    jfloat size = [((ComItextpdfTextPdfPdfNumber *) nil_chk([fontParameter getAsNumberWithInt:1])) floatValue];
    
#line 701
    ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([processor gs]))->font_ = font;
    ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([processor gs]))->fontSize_ = size;
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_ProcessGraphicsStateResource = { "ProcessGraphicsStateResource", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_ProcessGraphicsStateResource;
}

@end


#line 710
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_PushGraphicsState


#line 711
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfParserGraphicsState *gs = [((JavaUtilStack *) nil_chk(((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->gsStack_)) peek];
  ComItextpdfTextPdfParserGraphicsState *copy_ = [[ComItextpdfTextPdfParserGraphicsState alloc] initWithComItextpdfTextPdfParserGraphicsState:gs];
  (void) [processor->gsStack_ pushWithId:copy_];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_PushGraphicsState = { "PushGraphicsState", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_PushGraphicsState;
}

@end


#line 721
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_ModifyCurrentTransformationMatrix


#line 722
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  jfloat a = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat b = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:1], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat c = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:2], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat d = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:3], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat e = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:4], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  jfloat f = [((ComItextpdfTextPdfPdfNumber *) nil_chk(((ComItextpdfTextPdfPdfNumber *) check_class_cast([operands getWithInt:5], [ComItextpdfTextPdfPdfNumber class])))) floatValue];
  ComItextpdfTextPdfParserMatrix *matrix = [[ComItextpdfTextPdfParserMatrix alloc] initWithFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f];
  ComItextpdfTextPdfParserGraphicsState *gs = [((JavaUtilStack *) nil_chk(((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->gsStack_)) peek];
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk(gs))->ctm_ = [matrix multiplyWithComItextpdfTextPdfParserMatrix:gs->ctm_];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_ModifyCurrentTransformationMatrix = { "ModifyCurrentTransformationMatrix", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_ModifyCurrentTransformationMatrix;
}

@end


#line 773
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetGrayFill


#line 774
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->fillColor_ = [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:1 withJavaUtilList:operands];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetGrayFill = { "SetGrayFill", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetGrayFill;
}

@end


#line 782
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetGrayStroke


#line 783
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->strokeColor_ = [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:1 withJavaUtilList:operands];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetGrayStroke = { "SetGrayStroke", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetGrayStroke;
}

@end


#line 791
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetRGBFill


#line 792
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->fillColor_ = [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:3 withJavaUtilList:operands];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetRGBFill = { "SetRGBFill", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetRGBFill;
}

@end


#line 800
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetRGBStroke


#line 801
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->strokeColor_ = [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:3 withJavaUtilList:operands];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetRGBStroke = { "SetRGBStroke", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetRGBStroke;
}

@end


#line 809
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetCMYKFill


#line 810
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->fillColor_ = [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:4 withJavaUtilList:operands];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetCMYKFill = { "SetCMYKFill", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetCMYKFill;
}

@end


#line 818
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetCMYKStroke


#line 819
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->strokeColor_ = [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithInt:4 withJavaUtilList:operands];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetCMYKStroke = { "SetCMYKStroke", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetCMYKStroke;
}

@end


#line 827
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorSpaceFill


#line 828
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->colorSpaceFill_ = (ComItextpdfTextPdfPdfName *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfName class]);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorSpaceFill = { "SetColorSpaceFill", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorSpaceFill;
}

@end


#line 836
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorSpaceStroke


#line 837
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->colorSpaceStroke_ = (ComItextpdfTextPdfPdfName *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfName class]);
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorSpaceStroke = { "SetColorSpaceStroke", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorSpaceStroke;
}

@end


#line 845
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorFill


#line 846
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->fillColor_ = [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithComItextpdfTextPdfPdfName:((ComItextpdfTextPdfParserGraphicsState *) nil_chk([processor gs]))->colorSpaceFill_ withJavaUtilList:operands];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorFill = { "SetColorFill", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorFill;
}

@end


#line 854
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorStroke


#line 855
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->strokeColor_ = [ComItextpdfTextPdfParserPdfContentStreamProcessor getColorWithComItextpdfTextPdfPdfName:((ComItextpdfTextPdfParserGraphicsState *) nil_chk([processor gs]))->colorSpaceStroke_ withJavaUtilList:operands];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorStroke = { "SetColorStroke", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_SetColorStroke;
}

@end


#line 863
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_PopGraphicsState


#line 864
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  (void) [((JavaUtilStack *) nil_chk(((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->gsStack_)) pop];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_PopGraphicsState = { "PopGraphicsState", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_PopGraphicsState;
}

@end


#line 872
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginText


#line 873
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->textMatrix_ = [[ComItextpdfTextPdfParserMatrix alloc] init];
  processor->textLineMatrix_ = processor->textMatrix_;
  [processor beginText];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginText = { "BeginText", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginText;
}

@end


#line 883
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_EndText


#line 884
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->textMatrix_ = nil;
  processor->textLineMatrix_ = nil;
  [processor endText];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_EndText = { "EndText", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_EndText;
}

@end


#line 895
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginMarkedContent

- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 900
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) beginMarkedContentWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfName class]) withComItextpdfTextPdfPdfDictionary:[[ComItextpdfTextPdfPdfDictionary alloc] init]];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, "Ljava.lang.Exception;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginMarkedContent = { "BeginMarkedContent", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginMarkedContent;
}

@end


#line 909
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginMarkedContentDictionary

- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 915
  ComItextpdfTextPdfPdfObject *properties = [((JavaUtilArrayList *) nil_chk(operands)) getWithInt:1];
  
#line 917
  [processor beginMarkedContentWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *) check_class_cast([operands getWithInt:0], [ComItextpdfTextPdfPdfName class]) withComItextpdfTextPdfPdfDictionary:[self getPropertiesDictionaryWithComItextpdfTextPdfPdfObject:properties withComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary:((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->resources_]];
}


#line 920
- (ComItextpdfTextPdfPdfDictionary *)getPropertiesDictionaryWithComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)operand1
                   withComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary:(ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary *)resources {
  
#line 921
  if ([((ComItextpdfTextPdfPdfObject *) nil_chk(operand1)) isDictionary])
#line 922
  return (ComItextpdfTextPdfPdfDictionary *) check_class_cast(operand1, [ComItextpdfTextPdfPdfDictionary class]);
  
#line 924
  ComItextpdfTextPdfPdfName *dictionaryName = ((ComItextpdfTextPdfPdfName *) check_class_cast(operand1, [ComItextpdfTextPdfPdfName class]));
  return [((ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary *) nil_chk(resources)) getAsDictWithComItextpdfTextPdfPdfName:dictionaryName];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, "Ljava.lang.Exception;" },
    { "getPropertiesDictionaryWithComItextpdfTextPdfPdfObject:withComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary:", "getPropertiesDictionary", "Lcom.itextpdf.text.pdf.PdfDictionary;", 0x2, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginMarkedContentDictionary = { "BeginMarkedContentDictionary", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 3, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_BeginMarkedContentDictionary;
}

@end


#line 933
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_EndMarkedContent


#line 934
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  
#line 937
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) endMarkedContent];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, "Ljava.lang.Exception;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_EndMarkedContent = { "EndMarkedContent", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_EndMarkedContent;
}

@end


#line 944
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_Do


#line 945
- (void)invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                   withComItextpdfTextPdfPdfLiteral:(ComItextpdfTextPdfPdfLiteral *)operator_
                                              withJavaUtilArrayList:(JavaUtilArrayList *)operands {
  ComItextpdfTextPdfPdfName *xobjectName = (ComItextpdfTextPdfPdfName *) check_class_cast([((JavaUtilArrayList *) nil_chk(operands)) getWithInt:0], [ComItextpdfTextPdfPdfName class]);
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) displayXObjectWithComItextpdfTextPdfPdfName:xobjectName];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfLiteral:withJavaUtilArrayList:", "invoke", "V", 0x1, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_Do = { "Do", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_Do;
}

@end


#line 954
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_FormXObjectDoHandler

- (void)handleXObjectWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                           withComItextpdfTextPdfPdfStream:(ComItextpdfTextPdfPdfStream *)stream
                                withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
  
#line 958
  ComItextpdfTextPdfPdfDictionary *resources = [((ComItextpdfTextPdfPdfStream *) nil_chk(stream)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_RESOURCES_()];
  
#line 963
  IOSByteArray *contentBytes;
  @try {
    contentBytes = [ComItextpdfTextPdfParserContentByteUtils getContentBytesFromContentObjectWithComItextpdfTextPdfPdfObject:stream];
  }
  @catch (
#line 966
  JavaIoIOException *e1) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:e1];
  }
  ComItextpdfTextPdfPdfArray *matrix = [stream getAsArrayWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_MATRIX_()];
  
#line 971
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_PushGraphicsState *) [[ComItextpdfTextPdfParserPdfContentStreamProcessor_PushGraphicsState alloc] init]) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:nil];
  
#line 973
  if (matrix != nil) {
    jfloat a = [((ComItextpdfTextPdfPdfNumber *) nil_chk([matrix getAsNumberWithInt:0])) floatValue];
    jfloat b = [((ComItextpdfTextPdfPdfNumber *) nil_chk([matrix getAsNumberWithInt:1])) floatValue];
    jfloat c = [((ComItextpdfTextPdfPdfNumber *) nil_chk([matrix getAsNumberWithInt:2])) floatValue];
    jfloat d = [((ComItextpdfTextPdfPdfNumber *) nil_chk([matrix getAsNumberWithInt:3])) floatValue];
    jfloat e = [((ComItextpdfTextPdfPdfNumber *) nil_chk([matrix getAsNumberWithInt:4])) floatValue];
    jfloat f = [((ComItextpdfTextPdfPdfNumber *) nil_chk([matrix getAsNumberWithInt:5])) floatValue];
    ComItextpdfTextPdfParserMatrix *formMatrix = [[ComItextpdfTextPdfParserMatrix alloc] initWithFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f];
    
#line 982
    ((ComItextpdfTextPdfParserGraphicsState *) nil_chk([((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) gs]))->ctm_ = [formMatrix multiplyWithComItextpdfTextPdfParserMatrix:((ComItextpdfTextPdfParserGraphicsState *) nil_chk([processor gs]))->ctm_];
  }
  
#line 985
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor)) processContentWithByteArray:contentBytes withComItextpdfTextPdfPdfDictionary:resources];
  
#line 987
  [((ComItextpdfTextPdfParserPdfContentStreamProcessor_PopGraphicsState *) [[ComItextpdfTextPdfParserPdfContentStreamProcessor_PopGraphicsState alloc] init]) invokeWithComItextpdfTextPdfParserPdfContentStreamProcessor:processor withComItextpdfTextPdfPdfLiteral:nil withJavaUtilArrayList:nil];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "handleXObjectWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfStream:withComItextpdfTextPdfPdfIndirectReference:", "handleXObject", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_FormXObjectDoHandler = { "FormXObjectDoHandler", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_FormXObjectDoHandler;
}

@end


#line 996
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_ImageXObjectDoHandler

- (void)handleXObjectWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                           withComItextpdfTextPdfPdfStream:(ComItextpdfTextPdfPdfStream *)xobjectStream
                                withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
  
#line 999
  ComItextpdfTextPdfPdfDictionary *colorSpaceDic = [((ComItextpdfTextPdfParserPdfContentStreamProcessor_ResourceDictionary *) nil_chk(((ComItextpdfTextPdfParserPdfContentStreamProcessor *) nil_chk(processor))->resources_)) getAsDictWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_COLORSPACE_()];
  ComItextpdfTextPdfParserImageRenderInfo *renderInfo = [ComItextpdfTextPdfParserImageRenderInfo createForXObjectWithComItextpdfTextPdfParserMatrix:((ComItextpdfTextPdfParserGraphicsState *) nil_chk([processor gs]))->ctm_ withComItextpdfTextPdfPdfIndirectReference:ref withComItextpdfTextPdfPdfDictionary:colorSpaceDic];
  [((id<ComItextpdfTextPdfParserRenderListener>) nil_chk(processor->renderListener_)) renderImageWithComItextpdfTextPdfParserImageRenderInfo:renderInfo];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "handleXObjectWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfStream:withComItextpdfTextPdfPdfIndirectReference:", "handleXObject", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_ImageXObjectDoHandler = { "ImageXObjectDoHandler", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_ImageXObjectDoHandler;
}

@end


#line 1008
@implementation ComItextpdfTextPdfParserPdfContentStreamProcessor_IgnoreXObjectDoHandler


#line 1009
- (void)handleXObjectWithComItextpdfTextPdfParserPdfContentStreamProcessor:(ComItextpdfTextPdfParserPdfContentStreamProcessor *)processor
                                           withComItextpdfTextPdfPdfStream:(ComItextpdfTextPdfPdfStream *)xobjectStream
                                withComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)ref {
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "handleXObjectWithComItextpdfTextPdfParserPdfContentStreamProcessor:withComItextpdfTextPdfPdfStream:withComItextpdfTextPdfPdfIndirectReference:", "handleXObject", "V", 0x1, NULL },
    { "init", NULL, NULL, 0x2, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfParserPdfContentStreamProcessor_IgnoreXObjectDoHandler = { "IgnoreXObjectDoHandler", "com.itextpdf.text.pdf.parser", "PdfContentStreamProcessor", 0xa, 2, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfParserPdfContentStreamProcessor_IgnoreXObjectDoHandler;
}

@end
