//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfEncryptor.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/pdf/PdfEncryptor.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/pdf/PdfEncryptor.h"
#include "com/itextpdf/text/pdf/PdfReader.h"
#include "com/itextpdf/text/pdf/PdfStamper.h"
#include "com/itextpdf/text/pdf/PdfWriter.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"


#line 59
@implementation ComItextpdfTextPdfPdfEncryptor

- (instancetype)init {
  return [super init];
}


#line 91
+ (void)encryptWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                 withByteArray:(IOSByteArray *)userPassword
                                 withByteArray:(IOSByteArray *)ownerPassword
                                       withInt:(jint)permissions
                                   withBoolean:(jboolean)strength128Bits {
  
#line 94
  ComItextpdfTextPdfPdfStamper *stamper = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os];
  [stamper setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withBoolean:strength128Bits];
  [stamper close];
}


#line 131
+ (void)encryptWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                 withByteArray:(IOSByteArray *)userPassword
                                 withByteArray:(IOSByteArray *)ownerPassword
                                       withInt:(jint)permissions
                                   withBoolean:(jboolean)strength128Bits
                           withJavaUtilHashMap:(JavaUtilHashMap *)newInfo {
  
#line 134
  ComItextpdfTextPdfPdfStamper *stamper = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os];
  [stamper setEncryptionWithByteArray:userPassword withByteArray:ownerPassword withInt:permissions withBoolean:strength128Bits];
  [stamper setMoreInfoWithJavaUtilMap:newInfo];
  [stamper close];
}


#line 167
+ (void)encryptWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                   withBoolean:(jboolean)strength
                                  withNSString:(NSString *)userPassword
                                  withNSString:(NSString *)ownerPassword
                                       withInt:(jint)permissions {
  
#line 170
  ComItextpdfTextPdfPdfStamper *stamper = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os];
  [stamper setEncryptionWithBoolean:strength withNSString:userPassword withNSString:ownerPassword withInt:permissions];
  [stamper close];
}


#line 207
+ (void)encryptWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                   withBoolean:(jboolean)strength
                                  withNSString:(NSString *)userPassword
                                  withNSString:(NSString *)ownerPassword
                                       withInt:(jint)permissions
                           withJavaUtilHashMap:(JavaUtilHashMap *)newInfo {
  
#line 210
  ComItextpdfTextPdfPdfStamper *stamper = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os];
  [stamper setEncryptionWithBoolean:strength withNSString:userPassword withNSString:ownerPassword withInt:permissions];
  [stamper setMoreInfoWithJavaUtilMap:newInfo];
  [stamper close];
}


#line 250
+ (void)encryptWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                       withInt:(jint)type
                                  withNSString:(NSString *)userPassword
                                  withNSString:(NSString *)ownerPassword
                                       withInt:(jint)permissions
                           withJavaUtilHashMap:(JavaUtilHashMap *)newInfo {
  
#line 253
  ComItextpdfTextPdfPdfStamper *stamper = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os];
  [stamper setEncryptionWithInt:type withNSString:userPassword withNSString:ownerPassword withInt:permissions];
  [stamper setMoreInfoWithJavaUtilMap:newInfo];
  [stamper close];
}


#line 289
+ (void)encryptWithComItextpdfTextPdfPdfReader:(ComItextpdfTextPdfPdfReader *)reader
                        withJavaIoOutputStream:(JavaIoOutputStream *)os
                                       withInt:(jint)type
                                  withNSString:(NSString *)userPassword
                                  withNSString:(NSString *)ownerPassword
                                       withInt:(jint)permissions {
  
#line 291
  ComItextpdfTextPdfPdfStamper *stamper = [[ComItextpdfTextPdfPdfStamper alloc] initWithComItextpdfTextPdfPdfReader:reader withJavaIoOutputStream:os];
  [stamper setEncryptionWithInt:type withNSString:userPassword withNSString:ownerPassword withInt:permissions];
  [stamper close];
}


#line 303
+ (NSString *)getPermissionsVerboseWithInt:(jint)permissions {
  
#line 304
  JavaLangStringBuffer *buf = [[JavaLangStringBuffer alloc] initWithNSString:@"Allowed:"];
  if ((ComItextpdfTextPdfPdfWriter_ALLOW_PRINTING & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_PRINTING)
#line 306
  (void) [buf appendWithNSString:@" Printing"];
  if ((ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_CONTENTS & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_CONTENTS)
#line 308
  (void) [buf appendWithNSString:@" Modify contents"];
  if ((ComItextpdfTextPdfPdfWriter_ALLOW_COPY & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_COPY)
#line 310
  (void) [buf appendWithNSString:@" Copy"];
  if ((ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_ANNOTATIONS & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_ANNOTATIONS)
#line 312
  (void) [buf appendWithNSString:@" Modify annotations"];
  if ((ComItextpdfTextPdfPdfWriter_ALLOW_FILL_IN & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_FILL_IN)
#line 314
  (void) [buf appendWithNSString:@" Fill in"];
  if ((ComItextpdfTextPdfPdfWriter_ALLOW_SCREENREADERS & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_SCREENREADERS)
#line 316
  (void) [buf appendWithNSString:@" Screen readers"];
  if ((ComItextpdfTextPdfPdfWriter_ALLOW_ASSEMBLY & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_ASSEMBLY)
#line 318
  (void) [buf appendWithNSString:@" Assembly"];
  if ((ComItextpdfTextPdfPdfWriter_ALLOW_DEGRADED_PRINTING & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_DEGRADED_PRINTING)
#line 320
  (void) [buf appendWithNSString:@" Degraded printing"];
  return [buf description];
}


#line 333
+ (jboolean)isPrintingAllowedWithInt:(jint)permissions {
  return (ComItextpdfTextPdfPdfWriter_ALLOW_PRINTING & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_PRINTING;
}


#line 346
+ (jboolean)isModifyContentsAllowedWithInt:(jint)permissions {
  
#line 347
  return (ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_CONTENTS & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_CONTENTS;
}


#line 359
+ (jboolean)isCopyAllowedWithInt:(jint)permissions {
  
#line 360
  return (ComItextpdfTextPdfPdfWriter_ALLOW_COPY & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_COPY;
}


#line 372
+ (jboolean)isModifyAnnotationsAllowedWithInt:(jint)permissions {
  
#line 373
  return (ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_ANNOTATIONS & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_MODIFY_ANNOTATIONS;
}


#line 385
+ (jboolean)isFillInAllowedWithInt:(jint)permissions {
  
#line 386
  return (ComItextpdfTextPdfPdfWriter_ALLOW_FILL_IN & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_FILL_IN;
}


#line 398
+ (jboolean)isScreenReadersAllowedWithInt:(jint)permissions {
  
#line 399
  return (ComItextpdfTextPdfPdfWriter_ALLOW_SCREENREADERS & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_SCREENREADERS;
}


#line 411
+ (jboolean)isAssemblyAllowedWithInt:(jint)permissions {
  
#line 412
  return (ComItextpdfTextPdfPdfWriter_ALLOW_ASSEMBLY & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_ASSEMBLY;
}


#line 424
+ (jboolean)isDegradedPrintingAllowedWithInt:(jint)permissions {
  
#line 425
  return (ComItextpdfTextPdfPdfWriter_ALLOW_DEGRADED_PRINTING & permissions) == ComItextpdfTextPdfPdfWriter_ALLOW_DEGRADED_PRINTING;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PdfEncryptor", NULL, 0x2, NULL },
    { "encryptWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withByteArray:withByteArray:withInt:withBoolean:", "encrypt", "V", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "encryptWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withByteArray:withByteArray:withInt:withBoolean:withJavaUtilHashMap:", "encrypt", "V", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "encryptWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withBoolean:withNSString:withNSString:withInt:", "encrypt", "V", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "encryptWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withBoolean:withNSString:withNSString:withInt:withJavaUtilHashMap:", "encrypt", "V", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "encryptWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withInt:withNSString:withNSString:withInt:withJavaUtilHashMap:", "encrypt", "V", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "encryptWithComItextpdfTextPdfPdfReader:withJavaIoOutputStream:withInt:withNSString:withNSString:withInt:", "encrypt", "V", 0x9, "Lcom.itextpdf.text.DocumentException;Ljava.io.IOException;" },
    { "getPermissionsVerboseWithInt:", "getPermissionsVerbose", "Ljava.lang.String;", 0x9, NULL },
    { "isPrintingAllowedWithInt:", "isPrintingAllowed", "Z", 0x9, NULL },
    { "isModifyContentsAllowedWithInt:", "isModifyContentsAllowed", "Z", 0x9, NULL },
    { "isCopyAllowedWithInt:", "isCopyAllowed", "Z", 0x9, NULL },
    { "isModifyAnnotationsAllowedWithInt:", "isModifyAnnotationsAllowed", "Z", 0x9, NULL },
    { "isFillInAllowedWithInt:", "isFillInAllowed", "Z", 0x9, NULL },
    { "isScreenReadersAllowedWithInt:", "isScreenReadersAllowed", "Z", 0x9, NULL },
    { "isAssemblyAllowedWithInt:", "isAssemblyAllowed", "Z", 0x9, NULL },
    { "isDegradedPrintingAllowedWithInt:", "isDegradedPrintingAllowed", "Z", 0x9, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextPdfPdfEncryptor = { "PdfEncryptor", "com.itextpdf.text.pdf", NULL, 0x11, 16, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextPdfPdfEncryptor;
}

@end
