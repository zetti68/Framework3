//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/SpecialSymbol.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/SpecialSymbol.java"

#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/SpecialSymbol.h"


#line 63
@implementation ComItextpdfTextSpecialSymbol


#line 71
+ (jint)indexWithNSString:(NSString *)string {
  
#line 72
  jint length = ((jint) [((NSString *) nil_chk(string)) length]);
  for (jint i = 0; i < length; i++) {
    if ([ComItextpdfTextSpecialSymbol getCorrespondingSymbolWithChar:[string charAtWithInt:i]] != ' ') {
      return i;
    }
  }
  return -1;
}


#line 87
+ (ComItextpdfTextChunk *)getWithChar:(jchar)c
              withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  
#line 88
  jchar greek = [ComItextpdfTextSpecialSymbol getCorrespondingSymbolWithChar:c];
  if (greek == ' ') {
    return [[ComItextpdfTextChunk alloc] initWithNSString:[NSString valueOfChar:c] withComItextpdfTextFont:font];
  }
  ComItextpdfTextFont *symbol = [[ComItextpdfTextFont alloc] initWithComItextpdfTextFont_FontFamilyEnum:ComItextpdfTextFont_FontFamilyEnum_get_SYMBOL() withFloat:[((ComItextpdfTextFont *) nil_chk(font)) getSize] withInt:[font getStyle] withComItextpdfTextBaseColor:[font getColor]];
  NSString *s = [NSString valueOfChar:greek];
  return [[ComItextpdfTextChunk alloc] initWithNSString:s withComItextpdfTextFont:symbol];
}


#line 103
+ (jchar)getCorrespondingSymbolWithChar:(jchar)c {
  
#line 104
  switch (c) {
    case 913:
    return 'A';
    case 914:
    return 'B';
    case 915:
    return 'G';
    case 916:
    return 'D';
    case 917:
    return 'E';
    case 918:
    return 'Z';
    case 919:
    return 'H';
    case 920:
    return 'Q';
    case 921:
    return 'I';
    case 922:
    return 'K';
    case 923:
    return 'L';
    case 924:
    return 'M';
    case 925:
    return 'N';
    case 926:
    return 'X';
    case 927:
    return 'O';
    case 928:
    return 'P';
    case 929:
    return 'R';
    case 931:
    return 'S';
    case 932:
    return 'T';
    case 933:
    return 'U';
    case 934:
    return 'F';
    case 935:
    return 'C';
    case 936:
    return 'Y';
    case 937:
    return 'W';
    case 945:
    return 'a';
    case 946:
    return 'b';
    case 947:
    return 'g';
    case 948:
    return 'd';
    case 949:
    return 'e';
    case 950:
    return 'z';
    case 951:
    return 'h';
    case 952:
    return 'q';
    case 953:
    return 'i';
    case 954:
    return 'k';
    case 955:
    return 'l';
    case 956:
    return 'm';
    case 957:
    return 'n';
    case 958:
    return 'x';
    case 959:
    return 'o';
    case 960:
    return 'p';
    case 961:
    return 'r';
    case 962:
    return 'V';
    case 963:
    return 's';
    case 964:
    return 't';
    case 965:
    return 'u';
    case 966:
    return 'f';
    case 967:
    return 'c';
    case 968:
    return 'y';
    case 969:
    return 'w';
    default:
    return ' ';
  }
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "indexWithNSString:", "index", "I", 0x9, NULL },
    { "getWithChar:withComItextpdfTextFont:", "get", "Lcom.itextpdf.text.Chunk;", 0x9, NULL },
    { "getCorrespondingSymbolWithChar:", "getCorrespondingSymbol", "C", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextSpecialSymbol = { "SpecialSymbol", "com.itextpdf.text", NULL, 0x1, 4, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextSpecialSymbol;
}

@end
