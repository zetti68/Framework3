//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/DocWriter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/DocWriter.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/DocWriter.h"
#include "com/itextpdf/text/Document.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/pdf/OutputStreamCounter.h"
#include "java/io/BufferedOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/util/Iterator.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"


#line 71
@implementation ComItextpdfTextDocWriter


#line 119
- (instancetype)init {
  if (self = [super init]) {
    open__ =
#line 109
    NO;
    pause__ =
#line 112
    NO;
    closeStream_ =
#line 115
    YES;
  }
  return self;
}


#line 129
- (instancetype)initWithComItextpdfTextDocument:(ComItextpdfTextDocument *)document
                         withJavaIoOutputStream:(JavaIoOutputStream *)os {
  if (self = [super init]) {
    open__ =
#line 109
    NO;
    pause__ =
#line 112
    NO;
    closeStream_ =
#line 115
    YES;
    
#line 130
    self->document_ = document;
    
#line 131
    self->os_ = [[ComItextpdfTextPdfOutputStreamCounter alloc] initWithJavaIoOutputStream:[[JavaIoBufferedOutputStream alloc] initWithJavaIoOutputStream:os]];
  }
  return self;
}


#line 147
- (jboolean)addWithComItextpdfTextElement:(id<ComItextpdfTextElement>)element {
  
#line 148
  return NO;
}


#line 155
- (void)open {
  
#line 156
  open__ = YES;
}


#line 166
- (jboolean)setPageSizeWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)pageSize {
  
#line 167
  self->pageSize_ = pageSize;
  return YES;
}


#line 183
- (jboolean)setMarginsWithFloat:(jfloat)marginLeft
                      withFloat:(jfloat)marginRight
                      withFloat:(jfloat)marginTop
                      withFloat:(jfloat)marginBottom {
  
#line 184
  return NO;
}


#line 195
- (jboolean)newPage {
  
#line 196
  if (!open__) {
    return NO;
  }
  return YES;
}


#line 210
- (void)resetPageCount {
}


#line 223
- (void)setPageCountWithInt:(jint)pageN {
}


#line 231
- (void)close {
  
#line 232
  open__ = NO;
  @try {
    [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) flush];
    if (closeStream_)
#line 236
    [os_ close];
  }
  @catch (JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
}


#line 251
+ (IOSByteArray *)getISOBytesWithNSString:(NSString *)text {
  
#line 253
  if (text == nil)
#line 254
  return nil;
  jint len = ((jint) [((NSString *) nil_chk(text)) length]);
  IOSByteArray *b = [IOSByteArray arrayWithLength:len];
  for (jint k = 0; k < len; ++k)
#line 258
  *IOSByteArray_GetRef(b, k) = (jbyte) [text charAtWithInt:k];
  return b;
}


#line 266
- (void)pause {
  
#line 267
  pause__ = YES;
}


#line 276
- (jboolean)isPaused {
  
#line 277
  return pause__;
}


#line 284
- (void)resume {
  
#line 285
  pause__ = NO;
}


#line 292
- (void)flush {
  
#line 293
  @try {
    [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) flush];
  }
  @catch (JavaIoIOException *ioe) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ioe];
  }
}


#line 308
- (void)writeWithNSString:(NSString *)string {
  
#line 309
  [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) writeWithByteArray:[ComItextpdfTextDocWriter getISOBytesWithNSString:string]];
}


#line 319
- (void)addTabsWithInt:(jint)indent {
  
#line 320
  [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) writeWithInt:ComItextpdfTextDocWriter_NEWLINE];
  for (jint i = 0; i < indent; i++) {
    [os_ writeWithInt:ComItextpdfTextDocWriter_TAB];
  }
}


#line 334
- (void)writeWithNSString:(NSString *)key
             withNSString:(NSString *)value {
  
#line 336
  [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) writeWithInt:ComItextpdfTextDocWriter_SPACE];
  [self writeWithNSString:key];
  [os_ writeWithInt:ComItextpdfTextDocWriter_EQUALS];
  [os_ writeWithInt:ComItextpdfTextDocWriter_QUOTE];
  [self writeWithNSString:value];
  [os_ writeWithInt:ComItextpdfTextDocWriter_QUOTE];
}


#line 351
- (void)writeStartWithNSString:(NSString *)tag {
  
#line 353
  [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) writeWithInt:ComItextpdfTextDocWriter_LT];
  [self writeWithNSString:tag];
}


#line 364
- (void)writeEndWithNSString:(NSString *)tag {
  
#line 366
  [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) writeWithInt:ComItextpdfTextDocWriter_LT];
  [os_ writeWithInt:ComItextpdfTextDocWriter_FORWARD];
  [self writeWithNSString:tag];
  [os_ writeWithInt:ComItextpdfTextDocWriter_GT];
}


#line 377
- (void)writeEnd {
  
#line 379
  [((ComItextpdfTextPdfOutputStreamCounter *) nil_chk(os_)) writeWithInt:ComItextpdfTextDocWriter_SPACE];
  [os_ writeWithInt:ComItextpdfTextDocWriter_FORWARD];
  [os_ writeWithInt:ComItextpdfTextDocWriter_GT];
}


#line 391
- (jboolean)writeMarkupAttributesWithJavaUtilProperties:(JavaUtilProperties *)markup {
  
#line 393
  if (markup == nil) return NO;
  id<JavaUtilIterator> attributeIterator = [((id<JavaUtilSet>) nil_chk([((JavaUtilProperties *) nil_chk(markup)) keySet])) iterator];
  NSString *name;
  while ([((id<JavaUtilIterator>) nil_chk(attributeIterator)) hasNext]) {
    name = [NSString valueOf:[attributeIterator next]];
    [self writeWithNSString:name withNSString:[markup getPropertyWithNSString:name]];
  }
  [markup clear];
  return YES;
}


#line 408
- (jboolean)isCloseStream {
  
#line 409
  return closeStream_;
}


#line 416
- (void)setCloseStreamWithBoolean:(jboolean)closeStream {
  
#line 417
  self->closeStream_ = closeStream;
}


#line 423
- (jboolean)setMarginMirroringWithBoolean:(jboolean)MarginMirroring {
  
#line 424
  return NO;
}


#line 431
- (jboolean)setMarginMirroringTopBottomWithBoolean:(jboolean)MarginMirroring {
  
#line 432
  return NO;
}

- (void)copyAllFieldsTo:(ComItextpdfTextDocWriter *)other {
  [super copyAllFieldsTo:other];
  other->closeStream_ = closeStream_;
  other->document_ = document_;
  other->open__ = open__;
  other->os_ = os_;
  other->pageSize_ = pageSize_;
  other->pause__ = pause__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "DocWriter", NULL, 0x4, NULL },
    { "initWithComItextpdfTextDocument:withJavaIoOutputStream:", "DocWriter", NULL, 0x4, NULL },
    { "addWithComItextpdfTextElement:", "add", "Z", 0x1, "Lcom.itextpdf.text.DocumentException;" },
    { "open", NULL, "V", 0x1, NULL },
    { "setPageSizeWithComItextpdfTextRectangle:", "setPageSize", "Z", 0x1, NULL },
    { "setMarginsWithFloat:withFloat:withFloat:withFloat:", "setMargins", "Z", 0x1, NULL },
    { "newPage", NULL, "Z", 0x1, NULL },
    { "resetPageCount", NULL, "V", 0x1, NULL },
    { "setPageCountWithInt:", "setPageCount", "V", 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "getISOBytesWithNSString:", "getISOBytes", "[B", 0x19, NULL },
    { "pause", NULL, "V", 0x1, NULL },
    { "isPaused", NULL, "Z", 0x1, NULL },
    { "resume", NULL, "V", 0x1, NULL },
    { "flush", NULL, "V", 0x1, NULL },
    { "writeWithNSString:", "write", "V", 0x4, "Ljava.io.IOException;" },
    { "addTabsWithInt:", "addTabs", "V", 0x4, "Ljava.io.IOException;" },
    { "writeWithNSString:withNSString:", "write", "V", 0x4, "Ljava.io.IOException;" },
    { "writeStartWithNSString:", "writeStart", "V", 0x4, "Ljava.io.IOException;" },
    { "writeEndWithNSString:", "writeEnd", "V", 0x4, "Ljava.io.IOException;" },
    { "writeEnd", NULL, "V", 0x4, "Ljava.io.IOException;" },
    { "writeMarkupAttributesWithJavaUtilProperties:", "writeMarkupAttributes", "Z", 0x4, "Ljava.io.IOException;" },
    { "isCloseStream", NULL, "Z", 0x1, NULL },
    { "setCloseStreamWithBoolean:", "setCloseStream", "V", 0x1, NULL },
    { "setMarginMirroringWithBoolean:", "setMarginMirroring", "Z", 0x1, NULL },
    { "setMarginMirroringTopBottomWithBoolean:", "setMarginMirroringTopBottom", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NEWLINE_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextDocWriter_NEWLINE },
    { "TAB_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextDocWriter_TAB },
    { "LT_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextDocWriter_LT },
    { "SPACE_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextDocWriter_SPACE },
    { "EQUALS_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextDocWriter_EQUALS },
    { "QUOTE_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextDocWriter_QUOTE },
    { "GT_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextDocWriter_GT },
    { "FORWARD_", NULL, 0x19, "B", NULL, .constantValue.asChar = ComItextpdfTextDocWriter_FORWARD },
    { "pageSize_", NULL, 0x4, "Lcom.itextpdf.text.Rectangle;", NULL,  },
    { "document_", NULL, 0x4, "Lcom.itextpdf.text.Document;", NULL,  },
    { "os_", NULL, 0x4, "Lcom.itextpdf.text.pdf.OutputStreamCounter;", NULL,  },
    { "open__", "open", 0x4, "Z", NULL,  },
    { "pause__", "pause", 0x4, "Z", NULL,  },
    { "closeStream_", NULL, 0x4, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextDocWriter = { "DocWriter", "com.itextpdf.text", NULL, 0x401, 26, methods, 14, fields, 0, NULL};
  return &_ComItextpdfTextDocWriter;
}

@end
