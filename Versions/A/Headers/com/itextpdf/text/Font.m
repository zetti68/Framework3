//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Font.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Font.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/ExceptionConverter.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/FontFactory.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"


#line 64
@implementation ComItextpdfTextFont


#line 160
- (instancetype)initWithComItextpdfTextFont:(ComItextpdfTextFont *)other {
  if (self = [super init]) {
    family_ = ComItextpdfTextFont_FontFamilyEnum_get_UNDEFINED();
    size_ =
#line 141
    ComItextpdfTextFont_UNDEFINED;
    style_ =
#line 144
    ComItextpdfTextFont_UNDEFINED;
    color_ =
#line 147
    nil;
    baseFont_ =
#line 150
    nil;
    
#line 161
    self->family_ = ((ComItextpdfTextFont *) nil_chk(other))->family_;
    
#line 162
    self->size_ = other->size_;
    
#line 163
    self->style_ = other->style_;
    
#line 164
    self->color_ = other->color_;
    
#line 165
    self->baseFont_ = other->baseFont_;
  }
  return self;
}


#line 182
- (instancetype)initComItextpdfTextFontWithComItextpdfTextFont_FontFamilyEnum:(ComItextpdfTextFont_FontFamilyEnum *)family
                                                                    withFloat:(jfloat)size
                                                                      withInt:(jint)style
                                                 withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  if (self = [super init]) {
    family_ = ComItextpdfTextFont_FontFamilyEnum_get_UNDEFINED();
    size_ =
#line 141
    ComItextpdfTextFont_UNDEFINED;
    style_ =
#line 144
    ComItextpdfTextFont_UNDEFINED;
    color_ =
#line 147
    nil;
    baseFont_ =
#line 150
    nil;
    
#line 183
    self->family_ = family;
    
#line 184
    self->size_ = size;
    
#line 185
    self->style_ = style;
    
#line 186
    self->color_ = color;
  }
  return self;
}

- (instancetype)initWithComItextpdfTextFont_FontFamilyEnum:(ComItextpdfTextFont_FontFamilyEnum *)family
                                                 withFloat:(jfloat)size
                                                   withInt:(jint)style
                              withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  return [self initComItextpdfTextFontWithComItextpdfTextFont_FontFamilyEnum:
#line 182
family withFloat:size withInt:style withComItextpdfTextBaseColor:color];
}


#line 202
- (instancetype)initComItextpdfTextFontWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf
                                                            withFloat:(jfloat)size
                                                              withInt:(jint)style
                                         withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  if (self = [super init]) {
    family_ = ComItextpdfTextFont_FontFamilyEnum_get_UNDEFINED();
    size_ =
#line 141
    ComItextpdfTextFont_UNDEFINED;
    style_ =
#line 144
    ComItextpdfTextFont_UNDEFINED;
    color_ =
#line 147
    nil;
    baseFont_ =
#line 150
    nil;
    
#line 203
    self->baseFont_ = bf;
    
#line 204
    self->size_ = size;
    
#line 205
    self->style_ = style;
    
#line 206
    self->color_ = color;
  }
  return self;
}

- (instancetype)initWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf
                                         withFloat:(jfloat)size
                                           withInt:(jint)style
                      withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  return [self initComItextpdfTextFontWithComItextpdfTextPdfBaseFont:
#line 202
bf withFloat:size withInt:style withComItextpdfTextBaseColor:color];
}


#line 219
- (instancetype)initWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf
                                         withFloat:(jfloat)size
                                           withInt:(jint)style {
  return
#line 220
  [self initComItextpdfTextFontWithComItextpdfTextPdfBaseFont:bf withFloat:size withInt:style withComItextpdfTextBaseColor:nil];
}


#line 231
- (instancetype)initWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf
                                         withFloat:(jfloat)size {
  return
#line 232
  [self initComItextpdfTextFontWithComItextpdfTextPdfBaseFont:bf withFloat:size withInt:ComItextpdfTextFont_UNDEFINED withComItextpdfTextBaseColor:nil];
}


#line 241
- (instancetype)initWithComItextpdfTextPdfBaseFont:(ComItextpdfTextPdfBaseFont *)bf {
  return
#line 242
  [self initComItextpdfTextFontWithComItextpdfTextPdfBaseFont:bf withFloat:ComItextpdfTextFont_UNDEFINED withInt:ComItextpdfTextFont_UNDEFINED withComItextpdfTextBaseColor:nil];
}


#line 257
- (instancetype)initWithComItextpdfTextFont_FontFamilyEnum:(ComItextpdfTextFont_FontFamilyEnum *)family
                                                 withFloat:(jfloat)size
                                                   withInt:(jint)style {
  return
#line 258
  [self initComItextpdfTextFontWithComItextpdfTextFont_FontFamilyEnum:family withFloat:size withInt:style withComItextpdfTextBaseColor:nil];
}


#line 271
- (instancetype)initWithComItextpdfTextFont_FontFamilyEnum:(ComItextpdfTextFont_FontFamilyEnum *)family
                                                 withFloat:(jfloat)size {
  return
#line 272
  [self initComItextpdfTextFontWithComItextpdfTextFont_FontFamilyEnum:family withFloat:size withInt:ComItextpdfTextFont_UNDEFINED withComItextpdfTextBaseColor:nil];
}


#line 283
- (instancetype)initWithComItextpdfTextFont_FontFamilyEnum:(ComItextpdfTextFont_FontFamilyEnum *)family {
  return
#line 284
  [self initComItextpdfTextFontWithComItextpdfTextFont_FontFamilyEnum:family withFloat:ComItextpdfTextFont_UNDEFINED withInt:ComItextpdfTextFont_UNDEFINED withComItextpdfTextBaseColor:nil];
}


#line 291
- (instancetype)init {
  return
#line 292
  [self initComItextpdfTextFontWithComItextpdfTextFont_FontFamilyEnum:ComItextpdfTextFont_FontFamilyEnum_get_UNDEFINED() withFloat:ComItextpdfTextFont_UNDEFINED withInt:ComItextpdfTextFont_UNDEFINED withComItextpdfTextBaseColor:nil];
}


#line 304
- (jint)compareToWithId:(ComItextpdfTextFont *)font {
  if (font != nil && ![font isKindOfClass:[ComItextpdfTextFont class]]) {
    @throw [[JavaLangClassCastException alloc] init];
  }
  
#line 305
  if (font == nil) {
    return -1;
  }
  @try {
    
#line 310
    if (baseFont_ != nil && ![baseFont_ isEqual:[((ComItextpdfTextFont *) nil_chk(font)) getBaseFont]]) {
      return -2;
    }
    if (self->family_ != [((ComItextpdfTextFont *) nil_chk(font)) getFamily]) {
      return 1;
    }
    if (self->size_ != [font getSize]) {
      return 2;
    }
    if (self->style_ != [font getStyle]) {
      return 3;
    }
    if (self->color_ == nil) {
      if (font->color_ == nil) {
        return 0;
      }
      return 4;
    }
    if (font->color_ == nil) {
      return 4;
    }
    if ([((ComItextpdfTextBaseColor *) nil_chk(self->color_)) isEqual:[font getColor]]) {
      return 0;
    }
    return 4;
  }
  @catch (
#line 335
  JavaLangClassCastException *cce) {
    return -3;
  }
}


#line 347
- (ComItextpdfTextFont_FontFamilyEnum *)getFamily {
  
#line 348
  return family_;
}


#line 356
- (NSString *)getFamilyname {
  
#line 357
  NSString *tmp = @"unknown";
  switch ([[self getFamily] ordinal]) {
    case ComItextpdfTextFont_FontFamily_COURIER:
    return ComItextpdfTextFontFactory_get_COURIER_();
    case ComItextpdfTextFont_FontFamily_HELVETICA:
    return ComItextpdfTextFontFactory_get_HELVETICA_();
    case ComItextpdfTextFont_FontFamily_TIMES_ROMAN:
    return ComItextpdfTextFontFactory_get_TIMES_ROMAN_();
    case ComItextpdfTextFont_FontFamily_SYMBOL:
    return ComItextpdfTextFontFactory_get_SYMBOL_();
    case ComItextpdfTextFont_FontFamily_ZAPFDINGBATS:
    return ComItextpdfTextFontFactory_get_ZAPFDINGBATS_();
    default:
    if (baseFont_ != nil) {
      IOSObjectArray *names = [baseFont_ getFamilyFontName];
      {
        IOSObjectArray *a__ =
#line 372
        names;
        IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IOSObjectArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSObjectArray *name = *b__++;
          
#line 373
          if ([@"0" isEqual:IOSObjectArray_Get(nil_chk(name), 2)]) {
            return IOSObjectArray_Get(name, 3);
          }
          if ([@"1033" isEqual:IOSObjectArray_Get(name, 2)]) {
            tmp = IOSObjectArray_Get(name, 3);
          }
          if ([@"" isEqual:IOSObjectArray_Get(name, 2)]) {
            tmp = IOSObjectArray_Get(name, 3);
          }
        }
      }
    }
  }
  
#line 385
  return tmp;
}


#line 395
- (void)setFamilyWithNSString:(NSString *)family {
  
#line 396
  self->family_ = [ComItextpdfTextFont getFamilyWithNSString:family];
}


#line 409
+ (ComItextpdfTextFont_FontFamilyEnum *)getFamilyWithNSString:(NSString *)family {
  
#line 410
  if ([((NSString *) nil_chk(family)) equalsIgnoreCase:ComItextpdfTextFontFactory_get_COURIER_()]) {
    return ComItextpdfTextFont_FontFamilyEnum_get_COURIER();
  }
  if ([family equalsIgnoreCase:ComItextpdfTextFontFactory_get_HELVETICA_()]) {
    return ComItextpdfTextFont_FontFamilyEnum_get_HELVETICA();
  }
  if ([family equalsIgnoreCase:ComItextpdfTextFontFactory_get_TIMES_ROMAN_()]) {
    return ComItextpdfTextFont_FontFamilyEnum_get_TIMES_ROMAN();
  }
  if ([family equalsIgnoreCase:ComItextpdfTextFontFactory_get_SYMBOL_()]) {
    return ComItextpdfTextFont_FontFamilyEnum_get_SYMBOL();
  }
  if ([family equalsIgnoreCase:ComItextpdfTextFontFactory_get_ZAPFDINGBATS_()]) {
    return ComItextpdfTextFont_FontFamilyEnum_get_ZAPFDINGBATS();
  }
  return ComItextpdfTextFont_FontFamilyEnum_get_UNDEFINED();
}


#line 435
- (jfloat)getSize {
  
#line 436
  return size_;
}


#line 446
- (jfloat)getCalculatedSize {
  
#line 447
  jfloat s = self->size_;
  if (s == ComItextpdfTextFont_UNDEFINED) {
    s = ComItextpdfTextFont_DEFAULTSIZE;
  }
  return s;
}


#line 461
- (jfloat)getCalculatedLeadingWithFloat:(jfloat)linespacing {
  
#line 462
  return linespacing * [self getCalculatedSize];
}


#line 471
- (void)setSizeWithFloat:(jfloat)size {
  
#line 472
  self->size_ = size;
}


#line 482
- (jint)getStyle {
  
#line 483
  return style_;
}


#line 493
- (jint)getCalculatedStyle {
  
#line 494
  jint style = self->style_;
  if (style == ComItextpdfTextFont_UNDEFINED) {
    style = ComItextpdfTextFont_NORMAL;
  }
  if (baseFont_ != nil)
#line 499
  return style;
  if (family_ == ComItextpdfTextFont_FontFamilyEnum_get_SYMBOL() || family_ == ComItextpdfTextFont_FontFamilyEnum_get_ZAPFDINGBATS())
#line 501
  return style;
  else
#line 503
  return style & ~ComItextpdfTextFont_BOLDITALIC;
}

- (jboolean)isBold {
  
#line 512
  if (style_ == ComItextpdfTextFont_UNDEFINED) {
    return NO;
  }
  return (style_ & ComItextpdfTextFont_BOLD) == ComItextpdfTextFont_BOLD;
}


#line 523
- (jboolean)isItalic {
  
#line 524
  if (style_ == ComItextpdfTextFont_UNDEFINED) {
    return NO;
  }
  return (style_ & ComItextpdfTextFont_ITALIC) == ComItextpdfTextFont_ITALIC;
}


#line 535
- (jboolean)isUnderlined {
  
#line 536
  if (style_ == ComItextpdfTextFont_UNDEFINED) {
    return NO;
  }
  return (style_ & ComItextpdfTextFont_UNDERLINE) == ComItextpdfTextFont_UNDERLINE;
}


#line 547
- (jboolean)isStrikethru {
  
#line 548
  if (style_ == ComItextpdfTextFont_UNDEFINED) {
    return NO;
  }
  return (style_ & ComItextpdfTextFont_STRIKETHRU) == ComItextpdfTextFont_STRIKETHRU;
}


#line 560
- (void)setStyleWithInt:(jint)style {
  
#line 561
  self->style_ = style;
}


#line 571
- (void)setStyleWithNSString:(NSString *)style {
  
#line 572
  if (self->style_ == ComItextpdfTextFont_UNDEFINED)
#line 573
  self->style_ = ComItextpdfTextFont_NORMAL;
  self->style_ |= [ComItextpdfTextFont getStyleValueWithNSString:style];
}


#line 586
+ (jint)getStyleValueWithNSString:(NSString *)style {
  
#line 587
  jint s = 0;
  if ([((NSString *) nil_chk(style)) indexOfString:[((ComItextpdfTextFont_FontStyleEnum *) nil_chk(ComItextpdfTextFont_FontStyleEnum_get_NORMAL())) getValue]] != -1) {
    s |= ComItextpdfTextFont_NORMAL;
  }
  if ([style indexOfString:[((ComItextpdfTextFont_FontStyleEnum *) nil_chk(ComItextpdfTextFont_FontStyleEnum_get_BOLD())) getValue]] != -1) {
    s |= ComItextpdfTextFont_BOLD;
  }
  if ([style indexOfString:[((ComItextpdfTextFont_FontStyleEnum *) nil_chk(ComItextpdfTextFont_FontStyleEnum_get_ITALIC())) getValue]] != -1) {
    s |= ComItextpdfTextFont_ITALIC;
  }
  if ([style indexOfString:[((ComItextpdfTextFont_FontStyleEnum *) nil_chk(ComItextpdfTextFont_FontStyleEnum_get_OBLIQUE())) getValue]] != -1) {
    s |= ComItextpdfTextFont_ITALIC;
  }
  if ([style indexOfString:[((ComItextpdfTextFont_FontStyleEnum *) nil_chk(ComItextpdfTextFont_FontStyleEnum_get_UNDERLINE())) getValue]] != -1) {
    s |= ComItextpdfTextFont_UNDERLINE;
  }
  if ([style indexOfString:[((ComItextpdfTextFont_FontStyleEnum *) nil_chk(ComItextpdfTextFont_FontStyleEnum_get_LINETHROUGH())) getValue]] != -1) {
    s |= ComItextpdfTextFont_STRIKETHRU;
  }
  return s;
}


#line 616
- (ComItextpdfTextBaseColor *)getColor {
  
#line 617
  return color_;
}


#line 627
- (void)setColorWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  
#line 628
  self->color_ = color;
}


#line 641
- (void)setColorWithInt:(jint)red
                withInt:(jint)green
                withInt:(jint)blue {
  
#line 642
  self->color_ = [[ComItextpdfTextBaseColor alloc] initWithInt:red withInt:green withInt:blue];
}


#line 652
- (ComItextpdfTextPdfBaseFont *)getBaseFont {
  
#line 653
  return baseFont_;
}


#line 666
- (ComItextpdfTextPdfBaseFont *)getCalculatedBaseFontWithBoolean:(jboolean)specialEncoding {
  
#line 667
  if (baseFont_ != nil)
#line 668
  return baseFont_;
  jint style = self->style_;
  if (style == ComItextpdfTextFont_UNDEFINED) {
    style = ComItextpdfTextFont_NORMAL;
  }
  NSString *fontName = ComItextpdfTextPdfBaseFont_get_HELVETICA_();
  NSString *encoding = ComItextpdfTextPdfBaseFont_get_WINANSI_();
  ComItextpdfTextPdfBaseFont *cfont = nil;
  switch ([family_ ordinal]) {
    case ComItextpdfTextFont_FontFamily_COURIER:
    switch (style & ComItextpdfTextFont_BOLDITALIC) {
      case ComItextpdfTextFont_BOLD:
      fontName = ComItextpdfTextPdfBaseFont_get_COURIER_BOLD_();
      break;
      case ComItextpdfTextFont_ITALIC:
      fontName = ComItextpdfTextPdfBaseFont_get_COURIER_OBLIQUE_();
      break;
      case ComItextpdfTextFont_BOLDITALIC:
      fontName = ComItextpdfTextPdfBaseFont_get_COURIER_BOLDOBLIQUE_();
      break;
      default:
      
#line 690
      fontName = ComItextpdfTextPdfBaseFont_get_COURIER_();
      break;
    }
    break;
    case ComItextpdfTextFont_FontFamily_TIMES_ROMAN:
    switch (style & ComItextpdfTextFont_BOLDITALIC) {
      case ComItextpdfTextFont_BOLD:
      fontName = ComItextpdfTextPdfBaseFont_get_TIMES_BOLD_();
      break;
      case ComItextpdfTextFont_ITALIC:
      fontName = ComItextpdfTextPdfBaseFont_get_TIMES_ITALIC_();
      break;
      case ComItextpdfTextFont_BOLDITALIC:
      fontName = ComItextpdfTextPdfBaseFont_get_TIMES_BOLDITALIC_();
      break;
      default:
      case ComItextpdfTextFont_NORMAL:
      fontName = ComItextpdfTextPdfBaseFont_get_TIMES_ROMAN_();
      break;
    }
    break;
    case ComItextpdfTextFont_FontFamily_SYMBOL:
    fontName = ComItextpdfTextPdfBaseFont_get_SYMBOL_();
    if (specialEncoding)
#line 714
    encoding = ComItextpdfTextPdfBaseFont_get_SYMBOL_();
    break;
    case ComItextpdfTextFont_FontFamily_ZAPFDINGBATS:
    fontName = ComItextpdfTextPdfBaseFont_get_ZAPFDINGBATS_();
    if (specialEncoding)
#line 719
    encoding = ComItextpdfTextPdfBaseFont_get_ZAPFDINGBATS_();
    break;
    default:
    case ComItextpdfTextFont_FontFamily_HELVETICA:
    switch (style & ComItextpdfTextFont_BOLDITALIC) {
      case ComItextpdfTextFont_BOLD:
      fontName = ComItextpdfTextPdfBaseFont_get_HELVETICA_BOLD_();
      break;
      case ComItextpdfTextFont_ITALIC:
      fontName = ComItextpdfTextPdfBaseFont_get_HELVETICA_OBLIQUE_();
      break;
      case ComItextpdfTextFont_BOLDITALIC:
      fontName = ComItextpdfTextPdfBaseFont_get_HELVETICA_BOLDOBLIQUE_();
      break;
      default:
      case ComItextpdfTextFont_NORMAL:
      fontName = ComItextpdfTextPdfBaseFont_get_HELVETICA_();
      break;
    }
    break;
  }
  @try {
    cfont = [ComItextpdfTextPdfBaseFont createFontWithNSString:fontName withNSString:encoding withBoolean:NO];
  }
  @catch (
#line 742
  JavaLangException *ee) {
    @throw [[ComItextpdfTextExceptionConverter alloc] initWithJavaLangException:ee];
  }
  return cfont;
}

- (jboolean)isStandardFont {
  
#line 758
  return family_ == ComItextpdfTextFont_FontFamilyEnum_get_UNDEFINED() && size_ == ComItextpdfTextFont_UNDEFINED &&
#line 759
  style_ == ComItextpdfTextFont_UNDEFINED && color_ == nil && baseFont_ == nil;
}


#line 770
- (ComItextpdfTextFont *)differenceWithComItextpdfTextFont:(ComItextpdfTextFont *)font {
  
#line 771
  if (font == nil)
#line 772
  return self;
  
#line 774
  jfloat dSize = ((ComItextpdfTextFont *) nil_chk(font))->size_;
  if (dSize == ComItextpdfTextFont_UNDEFINED) {
    dSize = self->size_;
  }
  
#line 779
  jint dStyle = ComItextpdfTextFont_UNDEFINED;
  jint style1 = self->style_;
  jint style2 = [font getStyle];
  if (style1 != ComItextpdfTextFont_UNDEFINED || style2 != ComItextpdfTextFont_UNDEFINED) {
    if (style1 == ComItextpdfTextFont_UNDEFINED)
#line 784
    style1 = 0;
    if (style2 == ComItextpdfTextFont_UNDEFINED)
#line 786
    style2 = 0;
    dStyle = style1 | style2;
  }
  
#line 790
  ComItextpdfTextBaseColor *dColor = font->color_;
  if (dColor == nil) {
    dColor = self->color_;
  }
  
#line 795
  if (font->baseFont_ != nil) {
    return [[ComItextpdfTextFont alloc] initWithComItextpdfTextPdfBaseFont:font->baseFont_ withFloat:dSize withInt:dStyle withComItextpdfTextBaseColor:dColor];
  }
  if ([font getFamily] != ComItextpdfTextFont_FontFamilyEnum_get_UNDEFINED()) {
    return [[ComItextpdfTextFont alloc] initWithComItextpdfTextFont_FontFamilyEnum:font->family_ withFloat:dSize withInt:dStyle withComItextpdfTextBaseColor:dColor];
  }
  if (self->baseFont_ != nil) {
    if (dStyle == style1) {
      return [[ComItextpdfTextFont alloc] initWithComItextpdfTextPdfBaseFont:self->baseFont_ withFloat:dSize withInt:dStyle withComItextpdfTextBaseColor:dColor];
    }
    else {
      
#line 805
      return [ComItextpdfTextFontFactory getFontWithNSString:[self getFamilyname] withFloat:dSize withInt:dStyle withComItextpdfTextBaseColor:
#line 806
      dColor];
    }
  }
  return [[ComItextpdfTextFont alloc] initWithComItextpdfTextFont_FontFamilyEnum:self->family_ withFloat:dSize withInt:dStyle withComItextpdfTextBaseColor:dColor];
}

- (void)copyAllFieldsTo:(ComItextpdfTextFont *)other {
  [super copyAllFieldsTo:other];
  other->baseFont_ = baseFont_;
  other->color_ = color_;
  other->family_ = family_;
  other->size_ = size_;
  other->style_ = style_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfTextFont:", "Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextFont_FontFamilyEnum:withFloat:withInt:withComItextpdfTextBaseColor:", "Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfBaseFont:withFloat:withInt:withComItextpdfTextBaseColor:", "Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfBaseFont:withFloat:withInt:", "Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfBaseFont:withFloat:", "Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfBaseFont:", "Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextFont_FontFamilyEnum:withFloat:withInt:", "Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextFont_FontFamilyEnum:withFloat:", "Font", NULL, 0x1, NULL },
    { "initWithComItextpdfTextFont_FontFamilyEnum:", "Font", NULL, 0x1, NULL },
    { "init", "Font", NULL, 0x1, NULL },
    { "compareToWithComItextpdfTextFont:", "compareTo", "I", 0x1, NULL },
    { "getFamily", NULL, "Lcom.itextpdf.text.Font$FontFamily;", 0x1, NULL },
    { "getFamilyname", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setFamilyWithNSString:", "setFamily", "V", 0x1, NULL },
    { "getFamilyWithNSString:", "getFamily", "Lcom.itextpdf.text.Font$FontFamily;", 0x9, NULL },
    { "getSize", NULL, "F", 0x1, NULL },
    { "getCalculatedSize", NULL, "F", 0x1, NULL },
    { "getCalculatedLeadingWithFloat:", "getCalculatedLeading", "F", 0x1, NULL },
    { "setSizeWithFloat:", "setSize", "V", 0x1, NULL },
    { "getStyle", NULL, "I", 0x1, NULL },
    { "getCalculatedStyle", NULL, "I", 0x1, NULL },
    { "isBold", NULL, "Z", 0x1, NULL },
    { "isItalic", NULL, "Z", 0x1, NULL },
    { "isUnderlined", NULL, "Z", 0x1, NULL },
    { "isStrikethru", NULL, "Z", 0x1, NULL },
    { "setStyleWithInt:", "setStyle", "V", 0x1, NULL },
    { "setStyleWithNSString:", "setStyle", "V", 0x1, NULL },
    { "getStyleValueWithNSString:", "getStyleValue", "I", 0x9, NULL },
    { "getColor", NULL, "Lcom.itextpdf.text.BaseColor;", 0x1, NULL },
    { "setColorWithComItextpdfTextBaseColor:", "setColor", "V", 0x1, NULL },
    { "setColorWithInt:withInt:withInt:", "setColor", "V", 0x1, NULL },
    { "getBaseFont", NULL, "Lcom.itextpdf.text.pdf.BaseFont;", 0x1, NULL },
    { "getCalculatedBaseFontWithBoolean:", "getCalculatedBaseFont", "Lcom.itextpdf.text.pdf.BaseFont;", 0x1, NULL },
    { "isStandardFont", NULL, "Z", 0x1, NULL },
    { "differenceWithComItextpdfTextFont:", "difference", "Lcom.itextpdf.text.Font;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NORMAL_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextFont_NORMAL },
    { "BOLD_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextFont_BOLD },
    { "ITALIC_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextFont_ITALIC },
    { "UNDERLINE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextFont_UNDERLINE },
    { "STRIKETHRU_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextFont_STRIKETHRU },
    { "BOLDITALIC_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextFont_BOLDITALIC },
    { "UNDEFINED_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextFont_UNDEFINED },
    { "DEFAULTSIZE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfTextFont_DEFAULTSIZE },
    { "family_", NULL, 0x2, "Lcom.itextpdf.text.Font$FontFamily;", NULL,  },
    { "size_", NULL, 0x2, "F", NULL,  },
    { "style_", NULL, 0x2, "I", NULL,  },
    { "color_", NULL, 0x2, "Lcom.itextpdf.text.BaseColor;", NULL,  },
    { "baseFont_", NULL, 0x2, "Lcom.itextpdf.text.pdf.BaseFont;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextFont = { "Font", "com.itextpdf.text", NULL, 0x1, 35, methods, 13, fields, 0, NULL};
  return &_ComItextpdfTextFont;
}

@end

#line 71

BOOL ComItextpdfTextFont_FontFamilyEnum_initialized = NO;

ComItextpdfTextFont_FontFamilyEnum *ComItextpdfTextFont_FontFamilyEnum_values_[6];

@implementation ComItextpdfTextFont_FontFamilyEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  return [super initWithNSString:__name withInt:__ordinal];
}

FOUNDATION_EXPORT IOSObjectArray *ComItextpdfTextFont_FontFamilyEnum_values() {
  return [IOSObjectArray arrayWithObjects:ComItextpdfTextFont_FontFamilyEnum_values_ count:6 type:[IOSClass classWithClass:[ComItextpdfTextFont_FontFamilyEnum class]]];
}
+ (IOSObjectArray *)values {
  return ComItextpdfTextFont_FontFamilyEnum_values();
}

+ (ComItextpdfTextFont_FontFamilyEnum *)valueOfWithNSString:(NSString *)name {
  return ComItextpdfTextFont_FontFamilyEnum_valueOfWithNSString_(name);
}

ComItextpdfTextFont_FontFamilyEnum *ComItextpdfTextFont_FontFamilyEnum_valueOfWithNSString_(NSString *name) {
  for (int i = 0; i < 6; i++) {
    ComItextpdfTextFont_FontFamilyEnum *e = ComItextpdfTextFont_FontFamilyEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComItextpdfTextFont_FontFamilyEnum class]) {
    ComItextpdfTextFont_FontFamilyEnum_COURIER = [[ComItextpdfTextFont_FontFamilyEnum alloc] initWithNSString:@"COURIER" withInt:0];
    ComItextpdfTextFont_FontFamilyEnum_HELVETICA = [[ComItextpdfTextFont_FontFamilyEnum alloc] initWithNSString:@"HELVETICA" withInt:1];
    ComItextpdfTextFont_FontFamilyEnum_TIMES_ROMAN = [[ComItextpdfTextFont_FontFamilyEnum alloc] initWithNSString:@"TIMES_ROMAN" withInt:2];
    ComItextpdfTextFont_FontFamilyEnum_SYMBOL = [[ComItextpdfTextFont_FontFamilyEnum alloc] initWithNSString:@"SYMBOL" withInt:3];
    ComItextpdfTextFont_FontFamilyEnum_ZAPFDINGBATS = [[ComItextpdfTextFont_FontFamilyEnum alloc] initWithNSString:@"ZAPFDINGBATS" withInt:4];
    ComItextpdfTextFont_FontFamilyEnum_UNDEFINED = [[ComItextpdfTextFont_FontFamilyEnum alloc] initWithNSString:@"UNDEFINED" withInt:5];
    ComItextpdfTextFont_FontFamilyEnum_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "init", NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "COURIER", "COURIER", 0x4019, "Lcom.itextpdf.text.Font$FontFamily;", &ComItextpdfTextFont_FontFamilyEnum_COURIER,  },
    { "HELVETICA", "HELVETICA", 0x4019, "Lcom.itextpdf.text.Font$FontFamily;", &ComItextpdfTextFont_FontFamilyEnum_HELVETICA,  },
    { "TIMES_ROMAN", "TIMES_ROMAN", 0x4019, "Lcom.itextpdf.text.Font$FontFamily;", &ComItextpdfTextFont_FontFamilyEnum_TIMES_ROMAN,  },
    { "SYMBOL", "SYMBOL", 0x4019, "Lcom.itextpdf.text.Font$FontFamily;", &ComItextpdfTextFont_FontFamilyEnum_SYMBOL,  },
    { "ZAPFDINGBATS", "ZAPFDINGBATS", 0x4019, "Lcom.itextpdf.text.Font$FontFamily;", &ComItextpdfTextFont_FontFamilyEnum_ZAPFDINGBATS,  },
    { "UNDEFINED", "UNDEFINED", 0x4019, "Lcom.itextpdf.text.Font$FontFamily;", &ComItextpdfTextFont_FontFamilyEnum_UNDEFINED,  },
  };
  static const char *superclass_type_args[] = {"Lcom.itextpdf.text.Font$FontFamily;"};
  static const J2ObjcClassInfo _ComItextpdfTextFont_FontFamilyEnum = { "FontFamily", "com.itextpdf.text", "Font", 0x4019, 1, methods, 6, fields, 1, superclass_type_args};
  return &_ComItextpdfTextFont_FontFamilyEnum;
}

@end

#line 86

BOOL ComItextpdfTextFont_FontStyleEnum_initialized = NO;

ComItextpdfTextFont_FontStyleEnum *ComItextpdfTextFont_FontStyleEnum_values_[6];

@implementation ComItextpdfTextFont_FontStyleEnum

- (instancetype)initWithNSString:(NSString *)code
                    withNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  if (self = [super initWithNSString:__name withInt:__ordinal]) {
    
#line 94
    self->code_ = code;
  }
  return self;
}


#line 101
- (NSString *)getValue {
  
#line 102
  return code_;
}

FOUNDATION_EXPORT IOSObjectArray *ComItextpdfTextFont_FontStyleEnum_values() {
  return [IOSObjectArray arrayWithObjects:ComItextpdfTextFont_FontStyleEnum_values_ count:6 type:[IOSClass classWithClass:[ComItextpdfTextFont_FontStyleEnum class]]];
}
+ (IOSObjectArray *)values {
  return ComItextpdfTextFont_FontStyleEnum_values();
}

+ (ComItextpdfTextFont_FontStyleEnum *)valueOfWithNSString:(NSString *)name {
  return ComItextpdfTextFont_FontStyleEnum_valueOfWithNSString_(name);
}

ComItextpdfTextFont_FontStyleEnum *ComItextpdfTextFont_FontStyleEnum_valueOfWithNSString_(NSString *name) {
  for (int i = 0; i < 6; i++) {
    ComItextpdfTextFont_FontStyleEnum *e = ComItextpdfTextFont_FontStyleEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:name];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (void)initialize {
  if (self == [ComItextpdfTextFont_FontStyleEnum class]) {
    ComItextpdfTextFont_FontStyleEnum_NORMAL = [[ComItextpdfTextFont_FontStyleEnum alloc] initWithNSString:
#line 88
    @"normal" withNSString:@"NORMAL" withInt:0];
    ComItextpdfTextFont_FontStyleEnum_BOLD = [[ComItextpdfTextFont_FontStyleEnum alloc] initWithNSString:
#line 88
    @"bold" withNSString:@"BOLD" withInt:1];
    ComItextpdfTextFont_FontStyleEnum_ITALIC = [[ComItextpdfTextFont_FontStyleEnum alloc] initWithNSString:
#line 88
    @"italic" withNSString:@"ITALIC" withInt:2];
    ComItextpdfTextFont_FontStyleEnum_OBLIQUE = [[ComItextpdfTextFont_FontStyleEnum alloc] initWithNSString:
#line 88
    @"oblique" withNSString:@"OBLIQUE" withInt:3];
    ComItextpdfTextFont_FontStyleEnum_UNDERLINE = [[ComItextpdfTextFont_FontStyleEnum alloc] initWithNSString:
#line 89
    @"underline" withNSString:@"UNDERLINE" withInt:4];
    ComItextpdfTextFont_FontStyleEnum_LINETHROUGH = [[ComItextpdfTextFont_FontStyleEnum alloc] initWithNSString:
#line 89
    @"line-through" withNSString:@"LINETHROUGH" withInt:5];
    ComItextpdfTextFont_FontStyleEnum_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withNSString:withInt:", "FontStyle", NULL, 0x2, NULL },
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NORMAL", "NORMAL", 0x4019, "Lcom.itextpdf.text.Font$FontStyle;", &ComItextpdfTextFont_FontStyleEnum_NORMAL,  },
    { "BOLD", "BOLD", 0x4019, "Lcom.itextpdf.text.Font$FontStyle;", &ComItextpdfTextFont_FontStyleEnum_BOLD,  },
    { "ITALIC", "ITALIC", 0x4019, "Lcom.itextpdf.text.Font$FontStyle;", &ComItextpdfTextFont_FontStyleEnum_ITALIC,  },
    { "OBLIQUE", "OBLIQUE", 0x4019, "Lcom.itextpdf.text.Font$FontStyle;", &ComItextpdfTextFont_FontStyleEnum_OBLIQUE,  },
    { "UNDERLINE", "UNDERLINE", 0x4019, "Lcom.itextpdf.text.Font$FontStyle;", &ComItextpdfTextFont_FontStyleEnum_UNDERLINE,  },
    { "LINETHROUGH", "LINETHROUGH", 0x4019, "Lcom.itextpdf.text.Font$FontStyle;", &ComItextpdfTextFont_FontStyleEnum_LINETHROUGH,  },
    { "code_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
  };
  static const char *superclass_type_args[] = {"Lcom.itextpdf.text.Font$FontStyle;"};
  static const J2ObjcClassInfo _ComItextpdfTextFont_FontStyleEnum = { "FontStyle", "com.itextpdf.text", "Font", 0x4019, 2, methods, 7, fields, 1, superclass_type_args};
  return &_ComItextpdfTextFont_FontStyleEnum;
}

@end
