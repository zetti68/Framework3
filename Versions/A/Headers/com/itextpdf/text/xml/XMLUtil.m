//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/xml/XMLUtil.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/xml/XMLUtil.java"

#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/xml/XMLUtil.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuffer.h"


#line 53
@implementation ComItextpdfTextXmlXMLUtil


#line 62
+ (NSString *)escapeXMLWithNSString:(NSString *)s
                        withBoolean:(jboolean)onlyASCII {
  
#line 63
  IOSCharArray *cc = [((NSString *) nil_chk(s)) toCharArray];
  jint len = ((IOSCharArray *) nil_chk(cc))->size_;
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  for (jint k = 0; k < len; ++k) {
    jint c = IOSCharArray_Get(cc, k);
    switch (c) {
      case '<':
      (void) [sb appendWithNSString:@"&lt;"];
      break;
      case '>':
      (void) [sb appendWithNSString:@"&gt;"];
      break;
      case '&':
      (void) [sb appendWithNSString:@"&amp;"];
      break;
      case '"':
      (void) [sb appendWithNSString:@"&quot;"];
      break;
      case '\'':
      (void) [sb appendWithNSString:@"&apos;"];
      break;
      default:
      if ([ComItextpdfTextXmlXMLUtil isValidCharacterValueWithInt:c]) {
        if (onlyASCII && c > 127)
#line 87
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:@"&#"])) appendWithInt:c])) appendWithChar:';'];
        else
#line 89
        (void) [sb appendWithChar:(jchar) c];
      }
    }
  }
  return [sb description];
}


#line 102
+ (NSString *)unescapeXMLWithNSString:(NSString *)s {
  
#line 103
  IOSCharArray *cc = [((NSString *) nil_chk(s)) toCharArray];
  jint len = ((IOSCharArray *) nil_chk(cc))->size_;
  JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
  jint pos;
  NSString *esc;
  for (jint i = 0; i < len; i++) {
    jint c = IOSCharArray_Get(cc, i);
    if (c == '&') {
      pos = [ComItextpdfTextXmlXMLUtil findInArrayWithChar:';' withCharArray:cc withInt:i + 3];
      if (pos > -1) {
        esc = [NSString stringWithCharacters:cc offset:i + 1 length:pos - i - 1];
        if ([esc hasPrefix:@"#"]) {
          esc = [esc substring:1];
          if ([ComItextpdfTextXmlXMLUtil isValidCharacterValueWithNSString:esc]) {
            c = (jchar) [JavaLangInteger parseIntWithNSString:esc];
            i = pos;
          }
          else {
            
#line 120
            i = pos;
            continue;
          }
        }
        else {
          jint tmp = [ComItextpdfTextXmlXMLUtil unescapeWithNSString:esc];
          if (tmp > 0) {
            c = tmp;
            i = pos;
          }
        }
      }
    }
    (void) [sb appendWithChar:(jchar) c];
  }
  return [sb description];
}


#line 144
+ (jint)unescapeWithNSString:(NSString *)s {
  
#line 145
  if ([@"apos" isEqual:s])
#line 146
  return '\'';
  if ([@"quot" isEqual:s])
#line 148
  return '"';
  if ([@"lt" isEqual:s])
#line 150
  return '<';
  if ([@"gt" isEqual:s])
#line 152
  return '>';
  if ([@"amp" isEqual:s])
#line 154
  return '&';
  return -1;
}


#line 163
+ (jboolean)isValidCharacterValueWithNSString:(NSString *)s {
  
#line 164
  @try {
    jint i = [JavaLangInteger parseIntWithNSString:s];
    return [ComItextpdfTextXmlXMLUtil isValidCharacterValueWithInt:i];
  }
  @catch (JavaLangNumberFormatException *nfe) {
    return NO;
  }
}


#line 178
+ (jboolean)isValidCharacterValueWithInt:(jint)c {
  
#line 179
  return (c == (jint) 0x9 || c == (jint) 0xA || c == (jint) 0xD || (
#line 180
  c >= (jint) 0x20 && c <= (jint) 0xD7FF) || (
#line 181
  c >= (jint) 0xE000 && c <= (jint) 0xFFFD) || (
#line 182
  c >= (jint) 0x10000 && c <= (jint) 0x10FFFF));
}


#line 192
+ (jint)findInArrayWithChar:(jchar)needle
              withCharArray:(IOSCharArray *)haystack
                    withInt:(jint)start {
  
#line 193
  for (jint i = start; i < ((IOSCharArray *) nil_chk(haystack))->size_; i++) {
    if (IOSCharArray_Get(haystack, i) == ';')
#line 195
    return i;
  }
  return -1;
}


#line 218
+ (NSString *)getEncodingNameWithByteArray:(IOSByteArray *)b4 {
  
#line 221
  jint b0 = IOSByteArray_Get(nil_chk(b4), 0) & (jint) 0xFF;
  jint b1 = IOSByteArray_Get(b4, 1) & (jint) 0xFF;
  if (b0 == (jint) 0xFE && b1 == (jint) 0xFF) {
    
#line 225
    return @"UTF-16BE";
  }
  if (b0 == (jint) 0xFF && b1 == (jint) 0xFE) {
    
#line 229
    return @"UTF-16LE";
  }
  
#line 233
  jint b2 = IOSByteArray_Get(b4, 2) & (jint) 0xFF;
  if (b0 == (jint) 0xEF && b1 == (jint) 0xBB && b2 == (jint) 0xBF) {
    return @"UTF-8";
  }
  
#line 239
  jint b3 = IOSByteArray_Get(b4, 3) & (jint) 0xFF;
  if (b0 == (jint) 0x00 && b1 == (jint) 0x00 && b2 == (jint) 0x00 && b3 == (jint) 0x3C) {
    
#line 242
    return @"ISO-10646-UCS-4";
  }
  if (b0 == (jint) 0x3C && b1 == (jint) 0x00 && b2 == (jint) 0x00 && b3 == (jint) 0x00) {
    
#line 246
    return @"ISO-10646-UCS-4";
  }
  if (b0 == (jint) 0x00 && b1 == (jint) 0x00 && b2 == (jint) 0x3C && b3 == (jint) 0x00) {
    
#line 251
    return @"ISO-10646-UCS-4";
  }
  if (b0 == (jint) 0x00 && b1 == (jint) 0x3C && b2 == (jint) 0x00 && b3 == (jint) 0x00) {
    
#line 256
    return @"ISO-10646-UCS-4";
  }
  if (b0 == (jint) 0x00 && b1 == (jint) 0x3C && b2 == (jint) 0x00 && b3 == (jint) 0x3F) {
    
#line 262
    return @"UTF-16BE";
  }
  if (b0 == (jint) 0x3C && b1 == (jint) 0x00 && b2 == (jint) 0x3F && b3 == (jint) 0x00) {
    
#line 267
    return @"UTF-16LE";
  }
  if (b0 == (jint) 0x4C && b1 == (jint) 0x6F && b2 == (jint) 0xA7 && b3 == (jint) 0x94) {
    
#line 272
    return @"CP037";
  }
  
#line 276
  return @"UTF-8";
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "escapeXMLWithNSString:withBoolean:", "escapeXML", "Ljava.lang.String;", 0x9, NULL },
    { "unescapeXMLWithNSString:", "unescapeXML", "Ljava.lang.String;", 0x9, NULL },
    { "unescapeWithNSString:", "unescape", "I", 0x9, NULL },
    { "isValidCharacterValueWithNSString:", "isValidCharacterValue", "Z", 0x9, NULL },
    { "isValidCharacterValueWithInt:", "isValidCharacterValue", "Z", 0x9, NULL },
    { "findInArrayWithChar:withCharArray:withInt:", "findInArray", "I", 0x9, NULL },
    { "getEncodingNameWithByteArray:", "getEncodingName", "Ljava.lang.String;", 0x9, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfTextXmlXMLUtil = { "XMLUtil", "com.itextpdf.text.xml", NULL, 0x1, 8, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfTextXmlXMLUtil;
}

@end
