//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/xml/XmlDomWriter.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/xml/XmlDomWriter.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/text/xml/XmlDomWriter.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintWriter.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Writer.h"
#include "java/lang/Integer.h"
#include "org/w3c/dom/Attr.h"
#include "org/w3c/dom/Document.h"
#include "org/w3c/dom/DocumentType.h"
#include "org/w3c/dom/Element.h"
#include "org/w3c/dom/NamedNodeMap.h"
#include "org/w3c/dom/Node.h"


#line 34
@implementation ComItextpdfTextXmlXmlDomWriter


#line 50
- (instancetype)init {
  return [super init];
}


#line 53
- (instancetype)initWithBoolean:(jboolean)canonical {
  if (self = [super init]) {
    
#line 54
    fCanonical_ = canonical;
  }
  return self;
}

- (void)setCanonicalWithBoolean:(jboolean)canonical {
  
#line 63
  fCanonical_ = canonical;
}


#line 67
- (void)setOutputWithJavaIoOutputStream:(JavaIoOutputStream *)stream
                           withNSString:(NSString *)encoding {
  
#line 70
  if (encoding == nil) {
    encoding = @"UTF8";
  }
  
#line 74
  JavaIoWriter *writer = [[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:stream withNSString:encoding];
  fOut_ = [[JavaIoPrintWriter alloc] initWithJavaIoWriter:writer];
}

- (void)setOutputWithJavaIoWriter:(JavaIoWriter *)writer {
  
#line 82
  fOut_ = [writer isKindOfClass:[JavaIoPrintWriter class]] ?
#line 83
  (JavaIoPrintWriter *) check_class_cast(writer, [JavaIoPrintWriter class]) : [[JavaIoPrintWriter alloc] initWithJavaIoWriter:writer];
}

- (void)writeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node {
  
#line 91
  if (node == nil) {
    return;
  }
  
#line 95
  jshort type = [((id<OrgW3cDomNode>) nil_chk(node)) getNodeType];
  switch (type) {
    case OrgW3cDomNode_DOCUMENT_NODE:
    {
      
#line 98
      id<OrgW3cDomDocument> document = (id<OrgW3cDomDocument>) check_protocol_cast(node, @protocol(OrgW3cDomDocument));
      fXML11_ = NO;
      if (!fCanonical_) {
        if (fXML11_) {
          [((JavaIoPrintWriter *) nil_chk(fOut_)) printlnWithNSString:@"<?xml version=\"1.1\" encoding=\"UTF-8\"?>"];
        }
        else {
          
#line 104
          [((JavaIoPrintWriter *) nil_chk(fOut_)) printlnWithNSString:@"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"];
        }
        [((JavaIoPrintWriter *) nil_chk(fOut_)) flush];
        [self writeWithOrgW3cDomNode:[document getDoctype]];
      }
      [self writeWithOrgW3cDomNode:[document getDocumentElement]];
      break;
    }
    
#line 113
    case OrgW3cDomNode_DOCUMENT_TYPE_NODE:
    {
      
#line 114
      id<OrgW3cDomDocumentType> doctype = (id<OrgW3cDomDocumentType>) check_protocol_cast(node, @protocol(OrgW3cDomDocumentType));
      [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"<!DOCTYPE "];
      [fOut_ printWithNSString:[doctype getName]];
      NSString *publicId = [doctype getPublicId];
      NSString *systemId = [doctype getSystemId];
      if (publicId != nil) {
        [fOut_ printWithNSString:@" PUBLIC '"];
        [fOut_ printWithNSString:publicId];
        [fOut_ printWithNSString:@"' '"];
        [fOut_ printWithNSString:systemId];
        [fOut_ printWithChar:'\''];
      }
      else
#line 125
      if (systemId != nil) {
        [fOut_ printWithNSString:@" SYSTEM '"];
        [fOut_ printWithNSString:systemId];
        [fOut_ printWithChar:'\''];
      }
      NSString *internalSubset = [doctype getInternalSubset];
      if (internalSubset != nil) {
        [fOut_ printlnWithNSString:@" ["];
        [fOut_ printWithNSString:internalSubset];
        [fOut_ printWithChar:']'];
      }
      [fOut_ printlnWithChar:'>'];
      break;
    }
    
#line 140
    case OrgW3cDomNode_ELEMENT_NODE:
    {
      
#line 141
      [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithChar:'<'];
      [fOut_ printWithNSString:[node getNodeName]];
      IOSObjectArray *attrs = [self sortAttributesWithOrgW3cDomNamedNodeMap:[node getAttributes]];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(attrs))->size_; i++) {
        id<OrgW3cDomAttr> attr = IOSObjectArray_Get(attrs, i);
        [fOut_ printWithChar:' '];
        [fOut_ printWithNSString:[((id<OrgW3cDomAttr>) nil_chk(attr)) getNodeName]];
        [fOut_ printWithNSString:@"=\""];
        [self normalizeAndPrintWithNSString:[attr getNodeValue] withBoolean:YES];
        [fOut_ printWithChar:'"'];
      }
      [fOut_ printWithChar:'>'];
      [fOut_ flush];
      
#line 155
      id<OrgW3cDomNode> child = [node getFirstChild];
      while (child != nil) {
        [self writeWithOrgW3cDomNode:child];
        child = [((id<OrgW3cDomNode>) nil_chk(child)) getNextSibling];
      }
      break;
    }
    
#line 163
    case OrgW3cDomNode_ENTITY_REFERENCE_NODE:
    {
      
#line 164
      if (fCanonical_) {
        id<OrgW3cDomNode> child = [node getFirstChild];
        while (child != nil) {
          [self writeWithOrgW3cDomNode:child];
          child = [((id<OrgW3cDomNode>) nil_chk(child)) getNextSibling];
        }
      }
      else {
        
#line 171
        [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithChar:'&'];
        [fOut_ printWithNSString:[node getNodeName]];
        [fOut_ printWithChar:';'];
        [fOut_ flush];
      }
      break;
    }
    
#line 179
    case OrgW3cDomNode_CDATA_SECTION_NODE:
    {
      
#line 180
      if (fCanonical_) {
        [self normalizeAndPrintWithNSString:[node getNodeValue] withBoolean:NO];
      }
      else {
        
#line 183
        [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"<![CDATA["];
        [fOut_ printWithNSString:[node getNodeValue]];
        [fOut_ printWithNSString:@"]]>"];
      }
      [((JavaIoPrintWriter *) nil_chk(fOut_)) flush];
      break;
    }
    
#line 191
    case OrgW3cDomNode_TEXT_NODE:
    {
      
#line 192
      [self normalizeAndPrintWithNSString:[node getNodeValue] withBoolean:NO];
      [((JavaIoPrintWriter *) nil_chk(fOut_)) flush];
      break;
    }
    
#line 197
    case OrgW3cDomNode_PROCESSING_INSTRUCTION_NODE:
    {
      
#line 198
      [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"<?"];
      [fOut_ printWithNSString:[node getNodeName]];
      NSString *data = [node getNodeValue];
      if (data != nil && ((jint) [data length]) > 0) {
        [fOut_ printWithChar:' '];
        [fOut_ printWithNSString:data];
      }
      [fOut_ printWithNSString:@"?>"];
      [fOut_ flush];
      break;
    }
    
#line 210
    case OrgW3cDomNode_COMMENT_NODE:
    {
      
#line 211
      if (!fCanonical_) {
        [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"<!--"];
        NSString *comment = [node getNodeValue];
        if (comment != nil && ((jint) [comment length]) > 0) {
          [fOut_ printWithNSString:comment];
        }
        [fOut_ printWithNSString:@"-->"];
        [fOut_ flush];
      }
    }
  }
  
#line 223
  if (type == OrgW3cDomNode_ELEMENT_NODE) {
    [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"</"];
    [fOut_ printWithNSString:[node getNodeName]];
    [fOut_ printWithChar:'>'];
    [fOut_ flush];
  }
}


#line 233
- (IOSObjectArray *)sortAttributesWithOrgW3cDomNamedNodeMap:(id<OrgW3cDomNamedNodeMap>)attrs {
  
#line 235
  jint len = (attrs != nil) ? [attrs getLength] : 0;
  IOSObjectArray *array = [IOSObjectArray arrayWithLength:len type:[IOSClass classWithProtocol:@protocol(OrgW3cDomAttr)]];
  for (jint i = 0; i < len; i++) {
    IOSObjectArray_Set(array, i, (id<OrgW3cDomAttr>) check_protocol_cast([((id<OrgW3cDomNamedNodeMap>) nil_chk(attrs)) itemWithInt:i], @protocol(OrgW3cDomAttr)));
  }
  for (jint i = 0; i < len - 1; i++) {
    NSString *name = [((id<OrgW3cDomAttr>) nil_chk(IOSObjectArray_Get(array, i))) getNodeName];
    jint index = i;
    for (jint j = i + 1; j < len; j++) {
      NSString *curName = [((id<OrgW3cDomAttr>) nil_chk(IOSObjectArray_Get(array, j))) getNodeName];
      if ([((NSString *) nil_chk(curName)) compareToWithId:name] < 0) {
        name = curName;
        index = j;
      }
    }
    if (index != i) {
      id<OrgW3cDomAttr> temp = IOSObjectArray_Get(array, i);
      IOSObjectArray_Set(array, i, IOSObjectArray_Get(array, index));
      IOSObjectArray_Set(array, index, temp);
    }
  }
  
#line 257
  return array;
}


#line 266
- (void)normalizeAndPrintWithNSString:(NSString *)s
                          withBoolean:(jboolean)isAttValue {
  
#line 268
  jint len = (s != nil) ? ((jint) [s length]) : 0;
  for (jint i = 0; i < len; i++) {
    jchar c = [((NSString *) nil_chk(s)) charAtWithInt:i];
    [self normalizeAndPrintWithChar:c withBoolean:isAttValue];
  }
}

- (void)normalizeAndPrintWithChar:(jchar)c
                      withBoolean:(jboolean)isAttValue {
  
#line 279
  switch (c) {
    case '<':
    {
      
#line 281
      [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"&lt;"];
      break;
    }
    case '>':
    {
      
#line 285
      [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"&gt;"];
      break;
    }
    case '&':
    {
      
#line 289
      [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"&amp;"];
      break;
    }
    case '"':
    {
      
#line 295
      if (isAttValue) {
        [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"&quot;"];
      }
      else {
        
#line 298
        [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"\""];
      }
      break;
    }
    case 0x000d:
    {
      
#line 307
      [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"&#xD;"];
      break;
    }
    case 0x000a:
    {
      
#line 311
      if (fCanonical_) {
        [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"&#xA;"];
        break;
      }
    }
    
#line 317
    default:
    {
      
#line 326
      if ((fXML11_ && ((c >= (jint) 0x01 && c <= (jint) 0x1F && c != (jint) 0x09 && c != (jint) 0x0A) ||
#line 327
      (c >= (jint) 0x7F && c <= (jint) 0x9F) || c == (jint) 0x2028)) || (
#line 328
      isAttValue && (c == (jint) 0x09 || c == (jint) 0x0A))) {
        [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithNSString:@"&#x"];
        [fOut_ printWithNSString:[((NSString *) nil_chk([JavaLangInteger toHexStringWithInt:c])) uppercaseString]];
        [fOut_ printWithNSString:@";"];
      }
      else {
        
#line 333
        [((JavaIoPrintWriter *) nil_chk(fOut_)) printWithChar:c];
      }
    }
  }
}

- (void)copyAllFieldsTo:(ComItextpdfTextXmlXmlDomWriter *)other {
  [super copyAllFieldsTo:other];
  other->fCanonical_ = fCanonical_;
  other->fOut_ = fOut_;
  other->fXML11_ = fXML11_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XmlDomWriter", NULL, 0x1, NULL },
    { "initWithBoolean:", "XmlDomWriter", NULL, 0x1, NULL },
    { "setCanonicalWithBoolean:", "setCanonical", "V", 0x1, NULL },
    { "setOutputWithJavaIoOutputStream:withNSString:", "setOutput", "V", 0x1, "Ljava.io.UnsupportedEncodingException;" },
    { "setOutputWithJavaIoWriter:", "setOutput", "V", 0x1, NULL },
    { "writeWithOrgW3cDomNode:", "write", "V", 0x1, NULL },
    { "sortAttributesWithOrgW3cDomNamedNodeMap:", "sortAttributes", "[Lorg.w3c.dom.Attr;", 0x4, NULL },
    { "normalizeAndPrintWithNSString:withBoolean:", "normalizeAndPrint", "V", 0x4, NULL },
    { "normalizeAndPrintWithChar:withBoolean:", "normalizeAndPrint", "V", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fOut_", NULL, 0x4, "Ljava.io.PrintWriter;", NULL,  },
    { "fCanonical_", NULL, 0x4, "Z", NULL,  },
    { "fXML11_", NULL, 0x4, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextXmlXmlDomWriter = { "XmlDomWriter", "com.itextpdf.text.xml", NULL, 0x1, 9, methods, 3, fields, 0, NULL};
  return &_ComItextpdfTextXmlXmlDomWriter;
}

@end
