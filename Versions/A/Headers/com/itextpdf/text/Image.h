//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Image.java
//

#ifndef _ComItextpdfTextImage_H_
#define _ComItextpdfTextImage_H_

#include "J2ObjC_header.h"
#include "com/itextpdf/text/Rectangle.h"
#include "com/itextpdf/text/api/Indentable.h"
#include "com/itextpdf/text/api/Spaceable.h"
#include "com/itextpdf/text/pdf/interfaces/IAccessibleElement.h"
#include "com/itextpdf/text/pdf/interfaces/IAlternateDescription.h"

@class ComItextpdfTextAccessibleElementId;
@class ComItextpdfTextAnnotation;
@class ComItextpdfTextPdfICC_Profile;
@class ComItextpdfTextPdfPRIndirectReference;
@class ComItextpdfTextPdfPdfDictionary;
@class ComItextpdfTextPdfPdfIndirectReference;
@class ComItextpdfTextPdfPdfName;
@class ComItextpdfTextPdfPdfObject;
@class ComItextpdfTextPdfPdfTemplate;
@class IOSByteArray;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangLong;
@class JavaNetURL;
@class JavaUtilHashMap;
@protocol ComItextpdfTextPdfPdfOCG;

#define ComItextpdfTextImage_DEFAULT 0
#define ComItextpdfTextImage_RIGHT 2
#define ComItextpdfTextImage_LEFT 0
#define ComItextpdfTextImage_MIDDLE 1
#define ComItextpdfTextImage_TEXTWRAP 4
#define ComItextpdfTextImage_UNDERLYING 8
#define ComItextpdfTextImage_AX 0
#define ComItextpdfTextImage_AY 1
#define ComItextpdfTextImage_BX 2
#define ComItextpdfTextImage_BY 3
#define ComItextpdfTextImage_CX 4
#define ComItextpdfTextImage_CY 5
#define ComItextpdfTextImage_DX 6
#define ComItextpdfTextImage_DY 7
#define ComItextpdfTextImage_ORIGINAL_NONE 0
#define ComItextpdfTextImage_ORIGINAL_JPEG 1
#define ComItextpdfTextImage_ORIGINAL_PNG 2
#define ComItextpdfTextImage_ORIGINAL_GIF 3
#define ComItextpdfTextImage_ORIGINAL_BMP 4
#define ComItextpdfTextImage_ORIGINAL_TIFF 5
#define ComItextpdfTextImage_ORIGINAL_WMF 6
#define ComItextpdfTextImage_ORIGINAL_PS 7
#define ComItextpdfTextImage_ORIGINAL_JPEG2000 8
#define ComItextpdfTextImage_ORIGINAL_JBIG2 9

@interface ComItextpdfTextImage : ComItextpdfTextRectangle < ComItextpdfTextApiIndentable, ComItextpdfTextApiSpaceable, ComItextpdfTextPdfInterfacesIAccessibleElement, ComItextpdfTextPdfInterfacesIAlternateDescription > {
 @public
  jint type__;
  JavaNetURL *url_;
  IOSByteArray *rawData_;
  jint bpc_;
  IOSObjectArray *template__;
  jint alignment_;
  NSString *alt_;
  jfloat absoluteX_;
  jfloat absoluteY_;
  jfloat plainWidth_;
  jfloat plainHeight_;
  jfloat scaledWidth_;
  jfloat scaledHeight_;
  jint compressionLevel_;
  JavaLangLong *mySerialId_;
  ComItextpdfTextPdfPdfName *role_;
  JavaUtilHashMap *accessibleAttributes_;
  jfloat rotationRadians_;
  jfloat indentationLeft_;
  jfloat indentationRight_;
  jfloat spacingBefore_;
  jfloat spacingAfter_;
  jboolean scaleToFitLineWhenOverflow_;
  jboolean scaleToFitHeight_;
  ComItextpdfTextAnnotation *annotation_;
  id<ComItextpdfTextPdfPdfOCG> layer_;
  jboolean interpolation_;
  jint originalType_;
  IOSByteArray *originalData_;
  jboolean deflated_;
  jint dpiX_;
  jint dpiY_;
  jint colorspace_;
  jint colortransform_;
  jboolean invert_;
  ComItextpdfTextPdfICC_Profile *profile_;
  jboolean mask_;
  ComItextpdfTextImage *imageMask_;
  IOSIntArray *transparency_;
}

#pragma mark Public

- (instancetype)initWithJavaNetURL:(JavaNetURL *)url;

- (jfloat)getAbsoluteX;

- (jfloat)getAbsoluteY;

- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key;

- (JavaUtilHashMap *)getAccessibleAttributes;

- (ComItextpdfTextPdfPdfDictionary *)getAdditional;

- (jint)getAlignment;

- (NSString *)getAlt;

- (ComItextpdfTextAnnotation *)getAnnotation;

- (jint)getBpc;

- (jint)getColorspace;

- (jint)getColorTransform;

- (jint)getCompressionLevel;

- (ComItextpdfTextPdfPdfIndirectReference *)getDirectReference;

- (jint)getDpiX;

- (jint)getDpiY;

- (ComItextpdfTextPdfICC_Profile *)getICCProfile;

- (ComItextpdfTextAccessibleElementId *)getId;

- (ComItextpdfTextImage *)getImageMask;

- (jfloat)getImageRotation;

- (jfloat)getIndentationLeft;

- (jfloat)getIndentationRight;

- (jfloat)getInitialRotation;

+ (ComItextpdfTextImage *)getInstanceWithByteArray:(IOSByteArray *)imgb;

+ (ComItextpdfTextImage *)getInstanceWithByteArray:(IOSByteArray *)imgb
                                       withBoolean:(jboolean)recoverFromImageError;

+ (ComItextpdfTextImage *)getInstanceWithComItextpdfTextImage:(ComItextpdfTextImage *)image;

+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                                 withBoolean:(jboolean)reverseBits
                                     withInt:(jint)typeCCITT
                                     withInt:(jint)parameters
                               withByteArray:(IOSByteArray *)data;

+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                                 withBoolean:(jboolean)reverseBits
                                     withInt:(jint)typeCCITT
                                     withInt:(jint)parameters
                               withByteArray:(IOSByteArray *)data
                                withIntArray:(IOSIntArray *)transparency;

+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                               withByteArray:(IOSByteArray *)data
                               withByteArray:(IOSByteArray *)globals;

+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                                     withInt:(jint)components
                                     withInt:(jint)bpc
                               withByteArray:(IOSByteArray *)data;

+ (ComItextpdfTextImage *)getInstanceWithInt:(jint)width
                                     withInt:(jint)height
                                     withInt:(jint)components
                                     withInt:(jint)bpc
                               withByteArray:(IOSByteArray *)data
                                withIntArray:(IOSIntArray *)transparency;

+ (ComItextpdfTextImage *)getInstanceWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_;

+ (ComItextpdfTextImage *)getInstanceWithComItextpdfTextPdfPRIndirectReference:(ComItextpdfTextPdfPRIndirectReference *)ref;

+ (ComItextpdfTextImage *)getInstanceWithNSString:(NSString *)filename;

+ (ComItextpdfTextImage *)getInstanceWithNSString:(NSString *)filename
                                      withBoolean:(jboolean)recoverFromImageError;

+ (ComItextpdfTextImage *)getInstanceWithJavaNetURL:(JavaNetURL *)url;

+ (ComItextpdfTextImage *)getInstanceWithJavaNetURL:(JavaNetURL *)url
                                        withBoolean:(jboolean)recoverFromImageError;

- (id<ComItextpdfTextPdfPdfOCG>)getLayer;

- (JavaLangLong *)getMySerialId;

- (IOSByteArray *)getOriginalData;

- (jint)getOriginalType;

- (jfloat)getPlainHeight;

- (jfloat)getPlainWidth;

- (IOSByteArray *)getRawData;

- (ComItextpdfTextPdfPdfName *)getRole;

- (jfloat)getScaledHeight;

- (jfloat)getScaledWidth;

- (jfloat)getSpacingAfter;

- (jfloat)getSpacingBefore;

- (ComItextpdfTextPdfPdfTemplate *)getTemplateData;

- (IOSIntArray *)getTransparency;

- (JavaNetURL *)getUrl;

- (jfloat)getWidthPercentage;

- (jfloat)getXYRatio;

- (jboolean)hasAbsoluteX;

- (jboolean)hasAbsoluteY;

- (jboolean)hasICCProfile;

- (jboolean)isDeflated;

- (jboolean)isImgRaw;

- (jboolean)isImgTemplate;

- (jboolean)isInline;

- (jboolean)isInterpolation;

- (jboolean)isInverted;

- (jboolean)isJpeg;

- (jboolean)isMask;

- (jboolean)isMaskCandidate;

- (jboolean)isNestable;

- (jboolean)isScaleToFitHeight;

- (jboolean)isScaleToFitLineWhenOverflow;

- (jboolean)isSmask;

- (void)makeMask;

- (IOSFloatArray *)matrix;

- (IOSFloatArray *)matrixWithFloat:(jfloat)scalePercentage;

- (void)scaleAbsoluteWithFloat:(jfloat)newWidth
                     withFloat:(jfloat)newHeight;

- (void)scaleAbsoluteWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rectangle;

- (void)scaleAbsoluteHeightWithFloat:(jfloat)newHeight;

- (void)scaleAbsoluteWidthWithFloat:(jfloat)newWidth;

- (void)scalePercentWithFloat:(jfloat)percent;

- (void)scalePercentWithFloat:(jfloat)percentX
                    withFloat:(jfloat)percentY;

- (void)scaleToFitWithFloat:(jfloat)fitWidth
                  withFloat:(jfloat)fitHeight;

- (void)scaleToFitWithComItextpdfTextRectangle:(ComItextpdfTextRectangle *)rectangle;

- (void)setAbsolutePositionWithFloat:(jfloat)absoluteX
                           withFloat:(jfloat)absoluteY;

- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value;

- (void)setAdditionalWithComItextpdfTextPdfPdfDictionary:(ComItextpdfTextPdfPdfDictionary *)additional;

- (void)setAlignmentWithInt:(jint)alignment;

- (void)setAltWithNSString:(NSString *)alt;

- (void)setAnnotationWithComItextpdfTextAnnotation:(ComItextpdfTextAnnotation *)annotation;

- (void)setColorTransformWithInt:(jint)c;

- (void)setCompressionLevelWithInt:(jint)compressionLevel;

- (void)setDeflatedWithBoolean:(jboolean)deflated;

- (void)setDirectReferenceWithComItextpdfTextPdfPdfIndirectReference:(ComItextpdfTextPdfPdfIndirectReference *)directReference;

- (void)setDpiWithInt:(jint)dpiX
              withInt:(jint)dpiY;

- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_;

- (void)setImageMaskWithComItextpdfTextImage:(ComItextpdfTextImage *)mask;

- (void)setIndentationLeftWithFloat:(jfloat)f;

- (void)setIndentationRightWithFloat:(jfloat)f;

- (void)setInitialRotationWithFloat:(jfloat)initialRotation;

- (void)setInterpolationWithBoolean:(jboolean)interpolation;

- (void)setInvertedWithBoolean:(jboolean)invert;

- (void)setLayerWithComItextpdfTextPdfPdfOCG:(id<ComItextpdfTextPdfPdfOCG>)layer;

- (void)setOriginalDataWithByteArray:(IOSByteArray *)originalData;

- (void)setOriginalTypeWithInt:(jint)originalType;

- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role;

- (void)setRotationWithFloat:(jfloat)r;

- (void)setRotationDegreesWithFloat:(jfloat)deg;

- (void)setScaleToFitHeightWithBoolean:(jboolean)scaleToFitHeight;

- (void)setScaleToFitLineWhenOverflowWithBoolean:(jboolean)scaleToFitLineWhenOverflow;

- (void)setSmaskWithBoolean:(jboolean)smask;

- (void)setSpacingAfterWithFloat:(jfloat)spacing;

- (void)setSpacingBeforeWithFloat:(jfloat)spacing;

- (void)setTemplateDataWithComItextpdfTextPdfPdfTemplate:(ComItextpdfTextPdfPdfTemplate *)template_;

- (void)setTransparencyWithIntArray:(IOSIntArray *)transparency;

- (void)setUrlWithJavaNetURL:(JavaNetURL *)url;

- (void)setWidthPercentageWithFloat:(jfloat)widthPercentage;

- (void)setXYRatioWithFloat:(jfloat)XYRatio;

- (void)simplifyColorspace;

- (void)tagICCWithComItextpdfTextPdfICC_Profile:(ComItextpdfTextPdfICC_Profile *)profile;

- (jint)type;

#pragma mark Protected

- (instancetype)initWithComItextpdfTextImage:(ComItextpdfTextImage *)image;

+ (JavaLangLong *)getSerialId;

@end

J2OBJC_EMPTY_STATIC_INIT(ComItextpdfTextImage)

J2OBJC_FIELD_SETTER(ComItextpdfTextImage, url_, JavaNetURL *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, rawData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, template__, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, alt_, NSString *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, mySerialId_, JavaLangLong *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, role_, ComItextpdfTextPdfPdfName *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, accessibleAttributes_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, annotation_, ComItextpdfTextAnnotation *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, layer_, id<ComItextpdfTextPdfPdfOCG>)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, originalData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, profile_, ComItextpdfTextPdfICC_Profile *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, imageMask_, ComItextpdfTextImage *)
J2OBJC_FIELD_SETTER(ComItextpdfTextImage, transparency_, IOSIntArray *)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, RIGHT, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, LEFT, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, MIDDLE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, TEXTWRAP, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, UNDERLYING, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, AX, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, AY, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, BX, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, BY, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, CX, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, CY, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, DX, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, DY, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_NONE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_JPEG, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_PNG, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_GIF, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_BMP, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_TIFF, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_WMF, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_PS, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_JPEG2000, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, ORIGINAL_JBIG2, jint)

FOUNDATION_EXPORT jlong ComItextpdfTextImage_serialId_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfTextImage, serialId_, jlong)
J2OBJC_STATIC_FIELD_REF_GETTER(ComItextpdfTextImage, serialId_, jlong)

FOUNDATION_EXPORT void ComItextpdfTextImage_initWithJavaNetURL_(ComItextpdfTextImage *self, JavaNetURL *url);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithJavaNetURL_(JavaNetURL *url);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithJavaNetURL_withBoolean_(JavaNetURL *url, jboolean recoverFromImageError);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithNSString_(NSString *filename);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithNSString_withBoolean_(NSString *filename, jboolean recoverFromImageError);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithByteArray_(IOSByteArray *imgb);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithByteArray_withBoolean_(IOSByteArray *imgb, jboolean recoverFromImageError);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithInt_withInt_withInt_withInt_withByteArray_(jint width, jint height, jint components, jint bpc, IOSByteArray *data);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithInt_withInt_withByteArray_withByteArray_(jint width, jint height, IOSByteArray *data, IOSByteArray *globals);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithInt_withInt_withBoolean_withInt_withInt_withByteArray_(jint width, jint height, jboolean reverseBits, jint typeCCITT, jint parameters, IOSByteArray *data);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithInt_withInt_withBoolean_withInt_withInt_withByteArray_withIntArray_(jint width, jint height, jboolean reverseBits, jint typeCCITT, jint parameters, IOSByteArray *data, IOSIntArray *transparency);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithInt_withInt_withInt_withInt_withByteArray_withIntArray_(jint width, jint height, jint components, jint bpc, IOSByteArray *data, IOSIntArray *transparency);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithComItextpdfTextPdfPdfTemplate_(ComItextpdfTextPdfPdfTemplate *template_);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithComItextpdfTextPdfPRIndirectReference_(ComItextpdfTextPdfPRIndirectReference *ref);

FOUNDATION_EXPORT void ComItextpdfTextImage_initWithComItextpdfTextImage_(ComItextpdfTextImage *self, ComItextpdfTextImage *image);

FOUNDATION_EXPORT ComItextpdfTextImage *ComItextpdfTextImage_getInstanceWithComItextpdfTextImage_(ComItextpdfTextImage *image);

FOUNDATION_EXPORT JavaLangLong *ComItextpdfTextImage_getSerialId();

J2OBJC_TYPE_LITERAL_HEADER(ComItextpdfTextImage)

#endif // _ComItextpdfTextImage_H_
