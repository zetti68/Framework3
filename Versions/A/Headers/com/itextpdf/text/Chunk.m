//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Chunk.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/text/Chunk.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/text/AccessibleElementId.h"
#include "com/itextpdf/text/BaseColor.h"
#include "com/itextpdf/text/Chunk.h"
#include "com/itextpdf/text/DocumentException.h"
#include "com/itextpdf/text/Element.h"
#include "com/itextpdf/text/ElementListener.h"
#include "com/itextpdf/text/Font.h"
#include "com/itextpdf/text/Image.h"
#include "com/itextpdf/text/SplitCharacter.h"
#include "com/itextpdf/text/TabSplitCharacter.h"
#include "com/itextpdf/text/Utilities.h"
#include "com/itextpdf/text/error_messages/MessageLocalization.h"
#include "com/itextpdf/text/pdf/BaseFont.h"
#include "com/itextpdf/text/pdf/HyphenationEvent.h"
#include "com/itextpdf/text/pdf/PdfAction.h"
#include "com/itextpdf/text/pdf/PdfAnnotation.h"
#include "com/itextpdf/text/pdf/PdfContentByte.h"
#include "com/itextpdf/text/pdf/PdfName.h"
#include "com/itextpdf/text/pdf/PdfObject.h"
#include "com/itextpdf/text/pdf/PdfString.h"
#include "com/itextpdf/text/pdf/draw/DrawInterface.h"
#include "java/lang/Boolean.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/net/URL.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"

BOOL ComItextpdfTextChunk_initialized = NO;


#line 79
@implementation ComItextpdfTextChunk

NSString * ComItextpdfTextChunk_OBJECT_REPLACEMENT_CHARACTER_ = 
#line 84
@"\ufffc";
ComItextpdfTextChunk * ComItextpdfTextChunk_NEWLINE_;
ComItextpdfTextChunk * ComItextpdfTextChunk_NEXTPAGE_;
ComItextpdfTextChunk * ComItextpdfTextChunk_TABBING_;
ComItextpdfTextChunk * ComItextpdfTextChunk_SPACETABBING_;
NSString * ComItextpdfTextChunk_SEPARATOR_ = 
#line 224
@"SEPARATOR";
NSString * ComItextpdfTextChunk_TAB_ = 
#line 253
@"TAB";
NSString * ComItextpdfTextChunk_TABSETTINGS_ = 
#line 258
@"TABSETTINGS";
NSString * ComItextpdfTextChunk_HSCALE_ = 
#line 502
@"HSCALE";
NSString * ComItextpdfTextChunk_UNDERLINE_ = 
#line 531
@"UNDERLINE";
NSString * ComItextpdfTextChunk_SUBSUPSCRIPT_ = 
#line 586
@"SUBSUPSCRIPT";
NSString * ComItextpdfTextChunk_SKEW_ = 
#line 617
@"SKEW";
NSString * ComItextpdfTextChunk_BACKGROUND_ = 
#line 636
@"BACKGROUND";
NSString * ComItextpdfTextChunk_TEXTRENDERMODE_ = 
#line 671
@"TEXTRENDERMODE";
NSString * ComItextpdfTextChunk_SPLITCHARACTER_ = 
#line 699
@"SPLITCHARACTER";
NSString * ComItextpdfTextChunk_HYPHENATION_ = 
#line 714
@"HYPHENATION";
NSString * ComItextpdfTextChunk_REMOTEGOTO_ = 
#line 728
@"REMOTEGOTO";
NSString * ComItextpdfTextChunk_LOCALGOTO_ = 
#line 760
@"LOCALGOTO";
NSString * ComItextpdfTextChunk_LOCALDESTINATION_ = 
#line 777
@"LOCALDESTINATION";
NSString * ComItextpdfTextChunk_GENERICTAG_ = 
#line 791
@"GENERICTAG";
NSString * ComItextpdfTextChunk_LINEHEIGHT_ = 
#line 808
@"LINEHEIGHT";
NSString * ComItextpdfTextChunk_IMAGE_ = 
#line 822
@"IMAGE";
NSString * ComItextpdfTextChunk_ACTION_ = 
#line 842
@"ACTION";
NSString * ComItextpdfTextChunk_NEWPAGE_ = 
#line 884
@"NEWPAGE";
NSString * ComItextpdfTextChunk_PDFANNOTATION_ = 
#line 897
@"PDFANNOTATION";
NSString * ComItextpdfTextChunk_COLOR_ = 
#line 939
@"COLOR";
NSString * ComItextpdfTextChunk_ENCODING_ = 
#line 942
@"ENCODING";
NSString * ComItextpdfTextChunk_CHAR_SPACING_ = 
#line 947
@"CHAR_SPACING";
NSString * ComItextpdfTextChunk_WORD_SPACING_ = 
#line 975
@"WORD_SPACING";
NSString * ComItextpdfTextChunk_WHITESPACE_ = 
#line 1000
@"WHITESPACE";


#line 122
- (instancetype)init {
  if (self = [super init]) {
    content_ =
#line 105
    nil;
    font_ =
#line 108
    nil;
    attributes_ =
#line 111
    nil;
    role_ =
#line 113
    nil;
    accessibleAttributes_ =
#line 114
    nil;
    id__ =
#line 115
    nil;
    contentWithNoTabs_ =
#line 259
    nil;
    
#line 123
    self->content_ = [[JavaLangStringBuffer alloc] init];
    
#line 124
    self->font_ = [[ComItextpdfTextFont alloc] init];
    
#line 125
    self->role_ = ComItextpdfTextPdfPdfName_get_SPAN_();
  }
  return self;
}


#line 132
- (instancetype)initWithComItextpdfTextChunk:(ComItextpdfTextChunk *)ck {
  if (self = [super init]) {
    content_ =
#line 105
    nil;
    font_ =
#line 108
    nil;
    attributes_ =
#line 111
    nil;
    role_ =
#line 113
    nil;
    accessibleAttributes_ =
#line 114
    nil;
    id__ =
#line 115
    nil;
    contentWithNoTabs_ =
#line 259
    nil;
    
#line 133
    if (((ComItextpdfTextChunk *) nil_chk(ck))->content_ != nil) {
      content_ = [[JavaLangStringBuffer alloc] initWithNSString:[ck->content_ description]];
    }
    
#line 136
    if (ck->font_ != nil) {
      font_ = [[ComItextpdfTextFont alloc] initWithComItextpdfTextFont:ck->font_];
    }
    
#line 139
    if (ck->attributes_ != nil) {
      attributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:ck->attributes_];
    }
    
#line 142
    role_ = ck->role_;
    
#line 143
    if (ck->accessibleAttributes_ != nil) {
      accessibleAttributes_ = [[JavaUtilHashMap alloc] initWithJavaUtilMap:ck->accessibleAttributes_];
    }
    
#line 146
    id__ = [ck getId];
  }
  return self;
}


#line 158
- (instancetype)initComItextpdfTextChunkWithNSString:(NSString *)content
                             withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  if (self = [super init]) {
    content_ =
#line 105
    nil;
    font_ =
#line 108
    nil;
    attributes_ =
#line 111
    nil;
    role_ =
#line 113
    nil;
    accessibleAttributes_ =
#line 114
    nil;
    id__ =
#line 115
    nil;
    contentWithNoTabs_ =
#line 259
    nil;
    
#line 159
    self->content_ = [[JavaLangStringBuffer alloc] initWithNSString:content];
    
#line 160
    self->font_ = font;
    
#line 161
    self->role_ = ComItextpdfTextPdfPdfName_get_SPAN_();
  }
  return self;
}

- (instancetype)initWithNSString:(NSString *)content
         withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  return [self initComItextpdfTextChunkWithNSString:
#line 158
content withComItextpdfTextFont:font];
}


#line 171
- (instancetype)initWithNSString:(NSString *)content {
  return
#line 172
  [self initComItextpdfTextChunkWithNSString:content withComItextpdfTextFont:[[ComItextpdfTextFont alloc] init]];
}


#line 183
- (instancetype)initComItextpdfTextChunkWithChar:(jchar)c
                         withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  if (self = [super init]) {
    content_ =
#line 105
    nil;
    font_ =
#line 108
    nil;
    attributes_ =
#line 111
    nil;
    role_ =
#line 113
    nil;
    accessibleAttributes_ =
#line 114
    nil;
    id__ =
#line 115
    nil;
    contentWithNoTabs_ =
#line 259
    nil;
    
#line 184
    self->content_ = [[JavaLangStringBuffer alloc] init];
    
#line 185
    (void) [self->content_ appendWithChar:c];
    
#line 186
    self->font_ = font;
    
#line 187
    self->role_ = ComItextpdfTextPdfPdfName_get_SPAN_();
  }
  return self;
}

- (instancetype)initWithChar:(jchar)c
     withComItextpdfTextFont:(ComItextpdfTextFont *)font {
  return [self initComItextpdfTextChunkWithChar:
#line 183
c withComItextpdfTextFont:font];
}


#line 197
- (instancetype)initWithChar:(jchar)c {
  return
#line 198
  [self initComItextpdfTextChunkWithChar:c withComItextpdfTextFont:[[ComItextpdfTextFont alloc] init]];
}


#line 211
- (instancetype)initWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                                   withFloat:(jfloat)offsetX
                                   withFloat:(jfloat)offsetY {
  if (self =
#line 212
  [self initComItextpdfTextChunkWithNSString:ComItextpdfTextChunk_OBJECT_REPLACEMENT_CHARACTER_ withComItextpdfTextFont:[[ComItextpdfTextFont alloc] init]]) {
    
#line 213
    ComItextpdfTextImage *copyImage = [ComItextpdfTextImage getInstanceWithComItextpdfTextImage:image];
    
#line 214
    [((ComItextpdfTextImage *) nil_chk(copyImage)) setAbsolutePositionWithFloat:JavaLangFloat_NaN withFloat:JavaLangFloat_NaN];
    
#line 215
    (void) [self setAttributeWithNSString:ComItextpdfTextChunk_IMAGE_ withId:[IOSObjectArray arrayWithObjects:(id[]){ copyImage, [[JavaLangFloat alloc] initWithFloat:offsetX],
#line 216
    [[JavaLangFloat alloc] initWithFloat:offsetY], JavaLangBoolean_get_FALSE__() } count:4 type:[IOSClass classWithClass:[NSObject class]]]];
    
#line 217
    self->role_ = nil;
  }
  return self;
}


#line 232
- (instancetype)initWithComItextpdfTextPdfDrawDrawInterface:(id<ComItextpdfTextPdfDrawDrawInterface>)separator {
  return
#line 233
  [self initComItextpdfTextChunkWithComItextpdfTextPdfDrawDrawInterface:separator withBoolean:NO];
}


#line 243
- (instancetype)initComItextpdfTextChunkWithComItextpdfTextPdfDrawDrawInterface:(id<ComItextpdfTextPdfDrawDrawInterface>)separator
                                                                    withBoolean:(jboolean)vertical {
  if (self =
#line 244
  [self initComItextpdfTextChunkWithNSString:ComItextpdfTextChunk_OBJECT_REPLACEMENT_CHARACTER_ withComItextpdfTextFont:[[ComItextpdfTextFont alloc] init]]) {
    
#line 245
    (void) [self setAttributeWithNSString:ComItextpdfTextChunk_SEPARATOR_ withId:[IOSObjectArray arrayWithObjects:(id[]){ separator, [JavaLangBoolean valueOfWithBoolean:vertical] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
    
#line 246
    self->role_ = nil;
  }
  return self;
}

- (instancetype)initWithComItextpdfTextPdfDrawDrawInterface:(id<ComItextpdfTextPdfDrawDrawInterface>)separator
                                                withBoolean:(jboolean)vertical {
  return [self initComItextpdfTextChunkWithComItextpdfTextPdfDrawDrawInterface:
#line 243
separator withBoolean:vertical];
}


#line 269
- (instancetype)initWithComItextpdfTextPdfDrawDrawInterface:(id<ComItextpdfTextPdfDrawDrawInterface>)separator
                                                  withFloat:(jfloat)tabPosition {
  return
#line 270
  [self initComItextpdfTextChunkWithComItextpdfTextPdfDrawDrawInterface:separator withFloat:tabPosition withBoolean:NO];
}


#line 282
- (instancetype)initComItextpdfTextChunkWithComItextpdfTextPdfDrawDrawInterface:(id<ComItextpdfTextPdfDrawDrawInterface>)separator
                                                                      withFloat:(jfloat)tabPosition
                                                                    withBoolean:(jboolean)newline {
  if (self =
#line 283
  [self initComItextpdfTextChunkWithNSString:ComItextpdfTextChunk_OBJECT_REPLACEMENT_CHARACTER_ withComItextpdfTextFont:[[ComItextpdfTextFont alloc] init]]) {
    
#line 284
    if (tabPosition < 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"a.tab.position.may.not.be.lower.than.0.yours.is.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOfFloat:tabPosition] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    
#line 287
    (void) [self setAttributeWithNSString:ComItextpdfTextChunk_TAB_ withId:[IOSObjectArray arrayWithObjects:(id[]){ separator, [[JavaLangFloat alloc] initWithFloat:tabPosition], [JavaLangBoolean valueOfWithBoolean:newline], [[JavaLangFloat alloc] initWithFloat:0] } count:4 type:[IOSClass classWithClass:[NSObject class]]]];
    
#line 288
    self->role_ = ComItextpdfTextPdfPdfName_get_ARTIFACT_();
  }
  return self;
}

- (instancetype)initWithComItextpdfTextPdfDrawDrawInterface:(id<ComItextpdfTextPdfDrawDrawInterface>)separator
                                                  withFloat:(jfloat)tabPosition
                                                withBoolean:(jboolean)newline {
  return [self initComItextpdfTextChunkWithComItextpdfTextPdfDrawDrawInterface:
#line 282
separator withFloat:tabPosition withBoolean:newline];
}


#line 298
- (instancetype)initWithJavaLangFloat:(JavaLangFloat *)tabInterval
                          withBoolean:(jboolean)isWhitespace {
  if (self =
#line 299
  [self initComItextpdfTextChunkWithNSString:ComItextpdfTextChunk_OBJECT_REPLACEMENT_CHARACTER_ withComItextpdfTextFont:[[ComItextpdfTextFont alloc] init]]) {
    
#line 300
    if ([((JavaLangFloat *) nil_chk(tabInterval)) floatValue] < 0) {
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfTextError_messagesMessageLocalization getComposedMessageWithNSString:@"a.tab.position.may.not.be.lower.than.0.yours.is.1" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ [NSString valueOf:tabInterval] } count:1 type:[IOSClass classWithClass:[NSObject class]]]]];
    }
    
#line 303
    (void) [self setAttributeWithNSString:ComItextpdfTextChunk_TAB_ withId:[IOSObjectArray arrayWithObjects:(id[]){ tabInterval, [JavaLangBoolean valueOfWithBoolean:isWhitespace] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
    
#line 304
    (void) [self setAttributeWithNSString:ComItextpdfTextChunk_SPLITCHARACTER_ withId:ComItextpdfTextTabSplitCharacter_get_TAB_()];
    
#line 306
    (void) [self setAttributeWithNSString:ComItextpdfTextChunk_TABSETTINGS_ withId:nil];
    
#line 307
    self->role_ = ComItextpdfTextPdfPdfName_get_ARTIFACT_();
  }
  return self;
}


#line 322
- (instancetype)initWithComItextpdfTextImage:(ComItextpdfTextImage *)image
                                   withFloat:(jfloat)offsetX
                                   withFloat:(jfloat)offsetY
                                 withBoolean:(jboolean)changeLeading {
  if (self =
#line 324
  [self initComItextpdfTextChunkWithNSString:ComItextpdfTextChunk_OBJECT_REPLACEMENT_CHARACTER_ withComItextpdfTextFont:[[ComItextpdfTextFont alloc] init]]) {
    
#line 325
    (void) [self setAttributeWithNSString:ComItextpdfTextChunk_IMAGE_ withId:[IOSObjectArray arrayWithObjects:(id[]){ image, [[JavaLangFloat alloc] initWithFloat:offsetX],
#line 326
    [[JavaLangFloat alloc] initWithFloat:offsetY], [JavaLangBoolean valueOfWithBoolean:changeLeading] } count:4 type:[IOSClass classWithClass:[NSObject class]]]];
    
#line 327
    self->role_ = ComItextpdfTextPdfPdfName_get_ARTIFACT_();
  }
  return self;
}


#line 340
- (jboolean)processWithComItextpdfTextElementListener:(id<ComItextpdfTextElementListener>)listener {
  @try {
    return [((id<ComItextpdfTextElementListener>) nil_chk(listener)) addWithComItextpdfTextElement:self];
  }
  @catch (
#line 343
  ComItextpdfTextDocumentException *de) {
    return NO;
  }
}


#line 353
- (jint)type {
  
#line 354
  return ComItextpdfTextElement_CHUNK;
}


#line 362
- (id<JavaUtilList>)getChunks {
  
#line 363
  id<JavaUtilList> tmp = [[JavaUtilArrayList alloc] init];
  [tmp addWithId:self];
  return tmp;
}


#line 377
- (JavaLangStringBuffer *)appendWithNSString:(NSString *)string {
  
#line 378
  contentWithNoTabs_ = nil;
  return [((JavaLangStringBuffer *) nil_chk(content_)) appendWithNSString:string];
}


#line 388
- (void)setFontWithComItextpdfTextFont:(ComItextpdfTextFont *)font {
  
#line 389
  self->font_ = font;
}


#line 399
- (ComItextpdfTextFont *)getFont {
  
#line 400
  return font_;
}


#line 408
- (NSString *)getContent {
  
#line 409
  if (contentWithNoTabs_ == nil)
#line 410
  contentWithNoTabs_ = [((NSString *) nil_chk([((JavaLangStringBuffer *) nil_chk(content_)) description])) replaceAll:@"\t" withReplacement:@""];
  return contentWithNoTabs_;
}

- (NSString *)description {
  
#line 421
  return [self getContent];
}


#line 430
- (jboolean)isEmpty {
  
#line 431
  return ((jint) [((NSString *) nil_chk([((NSString *) nil_chk([((JavaLangStringBuffer *) nil_chk(content_)) description])) trim])) length]) == 0 &&
#line 432
  [((NSString *) nil_chk([content_ description])) indexOfString:@"\n"] == -1 &&
#line 433
  attributes_ == nil;
}


#line 441
- (jfloat)getWidthPoint {
  
#line 442
  if ([self getImage] != nil) {
    return [((ComItextpdfTextImage *) nil_chk([self getImage])) getScaledWidth];
  }
  return [((ComItextpdfTextPdfBaseFont *) nil_chk([((ComItextpdfTextFont *) nil_chk(font_)) getCalculatedBaseFontWithBoolean:YES])) getWidthPointWithNSString:[self getContent] withFloat:
#line 446
  [font_ getCalculatedSize]] *
#line 447
  [self getHorizontalScaling];
}


#line 458
- (jboolean)hasAttributes {
  
#line 459
  return attributes_ != nil;
}


#line 470
- (JavaUtilHashMap *)getAttributes {
  
#line 471
  return attributes_;
}


#line 478
- (void)setAttributesWithJavaUtilHashMap:(JavaUtilHashMap *)attributes {
  
#line 479
  self->attributes_ = attributes;
}


#line 492
- (ComItextpdfTextChunk *)setAttributeWithNSString:(NSString *)name
                                            withId:(id)obj {
  
#line 493
  if (attributes_ == nil)
#line 494
  attributes_ = [[JavaUtilHashMap alloc] init];
  (void) [((JavaUtilHashMap *) nil_chk(attributes_)) putWithId:name withId:obj];
  return self;
}


#line 512
- (ComItextpdfTextChunk *)setHorizontalScalingWithFloat:(jfloat)scale_ {
  
#line 513
  return [self setAttributeWithNSString:ComItextpdfTextChunk_HSCALE_ withId:[[JavaLangFloat alloc] initWithFloat:scale_]];
}


#line 521
- (jfloat)getHorizontalScaling {
  
#line 522
  if (attributes_ == nil)
#line 523
  return 1.0f;
  JavaLangFloat *f = (JavaLangFloat *) check_class_cast([((JavaUtilHashMap *) nil_chk(attributes_)) getWithId:ComItextpdfTextChunk_HSCALE_], [JavaLangFloat class]);
  if (f == nil)
#line 526
  return 1.0f;
  return [((JavaLangFloat *) nil_chk(f)) floatValue];
}


#line 545
- (ComItextpdfTextChunk *)setUnderlineWithFloat:(jfloat)thickness
                                      withFloat:(jfloat)yPosition {
  
#line 546
  return [self setUnderlineWithComItextpdfTextBaseColor:nil withFloat:thickness withFloat:0.0f withFloat:yPosition withFloat:0.0f withInt:
#line 547
  ComItextpdfTextPdfPdfContentByte_LINE_CAP_BUTT];
}


#line 573
- (ComItextpdfTextChunk *)setUnderlineWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                                         withFloat:(jfloat)thickness
                                                         withFloat:(jfloat)thicknessMul
                                                         withFloat:(jfloat)yPosition
                                                         withFloat:(jfloat)yPositionMul
                                                           withInt:(jint)cap {
  
#line 575
  if (attributes_ == nil)
#line 576
  attributes_ = [[JavaUtilHashMap alloc] init];
  IOSObjectArray *obj = [IOSObjectArray arrayWithObjects:(id[]){
#line 578
    color, [IOSFloatArray arrayWithFloats:(jfloat[]){
#line 579
      thickness, thicknessMul, yPosition, yPositionMul, cap } count:5] } count:2 type:[IOSClass classWithClass:[NSObject class]]];
      IOSObjectArray *unders = [ComItextpdfTextUtilities addToArrayWithNSObjectArray2:(IOSObjectArray *) check_class_cast([((JavaUtilHashMap *) nil_chk(attributes_)) getWithId:ComItextpdfTextChunk_UNDERLINE_], [IOSObjectArray class]) withNSObjectArray:
#line 581
      obj];
      return [self setAttributeWithNSString:ComItextpdfTextChunk_UNDERLINE_ withId:unders];
    }


#line 599
- (ComItextpdfTextChunk *)setTextRiseWithFloat:(jfloat)rise {
  
#line 600
  return [self setAttributeWithNSString:ComItextpdfTextChunk_SUBSUPSCRIPT_ withId:[[JavaLangFloat alloc] initWithFloat:rise]];
}


#line 608
- (jfloat)getTextRise {
  
#line 609
  if (attributes_ != nil && [attributes_ containsKeyWithId:ComItextpdfTextChunk_SUBSUPSCRIPT_]) {
    JavaLangFloat *f = (JavaLangFloat *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_SUBSUPSCRIPT_], [JavaLangFloat class]);
    return [((JavaLangFloat *) nil_chk(f)) floatValue];
  }
  return 0.0f;
}


#line 629
- (ComItextpdfTextChunk *)setSkewWithFloat:(jfloat)alpha
                                 withFloat:(jfloat)beta {
  
#line 630
  alpha = (jfloat) [JavaLangMath tanWithDouble:alpha * JavaLangMath_PI / 180];
  beta = (jfloat) [JavaLangMath tanWithDouble:beta * JavaLangMath_PI / 180];
  return [self setAttributeWithNSString:ComItextpdfTextChunk_SKEW_ withId:[IOSFloatArray arrayWithFloats:(jfloat[]){ alpha, beta } count:2]];
}


#line 645
- (ComItextpdfTextChunk *)setBackgroundWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color {
  
#line 646
  return [self setBackgroundWithComItextpdfTextBaseColor:color withFloat:0 withFloat:0 withFloat:0 withFloat:0];
}


#line 664
- (ComItextpdfTextChunk *)setBackgroundWithComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)color
                                                          withFloat:(jfloat)extraLeft
                                                          withFloat:(jfloat)extraBottom
                                                          withFloat:(jfloat)extraRight
                                                          withFloat:(jfloat)extraTop {
  
#line 666
  return [self setAttributeWithNSString:ComItextpdfTextChunk_BACKGROUND_ withId:[IOSObjectArray arrayWithObjects:(id[]){ color, [IOSFloatArray arrayWithFloats:(jfloat[]){
#line 667
    extraLeft, extraBottom, extraRight, extraTop } count:4] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
  }


#line 692
- (ComItextpdfTextChunk *)setTextRenderModeWithInt:(jint)mode
                                         withFloat:(jfloat)strokeWidth
                      withComItextpdfTextBaseColor:(ComItextpdfTextBaseColor *)strokeColor {
  
#line 694
  return [self setAttributeWithNSString:ComItextpdfTextChunk_TEXTRENDERMODE_ withId:[IOSObjectArray arrayWithObjects:(id[]){ [JavaLangInteger valueOfWithInt:mode],
#line 695
  [[JavaLangFloat alloc] initWithFloat:strokeWidth], strokeColor } count:3 type:[IOSClass classWithClass:[NSObject class]]]];
}


#line 709
- (ComItextpdfTextChunk *)setSplitCharacterWithComItextpdfTextSplitCharacter:(id<ComItextpdfTextSplitCharacter>)splitCharacter {
  
#line 710
  return [self setAttributeWithNSString:ComItextpdfTextChunk_SPLITCHARACTER_ withId:splitCharacter];
}


#line 723
- (ComItextpdfTextChunk *)setHyphenationWithComItextpdfTextPdfHyphenationEvent:(id<ComItextpdfTextPdfHyphenationEvent>)hyphenation {
  
#line 724
  return [self setAttributeWithNSString:ComItextpdfTextChunk_HYPHENATION_ withId:hyphenation];
}


#line 740
- (ComItextpdfTextChunk *)setRemoteGotoWithNSString:(NSString *)filename
                                       withNSString:(NSString *)name {
  
#line 741
  return [self setAttributeWithNSString:ComItextpdfTextChunk_REMOTEGOTO_ withId:[IOSObjectArray arrayWithObjects:(id[]){ filename, name } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
}


#line 754
- (ComItextpdfTextChunk *)setRemoteGotoWithNSString:(NSString *)filename
                                            withInt:(jint)page {
  
#line 755
  return [self setAttributeWithNSString:ComItextpdfTextChunk_REMOTEGOTO_ withId:[IOSObjectArray arrayWithObjects:(id[]){ filename,
#line 756
  [JavaLangInteger valueOfWithInt:page] } count:2 type:[IOSClass classWithClass:[NSObject class]]]];
}


#line 772
- (ComItextpdfTextChunk *)setLocalGotoWithNSString:(NSString *)name {
  
#line 773
  return [self setAttributeWithNSString:ComItextpdfTextChunk_LOCALGOTO_ withId:name];
}


#line 786
- (ComItextpdfTextChunk *)setLocalDestinationWithNSString:(NSString *)name {
  
#line 787
  return [self setAttributeWithNSString:ComItextpdfTextChunk_LOCALDESTINATION_ withId:name];
}


#line 803
- (ComItextpdfTextChunk *)setGenericTagWithNSString:(NSString *)text {
  
#line 804
  return [self setAttributeWithNSString:ComItextpdfTextChunk_GENERICTAG_ withId:text];
}


#line 816
- (ComItextpdfTextChunk *)setLineHeightWithFloat:(jfloat)lineheight {
  
#line 817
  return [self setAttributeWithNSString:ComItextpdfTextChunk_LINEHEIGHT_ withId:[JavaLangFloat valueOfWithFloat:lineheight]];
}


#line 830
- (ComItextpdfTextImage *)getImage {
  
#line 831
  if (attributes_ == nil)
#line 832
  return nil;
  IOSObjectArray *obj = (IOSObjectArray *) check_class_cast([((JavaUtilHashMap *) nil_chk(attributes_)) getWithId:ComItextpdfTextChunk_IMAGE_], [IOSObjectArray class]);
  if (obj == nil)
#line 835
  return nil;
  else {
    return (ComItextpdfTextImage *) check_class_cast(IOSObjectArray_Get(obj, 0), [ComItextpdfTextImage class]);
  }
}


#line 852
- (ComItextpdfTextChunk *)setActionWithComItextpdfTextPdfPdfAction:(ComItextpdfTextPdfPdfAction *)action {
  
#line 853
  [self setRoleWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LINK_()];
  return [self setAttributeWithNSString:ComItextpdfTextChunk_ACTION_ withId:action];
}


#line 865
- (ComItextpdfTextChunk *)setAnchorWithJavaNetURL:(JavaNetURL *)url {
  
#line 866
  [self setRoleWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LINK_()];
  return [self setAttributeWithNSString:ComItextpdfTextChunk_ACTION_ withId:[[ComItextpdfTextPdfPdfAction alloc] initWithNSString:[((JavaNetURL *) nil_chk(url)) toExternalForm]]];
}


#line 878
- (ComItextpdfTextChunk *)setAnchorWithNSString:(NSString *)url {
  
#line 879
  [self setRoleWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_LINK_()];
  return [self setAttributeWithNSString:ComItextpdfTextChunk_ACTION_ withId:[[ComItextpdfTextPdfPdfAction alloc] initWithNSString:url]];
}


#line 892
- (ComItextpdfTextChunk *)setNewPage {
  
#line 893
  return [self setAttributeWithNSString:ComItextpdfTextChunk_NEWPAGE_ withId:nil];
}


#line 906
- (ComItextpdfTextChunk *)setAnnotationWithComItextpdfTextPdfPdfAnnotation:(ComItextpdfTextPdfPdfAnnotation *)annotation {
  
#line 907
  return [self setAttributeWithNSString:ComItextpdfTextChunk_PDFANNOTATION_ withId:annotation];
}


#line 914
- (jboolean)isContent {
  
#line 915
  return YES;
}


#line 922
- (jboolean)isNestable {
  
#line 923
  return YES;
}


#line 931
- (id<ComItextpdfTextPdfHyphenationEvent>)getHyphenation {
  
#line 932
  if (attributes_ == nil) return nil;
  return (id<ComItextpdfTextPdfHyphenationEvent>) check_protocol_cast([((JavaUtilHashMap *) nil_chk(attributes_)) getWithId:ComItextpdfTextChunk_HYPHENATION_], @protocol(ComItextpdfTextPdfHyphenationEvent));
}


#line 955
- (ComItextpdfTextChunk *)setCharacterSpacingWithFloat:(jfloat)charSpace {
  
#line 956
  return [self setAttributeWithNSString:ComItextpdfTextChunk_CHAR_SPACING_ withId:[[JavaLangFloat alloc] initWithFloat:charSpace]];
}


#line 964
- (jfloat)getCharacterSpacing {
  
#line 965
  if (attributes_ != nil && [attributes_ containsKeyWithId:ComItextpdfTextChunk_CHAR_SPACING_]) {
    JavaLangFloat *f = (JavaLangFloat *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_CHAR_SPACING_], [JavaLangFloat class]);
    return [((JavaLangFloat *) nil_chk(f)) floatValue];
  }
  return 0.0f;
}


#line 983
- (ComItextpdfTextChunk *)setWordSpacingWithFloat:(jfloat)wordSpace {
  
#line 984
  return [self setAttributeWithNSString:ComItextpdfTextChunk_WORD_SPACING_ withId:[[JavaLangFloat alloc] initWithFloat:wordSpace]];
}


#line 992
- (jfloat)getWordSpacing {
  
#line 993
  if (attributes_ != nil && [attributes_ containsKeyWithId:ComItextpdfTextChunk_WORD_SPACING_]) {
    JavaLangFloat *f = (JavaLangFloat *) check_class_cast([attributes_ getWithId:ComItextpdfTextChunk_WORD_SPACING_], [JavaLangFloat class]);
    return [((JavaLangFloat *) nil_chk(f)) floatValue];
  }
  return 0.0f;
}

+ (ComItextpdfTextChunk *)createWhitespaceWithNSString:(NSString *)content {
  
#line 1003
  return [ComItextpdfTextChunk createWhitespaceWithNSString:content withBoolean:NO];
}


#line 1006
+ (ComItextpdfTextChunk *)createWhitespaceWithNSString:(NSString *)content
                                           withBoolean:(jboolean)preserve {
  
#line 1007
  ComItextpdfTextChunk *whitespace = nil;
  if (!preserve) {
    whitespace = [[ComItextpdfTextChunk alloc] initWithChar:' '];
    (void) [whitespace setAttributeWithNSString:ComItextpdfTextChunk_WHITESPACE_ withId:content];
  }
  else {
    
#line 1012
    whitespace = [[ComItextpdfTextChunk alloc] initWithNSString:content];
  }
  
#line 1015
  return whitespace;
}


#line 1018
- (jboolean)isWhitespace {
  
#line 1019
  return attributes_ != nil && [attributes_ containsKeyWithId:ComItextpdfTextChunk_WHITESPACE_];
}


#line 1023
+ (ComItextpdfTextChunk *)createTabspace {
  return [ComItextpdfTextChunk createTabspaceWithFloat:60];
}


#line 1028
+ (ComItextpdfTextChunk *)createTabspaceWithFloat:(jfloat)spacing {
  
#line 1029
  ComItextpdfTextChunk *tabspace = [[ComItextpdfTextChunk alloc] initWithJavaLangFloat:[JavaLangFloat valueOfWithFloat:spacing] withBoolean:YES];
  return tabspace;
}


#line 1034
- (jboolean)isTabspace {
  return attributes_ != nil && [attributes_ containsKeyWithId:ComItextpdfTextChunk_TAB_];
}

- (ComItextpdfTextPdfPdfObject *)getAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key {
  
#line 1039
  if ([self getImage] != nil) {
    return [((ComItextpdfTextImage *) nil_chk([self getImage])) getAccessibleAttributeWithComItextpdfTextPdfPdfName:key];
  }
  else
#line 1041
  if (accessibleAttributes_ != nil)
#line 1042
  return [accessibleAttributes_ getWithId:key];
  else
#line 1044
  return nil;
}


#line 1047
- (void)setAccessibleAttributeWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)key
                            withComItextpdfTextPdfPdfObject:(ComItextpdfTextPdfPdfObject *)value {
  
#line 1048
  if ([self getImage] != nil) {
    [((ComItextpdfTextImage *) nil_chk([self getImage])) setAccessibleAttributeWithComItextpdfTextPdfPdfName:key withComItextpdfTextPdfPdfObject:value];
  }
  else {
    
#line 1051
    if (accessibleAttributes_ == nil)
#line 1052
    accessibleAttributes_ = [[JavaUtilHashMap alloc] init];
    (void) [((JavaUtilHashMap *) nil_chk(accessibleAttributes_)) putWithId:key withId:value];
  }
}


#line 1057
- (JavaUtilHashMap *)getAccessibleAttributes {
  
#line 1058
  if ([self getImage] != nil)
#line 1059
  return [((ComItextpdfTextImage *) nil_chk([self getImage])) getAccessibleAttributes];
  else
#line 1061
  return accessibleAttributes_;
}


#line 1064
- (ComItextpdfTextPdfPdfName *)getRole {
  
#line 1065
  if ([self getImage] != nil)
#line 1066
  return [((ComItextpdfTextImage *) nil_chk([self getImage])) getRole];
  else
#line 1068
  return role_;
}


#line 1071
- (void)setRoleWithComItextpdfTextPdfPdfName:(ComItextpdfTextPdfPdfName *)role {
  
#line 1072
  if ([self getImage] != nil)
#line 1073
  [((ComItextpdfTextImage *) nil_chk([self getImage])) setRoleWithComItextpdfTextPdfPdfName:role];
  else
#line 1075
  self->role_ = role;
}


#line 1078
- (ComItextpdfTextAccessibleElementId *)getId {
  
#line 1079
  if (id__ == nil)
#line 1080
  id__ = [[ComItextpdfTextAccessibleElementId alloc] init];
  return id__;
}


#line 1084
- (void)setIdWithComItextpdfTextAccessibleElementId:(ComItextpdfTextAccessibleElementId *)id_ {
  
#line 1085
  self->id__ = id_;
}


#line 1088
- (jboolean)isInline {
  
#line 1089
  return YES;
}


#line 1092
- (NSString *)getTextExpansion {
  
#line 1093
  ComItextpdfTextPdfPdfObject *o = [self getAccessibleAttributeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_E_()];
  if ([o isKindOfClass:[ComItextpdfTextPdfPdfString class]])
#line 1095
  return [((ComItextpdfTextPdfPdfString *) nil_chk(((ComItextpdfTextPdfPdfString *) check_class_cast(o, [ComItextpdfTextPdfPdfString class])))) toUnicodeString];
  return nil;
}


#line 1104
- (void)setTextExpansionWithNSString:(NSString *)value {
  
#line 1105
  [self setAccessibleAttributeWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_E_() withComItextpdfTextPdfPdfObject:[[ComItextpdfTextPdfPdfString alloc] initWithNSString:value]];
}

- (void)copyAllFieldsTo:(ComItextpdfTextChunk *)other {
  [super copyAllFieldsTo:other];
  other->accessibleAttributes_ = accessibleAttributes_;
  other->attributes_ = attributes_;
  other->content_ = content_;
  other->contentWithNoTabs_ = contentWithNoTabs_;
  other->font_ = font_;
  other->id__ = id__;
  other->role_ = role_;
}

+ (void)initialize {
  if (self == [ComItextpdfTextChunk class]) {
    ComItextpdfTextChunk_NEWLINE_ =
#line 87
    [[ComItextpdfTextChunk alloc] initWithNSString:@"\n"];
    {
      
#line 89
      [ComItextpdfTextChunk_NEWLINE_ setRoleWithComItextpdfTextPdfPdfName:ComItextpdfTextPdfPdfName_get_P_()];
    }
    ComItextpdfTextChunk_NEXTPAGE_ =
#line 93
    [[ComItextpdfTextChunk alloc] initWithNSString:@""];
    {
      
#line 95
      (void) [ComItextpdfTextChunk_NEXTPAGE_ setNewPage];
    }
    ComItextpdfTextChunk_TABBING_ =
#line 98
    [[ComItextpdfTextChunk alloc] initWithJavaLangFloat:[JavaLangFloat valueOfWithFloat:JavaLangFloat_NaN] withBoolean:NO];
    ComItextpdfTextChunk_SPACETABBING_ =
#line 100
    [[ComItextpdfTextChunk alloc] initWithJavaLangFloat:[JavaLangFloat valueOfWithFloat:JavaLangFloat_NaN] withBoolean:YES];
    ComItextpdfTextChunk_initialized = YES;
  }
}

+ (IOSObjectArray *)__annotations_ComItextpdfTextChunkWithComItextpdfTextPdfDrawDrawInterface_withFloat_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_ComItextpdfTextChunkWithComItextpdfTextPdfDrawDrawInterface_withFloat_withBoolean_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_createTabspace {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_createTabspaceWithFloat_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (IOSObjectArray *)__annotations_isTabspace {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[JavaLangDeprecated alloc] init] } count:1 type:[IOSClass classWithProtocol:@protocol(JavaLangAnnotationAnnotation)]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Chunk", NULL, 0x1, NULL },
    { "initWithComItextpdfTextChunk:", "Chunk", NULL, 0x1, NULL },
    { "initWithNSString:withComItextpdfTextFont:", "Chunk", NULL, 0x1, NULL },
    { "initWithNSString:", "Chunk", NULL, 0x1, NULL },
    { "initWithChar:withComItextpdfTextFont:", "Chunk", NULL, 0x1, NULL },
    { "initWithChar:", "Chunk", NULL, 0x1, NULL },
    { "initWithComItextpdfTextImage:withFloat:withFloat:", "Chunk", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfDrawDrawInterface:", "Chunk", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfDrawDrawInterface:withBoolean:", "Chunk", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfDrawDrawInterface:withFloat:", "Chunk", NULL, 0x1, NULL },
    { "initWithComItextpdfTextPdfDrawDrawInterface:withFloat:withBoolean:", "Chunk", NULL, 0x1, NULL },
    { "initWithJavaLangFloat:withBoolean:", "Chunk", NULL, 0x2, NULL },
    { "initWithComItextpdfTextImage:withFloat:withFloat:withBoolean:", "Chunk", NULL, 0x1, NULL },
    { "processWithComItextpdfTextElementListener:", "process", "Z", 0x1, NULL },
    { "type", NULL, "I", 0x1, NULL },
    { "getChunks", NULL, "Ljava.util.List;", 0x1, NULL },
    { "appendWithNSString:", "append", "Ljava.lang.StringBuffer;", 0x1, NULL },
    { "setFontWithComItextpdfTextFont:", "setFont", "V", 0x1, NULL },
    { "getFont", NULL, "Lcom.itextpdf.text.Font;", 0x1, NULL },
    { "getContent", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "getWidthPoint", NULL, "F", 0x1, NULL },
    { "hasAttributes", NULL, "Z", 0x1, NULL },
    { "getAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "setAttributesWithJavaUtilHashMap:", "setAttributes", "V", 0x1, NULL },
    { "setAttributeWithNSString:withId:", "setAttribute", "Lcom.itextpdf.text.Chunk;", 0x2, NULL },
    { "setHorizontalScalingWithFloat:", "setHorizontalScaling", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "getHorizontalScaling", NULL, "F", 0x1, NULL },
    { "setUnderlineWithFloat:withFloat:", "setUnderline", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setUnderlineWithComItextpdfTextBaseColor:withFloat:withFloat:withFloat:withFloat:withInt:", "setUnderline", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setTextRiseWithFloat:", "setTextRise", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "getTextRise", NULL, "F", 0x1, NULL },
    { "setSkewWithFloat:withFloat:", "setSkew", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setBackgroundWithComItextpdfTextBaseColor:", "setBackground", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setBackgroundWithComItextpdfTextBaseColor:withFloat:withFloat:withFloat:withFloat:", "setBackground", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setTextRenderModeWithInt:withFloat:withComItextpdfTextBaseColor:", "setTextRenderMode", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setSplitCharacterWithComItextpdfTextSplitCharacter:", "setSplitCharacter", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setHyphenationWithComItextpdfTextPdfHyphenationEvent:", "setHyphenation", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setRemoteGotoWithNSString:withNSString:", "setRemoteGoto", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setRemoteGotoWithNSString:withInt:", "setRemoteGoto", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setLocalGotoWithNSString:", "setLocalGoto", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setLocalDestinationWithNSString:", "setLocalDestination", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setGenericTagWithNSString:", "setGenericTag", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setLineHeightWithFloat:", "setLineHeight", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "getImage", NULL, "Lcom.itextpdf.text.Image;", 0x1, NULL },
    { "setActionWithComItextpdfTextPdfPdfAction:", "setAction", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setAnchorWithJavaNetURL:", "setAnchor", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setAnchorWithNSString:", "setAnchor", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setNewPage", NULL, "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "setAnnotationWithComItextpdfTextPdfPdfAnnotation:", "setAnnotation", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "isContent", NULL, "Z", 0x1, NULL },
    { "isNestable", NULL, "Z", 0x1, NULL },
    { "getHyphenation", NULL, "Lcom.itextpdf.text.pdf.HyphenationEvent;", 0x1, NULL },
    { "setCharacterSpacingWithFloat:", "setCharacterSpacing", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "getCharacterSpacing", NULL, "F", 0x1, NULL },
    { "setWordSpacingWithFloat:", "setWordSpacing", "Lcom.itextpdf.text.Chunk;", 0x1, NULL },
    { "getWordSpacing", NULL, "F", 0x1, NULL },
    { "createWhitespaceWithNSString:", "createWhitespace", "Lcom.itextpdf.text.Chunk;", 0x9, NULL },
    { "createWhitespaceWithNSString:withBoolean:", "createWhitespace", "Lcom.itextpdf.text.Chunk;", 0x9, NULL },
    { "isWhitespace", NULL, "Z", 0x1, NULL },
    { "createTabspace", NULL, "Lcom.itextpdf.text.Chunk;", 0x9, NULL },
    { "createTabspaceWithFloat:", "createTabspace", "Lcom.itextpdf.text.Chunk;", 0x9, NULL },
    { "isTabspace", NULL, "Z", 0x1, NULL },
    { "getAccessibleAttributeWithComItextpdfTextPdfPdfName:", "getAccessibleAttribute", "Lcom.itextpdf.text.pdf.PdfObject;", 0x1, NULL },
    { "setAccessibleAttributeWithComItextpdfTextPdfPdfName:withComItextpdfTextPdfPdfObject:", "setAccessibleAttribute", "V", 0x1, NULL },
    { "getAccessibleAttributes", NULL, "Ljava.util.HashMap;", 0x1, NULL },
    { "getRole", NULL, "Lcom.itextpdf.text.pdf.PdfName;", 0x1, NULL },
    { "setRoleWithComItextpdfTextPdfPdfName:", "setRole", "V", 0x1, NULL },
    { "getId", NULL, "Lcom.itextpdf.text.AccessibleElementId;", 0x1, NULL },
    { "setIdWithComItextpdfTextAccessibleElementId:", "setId", "V", 0x1, NULL },
    { "isInline", NULL, "Z", 0x1, NULL },
    { "getTextExpansion", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setTextExpansionWithNSString:", "setTextExpansion", "V", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "OBJECT_REPLACEMENT_CHARACTER_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_OBJECT_REPLACEMENT_CHARACTER_,  },
    { "NEWLINE_", NULL, 0x19, "Lcom.itextpdf.text.Chunk;", &ComItextpdfTextChunk_NEWLINE_,  },
    { "NEXTPAGE_", NULL, 0x19, "Lcom.itextpdf.text.Chunk;", &ComItextpdfTextChunk_NEXTPAGE_,  },
    { "TABBING_", NULL, 0x19, "Lcom.itextpdf.text.Chunk;", &ComItextpdfTextChunk_TABBING_,  },
    { "SPACETABBING_", NULL, 0x19, "Lcom.itextpdf.text.Chunk;", &ComItextpdfTextChunk_SPACETABBING_,  },
    { "content_", NULL, 0x4, "Ljava.lang.StringBuffer;", NULL,  },
    { "font_", NULL, 0x4, "Lcom.itextpdf.text.Font;", NULL,  },
    { "attributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "role_", NULL, 0x4, "Lcom.itextpdf.text.pdf.PdfName;", NULL,  },
    { "accessibleAttributes_", NULL, 0x4, "Ljava.util.HashMap;", NULL,  },
    { "id__", "id", 0x2, "Lcom.itextpdf.text.AccessibleElementId;", NULL,  },
    { "SEPARATOR_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_SEPARATOR_,  },
    { "TAB_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_TAB_,  },
    { "TABSETTINGS_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_TABSETTINGS_,  },
    { "contentWithNoTabs_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "HSCALE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_HSCALE_,  },
    { "UNDERLINE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_UNDERLINE_,  },
    { "SUBSUPSCRIPT_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_SUBSUPSCRIPT_,  },
    { "SKEW_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_SKEW_,  },
    { "BACKGROUND_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_BACKGROUND_,  },
    { "TEXTRENDERMODE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_TEXTRENDERMODE_,  },
    { "SPLITCHARACTER_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_SPLITCHARACTER_,  },
    { "HYPHENATION_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_HYPHENATION_,  },
    { "REMOTEGOTO_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_REMOTEGOTO_,  },
    { "LOCALGOTO_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_LOCALGOTO_,  },
    { "LOCALDESTINATION_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_LOCALDESTINATION_,  },
    { "GENERICTAG_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_GENERICTAG_,  },
    { "LINEHEIGHT_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_LINEHEIGHT_,  },
    { "IMAGE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_IMAGE_,  },
    { "ACTION_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_ACTION_,  },
    { "NEWPAGE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_NEWPAGE_,  },
    { "PDFANNOTATION_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_PDFANNOTATION_,  },
    { "COLOR_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_COLOR_,  },
    { "ENCODING_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_ENCODING_,  },
    { "CHAR_SPACING_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_CHAR_SPACING_,  },
    { "WORD_SPACING_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_WORD_SPACING_,  },
    { "WHITESPACE_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfTextChunk_WHITESPACE_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfTextChunk = { "Chunk", "com.itextpdf.text", NULL, 0x1, 74, methods, 37, fields, 0, NULL};
  return &_ComItextpdfTextChunk;
}

@end
