//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/options/ParseOptions.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/options/ParseOptions.java"

#include "com/itextpdf/xmp/options/Options.h"
#include "com/itextpdf/xmp/options/ParseOptions.h"


#line 43
@implementation ComItextpdfXmpOptionsParseOptions


#line 60
- (instancetype)init {
  if (self = [super init]) {
    
#line 62
    [self setOptionWithInt:ComItextpdfXmpOptionsParseOptions_FIX_CONTROL_CHARS | ComItextpdfXmpOptionsParseOptions_ACCEPT_LATIN_1 withBoolean:YES];
  }
  return self;
}

- (jboolean)getRequireXMPMeta {
  
#line 71
  return [self getOptionWithInt:ComItextpdfXmpOptionsParseOptions_REQUIRE_XMP_META];
}


#line 79
- (ComItextpdfXmpOptionsParseOptions *)setRequireXMPMetaWithBoolean:(jboolean)value {
  
#line 81
  [self setOptionWithInt:ComItextpdfXmpOptionsParseOptions_REQUIRE_XMP_META withBoolean:value];
  return self;
}


#line 89
- (jboolean)getStrictAliasing {
  
#line 91
  return [self getOptionWithInt:ComItextpdfXmpOptionsParseOptions_STRICT_ALIASING];
}


#line 99
- (ComItextpdfXmpOptionsParseOptions *)setStrictAliasingWithBoolean:(jboolean)value {
  
#line 101
  [self setOptionWithInt:ComItextpdfXmpOptionsParseOptions_STRICT_ALIASING withBoolean:value];
  return self;
}


#line 109
- (jboolean)getFixControlChars {
  
#line 111
  return [self getOptionWithInt:ComItextpdfXmpOptionsParseOptions_FIX_CONTROL_CHARS];
}


#line 119
- (ComItextpdfXmpOptionsParseOptions *)setFixControlCharsWithBoolean:(jboolean)value {
  
#line 121
  [self setOptionWithInt:ComItextpdfXmpOptionsParseOptions_FIX_CONTROL_CHARS withBoolean:value];
  return self;
}


#line 129
- (jboolean)getAcceptLatin1 {
  
#line 131
  return [self getOptionWithInt:ComItextpdfXmpOptionsParseOptions_ACCEPT_LATIN_1];
}


#line 139
- (ComItextpdfXmpOptionsParseOptions *)setOmitNormalizationWithBoolean:(jboolean)value {
  
#line 141
  [self setOptionWithInt:ComItextpdfXmpOptionsParseOptions_OMIT_NORMALIZATION withBoolean:value];
  return self;
}


#line 149
- (jboolean)getOmitNormalization {
  
#line 151
  return [self getOptionWithInt:ComItextpdfXmpOptionsParseOptions_OMIT_NORMALIZATION];
}


#line 159
- (ComItextpdfXmpOptionsParseOptions *)setAcceptLatin1WithBoolean:(jboolean)value {
  
#line 161
  [self setOptionWithInt:ComItextpdfXmpOptionsParseOptions_ACCEPT_LATIN_1 withBoolean:value];
  return self;
}


#line 169
- (NSString *)defineOptionNameWithInt:(jint)option {
  
#line 171
  switch (option) {
    
#line 173
    case ComItextpdfXmpOptionsParseOptions_REQUIRE_XMP_META:
    
#line 173
    return @"REQUIRE_XMP_META";
    case ComItextpdfXmpOptionsParseOptions_STRICT_ALIASING:
    
#line 174
    return @"STRICT_ALIASING";
    case ComItextpdfXmpOptionsParseOptions_FIX_CONTROL_CHARS:
    
#line 175
    return @"FIX_CONTROL_CHARS";
    case ComItextpdfXmpOptionsParseOptions_ACCEPT_LATIN_1:
    
#line 176
    return @"ACCEPT_LATIN_1";
    case ComItextpdfXmpOptionsParseOptions_OMIT_NORMALIZATION:
    
#line 177
    return @"OMIT_NORMALIZATION";
    default:
    
#line 178
    return nil;
  }
}


#line 186
- (jint)getValidOptions {
  
#line 188
  return
#line 189
  ComItextpdfXmpOptionsParseOptions_REQUIRE_XMP_META |
#line 190
  ComItextpdfXmpOptionsParseOptions_STRICT_ALIASING |
#line 191
  ComItextpdfXmpOptionsParseOptions_FIX_CONTROL_CHARS |
#line 192
  ComItextpdfXmpOptionsParseOptions_ACCEPT_LATIN_1 |
#line 193
  ComItextpdfXmpOptionsParseOptions_OMIT_NORMALIZATION;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ParseOptions", NULL, 0x1, NULL },
    { "getRequireXMPMeta", NULL, "Z", 0x1, NULL },
    { "setRequireXMPMetaWithBoolean:", "setRequireXMPMeta", "Lcom.itextpdf.xmp.options.ParseOptions;", 0x1, NULL },
    { "getStrictAliasing", NULL, "Z", 0x1, NULL },
    { "setStrictAliasingWithBoolean:", "setStrictAliasing", "Lcom.itextpdf.xmp.options.ParseOptions;", 0x1, NULL },
    { "getFixControlChars", NULL, "Z", 0x1, NULL },
    { "setFixControlCharsWithBoolean:", "setFixControlChars", "Lcom.itextpdf.xmp.options.ParseOptions;", 0x1, NULL },
    { "getAcceptLatin1", NULL, "Z", 0x1, NULL },
    { "setOmitNormalizationWithBoolean:", "setOmitNormalization", "Lcom.itextpdf.xmp.options.ParseOptions;", 0x1, NULL },
    { "getOmitNormalization", NULL, "Z", 0x1, NULL },
    { "setAcceptLatin1WithBoolean:", "setAcceptLatin1", "Lcom.itextpdf.xmp.options.ParseOptions;", 0x1, NULL },
    { "defineOptionNameWithInt:", "defineOptionName", "Ljava.lang.String;", 0x4, NULL },
    { "getValidOptions", NULL, "I", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "REQUIRE_XMP_META_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsParseOptions_REQUIRE_XMP_META },
    { "STRICT_ALIASING_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsParseOptions_STRICT_ALIASING },
    { "FIX_CONTROL_CHARS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsParseOptions_FIX_CONTROL_CHARS },
    { "ACCEPT_LATIN_1_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsParseOptions_ACCEPT_LATIN_1 },
    { "OMIT_NORMALIZATION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsParseOptions_OMIT_NORMALIZATION },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpOptionsParseOptions = { "ParseOptions", "com.itextpdf.xmp.options", NULL, 0x11, 13, methods, 5, fields, 0, NULL};
  return &_ComItextpdfXmpOptionsParseOptions;
}

@end
