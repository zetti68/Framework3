//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/options/SerializeOptions.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/options/SerializeOptions.java"

#include "IOSClass.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/options/Options.h"
#include "com/itextpdf/xmp/options/SerializeOptions.h"
#include "java/lang/CloneNotSupportedException.h"


#line 43
@implementation ComItextpdfXmpOptionsSerializeOptions


#line 116
- (instancetype)init {
  if (self = [super init]) {
    padding_ =
#line 93
    2048;
    newline_ =
#line 98
    @"\n";
    indent_ =
#line 103
    @"  ";
    baseIndent_ =
#line 108
    0;
    omitVersionAttribute_ =
#line 110
    NO;
  }
  return self;
}


#line 127
- (instancetype)initWithInt:(jint)options {
  if (self =
#line 129
  [super initWithInt:options]) {
    padding_ =
#line 93
    2048;
    newline_ =
#line 98
    @"\n";
    indent_ =
#line 103
    @"  ";
    baseIndent_ =
#line 108
    0;
    omitVersionAttribute_ =
#line 110
    NO;
  }
  return self;
}


#line 136
- (jboolean)getOmitPacketWrapper {
  
#line 138
  return [self getOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_OMIT_PACKET_WRAPPER];
}


#line 146
- (ComItextpdfXmpOptionsSerializeOptions *)setOmitPacketWrapperWithBoolean:(jboolean)value {
  
#line 148
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_OMIT_PACKET_WRAPPER withBoolean:value];
  return self;
}


#line 156
- (jboolean)getOmitXmpMetaElement {
  
#line 158
  return [self getOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_OMIT_XMPMETA_ELEMENT];
}


#line 166
- (ComItextpdfXmpOptionsSerializeOptions *)setOmitXmpMetaElementWithBoolean:(jboolean)value {
  
#line 168
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_OMIT_XMPMETA_ELEMENT withBoolean:value];
  return self;
}


#line 176
- (jboolean)getReadOnlyPacket {
  
#line 178
  return [self getOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_READONLY_PACKET];
}


#line 186
- (ComItextpdfXmpOptionsSerializeOptions *)setReadOnlyPacketWithBoolean:(jboolean)value {
  
#line 188
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_READONLY_PACKET withBoolean:value];
  return self;
}


#line 196
- (jboolean)getUseCompactFormat {
  
#line 198
  return [self getOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_USE_COMPACT_FORMAT];
}


#line 206
- (ComItextpdfXmpOptionsSerializeOptions *)setUseCompactFormatWithBoolean:(jboolean)value {
  
#line 208
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_USE_COMPACT_FORMAT withBoolean:value];
  return self;
}


#line 216
- (jboolean)getUseCanonicalFormat {
  
#line 218
  return [self getOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_USE_CANONICAL_FORMAT];
}


#line 226
- (ComItextpdfXmpOptionsSerializeOptions *)setUseCanonicalFormatWithBoolean:(jboolean)value {
  
#line 228
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_USE_CANONICAL_FORMAT withBoolean:value];
  return self;
}


#line 235
- (jboolean)getIncludeThumbnailPad {
  
#line 237
  return [self getOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_INCLUDE_THUMBNAIL_PAD];
}


#line 245
- (ComItextpdfXmpOptionsSerializeOptions *)setIncludeThumbnailPadWithBoolean:(jboolean)value {
  
#line 247
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_INCLUDE_THUMBNAIL_PAD withBoolean:value];
  return self;
}


#line 255
- (jboolean)getExactPacketLength {
  
#line 257
  return [self getOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_EXACT_PACKET_LENGTH];
}


#line 265
- (ComItextpdfXmpOptionsSerializeOptions *)setExactPacketLengthWithBoolean:(jboolean)value {
  
#line 267
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_EXACT_PACKET_LENGTH withBoolean:value];
  return self;
}


#line 275
- (jboolean)getSort {
  
#line 277
  return [self getOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_SORT];
}


#line 285
- (ComItextpdfXmpOptionsSerializeOptions *)setSortWithBoolean:(jboolean)value {
  
#line 287
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_SORT withBoolean:value];
  return self;
}


#line 295
- (jboolean)getEncodeUTF16BE {
  
#line 297
  return ([self getOptions] & ComItextpdfXmpOptionsSerializeOptions_ENCODING_MASK) == ComItextpdfXmpOptionsSerializeOptions_ENCODE_UTF16BE;
}


#line 305
- (ComItextpdfXmpOptionsSerializeOptions *)setEncodeUTF16BEWithBoolean:(jboolean)value {
  
#line 308
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_UTF16_BIT | ComItextpdfXmpOptionsSerializeOptions_LITTLEENDIAN_BIT withBoolean:NO];
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_ENCODE_UTF16BE withBoolean:value];
  return self;
}


#line 317
- (jboolean)getEncodeUTF16LE {
  
#line 319
  return ([self getOptions] & ComItextpdfXmpOptionsSerializeOptions_ENCODING_MASK) == ComItextpdfXmpOptionsSerializeOptions_ENCODE_UTF16LE;
}


#line 327
- (ComItextpdfXmpOptionsSerializeOptions *)setEncodeUTF16LEWithBoolean:(jboolean)value {
  
#line 330
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_UTF16_BIT | ComItextpdfXmpOptionsSerializeOptions_LITTLEENDIAN_BIT withBoolean:NO];
  [self setOptionWithInt:ComItextpdfXmpOptionsSerializeOptions_ENCODE_UTF16LE withBoolean:value];
  return self;
}


#line 339
- (jint)getBaseIndent {
  
#line 341
  return baseIndent_;
}


#line 350
- (ComItextpdfXmpOptionsSerializeOptions *)setBaseIndentWithInt:(jint)baseIndent {
  
#line 352
  self->baseIndent_ = baseIndent;
  return self;
}


#line 360
- (NSString *)getIndent {
  
#line 362
  return indent_;
}


#line 371
- (ComItextpdfXmpOptionsSerializeOptions *)setIndentWithNSString:(NSString *)indent {
  
#line 373
  self->indent_ = indent;
  return self;
}


#line 381
- (NSString *)getNewline {
  
#line 383
  return newline_;
}


#line 392
- (ComItextpdfXmpOptionsSerializeOptions *)setNewlineWithNSString:(NSString *)newline {
  
#line 394
  self->newline_ = newline;
  return self;
}


#line 402
- (jint)getPadding {
  
#line 404
  return padding_;
}


#line 413
- (ComItextpdfXmpOptionsSerializeOptions *)setPaddingWithInt:(jint)padding {
  
#line 415
  self->padding_ = padding;
  return self;
}


#line 424
- (jboolean)getOmitVersionAttribute {
  
#line 426
  return omitVersionAttribute_;
}


#line 433
- (NSString *)getEncoding {
  
#line 435
  if ([self getEncodeUTF16BE]) {
    
#line 437
    return @"UTF-16BE";
  }
  else if ([self getEncodeUTF16LE]) {
    
#line 441
    return @"UTF-16LE";
  }
  else {
    
#line 445
    return @"UTF-8";
  }
}


#line 455
- (id)clone {
  
#line 457
  ComItextpdfXmpOptionsSerializeOptions *clone;
  @try {
    
#line 460
    clone = [[ComItextpdfXmpOptionsSerializeOptions alloc] initWithInt:[self getOptions]];
    (void) [clone setBaseIndentWithInt:baseIndent_];
    (void) [clone setIndentWithNSString:indent_];
    (void) [clone setNewlineWithNSString:newline_];
    (void) [clone setPaddingWithInt:padding_];
    return clone;
  }
  @catch (ComItextpdfXmpXMPException *e) {
    
#line 470
    return nil;
  }
}


#line 478
- (NSString *)defineOptionNameWithInt:(jint)option {
  
#line 480
  switch (option) {
    
#line 482
    case ComItextpdfXmpOptionsSerializeOptions_OMIT_PACKET_WRAPPER:
    
#line 482
    return @"OMIT_PACKET_WRAPPER";
    case ComItextpdfXmpOptionsSerializeOptions_READONLY_PACKET:
    
#line 483
    return @"READONLY_PACKET";
    case ComItextpdfXmpOptionsSerializeOptions_USE_COMPACT_FORMAT:
    
#line 484
    return @"USE_COMPACT_FORMAT";
    
#line 486
    case ComItextpdfXmpOptionsSerializeOptions_INCLUDE_THUMBNAIL_PAD:
    
#line 486
    return @"INCLUDE_THUMBNAIL_PAD";
    case ComItextpdfXmpOptionsSerializeOptions_EXACT_PACKET_LENGTH:
    
#line 487
    return @"EXACT_PACKET_LENGTH";
    case ComItextpdfXmpOptionsSerializeOptions_OMIT_XMPMETA_ELEMENT:
    
#line 488
    return @"OMIT_XMPMETA_ELEMENT";
    case ComItextpdfXmpOptionsSerializeOptions_SORT:
    
#line 489
    return @"NORMALIZED";
    default:
    
#line 490
    return nil;
  }
}


#line 498
- (jint)getValidOptions {
  
#line 500
  return
#line 501
  ComItextpdfXmpOptionsSerializeOptions_OMIT_PACKET_WRAPPER |
#line 502
  ComItextpdfXmpOptionsSerializeOptions_READONLY_PACKET |
#line 503
  ComItextpdfXmpOptionsSerializeOptions_USE_COMPACT_FORMAT |
#line 505
  ComItextpdfXmpOptionsSerializeOptions_INCLUDE_THUMBNAIL_PAD |
#line 506
  ComItextpdfXmpOptionsSerializeOptions_OMIT_XMPMETA_ELEMENT |
#line 507
  ComItextpdfXmpOptionsSerializeOptions_EXACT_PACKET_LENGTH |
#line 508
  ComItextpdfXmpOptionsSerializeOptions_SORT;
}

- (void)copyAllFieldsTo:(ComItextpdfXmpOptionsSerializeOptions *)other {
  [super copyAllFieldsTo:other];
  other->baseIndent_ = baseIndent_;
  other->indent_ = indent_;
  other->newline_ = newline_;
  other->omitVersionAttribute_ = omitVersionAttribute_;
  other->padding_ = padding_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SerializeOptions", NULL, 0x1, NULL },
    { "initWithInt:", "SerializeOptions", NULL, 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getOmitPacketWrapper", NULL, "Z", 0x1, NULL },
    { "setOmitPacketWrapperWithBoolean:", "setOmitPacketWrapper", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getOmitXmpMetaElement", NULL, "Z", 0x1, NULL },
    { "setOmitXmpMetaElementWithBoolean:", "setOmitXmpMetaElement", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getReadOnlyPacket", NULL, "Z", 0x1, NULL },
    { "setReadOnlyPacketWithBoolean:", "setReadOnlyPacket", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getUseCompactFormat", NULL, "Z", 0x1, NULL },
    { "setUseCompactFormatWithBoolean:", "setUseCompactFormat", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getUseCanonicalFormat", NULL, "Z", 0x1, NULL },
    { "setUseCanonicalFormatWithBoolean:", "setUseCanonicalFormat", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getIncludeThumbnailPad", NULL, "Z", 0x1, NULL },
    { "setIncludeThumbnailPadWithBoolean:", "setIncludeThumbnailPad", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getExactPacketLength", NULL, "Z", 0x1, NULL },
    { "setExactPacketLengthWithBoolean:", "setExactPacketLength", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getSort", NULL, "Z", 0x1, NULL },
    { "setSortWithBoolean:", "setSort", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getEncodeUTF16BE", NULL, "Z", 0x1, NULL },
    { "setEncodeUTF16BEWithBoolean:", "setEncodeUTF16BE", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getEncodeUTF16LE", NULL, "Z", 0x1, NULL },
    { "setEncodeUTF16LEWithBoolean:", "setEncodeUTF16LE", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getBaseIndent", NULL, "I", 0x1, NULL },
    { "setBaseIndentWithInt:", "setBaseIndent", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getIndent", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setIndentWithNSString:", "setIndent", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getNewline", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setNewlineWithNSString:", "setNewline", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getPadding", NULL, "I", 0x1, NULL },
    { "setPaddingWithInt:", "setPadding", "Lcom.itextpdf.xmp.options.SerializeOptions;", 0x1, NULL },
    { "getOmitVersionAttribute", NULL, "Z", 0x1, NULL },
    { "getEncoding", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, "Ljava.lang.CloneNotSupportedException;" },
    { "defineOptionNameWithInt:", "defineOptionName", "Ljava.lang.String;", 0x4, NULL },
    { "getValidOptions", NULL, "I", 0x4, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "OMIT_PACKET_WRAPPER_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_OMIT_PACKET_WRAPPER },
    { "READONLY_PACKET_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_READONLY_PACKET },
    { "USE_COMPACT_FORMAT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_USE_COMPACT_FORMAT },
    { "USE_CANONICAL_FORMAT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_USE_CANONICAL_FORMAT },
    { "INCLUDE_THUMBNAIL_PAD_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_INCLUDE_THUMBNAIL_PAD },
    { "EXACT_PACKET_LENGTH_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_EXACT_PACKET_LENGTH },
    { "OMIT_XMPMETA_ELEMENT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_OMIT_XMPMETA_ELEMENT },
    { "SORT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_SORT },
    { "LITTLEENDIAN_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_LITTLEENDIAN_BIT },
    { "UTF16_BIT_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_UTF16_BIT },
    { "ENCODE_UTF8_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_ENCODE_UTF8 },
    { "ENCODE_UTF16BE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_ENCODE_UTF16BE },
    { "ENCODE_UTF16LE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_ENCODE_UTF16LE },
    { "ENCODING_MASK_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsSerializeOptions_ENCODING_MASK },
    { "padding_", NULL, 0x2, "I", NULL,  },
    { "newline_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "indent_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
    { "baseIndent_", NULL, 0x2, "I", NULL,  },
    { "omitVersionAttribute_", NULL, 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpOptionsSerializeOptions = { "SerializeOptions", "com.itextpdf.xmp.options", NULL, 0x11, 35, methods, 19, fields, 0, NULL};
  return &_ComItextpdfXmpOptionsSerializeOptions;
}

@end
