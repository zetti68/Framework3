//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/options/PropertyOptions.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/options/PropertyOptions.java"

#include "IOSClass.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/options/Options.h"
#include "com/itextpdf/xmp/options/PropertyOptions.h"


#line 43
@implementation ComItextpdfXmpOptionsPropertyOptions


#line 79
- (instancetype)init {
  return [super init];
}


#line 91
- (instancetype)initWithInt:(jint)options {
  return
#line 93
  [super initWithInt:options];
}


#line 101
- (jboolean)isURI {
  
#line 103
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_URI];
}


#line 111
- (ComItextpdfXmpOptionsPropertyOptions *)setURIWithBoolean:(jboolean)value {
  
#line 113
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_URI withBoolean:value];
  return self;
}


#line 123
- (jboolean)getHasQualifiers {
  
#line 125
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_HAS_QUALIFIERS];
}


#line 133
- (ComItextpdfXmpOptionsPropertyOptions *)setHasQualifiersWithBoolean:(jboolean)value {
  
#line 135
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_HAS_QUALIFIERS withBoolean:value];
  return self;
}


#line 146
- (jboolean)isQualifier {
  
#line 148
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_QUALIFIER];
}


#line 156
- (ComItextpdfXmpOptionsPropertyOptions *)setQualifierWithBoolean:(jboolean)value {
  
#line 158
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_QUALIFIER withBoolean:value];
  return self;
}


#line 164
- (jboolean)getHasLanguage {
  
#line 166
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_HAS_LANGUAGE];
}


#line 174
- (ComItextpdfXmpOptionsPropertyOptions *)setHasLanguageWithBoolean:(jboolean)value {
  
#line 176
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_HAS_LANGUAGE withBoolean:value];
  return self;
}


#line 182
- (jboolean)getHasType {
  
#line 184
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_HAS_TYPE];
}


#line 192
- (ComItextpdfXmpOptionsPropertyOptions *)setHasTypeWithBoolean:(jboolean)value {
  
#line 194
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_HAS_TYPE withBoolean:value];
  return self;
}


#line 200
- (jboolean)isStruct {
  
#line 202
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_STRUCT];
}


#line 210
- (ComItextpdfXmpOptionsPropertyOptions *)setStructWithBoolean:(jboolean)value {
  
#line 212
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_STRUCT withBoolean:value];
  return self;
}


#line 221
- (jboolean)isArray {
  
#line 223
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_ARRAY];
}


#line 231
- (ComItextpdfXmpOptionsPropertyOptions *)setArrayWithBoolean:(jboolean)value {
  
#line 233
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_ARRAY withBoolean:value];
  return self;
}


#line 242
- (jboolean)isArrayOrdered {
  
#line 244
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_ARRAY_ORDERED];
}


#line 252
- (ComItextpdfXmpOptionsPropertyOptions *)setArrayOrderedWithBoolean:(jboolean)value {
  
#line 254
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_ARRAY_ORDERED withBoolean:value];
  return self;
}


#line 263
- (jboolean)isArrayAlternate {
  
#line 265
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALTERNATE];
}


#line 273
- (ComItextpdfXmpOptionsPropertyOptions *)setArrayAlternateWithBoolean:(jboolean)value {
  
#line 275
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALTERNATE withBoolean:value];
  return self;
}


#line 285
- (jboolean)isArrayAltText {
  
#line 287
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALT_TEXT];
}


#line 295
- (ComItextpdfXmpOptionsPropertyOptions *)setArrayAltTextWithBoolean:(jboolean)value {
  
#line 297
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALT_TEXT withBoolean:value];
  return self;
}


#line 311
- (jboolean)isSchemaNode {
  
#line 313
  return [self getOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_SCHEMA_NODE];
}


#line 321
- (ComItextpdfXmpOptionsPropertyOptions *)setSchemaNodeWithBoolean:(jboolean)value {
  
#line 323
  [self setOptionWithInt:ComItextpdfXmpOptionsPropertyOptions_SCHEMA_NODE withBoolean:value];
  return self;
}


#line 333
- (jboolean)isCompositeProperty {
  
#line 335
  return ([self getOptions] & (ComItextpdfXmpOptionsPropertyOptions_ARRAY | ComItextpdfXmpOptionsPropertyOptions_STRUCT)) > 0;
}


#line 342
- (jboolean)isSimple {
  
#line 344
  return ([self getOptions] & (ComItextpdfXmpOptionsPropertyOptions_ARRAY | ComItextpdfXmpOptionsPropertyOptions_STRUCT)) == 0;
}


#line 354
- (jboolean)equalArrayTypesWithComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 356
  return
#line 357
  [self isArray] == [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk(options)) isArray] &&
#line 358
  [self isArrayOrdered] == [options isArrayOrdered] &&
#line 359
  [self isArrayAlternate] == [options isArrayAlternate] &&
#line 360
  [self isArrayAltText] == [options isArrayAltText];
}


#line 371
- (void)mergeWithWithComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 373
  if (options != nil) {
    
#line 375
    [self setOptionsWithInt:[self getOptions] | [options getOptions]];
  }
}


#line 383
- (jboolean)isOnlyArrayOptions {
  
#line 385
  return ([self getOptions] &
#line 386
  ~(ComItextpdfXmpOptionsPropertyOptions_ARRAY | ComItextpdfXmpOptionsPropertyOptions_ARRAY_ORDERED | ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALTERNATE | ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALT_TEXT)) == 0;
}


#line 393
- (jint)getValidOptions {
  
#line 395
  return
#line 396
  ComItextpdfXmpOptionsPropertyOptions_URI |
#line 397
  ComItextpdfXmpOptionsPropertyOptions_HAS_QUALIFIERS |
#line 398
  ComItextpdfXmpOptionsPropertyOptions_QUALIFIER |
#line 399
  ComItextpdfXmpOptionsPropertyOptions_HAS_LANGUAGE |
#line 400
  ComItextpdfXmpOptionsPropertyOptions_HAS_TYPE |
#line 401
  ComItextpdfXmpOptionsPropertyOptions_STRUCT |
#line 402
  ComItextpdfXmpOptionsPropertyOptions_ARRAY |
#line 403
  ComItextpdfXmpOptionsPropertyOptions_ARRAY_ORDERED |
#line 404
  ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALTERNATE |
#line 405
  ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALT_TEXT |
#line 406
  ComItextpdfXmpOptionsPropertyOptions_SCHEMA_NODE |
#line 407
  ComItextpdfXmpOptionsPropertyOptions_SEPARATE_NODE;
}


#line 414
- (NSString *)defineOptionNameWithInt:(jint)option {
  
#line 416
  switch (option) {
    
#line 418
    case ComItextpdfXmpOptionsPropertyOptions_URI:
    
#line 418
    return @"URI";
    case ComItextpdfXmpOptionsPropertyOptions_HAS_QUALIFIERS:
    
#line 419
    return @"HAS_QUALIFIER";
    case ComItextpdfXmpOptionsPropertyOptions_QUALIFIER:
    
#line 420
    return @"QUALIFIER";
    case ComItextpdfXmpOptionsPropertyOptions_HAS_LANGUAGE:
    
#line 421
    return @"HAS_LANGUAGE";
    case ComItextpdfXmpOptionsPropertyOptions_HAS_TYPE:
    
#line 422
    return @"HAS_TYPE";
    case ComItextpdfXmpOptionsPropertyOptions_STRUCT:
    
#line 423
    return @"STRUCT";
    case ComItextpdfXmpOptionsPropertyOptions_ARRAY:
    
#line 424
    return @"ARRAY";
    case ComItextpdfXmpOptionsPropertyOptions_ARRAY_ORDERED:
    
#line 425
    return @"ARRAY_ORDERED";
    case ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALTERNATE:
    
#line 426
    return @"ARRAY_ALTERNATE";
    case ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALT_TEXT:
    
#line 427
    return @"ARRAY_ALT_TEXT";
    case ComItextpdfXmpOptionsPropertyOptions_SCHEMA_NODE:
    
#line 428
    return @"SCHEMA_NODE";
    default:
    
#line 429
    return nil;
  }
}


#line 441
- (void)assertConsistencyWithInt:(jint)options {
  
#line 443
  if ((options & ComItextpdfXmpOptionsPropertyOptions_STRUCT) > 0 && (options & ComItextpdfXmpOptionsPropertyOptions_ARRAY) > 0) {
    
#line 445
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"IsStruct and IsArray options are mutually exclusive" withInt:
#line 446
    ComItextpdfXmpXMPError_BADOPTIONS];
  }
  else if ((options & ComItextpdfXmpOptionsPropertyOptions_URI) > 0 && (options & (ComItextpdfXmpOptionsPropertyOptions_ARRAY | ComItextpdfXmpOptionsPropertyOptions_STRUCT)) > 0) {
    
#line 450
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Structs and arrays can't have \"value\" options" withInt:
#line 451
    ComItextpdfXmpXMPError_BADOPTIONS];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PropertyOptions", NULL, 0x1, NULL },
    { "initWithInt:", "PropertyOptions", NULL, 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "isURI", NULL, "Z", 0x1, NULL },
    { "setURIWithBoolean:", "setURI", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "getHasQualifiers", NULL, "Z", 0x1, NULL },
    { "setHasQualifiersWithBoolean:", "setHasQualifiers", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "isQualifier", NULL, "Z", 0x1, NULL },
    { "setQualifierWithBoolean:", "setQualifier", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "getHasLanguage", NULL, "Z", 0x1, NULL },
    { "setHasLanguageWithBoolean:", "setHasLanguage", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "getHasType", NULL, "Z", 0x1, NULL },
    { "setHasTypeWithBoolean:", "setHasType", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "isStruct", NULL, "Z", 0x1, NULL },
    { "setStructWithBoolean:", "setStruct", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "isArray", NULL, "Z", 0x1, NULL },
    { "setArrayWithBoolean:", "setArray", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "isArrayOrdered", NULL, "Z", 0x1, NULL },
    { "setArrayOrderedWithBoolean:", "setArrayOrdered", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "isArrayAlternate", NULL, "Z", 0x1, NULL },
    { "setArrayAlternateWithBoolean:", "setArrayAlternate", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "isArrayAltText", NULL, "Z", 0x1, NULL },
    { "setArrayAltTextWithBoolean:", "setArrayAltText", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "isSchemaNode", NULL, "Z", 0x1, NULL },
    { "setSchemaNodeWithBoolean:", "setSchemaNode", "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "isCompositeProperty", NULL, "Z", 0x1, NULL },
    { "isSimple", NULL, "Z", 0x1, NULL },
    { "equalArrayTypesWithComItextpdfXmpOptionsPropertyOptions:", "equalArrayTypes", "Z", 0x1, NULL },
    { "mergeWithWithComItextpdfXmpOptionsPropertyOptions:", "mergeWith", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "isOnlyArrayOptions", NULL, "Z", 0x1, NULL },
    { "getValidOptions", NULL, "I", 0x4, NULL },
    { "defineOptionNameWithInt:", "defineOptionName", "Ljava.lang.String;", 0x4, NULL },
    { "assertConsistencyWithInt:", "assertConsistency", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NO_OPTIONS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_NO_OPTIONS },
    { "URI_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_URI },
    { "HAS_QUALIFIERS_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_HAS_QUALIFIERS },
    { "QUALIFIER_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_QUALIFIER },
    { "HAS_LANGUAGE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_HAS_LANGUAGE },
    { "HAS_TYPE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_HAS_TYPE },
    { "STRUCT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_STRUCT },
    { "ARRAY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_ARRAY },
    { "ARRAY_ORDERED_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_ARRAY_ORDERED },
    { "ARRAY_ALTERNATE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALTERNATE },
    { "ARRAY_ALT_TEXT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALT_TEXT },
    { "SCHEMA_NODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_SCHEMA_NODE },
    { "DELETE_EXISTING_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_DELETE_EXISTING },
    { "SEPARATE_NODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpOptionsPropertyOptions_SEPARATE_NODE },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpOptionsPropertyOptions = { "PropertyOptions", "com.itextpdf.xmp.options", NULL, 0x11, 32, methods, 14, fields, 0, NULL};
  return &_ComItextpdfXmpOptionsPropertyOptions;
}

@end
