//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/options/Options.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/options/Options.java"

#include "IOSClass.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/options/Options.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"


#line 45
@implementation ComItextpdfXmpOptionsOptions


#line 56
- (instancetype)init {
  if (self = [super init]) {
    options_ =
#line 48
    0;
    optionNames_ =
#line 50
    nil;
  }
  return self;
}

- (instancetype)initWithInt:(jint)options {
  if (self = [super init]) {
    options_ =
#line 48
    0;
    optionNames_ =
#line 50
    nil;
    
#line 70
    [self assertOptionsValidWithInt:options];
    
#line 71
    [self setOptionsWithInt:options];
  }
  return self;
}


#line 78
- (void)clear {
  
#line 80
  options_ = 0;
}


#line 88
- (jboolean)isExactlyWithInt:(jint)optionBits {
  
#line 90
  return [self getOptions] == optionBits;
}


#line 98
- (jboolean)containsAllOptionsWithInt:(jint)optionBits {
  
#line 100
  return ([self getOptions] & optionBits) == optionBits;
}


#line 108
- (jboolean)containsOneOfWithInt:(jint)optionBits {
  
#line 110
  return (([self getOptions]) & optionBits) != 0;
}


#line 118
- (jboolean)getOptionWithInt:(jint)optionBit {
  
#line 120
  return (options_ & optionBit) != 0;
}


#line 128
- (void)setOptionWithInt:(jint)optionBits
             withBoolean:(jboolean)value {
  
#line 130
  options_ = value ? options_ | optionBits : options_ & ~optionBits;
}


#line 138
- (jint)getOptions {
  
#line 140
  return options_;
}


#line 148
- (void)setOptionsWithInt:(jint)options {
  
#line 150
  [self assertOptionsValidWithInt:options];
  self->options_ = options;
}

- (jboolean)isEqual:(id)obj {
  
#line 160
  return [self getOptions] == [((ComItextpdfXmpOptionsOptions *) nil_chk(((ComItextpdfXmpOptionsOptions *) check_class_cast(obj, [ComItextpdfXmpOptionsOptions class])))) getOptions];
}

- (NSUInteger)hash {
  
#line 169
  return [self getOptions];
}


#line 179
- (NSString *)getOptionsString {
  
#line 181
  if (options_ != 0) {
    
#line 183
    JavaLangStringBuffer *sb = [[JavaLangStringBuffer alloc] init];
    jint theBits = options_;
    while (theBits != 0) {
      
#line 187
      jint oneLessBit = theBits & (theBits - 1);
      jint singleBit = theBits ^ oneLessBit;
      NSString *bitName = [self getOptionNameWithInt:singleBit];
      (void) [sb appendWithNSString:bitName];
      if (oneLessBit != 0) {
        
#line 193
        (void) [sb appendWithNSString:@" | "];
      }
      theBits = oneLessBit;
    }
    return [sb description];
  }
  else {
    
#line 201
    return @"<none>";
  }
}

- (NSString *)description {
  
#line 211
  return JreStrcat("$$", @"0x", [JavaLangInteger toHexStringWithInt:options_]);
}


#line 219
- (jint)getValidOptions {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 227
- (NSString *)defineOptionNameWithInt:(jint)option {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 241
- (void)assertConsistencyWithInt:(jint)options {
}


#line 255
- (void)assertOptionsValidWithInt:(jint)options {
  
#line 257
  jint invalidOptions = options & ~[self getValidOptions];
  if (invalidOptions == 0) {
    
#line 260
    [self assertConsistencyWithInt:options];
  }
  else {
    
#line 264
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:JreStrcat("$$$", @"The option bit(s) 0x", [JavaLangInteger toHexStringWithInt:invalidOptions], @" are invalid!") withInt:
#line 265
    ComItextpdfXmpXMPError_BADOPTIONS];
  }
}


#line 277
- (NSString *)getOptionNameWithInt:(jint)option {
  
#line 279
  id<JavaUtilMap> optionsNames = [self procureOptionNames];
  
#line 281
  JavaLangInteger *key = [[JavaLangInteger alloc] initWithInt:option];
  NSString *result = (NSString *) check_class_cast([((id<JavaUtilMap>) nil_chk(optionsNames)) getWithId:key], [NSString class]);
  if (result == nil) {
    
#line 285
    result = [self defineOptionNameWithInt:option];
    if (result != nil) {
      
#line 288
      (void) [optionsNames putWithId:key withId:result];
    }
    else {
      
#line 292
      result = @"<option name not defined>";
    }
  }
  
#line 296
  return result;
}


#line 303
- (id<JavaUtilMap>)procureOptionNames {
  if (optionNames_ == nil) {
    
#line 307
    optionNames_ = [[JavaUtilHashMap alloc] init];
  }
  return optionNames_;
}

- (void)copyAllFieldsTo:(ComItextpdfXmpOptionsOptions *)other {
  [super copyAllFieldsTo:other];
  other->optionNames_ = optionNames_;
  other->options_ = options_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Options", NULL, 0x1, NULL },
    { "initWithInt:", "Options", NULL, 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "clear", NULL, "V", 0x1, NULL },
    { "isExactlyWithInt:", "isExactly", "Z", 0x1, NULL },
    { "containsAllOptionsWithInt:", "containsAllOptions", "Z", 0x1, NULL },
    { "containsOneOfWithInt:", "containsOneOf", "Z", 0x1, NULL },
    { "getOptionWithInt:", "getOption", "Z", 0x4, NULL },
    { "setOptionWithInt:withBoolean:", "setOption", "V", 0x1, NULL },
    { "getOptions", NULL, "I", 0x1, NULL },
    { "setOptionsWithInt:", "setOptions", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "getOptionsString", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "getValidOptions", NULL, "I", 0x404, NULL },
    { "defineOptionNameWithInt:", "defineOptionName", "Ljava.lang.String;", 0x404, NULL },
    { "assertConsistencyWithInt:", "assertConsistency", "V", 0x4, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertOptionsValidWithInt:", "assertOptionsValid", "V", 0x2, "Lcom.itextpdf.xmp.XMPException;" },
    { "getOptionNameWithInt:", "getOptionName", "Ljava.lang.String;", 0x2, NULL },
    { "procureOptionNames", NULL, "Ljava.util.Map;", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "options_", NULL, 0x2, "I", NULL,  },
    { "optionNames_", NULL, 0x2, "Ljava.util.Map;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpOptionsOptions = { "Options", "com.itextpdf.xmp.options", NULL, 0x401, 20, methods, 2, fields, 0, NULL};
  return &_ComItextpdfXmpOptionsOptions;
}

@end
