//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/XMPUtils.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/XMPUtils.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/XMPDateTime.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPMeta.h"
#include "com/itextpdf/xmp/XMPUtils.h"
#include "com/itextpdf/xmp/impl/Base64.h"
#include "com/itextpdf/xmp/impl/ISO8601Converter.h"
#include "com/itextpdf/xmp/impl/XMPUtilsImpl.h"
#include "com/itextpdf/xmp/options/PropertyOptions.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Throwable.h"


#line 24
@implementation ComItextpdfXmpXMPUtils


#line 27
- (instancetype)init {
  return [super init];
}


#line 57
+ (NSString *)catenateArrayItemsWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)xmp
                                             withNSString:(NSString *)schemaNS
                                             withNSString:(NSString *)arrayName
                                             withNSString:(NSString *)separator
                                             withNSString:(NSString *)quotes
                                              withBoolean:(jboolean)allowCommas {
  
#line 60
  return [ComItextpdfXmpImplXMPUtilsImpl catenateArrayItemsWithComItextpdfXmpXMPMeta:
#line 61
  xmp withNSString:schemaNS withNSString:arrayName withNSString:separator withNSString:quotes withBoolean:allowCommas];
}


#line 83
+ (void)separateArrayItemsWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)xmp
                                       withNSString:(NSString *)schemaNS
                                       withNSString:(NSString *)arrayName
                                       withNSString:(NSString *)catedStr
           withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)arrayOptions
                                        withBoolean:(jboolean)preserveCommas {
  
#line 87
  [ComItextpdfXmpImplXMPUtilsImpl separateArrayItemsWithComItextpdfXmpXMPMeta:xmp withNSString:schemaNS withNSString:arrayName withNSString:catedStr withComItextpdfXmpOptionsPropertyOptions:arrayOptions withBoolean:
#line 88
  preserveCommas];
}


#line 138
+ (void)removePropertiesWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)xmp
                                     withNSString:(NSString *)schemaNS
                                     withNSString:(NSString *)propName
                                      withBoolean:(jboolean)doAllProperties
                                      withBoolean:(jboolean)includeAliases {
  
#line 141
  [ComItextpdfXmpImplXMPUtilsImpl removePropertiesWithComItextpdfXmpXMPMeta:xmp withNSString:schemaNS withNSString:propName withBoolean:doAllProperties withBoolean:includeAliases];
}


#line 154
+ (void)appendPropertiesWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)source
                        withComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)dest
                                      withBoolean:(jboolean)doAllProperties
                                      withBoolean:(jboolean)replaceOldValues {
  
#line 157
  [ComItextpdfXmpXMPUtils appendPropertiesWithComItextpdfXmpXMPMeta:source withComItextpdfXmpXMPMeta:dest withBoolean:doAllProperties withBoolean:replaceOldValues withBoolean:NO];
}


#line 238
+ (void)appendPropertiesWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)source
                        withComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)dest
                                      withBoolean:(jboolean)doAllProperties
                                      withBoolean:(jboolean)replaceOldValues
                                      withBoolean:(jboolean)deleteEmptyValues {
  
#line 241
  [ComItextpdfXmpImplXMPUtilsImpl appendPropertiesWithComItextpdfXmpXMPMeta:source withComItextpdfXmpXMPMeta:dest withBoolean:doAllProperties withBoolean:replaceOldValues withBoolean:
#line 242
  deleteEmptyValues];
}


#line 262
+ (jboolean)convertToBooleanWithNSString:(NSString *)value {
  
#line 264
  if (value == nil || ((jint) [value length]) == 0) {
    
#line 266
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty convert-string" withInt:ComItextpdfXmpXMPError_BADVALUE];
  }
  value = [((NSString *) nil_chk(value)) lowercaseString];
  
#line 270
  @try {
    
#line 273
    return [JavaLangInteger parseIntWithNSString:value] != 0;
  }
  @catch (JavaLangNumberFormatException *e) {
    
#line 277
    return
#line 278
    [@"true" isEqual:value] ||
#line 279
    [@"t" isEqual:value] ||
#line 280
    [@"on" isEqual:value] ||
#line 281
    [@"yes" isEqual:value];
  }
}


#line 295
+ (NSString *)convertFromBooleanWithBoolean:(jboolean)value {
  
#line 297
  return value ? ComItextpdfXmpXMPConst_get_TRUESTR_() : ComItextpdfXmpXMPConst_get_FALSESTR_();
}


#line 311
+ (jint)convertToIntegerWithNSString:(NSString *)rawValue {
  
#line 313
  @try {
    
#line 315
    if (rawValue == nil || ((jint) [rawValue length]) == 0) {
      
#line 317
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty convert-string" withInt:ComItextpdfXmpXMPError_BADVALUE];
    }
    if ([((NSString *) nil_chk(rawValue)) hasPrefix:@"0x"]) {
      
#line 321
      return [JavaLangInteger parseIntWithNSString:[rawValue substring:2] withInt:16];
    }
    else {
      
#line 325
      return [JavaLangInteger parseIntWithNSString:rawValue];
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    
#line 330
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid integer string" withInt:ComItextpdfXmpXMPError_BADVALUE];
  }
}


#line 342
+ (NSString *)convertFromIntegerWithInt:(jint)value {
  
#line 344
  return [NSString valueOfInt:value];
}


#line 358
+ (jlong)convertToLongWithNSString:(NSString *)rawValue {
  
#line 360
  @try {
    
#line 362
    if (rawValue == nil || ((jint) [rawValue length]) == 0) {
      
#line 364
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty convert-string" withInt:ComItextpdfXmpXMPError_BADVALUE];
    }
    if ([((NSString *) nil_chk(rawValue)) hasPrefix:@"0x"]) {
      
#line 368
      return [JavaLangLong parseLongWithNSString:[rawValue substring:2] withInt:16];
    }
    else {
      
#line 372
      return [JavaLangLong parseLongWithNSString:rawValue];
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    
#line 377
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid long string" withInt:ComItextpdfXmpXMPError_BADVALUE];
  }
}


#line 389
+ (NSString *)convertFromLongWithLong:(jlong)value {
  
#line 391
  return [NSString valueOfLong:value];
}


#line 405
+ (jdouble)convertToDoubleWithNSString:(NSString *)rawValue {
  
#line 407
  @try {
    
#line 409
    if (rawValue == nil || ((jint) [rawValue length]) == 0) {
      
#line 411
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty convert-string" withInt:ComItextpdfXmpXMPError_BADVALUE];
    }
    else {
      
#line 415
      return [JavaLangDouble parseDoubleWithNSString:rawValue];
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    
#line 420
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid double string" withInt:ComItextpdfXmpXMPError_BADVALUE];
  }
}


#line 432
+ (NSString *)convertFromDoubleWithDouble:(jdouble)value {
  
#line 434
  return [NSString valueOfDouble:value];
}


#line 448
+ (id<ComItextpdfXmpXMPDateTime>)convertToDateWithNSString:(NSString *)rawValue {
  
#line 450
  if (rawValue == nil || ((jint) [rawValue length]) == 0) {
    
#line 452
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty convert-string" withInt:ComItextpdfXmpXMPError_BADVALUE];
  }
  else {
    
#line 456
    return [ComItextpdfXmpImplISO8601Converter parseWithNSString:rawValue];
  }
}


#line 468
+ (NSString *)convertFromDateWithComItextpdfXmpXMPDateTime:(id<ComItextpdfXmpXMPDateTime>)value {
  
#line 470
  return [ComItextpdfXmpImplISO8601Converter renderWithComItextpdfXmpXMPDateTime:value];
}


#line 481
+ (NSString *)encodeBase64WithByteArray:(IOSByteArray *)buffer {
  
#line 483
  return [NSString stringWithBytes:[ComItextpdfXmpImplBase64 encodeWithByteArray:buffer]];
}


#line 495
+ (IOSByteArray *)decodeBase64WithNSString:(NSString *)base64String {
  
#line 497
  @try {
    
#line 499
    return [ComItextpdfXmpImplBase64 decodeWithByteArray:[((NSString *) nil_chk(base64String)) getBytes]];
  }
  @catch (JavaLangThrowable *e) {
    
#line 503
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid base64 string" withInt:ComItextpdfXmpXMPError_BADVALUE withJavaLangThrowable:e];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XMPUtils", NULL, 0x2, NULL },
    { "catenateArrayItemsWithComItextpdfXmpXMPMeta:withNSString:withNSString:withNSString:withNSString:withBoolean:", "catenateArrayItems", "Ljava.lang.String;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "separateArrayItemsWithComItextpdfXmpXMPMeta:withNSString:withNSString:withNSString:withComItextpdfXmpOptionsPropertyOptions:withBoolean:", "separateArrayItems", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "removePropertiesWithComItextpdfXmpXMPMeta:withNSString:withNSString:withBoolean:withBoolean:", "removeProperties", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "appendPropertiesWithComItextpdfXmpXMPMeta:withComItextpdfXmpXMPMeta:withBoolean:withBoolean:", "appendProperties", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "appendPropertiesWithComItextpdfXmpXMPMeta:withComItextpdfXmpXMPMeta:withBoolean:withBoolean:withBoolean:", "appendProperties", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "convertToBooleanWithNSString:", "convertToBoolean", "Z", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "convertFromBooleanWithBoolean:", "convertFromBoolean", "Ljava.lang.String;", 0x9, NULL },
    { "convertToIntegerWithNSString:", "convertToInteger", "I", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "convertFromIntegerWithInt:", "convertFromInteger", "Ljava.lang.String;", 0x9, NULL },
    { "convertToLongWithNSString:", "convertToLong", "J", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "convertFromLongWithLong:", "convertFromLong", "Ljava.lang.String;", 0x9, NULL },
    { "convertToDoubleWithNSString:", "convertToDouble", "D", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "convertFromDoubleWithDouble:", "convertFromDouble", "Ljava.lang.String;", 0x9, NULL },
    { "convertToDateWithNSString:", "convertToDate", "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "convertFromDateWithComItextpdfXmpXMPDateTime:", "convertFromDate", "Ljava.lang.String;", 0x9, NULL },
    { "encodeBase64WithByteArray:", "encodeBase64", "Ljava.lang.String;", 0x9, NULL },
    { "decodeBase64WithNSString:", "decodeBase64", "[B", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpXMPUtils = { "XMPUtils", "com.itextpdf.xmp", NULL, 0x1, 18, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfXmpXMPUtils;
}

@end
