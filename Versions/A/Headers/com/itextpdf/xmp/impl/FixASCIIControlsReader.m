//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/FixASCIIControlsReader.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/FixASCIIControlsReader.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/xmp/impl/FixASCIIControlsReader.h"
#include "com/itextpdf/xmp/impl/Utils.h"
#include "java/io/IOException.h"
#include "java/io/PushbackReader.h"
#include "java/io/Reader.h"
#include "java/lang/Character.h"


#line 41
@implementation ComItextpdfXmpImplFixASCIIControlsReader


#line 69
- (instancetype)initWithJavaIoReader:(JavaIoReader *)inArg {
  if (self =
#line 71
  [super initWithJavaIoReader:inArg withInt:ComItextpdfXmpImplFixASCIIControlsReader_BUFFER_SIZE]) {
    state_ =
#line 58
    ComItextpdfXmpImplFixASCIIControlsReader_STATE_START;
    control_ =
#line 60
    0;
    digits_ =
#line 62
    0;
  }
  return self;
}


#line 78
- (jint)readWithCharArray:(IOSCharArray *)cbuf
                  withInt:(jint)off
                  withInt:(jint)len {
  
#line 80
  jint readAhead = 0;
  jint read = 0;
  jint pos = off;
  IOSCharArray *readAheadBuffer = [IOSCharArray arrayWithLength:ComItextpdfXmpImplFixASCIIControlsReader_BUFFER_SIZE];
  
#line 85
  jboolean available = YES;
  while (available && read < len) {
    
#line 88
    available = ([super readWithCharArray:readAheadBuffer withInt:readAhead withInt:1] == 1);
    if (available) {
      
#line 91
      jchar c = [self processCharWithChar:IOSCharArray_Get(readAheadBuffer, readAhead)];
      if (state_ == ComItextpdfXmpImplFixASCIIControlsReader_STATE_START) {
        
#line 95
        if ([ComItextpdfXmpImplUtils isControlCharWithChar:c]) {
          
#line 97
          c = ' ';
        }
        *IOSCharArray_GetRef(nil_chk(cbuf), pos++) = c;
        readAhead = 0;
        read++;
      }
      else if (state_ == ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR) {
        
#line 105
        [self unreadWithCharArray:readAheadBuffer withInt:0 withInt:readAhead + 1];
        readAhead = 0;
      }
      else {
        
#line 110
        readAhead++;
      }
    }
    else if (readAhead > 0) {
      
#line 116
      [self unreadWithCharArray:readAheadBuffer withInt:0 withInt:readAhead];
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR;
      readAhead = 0;
      available = YES;
    }
  }
  
#line 124
  return read > 0 || available ? read : -1;
}


#line 133
- (jchar)processCharWithChar:(jchar)ch {
  
#line 135
  switch (state_) {
    
#line 137
    case ComItextpdfXmpImplFixASCIIControlsReader_STATE_START:
    if (ch == '&') {
      
#line 140
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_AMP;
    }
    return ch;
    
#line 144
    case ComItextpdfXmpImplFixASCIIControlsReader_STATE_AMP:
    if (ch == '#') {
      
#line 147
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_HASH;
    }
    else {
      
#line 151
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR;
    }
    return ch;
    
#line 155
    case ComItextpdfXmpImplFixASCIIControlsReader_STATE_HASH:
    if (ch == 'x') {
      
#line 158
      control_ = 0;
      digits_ = 0;
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_HEX;
    }
    else if ('0' <= ch && ch <= '9') {
      
#line 164
      control_ = [JavaLangCharacter digitWithChar:ch withInt:10];
      digits_ = 1;
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_DIG1;
    }
    else {
      
#line 170
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR;
    }
    return ch;
    
#line 174
    case ComItextpdfXmpImplFixASCIIControlsReader_STATE_DIG1:
    if ('0' <= ch && ch <= '9') {
      
#line 177
      control_ = control_ * 10 + [JavaLangCharacter digitWithChar:ch withInt:10];
      digits_++;
      if (digits_ <= 5) {
        
#line 181
        state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_DIG1;
      }
      else {
        
#line 185
        state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR;
      }
    }
    else if (ch == ';' && [ComItextpdfXmpImplUtils isControlCharWithChar:(jchar) control_]) {
      
#line 190
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_START;
      return (jchar) control_;
    }
    else {
      
#line 195
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR;
    }
    return ch;
    
#line 199
    case ComItextpdfXmpImplFixASCIIControlsReader_STATE_HEX:
    if (('0' <= ch && ch <= '9') ||
#line 201
    ('a' <= ch && ch <= 'f') ||
#line 202
    ('A' <= ch && ch <= 'F')) {
      
#line 204
      control_ = control_ * 16 + [JavaLangCharacter digitWithChar:ch withInt:16];
      digits_++;
      if (digits_ <= 4) {
        
#line 208
        state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_HEX;
      }
      else {
        
#line 212
        state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR;
      }
    }
    else if (ch == ';' && [ComItextpdfXmpImplUtils isControlCharWithChar:(jchar) control_]) {
      
#line 217
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_START;
      return (jchar) control_;
    }
    else {
      
#line 222
      state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR;
    }
    return ch;
    
#line 226
    case ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR:
    state_ = ComItextpdfXmpImplFixASCIIControlsReader_STATE_START;
    return ch;
    
#line 230
    default:
    
#line 232
    return ch;
  }
}

- (void)copyAllFieldsTo:(ComItextpdfXmpImplFixASCIIControlsReader *)other {
  [super copyAllFieldsTo:other];
  other->control_ = control_;
  other->digits_ = digits_;
  other->state_ = state_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaIoReader:", "FixASCIIControlsReader", NULL, 0x1, NULL },
    { "readWithCharArray:withInt:withInt:", "read", "I", 0x1, "Ljava.io.IOException;" },
    { "processCharWithChar:", "processChar", "C", 0x2, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STATE_START_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplFixASCIIControlsReader_STATE_START },
    { "STATE_AMP_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplFixASCIIControlsReader_STATE_AMP },
    { "STATE_HASH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplFixASCIIControlsReader_STATE_HASH },
    { "STATE_HEX_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplFixASCIIControlsReader_STATE_HEX },
    { "STATE_DIG1_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplFixASCIIControlsReader_STATE_DIG1 },
    { "STATE_ERROR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplFixASCIIControlsReader_STATE_ERROR },
    { "BUFFER_SIZE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplFixASCIIControlsReader_BUFFER_SIZE },
    { "state_", NULL, 0x2, "I", NULL,  },
    { "control_", NULL, 0x2, "I", NULL,  },
    { "digits_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplFixASCIIControlsReader = { "FixASCIIControlsReader", "com.itextpdf.xmp.impl", NULL, 0x1, 3, methods, 10, fields, 0, NULL};
  return &_ComItextpdfXmpImplFixASCIIControlsReader;
}

@end
