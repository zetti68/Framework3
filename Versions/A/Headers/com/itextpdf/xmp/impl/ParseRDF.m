//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/ParseRDF.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/ParseRDF.java"

#include "IOSClass.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPMetaFactory.h"
#include "com/itextpdf/xmp/XMPSchemaRegistry.h"
#include "com/itextpdf/xmp/impl/ParseRDF.h"
#include "com/itextpdf/xmp/impl/Utils.h"
#include "com/itextpdf/xmp/impl/XMPMetaImpl.h"
#include "com/itextpdf/xmp/impl/XMPNode.h"
#include "com/itextpdf/xmp/impl/XMPNodeUtils.h"
#include "com/itextpdf/xmp/options/PropertyOptions.h"
#include "com/itextpdf/xmp/properties/XMPAliasInfo.h"
#include "java/lang/Character.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/w3c/dom/Attr.h"
#include "org/w3c/dom/Element.h"
#include "org/w3c/dom/NamedNodeMap.h"
#include "org/w3c/dom/Node.h"
#include "org/w3c/dom/NodeList.h"


#line 54
@implementation ComItextpdfXmpImplParseRDF

NSString * ComItextpdfXmpImplParseRDF_DEFAULT_PREFIX_ = 
#line 96
@"_dflt";


#line 108
+ (ComItextpdfXmpImplXMPMetaImpl *)parseWithOrgW3cDomNode:(id<OrgW3cDomNode>)xmlRoot {
  
#line 110
  ComItextpdfXmpImplXMPMetaImpl *xmp = [[ComItextpdfXmpImplXMPMetaImpl alloc] init];
  [ComItextpdfXmpImplParseRDF rdf_RDFWithComItextpdfXmpImplXMPMetaImpl:xmp withOrgW3cDomNode:xmlRoot];
  return xmp;
}


#line 125
+ (void)rdf_RDFWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                               withOrgW3cDomNode:(id<OrgW3cDomNode>)rdfRdfNode {
  
#line 127
  if ([((id<OrgW3cDomNode>) nil_chk(rdfRdfNode)) hasAttributes]) {
    
#line 129
    [ComItextpdfXmpImplParseRDF rdf_NodeElementListWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:[((ComItextpdfXmpImplXMPMetaImpl *) nil_chk(xmp)) getRoot] withOrgW3cDomNode:rdfRdfNode];
  }
  else {
    
#line 133
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid attributes of rdf:RDF element" withInt:ComItextpdfXmpXMPError_BADRDF];
  }
}


#line 148
+ (void)rdf_NodeElementListWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                               withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                           withOrgW3cDomNode:(id<OrgW3cDomNode>)rdfRdfNode {
  
#line 151
  for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk([((id<OrgW3cDomNode>) nil_chk(rdfRdfNode)) getChildNodes])) getLength]; i++) {
    
#line 153
    id<OrgW3cDomNode> child = [((id<OrgW3cDomNodeList>) nil_chk([rdfRdfNode getChildNodes])) itemWithInt:i];
    
#line 155
    if (![ComItextpdfXmpImplParseRDF isWhitespaceNodeWithOrgW3cDomNode:child]) {
      
#line 157
      [ComItextpdfXmpImplParseRDF rdf_NodeElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:child withBoolean:YES];
    }
  }
}


#line 182
+ (void)rdf_NodeElementWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                           withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                       withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlNode
                                             withBoolean:(jboolean)isTopLevel {
  
#line 185
  jint nodeTerm = [ComItextpdfXmpImplParseRDF getRDFTermKindWithOrgW3cDomNode:xmlNode];
  if (nodeTerm != ComItextpdfXmpImplParseRDF_RDFTERM_DESCRIPTION && nodeTerm != ComItextpdfXmpImplParseRDF_RDFTERM_OTHER) {
    
#line 188
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Node element must be rdf:Description or typed node" withInt:
#line 189
    ComItextpdfXmpXMPError_BADRDF];
  }
  else if (isTopLevel && nodeTerm == ComItextpdfXmpImplParseRDF_RDFTERM_OTHER) {
    
#line 193
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Top level typed node not allowed" withInt:ComItextpdfXmpXMPError_BADXMP];
  }
  else {
    
#line 197
    [ComItextpdfXmpImplParseRDF rdf_NodeElementAttrsWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
    [ComItextpdfXmpImplParseRDF rdf_PropertyElementListWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
  }
}


#line 225
+ (void)rdf_NodeElementAttrsWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                                withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                            withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlNode
                                                  withBoolean:(jboolean)isTopLevel {
  
#line 229
  jint exclusiveAttrs = 0;
  
#line 231
  for (jint i = 0; i < [((id<OrgW3cDomNamedNodeMap>) nil_chk([((id<OrgW3cDomNode>) nil_chk(xmlNode)) getAttributes])) getLength]; i++) {
    
#line 233
    id<OrgW3cDomNode> attribute = [((id<OrgW3cDomNamedNodeMap>) nil_chk([xmlNode getAttributes])) itemWithInt:i];
    
#line 237
    if ([@"xmlns" isEqual:[((id<OrgW3cDomNode>) nil_chk(attribute)) getPrefix]] ||
#line 238
    ([attribute getPrefix] == nil && [@"xmlns" isEqual:[attribute getNodeName]])) {
      
#line 240
      continue;
    }
    
#line 243
    jint attrTerm = [ComItextpdfXmpImplParseRDF getRDFTermKindWithOrgW3cDomNode:attribute];
    
#line 245
    switch (attrTerm) {
      
#line 247
      case ComItextpdfXmpImplParseRDF_RDFTERM_ID:
      case ComItextpdfXmpImplParseRDF_RDFTERM_NODE_ID:
      case ComItextpdfXmpImplParseRDF_RDFTERM_ABOUT:
      if (exclusiveAttrs > 0) {
        
#line 252
        @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Mutally exclusive about, ID, nodeID attributes" withInt:
#line 253
        ComItextpdfXmpXMPError_BADRDF];
      }
      
#line 256
      exclusiveAttrs++;
      
#line 258
      if (isTopLevel && (attrTerm == ComItextpdfXmpImplParseRDF_RDFTERM_ABOUT)) {
        
#line 264
        if ([((ComItextpdfXmpImplXMPNode *) nil_chk(xmpParent)) getName] != nil && ((jint) [((NSString *) nil_chk([xmpParent getName])) length]) > 0) {
          
#line 266
          if (![((NSString *) nil_chk([xmpParent getName])) isEqual:[attribute getNodeValue]]) {
            
#line 268
            @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Mismatched top level rdf:about values" withInt:
#line 269
            ComItextpdfXmpXMPError_BADXMP];
          }
        }
        else {
          
#line 274
          [xmpParent setNameWithNSString:[attribute getNodeValue]];
        }
      }
      break;
      
#line 279
      case ComItextpdfXmpImplParseRDF_RDFTERM_OTHER:
      (void) [ComItextpdfXmpImplParseRDF addChildNodeWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:attribute withNSString:[attribute getNodeValue] withBoolean:isTopLevel];
      break;
      
#line 283
      default:
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid nodeElement attribute" withInt:ComItextpdfXmpXMPError_BADRDF];
    }
  }
}


#line 301
+ (void)rdf_PropertyElementListWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                                   withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                               withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlParent
                                                     withBoolean:(jboolean)isTopLevel {
  for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk([((id<OrgW3cDomNode>) nil_chk(xmlParent)) getChildNodes])) getLength]; i++) {
    
#line 306
    id<OrgW3cDomNode> currChild = [((id<OrgW3cDomNodeList>) nil_chk([xmlParent getChildNodes])) itemWithInt:i];
    if ([ComItextpdfXmpImplParseRDF isWhitespaceNodeWithOrgW3cDomNode:currChild]) {
      
#line 309
      continue;
    }
    else if ([((id<OrgW3cDomNode>) nil_chk(currChild)) getNodeType] != OrgW3cDomNode_ELEMENT_NODE) {
      
#line 313
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Expected property element node not found" withInt:ComItextpdfXmpXMPError_BADRDF];
    }
    else {
      
#line 317
      [ComItextpdfXmpImplParseRDF rdf_PropertyElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:currChild withBoolean:isTopLevel];
    }
  }
}


#line 382
+ (void)rdf_PropertyElementWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                               withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                           withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlNode
                                                 withBoolean:(jboolean)isTopLevel {
  
#line 385
  jint nodeTerm = [ComItextpdfXmpImplParseRDF getRDFTermKindWithOrgW3cDomNode:xmlNode];
  if (![ComItextpdfXmpImplParseRDF isPropertyElementNameWithInt:nodeTerm]) {
    
#line 388
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid property element name" withInt:ComItextpdfXmpXMPError_BADRDF];
  }
  
#line 392
  id<OrgW3cDomNamedNodeMap> attributes = [((id<OrgW3cDomNode>) nil_chk(xmlNode)) getAttributes];
  id<JavaUtilList> nsAttrs = nil;
  for (jint i = 0; i < [((id<OrgW3cDomNamedNodeMap>) nil_chk(attributes)) getLength]; i++) {
    
#line 396
    id<OrgW3cDomNode> attribute = [attributes itemWithInt:i];
    if ([@"xmlns" isEqual:[((id<OrgW3cDomNode>) nil_chk(attribute)) getPrefix]] ||
#line 398
    ([attribute getPrefix] == nil && [@"xmlns" isEqual:[attribute getNodeName]])) {
      
#line 400
      if (nsAttrs == nil) {
        
#line 402
        nsAttrs = [[JavaUtilArrayList alloc] init];
      }
      [((id<JavaUtilList>) nil_chk(nsAttrs)) addWithId:[attribute getNodeName]];
    }
  }
  if (nsAttrs != nil) {
    
#line 409
    for (id<JavaUtilIterator> it = [nsAttrs iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      
#line 411
      NSString *ns = (NSString *) check_class_cast([it next], [NSString class]);
      (void) [attributes removeNamedItemWithNSString:ns];
    }
  }
  
#line 417
  if ([attributes getLength] > 3) {
    
#line 420
    [ComItextpdfXmpImplParseRDF rdf_EmptyPropertyElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
  }
  else {
    
#line 428
    for (jint i = 0; i < [attributes getLength]; i++) {
      
#line 430
      id<OrgW3cDomNode> attribute = [attributes itemWithInt:i];
      NSString *attrLocal = [((id<OrgW3cDomNode>) nil_chk(attribute)) getLocalName];
      NSString *attrNS = [attribute getNamespaceURI];
      NSString *attrValue = [attribute getNodeValue];
      if (!([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XML_LANG_())) isEqual:[attribute getNodeName]] &&
#line 435
      !([@"ID" isEqual:attrLocal] && [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:attrNS]))) {
        
#line 437
        if ([@"datatype" isEqual:attrLocal] && [ComItextpdfXmpXMPConst_get_NS_RDF_() isEqual:attrNS]) {
          
#line 439
          [ComItextpdfXmpImplParseRDF rdf_LiteralPropertyElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
        }
        else if (!([@"parseType" isEqual:attrLocal] && [ComItextpdfXmpXMPConst_get_NS_RDF_() isEqual:attrNS])) {
          
#line 443
          [ComItextpdfXmpImplParseRDF rdf_EmptyPropertyElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
        }
        else if ([@"Literal" isEqual:attrValue]) {
          
#line 447
          [ComItextpdfXmpImplParseRDF rdf_ParseTypeLiteralPropertyElement];
        }
        else if ([@"Resource" isEqual:attrValue]) {
          
#line 451
          [ComItextpdfXmpImplParseRDF rdf_ParseTypeResourcePropertyElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
        }
        else if ([@"Collection" isEqual:attrValue]) {
          
#line 455
          [ComItextpdfXmpImplParseRDF rdf_ParseTypeCollectionPropertyElement];
        }
        else {
          
#line 459
          [ComItextpdfXmpImplParseRDF rdf_ParseTypeOtherPropertyElement];
        }
        
#line 462
        return;
      }
    }
    
#line 469
    if ([xmlNode hasChildNodes]) {
      
#line 471
      for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk([xmlNode getChildNodes])) getLength]; i++) {
        
#line 473
        id<OrgW3cDomNode> currChild = [((id<OrgW3cDomNodeList>) nil_chk([xmlNode getChildNodes])) itemWithInt:i];
        if ([((id<OrgW3cDomNode>) nil_chk(currChild)) getNodeType] != OrgW3cDomNode_TEXT_NODE) {
          
#line 476
          [ComItextpdfXmpImplParseRDF rdf_ResourcePropertyElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
          return;
        }
      }
      
#line 481
      [ComItextpdfXmpImplParseRDF rdf_LiteralPropertyElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
    }
    else {
      
#line 485
      [ComItextpdfXmpImplParseRDF rdf_EmptyPropertyElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withBoolean:isTopLevel];
    }
  }
}


#line 507
+ (void)rdf_ResourcePropertyElementWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                                       withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                                   withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlNode
                                                         withBoolean:(jboolean)isTopLevel {
  if (isTopLevel && [@"iX:changes" isEqual:[((id<OrgW3cDomNode>) nil_chk(xmlNode)) getNodeName]]) {
    
#line 513
    return;
  }
  
#line 516
  ComItextpdfXmpImplXMPNode *newCompound = [ComItextpdfXmpImplParseRDF addChildNodeWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withNSString:@"" withBoolean:isTopLevel];
  
#line 519
  for (jint i = 0; i < [((id<OrgW3cDomNamedNodeMap>) nil_chk([((id<OrgW3cDomNode>) nil_chk(xmlNode)) getAttributes])) getLength]; i++) {
    
#line 521
    id<OrgW3cDomNode> attribute = [((id<OrgW3cDomNamedNodeMap>) nil_chk([xmlNode getAttributes])) itemWithInt:i];
    if ([@"xmlns" isEqual:[((id<OrgW3cDomNode>) nil_chk(attribute)) getPrefix]] ||
#line 523
    ([attribute getPrefix] == nil && [@"xmlns" isEqual:[attribute getNodeName]])) {
      
#line 525
      continue;
    }
    
#line 528
    NSString *attrLocal = [attribute getLocalName];
    NSString *attrNS = [attribute getNamespaceURI];
    if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XML_LANG_())) isEqual:[attribute getNodeName]]) {
      
#line 532
      (void) [ComItextpdfXmpImplParseRDF addQualifierNodeWithComItextpdfXmpImplXMPNode:newCompound withNSString:ComItextpdfXmpXMPConst_get_XML_LANG_() withNSString:[attribute getNodeValue]];
    }
    else if ([@"ID" isEqual:attrLocal] && [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:attrNS]) {
      
#line 536
      continue;
    }
    else {
      
#line 540
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 541
      @"Invalid attribute for resource property element" withInt:ComItextpdfXmpXMPError_BADRDF];
    }
  }
  
#line 547
  id<OrgW3cDomNode> currChild = nil;
  jboolean found = NO;
  jint i;
  for (i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk([xmlNode getChildNodes])) getLength]; i++) {
    
#line 552
    currChild = [((id<OrgW3cDomNodeList>) nil_chk([xmlNode getChildNodes])) itemWithInt:i];
    if (![ComItextpdfXmpImplParseRDF isWhitespaceNodeWithOrgW3cDomNode:currChild]) {
      
#line 555
      if ([((id<OrgW3cDomNode>) nil_chk(currChild)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE && !found) {
        
#line 557
        jboolean isRDF = [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:[currChild getNamespaceURI]];
        NSString *childLocal = [currChild getLocalName];
        
#line 560
        if (isRDF && [@"Bag" isEqual:childLocal]) {
          
#line 562
          (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(newCompound)) getOptions])) setArrayWithBoolean:YES];
        }
        else if (isRDF && [@"Seq" isEqual:childLocal]) {
          
#line 566
          (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(newCompound)) getOptions])) setArrayWithBoolean:YES])) setArrayOrderedWithBoolean:YES];
        }
        else if (isRDF && [@"Alt" isEqual:childLocal]) {
          
#line 570
          (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(newCompound)) getOptions])) setArrayWithBoolean:YES])) setArrayOrderedWithBoolean:YES])) setArrayAlternateWithBoolean:
#line 571
          YES];
        }
        else {
          
#line 575
          (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(newCompound)) getOptions])) setStructWithBoolean:YES];
          if (!isRDF && ![@"Description" isEqual:childLocal]) {
            
#line 578
            NSString *typeName = [currChild getNamespaceURI];
            if (typeName == nil) {
              
#line 581
              @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 582
              @"All XML elements must be in a namespace" withInt:ComItextpdfXmpXMPError_BADXMP];
            }
            typeName = JreStrcat("$$", typeName, JreStrcat("C$", ':', childLocal));
            (void) [ComItextpdfXmpImplParseRDF addQualifierNodeWithComItextpdfXmpImplXMPNode:newCompound withNSString:@"rdf:type" withNSString:typeName];
          }
        }
        
#line 589
        [ComItextpdfXmpImplParseRDF rdf_NodeElementWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:newCompound withOrgW3cDomNode:currChild withBoolean:NO];
        
#line 591
        if ([((ComItextpdfXmpImplXMPNode *) nil_chk(newCompound)) getHasValueChild]) {
          
#line 593
          [ComItextpdfXmpImplParseRDF fixupQualifiedNodeWithComItextpdfXmpImplXMPNode:newCompound];
        }
        else if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([newCompound getOptions])) isArrayAlternate]) {
          
#line 597
          [ComItextpdfXmpImplXMPNodeUtils detectAltTextWithComItextpdfXmpImplXMPNode:newCompound];
        }
        
#line 600
        found = YES;
      }
      else if (found) {
        
#line 605
        @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 606
        @"Invalid child of resource property element" withInt:ComItextpdfXmpXMPError_BADRDF];
      }
      else {
        
#line 610
        @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 611
        @"Children of resource property element must be XML elements" withInt:ComItextpdfXmpXMPError_BADRDF];
      }
    }
  }
  
#line 616
  if (!found) {
    
#line 619
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Missing child of resource property element" withInt:ComItextpdfXmpXMPError_BADRDF];
  }
}


#line 638
+ (void)rdf_LiteralPropertyElementWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                                      withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                                  withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlNode
                                                        withBoolean:(jboolean)isTopLevel {
  
#line 641
  ComItextpdfXmpImplXMPNode *newChild = [ComItextpdfXmpImplParseRDF addChildNodeWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withNSString:nil withBoolean:isTopLevel];
  
#line 643
  for (jint i = 0; i < [((id<OrgW3cDomNamedNodeMap>) nil_chk([((id<OrgW3cDomNode>) nil_chk(xmlNode)) getAttributes])) getLength]; i++) {
    
#line 645
    id<OrgW3cDomNode> attribute = [((id<OrgW3cDomNamedNodeMap>) nil_chk([xmlNode getAttributes])) itemWithInt:i];
    if ([@"xmlns" isEqual:[((id<OrgW3cDomNode>) nil_chk(attribute)) getPrefix]] ||
#line 647
    ([attribute getPrefix] == nil && [@"xmlns" isEqual:[attribute getNodeName]])) {
      
#line 649
      continue;
    }
    
#line 652
    NSString *attrNS = [attribute getNamespaceURI];
    NSString *attrLocal = [attribute getLocalName];
    if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XML_LANG_())) isEqual:[attribute getNodeName]]) {
      
#line 656
      (void) [ComItextpdfXmpImplParseRDF addQualifierNodeWithComItextpdfXmpImplXMPNode:newChild withNSString:ComItextpdfXmpXMPConst_get_XML_LANG_() withNSString:[attribute getNodeValue]];
    }
    else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:attrNS] &&
#line 659
    ([@"ID" isEqual:attrLocal] || [@"datatype" isEqual:attrLocal])) {
      
#line 661
      continue;
    }
    else {
      
#line 665
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 666
      @"Invalid attribute for literal property element" withInt:ComItextpdfXmpXMPError_BADRDF];
    }
  }
  NSString *textValue = @"";
  for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk([xmlNode getChildNodes])) getLength]; i++) {
    
#line 672
    id<OrgW3cDomNode> child = [((id<OrgW3cDomNodeList>) nil_chk([xmlNode getChildNodes])) itemWithInt:i];
    if ([((id<OrgW3cDomNode>) nil_chk(child)) getNodeType] == OrgW3cDomNode_TEXT_NODE) {
      
#line 675
      textValue = JreStrcat("$$", textValue, [child getNodeValue]);
    }
    else {
      
#line 679
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid child of literal property element" withInt:ComItextpdfXmpXMPError_BADRDF];
    }
  }
  [((ComItextpdfXmpImplXMPNode *) nil_chk(newChild)) setValueWithNSString:textValue];
}


#line 695
+ (void)rdf_ParseTypeLiteralPropertyElement {
  
#line 697
  @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"ParseTypeLiteral property element not allowed" withInt:ComItextpdfXmpXMPError_BADXMP];
}


#line 717
+ (void)rdf_ParseTypeResourcePropertyElementWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                                                withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                                            withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlNode
                                                                  withBoolean:(jboolean)isTopLevel {
  
#line 720
  ComItextpdfXmpImplXMPNode *newStruct = [ComItextpdfXmpImplParseRDF addChildNodeWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withNSString:@"" withBoolean:isTopLevel];
  
#line 722
  (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(newStruct)) getOptions])) setStructWithBoolean:YES];
  
#line 724
  for (jint i = 0; i < [((id<OrgW3cDomNamedNodeMap>) nil_chk([((id<OrgW3cDomNode>) nil_chk(xmlNode)) getAttributes])) getLength]; i++) {
    
#line 726
    id<OrgW3cDomNode> attribute = [((id<OrgW3cDomNamedNodeMap>) nil_chk([xmlNode getAttributes])) itemWithInt:i];
    if ([@"xmlns" isEqual:[((id<OrgW3cDomNode>) nil_chk(attribute)) getPrefix]] ||
#line 728
    ([attribute getPrefix] == nil && [@"xmlns" isEqual:[attribute getNodeName]])) {
      
#line 730
      continue;
    }
    
#line 733
    NSString *attrLocal = [attribute getLocalName];
    NSString *attrNS = [attribute getNamespaceURI];
    if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XML_LANG_())) isEqual:[attribute getNodeName]]) {
      
#line 737
      (void) [ComItextpdfXmpImplParseRDF addQualifierNodeWithComItextpdfXmpImplXMPNode:newStruct withNSString:ComItextpdfXmpXMPConst_get_XML_LANG_() withNSString:[attribute getNodeValue]];
    }
    else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:attrNS] &&
#line 740
    ([@"ID" isEqual:attrLocal] || [@"parseType" isEqual:attrLocal])) {
      
#line 742
      continue;
    }
    else {
      
#line 747
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Invalid attribute for ParseTypeResource property element" withInt:
#line 748
      ComItextpdfXmpXMPError_BADRDF];
    }
  }
  
#line 752
  [ComItextpdfXmpImplParseRDF rdf_PropertyElementListWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:newStruct withOrgW3cDomNode:xmlNode withBoolean:NO];
  
#line 754
  if ([newStruct getHasValueChild]) {
    
#line 756
    [ComItextpdfXmpImplParseRDF fixupQualifiedNodeWithComItextpdfXmpImplXMPNode:newStruct];
  }
}


#line 770
+ (void)rdf_ParseTypeCollectionPropertyElement {
  
#line 772
  @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"ParseTypeCollection property element not allowed" withInt:ComItextpdfXmpXMPError_BADXMP];
}


#line 784
+ (void)rdf_ParseTypeOtherPropertyElement {
  
#line 786
  @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"ParseTypeOther property element not allowed" withInt:ComItextpdfXmpXMPError_BADXMP];
}


#line 834
+ (void)rdf_EmptyPropertyElementWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                                    withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                                withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlNode
                                                      withBoolean:(jboolean)isTopLevel {
  
#line 837
  jboolean hasPropertyAttrs = NO;
  jboolean hasResourceAttr = NO;
  jboolean hasNodeIDAttr = NO;
  jboolean hasValueAttr = NO;
  
#line 842
  id<OrgW3cDomNode> valueNode = nil;
  
#line 844
  if ([((id<OrgW3cDomNode>) nil_chk(xmlNode)) hasChildNodes]) {
    
#line 846
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 847
    @"Nested content not allowed with rdf:resource or property attributes" withInt:
#line 848
    ComItextpdfXmpXMPError_BADRDF];
  }
  
#line 852
  for (jint i = 0; i < [((id<OrgW3cDomNamedNodeMap>) nil_chk([xmlNode getAttributes])) getLength]; i++) {
    
#line 854
    id<OrgW3cDomNode> attribute = [((id<OrgW3cDomNamedNodeMap>) nil_chk([xmlNode getAttributes])) itemWithInt:i];
    if ([@"xmlns" isEqual:[((id<OrgW3cDomNode>) nil_chk(attribute)) getPrefix]] ||
#line 856
    ([attribute getPrefix] == nil && [@"xmlns" isEqual:[attribute getNodeName]])) {
      
#line 858
      continue;
    }
    
#line 861
    jint attrTerm = [ComItextpdfXmpImplParseRDF getRDFTermKindWithOrgW3cDomNode:attribute];
    
#line 863
    switch (attrTerm) {
      
#line 865
      case ComItextpdfXmpImplParseRDF_RDFTERM_ID:
      
#line 867
      break;
      
#line 869
      case ComItextpdfXmpImplParseRDF_RDFTERM_RESOURCE:
      if (hasNodeIDAttr) {
        
#line 872
        @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 873
        @"Empty property element can't have both rdf:resource and rdf:nodeID" withInt:
#line 874
        ComItextpdfXmpXMPError_BADRDF];
      }
      else if (hasValueAttr) {
        
#line 878
        @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 879
        @"Empty property element can't have both rdf:value and rdf:resource" withInt:
#line 880
        ComItextpdfXmpXMPError_BADXMP];
      }
      
#line 883
      hasResourceAttr = YES;
      if (!hasValueAttr) {
        
#line 886
        valueNode = attribute;
      }
      break;
      
#line 890
      case ComItextpdfXmpImplParseRDF_RDFTERM_NODE_ID:
      if (hasResourceAttr) {
        
#line 893
        @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 894
        @"Empty property element can't have both rdf:resource and rdf:nodeID" withInt:
#line 895
        ComItextpdfXmpXMPError_BADRDF];
      }
      hasNodeIDAttr = YES;
      break;
      
#line 900
      case ComItextpdfXmpImplParseRDF_RDFTERM_OTHER:
      if ([@"value" isEqual:[attribute getLocalName]] &&
#line 902
      [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:[attribute getNamespaceURI]]) {
        
#line 904
        if (hasResourceAttr) {
          
#line 906
          @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 907
          @"Empty property element can't have both rdf:value and rdf:resource" withInt:
#line 908
          ComItextpdfXmpXMPError_BADXMP];
        }
        hasValueAttr = YES;
        valueNode = attribute;
      }
      else if (![((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XML_LANG_())) isEqual:[attribute getNodeName]]) {
        
#line 915
        hasPropertyAttrs = YES;
      }
      break;
      
#line 919
      default:
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Unrecognized attribute of empty property element" withInt:
#line 921
      ComItextpdfXmpXMPError_BADRDF];
    }
  }
  
#line 931
  ComItextpdfXmpImplXMPNode *childNode = [ComItextpdfXmpImplParseRDF addChildNodeWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:xmpParent withOrgW3cDomNode:xmlNode withNSString:@"" withBoolean:isTopLevel];
  jboolean childIsStruct = NO;
  
#line 934
  if (hasValueAttr || hasResourceAttr) {
    
#line 936
    [((ComItextpdfXmpImplXMPNode *) nil_chk(childNode)) setValueWithNSString:valueNode != nil ? [valueNode getNodeValue] : @""];
    if (!hasValueAttr) {
      
#line 940
      (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([childNode getOptions])) setURIWithBoolean:YES];
    }
  }
  else if (hasPropertyAttrs) {
    
#line 945
    (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(childNode)) getOptions])) setStructWithBoolean:YES];
    childIsStruct = YES;
  }
  
#line 949
  for (jint i = 0; i < [((id<OrgW3cDomNamedNodeMap>) nil_chk([xmlNode getAttributes])) getLength]; i++) {
    
#line 951
    id<OrgW3cDomNode> attribute = [((id<OrgW3cDomNamedNodeMap>) nil_chk([xmlNode getAttributes])) itemWithInt:i];
    if (attribute == valueNode ||
#line 953
    [@"xmlns" isEqual:[((id<OrgW3cDomNode>) nil_chk(attribute)) getPrefix]] ||
#line 954
    ([attribute getPrefix] == nil && [@"xmlns" isEqual:[attribute getNodeName]])) {
      
#line 956
      continue;
    }
    
#line 959
    jint attrTerm = [ComItextpdfXmpImplParseRDF getRDFTermKindWithOrgW3cDomNode:attribute];
    
#line 961
    switch (attrTerm) {
      
#line 963
      case ComItextpdfXmpImplParseRDF_RDFTERM_ID:
      case ComItextpdfXmpImplParseRDF_RDFTERM_NODE_ID:
      break;
      
#line 967
      case ComItextpdfXmpImplParseRDF_RDFTERM_RESOURCE:
      (void) [ComItextpdfXmpImplParseRDF addQualifierNodeWithComItextpdfXmpImplXMPNode:childNode withNSString:@"rdf:resource" withNSString:[((id<OrgW3cDomNode>) nil_chk(attribute)) getNodeValue]];
      break;
      
#line 971
      case ComItextpdfXmpImplParseRDF_RDFTERM_OTHER:
      if (!childIsStruct) {
        
#line 974
        (void) [ComItextpdfXmpImplParseRDF addQualifierNodeWithComItextpdfXmpImplXMPNode:
#line 975
        childNode withNSString:[((id<OrgW3cDomNode>) nil_chk(attribute)) getNodeName] withNSString:[attribute getNodeValue]];
      }
      else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XML_LANG_())) isEqual:[((id<OrgW3cDomNode>) nil_chk(attribute)) getNodeName]]) {
        
#line 979
        (void) [ComItextpdfXmpImplParseRDF addQualifierNodeWithComItextpdfXmpImplXMPNode:childNode withNSString:ComItextpdfXmpXMPConst_get_XML_LANG_() withNSString:[attribute getNodeValue]];
      }
      else {
        
#line 983
        (void) [ComItextpdfXmpImplParseRDF addChildNodeWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpImplXMPNode:childNode withOrgW3cDomNode:attribute withNSString:[attribute getNodeValue] withBoolean:NO];
      }
      break;
      
#line 987
      default:
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Unrecognized attribute of empty property element" withInt:
#line 989
      ComItextpdfXmpXMPError_BADRDF];
    }
  }
}


#line 1007
+ (ComItextpdfXmpImplXMPNode *)addChildNodeWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                                               withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                                           withOrgW3cDomNode:(id<OrgW3cDomNode>)xmlNode
                                                                withNSString:(NSString *)value
                                                                 withBoolean:(jboolean)isTopLevel {
  
#line 1010
  id<ComItextpdfXmpXMPSchemaRegistry> registry = [ComItextpdfXmpXMPMetaFactory getSchemaRegistry];
  NSString *namespace_ = [((id<OrgW3cDomNode>) nil_chk(xmlNode)) getNamespaceURI];
  NSString *childName;
  if (namespace_ != nil) {
    
#line 1015
    if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_DC_DEPRECATED_())) isEqual:namespace_]) {
      
#line 1018
      namespace_ = ComItextpdfXmpXMPConst_get_NS_DC_();
    }
    
#line 1021
    NSString *prefix = [((id<ComItextpdfXmpXMPSchemaRegistry>) nil_chk(registry)) getNamespacePrefixWithNSString:namespace_];
    if (prefix == nil) {
      
#line 1024
      prefix = [xmlNode getPrefix] != nil ? [xmlNode getPrefix] : ComItextpdfXmpImplParseRDF_DEFAULT_PREFIX_;
      prefix = [registry registerNamespaceWithNSString:namespace_ withNSString:prefix];
    }
    childName = JreStrcat("$$", prefix, [xmlNode getLocalName]);
  }
  else {
    
#line 1031
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 1032
    @"XML namespace required for all elements and attributes" withInt:ComItextpdfXmpXMPError_BADRDF];
  }
  
#line 1037
  ComItextpdfXmpOptionsPropertyOptions *childOptions = [[ComItextpdfXmpOptionsPropertyOptions alloc] init];
  jboolean isAlias = NO;
  if (isTopLevel) {
    
#line 1043
    ComItextpdfXmpImplXMPNode *schemaNode = [ComItextpdfXmpImplXMPNodeUtils findSchemaNodeWithComItextpdfXmpImplXMPNode:[((ComItextpdfXmpImplXMPMetaImpl *) nil_chk(xmp)) getRoot] withNSString:namespace_ withNSString:
#line 1044
    ComItextpdfXmpImplParseRDF_DEFAULT_PREFIX_ withBoolean:YES];
    [((ComItextpdfXmpImplXMPNode *) nil_chk(schemaNode)) setImplicitWithBoolean:NO];
    
#line 1047
    xmpParent = schemaNode;
    
#line 1051
    if ([((id<ComItextpdfXmpXMPSchemaRegistry>) nil_chk(registry)) findAliasWithNSString:childName] != nil) {
      
#line 1053
      isAlias = YES;
      [((ComItextpdfXmpImplXMPNode *) nil_chk([xmp getRoot])) setHasAliasesWithBoolean:YES];
      [schemaNode setHasAliasesWithBoolean:YES];
    }
  }
  
#line 1061
  jboolean isArrayItem = [@"rdf:li" isEqual:childName];
  jboolean isValueNode = [@"rdf:value" isEqual:childName];
  
#line 1065
  ComItextpdfXmpImplXMPNode *newChild = [[ComItextpdfXmpImplXMPNode alloc] initWithNSString:
#line 1066
  childName withNSString:value withComItextpdfXmpOptionsPropertyOptions:childOptions];
  [newChild setAliasWithBoolean:isAlias];
  
#line 1070
  if (!isValueNode) {
    
#line 1072
    [((ComItextpdfXmpImplXMPNode *) nil_chk(xmpParent)) addChildWithComItextpdfXmpImplXMPNode:newChild];
  }
  else {
    
#line 1076
    [((ComItextpdfXmpImplXMPNode *) nil_chk(xmpParent)) addChildWithInt:1 withComItextpdfXmpImplXMPNode:newChild];
  }
  
#line 1080
  if (isValueNode) {
    
#line 1082
    if (isTopLevel || ![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(xmpParent)) getOptions])) isStruct]) {
      
#line 1084
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Misplaced rdf:value element" withInt:ComItextpdfXmpXMPError_BADRDF];
    }
    [((ComItextpdfXmpImplXMPNode *) nil_chk(xmpParent)) setHasValueChildWithBoolean:YES];
  }
  
#line 1089
  if (isArrayItem) {
    
#line 1091
    if (![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(xmpParent)) getOptions])) isArray]) {
      
#line 1093
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Misplaced rdf:li element" withInt:ComItextpdfXmpXMPError_BADRDF];
    }
    [newChild setNameWithNSString:ComItextpdfXmpXMPConst_get_ARRAY_ITEM_NAME_()];
  }
  
#line 1098
  return newChild;
}


#line 1112
+ (ComItextpdfXmpImplXMPNode *)addQualifierNodeWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent
                                                                withNSString:(NSString *)name
                                                                withNSString:(NSString *)value {
  
#line 1115
  jboolean isLang = [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XML_LANG_())) isEqual:name];
  
#line 1117
  ComItextpdfXmpImplXMPNode *newQual = nil;
  
#line 1120
  newQual = [[ComItextpdfXmpImplXMPNode alloc] initWithNSString:name withNSString:isLang ? [ComItextpdfXmpImplUtils normalizeLangValueWithNSString:value] : value withComItextpdfXmpOptionsPropertyOptions:nil];
  [((ComItextpdfXmpImplXMPNode *) nil_chk(xmpParent)) addQualifierWithComItextpdfXmpImplXMPNode:newQual];
  
#line 1123
  return newQual;
}


#line 1137
+ (void)fixupQualifiedNodeWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)xmpParent {
  
#line 1139
  NSAssert([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(xmpParent)) getOptions])) isStruct] && [xmpParent hasChildren], @"com/itextpdf/xmp/impl/ParseRDF.java:1139 condition failed: assert xmpParent.getOptions().isStruct()  &&  xmpParent.hasChildren();");
  
#line 1141
  ComItextpdfXmpImplXMPNode *valueNode = [xmpParent getChildWithInt:1];
  NSAssert([@"rdf:value" isEqual:[((ComItextpdfXmpImplXMPNode *) nil_chk(valueNode)) getName]], @"com/itextpdf/xmp/impl/ParseRDF.java:1142 condition failed: assert \"rdf:value\".equals(valueNode.getName());");
  
#line 1149
  if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([valueNode getOptions])) getHasLanguage]) {
    
#line 1151
    if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([xmpParent getOptions])) getHasLanguage]) {
      
#line 1153
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Redundant xml:lang for rdf:value element" withInt:
#line 1154
      ComItextpdfXmpXMPError_BADXMP];
    }
    ComItextpdfXmpImplXMPNode *langQual = [valueNode getQualifierWithInt:1];
    [valueNode removeQualifierWithComItextpdfXmpImplXMPNode:langQual];
    [xmpParent addQualifierWithComItextpdfXmpImplXMPNode:langQual];
  }
  
#line 1162
  for (jint i = 1; i <= [valueNode getQualifierLength]; i++) {
    
#line 1164
    ComItextpdfXmpImplXMPNode *qualifier = [valueNode getQualifierWithInt:i];
    [xmpParent addQualifierWithComItextpdfXmpImplXMPNode:qualifier];
  }
  
#line 1171
  for (jint i = 2; i <= [xmpParent getChildrenLength]; i++) {
    
#line 1173
    ComItextpdfXmpImplXMPNode *qualifier = [xmpParent getChildWithInt:i];
    [xmpParent addQualifierWithComItextpdfXmpImplXMPNode:qualifier];
  }
  
#line 1179
  NSAssert([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([xmpParent getOptions])) isStruct] || [xmpParent getHasValueChild], @"com/itextpdf/xmp/impl/ParseRDF.java:1179 condition failed: assert xmpParent.getOptions().isStruct()  ||  xmpParent.getHasValueChild();");
  
#line 1181
  [xmpParent setHasValueChildWithBoolean:NO];
  (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([xmpParent getOptions])) setStructWithBoolean:NO];
  [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([xmpParent getOptions])) mergeWithWithComItextpdfXmpOptionsPropertyOptions:[valueNode getOptions]];
  [xmpParent setValueWithNSString:[valueNode getValue]];
  
#line 1186
  [xmpParent removeChildren];
  for (id<JavaUtilIterator> it = [valueNode iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 1189
    ComItextpdfXmpImplXMPNode *child = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    [xmpParent addChildWithComItextpdfXmpImplXMPNode:child];
  }
}


#line 1201
+ (jboolean)isWhitespaceNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)node {
  
#line 1203
  if ([((id<OrgW3cDomNode>) nil_chk(node)) getNodeType] != OrgW3cDomNode_TEXT_NODE) {
    
#line 1205
    return NO;
  }
  
#line 1208
  NSString *value = [node getNodeValue];
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(value)) length]); i++) {
    
#line 1211
    if (![JavaLangCharacter isWhitespaceWithChar:[value charAtWithInt:i]]) {
      
#line 1213
      return NO;
    }
  }
  
#line 1217
  return YES;
}


#line 1228
+ (jboolean)isPropertyElementNameWithInt:(jint)term {
  
#line 1230
  if (term == ComItextpdfXmpImplParseRDF_RDFTERM_DESCRIPTION || [ComItextpdfXmpImplParseRDF isOldTermWithInt:term]) {
    
#line 1232
    return NO;
  }
  else {
    
#line 1236
    return (![ComItextpdfXmpImplParseRDF isCoreSyntaxTermWithInt:term]);
  }
}


#line 1248
+ (jboolean)isOldTermWithInt:(jint)term {
  
#line 1250
  return ComItextpdfXmpImplParseRDF_RDFTERM_FIRST_OLD <= term && term <= ComItextpdfXmpImplParseRDF_RDFTERM_LAST_OLD;
}


#line 1262
+ (jboolean)isCoreSyntaxTermWithInt:(jint)term {
  
#line 1264
  return ComItextpdfXmpImplParseRDF_RDFTERM_FIRST_CORE <= term && term <= ComItextpdfXmpImplParseRDF_RDFTERM_LAST_CORE;
}


#line 1275
+ (jint)getRDFTermKindWithOrgW3cDomNode:(id<OrgW3cDomNode>)node {
  
#line 1277
  NSString *localName = [((id<OrgW3cDomNode>) nil_chk(node)) getLocalName];
  NSString *namespace_ = [node getNamespaceURI];
  
#line 1280
  if (
#line 1281
  namespace_ == nil &&
#line 1282
  ([@"about" isEqual:localName] || [@"ID" isEqual:localName]) &&
#line 1283
  ([(id) node conformsToProtocol: @protocol(OrgW3cDomAttr)]) &&
#line 1284
  [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:[((id<OrgW3cDomElement>) nil_chk([((id<OrgW3cDomAttr>) check_protocol_cast(node, @protocol(OrgW3cDomAttr))) getOwnerElement])) getNamespaceURI]]) {
    
#line 1287
    namespace_ = ComItextpdfXmpXMPConst_get_NS_RDF_();
  }
  
#line 1290
  if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:namespace_]) {
    
#line 1292
    if ([@"li" isEqual:localName]) {
      
#line 1294
      return ComItextpdfXmpImplParseRDF_RDFTERM_LI;
    }
    else if ([@"parseType" isEqual:localName]) {
      
#line 1298
      return ComItextpdfXmpImplParseRDF_RDFTERM_PARSE_TYPE;
    }
    else if ([@"Description" isEqual:localName]) {
      
#line 1302
      return ComItextpdfXmpImplParseRDF_RDFTERM_DESCRIPTION;
    }
    else if ([@"about" isEqual:localName]) {
      
#line 1306
      return ComItextpdfXmpImplParseRDF_RDFTERM_ABOUT;
    }
    else if ([@"resource" isEqual:localName]) {
      
#line 1310
      return ComItextpdfXmpImplParseRDF_RDFTERM_RESOURCE;
    }
    else if ([@"RDF" isEqual:localName]) {
      
#line 1314
      return ComItextpdfXmpImplParseRDF_RDFTERM_RDF;
    }
    else if ([@"ID" isEqual:localName]) {
      
#line 1318
      return ComItextpdfXmpImplParseRDF_RDFTERM_ID;
    }
    else if ([@"nodeID" isEqual:localName]) {
      
#line 1322
      return ComItextpdfXmpImplParseRDF_RDFTERM_NODE_ID;
    }
    else if ([@"datatype" isEqual:localName]) {
      
#line 1326
      return ComItextpdfXmpImplParseRDF_RDFTERM_DATATYPE;
    }
    else if ([@"aboutEach" isEqual:localName]) {
      
#line 1330
      return ComItextpdfXmpImplParseRDF_RDFTERM_ABOUT_EACH;
    }
    else if ([@"aboutEachPrefix" isEqual:localName]) {
      
#line 1334
      return ComItextpdfXmpImplParseRDF_RDFTERM_ABOUT_EACH_PREFIX;
    }
    else if ([@"bagID" isEqual:localName]) {
      
#line 1338
      return ComItextpdfXmpImplParseRDF_RDFTERM_BAG_ID;
    }
  }
  
#line 1342
  return ComItextpdfXmpImplParseRDF_RDFTERM_OTHER;
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "parseWithOrgW3cDomNode:", "parse", "Lcom.itextpdf.xmp.impl.XMPMetaImpl;", 0x8, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_RDFWithComItextpdfXmpImplXMPMetaImpl:withOrgW3cDomNode:", "rdf_RDF", "V", 0x8, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_NodeElementListWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:", "rdf_NodeElementList", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_NodeElementWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withBoolean:", "rdf_NodeElement", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_NodeElementAttrsWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withBoolean:", "rdf_NodeElementAttrs", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_PropertyElementListWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withBoolean:", "rdf_PropertyElementList", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_PropertyElementWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withBoolean:", "rdf_PropertyElement", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_ResourcePropertyElementWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withBoolean:", "rdf_ResourcePropertyElement", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_LiteralPropertyElementWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withBoolean:", "rdf_LiteralPropertyElement", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_ParseTypeLiteralPropertyElement", NULL, "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_ParseTypeResourcePropertyElementWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withBoolean:", "rdf_ParseTypeResourcePropertyElement", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_ParseTypeCollectionPropertyElement", NULL, "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_ParseTypeOtherPropertyElement", NULL, "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "rdf_EmptyPropertyElementWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withBoolean:", "rdf_EmptyPropertyElement", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "addChildNodeWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpImplXMPNode:withOrgW3cDomNode:withNSString:withBoolean:", "addChildNode", "Lcom.itextpdf.xmp.impl.XMPNode;", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "addQualifierNodeWithComItextpdfXmpImplXMPNode:withNSString:withNSString:", "addQualifierNode", "Lcom.itextpdf.xmp.impl.XMPNode;", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "fixupQualifiedNodeWithComItextpdfXmpImplXMPNode:", "fixupQualifiedNode", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "isWhitespaceNodeWithOrgW3cDomNode:", "isWhitespaceNode", "Z", 0xa, NULL },
    { "isPropertyElementNameWithInt:", "isPropertyElementName", "Z", 0xa, NULL },
    { "isOldTermWithInt:", "isOldTerm", "Z", 0xa, NULL },
    { "isCoreSyntaxTermWithInt:", "isCoreSyntaxTerm", "Z", 0xa, NULL },
    { "getRDFTermKindWithOrgW3cDomNode:", "getRDFTermKind", "I", 0xa, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "RDFTERM_OTHER_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_OTHER },
    { "RDFTERM_RDF_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_RDF },
    { "RDFTERM_ID_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_ID },
    { "RDFTERM_ABOUT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_ABOUT },
    { "RDFTERM_PARSE_TYPE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_PARSE_TYPE },
    { "RDFTERM_RESOURCE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_RESOURCE },
    { "RDFTERM_NODE_ID_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_NODE_ID },
    { "RDFTERM_DATATYPE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_DATATYPE },
    { "RDFTERM_DESCRIPTION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_DESCRIPTION },
    { "RDFTERM_LI_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_LI },
    { "RDFTERM_ABOUT_EACH_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_ABOUT_EACH },
    { "RDFTERM_ABOUT_EACH_PREFIX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_ABOUT_EACH_PREFIX },
    { "RDFTERM_BAG_ID_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_BAG_ID },
    { "RDFTERM_FIRST_CORE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_FIRST_CORE },
    { "RDFTERM_LAST_CORE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_LAST_CORE },
    { "RDFTERM_FIRST_SYNTAX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_FIRST_SYNTAX },
    { "RDFTERM_LAST_SYNTAX_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_LAST_SYNTAX },
    { "RDFTERM_FIRST_OLD_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_FIRST_OLD },
    { "RDFTERM_LAST_OLD_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplParseRDF_RDFTERM_LAST_OLD },
    { "DEFAULT_PREFIX_", NULL, 0x19, "Ljava.lang.String;", &ComItextpdfXmpImplParseRDF_DEFAULT_PREFIX_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplParseRDF = { "ParseRDF", "com.itextpdf.xmp.impl", NULL, 0x1, 23, methods, 20, fields, 0, NULL};
  return &_ComItextpdfXmpImplParseRDF;
}

@end
