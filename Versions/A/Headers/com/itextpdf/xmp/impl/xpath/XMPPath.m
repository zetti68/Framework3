//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/xpath/XMPPath.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/xpath/XMPPath.java"

#include "com/itextpdf/xmp/impl/xpath/XMPPath.h"
#include "com/itextpdf/xmp/impl/xpath/XMPPathSegment.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


#line 42
@implementation ComItextpdfXmpImplXpathXMPPath


#line 76
- (void)addWithComItextpdfXmpImplXpathXMPPathSegment:(ComItextpdfXmpImplXpathXMPPathSegment *)segment {
  
#line 78
  [((id<JavaUtilList>) nil_chk(segments_)) addWithId:segment];
}


#line 86
- (ComItextpdfXmpImplXpathXMPPathSegment *)getSegmentWithInt:(jint)index {
  
#line 88
  return (ComItextpdfXmpImplXpathXMPPathSegment *) check_class_cast([((id<JavaUtilList>) nil_chk(segments_)) getWithInt:index], [ComItextpdfXmpImplXpathXMPPathSegment class]);
}


#line 95
- (jint)size {
  
#line 97
  return [((id<JavaUtilList>) nil_chk(segments_)) size];
}

- (NSString *)description {
  
#line 107
  JavaLangStringBuffer *result = [[JavaLangStringBuffer alloc] init];
  jint index = 1;
  while (index < [self size]) {
    
#line 111
    (void) [result appendWithId:[self getSegmentWithInt:index]];
    if (index < [self size] - 1) {
      
#line 114
      jint kind = [((ComItextpdfXmpImplXpathXMPPathSegment *) nil_chk([self getSegmentWithInt:index + 1])) getKind];
      if (kind == ComItextpdfXmpImplXpathXMPPath_STRUCT_FIELD_STEP ||
#line 116
      kind == ComItextpdfXmpImplXpathXMPPath_QUALIFIER_STEP) {
        
#line 119
        (void) [result appendWithChar:'/'];
      }
    }
    index++;
  }
  
#line 125
  return [result description];
}

- (instancetype)init {
  if (self = [super init]) {
    segments_ =
#line 68
    [[JavaUtilArrayList alloc] initWithInt:5];
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfXmpImplXpathXMPPath *)other {
  [super copyAllFieldsTo:other];
  other->segments_ = segments_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "addWithComItextpdfXmpImplXpathXMPPathSegment:", "add", "V", 0x1, NULL },
    { "getSegmentWithInt:", "getSegment", "Lcom.itextpdf.xmp.impl.xpath.XMPPathSegment;", 0x1, NULL },
    { "size", NULL, "I", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STRUCT_FIELD_STEP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_STRUCT_FIELD_STEP },
    { "QUALIFIER_STEP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_QUALIFIER_STEP },
    { "ARRAY_INDEX_STEP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_ARRAY_INDEX_STEP },
    { "ARRAY_LAST_STEP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_ARRAY_LAST_STEP },
    { "QUAL_SELECTOR_STEP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_QUAL_SELECTOR_STEP },
    { "FIELD_SELECTOR_STEP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_FIELD_SELECTOR_STEP },
    { "SCHEMA_NODE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_SCHEMA_NODE },
    { "STEP_SCHEMA_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_STEP_SCHEMA },
    { "STEP_ROOT_PROP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXpathXMPPath_STEP_ROOT_PROP },
    { "segments_", NULL, 0x2, "Ljava.util.List;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplXpathXMPPath = { "XMPPath", "com.itextpdf.xmp.impl.xpath", NULL, 0x1, 5, methods, 10, fields, 0, NULL};
  return &_ComItextpdfXmpImplXpathXMPPath;
}

@end
