//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/Base64.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/Base64.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/xmp/impl/Base64.h"
#include "java/lang/IllegalArgumentException.h"

BOOL ComItextpdfXmpImplBase64_initialized = NO;


#line 42
@implementation ComItextpdfXmpImplBase64

IOSByteArray * ComItextpdfXmpImplBase64_base64_;
IOSByteArray * ComItextpdfXmpImplBase64_ascii_;


#line 101
+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)src {
  
#line 103
  return [ComItextpdfXmpImplBase64 encodeWithByteArray:src withInt:0];
}


#line 115
+ (IOSByteArray *)encodeWithByteArray:(IOSByteArray *)src
                              withInt:(jint)lineFeed {
  
#line 118
  lineFeed = lineFeed / 4 * 4;
  if (lineFeed < 0) {
    
#line 121
    lineFeed = 0;
  }
  
#line 125
  jint codeLength = ((((IOSByteArray *) nil_chk(src))->size_ + 2) / 3) * 4;
  if (lineFeed > 0) {
    
#line 128
    codeLength += (codeLength - 1) / lineFeed;
  }
  
#line 131
  IOSByteArray *dst = [IOSByteArray arrayWithLength:codeLength];
  jint bits24;
  jint bits6;
  
#line 137
  jint didx = 0;
  jint sidx = 0;
  jint lf = 0;
  while (sidx + 3 <= src->size_) {
    
#line 142
    bits24 = LShift32((IOSByteArray_Get(src, sidx++) & (jint) 0xFF), 16);
    bits24 |= LShift32((IOSByteArray_Get(src, sidx++) & (jint) 0xFF), 8);
    bits24 |= LShift32((IOSByteArray_Get(src, sidx++) & (jint) 0xFF), 0);
    bits6 = RShift32((bits24 & (jint) 0x00FC0000), 18);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(nil_chk(ComItextpdfXmpImplBase64_base64_), bits6);
    bits6 = RShift32((bits24 & (jint) 0x0003F000), 12);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(ComItextpdfXmpImplBase64_base64_, bits6);
    bits6 = RShift32((bits24 & (jint) 0x00000FC0), 6);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(ComItextpdfXmpImplBase64_base64_, bits6);
    bits6 = (bits24 & (jint) 0x0000003F);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(ComItextpdfXmpImplBase64_base64_, bits6);
    
#line 154
    lf += 4;
    if (didx < codeLength && lineFeed > 0 && lf % lineFeed == 0) {
      
#line 157
      *IOSByteArray_GetRef(dst, didx++) = (jint) 0x0A;
    }
  }
  if (src->size_ - sidx == 2) {
    
#line 162
    bits24 = LShift32((IOSByteArray_Get(src, sidx) & (jint) 0xFF), 16);
    bits24 |= LShift32((IOSByteArray_Get(src, sidx + 1) & (jint) 0xFF), 8);
    bits6 = RShift32((bits24 & (jint) 0x00FC0000), 18);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(nil_chk(ComItextpdfXmpImplBase64_base64_), bits6);
    bits6 = RShift32((bits24 & (jint) 0x0003F000), 12);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(ComItextpdfXmpImplBase64_base64_, bits6);
    bits6 = RShift32((bits24 & (jint) 0x00000FC0), 6);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(ComItextpdfXmpImplBase64_base64_, bits6);
    *IOSByteArray_GetRef(dst, didx++) = (jbyte) '=';
  }
  else if (src->size_ - sidx == 1) {
    
#line 174
    bits24 = LShift32((IOSByteArray_Get(src, sidx) & (jint) 0xFF), 16);
    bits6 = RShift32((bits24 & (jint) 0x00FC0000), 18);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(nil_chk(ComItextpdfXmpImplBase64_base64_), bits6);
    bits6 = RShift32((bits24 & (jint) 0x0003F000), 12);
    *IOSByteArray_GetRef(dst, didx++) = IOSByteArray_Get(ComItextpdfXmpImplBase64_base64_, bits6);
    *IOSByteArray_GetRef(dst, didx++) = (jbyte) '=';
    *IOSByteArray_GetRef(dst, didx++) = (jbyte) '=';
  }
  return dst;
}


#line 191
+ (NSString *)encodeWithNSString:(NSString *)src {
  return [NSString stringWithBytes:[ComItextpdfXmpImplBase64 encodeWithByteArray:[((NSString *) nil_chk(src)) getBytes]]];
}


#line 206
+ (IOSByteArray *)decodeWithByteArray:(IOSByteArray *)src {
  
#line 211
  jint sidx;
  jint srcLen = 0;
  for (sidx = 0; sidx < ((IOSByteArray *) nil_chk(src))->size_; sidx++) {
    
#line 215
    jbyte val = IOSByteArray_Get(nil_chk(ComItextpdfXmpImplBase64_ascii_), IOSByteArray_Get(src, sidx));
    if (val >= 0) {
      
#line 218
      *IOSByteArray_GetRef(src, srcLen++) = val;
    }
    else if (val == ComItextpdfXmpImplBase64_INVALID) {
      
#line 222
      @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:@"Invalid base 64 string"];
    }
  }
  
#line 229
  while (srcLen > 0 && IOSByteArray_Get(src, srcLen - 1) == ComItextpdfXmpImplBase64_EQUAL) {
    
#line 231
    srcLen--;
  }
  IOSByteArray *dst = [IOSByteArray arrayWithLength:srcLen * 3 / 4];
  
#line 238
  jint didx;
  for (sidx = 0, didx = 0; didx < dst->size_ - 2; sidx += 4, didx += 3) {
    
#line 241
    *IOSByteArray_GetRef(dst, didx) = (jbyte) (((LShift32(IOSByteArray_Get(src, sidx), 2)) & (jint) 0xFF) |
#line 242
    ((URShift32(IOSByteArray_Get(src, sidx + 1), 4)) & (jint) 0x03));
    *IOSByteArray_GetRef(dst, didx + 1) = (jbyte) (((LShift32(IOSByteArray_Get(src, sidx + 1), 4)) & (jint) 0xFF) |
#line 244
    ((URShift32(IOSByteArray_Get(src, sidx + 2), 2)) & (jint) 0x0F));
    *IOSByteArray_GetRef(dst, didx + 2) = (jbyte) (((LShift32(IOSByteArray_Get(src, sidx + 2), 6)) & (jint) 0xFF) |
#line 246
    ((IOSByteArray_Get(src, sidx + 3)) & (jint) 0x3F));
  }
  if (didx < dst->size_) {
    
#line 250
    *IOSByteArray_GetRef(dst, didx) = (jbyte) (((LShift32(IOSByteArray_Get(src, sidx), 2)) & (jint) 0xFF) |
#line 251
    ((URShift32(IOSByteArray_Get(src, sidx + 1), 4)) & (jint) 0x03));
  }
  if (++didx < dst->size_) {
    
#line 255
    *IOSByteArray_GetRef(dst, didx) = (jbyte) (((LShift32(IOSByteArray_Get(src, sidx + 1), 4)) & (jint) 0xFF) |
#line 256
    ((URShift32(IOSByteArray_Get(src, sidx + 2), 2)) & (jint) 0x0F));
  }
  return dst;
}


#line 268
+ (NSString *)decodeWithNSString:(NSString *)src {
  
#line 270
  return [NSString stringWithBytes:[ComItextpdfXmpImplBase64 decodeWithByteArray:[((NSString *) nil_chk(src)) getBytes]]];
}

- (instancetype)init {
  return [super init];
}

+ (void)initialize {
  if (self == [ComItextpdfXmpImplBase64 class]) {
    ComItextpdfXmpImplBase64_base64_ = [IOSByteArray arrayWithBytes:(jbyte[]){
#line 53
      (jbyte) 'A', (jbyte) 'B', (jbyte) 'C', (jbyte) 'D',
#line 54
      (jbyte) 'E', (jbyte) 'F', (jbyte) 'G', (jbyte) 'H',
#line 55
      (jbyte) 'I', (jbyte) 'J', (jbyte) 'K', (jbyte) 'L',
#line 56
      (jbyte) 'M', (jbyte) 'N', (jbyte) 'O', (jbyte) 'P',
#line 57
      (jbyte) 'Q', (jbyte) 'R', (jbyte) 'S', (jbyte) 'T',
#line 58
      (jbyte) 'U', (jbyte) 'V', (jbyte) 'W', (jbyte) 'X',
#line 59
      (jbyte) 'Y', (jbyte) 'Z', (jbyte) 'a', (jbyte) 'b',
#line 60
      (jbyte) 'c', (jbyte) 'd', (jbyte) 'e', (jbyte) 'f',
#line 61
      (jbyte) 'g', (jbyte) 'h', (jbyte) 'i', (jbyte) 'j',
#line 62
      (jbyte) 'k', (jbyte) 'l', (jbyte) 'm', (jbyte) 'n',
#line 63
      (jbyte) 'o', (jbyte) 'p', (jbyte) 'q', (jbyte) 'r',
#line 64
      (jbyte) 's', (jbyte) 't', (jbyte) 'u', (jbyte) 'v',
#line 65
      (jbyte) 'w', (jbyte) 'x', (jbyte) 'y', (jbyte) 'z',
#line 66
      (jbyte) '0', (jbyte) '1', (jbyte) '2', (jbyte) '3',
#line 67
      (jbyte) '4', (jbyte) '5', (jbyte) '6', (jbyte) '7',
#line 68
      (jbyte) '8', (jbyte) '9', (jbyte) '+', (jbyte) '/' } count:64];
      ComItextpdfXmpImplBase64_ascii_ = [IOSByteArray arrayWithLength:
#line 71
      255];
      {
        
#line 75
        for (jint idx = 0; idx < 255; idx++) {
          
#line 77
          *IOSByteArray_GetRef(ComItextpdfXmpImplBase64_ascii_, idx) = ComItextpdfXmpImplBase64_INVALID;
        }
        
#line 80
        for (jint idx = 0; idx < ComItextpdfXmpImplBase64_base64_->size_; idx++) {
          
#line 82
          *IOSByteArray_GetRef(ComItextpdfXmpImplBase64_ascii_, IOSByteArray_Get(ComItextpdfXmpImplBase64_base64_, idx)) = (jbyte) idx;
        }
        
#line 85
        *IOSByteArray_GetRef(ComItextpdfXmpImplBase64_ascii_, (jint) 0x09) = ComItextpdfXmpImplBase64_WHITESPACE;
        *IOSByteArray_GetRef(ComItextpdfXmpImplBase64_ascii_, (jint) 0x0A) = ComItextpdfXmpImplBase64_WHITESPACE;
        *IOSByteArray_GetRef(ComItextpdfXmpImplBase64_ascii_, (jint) 0x0D) = ComItextpdfXmpImplBase64_WHITESPACE;
        *IOSByteArray_GetRef(ComItextpdfXmpImplBase64_ascii_, (jint) 0x20) = ComItextpdfXmpImplBase64_WHITESPACE;
        
#line 91
        *IOSByteArray_GetRef(ComItextpdfXmpImplBase64_ascii_, (jint) 0x3d) = ComItextpdfXmpImplBase64_EQUAL;
      }
      ComItextpdfXmpImplBase64_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "encodeWithByteArray:", "encode", "[B", 0x19, NULL },
    { "encodeWithByteArray:withInt:", "encode", "[B", 0x19, NULL },
    { "encodeWithNSString:", "encode", "Ljava.lang.String;", 0x19, NULL },
    { "decodeWithByteArray:", "decode", "[B", 0x19, "Ljava.lang.IllegalArgumentException;" },
    { "decodeWithNSString:", "decode", "Ljava.lang.String;", 0x19, NULL },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComItextpdfXmpImplBase64_INVALID },
    { "WHITESPACE_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComItextpdfXmpImplBase64_WHITESPACE },
    { "EQUAL_", NULL, 0x1a, "B", NULL, .constantValue.asChar = ComItextpdfXmpImplBase64_EQUAL },
    { "base64_", NULL, 0xa, "[B", &ComItextpdfXmpImplBase64_base64_,  },
    { "ascii_", NULL, 0xa, "[B", &ComItextpdfXmpImplBase64_ascii_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplBase64 = { "Base64", "com.itextpdf.xmp.impl", NULL, 0x1, 6, methods, 5, fields, 0, NULL};
  return &_ComItextpdfXmpImplBase64;
}

@end
