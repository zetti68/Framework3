//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPDateTimeImpl.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPDateTimeImpl.java"

#include "IOSClass.h"
#include "com/itextpdf/xmp/XMPDateTime.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/impl/ISO8601Converter.h"
#include "com/itextpdf/xmp/impl/XMPDateTimeImpl.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Locale.h"
#include "java/util/TimeZone.h"


#line 50
@implementation ComItextpdfXmpImplXMPDateTimeImpl


#line 82
- (instancetype)init {
  if (self = [super init]) {
    year_ =
#line 53
    0;
    month_ =
#line 55
    0;
    day_ =
#line 57
    0;
    hour_ =
#line 59
    0;
    minute_ =
#line 61
    0;
    second_ =
#line 63
    0;
    timeZone_ =
#line 65
    nil;
    hasDate__ =
#line 71
    NO;
    hasTime__ =
#line 73
    NO;
    hasTimeZone__ =
#line 75
    NO;
  }
  return self;
}


#line 93
- (instancetype)initWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  if (self = [super init]) {
    year_ =
#line 53
    0;
    month_ =
#line 55
    0;
    day_ =
#line 57
    0;
    hour_ =
#line 59
    0;
    minute_ =
#line 61
    0;
    second_ =
#line 63
    0;
    timeZone_ =
#line 65
    nil;
    hasDate__ =
#line 71
    NO;
    hasTime__ =
#line 73
    NO;
    hasTimeZone__ =
#line 75
    NO;
    
#line 96
    JavaUtilDate *date = [((JavaUtilCalendar *) nil_chk(calendar)) getTime];
    
#line 97
    JavaUtilTimeZone *zone = [calendar getTimeZone];
    
#line 101
    JavaUtilGregorianCalendar *intCalendar =
#line 102
    (JavaUtilGregorianCalendar *) check_class_cast([JavaUtilCalendar getInstanceWithJavaUtilLocale:JavaUtilLocale_get_US_()], [JavaUtilGregorianCalendar class]);
    
#line 103
    [((JavaUtilGregorianCalendar *) nil_chk(intCalendar)) setGregorianChangeWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:JavaLangLong_MIN_VALUE]];
    
#line 104
    [intCalendar setTimeZoneWithJavaUtilTimeZone:zone];
    
#line 105
    [intCalendar setTimeWithJavaUtilDate:date];
    
#line 107
    self->year_ = [intCalendar getWithInt:JavaUtilCalendar_YEAR];
    
#line 108
    self->month_ = [intCalendar getWithInt:JavaUtilCalendar_MONTH] + 1;
    
#line 109
    self->day_ = [intCalendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH];
    
#line 110
    self->hour_ = [intCalendar getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
    
#line 111
    self->minute_ = [intCalendar getWithInt:JavaUtilCalendar_MINUTE];
    
#line 112
    self->second_ = [intCalendar getWithInt:JavaUtilCalendar_SECOND];
    
#line 113
    self->nanoSeconds_ = [intCalendar getWithInt:JavaUtilCalendar_MILLISECOND] * 1000000;
    
#line 114
    self->timeZone_ = [intCalendar getTimeZone];
    hasDate__ = hasTime__ = hasTimeZone__ = YES;
  }
  return self;
}


#line 128
- (instancetype)initWithJavaUtilDate:(JavaUtilDate *)date
                withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  if (self = [super init]) {
    year_ =
#line 53
    0;
    month_ =
#line 55
    0;
    day_ =
#line 57
    0;
    hour_ =
#line 59
    0;
    minute_ =
#line 61
    0;
    second_ =
#line 63
    0;
    timeZone_ =
#line 65
    nil;
    hasDate__ =
#line 71
    NO;
    hasTime__ =
#line 73
    NO;
    hasTimeZone__ =
#line 75
    NO;
    
#line 130
    JavaUtilGregorianCalendar *calendar = [[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:timeZone];
    
#line 131
    [calendar setTimeWithJavaUtilDate:date];
    
#line 133
    self->year_ = [calendar getWithInt:JavaUtilCalendar_YEAR];
    
#line 134
    self->month_ = [calendar getWithInt:JavaUtilCalendar_MONTH] + 1;
    
#line 135
    self->day_ = [calendar getWithInt:JavaUtilCalendar_DAY_OF_MONTH];
    
#line 136
    self->hour_ = [calendar getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
    
#line 137
    self->minute_ = [calendar getWithInt:JavaUtilCalendar_MINUTE];
    
#line 138
    self->second_ = [calendar getWithInt:JavaUtilCalendar_SECOND];
    
#line 139
    self->nanoSeconds_ = [calendar getWithInt:JavaUtilCalendar_MILLISECOND] * 1000000;
    
#line 140
    self->timeZone_ = timeZone;
    
#line 143
    hasDate__ = hasTime__ = hasTimeZone__ = YES;
  }
  return self;
}


#line 153
- (instancetype)initWithNSString:(NSString *)strValue {
  if (self = [super init]) {
    year_ =
#line 53
    0;
    month_ =
#line 55
    0;
    day_ =
#line 57
    0;
    hour_ =
#line 59
    0;
    minute_ =
#line 61
    0;
    second_ =
#line 63
    0;
    timeZone_ =
#line 65
    nil;
    hasDate__ =
#line 71
    NO;
    hasTime__ =
#line 73
    NO;
    hasTimeZone__ =
#line 75
    NO;
    
#line 155
    (void) [ComItextpdfXmpImplISO8601Converter parseWithNSString:strValue withComItextpdfXmpXMPDateTime:self];
  }
  return self;
}


#line 162
- (jint)getYear {
  
#line 164
  return year_;
}


#line 171
- (void)setYearWithInt:(jint)year {
  
#line 173
  self->year_ = [JavaLangMath minWithInt:[JavaLangMath absWithInt:year] withInt:9999];
  self->hasDate__ = YES;
}


#line 181
- (jint)getMonth {
  
#line 183
  return month_;
}


#line 190
- (void)setMonthWithInt:(jint)month {
  
#line 192
  if (month < 1) {
    
#line 194
    self->month_ = 1;
  }
  else if (month > 12) {
    
#line 198
    self->month_ = 12;
  }
  else {
    
#line 202
    self->month_ = month;
  }
  
#line 205
  self->hasDate__ = YES;
}


#line 212
- (jint)getDay {
  
#line 214
  return day_;
}


#line 221
- (void)setDayWithInt:(jint)day {
  
#line 223
  if (day < 1) {
    
#line 225
    self->day_ = 1;
  }
  else if (day > 31) {
    
#line 229
    self->day_ = 31;
  }
  else {
    
#line 233
    self->day_ = day;
  }
  
#line 236
  self->hasDate__ = YES;
}


#line 243
- (jint)getHour {
  
#line 245
  return hour_;
}


#line 252
- (void)setHourWithInt:(jint)hour {
  
#line 254
  self->hour_ = [JavaLangMath minWithInt:[JavaLangMath absWithInt:hour] withInt:23];
  self->hasTime__ = YES;
}


#line 262
- (jint)getMinute {
  
#line 264
  return minute_;
}


#line 271
- (void)setMinuteWithInt:(jint)minute {
  
#line 273
  self->minute_ = [JavaLangMath minWithInt:[JavaLangMath absWithInt:minute] withInt:59];
  self->hasTime__ = YES;
}


#line 281
- (jint)getSecond {
  
#line 283
  return second_;
}


#line 290
- (void)setSecondWithInt:(jint)second {
  
#line 292
  self->second_ = [JavaLangMath minWithInt:[JavaLangMath absWithInt:second] withInt:59];
  self->hasTime__ = YES;
}


#line 300
- (jint)getNanoSecond {
  
#line 302
  return nanoSeconds_;
}


#line 309
- (void)setNanoSecondWithInt:(jint)nanoSecond {
  
#line 311
  self->nanoSeconds_ = nanoSecond;
  self->hasTime__ = YES;
}


#line 319
- (jint)compareToWithId:(id)dt {
  
#line 321
  jlong d = [((JavaUtilCalendar *) nil_chk([self getCalendar])) getTimeInMillis] -
#line 322
  [((JavaUtilCalendar *) nil_chk([((id<ComItextpdfXmpXMPDateTime>) nil_chk(((id<ComItextpdfXmpXMPDateTime>) check_protocol_cast(dt, @protocol(ComItextpdfXmpXMPDateTime))))) getCalendar])) getTimeInMillis];
  if (d != 0) {
    
#line 325
    return J2ObjCFpToInt([JavaLangMath signumWithFloat:d]);
  }
  else {
    
#line 330
    d = nanoSeconds_ - [((id<ComItextpdfXmpXMPDateTime>) nil_chk(((id<ComItextpdfXmpXMPDateTime>) check_protocol_cast(dt, @protocol(ComItextpdfXmpXMPDateTime))))) getNanoSecond];
    return J2ObjCFpToInt([JavaLangMath signumWithFloat:d]);
  }
}


#line 339
- (JavaUtilTimeZone *)getTimeZone {
  
#line 341
  return timeZone_;
}


#line 348
- (void)setTimeZoneWithJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone {
  
#line 350
  self->timeZone_ = timeZone;
  self->hasTime__ = YES;
  self->hasTimeZone__ = YES;
}


#line 359
- (jboolean)hasDate {
  
#line 361
  return self->hasDate__;
}


#line 368
- (jboolean)hasTime {
  
#line 370
  return self->hasTime__;
}


#line 377
- (jboolean)hasTimeZone {
  
#line 379
  return self->hasTimeZone__;
}


#line 386
- (JavaUtilCalendar *)getCalendar {
  
#line 388
  JavaUtilGregorianCalendar *calendar = (JavaUtilGregorianCalendar *) check_class_cast([JavaUtilCalendar getInstanceWithJavaUtilLocale:JavaUtilLocale_get_US_()], [JavaUtilGregorianCalendar class]);
  [((JavaUtilGregorianCalendar *) nil_chk(calendar)) setGregorianChangeWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:JavaLangLong_MIN_VALUE]];
  if (hasTimeZone__) {
    
#line 392
    [calendar setTimeZoneWithJavaUtilTimeZone:timeZone_];
  }
  [calendar setWithInt:JavaUtilCalendar_YEAR withInt:year_];
  [calendar setWithInt:JavaUtilCalendar_MONTH withInt:month_ - 1];
  [calendar setWithInt:JavaUtilCalendar_DAY_OF_MONTH withInt:day_];
  [calendar setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:hour_];
  [calendar setWithInt:JavaUtilCalendar_MINUTE withInt:minute_];
  [calendar setWithInt:JavaUtilCalendar_SECOND withInt:second_];
  [calendar setWithInt:JavaUtilCalendar_MILLISECOND withInt:nanoSeconds_ / 1000000];
  
#line 402
  return calendar;
}


#line 409
- (NSString *)getISO8601String {
  
#line 411
  return [ComItextpdfXmpImplISO8601Converter renderWithComItextpdfXmpXMPDateTime:self];
}

- (NSString *)description {
  
#line 420
  return [self getISO8601String];
}

- (void)copyAllFieldsTo:(ComItextpdfXmpImplXMPDateTimeImpl *)other {
  [super copyAllFieldsTo:other];
  other->day_ = day_;
  other->hasDate__ = hasDate__;
  other->hasTime__ = hasTime__;
  other->hasTimeZone__ = hasTimeZone__;
  other->hour_ = hour_;
  other->minute_ = minute_;
  other->month_ = month_;
  other->nanoSeconds_ = nanoSeconds_;
  other->second_ = second_;
  other->timeZone_ = timeZone_;
  other->year_ = year_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XMPDateTimeImpl", NULL, 0x1, NULL },
    { "initWithJavaUtilCalendar:", "XMPDateTimeImpl", NULL, 0x1, NULL },
    { "initWithJavaUtilDate:withJavaUtilTimeZone:", "XMPDateTimeImpl", NULL, 0x1, NULL },
    { "initWithNSString:", "XMPDateTimeImpl", NULL, 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getYear", NULL, "I", 0x1, NULL },
    { "setYearWithInt:", "setYear", "V", 0x1, NULL },
    { "getMonth", NULL, "I", 0x1, NULL },
    { "setMonthWithInt:", "setMonth", "V", 0x1, NULL },
    { "getDay", NULL, "I", 0x1, NULL },
    { "setDayWithInt:", "setDay", "V", 0x1, NULL },
    { "getHour", NULL, "I", 0x1, NULL },
    { "setHourWithInt:", "setHour", "V", 0x1, NULL },
    { "getMinute", NULL, "I", 0x1, NULL },
    { "setMinuteWithInt:", "setMinute", "V", 0x1, NULL },
    { "getSecond", NULL, "I", 0x1, NULL },
    { "setSecondWithInt:", "setSecond", "V", 0x1, NULL },
    { "getNanoSecond", NULL, "I", 0x1, NULL },
    { "setNanoSecondWithInt:", "setNanoSecond", "V", 0x1, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL },
    { "getTimeZone", NULL, "Ljava.util.TimeZone;", 0x1, NULL },
    { "setTimeZoneWithJavaUtilTimeZone:", "setTimeZone", "V", 0x1, NULL },
    { "hasDate", NULL, "Z", 0x1, NULL },
    { "hasTime", NULL, "Z", 0x1, NULL },
    { "hasTimeZone", NULL, "Z", 0x1, NULL },
    { "getCalendar", NULL, "Ljava.util.Calendar;", 0x1, NULL },
    { "getISO8601String", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "year_", NULL, 0x2, "I", NULL,  },
    { "month_", NULL, 0x2, "I", NULL,  },
    { "day_", NULL, 0x2, "I", NULL,  },
    { "hour_", NULL, 0x2, "I", NULL,  },
    { "minute_", NULL, 0x2, "I", NULL,  },
    { "second_", NULL, 0x2, "I", NULL,  },
    { "timeZone_", NULL, 0x2, "Ljava.util.TimeZone;", NULL,  },
    { "nanoSeconds_", NULL, 0x2, "I", NULL,  },
    { "hasDate__", "hasDate", 0x2, "Z", NULL,  },
    { "hasTime__", "hasTime", 0x2, "Z", NULL,  },
    { "hasTimeZone__", "hasTimeZone", 0x2, "Z", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplXMPDateTimeImpl = { "XMPDateTimeImpl", "com.itextpdf.xmp.impl", NULL, 0x1, 27, methods, 11, fields, 0, NULL};
  return &_ComItextpdfXmpImplXMPDateTimeImpl;
}

@end
