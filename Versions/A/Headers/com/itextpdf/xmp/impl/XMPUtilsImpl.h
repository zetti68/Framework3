//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPUtilsImpl.java
//

#ifndef _ComItextpdfXmpImplXMPUtilsImpl_H_
#define _ComItextpdfXmpImplXMPUtilsImpl_H_

@class ComItextpdfXmpImplXMPMetaImpl;
@class ComItextpdfXmpImplXMPNode;
@class ComItextpdfXmpOptionsPropertyOptions;
@protocol ComItextpdfXmpXMPMeta;

#import "JreEmulation.h"
#include "com/itextpdf/xmp/XMPConst.h"

#define ComItextpdfXmpImplXMPUtilsImpl_UCK_COMMA 2
#define ComItextpdfXmpImplXMPUtilsImpl_UCK_CONTROL 5
#define ComItextpdfXmpImplXMPUtilsImpl_UCK_NORMAL 0
#define ComItextpdfXmpImplXMPUtilsImpl_UCK_QUOTE 4
#define ComItextpdfXmpImplXMPUtilsImpl_UCK_SEMICOLON 3
#define ComItextpdfXmpImplXMPUtilsImpl_UCK_SPACE 1

@interface ComItextpdfXmpImplXMPUtilsImpl : NSObject < ComItextpdfXmpXMPConst > {
}

- (instancetype)init;

+ (NSString *)catenateArrayItemsWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)xmp
                                             withNSString:(NSString *)schemaNS
                                             withNSString:(NSString *)arrayName
                                             withNSString:(NSString *)separator
                                             withNSString:(NSString *)quotes
                                              withBoolean:(jboolean)allowCommas;

+ (void)separateArrayItemsWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)xmp
                                       withNSString:(NSString *)schemaNS
                                       withNSString:(NSString *)arrayName
                                       withNSString:(NSString *)catedStr
           withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)arrayOptions
                                        withBoolean:(jboolean)preserveCommas;

+ (ComItextpdfXmpImplXMPNode *)separateFindCreateArrayWithNSString:(NSString *)schemaNS
                                                      withNSString:(NSString *)arrayName
                          withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)arrayOptions
                                 withComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp;

+ (void)removePropertiesWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)xmp
                                     withNSString:(NSString *)schemaNS
                                     withNSString:(NSString *)propName
                                      withBoolean:(jboolean)doAllProperties
                                      withBoolean:(jboolean)includeAliases;

+ (void)appendPropertiesWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)source
                        withComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)destination
                                      withBoolean:(jboolean)doAllProperties
                                      withBoolean:(jboolean)replaceOldValues
                                      withBoolean:(jboolean)deleteEmptyValues;

+ (jboolean)removeSchemaChildrenWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)schemaNode
                                                  withBoolean:(jboolean)doAllProperties;

+ (void)appendSubtreeWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)destXMP
                         withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)sourceNode
                         withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)destParent
                                           withBoolean:(jboolean)replaceOldValues
                                           withBoolean:(jboolean)deleteEmptyValues;

+ (jboolean)itemValuesMatchWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)leftNode
                           withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)rightNode;

+ (void)checkSeparatorWithNSString:(NSString *)separator;

+ (jchar)checkQuotesWithNSString:(NSString *)quotes
                        withChar:(jchar)openQuote;

+ (jint)classifyCharacterWithChar:(jchar)ch;

+ (jchar)getClosingQuoteWithChar:(jchar)openQuote;

+ (NSString *)applyQuotesWithNSString:(NSString *)item
                             withChar:(jchar)openQuote
                             withChar:(jchar)closeQuote
                          withBoolean:(jboolean)allowCommas;

+ (jboolean)isSurroundingQuoteWithChar:(jchar)ch
                              withChar:(jchar)openQuote
                              withChar:(jchar)closeQuote;

+ (jboolean)isClosingingQuoteWithChar:(jchar)ch
                             withChar:(jchar)openQuote
                             withChar:(jchar)closeQuote;

@end

__attribute__((always_inline)) inline void ComItextpdfXmpImplXMPUtilsImpl_init() {}

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, UCK_NORMAL, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, UCK_SPACE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, UCK_COMMA, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, UCK_SEMICOLON, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, UCK_QUOTE, jint)

J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, UCK_CONTROL, jint)

FOUNDATION_EXPORT NSString *ComItextpdfXmpImplXMPUtilsImpl_SPACES_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, SPACES_, NSString *)

FOUNDATION_EXPORT NSString *ComItextpdfXmpImplXMPUtilsImpl_COMMAS_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, COMMAS_, NSString *)

FOUNDATION_EXPORT NSString *ComItextpdfXmpImplXMPUtilsImpl_SEMICOLA_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, SEMICOLA_, NSString *)

FOUNDATION_EXPORT NSString *ComItextpdfXmpImplXMPUtilsImpl_QUOTES_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, QUOTES_, NSString *)

FOUNDATION_EXPORT NSString *ComItextpdfXmpImplXMPUtilsImpl_CONTROLS_;
J2OBJC_STATIC_FIELD_GETTER(ComItextpdfXmpImplXMPUtilsImpl, CONTROLS_, NSString *)

#endif // _ComItextpdfXmpImplXMPUtilsImpl_H_
