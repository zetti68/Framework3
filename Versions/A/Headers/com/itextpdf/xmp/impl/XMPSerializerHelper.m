//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPSerializerHelper.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPSerializerHelper.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/impl/XMPMetaImpl.h"
#include "com/itextpdf/xmp/impl/XMPSerializerHelper.h"
#include "com/itextpdf/xmp/impl/XMPSerializerRDF.h"
#include "com/itextpdf/xmp/options/SerializeOptions.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"


#line 47
@implementation ComItextpdfXmpImplXMPSerializerHelper


#line 59
+ (void)serializeWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                            withJavaIoOutputStream:(JavaIoOutputStream *)outArg
         withComItextpdfXmpOptionsSerializeOptions:(ComItextpdfXmpOptionsSerializeOptions *)options {
  
#line 63
  options = options != nil ? options : [[ComItextpdfXmpOptionsSerializeOptions alloc] init];
  
#line 66
  if ([options getSort]) {
    
#line 68
    [((ComItextpdfXmpImplXMPMetaImpl *) nil_chk(xmp)) sort];
  }
  [((ComItextpdfXmpImplXMPSerializerRDF *) [[ComItextpdfXmpImplXMPSerializerRDF alloc] init]) serializeWithComItextpdfXmpXMPMeta:xmp withJavaIoOutputStream:outArg withComItextpdfXmpOptionsSerializeOptions:options];
}


#line 85
+ (NSString *)serializeToStringWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                       withComItextpdfXmpOptionsSerializeOptions:(ComItextpdfXmpOptionsSerializeOptions *)options {
  
#line 89
  options = options != nil ? options : [[ComItextpdfXmpOptionsSerializeOptions alloc] init];
  (void) [options setEncodeUTF16BEWithBoolean:YES];
  
#line 92
  JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] initWithInt:2048];
  [ComItextpdfXmpImplXMPSerializerHelper serializeWithComItextpdfXmpImplXMPMetaImpl:xmp withJavaIoOutputStream:out withComItextpdfXmpOptionsSerializeOptions:options];
  
#line 95
  @try {
    
#line 97
    return [out toStringWithNSString:[options getEncoding]];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    
#line 103
    return [out description];
  }
}


#line 116
+ (IOSByteArray *)serializeToBufferWithComItextpdfXmpImplXMPMetaImpl:(ComItextpdfXmpImplXMPMetaImpl *)xmp
                           withComItextpdfXmpOptionsSerializeOptions:(ComItextpdfXmpOptionsSerializeOptions *)options {
  
#line 119
  JavaIoByteArrayOutputStream *out = [[JavaIoByteArrayOutputStream alloc] initWithInt:2048];
  [ComItextpdfXmpImplXMPSerializerHelper serializeWithComItextpdfXmpImplXMPMetaImpl:xmp withJavaIoOutputStream:out withComItextpdfXmpOptionsSerializeOptions:options];
  return [out toByteArray];
}

- (instancetype)init {
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "serializeWithComItextpdfXmpImplXMPMetaImpl:withJavaIoOutputStream:withComItextpdfXmpOptionsSerializeOptions:", "serialize", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "serializeToStringWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpOptionsSerializeOptions:", "serializeToString", "Ljava.lang.String;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "serializeToBufferWithComItextpdfXmpImplXMPMetaImpl:withComItextpdfXmpOptionsSerializeOptions:", "serializeToBuffer", "[B", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplXMPSerializerHelper = { "XMPSerializerHelper", "com.itextpdf.xmp.impl", NULL, 0x1, 4, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfXmpImplXMPSerializerHelper;
}

@end
