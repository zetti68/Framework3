//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPSerializerRDF.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPSerializerRDF.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPMeta.h"
#include "com/itextpdf/xmp/XMPMetaFactory.h"
#include "com/itextpdf/xmp/XMPSchemaRegistry.h"
#include "com/itextpdf/xmp/XMPVersionInfo.h"
#include "com/itextpdf/xmp/impl/CountOutputStream.h"
#include "com/itextpdf/xmp/impl/QName.h"
#include "com/itextpdf/xmp/impl/Utils.h"
#include "com/itextpdf/xmp/impl/XMPMetaImpl.h"
#include "com/itextpdf/xmp/impl/XMPNode.h"
#include "com/itextpdf/xmp/impl/XMPNodeUtils.h"
#include "com/itextpdf/xmp/impl/XMPSerializerRDF.h"
#include "com/itextpdf/xmp/options/PropertyOptions.h"
#include "com/itextpdf/xmp/options/SerializeOptions.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/lang/Boolean.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

BOOL ComItextpdfXmpImplXMPSerializerRDF_initialized = NO;


#line 57
@implementation ComItextpdfXmpImplXMPSerializerRDF

NSString * ComItextpdfXmpImplXMPSerializerRDF_PACKET_HEADER_ = 
#line 63
@"<?xpacket begin=\"\ufeff\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>";
NSString * ComItextpdfXmpImplXMPSerializerRDF_PACKET_TRAILER_ = 
#line 65
@"<?xpacket end=\"";
NSString * ComItextpdfXmpImplXMPSerializerRDF_PACKET_TRAILER2_ = 
#line 67
@"\"?>";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_XMPMETA_START_ = 
#line 70
@"<x:xmpmeta xmlns:x=\"adobe:ns:meta/\" x:xmptk=\"";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_XMPMETA_END_ = 
#line 72
@"</x:xmpmeta>";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_RDF_START_ = 
#line 75
@"<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_RDF_END_ = @"</rdf:RDF>";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_START_ = 
#line 80
@"<rdf:Description rdf:about=";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_END_ = 
#line 82
@"</rdf:Description>";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_START_ = @"<rdf:Description";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_END_ = 
#line 86
@"</rdf:Description>";
NSString * ComItextpdfXmpImplXMPSerializerRDF_RDF_EMPTY_STRUCT_ = @"<rdf:Description/>";
id<JavaUtilSet> ComItextpdfXmpImplXMPSerializerRDF_RDF_ATTR_QUALIFIER_;


#line 119
- (void)serializeWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)xmp
                    withJavaIoOutputStream:(JavaIoOutputStream *)outArg
 withComItextpdfXmpOptionsSerializeOptions:(ComItextpdfXmpOptionsSerializeOptions *)options {
  
#line 122
  @try {
    
#line 124
    outputStream_ = [[ComItextpdfXmpImplCountOutputStream alloc] initWithJavaIoOutputStream:outArg];
    writer_ = [[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:outputStream_ withNSString:[((ComItextpdfXmpOptionsSerializeOptions *) nil_chk(options)) getEncoding]];
    
#line 127
    self->xmp_ = (ComItextpdfXmpImplXMPMetaImpl *) check_class_cast(xmp, [ComItextpdfXmpImplXMPMetaImpl class]);
    self->options_ = options;
    self->padding_ = [options getPadding];
    
#line 131
    writer_ = [[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:outputStream_ withNSString:[options getEncoding]];
    
#line 133
    [self checkOptionsConsistence];
    
#line 137
    NSString *tailStr = [self serializeAsRDF];
    [writer_ flush];
    
#line 141
    [self addPaddingWithInt:((jint) [((NSString *) nil_chk(tailStr)) length])];
    
#line 144
    [self writeWithNSString:tailStr];
    [writer_ flush];
    
#line 147
    [outputStream_ close];
  }
  @catch (JavaIoIOException *e) {
    
#line 151
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Error writing to the OutputStream" withInt:ComItextpdfXmpXMPError_UNKNOWN];
  }
}

- (void)addPaddingWithInt:(jint)tailLength {
  
#line 164
  if ([((ComItextpdfXmpOptionsSerializeOptions *) nil_chk(options_)) getExactPacketLength]) {
    
#line 167
    jint minSize = [((ComItextpdfXmpImplCountOutputStream *) nil_chk(outputStream_)) getBytesWritten] + tailLength * unicodeSize_;
    if (minSize > padding_) {
      
#line 170
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Can't fit into specified packet size" withInt:
#line 171
      ComItextpdfXmpXMPError_BADSERIALIZE];
    }
    padding_ -= minSize;
  }
  
#line 177
  padding_ /= unicodeSize_;
  
#line 179
  jint newlineLen = ((jint) [((NSString *) nil_chk([options_ getNewline])) length]);
  if (padding_ >= newlineLen) {
    
#line 182
    padding_ -= newlineLen;
    while (padding_ >= (100 + newlineLen)) {
      
#line 185
      [self writeCharsWithInt:100 withChar:' '];
      [self writeNewline];
      padding_ -= (100 + newlineLen);
    }
    [self writeCharsWithInt:padding_ withChar:' '];
    [self writeNewline];
  }
  else {
    
#line 194
    [self writeCharsWithInt:padding_ withChar:' '];
  }
}


#line 203
- (void)checkOptionsConsistence {
  if ([((ComItextpdfXmpOptionsSerializeOptions *) nil_chk(options_)) getEncodeUTF16BE] | [options_ getEncodeUTF16LE]) {
    
#line 207
    unicodeSize_ = 2;
  }
  
#line 210
  if ([options_ getExactPacketLength]) {
    
#line 212
    if ([options_ getOmitPacketWrapper] | [options_ getIncludeThumbnailPad]) {
      
#line 214
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Inconsistent options for exact size serialize" withInt:
#line 215
      ComItextpdfXmpXMPError_BADOPTIONS];
    }
    if (([options_ getPadding] & (unicodeSize_ - 1)) != 0) {
      
#line 219
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Exact size must be a multiple of the Unicode element" withInt:
#line 220
      ComItextpdfXmpXMPError_BADOPTIONS];
    }
  }
  else if ([options_ getReadOnlyPacket]) {
    
#line 225
    if ([options_ getOmitPacketWrapper] | [options_ getIncludeThumbnailPad]) {
      
#line 227
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Inconsistent options for read-only packet" withInt:
#line 228
      ComItextpdfXmpXMPError_BADOPTIONS];
    }
    padding_ = 0;
  }
  else if ([options_ getOmitPacketWrapper]) {
    
#line 234
    if ([options_ getIncludeThumbnailPad]) {
      
#line 236
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Inconsistent options for non-packet serialize" withInt:
#line 237
      ComItextpdfXmpXMPError_BADOPTIONS];
    }
    padding_ = 0;
  }
  else {
    
#line 243
    if (padding_ == 0) {
      
#line 245
      padding_ = ComItextpdfXmpImplXMPSerializerRDF_DEFAULT_PAD * unicodeSize_;
    }
    
#line 248
    if ([options_ getIncludeThumbnailPad]) {
      
#line 250
      if (![((ComItextpdfXmpImplXMPMetaImpl *) nil_chk(xmp_)) doesPropertyExistWithNSString:ComItextpdfXmpXMPConst_get_NS_XMP_() withNSString:@"Thumbnails"]) {
        
#line 252
        padding_ += 10000 * unicodeSize_;
      }
    }
  }
}


#line 265
- (NSString *)serializeAsRDF {
  
#line 267
  jint level = 0;
  
#line 270
  if (![((ComItextpdfXmpOptionsSerializeOptions *) nil_chk(options_)) getOmitPacketWrapper]) {
    
#line 272
    [self writeIndentWithInt:level];
    [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_PACKET_HEADER_];
    [self writeNewline];
  }
  
#line 278
  if (![options_ getOmitXmpMetaElement]) {
    
#line 280
    [self writeIndentWithInt:level];
    [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_XMPMETA_START_];
    
#line 283
    if (![options_ getOmitVersionAttribute]) {
      
#line 285
      [self writeWithNSString:[((id<ComItextpdfXmpXMPVersionInfo>) nil_chk([ComItextpdfXmpXMPMetaFactory getVersionInfo])) getMessage]];
    }
    [self writeWithNSString:@"\">"];
    [self writeNewline];
    level++;
  }
  
#line 293
  [self writeIndentWithInt:level];
  [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_RDF_START_];
  [self writeNewline];
  
#line 298
  if ([options_ getUseCanonicalFormat]) {
    
#line 300
    [self serializeCanonicalRDFSchemasWithInt:level];
  }
  else {
    
#line 304
    [self serializeCompactRDFSchemasWithInt:level];
  }
  
#line 308
  [self writeIndentWithInt:level];
  [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_RDF_END_];
  [self writeNewline];
  
#line 313
  if (![options_ getOmitXmpMetaElement]) {
    
#line 315
    level--;
    [self writeIndentWithInt:level];
    [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_XMPMETA_END_];
    [self writeNewline];
  }
  
#line 321
  NSString *tailStr = @"";
  if (![options_ getOmitPacketWrapper]) {
    
#line 324
    for (level = [options_ getBaseIndent]; level > 0; level--) {
      
#line 326
      tailStr = JreStrcat("$$", tailStr, [options_ getIndent]);
    }
    
#line 329
    tailStr = JreStrcat("$$", tailStr, ComItextpdfXmpImplXMPSerializerRDF_PACKET_TRAILER_);
    tailStr = JreStrcat("$C", tailStr, [options_ getReadOnlyPacket] ? 'r' : 'w');
    tailStr = JreStrcat("$$", tailStr, ComItextpdfXmpImplXMPSerializerRDF_PACKET_TRAILER2_);
  }
  
#line 334
  return tailStr;
}


#line 344
- (void)serializeCanonicalRDFSchemasWithInt:(jint)level {
  
#line 346
  if ([((ComItextpdfXmpImplXMPNode *) nil_chk([((ComItextpdfXmpImplXMPMetaImpl *) nil_chk(xmp_)) getRoot])) getChildrenLength] > 0) {
    
#line 348
    [self startOuterRDFDescriptionWithComItextpdfXmpImplXMPNode:[xmp_ getRoot] withInt:level];
    
#line 350
    for (id<JavaUtilIterator> it = [((ComItextpdfXmpImplXMPNode *) nil_chk([xmp_ getRoot])) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      
#line 352
      ComItextpdfXmpImplXMPNode *currSchema = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
      [self serializeCanonicalRDFSchemaWithComItextpdfXmpImplXMPNode:currSchema withInt:level];
    }
    
#line 356
    [self endOuterRDFDescriptionWithInt:level];
  }
  else {
    
#line 360
    [self writeIndentWithInt:level + 1];
    [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_START_];
    [self writeTreeName];
    [self writeWithNSString:@"/>"];
    [self writeNewline];
  }
}


#line 372
- (void)writeTreeName {
  [self writeWithInt:'"'];
  NSString *name = [((ComItextpdfXmpImplXMPNode *) nil_chk([((ComItextpdfXmpImplXMPMetaImpl *) nil_chk(xmp_)) getRoot])) getName];
  if (name != nil) {
    
#line 378
    [self appendNodeValueWithNSString:name withBoolean:YES];
  }
  [self writeWithInt:'"'];
}


#line 390
- (void)serializeCompactRDFSchemasWithInt:(jint)level {
  
#line 393
  [self writeIndentWithInt:level + 1];
  [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_START_];
  [self writeTreeName];
  
#line 398
  id<JavaUtilSet> usedPrefixes = [[JavaUtilHashSet alloc] init];
  [usedPrefixes addWithId:@"xml"];
  [usedPrefixes addWithId:@"rdf"];
  
#line 402
  for (id<JavaUtilIterator> it = [((ComItextpdfXmpImplXMPNode *) nil_chk([((ComItextpdfXmpImplXMPMetaImpl *) nil_chk(xmp_)) getRoot])) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 404
    ComItextpdfXmpImplXMPNode *schema = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    [self declareUsedNamespacesWithComItextpdfXmpImplXMPNode:schema withJavaUtilSet:usedPrefixes withInt:level + 3];
  }
  
#line 409
  jboolean allAreAttrs = YES;
  for (id<JavaUtilIterator> it = [((ComItextpdfXmpImplXMPNode *) nil_chk([xmp_ getRoot])) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 412
    ComItextpdfXmpImplXMPNode *schema = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    allAreAttrs &= [self serializeCompactRDFAttrPropsWithComItextpdfXmpImplXMPNode:schema withInt:level + 2];
  }
  
#line 416
  if (!allAreAttrs) {
    
#line 418
    [self writeWithInt:'>'];
    [self writeNewline];
  }
  else {
    
#line 423
    [self writeWithNSString:@"/>"];
    [self writeNewline];
    return;
  }
  
#line 429
  for (id<JavaUtilIterator> it = [((ComItextpdfXmpImplXMPNode *) nil_chk([xmp_ getRoot])) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 431
    ComItextpdfXmpImplXMPNode *schema = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    [self serializeCompactRDFElementPropsWithComItextpdfXmpImplXMPNode:schema withInt:level + 2];
  }
  
#line 436
  [self writeIndentWithInt:level + 1];
  [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_END_];
  [self writeNewline];
}


#line 452
- (jboolean)serializeCompactRDFAttrPropsWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)parentNode
                                                              withInt:(jint)indent {
  
#line 454
  jboolean allAreAttrs = YES;
  
#line 456
  for (id<JavaUtilIterator> it = [((ComItextpdfXmpImplXMPNode *) nil_chk(parentNode)) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 458
    ComItextpdfXmpImplXMPNode *prop = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    
#line 460
    if ([self canBeRDFAttrPropWithComItextpdfXmpImplXMPNode:prop]) {
      
#line 462
      [self writeNewline];
      [self writeIndentWithInt:indent];
      [self writeWithNSString:[((ComItextpdfXmpImplXMPNode *) nil_chk(prop)) getName]];
      [self writeWithNSString:@"=\""];
      [self appendNodeValueWithNSString:[prop getValue] withBoolean:YES];
      [self writeWithInt:'"'];
    }
    else {
      
#line 471
      allAreAttrs = NO;
    }
  }
  return allAreAttrs;
}


#line 527
- (void)serializeCompactRDFElementPropsWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)parentNode
                                                             withInt:(jint)indent {
  
#line 530
  for (id<JavaUtilIterator> it = [((ComItextpdfXmpImplXMPNode *) nil_chk(parentNode)) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 532
    ComItextpdfXmpImplXMPNode *node = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    if ([self canBeRDFAttrPropWithComItextpdfXmpImplXMPNode:node]) {
      
#line 535
      continue;
    }
    
#line 538
    jboolean emitEndTag = YES;
    jboolean indentEndTag = YES;
    
#line 544
    NSString *elemName = [((ComItextpdfXmpImplXMPNode *) nil_chk(node)) getName];
    if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_ARRAY_ITEM_NAME_())) isEqual:elemName]) {
      
#line 547
      elemName = @"rdf:li";
    }
    
#line 550
    [self writeIndentWithInt:indent];
    [self writeWithInt:'<'];
    [self writeWithNSString:elemName];
    
#line 554
    jboolean hasGeneralQualifiers = NO;
    jboolean hasRDFResourceQual = NO;
    
#line 557
    for (id<JavaUtilIterator> iq = [node iterateQualifier]; [((id<JavaUtilIterator>) nil_chk(iq)) hasNext]; ) {
      
#line 559
      ComItextpdfXmpImplXMPNode *qualifier = (ComItextpdfXmpImplXMPNode *) check_class_cast([iq next], [ComItextpdfXmpImplXMPNode class]);
      if (![((id<JavaUtilSet>) nil_chk(ComItextpdfXmpImplXMPSerializerRDF_RDF_ATTR_QUALIFIER_)) containsWithId:[((ComItextpdfXmpImplXMPNode *) nil_chk(qualifier)) getName]]) {
        
#line 562
        hasGeneralQualifiers = YES;
      }
      else {
        
#line 566
        hasRDFResourceQual = [@"rdf:resource" isEqual:[qualifier getName]];
        [self writeWithInt:' '];
        [self writeWithNSString:[qualifier getName]];
        [self writeWithNSString:@"=\""];
        [self appendNodeValueWithNSString:[qualifier getValue] withBoolean:YES];
        [self writeWithInt:'"'];
      }
    }
    
#line 577
    if (hasGeneralQualifiers) {
      
#line 579
      [self serializeCompactRDFGeneralQualifierWithInt:indent withComItextpdfXmpImplXMPNode:node];
    }
    else {
      
#line 584
      if (![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isCompositeProperty]) {
        
#line 586
        IOSObjectArray *result = [self serializeCompactRDFSimplePropWithComItextpdfXmpImplXMPNode:node];
        emitEndTag = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(nil_chk(result), 0), [JavaLangBoolean class])))) booleanValue];
        indentEndTag = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) check_class_cast(IOSObjectArray_Get(result, 1), [JavaLangBoolean class])))) booleanValue];
      }
      else if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isArray]) {
        
#line 592
        [self serializeCompactRDFArrayPropWithComItextpdfXmpImplXMPNode:node withInt:indent];
      }
      else {
        
#line 596
        emitEndTag = [self serializeCompactRDFStructPropWithComItextpdfXmpImplXMPNode:
#line 597
        node withInt:indent withBoolean:hasRDFResourceQual];
      }
    }
    
#line 603
    if (emitEndTag) {
      
#line 605
      if (indentEndTag) {
        
#line 607
        [self writeIndentWithInt:indent];
      }
      [self writeWithNSString:@"</"];
      [self writeWithNSString:elemName];
      [self writeWithInt:'>'];
      [self writeNewline];
    }
  }
}


#line 626
- (IOSObjectArray *)serializeCompactRDFSimplePropWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)node {
  
#line 629
  JavaLangBoolean *emitEndTag = JavaLangBoolean_get_TRUE__();
  JavaLangBoolean *indentEndTag = JavaLangBoolean_get_TRUE__();
  
#line 632
  if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(node)) getOptions])) isURI]) {
    
#line 634
    [self writeWithNSString:@" rdf:resource=\""];
    [self appendNodeValueWithNSString:[node getValue] withBoolean:YES];
    [self writeWithNSString:@"\"/>"];
    [self writeNewline];
    emitEndTag = JavaLangBoolean_get_FALSE__();
  }
  else if ([node getValue] == nil || ((jint) [((NSString *) nil_chk([node getValue])) length]) == 0) {
    
#line 642
    [self writeWithNSString:@"/>"];
    [self writeNewline];
    emitEndTag = JavaLangBoolean_get_FALSE__();
  }
  else {
    
#line 648
    [self writeWithInt:'>'];
    [self appendNodeValueWithNSString:[node getValue] withBoolean:NO];
    indentEndTag = JavaLangBoolean_get_FALSE__();
  }
  
#line 653
  return [IOSObjectArray arrayWithObjects:(id[]){ emitEndTag, indentEndTag } count:2 type:[IOSClass classWithClass:[NSObject class]]];
}


#line 665
- (void)serializeCompactRDFArrayPropWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)node
                                                          withInt:(jint)indent {
  
#line 669
  [self writeWithInt:'>'];
  [self writeNewline];
  [self emitRDFArrayTagWithComItextpdfXmpImplXMPNode:node withBoolean:YES withInt:indent + 1];
  
#line 673
  if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(node)) getOptions])) isArrayAltText]) {
    
#line 675
    [ComItextpdfXmpImplXMPNodeUtils normalizeLangArrayWithComItextpdfXmpImplXMPNode:node];
  }
  
#line 678
  [self serializeCompactRDFElementPropsWithComItextpdfXmpImplXMPNode:node withInt:indent + 2];
  
#line 680
  [self emitRDFArrayTagWithComItextpdfXmpImplXMPNode:node withBoolean:NO withInt:indent + 1];
}


#line 694
- (jboolean)serializeCompactRDFStructPropWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)node
                                                               withInt:(jint)indent
                                                           withBoolean:(jboolean)hasRDFResourceQual {
  
#line 698
  jboolean hasAttrFields = NO;
  jboolean hasElemFields = NO;
  jboolean emitEndTag = YES;
  
#line 702
  for (id<JavaUtilIterator> ic = [((ComItextpdfXmpImplXMPNode *) nil_chk(node)) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(ic)) hasNext]; ) {
    
#line 704
    ComItextpdfXmpImplXMPNode *field = (ComItextpdfXmpImplXMPNode *) check_class_cast([ic next], [ComItextpdfXmpImplXMPNode class]);
    if ([self canBeRDFAttrPropWithComItextpdfXmpImplXMPNode:field]) {
      
#line 707
      hasAttrFields = YES;
    }
    else {
      
#line 711
      hasElemFields = YES;
    }
    
#line 714
    if (hasAttrFields && hasElemFields) {
      
#line 716
      break;
    }
  }
  
#line 720
  if (hasRDFResourceQual && hasElemFields) {
    
#line 722
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 723
    @"Can't mix rdf:resource qualifier and element fields" withInt:
#line 724
    ComItextpdfXmpXMPError_BADRDF];
  }
  
#line 727
  if (![node hasChildren]) {
    
#line 733
    [self writeWithNSString:@" rdf:parseType=\"Resource\"/>"];
    [self writeNewline];
    emitEndTag = NO;
  }
  else
#line 738
  if (!hasElemFields) {
    
#line 742
    [self serializeCompactRDFAttrPropsWithComItextpdfXmpImplXMPNode:node withInt:indent + 1];
    [self writeWithNSString:@"/>"];
    [self writeNewline];
    emitEndTag = NO;
  }
  else
#line 748
  if (!hasAttrFields) {
    
#line 752
    [self writeWithNSString:@" rdf:parseType=\"Resource\">"];
    [self writeNewline];
    [self serializeCompactRDFElementPropsWithComItextpdfXmpImplXMPNode:node withInt:indent + 1];
  }
  else {
    
#line 760
    [self writeWithInt:'>'];
    [self writeNewline];
    [self writeIndentWithInt:indent + 1];
    [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_START_];
    [self serializeCompactRDFAttrPropsWithComItextpdfXmpImplXMPNode:node withInt:indent + 2];
    [self writeWithNSString:@">"];
    [self writeNewline];
    [self serializeCompactRDFElementPropsWithComItextpdfXmpImplXMPNode:node withInt:indent + 1];
    [self writeIndentWithInt:indent + 1];
    [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_END_];
    [self writeNewline];
  }
  return emitEndTag;
}

- (void)serializeCompactRDFGeneralQualifierWithInt:(jint)indent
                     withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)node {
  
#line 791
  [self writeWithNSString:@" rdf:parseType=\"Resource\">"];
  [self writeNewline];
  
#line 794
  [self serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:node withBoolean:NO withBoolean:YES withInt:indent + 1];
  
#line 796
  for (id<JavaUtilIterator> iq = [((ComItextpdfXmpImplXMPNode *) nil_chk(node)) iterateQualifier]; [((id<JavaUtilIterator>) nil_chk(iq)) hasNext]; ) {
    
#line 798
    ComItextpdfXmpImplXMPNode *qualifier = (ComItextpdfXmpImplXMPNode *) check_class_cast([iq next], [ComItextpdfXmpImplXMPNode class]);
    [self serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:qualifier withBoolean:NO withBoolean:NO withInt:indent + 1];
  }
}


#line 833
- (void)serializeCanonicalRDFSchemaWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)schemaNode
                                                         withInt:(jint)level {
  
#line 836
  for (id<JavaUtilIterator> it = [((ComItextpdfXmpImplXMPNode *) nil_chk(schemaNode)) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 838
    ComItextpdfXmpImplXMPNode *propNode = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    [self serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:propNode withBoolean:[((ComItextpdfXmpOptionsSerializeOptions *) nil_chk(options_)) getUseCanonicalFormat] withBoolean:NO withInt:level + 2];
  }
}


#line 852
- (void)declareUsedNamespacesWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)node
                                           withJavaUtilSet:(id<JavaUtilSet>)usedPrefixes
                                                   withInt:(jint)indent {
  
#line 855
  if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(node)) getOptions])) isSchemaNode]) {
    
#line 858
    NSString *prefix = [((NSString *) nil_chk([node getValue])) substring:0 endIndex:((jint) [((NSString *) nil_chk([node getValue])) length]) - 1];
    [self declareNamespaceWithNSString:prefix withNSString:[node getName] withJavaUtilSet:usedPrefixes withInt:indent];
  }
  else if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isStruct]) {
    
#line 863
    for (id<JavaUtilIterator> it = [node iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      
#line 865
      ComItextpdfXmpImplXMPNode *field = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
      [self declareNamespaceWithNSString:[((ComItextpdfXmpImplXMPNode *) nil_chk(field)) getName] withNSString:nil withJavaUtilSet:usedPrefixes withInt:indent];
    }
  }
  
#line 870
  for (id<JavaUtilIterator> it = [node iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 872
    ComItextpdfXmpImplXMPNode *child = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    [self declareUsedNamespacesWithComItextpdfXmpImplXMPNode:child withJavaUtilSet:usedPrefixes withInt:indent];
  }
  
#line 876
  for (id<JavaUtilIterator> it = [node iterateQualifier]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 878
    ComItextpdfXmpImplXMPNode *qualifier = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    [self declareNamespaceWithNSString:[((ComItextpdfXmpImplXMPNode *) nil_chk(qualifier)) getName] withNSString:nil withJavaUtilSet:usedPrefixes withInt:indent];
    [self declareUsedNamespacesWithComItextpdfXmpImplXMPNode:qualifier withJavaUtilSet:usedPrefixes withInt:indent];
  }
}


#line 893
- (void)declareNamespaceWithNSString:(NSString *)prefix
                        withNSString:(NSString *)namespace_
                     withJavaUtilSet:(id<JavaUtilSet>)usedPrefixes
                             withInt:(jint)indent {
  
#line 896
  if (namespace_ == nil) {
    
#line 899
    ComItextpdfXmpImplQName *qname = [[ComItextpdfXmpImplQName alloc] initWithNSString:prefix];
    if ([qname hasPrefix]) {
      
#line 902
      prefix = [qname getPrefix];
      
#line 904
      namespace_ = [((id<ComItextpdfXmpXMPSchemaRegistry>) nil_chk([ComItextpdfXmpXMPMetaFactory getSchemaRegistry])) getNamespaceURIWithNSString:JreStrcat("$C", prefix, ':')];
      
#line 906
      [self declareNamespaceWithNSString:prefix withNSString:namespace_ withJavaUtilSet:usedPrefixes withInt:indent];
    }
    else {
      
#line 910
      return;
    }
  }
  
#line 914
  if (![((id<JavaUtilSet>) nil_chk(usedPrefixes)) containsWithId:prefix]) {
    
#line 916
    [self writeNewline];
    [self writeIndentWithInt:indent];
    [self writeWithNSString:@"xmlns:"];
    [self writeWithNSString:prefix];
    [self writeWithNSString:@"=\""];
    [self writeWithNSString:namespace_];
    [self writeWithInt:'"'];
    [usedPrefixes addWithId:prefix];
  }
}


#line 934
- (void)startOuterRDFDescriptionWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)schemaNode
                                                      withInt:(jint)level {
  [self writeIndentWithInt:level + 1];
  [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_START_];
  [self writeTreeName];
  
#line 940
  id<JavaUtilSet> usedPrefixes = [[JavaUtilHashSet alloc] init];
  [usedPrefixes addWithId:@"xml"];
  [usedPrefixes addWithId:@"rdf"];
  
#line 944
  [self declareUsedNamespacesWithComItextpdfXmpImplXMPNode:schemaNode withJavaUtilSet:usedPrefixes withInt:level + 3];
  
#line 946
  [self writeWithInt:'>'];
  [self writeNewline];
}


#line 954
- (void)endOuterRDFDescriptionWithInt:(jint)level {
  
#line 956
  [self writeIndentWithInt:level + 1];
  [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_END_];
  [self writeNewline];
}


#line 1011
- (void)serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)node
                                                       withBoolean:(jboolean)useCanonicalRDF
                                                       withBoolean:(jboolean)emitAsRDFValue
                                                           withInt:(jint)indent {
  
#line 1015
  jboolean emitEndTag = YES;
  jboolean indentEndTag = YES;
  
#line 1021
  NSString *elemName = [((ComItextpdfXmpImplXMPNode *) nil_chk(node)) getName];
  if (emitAsRDFValue) {
    
#line 1024
    elemName = @"rdf:value";
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_ARRAY_ITEM_NAME_())) isEqual:elemName]) {
    
#line 1028
    elemName = @"rdf:li";
  }
  
#line 1031
  [self writeIndentWithInt:indent];
  [self writeWithInt:'<'];
  [self writeWithNSString:elemName];
  
#line 1035
  jboolean hasGeneralQualifiers = NO;
  jboolean hasRDFResourceQual = NO;
  
#line 1038
  for (id<JavaUtilIterator> it = [node iterateQualifier]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 1040
    ComItextpdfXmpImplXMPNode *qualifier = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    if (![((id<JavaUtilSet>) nil_chk(ComItextpdfXmpImplXMPSerializerRDF_RDF_ATTR_QUALIFIER_)) containsWithId:[((ComItextpdfXmpImplXMPNode *) nil_chk(qualifier)) getName]]) {
      
#line 1043
      hasGeneralQualifiers = YES;
    }
    else {
      
#line 1047
      hasRDFResourceQual = [@"rdf:resource" isEqual:[qualifier getName]];
      if (!emitAsRDFValue) {
        
#line 1050
        [self writeWithInt:' '];
        [self writeWithNSString:[qualifier getName]];
        [self writeWithNSString:@"=\""];
        [self appendNodeValueWithNSString:[qualifier getValue] withBoolean:YES];
        [self writeWithInt:'"'];
      }
    }
  }
  
#line 1061
  if (hasGeneralQualifiers && !emitAsRDFValue) {
    
#line 1068
    if (hasRDFResourceQual) {
      
#line 1070
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Can't mix rdf:resource and general qualifiers" withInt:
#line 1071
      ComItextpdfXmpXMPError_BADRDF];
    }
    
#line 1076
    if (useCanonicalRDF) {
      
#line 1078
      [self writeWithNSString:@">"];
      [self writeNewline];
      
#line 1081
      indent++;
      [self writeIndentWithInt:indent];
      [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_START_];
      [self writeWithNSString:@">"];
    }
    else {
      
#line 1088
      [self writeWithNSString:@" rdf:parseType=\"Resource\">"];
    }
    [self writeNewline];
    
#line 1092
    [self serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:node withBoolean:useCanonicalRDF withBoolean:YES withInt:indent + 1];
    
#line 1094
    for (id<JavaUtilIterator> it = [node iterateQualifier]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      
#line 1096
      ComItextpdfXmpImplXMPNode *qualifier = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
      if (![((id<JavaUtilSet>) nil_chk(ComItextpdfXmpImplXMPSerializerRDF_RDF_ATTR_QUALIFIER_)) containsWithId:[((ComItextpdfXmpImplXMPNode *) nil_chk(qualifier)) getName]]) {
        
#line 1099
        [self serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:qualifier withBoolean:useCanonicalRDF withBoolean:NO withInt:indent + 1];
      }
    }
    
#line 1103
    if (useCanonicalRDF) {
      
#line 1105
      [self writeIndentWithInt:indent];
      [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_END_];
      [self writeNewline];
      indent--;
    }
  }
  else {
    
#line 1115
    if (![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isCompositeProperty]) {
      
#line 1119
      if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isURI]) {
        
#line 1121
        [self writeWithNSString:@" rdf:resource=\""];
        [self appendNodeValueWithNSString:[node getValue] withBoolean:YES];
        [self writeWithNSString:@"\"/>"];
        [self writeNewline];
        emitEndTag = NO;
      }
      else if ([node getValue] == nil || [@"" isEqual:[node getValue]]) {
        
#line 1129
        [self writeWithNSString:@"/>"];
        [self writeNewline];
        emitEndTag = NO;
      }
      else {
        
#line 1135
        [self writeWithInt:'>'];
        [self appendNodeValueWithNSString:[node getValue] withBoolean:NO];
        indentEndTag = NO;
      }
    }
    else if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isArray]) {
      
#line 1143
      [self writeWithInt:'>'];
      [self writeNewline];
      [self emitRDFArrayTagWithComItextpdfXmpImplXMPNode:node withBoolean:YES withInt:indent + 1];
      if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isArrayAltText]) {
        
#line 1148
        [ComItextpdfXmpImplXMPNodeUtils normalizeLangArrayWithComItextpdfXmpImplXMPNode:node];
      }
      for (id<JavaUtilIterator> it = [node iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        
#line 1152
        ComItextpdfXmpImplXMPNode *child = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
        [self serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:child withBoolean:useCanonicalRDF withBoolean:NO withInt:indent + 2];
      }
      [self emitRDFArrayTagWithComItextpdfXmpImplXMPNode:node withBoolean:NO withInt:indent + 1];
    }
    else
#line 1159
    if (!hasRDFResourceQual) {
      
#line 1162
      if (![node hasChildren]) {
        
#line 1166
        if (useCanonicalRDF) {
          
#line 1168
          [self writeWithNSString:@">"];
          [self writeNewline];
          [self writeIndentWithInt:indent + 1];
          [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_EMPTY_STRUCT_];
        }
        else {
          
#line 1175
          [self writeWithNSString:@" rdf:parseType=\"Resource\"/>"];
          emitEndTag = NO;
        }
        [self writeNewline];
      }
      else {
        
#line 1184
        if (useCanonicalRDF) {
          
#line 1186
          [self writeWithNSString:@">"];
          [self writeNewline];
          indent++;
          [self writeIndentWithInt:indent];
          [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_START_];
          [self writeWithNSString:@">"];
        }
        else {
          
#line 1195
          [self writeWithNSString:@" rdf:parseType=\"Resource\">"];
        }
        [self writeNewline];
        
#line 1199
        for (id<JavaUtilIterator> it = [node iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
          
#line 1201
          ComItextpdfXmpImplXMPNode *child = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
          [self serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:child withBoolean:useCanonicalRDF withBoolean:NO withInt:indent + 1];
        }
        
#line 1205
        if (useCanonicalRDF) {
          
#line 1207
          [self writeIndentWithInt:indent];
          [self writeWithNSString:ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_END_];
          [self writeNewline];
          indent--;
        }
      }
    }
    else {
      
#line 1218
      for (id<JavaUtilIterator> it = [node iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        
#line 1220
        ComItextpdfXmpImplXMPNode *child = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
        if (![self canBeRDFAttrPropWithComItextpdfXmpImplXMPNode:child]) {
          
#line 1223
          @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Can't mix rdf:resource and complex fields" withInt:
#line 1224
          ComItextpdfXmpXMPError_BADRDF];
        }
        [self writeNewline];
        [self writeIndentWithInt:indent + 1];
        [self writeWithInt:' '];
        [self writeWithNSString:[((ComItextpdfXmpImplXMPNode *) nil_chk(child)) getName]];
        [self writeWithNSString:@"=\""];
        [self appendNodeValueWithNSString:[child getValue] withBoolean:YES];
        [self writeWithInt:'"'];
      }
      [self writeWithNSString:@"/>"];
      [self writeNewline];
      emitEndTag = NO;
    }
  }
  
#line 1241
  if (emitEndTag) {
    
#line 1243
    if (indentEndTag) {
      
#line 1245
      [self writeIndentWithInt:indent];
    }
    [self writeWithNSString:@"</"];
    [self writeWithNSString:elemName];
    [self writeWithInt:'>'];
    [self writeNewline];
  }
}


#line 1263
- (void)emitRDFArrayTagWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)arrayNode
                                         withBoolean:(jboolean)isStartTag
                                             withInt:(jint)indent {
  
#line 1266
  if (isStartTag || [((ComItextpdfXmpImplXMPNode *) nil_chk(arrayNode)) hasChildren]) {
    
#line 1268
    [self writeIndentWithInt:indent];
    [self writeWithNSString:isStartTag ? @"<rdf:" : @"</rdf:"];
    
#line 1271
    if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(arrayNode)) getOptions])) isArrayAlternate]) {
      
#line 1273
      [self writeWithNSString:@"Alt"];
    }
    else if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([arrayNode getOptions])) isArrayOrdered]) {
      
#line 1277
      [self writeWithNSString:@"Seq"];
    }
    else {
      
#line 1281
      [self writeWithNSString:@"Bag"];
    }
    
#line 1284
    if (isStartTag && ![arrayNode hasChildren]) {
      
#line 1286
      [self writeWithNSString:@"/>"];
    }
    else {
      
#line 1290
      [self writeWithNSString:@">"];
    }
    
#line 1293
    [self writeNewline];
  }
}


#line 1309
- (void)appendNodeValueWithNSString:(NSString *)value
                        withBoolean:(jboolean)forAttribute {
  
#line 1311
  if (value == nil) {
    
#line 1313
    value = @"";
  }
  [self writeWithNSString:[ComItextpdfXmpImplUtils escapeXMLWithNSString:value withBoolean:forAttribute withBoolean:YES]];
}


#line 1331
- (jboolean)canBeRDFAttrPropWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)node {
  
#line 1333
  return
#line 1334
  ![((ComItextpdfXmpImplXMPNode *) nil_chk(node)) hasQualifier] &&
#line 1335
  ![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isURI] &&
#line 1336
  ![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isCompositeProperty] &&
#line 1337
  ![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) containsOneOfWithInt:ComItextpdfXmpOptionsPropertyOptions_SEPARATE_NODE] &&
#line 1338
  ![((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_ARRAY_ITEM_NAME_())) isEqual:[node getName]];
}

- (void)writeIndentWithInt:(jint)times {
  
#line 1349
  for (jint i = [((ComItextpdfXmpOptionsSerializeOptions *) nil_chk(options_)) getBaseIndent] + times; i > 0; i--) {
    
#line 1351
    [((JavaIoOutputStreamWriter *) nil_chk(writer_)) writeWithNSString:[options_ getIndent]];
  }
}


#line 1361
- (void)writeWithInt:(jint)c {
  
#line 1363
  [((JavaIoOutputStreamWriter *) nil_chk(writer_)) writeWithInt:c];
}


#line 1372
- (void)writeWithNSString:(NSString *)str {
  
#line 1374
  [((JavaIoOutputStreamWriter *) nil_chk(writer_)) writeWithNSString:str];
}


#line 1384
- (void)writeCharsWithInt:(jint)number
                 withChar:(jchar)c {
  
#line 1386
  for (; number > 0; number--) {
    
#line 1388
    [((JavaIoOutputStreamWriter *) nil_chk(writer_)) writeWithInt:c];
  }
}


#line 1397
- (void)writeNewline {
  
#line 1399
  [((JavaIoOutputStreamWriter *) nil_chk(writer_)) writeWithNSString:[((ComItextpdfXmpOptionsSerializeOptions *) nil_chk(options_)) getNewline]];
}

- (instancetype)init {
  if (self = [super init]) {
    unicodeSize_ =
#line 104
    1;
  }
  return self;
}

- (void)copyAllFieldsTo:(ComItextpdfXmpImplXMPSerializerRDF *)other {
  [super copyAllFieldsTo:other];
  other->options_ = options_;
  other->outputStream_ = outputStream_;
  other->padding_ = padding_;
  other->unicodeSize_ = unicodeSize_;
  other->writer_ = writer_;
  other->xmp_ = xmp_;
}

+ (void)initialize {
  if (self == [ComItextpdfXmpImplXMPSerializerRDF class]) {
    ComItextpdfXmpImplXMPSerializerRDF_RDF_ATTR_QUALIFIER_ =
#line 90
    [[JavaUtilHashSet alloc] initWithJavaUtilCollection:[JavaUtilArrays asListWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ ComItextpdfXmpXMPConst_get_XML_LANG_(),
#line 91
    @"rdf:resource", @"rdf:ID", @"rdf:bagID", @"rdf:nodeID" } count:5 type:[IOSClass classWithClass:[NSString class]]]]];
    ComItextpdfXmpImplXMPSerializerRDF_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "serializeWithComItextpdfXmpXMPMeta:withJavaIoOutputStream:withComItextpdfXmpOptionsSerializeOptions:", "serialize", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "addPaddingWithInt:", "addPadding", "V", 0x2, "Lcom.itextpdf.xmp.XMPException;Ljava.io.IOException;" },
    { "checkOptionsConsistence", NULL, "V", 0x4, "Lcom.itextpdf.xmp.XMPException;" },
    { "serializeAsRDF", NULL, "Ljava.lang.String;", 0x2, "Ljava.io.IOException;Lcom.itextpdf.xmp.XMPException;" },
    { "serializeCanonicalRDFSchemasWithInt:", "serializeCanonicalRDFSchemas", "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.xmp.XMPException;" },
    { "writeTreeName", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "serializeCompactRDFSchemasWithInt:", "serializeCompactRDFSchemas", "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.xmp.XMPException;" },
    { "serializeCompactRDFAttrPropsWithComItextpdfXmpImplXMPNode:withInt:", "serializeCompactRDFAttrProps", "Z", 0x2, "Ljava.io.IOException;" },
    { "serializeCompactRDFElementPropsWithComItextpdfXmpImplXMPNode:withInt:", "serializeCompactRDFElementProps", "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.xmp.XMPException;" },
    { "serializeCompactRDFSimplePropWithComItextpdfXmpImplXMPNode:", "serializeCompactRDFSimpleProp", "[Ljava.lang.Object;", 0x2, "Ljava.io.IOException;" },
    { "serializeCompactRDFArrayPropWithComItextpdfXmpImplXMPNode:withInt:", "serializeCompactRDFArrayProp", "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.xmp.XMPException;" },
    { "serializeCompactRDFStructPropWithComItextpdfXmpImplXMPNode:withInt:withBoolean:", "serializeCompactRDFStructProp", "Z", 0x2, "Lcom.itextpdf.xmp.XMPException;Ljava.io.IOException;" },
    { "serializeCompactRDFGeneralQualifierWithInt:withComItextpdfXmpImplXMPNode:", "serializeCompactRDFGeneralQualifier", "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.xmp.XMPException;" },
    { "serializeCanonicalRDFSchemaWithComItextpdfXmpImplXMPNode:withInt:", "serializeCanonicalRDFSchema", "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.xmp.XMPException;" },
    { "declareUsedNamespacesWithComItextpdfXmpImplXMPNode:withJavaUtilSet:withInt:", "declareUsedNamespaces", "V", 0x2, "Ljava.io.IOException;" },
    { "declareNamespaceWithNSString:withNSString:withJavaUtilSet:withInt:", "declareNamespace", "V", 0x2, "Ljava.io.IOException;" },
    { "startOuterRDFDescriptionWithComItextpdfXmpImplXMPNode:withInt:", "startOuterRDFDescription", "V", 0x2, "Ljava.io.IOException;" },
    { "endOuterRDFDescriptionWithInt:", "endOuterRDFDescription", "V", 0x2, "Ljava.io.IOException;" },
    { "serializeCanonicalRDFPropertyWithComItextpdfXmpImplXMPNode:withBoolean:withBoolean:withInt:", "serializeCanonicalRDFProperty", "V", 0x2, "Ljava.io.IOException;Lcom.itextpdf.xmp.XMPException;" },
    { "emitRDFArrayTagWithComItextpdfXmpImplXMPNode:withBoolean:withInt:", "emitRDFArrayTag", "V", 0x2, "Ljava.io.IOException;" },
    { "appendNodeValueWithNSString:withBoolean:", "appendNodeValue", "V", 0x2, "Ljava.io.IOException;" },
    { "canBeRDFAttrPropWithComItextpdfXmpImplXMPNode:", "canBeRDFAttrProp", "Z", 0x2, NULL },
    { "writeIndentWithInt:", "writeIndent", "V", 0x2, "Ljava.io.IOException;" },
    { "writeWithInt:", "write", "V", 0x2, "Ljava.io.IOException;" },
    { "writeWithNSString:", "write", "V", 0x2, "Ljava.io.IOException;" },
    { "writeCharsWithInt:withChar:", "writeChars", "V", 0x2, "Ljava.io.IOException;" },
    { "writeNewline", NULL, "V", 0x2, "Ljava.io.IOException;" },
    { "init", NULL, NULL, 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_PAD_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPSerializerRDF_DEFAULT_PAD },
    { "PACKET_HEADER_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_PACKET_HEADER_,  },
    { "PACKET_TRAILER_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_PACKET_TRAILER_,  },
    { "PACKET_TRAILER2_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_PACKET_TRAILER2_,  },
    { "RDF_XMPMETA_START_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_XMPMETA_START_,  },
    { "RDF_XMPMETA_END_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_XMPMETA_END_,  },
    { "RDF_RDF_START_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_RDF_START_,  },
    { "RDF_RDF_END_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_RDF_END_,  },
    { "RDF_SCHEMA_START_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_START_,  },
    { "RDF_SCHEMA_END_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_SCHEMA_END_,  },
    { "RDF_STRUCT_START_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_START_,  },
    { "RDF_STRUCT_END_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_STRUCT_END_,  },
    { "RDF_EMPTY_STRUCT_", NULL, 0x1a, "Ljava.lang.String;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_EMPTY_STRUCT_,  },
    { "RDF_ATTR_QUALIFIER_", NULL, 0x18, "Ljava.util.Set;", &ComItextpdfXmpImplXMPSerializerRDF_RDF_ATTR_QUALIFIER_,  },
    { "xmp_", NULL, 0x2, "Lcom.itextpdf.xmp.impl.XMPMetaImpl;", NULL,  },
    { "outputStream_", NULL, 0x2, "Lcom.itextpdf.xmp.impl.CountOutputStream;", NULL,  },
    { "writer_", NULL, 0x2, "Ljava.io.OutputStreamWriter;", NULL,  },
    { "options_", NULL, 0x2, "Lcom.itextpdf.xmp.options.SerializeOptions;", NULL,  },
    { "unicodeSize_", NULL, 0x2, "I", NULL,  },
    { "padding_", NULL, 0x2, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplXMPSerializerRDF = { "XMPSerializerRDF", "com.itextpdf.xmp.impl", NULL, 0x1, 28, methods, 20, fields, 0, NULL};
  return &_ComItextpdfXmpImplXMPSerializerRDF;
}

@end
