//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPMetaImpl.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPMetaImpl.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/XMPDateTime.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPIterator.h"
#include "com/itextpdf/xmp/XMPMeta.h"
#include "com/itextpdf/xmp/XMPPathFactory.h"
#include "com/itextpdf/xmp/XMPUtils.h"
#include "com/itextpdf/xmp/impl/ParameterAsserts.h"
#include "com/itextpdf/xmp/impl/Utils.h"
#include "com/itextpdf/xmp/impl/XMPIteratorImpl.h"
#include "com/itextpdf/xmp/impl/XMPMetaImpl.h"
#include "com/itextpdf/xmp/impl/XMPNode.h"
#include "com/itextpdf/xmp/impl/XMPNodeUtils.h"
#include "com/itextpdf/xmp/impl/XMPNormalizer.h"
#include "com/itextpdf/xmp/impl/xpath/XMPPath.h"
#include "com/itextpdf/xmp/impl/xpath/XMPPathParser.h"
#include "com/itextpdf/xmp/options/IteratorOptions.h"
#include "com/itextpdf/xmp/options/ParseOptions.h"
#include "com/itextpdf/xmp/options/PropertyOptions.h"
#include "com/itextpdf/xmp/properties/XMPProperty.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/Calendar.h"
#include "java/util/Iterator.h"


#line 57
@implementation ComItextpdfXmpImplXMPMetaImpl


#line 85
- (instancetype)init {
  if (self = [super init]) {
    packetHeader_ =
#line 79
    nil;
    
#line 88
    tree_ = [[ComItextpdfXmpImplXMPNode alloc] initWithNSString:nil withNSString:nil withComItextpdfXmpOptionsPropertyOptions:nil];
  }
  return self;
}


#line 99
- (instancetype)initWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)tree {
  if (self = [super init]) {
    packetHeader_ =
#line 79
    nil;
    
#line 101
    self->tree_ = tree;
  }
  return self;
}


#line 109
- (void)appendArrayItemWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)arrayName
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)arrayOptions
                       withNSString:(NSString *)itemValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)itemOptions {
  
#line 112
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:arrayName];
  
#line 115
  if (arrayOptions == nil) {
    
#line 117
    arrayOptions = [[ComItextpdfXmpOptionsPropertyOptions alloc] init];
  }
  if (![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk(arrayOptions)) isOnlyArrayOptions]) {
    
#line 121
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Only array form flags allowed for arrayOptions" withInt:
#line 122
    ComItextpdfXmpXMPError_BADOPTIONS];
  }
  
#line 126
  arrayOptions = [ComItextpdfXmpImplXMPNodeUtils verifySetOptionsWithComItextpdfXmpOptionsPropertyOptions:arrayOptions withId:nil];
  
#line 132
  ComItextpdfXmpImplXpathXMPPath *arrayPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:arrayName];
  
#line 136
  ComItextpdfXmpImplXMPNode *arrayNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:arrayPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
  
#line 138
  if (arrayNode != nil) {
    
#line 142
    if (![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([arrayNode getOptions])) isArray]) {
      
#line 144
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"The named property is not an array" withInt:ComItextpdfXmpXMPError_BADXPATH];
    }
  }
  else {
    
#line 154
    if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk(arrayOptions)) isArray]) {
      
#line 156
      arrayNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:arrayPath withBoolean:YES withComItextpdfXmpOptionsPropertyOptions:arrayOptions];
      if (arrayNode == nil) {
        
#line 159
        @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Failure creating array node" withInt:ComItextpdfXmpXMPError_BADXPATH];
      }
    }
    else {
      
#line 165
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Explicit arrayOptions required to create new array" withInt:
#line 166
      ComItextpdfXmpXMPError_BADOPTIONS];
    }
  }
  
#line 170
  [self doSetArrayItemWithComItextpdfXmpImplXMPNode:arrayNode withInt:ComItextpdfXmpXMPConst_ARRAY_LAST_ITEM withNSString:itemValue withComItextpdfXmpOptionsPropertyOptions:itemOptions withBoolean:YES];
}


#line 177
- (void)appendArrayItemWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)arrayName
                       withNSString:(NSString *)itemValue {
  
#line 180
  [self appendArrayItemWithNSString:schemaNS withNSString:arrayName withComItextpdfXmpOptionsPropertyOptions:nil withNSString:itemValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 188
- (jint)countArrayItemsWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)arrayName {
  
#line 190
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:arrayName];
  
#line 193
  ComItextpdfXmpImplXpathXMPPath *arrayPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:arrayName];
  ComItextpdfXmpImplXMPNode *arrayNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:arrayPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
  
#line 196
  if (arrayNode == nil) {
    
#line 198
    return 0;
  }
  
#line 201
  if ([((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(arrayNode)) getOptions])) isArray]) {
    
#line 203
    return [arrayNode getChildrenLength];
  }
  else {
    
#line 207
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"The named property is not an array" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
}


#line 215
- (void)deleteArrayItemWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)arrayName
                            withInt:(jint)itemIndex {
  
#line 217
  @try {
    
#line 219
    [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
    [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:arrayName];
    
#line 222
    NSString *itemPath = [ComItextpdfXmpXMPPathFactory composeArrayItemPathWithNSString:arrayName withInt:itemIndex];
    [self deletePropertyWithNSString:schemaNS withNSString:itemPath];
  }
  @catch (ComItextpdfXmpXMPException *e) {
  }
}


#line 235
- (void)deletePropertyWithNSString:(NSString *)schemaNS
                      withNSString:(NSString *)propName {
  
#line 237
  @try {
    
#line 239
    [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
    [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
    
#line 242
    ComItextpdfXmpImplXpathXMPPath *expPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:propName];
    
#line 244
    ComItextpdfXmpImplXMPNode *propNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:expPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
    if (propNode != nil) {
      
#line 247
      [ComItextpdfXmpImplXMPNodeUtils deleteNodeWithComItextpdfXmpImplXMPNode:propNode];
    }
  }
  @catch (ComItextpdfXmpXMPException *e) {
  }
}

- (void)deleteQualifierWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)propName
                       withNSString:(NSString *)qualNS
                       withNSString:(NSString *)qualName {
  
#line 262
  @try {
    
#line 265
    [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
    [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
    
#line 268
    NSString *qualPath = JreStrcat("$$", propName, [ComItextpdfXmpXMPPathFactory composeQualifierPathWithNSString:qualNS withNSString:qualName]);
    [self deletePropertyWithNSString:schemaNS withNSString:qualPath];
  }
  @catch (ComItextpdfXmpXMPException *e) {
  }
}


#line 281
- (void)deleteStructFieldWithNSString:(NSString *)schemaNS
                         withNSString:(NSString *)structName
                         withNSString:(NSString *)fieldNS
                         withNSString:(NSString *)fieldName {
  
#line 284
  @try {
    
#line 287
    [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
    [ComItextpdfXmpImplParameterAsserts assertStructNameWithNSString:structName];
    
#line 290
    NSString *fieldPath = JreStrcat("$$", structName,
#line 291
    [ComItextpdfXmpXMPPathFactory composeStructFieldPathWithNSString:fieldNS withNSString:fieldName]);
    [self deletePropertyWithNSString:schemaNS withNSString:fieldPath];
  }
  @catch (ComItextpdfXmpXMPException *e) {
  }
}


#line 304
- (jboolean)doesPropertyExistWithNSString:(NSString *)schemaNS
                             withNSString:(NSString *)propName {
  
#line 306
  @try {
    
#line 308
    [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
    [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
    
#line 311
    ComItextpdfXmpImplXpathXMPPath *expPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:propName];
    ComItextpdfXmpImplXMPNode *propNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:expPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
    return propNode != nil;
  }
  @catch (ComItextpdfXmpXMPException *e) {
    
#line 317
    return NO;
  }
}


#line 325
- (jboolean)doesArrayItemExistWithNSString:(NSString *)schemaNS
                              withNSString:(NSString *)arrayName
                                   withInt:(jint)itemIndex {
  
#line 327
  @try {
    
#line 329
    [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
    [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:arrayName];
    
#line 332
    NSString *path = [ComItextpdfXmpXMPPathFactory composeArrayItemPathWithNSString:arrayName withInt:itemIndex];
    return [self doesPropertyExistWithNSString:schemaNS withNSString:path];
  }
  @catch (ComItextpdfXmpXMPException *e) {
    
#line 337
    return NO;
  }
}


#line 345
- (jboolean)doesStructFieldExistWithNSString:(NSString *)schemaNS
                                withNSString:(NSString *)structName
                                withNSString:(NSString *)fieldNS
                                withNSString:(NSString *)fieldName {
  
#line 348
  @try {
    
#line 351
    [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
    [ComItextpdfXmpImplParameterAsserts assertStructNameWithNSString:structName];
    
#line 354
    NSString *path = [ComItextpdfXmpXMPPathFactory composeStructFieldPathWithNSString:fieldNS withNSString:fieldName];
    return [self doesPropertyExistWithNSString:schemaNS withNSString:JreStrcat("$$", structName, path)];
  }
  @catch (ComItextpdfXmpXMPException *e) {
    
#line 359
    return NO;
  }
}


#line 367
- (jboolean)doesQualifierExistWithNSString:(NSString *)schemaNS
                              withNSString:(NSString *)propName
                              withNSString:(NSString *)qualNS
                              withNSString:(NSString *)qualName {
  
#line 370
  @try {
    
#line 373
    [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
    [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
    
#line 376
    NSString *path = [ComItextpdfXmpXMPPathFactory composeQualifierPathWithNSString:qualNS withNSString:qualName];
    return [self doesPropertyExistWithNSString:schemaNS withNSString:JreStrcat("$$", propName, path)];
  }
  @catch (ComItextpdfXmpXMPException *e) {
    
#line 381
    return NO;
  }
}


#line 389
- (id<ComItextpdfXmpPropertiesXMPProperty>)getArrayItemWithNSString:(NSString *)schemaNS
                                                       withNSString:(NSString *)arrayName
                                                            withInt:(jint)itemIndex {
  
#line 392
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:arrayName];
  
#line 395
  NSString *itemPath = [ComItextpdfXmpXMPPathFactory composeArrayItemPathWithNSString:arrayName withInt:itemIndex];
  return [self getPropertyWithNSString:schemaNS withNSString:itemPath];
}


#line 404
- (id<ComItextpdfXmpPropertiesXMPProperty>)getLocalizedTextWithNSString:(NSString *)schemaNS
                                                           withNSString:(NSString *)altTextName
                                                           withNSString:(NSString *)genericLang
                                                           withNSString:(NSString *)specificLang {
  
#line 407
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:altTextName];
  [ComItextpdfXmpImplParameterAsserts assertSpecificLangWithNSString:specificLang];
  
#line 411
  genericLang = genericLang != nil ? [ComItextpdfXmpImplUtils normalizeLangValueWithNSString:genericLang] : nil;
  specificLang = [ComItextpdfXmpImplUtils normalizeLangValueWithNSString:specificLang];
  
#line 414
  ComItextpdfXmpImplXpathXMPPath *arrayPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:altTextName];
  ComItextpdfXmpImplXMPNode *arrayNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:arrayPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
  if (arrayNode == nil) {
    
#line 418
    return nil;
  }
  
#line 421
  IOSObjectArray *result = [ComItextpdfXmpImplXMPNodeUtils chooseLocalizedTextWithComItextpdfXmpImplXMPNode:arrayNode withNSString:genericLang withNSString:specificLang];
  jint match = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(nil_chk(result), 0), [JavaLangInteger class])))) intValue];
  ComItextpdfXmpImplXMPNode *itemNode = (ComItextpdfXmpImplXMPNode *) check_class_cast(IOSObjectArray_Get(result, 1), [ComItextpdfXmpImplXMPNode class]);
  
#line 425
  if (match != ComItextpdfXmpImplXMPNodeUtils_CLT_NO_VALUES) {
    
#line 427
    return [[ComItextpdfXmpImplXMPMetaImpl_$1 alloc] initWithComItextpdfXmpImplXMPNode:itemNode];
  }
  else {
    
#line 455
    return nil;
  }
}


#line 464
- (void)setLocalizedTextWithNSString:(NSString *)schemaNS
                        withNSString:(NSString *)altTextName
                        withNSString:(NSString *)genericLang
                        withNSString:(NSString *)specificLang
                        withNSString:(NSString *)itemValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 467
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:altTextName];
  [ComItextpdfXmpImplParameterAsserts assertSpecificLangWithNSString:specificLang];
  
#line 471
  genericLang = genericLang != nil ? [ComItextpdfXmpImplUtils normalizeLangValueWithNSString:genericLang] : nil;
  specificLang = [ComItextpdfXmpImplUtils normalizeLangValueWithNSString:specificLang];
  
#line 474
  ComItextpdfXmpImplXpathXMPPath *arrayPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:altTextName];
  
#line 477
  ComItextpdfXmpImplXMPNode *arrayNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:arrayPath withBoolean:YES withComItextpdfXmpOptionsPropertyOptions:[[ComItextpdfXmpOptionsPropertyOptions alloc] initWithInt:
#line 478
  ComItextpdfXmpOptionsPropertyOptions_ARRAY | ComItextpdfXmpOptionsPropertyOptions_ARRAY_ORDERED |
#line 479
  ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALTERNATE | ComItextpdfXmpOptionsPropertyOptions_ARRAY_ALT_TEXT]];
  
#line 481
  if (arrayNode == nil) {
    
#line 483
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Failed to find or create array node" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
  else if (![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([arrayNode getOptions])) isArrayAltText]) {
    
#line 487
    if (![arrayNode hasChildren] && [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([arrayNode getOptions])) isArrayAlternate]) {
      
#line 489
      (void) [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([arrayNode getOptions])) setArrayAltTextWithBoolean:YES];
    }
    else {
      
#line 493
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:
#line 494
      @"Specified property is no alt-text array" withInt:ComItextpdfXmpXMPError_BADXPATH];
    }
  }
  
#line 499
  jboolean haveXDefault = NO;
  ComItextpdfXmpImplXMPNode *xdItem = nil;
  
#line 502
  for (id<JavaUtilIterator> it = [((ComItextpdfXmpImplXMPNode *) nil_chk(arrayNode)) iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 504
    ComItextpdfXmpImplXMPNode *currItem = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
    if (![((ComItextpdfXmpImplXMPNode *) nil_chk(currItem)) hasQualifier] ||
#line 506
    ![((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XML_LANG_())) isEqual:[((ComItextpdfXmpImplXMPNode *) nil_chk([currItem getQualifierWithInt:1])) getName]]) {
      
#line 508
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Language qualifier must be first" withInt:ComItextpdfXmpXMPError_BADXPATH];
    }
    else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_X_DEFAULT_())) isEqual:[((ComItextpdfXmpImplXMPNode *) nil_chk([currItem getQualifierWithInt:1])) getValue]]) {
      
#line 512
      xdItem = currItem;
      haveXDefault = YES;
      break;
    }
  }
  
#line 519
  if (xdItem != nil && [arrayNode getChildrenLength] > 1) {
    
#line 521
    [arrayNode removeChildWithComItextpdfXmpImplXMPNode:xdItem];
    [arrayNode addChildWithInt:1 withComItextpdfXmpImplXMPNode:xdItem];
  }
  
#line 528
  IOSObjectArray *result = [ComItextpdfXmpImplXMPNodeUtils chooseLocalizedTextWithComItextpdfXmpImplXMPNode:arrayNode withNSString:genericLang withNSString:specificLang];
  jint match = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(nil_chk(result), 0), [JavaLangInteger class])))) intValue];
  ComItextpdfXmpImplXMPNode *itemNode = (ComItextpdfXmpImplXMPNode *) check_class_cast(IOSObjectArray_Get(result, 1), [ComItextpdfXmpImplXMPNode class]);
  
#line 532
  jboolean specificXDefault = [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_X_DEFAULT_())) isEqual:specificLang];
  
#line 534
  switch (match) {
    
#line 536
    case ComItextpdfXmpImplXMPNodeUtils_CLT_NO_VALUES:
    
#line 540
    [ComItextpdfXmpImplXMPNodeUtils appendLangItemWithComItextpdfXmpImplXMPNode:arrayNode withNSString:ComItextpdfXmpXMPConst_get_X_DEFAULT_() withNSString:itemValue];
    haveXDefault = YES;
    if (!specificXDefault) {
      
#line 544
      [ComItextpdfXmpImplXMPNodeUtils appendLangItemWithComItextpdfXmpImplXMPNode:arrayNode withNSString:specificLang withNSString:itemValue];
    }
    break;
    
#line 548
    case ComItextpdfXmpImplXMPNodeUtils_CLT_SPECIFIC_MATCH:
    
#line 550
    if (!specificXDefault) {
      
#line 554
      if (haveXDefault && xdItem != itemNode && xdItem != nil &&
#line 555
      [((NSString *) nil_chk([xdItem getValue])) isEqual:[((ComItextpdfXmpImplXMPNode *) nil_chk(itemNode)) getValue]]) {
        
#line 557
        [xdItem setValueWithNSString:itemValue];
      }
      
#line 560
      [((ComItextpdfXmpImplXMPNode *) nil_chk(itemNode)) setValueWithNSString:itemValue];
    }
    else {
      
#line 565
      NSAssert(haveXDefault && xdItem == itemNode, @"com/itextpdf/xmp/impl/XMPMetaImpl.java:565 condition failed: assert  haveXDefault  &&  xdItem == itemNode;");
      for (id<JavaUtilIterator> it = [arrayNode iterateChildren]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
        
#line 568
        ComItextpdfXmpImplXMPNode *currItem = (ComItextpdfXmpImplXMPNode *) check_class_cast([it next], [ComItextpdfXmpImplXMPNode class]);
        if (currItem == xdItem ||
#line 570
        ![((NSString *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(currItem)) getValue])) isEqual:
#line 571
        xdItem != nil ? [xdItem getValue] : nil]) {
          
#line 573
          continue;
        }
        [((ComItextpdfXmpImplXMPNode *) nil_chk(currItem)) setValueWithNSString:itemValue];
      }
      
#line 578
      if (xdItem != nil) {
        
#line 580
        [xdItem setValueWithNSString:itemValue];
      }
    }
    break;
    
#line 585
    case ComItextpdfXmpImplXMPNodeUtils_CLT_SINGLE_GENERIC:
    
#line 589
    if (haveXDefault && xdItem != itemNode && xdItem != nil &&
#line 590
    [((NSString *) nil_chk([xdItem getValue])) isEqual:[((ComItextpdfXmpImplXMPNode *) nil_chk(itemNode)) getValue]]) {
      
#line 592
      [xdItem setValueWithNSString:itemValue];
    }
    [((ComItextpdfXmpImplXMPNode *) nil_chk(itemNode)) setValueWithNSString:itemValue];
    
#line 597
    break;
    
#line 599
    case ComItextpdfXmpImplXMPNodeUtils_CLT_MULTIPLE_GENERIC:
    
#line 602
    [ComItextpdfXmpImplXMPNodeUtils appendLangItemWithComItextpdfXmpImplXMPNode:arrayNode withNSString:specificLang withNSString:itemValue];
    if (specificXDefault) {
      
#line 605
      haveXDefault = YES;
    }
    break;
    
#line 609
    case ComItextpdfXmpImplXMPNodeUtils_CLT_XDEFAULT:
    
#line 613
    if (xdItem != nil && [arrayNode getChildrenLength] == 1) {
      
#line 615
      [xdItem setValueWithNSString:itemValue];
    }
    [ComItextpdfXmpImplXMPNodeUtils appendLangItemWithComItextpdfXmpImplXMPNode:arrayNode withNSString:specificLang withNSString:itemValue];
    break;
    
#line 620
    case ComItextpdfXmpImplXMPNodeUtils_CLT_FIRST_ITEM:
    
#line 623
    [ComItextpdfXmpImplXMPNodeUtils appendLangItemWithComItextpdfXmpImplXMPNode:arrayNode withNSString:specificLang withNSString:itemValue];
    if (specificXDefault) {
      
#line 626
      haveXDefault = YES;
    }
    break;
    
#line 630
    default:
    
#line 632
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Unexpected result from ChooseLocalizedText" withInt:
#line 633
    ComItextpdfXmpXMPError_INTERNALFAILURE];
  }
  
#line 638
  if (!haveXDefault && [arrayNode getChildrenLength] == 1) {
    
#line 640
    [ComItextpdfXmpImplXMPNodeUtils appendLangItemWithComItextpdfXmpImplXMPNode:arrayNode withNSString:ComItextpdfXmpXMPConst_get_X_DEFAULT_() withNSString:itemValue];
  }
}


#line 648
- (void)setLocalizedTextWithNSString:(NSString *)schemaNS
                        withNSString:(NSString *)altTextName
                        withNSString:(NSString *)genericLang
                        withNSString:(NSString *)specificLang
                        withNSString:(NSString *)itemValue {
  
#line 651
  [self setLocalizedTextWithNSString:schemaNS withNSString:altTextName withNSString:genericLang withNSString:specificLang withNSString:itemValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 659
- (id<ComItextpdfXmpPropertiesXMPProperty>)getPropertyWithNSString:(NSString *)schemaNS
                                                      withNSString:(NSString *)propName {
  
#line 661
  return [self getPropertyWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_STRING];
}


#line 683
- (id<ComItextpdfXmpPropertiesXMPProperty>)getPropertyWithNSString:(NSString *)schemaNS
                                                      withNSString:(NSString *)propName
                                                           withInt:(jint)valueType {
  
#line 686
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
  
#line 689
  ComItextpdfXmpImplXpathXMPPath *expPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:propName];
  ComItextpdfXmpImplXMPNode *propNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:expPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
  
#line 692
  if (propNode != nil) {
    
#line 694
    if (valueType != ComItextpdfXmpImplXMPMetaImpl_VALUE_STRING && [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([propNode getOptions])) isCompositeProperty]) {
      
#line 696
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Property must be simple when a value type is requested" withInt:
#line 697
      ComItextpdfXmpXMPError_BADXPATH];
    }
    
#line 700
    id value = [self evaluateNodeValueWithInt:valueType withComItextpdfXmpImplXMPNode:propNode];
    
#line 702
    return [[ComItextpdfXmpImplXMPMetaImpl_$2 alloc] initWithId:value withComItextpdfXmpImplXMPNode:propNode];
  }
  else {
    
#line 730
    return nil;
  }
}


#line 750
- (id)getPropertyObjectWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)propName
                            withInt:(jint)valueType {
  
#line 753
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
  
#line 756
  ComItextpdfXmpImplXpathXMPPath *expPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:propName];
  ComItextpdfXmpImplXMPNode *propNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:expPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
  
#line 759
  if (propNode != nil) {
    
#line 761
    if (valueType != ComItextpdfXmpImplXMPMetaImpl_VALUE_STRING && [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([propNode getOptions])) isCompositeProperty]) {
      
#line 763
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Property must be simple when a value type is requested" withInt:
#line 764
      ComItextpdfXmpXMPError_BADXPATH];
    }
    
#line 767
    return [self evaluateNodeValueWithInt:valueType withComItextpdfXmpImplXMPNode:propNode];
  }
  else {
    
#line 771
    return nil;
  }
}


#line 779
- (JavaLangBoolean *)getPropertyBooleanWithNSString:(NSString *)schemaNS
                                       withNSString:(NSString *)propName {
  
#line 781
  return (JavaLangBoolean *) check_class_cast([self getPropertyObjectWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_BOOLEAN], [JavaLangBoolean class]);
}


#line 789
- (void)setPropertyBooleanWithNSString:(NSString *)schemaNS
                          withNSString:(NSString *)propName
                           withBoolean:(jboolean)propValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 792
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue ? ComItextpdfXmpXMPConst_get_TRUESTR_() : ComItextpdfXmpXMPConst_get_FALSESTR_() withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 799
- (void)setPropertyBooleanWithNSString:(NSString *)schemaNS
                          withNSString:(NSString *)propName
                           withBoolean:(jboolean)propValue {
  
#line 802
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue ? ComItextpdfXmpXMPConst_get_TRUESTR_() : ComItextpdfXmpXMPConst_get_FALSESTR_() withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 809
- (JavaLangInteger *)getPropertyIntegerWithNSString:(NSString *)schemaNS
                                       withNSString:(NSString *)propName {
  
#line 811
  return (JavaLangInteger *) check_class_cast([self getPropertyObjectWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_INTEGER], [JavaLangInteger class]);
}


#line 818
- (void)setPropertyIntegerWithNSString:(NSString *)schemaNS
                          withNSString:(NSString *)propName
                               withInt:(jint)propValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 821
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:[[JavaLangInteger alloc] initWithInt:propValue] withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 828
- (void)setPropertyIntegerWithNSString:(NSString *)schemaNS
                          withNSString:(NSString *)propName
                               withInt:(jint)propValue {
  
#line 831
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:[[JavaLangInteger alloc] initWithInt:propValue] withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 838
- (JavaLangLong *)getPropertyLongWithNSString:(NSString *)schemaNS
                                 withNSString:(NSString *)propName {
  
#line 840
  return (JavaLangLong *) check_class_cast([self getPropertyObjectWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_LONG], [JavaLangLong class]);
}


#line 847
- (void)setPropertyLongWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)propName
                           withLong:(jlong)propValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 850
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:[[JavaLangLong alloc] initWithLong:propValue] withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 857
- (void)setPropertyLongWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)propName
                           withLong:(jlong)propValue {
  
#line 860
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:[[JavaLangLong alloc] initWithLong:propValue] withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 867
- (JavaLangDouble *)getPropertyDoubleWithNSString:(NSString *)schemaNS
                                     withNSString:(NSString *)propName {
  
#line 869
  return (JavaLangDouble *) check_class_cast([self getPropertyObjectWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_DOUBLE], [JavaLangDouble class]);
}


#line 876
- (void)setPropertyDoubleWithNSString:(NSString *)schemaNS
                         withNSString:(NSString *)propName
                           withDouble:(jdouble)propValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 879
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:[[JavaLangDouble alloc] initWithDouble:propValue] withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 886
- (void)setPropertyDoubleWithNSString:(NSString *)schemaNS
                         withNSString:(NSString *)propName
                           withDouble:(jdouble)propValue {
  
#line 889
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:[[JavaLangDouble alloc] initWithDouble:propValue] withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 896
- (id<ComItextpdfXmpXMPDateTime>)getPropertyDateWithNSString:(NSString *)schemaNS
                                                withNSString:(NSString *)propName {
  
#line 898
  return (id<ComItextpdfXmpXMPDateTime>) check_protocol_cast([self getPropertyObjectWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_DATE], @protocol(ComItextpdfXmpXMPDateTime));
}


#line 906
- (void)setPropertyDateWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)propName
      withComItextpdfXmpXMPDateTime:(id<ComItextpdfXmpXMPDateTime>)propValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 909
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 916
- (void)setPropertyDateWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)propName
      withComItextpdfXmpXMPDateTime:(id<ComItextpdfXmpXMPDateTime>)propValue {
  
#line 919
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 926
- (JavaUtilCalendar *)getPropertyCalendarWithNSString:(NSString *)schemaNS
                                         withNSString:(NSString *)propName {
  
#line 928
  return (JavaUtilCalendar *) check_class_cast([self getPropertyObjectWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_CALENDAR], [JavaUtilCalendar class]);
}


#line 936
- (void)setPropertyCalendarWithNSString:(NSString *)schemaNS
                           withNSString:(NSString *)propName
                   withJavaUtilCalendar:(JavaUtilCalendar *)propValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 939
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 946
- (void)setPropertyCalendarWithNSString:(NSString *)schemaNS
                           withNSString:(NSString *)propName
                   withJavaUtilCalendar:(JavaUtilCalendar *)propValue {
  
#line 949
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 956
- (IOSByteArray *)getPropertyBase64WithNSString:(NSString *)schemaNS
                                   withNSString:(NSString *)propName {
  
#line 958
  return (IOSByteArray *) check_class_cast([self getPropertyObjectWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_BASE64], [IOSByteArray class]);
}


#line 965
- (NSString *)getPropertyStringWithNSString:(NSString *)schemaNS
                               withNSString:(NSString *)propName {
  
#line 967
  return (NSString *) check_class_cast([self getPropertyObjectWithNSString:schemaNS withNSString:propName withInt:ComItextpdfXmpImplXMPMetaImpl_VALUE_STRING], [NSString class]);
}


#line 974
- (void)setPropertyBase64WithNSString:(NSString *)schemaNS
                         withNSString:(NSString *)propName
                        withByteArray:(IOSByteArray *)propValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 977
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 984
- (void)setPropertyBase64WithNSString:(NSString *)schemaNS
                         withNSString:(NSString *)propName
                        withByteArray:(IOSByteArray *)propValue {
  
#line 987
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 995
- (id<ComItextpdfXmpPropertiesXMPProperty>)getQualifierWithNSString:(NSString *)schemaNS
                                                       withNSString:(NSString *)propName
                                                       withNSString:(NSString *)qualNS
                                                       withNSString:(NSString *)qualName {
  
#line 999
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
  
#line 1002
  NSString *qualPath = JreStrcat("$$", propName, [ComItextpdfXmpXMPPathFactory composeQualifierPathWithNSString:qualNS withNSString:qualName]);
  return [self getPropertyWithNSString:schemaNS withNSString:qualPath];
}


#line 1010
- (id<ComItextpdfXmpPropertiesXMPProperty>)getStructFieldWithNSString:(NSString *)schemaNS
                                                         withNSString:(NSString *)structName
                                                         withNSString:(NSString *)fieldNS
                                                         withNSString:(NSString *)fieldName {
  
#line 1014
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertStructNameWithNSString:structName];
  
#line 1017
  NSString *fieldPath = JreStrcat("$$", structName, [ComItextpdfXmpXMPPathFactory composeStructFieldPathWithNSString:fieldNS withNSString:fieldName]);
  return [self getPropertyWithNSString:schemaNS withNSString:fieldPath];
}


#line 1026
- (id<ComItextpdfXmpXMPIterator>)iterator {
  
#line 1028
  return [self iteratorWithNSString:nil withNSString:nil withComItextpdfXmpOptionsIteratorOptions:nil];
}


#line 1035
- (id<ComItextpdfXmpXMPIterator>)iteratorWithComItextpdfXmpOptionsIteratorOptions:(ComItextpdfXmpOptionsIteratorOptions *)options {
  
#line 1037
  return [self iteratorWithNSString:nil withNSString:nil withComItextpdfXmpOptionsIteratorOptions:options];
}


#line 1044
- (id<ComItextpdfXmpXMPIterator>)iteratorWithNSString:(NSString *)schemaNS
                                         withNSString:(NSString *)propName
             withComItextpdfXmpOptionsIteratorOptions:(ComItextpdfXmpOptionsIteratorOptions *)options {
  
#line 1047
  return [[ComItextpdfXmpImplXMPIteratorImpl alloc] initWithComItextpdfXmpImplXMPMetaImpl:self withNSString:schemaNS withNSString:propName withComItextpdfXmpOptionsIteratorOptions:options];
}


#line 1055
- (void)setArrayItemWithNSString:(NSString *)schemaNS
                    withNSString:(NSString *)arrayName
                         withInt:(jint)itemIndex
                    withNSString:(NSString *)itemValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 1058
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:arrayName];
  
#line 1062
  ComItextpdfXmpImplXpathXMPPath *arrayPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:arrayName];
  ComItextpdfXmpImplXMPNode *arrayNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:arrayPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
  
#line 1065
  if (arrayNode != nil) {
    
#line 1067
    [self doSetArrayItemWithComItextpdfXmpImplXMPNode:arrayNode withInt:itemIndex withNSString:itemValue withComItextpdfXmpOptionsPropertyOptions:options withBoolean:NO];
  }
  else {
    
#line 1071
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Specified array does not exist" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
}


#line 1079
- (void)setArrayItemWithNSString:(NSString *)schemaNS
                    withNSString:(NSString *)arrayName
                         withInt:(jint)itemIndex
                    withNSString:(NSString *)itemValue {
  [self setArrayItemWithNSString:schemaNS withNSString:arrayName withInt:itemIndex withNSString:itemValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 1091
- (void)insertArrayItemWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)arrayName
                            withInt:(jint)itemIndex
                       withNSString:(NSString *)itemValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 1094
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertArrayNameWithNSString:arrayName];
  
#line 1098
  ComItextpdfXmpImplXpathXMPPath *arrayPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:arrayName];
  ComItextpdfXmpImplXMPNode *arrayNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:arrayPath withBoolean:NO withComItextpdfXmpOptionsPropertyOptions:nil];
  
#line 1101
  if (arrayNode != nil) {
    
#line 1103
    [self doSetArrayItemWithComItextpdfXmpImplXMPNode:arrayNode withInt:itemIndex withNSString:itemValue withComItextpdfXmpOptionsPropertyOptions:options withBoolean:YES];
  }
  else {
    
#line 1107
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Specified array does not exist" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
}


#line 1115
- (void)insertArrayItemWithNSString:(NSString *)schemaNS
                       withNSString:(NSString *)arrayName
                            withInt:(jint)itemIndex
                       withNSString:(NSString *)itemValue {
  [self insertArrayItemWithNSString:schemaNS withNSString:arrayName withInt:itemIndex withNSString:itemValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 1126
- (void)setPropertyWithNSString:(NSString *)schemaNS
                   withNSString:(NSString *)propName
                         withId:(id)propValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 1129
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
  
#line 1132
  options = [ComItextpdfXmpImplXMPNodeUtils verifySetOptionsWithComItextpdfXmpOptionsPropertyOptions:options withId:propValue];
  
#line 1134
  ComItextpdfXmpImplXpathXMPPath *expPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:schemaNS withNSString:propName];
  
#line 1136
  ComItextpdfXmpImplXMPNode *propNode = [ComItextpdfXmpImplXMPNodeUtils findNodeWithComItextpdfXmpImplXMPNode:tree_ withComItextpdfXmpImplXpathXMPPath:expPath withBoolean:YES withComItextpdfXmpOptionsPropertyOptions:options];
  if (propNode != nil) {
    
#line 1139
    [self setNodeWithComItextpdfXmpImplXMPNode:propNode withId:propValue withComItextpdfXmpOptionsPropertyOptions:options withBoolean:NO];
  }
  else {
    
#line 1143
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Specified property does not exist" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
}


#line 1151
- (void)setPropertyWithNSString:(NSString *)schemaNS
                   withNSString:(NSString *)propName
                         withId:(id)propValue {
  
#line 1153
  [self setPropertyWithNSString:schemaNS withNSString:propName withId:propValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 1162
- (void)setQualifierWithNSString:(NSString *)schemaNS
                    withNSString:(NSString *)propName
                    withNSString:(NSString *)qualNS
                    withNSString:(NSString *)qualName
                    withNSString:(NSString *)qualValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 1165
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertPropNameWithNSString:propName];
  
#line 1168
  if (![self doesPropertyExistWithNSString:schemaNS withNSString:propName]) {
    
#line 1170
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Specified property does not exist!" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
  
#line 1173
  NSString *qualPath = JreStrcat("$$", propName, [ComItextpdfXmpXMPPathFactory composeQualifierPathWithNSString:qualNS withNSString:qualName]);
  [self setPropertyWithNSString:schemaNS withNSString:qualPath withId:qualValue withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 1181
- (void)setQualifierWithNSString:(NSString *)schemaNS
                    withNSString:(NSString *)propName
                    withNSString:(NSString *)qualNS
                    withNSString:(NSString *)qualName
                    withNSString:(NSString *)qualValue {
  
#line 1184
  [self setQualifierWithNSString:schemaNS withNSString:propName withNSString:qualNS withNSString:qualName withNSString:qualValue withComItextpdfXmpOptionsPropertyOptions:nil];
}


#line 1193
- (void)setStructFieldWithNSString:(NSString *)schemaNS
                      withNSString:(NSString *)structName
                      withNSString:(NSString *)fieldNS
                      withNSString:(NSString *)fieldName
                      withNSString:(NSString *)fieldValue
withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)options {
  
#line 1196
  [ComItextpdfXmpImplParameterAsserts assertSchemaNSWithNSString:schemaNS];
  [ComItextpdfXmpImplParameterAsserts assertStructNameWithNSString:structName];
  
#line 1199
  NSString *fieldPath = JreStrcat("$$", structName, [ComItextpdfXmpXMPPathFactory composeStructFieldPathWithNSString:fieldNS withNSString:fieldName]);
  [self setPropertyWithNSString:schemaNS withNSString:fieldPath withId:fieldValue withComItextpdfXmpOptionsPropertyOptions:options];
}


#line 1207
- (void)setStructFieldWithNSString:(NSString *)schemaNS
                      withNSString:(NSString *)structName
                      withNSString:(NSString *)fieldNS
                      withNSString:(NSString *)fieldName
                      withNSString:(NSString *)fieldValue {
  
#line 1210
  [self setStructFieldWithNSString:schemaNS withNSString:structName withNSString:fieldNS withNSString:fieldName withNSString:fieldValue withComItextpdfXmpOptionsPropertyOptions:nil];
}

- (NSString *)getObjectName {
  
#line 1219
  return [((ComItextpdfXmpImplXMPNode *) nil_chk(tree_)) getName] != nil ? [tree_ getName] : @"";
}


#line 1226
- (void)setObjectNameWithNSString:(NSString *)name {
  
#line 1228
  [((ComItextpdfXmpImplXMPNode *) nil_chk(tree_)) setNameWithNSString:name];
}


#line 1235
- (NSString *)getPacketHeader {
  
#line 1237
  return packetHeader_;
}


#line 1245
- (void)setPacketHeaderWithNSString:(NSString *)packetHeader {
  
#line 1247
  self->packetHeader_ = packetHeader;
}


#line 1256
- (id)clone {
  
#line 1258
  ComItextpdfXmpImplXMPNode *clonedTree = (ComItextpdfXmpImplXMPNode *) check_class_cast([((ComItextpdfXmpImplXMPNode *) nil_chk(tree_)) clone], [ComItextpdfXmpImplXMPNode class]);
  return [[ComItextpdfXmpImplXMPMetaImpl alloc] initWithComItextpdfXmpImplXMPNode:clonedTree];
}


#line 1266
- (NSString *)dumpObject {
  
#line 1269
  return [((ComItextpdfXmpImplXMPNode *) nil_chk([self getRoot])) dumpNodeWithBoolean:YES];
}


#line 1276
- (void)sort {
  
#line 1278
  [((ComItextpdfXmpImplXMPNode *) nil_chk(self->tree_)) sort];
}


#line 1285
- (void)normalizeWithComItextpdfXmpOptionsParseOptions:(ComItextpdfXmpOptionsParseOptions *)options {
  
#line 1287
  if (options == nil) {
    
#line 1289
    options = [[ComItextpdfXmpOptionsParseOptions alloc] init];
  }
  (void) [ComItextpdfXmpImplXMPNormalizer processWithComItextpdfXmpImplXMPMetaImpl:self withComItextpdfXmpOptionsParseOptions:options];
}


#line 1298
- (ComItextpdfXmpImplXMPNode *)getRoot {
  
#line 1300
  return tree_;
}


#line 1323
- (void)doSetArrayItemWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)arrayNode
                                            withInt:(jint)itemIndex
                                       withNSString:(NSString *)itemValue
           withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)itemOptions
                                        withBoolean:(jboolean)insert {
  
#line 1326
  ComItextpdfXmpImplXMPNode *itemNode = [[ComItextpdfXmpImplXMPNode alloc] initWithNSString:ComItextpdfXmpXMPConst_get_ARRAY_ITEM_NAME_() withComItextpdfXmpOptionsPropertyOptions:nil];
  itemOptions = [ComItextpdfXmpImplXMPNodeUtils verifySetOptionsWithComItextpdfXmpOptionsPropertyOptions:itemOptions withId:itemValue];
  
#line 1331
  jint maxIndex = insert ? [((ComItextpdfXmpImplXMPNode *) nil_chk(arrayNode)) getChildrenLength] + 1 : [((ComItextpdfXmpImplXMPNode *) nil_chk(arrayNode)) getChildrenLength];
  if (itemIndex == ComItextpdfXmpXMPConst_ARRAY_LAST_ITEM) {
    
#line 1334
    itemIndex = maxIndex;
  }
  
#line 1337
  if (1 <= itemIndex && itemIndex <= maxIndex) {
    
#line 1339
    if (!insert) {
      
#line 1341
      [((ComItextpdfXmpImplXMPNode *) nil_chk(arrayNode)) removeChildWithInt:itemIndex];
    }
    [((ComItextpdfXmpImplXMPNode *) nil_chk(arrayNode)) addChildWithInt:itemIndex withComItextpdfXmpImplXMPNode:itemNode];
    [self setNodeWithComItextpdfXmpImplXMPNode:itemNode withId:itemValue withComItextpdfXmpOptionsPropertyOptions:itemOptions withBoolean:NO];
  }
  else {
    
#line 1348
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Array index out of bounds" withInt:ComItextpdfXmpXMPError_BADINDEX];
  }
}


#line 1366
- (void)setNodeWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)node
                                      withId:(id)value
    withComItextpdfXmpOptionsPropertyOptions:(ComItextpdfXmpOptionsPropertyOptions *)newOptions
                                 withBoolean:(jboolean)deleteExisting {
  
#line 1369
  if (deleteExisting) {
    
#line 1371
    [((ComItextpdfXmpImplXMPNode *) nil_chk(node)) clear];
  }
  
#line 1375
  [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(node)) getOptions])) mergeWithWithComItextpdfXmpOptionsPropertyOptions:newOptions];
  
#line 1377
  if (![((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([node getOptions])) isCompositeProperty]) {
    
#line 1380
    [ComItextpdfXmpImplXMPNodeUtils setNodeValueWithComItextpdfXmpImplXMPNode:node withId:value];
  }
  else {
    
#line 1384
    if (value != nil && ((jint) [((NSString *) nil_chk([value description])) length]) > 0) {
      
#line 1386
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Composite nodes can't have values" withInt:ComItextpdfXmpXMPError_BADXPATH];
    }
    
#line 1389
    [node removeChildren];
  }
}


#line 1406
- (id)evaluateNodeValueWithInt:(jint)valueType
 withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)propNode {
  
#line 1408
  id value;
  NSString *rawValue = [((ComItextpdfXmpImplXMPNode *) nil_chk(propNode)) getValue];
  {
    
#line 1428
    id<ComItextpdfXmpXMPDateTime> dt;
    
#line 1410
    switch (valueType) {
      
#line 1412
      case ComItextpdfXmpImplXMPMetaImpl_VALUE_BOOLEAN:
      value = [[JavaLangBoolean alloc] initWithBoolean:[ComItextpdfXmpXMPUtils convertToBooleanWithNSString:rawValue]];
      break;
      case ComItextpdfXmpImplXMPMetaImpl_VALUE_INTEGER:
      value = [[JavaLangInteger alloc] initWithInt:[ComItextpdfXmpXMPUtils convertToIntegerWithNSString:rawValue]];
      break;
      case ComItextpdfXmpImplXMPMetaImpl_VALUE_LONG:
      value = [[JavaLangLong alloc] initWithLong:[ComItextpdfXmpXMPUtils convertToLongWithNSString:rawValue]];
      break;
      case ComItextpdfXmpImplXMPMetaImpl_VALUE_DOUBLE:
      value = [[JavaLangDouble alloc] initWithDouble:[ComItextpdfXmpXMPUtils convertToDoubleWithNSString:rawValue]];
      break;
      case ComItextpdfXmpImplXMPMetaImpl_VALUE_DATE:
      value = [ComItextpdfXmpXMPUtils convertToDateWithNSString:rawValue];
      break;
      case ComItextpdfXmpImplXMPMetaImpl_VALUE_CALENDAR:
      dt = [ComItextpdfXmpXMPUtils convertToDateWithNSString:rawValue];
      value = [((id<ComItextpdfXmpXMPDateTime>) nil_chk(dt)) getCalendar];
      break;
      case ComItextpdfXmpImplXMPMetaImpl_VALUE_BASE64:
      value = [ComItextpdfXmpXMPUtils decodeBase64WithNSString:rawValue];
      break;
      case ComItextpdfXmpImplXMPMetaImpl_VALUE_STRING:
      default:
      
#line 1440
      value = rawValue != nil || [((ComItextpdfXmpOptionsPropertyOptions *) nil_chk([propNode getOptions])) isCompositeProperty] ? rawValue : @"";
      break;
    }
  }
  
#line 1443
  return value;
}

- (void)copyAllFieldsTo:(ComItextpdfXmpImplXMPMetaImpl *)other {
  [super copyAllFieldsTo:other];
  other->packetHeader_ = packetHeader_;
  other->tree_ = tree_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XMPMetaImpl", NULL, 0x1, NULL },
    { "initWithComItextpdfXmpImplXMPNode:", "XMPMetaImpl", NULL, 0x1, NULL },
    { "appendArrayItemWithNSString:withNSString:withComItextpdfXmpOptionsPropertyOptions:withNSString:withComItextpdfXmpOptionsPropertyOptions:", "appendArrayItem", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "appendArrayItemWithNSString:withNSString:withNSString:", "appendArrayItem", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "countArrayItemsWithNSString:withNSString:", "countArrayItems", "I", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "deleteArrayItemWithNSString:withNSString:withInt:", "deleteArrayItem", "V", 0x1, NULL },
    { "deletePropertyWithNSString:withNSString:", "deleteProperty", "V", 0x1, NULL },
    { "deleteQualifierWithNSString:withNSString:withNSString:withNSString:", "deleteQualifier", "V", 0x1, NULL },
    { "deleteStructFieldWithNSString:withNSString:withNSString:withNSString:", "deleteStructField", "V", 0x1, NULL },
    { "doesPropertyExistWithNSString:withNSString:", "doesPropertyExist", "Z", 0x1, NULL },
    { "doesArrayItemExistWithNSString:withNSString:withInt:", "doesArrayItemExist", "Z", 0x1, NULL },
    { "doesStructFieldExistWithNSString:withNSString:withNSString:withNSString:", "doesStructFieldExist", "Z", 0x1, NULL },
    { "doesQualifierExistWithNSString:withNSString:withNSString:withNSString:", "doesQualifierExist", "Z", 0x1, NULL },
    { "getArrayItemWithNSString:withNSString:withInt:", "getArrayItem", "Lcom.itextpdf.xmp.properties.XMPProperty;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getLocalizedTextWithNSString:withNSString:withNSString:withNSString:", "getLocalizedText", "Lcom.itextpdf.xmp.properties.XMPProperty;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setLocalizedTextWithNSString:withNSString:withNSString:withNSString:withNSString:withComItextpdfXmpOptionsPropertyOptions:", "setLocalizedText", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setLocalizedTextWithNSString:withNSString:withNSString:withNSString:withNSString:", "setLocalizedText", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyWithNSString:withNSString:", "getProperty", "Lcom.itextpdf.xmp.properties.XMPProperty;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyWithNSString:withNSString:withInt:", "getProperty", "Lcom.itextpdf.xmp.properties.XMPProperty;", 0x4, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyObjectWithNSString:withNSString:withInt:", "getPropertyObject", "Ljava.lang.Object;", 0x4, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyBooleanWithNSString:withNSString:", "getPropertyBoolean", "Ljava.lang.Boolean;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyBooleanWithNSString:withNSString:withBoolean:withComItextpdfXmpOptionsPropertyOptions:", "setPropertyBoolean", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyBooleanWithNSString:withNSString:withBoolean:", "setPropertyBoolean", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyIntegerWithNSString:withNSString:", "getPropertyInteger", "Ljava.lang.Integer;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyIntegerWithNSString:withNSString:withInt:withComItextpdfXmpOptionsPropertyOptions:", "setPropertyInteger", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyIntegerWithNSString:withNSString:withInt:", "setPropertyInteger", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyLongWithNSString:withNSString:", "getPropertyLong", "Ljava.lang.Long;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyLongWithNSString:withNSString:withLong:withComItextpdfXmpOptionsPropertyOptions:", "setPropertyLong", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyLongWithNSString:withNSString:withLong:", "setPropertyLong", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyDoubleWithNSString:withNSString:", "getPropertyDouble", "Ljava.lang.Double;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyDoubleWithNSString:withNSString:withDouble:withComItextpdfXmpOptionsPropertyOptions:", "setPropertyDouble", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyDoubleWithNSString:withNSString:withDouble:", "setPropertyDouble", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyDateWithNSString:withNSString:", "getPropertyDate", "Lcom.itextpdf.xmp.XMPDateTime;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyDateWithNSString:withNSString:withComItextpdfXmpXMPDateTime:withComItextpdfXmpOptionsPropertyOptions:", "setPropertyDate", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyDateWithNSString:withNSString:withComItextpdfXmpXMPDateTime:", "setPropertyDate", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyCalendarWithNSString:withNSString:", "getPropertyCalendar", "Ljava.util.Calendar;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyCalendarWithNSString:withNSString:withJavaUtilCalendar:withComItextpdfXmpOptionsPropertyOptions:", "setPropertyCalendar", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyCalendarWithNSString:withNSString:withJavaUtilCalendar:", "setPropertyCalendar", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyBase64WithNSString:withNSString:", "getPropertyBase64", "[B", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getPropertyStringWithNSString:withNSString:", "getPropertyString", "Ljava.lang.String;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyBase64WithNSString:withNSString:withByteArray:withComItextpdfXmpOptionsPropertyOptions:", "setPropertyBase64", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyBase64WithNSString:withNSString:withByteArray:", "setPropertyBase64", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getQualifierWithNSString:withNSString:withNSString:withNSString:", "getQualifier", "Lcom.itextpdf.xmp.properties.XMPProperty;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getStructFieldWithNSString:withNSString:withNSString:withNSString:", "getStructField", "Lcom.itextpdf.xmp.properties.XMPProperty;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "iterator", NULL, "Lcom.itextpdf.xmp.XMPIterator;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "iteratorWithComItextpdfXmpOptionsIteratorOptions:", "iterator", "Lcom.itextpdf.xmp.XMPIterator;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "iteratorWithNSString:withNSString:withComItextpdfXmpOptionsIteratorOptions:", "iterator", "Lcom.itextpdf.xmp.XMPIterator;", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setArrayItemWithNSString:withNSString:withInt:withNSString:withComItextpdfXmpOptionsPropertyOptions:", "setArrayItem", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setArrayItemWithNSString:withNSString:withInt:withNSString:", "setArrayItem", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "insertArrayItemWithNSString:withNSString:withInt:withNSString:withComItextpdfXmpOptionsPropertyOptions:", "insertArrayItem", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "insertArrayItemWithNSString:withNSString:withInt:withNSString:", "insertArrayItem", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyWithNSString:withNSString:withId:withComItextpdfXmpOptionsPropertyOptions:", "setProperty", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setPropertyWithNSString:withNSString:withId:", "setProperty", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setQualifierWithNSString:withNSString:withNSString:withNSString:withNSString:withComItextpdfXmpOptionsPropertyOptions:", "setQualifier", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setQualifierWithNSString:withNSString:withNSString:withNSString:withNSString:", "setQualifier", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setStructFieldWithNSString:withNSString:withNSString:withNSString:withNSString:withComItextpdfXmpOptionsPropertyOptions:", "setStructField", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "setStructFieldWithNSString:withNSString:withNSString:withNSString:withNSString:", "setStructField", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getObjectName", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setObjectNameWithNSString:", "setObjectName", "V", 0x1, NULL },
    { "getPacketHeader", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "setPacketHeaderWithNSString:", "setPacketHeader", "V", 0x1, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "dumpObject", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "sort", NULL, "V", 0x1, NULL },
    { "normalizeWithComItextpdfXmpOptionsParseOptions:", "normalize", "V", 0x1, "Lcom.itextpdf.xmp.XMPException;" },
    { "getRoot", NULL, "Lcom.itextpdf.xmp.impl.XMPNode;", 0x1, NULL },
    { "doSetArrayItemWithComItextpdfXmpImplXMPNode:withInt:withNSString:withComItextpdfXmpOptionsPropertyOptions:withBoolean:", "doSetArrayItem", "V", 0x2, "Lcom.itextpdf.xmp.XMPException;" },
    { "setNodeWithComItextpdfXmpImplXMPNode:withId:withComItextpdfXmpOptionsPropertyOptions:withBoolean:", "setNode", "V", 0x0, "Lcom.itextpdf.xmp.XMPException;" },
    { "evaluateNodeValueWithInt:withComItextpdfXmpImplXMPNode:", "evaluateNodeValue", "Ljava.lang.Object;", 0x2, "Lcom.itextpdf.xmp.XMPException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "VALUE_STRING_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPMetaImpl_VALUE_STRING },
    { "VALUE_BOOLEAN_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPMetaImpl_VALUE_BOOLEAN },
    { "VALUE_INTEGER_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPMetaImpl_VALUE_INTEGER },
    { "VALUE_LONG_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPMetaImpl_VALUE_LONG },
    { "VALUE_DOUBLE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPMetaImpl_VALUE_DOUBLE },
    { "VALUE_DATE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPMetaImpl_VALUE_DATE },
    { "VALUE_CALENDAR_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPMetaImpl_VALUE_CALENDAR },
    { "VALUE_BASE64_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplXMPMetaImpl_VALUE_BASE64 },
    { "tree_", NULL, 0x2, "Lcom.itextpdf.xmp.impl.XMPNode;", NULL,  },
    { "packetHeader_", NULL, 0x2, "Ljava.lang.String;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplXMPMetaImpl = { "XMPMetaImpl", "com.itextpdf.xmp.impl", NULL, 0x1, 69, methods, 10, fields, 0, NULL};
  return &_ComItextpdfXmpImplXMPMetaImpl;
}

@end

@implementation ComItextpdfXmpImplXMPMetaImpl_$1


#line 429
- (NSString *)getValue {
  
#line 431
  return [((ComItextpdfXmpImplXMPNode *) nil_chk(val$itemNode_)) getValue];
}

- (ComItextpdfXmpOptionsPropertyOptions *)getOptions {
  
#line 437
  return [((ComItextpdfXmpImplXMPNode *) nil_chk(val$itemNode_)) getOptions];
}

- (NSString *)getLanguage {
  
#line 443
  return [((ComItextpdfXmpImplXMPNode *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(val$itemNode_)) getQualifierWithInt:1])) getValue];
}

- (NSString *)description {
  
#line 449
  return [((NSString *) nil_chk([((ComItextpdfXmpImplXMPNode *) nil_chk(val$itemNode_)) getValue])) description];
}

- (instancetype)initWithComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)capture$0 {
  val$itemNode_ = capture$0;
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getOptions", NULL, "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "getLanguage", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithComItextpdfXmpImplXMPNode:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$itemNode_", NULL, 0x1012, "Lcom.itextpdf.xmp.impl.XMPNode;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplXMPMetaImpl_$1 = { "$1", "com.itextpdf.xmp.impl", "XMPMetaImpl", 0x8000, 5, methods, 1, fields, 0, NULL};
  return &_ComItextpdfXmpImplXMPMetaImpl_$1;
}

@end

@implementation ComItextpdfXmpImplXMPMetaImpl_$2


#line 704
- (NSString *)getValue {
  
#line 706
  return val$value_ != nil ? [val$value_ description] : nil;
}

- (ComItextpdfXmpOptionsPropertyOptions *)getOptions {
  
#line 712
  return [((ComItextpdfXmpImplXMPNode *) nil_chk(val$propNode_)) getOptions];
}

- (NSString *)getLanguage {
  
#line 718
  return nil;
}

- (NSString *)description {
  
#line 724
  return [nil_chk(val$value_) description];
}

- (instancetype)initWithId:(id)capture$0
withComItextpdfXmpImplXMPNode:(ComItextpdfXmpImplXMPNode *)capture$1 {
  val$value_ = capture$0;
  val$propNode_ = capture$1;
  return [super init];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getValue", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "getOptions", NULL, "Lcom.itextpdf.xmp.options.PropertyOptions;", 0x1, NULL },
    { "getLanguage", NULL, "Ljava.lang.String;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "initWithId:withComItextpdfXmpImplXMPNode:", "init", NULL, 0x0, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$value_", NULL, 0x1012, "Ljava.lang.Object;", NULL,  },
    { "val$propNode_", NULL, 0x1012, "Lcom.itextpdf.xmp.impl.XMPNode;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplXMPMetaImpl_$2 = { "$2", "com.itextpdf.xmp.impl", "XMPMetaImpl", 0x8000, 5, methods, 2, fields, 0, NULL};
  return &_ComItextpdfXmpImplXMPMetaImpl_$2;
}

@end
