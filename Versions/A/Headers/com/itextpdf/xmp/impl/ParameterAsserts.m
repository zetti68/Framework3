//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/ParameterAsserts.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/ParameterAsserts.java"

#include "IOSClass.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPMeta.h"
#include "com/itextpdf/xmp/impl/ParameterAsserts.h"
#include "com/itextpdf/xmp/impl/XMPMetaImpl.h"


#line 42
@implementation ComItextpdfXmpImplParameterAsserts


#line 47
- (instancetype)init {
  return [super init];
}


#line 58
+ (void)assertArrayNameWithNSString:(NSString *)arrayName {
  
#line 60
  if (arrayName == nil || ((jint) [arrayName length]) == 0) {
    
#line 62
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty array name" withInt:ComItextpdfXmpXMPError_BADPARAM];
  }
}


#line 72
+ (void)assertPropNameWithNSString:(NSString *)propName {
  
#line 74
  if (propName == nil || ((jint) [propName length]) == 0) {
    
#line 76
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty property name" withInt:ComItextpdfXmpXMPError_BADPARAM];
  }
}


#line 86
+ (void)assertSchemaNSWithNSString:(NSString *)schemaNS {
  
#line 88
  if (schemaNS == nil || ((jint) [schemaNS length]) == 0) {
    
#line 90
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty schema namespace URI" withInt:ComItextpdfXmpXMPError_BADPARAM];
  }
}


#line 100
+ (void)assertPrefixWithNSString:(NSString *)prefix {
  
#line 102
  if (prefix == nil || ((jint) [prefix length]) == 0) {
    
#line 104
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty prefix" withInt:ComItextpdfXmpXMPError_BADPARAM];
  }
}


#line 114
+ (void)assertSpecificLangWithNSString:(NSString *)specificLang {
  
#line 116
  if (specificLang == nil || ((jint) [specificLang length]) == 0) {
    
#line 118
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty specific language" withInt:ComItextpdfXmpXMPError_BADPARAM];
  }
}


#line 128
+ (void)assertStructNameWithNSString:(NSString *)structName {
  
#line 130
  if (structName == nil || ((jint) [structName length]) == 0) {
    
#line 132
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty array name" withInt:ComItextpdfXmpXMPError_BADPARAM];
  }
}


#line 142
+ (void)assertNotNullWithId:(id)param {
  
#line 144
  if (param == nil) {
    
#line 146
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Parameter must not be null" withInt:ComItextpdfXmpXMPError_BADPARAM];
  }
  else if (([param isKindOfClass:[NSString class]]) && ((jint) [((NSString *) check_class_cast(param, [NSString class])) length]) == 0) {
    
#line 150
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Parameter must not be null or empty" withInt:ComItextpdfXmpXMPError_BADPARAM];
  }
}


#line 161
+ (void)assertImplementationWithComItextpdfXmpXMPMeta:(id<ComItextpdfXmpXMPMeta>)xmp {
  
#line 163
  if (xmp == nil) {
    
#line 165
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Parameter must not be null" withInt:
#line 166
    ComItextpdfXmpXMPError_BADPARAM];
  }
  else if (!([(id) xmp isKindOfClass:[ComItextpdfXmpImplXMPMetaImpl class]])) {
    
#line 170
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"The XMPMeta-object is not compatible with this implementation" withInt:
#line 171
    ComItextpdfXmpXMPError_BADPARAM];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ParameterAsserts", NULL, 0x2, NULL },
    { "assertArrayNameWithNSString:", "assertArrayName", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertPropNameWithNSString:", "assertPropName", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertSchemaNSWithNSString:", "assertSchemaNS", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertPrefixWithNSString:", "assertPrefix", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertSpecificLangWithNSString:", "assertSpecificLang", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertStructNameWithNSString:", "assertStructName", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertNotNullWithId:", "assertNotNull", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertImplementationWithComItextpdfXmpXMPMeta:", "assertImplementation", "V", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplParameterAsserts = { "ParameterAsserts", "com.itextpdf.xmp.impl", NULL, 0x0, 9, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfXmpImplParameterAsserts;
}

@end
