//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/Utils.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/Utils.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/impl/Utils.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"

BOOL ComItextpdfXmpImplUtils_initialized = NO;


#line 42
@implementation ComItextpdfXmpImplUtils

IOSBooleanArray * ComItextpdfXmpImplUtils_xmlNameStartChars_;
IOSBooleanArray * ComItextpdfXmpImplUtils_xmlNameChars_;


#line 62
- (instancetype)init {
  return [super init];
}


#line 83
+ (NSString *)normalizeLangValueWithNSString:(NSString *)value {
  
#line 86
  if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_X_DEFAULT_())) isEqual:value]) {
    
#line 88
    return value;
  }
  
#line 91
  jint subTag = 1;
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] init];
  
#line 94
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(value)) length]); i++) {
    
#line 96
    switch ([value charAtWithInt:i]) {
      
#line 98
      case '-':
      case '_':
      
#line 101
      (void) [buffer appendWithChar:'-'];
      subTag++;
      break;
      case ' ':
      
#line 106
      break;
      default:
      
#line 109
      if (subTag != 2) {
        
#line 111
        (void) [buffer appendWithChar:[JavaLangCharacter toLowerCaseWithChar:[value charAtWithInt:i]]];
      }
      else {
        
#line 115
        (void) [buffer appendWithChar:[JavaLangCharacter toUpperCaseWithChar:[value charAtWithInt:i]]];
      }
    }
  }
  
#line 120
  return [buffer description];
}


#line 142
+ (IOSObjectArray *)splitNameAndValueWithNSString:(NSString *)selector {
  
#line 145
  jint eq = [((NSString *) nil_chk(selector)) indexOf:'='];
  jint pos = 1;
  if ([selector charAtWithInt:pos] == '?') {
    
#line 149
    pos++;
  }
  NSString *name = [selector substring:pos endIndex:eq];
  
#line 154
  pos = eq + 1;
  jchar quote = [selector charAtWithInt:pos];
  pos++;
  jint end = ((jint) [selector length]) - 2;
  JavaLangStringBuffer *value = [[JavaLangStringBuffer alloc] initWithInt:end - eq];
  while (pos < end) {
    
#line 161
    (void) [value appendWithChar:[selector charAtWithInt:pos]];
    pos++;
    if ([selector charAtWithInt:pos] == quote) {
      
#line 166
      pos++;
    }
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ name, [value description] } count:2 type:[IOSClass classWithClass:[NSString class]]];
}


#line 182
+ (jboolean)isInternalPropertyWithNSString:(NSString *)schema
                              withNSString:(NSString *)prop {
  
#line 184
  jboolean isInternal = NO;
  
#line 186
  if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_DC_())) isEqual:schema]) {
    
#line 188
    if ([@"dc:format" isEqual:prop] || [@"dc:language" isEqual:prop]) {
      
#line 190
      isInternal = YES;
    }
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_XMP_())) isEqual:schema]) {
    
#line 195
    if ([@"xmp:BaseURL" isEqual:prop] || [@"xmp:CreatorTool" isEqual:prop] ||
#line 196
    [@"xmp:Format" isEqual:prop] || [@"xmp:Locale" isEqual:prop] ||
#line 197
    [@"xmp:MetadataDate" isEqual:prop] || [@"xmp:ModifyDate" isEqual:prop]) {
      
#line 199
      isInternal = YES;
    }
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_PDF_())) isEqual:schema]) {
    
#line 204
    if ([@"pdf:BaseURL" isEqual:prop] || [@"pdf:Creator" isEqual:prop] ||
#line 205
    [@"pdf:ModDate" isEqual:prop] || [@"pdf:PDFVersion" isEqual:prop] ||
#line 206
    [@"pdf:Producer" isEqual:prop]) {
      
#line 208
      isInternal = YES;
    }
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_TIFF_())) isEqual:schema]) {
    
#line 213
    isInternal = YES;
    if ([@"tiff:ImageDescription" isEqual:prop] || [@"tiff:Artist" isEqual:prop] ||
#line 215
    [@"tiff:Copyright" isEqual:prop]) {
      
#line 217
      isInternal = NO;
    }
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_EXIF_())) isEqual:schema]) {
    
#line 222
    isInternal = YES;
    if ([@"exif:UserComment" isEqual:prop]) {
      
#line 225
      isInternal = NO;
    }
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_EXIF_AUX_())) isEqual:schema]) {
    
#line 230
    isInternal = YES;
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_PHOTOSHOP_())) isEqual:schema]) {
    
#line 234
    if ([@"photoshop:ICCProfile" isEqual:prop]) {
      
#line 236
      isInternal = YES;
    }
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_CAMERARAW_())) isEqual:schema]) {
    
#line 241
    if ([@"crs:Version" isEqual:prop] || [@"crs:RawFileName" isEqual:prop] ||
#line 242
    [@"crs:ToneCurveName" isEqual:prop]) {
      
#line 244
      isInternal = YES;
    }
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_ADOBESTOCKPHOTO_())) isEqual:schema]) {
    
#line 249
    isInternal = YES;
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_XMP_MM_())) isEqual:schema]) {
    
#line 253
    isInternal = YES;
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_TYPE_TEXT_())) isEqual:schema]) {
    
#line 257
    isInternal = YES;
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_TYPE_PAGEDFILE_())) isEqual:schema]) {
    
#line 261
    isInternal = YES;
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_TYPE_GRAPHICS_())) isEqual:schema]) {
    
#line 265
    isInternal = YES;
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_TYPE_IMAGE_())) isEqual:schema]) {
    
#line 269
    isInternal = YES;
  }
  else if ([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_TYPE_FONT_())) isEqual:schema]) {
    
#line 273
    isInternal = YES;
  }
  
#line 276
  return isInternal;
}


#line 293
+ (jboolean)checkUUIDFormatWithNSString:(NSString *)uuid {
  
#line 295
  jboolean result = YES;
  jint delimCnt = 0;
  jint delimPos = 0;
  
#line 299
  if (uuid == nil) {
    
#line 301
    return NO;
  }
  
#line 304
  for (delimPos = 0; delimPos < ((jint) [((NSString *) nil_chk(uuid)) length]); delimPos++) {
    
#line 306
    if ([uuid charAtWithInt:delimPos] == '-') {
      
#line 308
      delimCnt++;
      result = (result &&
#line 310
      (delimPos == 8 || delimPos == 13 || delimPos == 18 || delimPos == 23));
    }
  }
  
#line 314
  return result && ComItextpdfXmpImplUtils_UUID_SEGMENT_COUNT == delimCnt && ComItextpdfXmpImplUtils_UUID_LENGTH == delimPos;
}


#line 327
+ (jboolean)isXMLNameWithNSString:(NSString *)name {
  
#line 329
  if (((jint) [((NSString *) nil_chk(name)) length]) > 0 && ![ComItextpdfXmpImplUtils isNameStartCharWithChar:[name charAtWithInt:0]]) {
    
#line 331
    return NO;
  }
  for (jint i = 1; i < ((jint) [name length]); i++) {
    
#line 335
    if (![ComItextpdfXmpImplUtils isNameCharWithChar:[name charAtWithInt:i]]) {
      
#line 337
      return NO;
    }
  }
  return YES;
}


#line 351
+ (jboolean)isXMLNameNSWithNSString:(NSString *)name {
  
#line 353
  if (((jint) [((NSString *) nil_chk(name)) length]) > 0 && (![ComItextpdfXmpImplUtils isNameStartCharWithChar:[name charAtWithInt:0]] || [name charAtWithInt:0] == ':')) {
    
#line 355
    return NO;
  }
  for (jint i = 1; i < ((jint) [name length]); i++) {
    
#line 359
    if (![ComItextpdfXmpImplUtils isNameCharWithChar:[name charAtWithInt:i]] || [name charAtWithInt:i] == ':') {
      
#line 361
      return NO;
    }
  }
  return YES;
}


#line 372
+ (jboolean)isControlCharWithChar:(jchar)c {
  
#line 374
  return (c <= (jint) 0x1F || c == (jint) 0x7F) &&
#line 375
  c != (jint) 0x09 && c != (jint) 0x0A && c != (jint) 0x0D;
}


#line 391
+ (NSString *)escapeXMLWithNSString:(NSString *)value
                        withBoolean:(jboolean)forAttribute
                        withBoolean:(jboolean)escapeWhitespaces {
  
#line 394
  jboolean needsEscaping = NO;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(value)) length]); i++) {
    
#line 397
    jchar c = [value charAtWithInt:i];
    if (
#line 399
    c == '<' || c == '>' || c == '&' ||
#line 400
    (escapeWhitespaces && (c == 0x0009 || c == 0x000a || c == 0x000d)) ||
#line 401
    (forAttribute && c == '"')) {
      
#line 403
      needsEscaping = YES;
      break;
    }
  }
  
#line 408
  if (!needsEscaping) {
    
#line 411
    return value;
  }
  else {
    
#line 416
    JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] initWithInt:((jint) [value length]) * 4 / 3];
    for (jint i = 0; i < ((jint) [value length]); i++) {
      
#line 419
      jchar c = [value charAtWithInt:i];
      if (!(escapeWhitespaces && (c == 0x0009 || c == 0x000a || c == 0x000d))) {
        
#line 422
        switch (c) {
          
#line 426
          case '<':
          
#line 426
          (void) [buffer appendWithNSString:@"&lt;"];
          
#line 426
          continue;
          case '>':
          
#line 427
          (void) [buffer appendWithNSString:@"&gt;"];
          
#line 427
          continue;
          case '&':
          
#line 428
          (void) [buffer appendWithNSString:@"&amp;"];
          
#line 428
          continue;
          case '"':
          
#line 429
          (void) [buffer appendWithNSString:forAttribute ? @"&quot;" : @"\""];
          
#line 429
          continue;
          default:
          
#line 430
          (void) [buffer appendWithChar:c];
          
#line 430
          continue;
        }
      }
      else {
        
#line 437
        (void) [buffer appendWithNSString:@"&#x"];
        (void) [buffer appendWithNSString:[((NSString *) nil_chk([JavaLangInteger toHexStringWithInt:c])) uppercaseString]];
        (void) [buffer appendWithChar:';'];
      }
    }
    return [buffer description];
  }
}


#line 454
+ (NSString *)removeControlCharsWithNSString:(NSString *)value {
  
#line 456
  JavaLangStringBuffer *buffer = [[JavaLangStringBuffer alloc] initWithNSString:value];
  for (jint i = 0; i < [buffer sequenceLength]; i++) {
    
#line 459
    if ([ComItextpdfXmpImplUtils isControlCharWithChar:[buffer charAtWithInt:i]]) {
      
#line 461
      [buffer setCharAtWithInt:i withChar:' '];
    }
  }
  return [buffer description];
}


#line 476
+ (jboolean)isNameStartCharWithChar:(jchar)ch {
  
#line 478
  return
#line 479
  (ch <= (jint) 0xFF && IOSBooleanArray_Get(nil_chk(ComItextpdfXmpImplUtils_xmlNameStartChars_), ch)) ||
#line 480
  (ch >= (jint) 0x100 && ch <= (jint) 0x2FF) ||
#line 481
  (ch >= (jint) 0x370 && ch <= (jint) 0x37D) ||
#line 482
  (ch >= (jint) 0x37F && ch <= (jint) 0x1FFF) ||
#line 483
  (ch >= (jint) 0x200C && ch <= (jint) 0x200D) ||
#line 484
  (ch >= (jint) 0x2070 && ch <= (jint) 0x218F) ||
#line 485
  (ch >= (jint) 0x2C00 && ch <= (jint) 0x2FEF) ||
#line 486
  (ch >= (jint) 0x3001 && ch <= (jint) 0xD7FF) ||
#line 487
  (ch >= (jint) 0xF900 && ch <= (jint) 0xFDCF) ||
#line 488
  (ch >= (jint) 0xFDF0 && ch <= (jint) 0xFFFD) ||
#line 489
  (ch >= (jint) 0x10000 && ch <= (jint) 0xEFFFF);
}


#line 501
+ (jboolean)isNameCharWithChar:(jchar)ch {
  
#line 503
  return
#line 504
  (ch <= (jint) 0xFF && IOSBooleanArray_Get(nil_chk(ComItextpdfXmpImplUtils_xmlNameChars_), ch)) ||
#line 505
  [ComItextpdfXmpImplUtils isNameStartCharWithChar:ch] ||
#line 506
  (ch >= (jint) 0x300 && ch <= (jint) 0x36F) ||
#line 507
  (ch >= (jint) 0x203F && ch <= (jint) 0x2040);
}


#line 516
+ (void)initCharTables {
  
#line 518
  ComItextpdfXmpImplUtils_xmlNameChars_ = [IOSBooleanArray arrayWithLength:(jint) 0x0100];
  ComItextpdfXmpImplUtils_xmlNameStartChars_ = [IOSBooleanArray arrayWithLength:(jint) 0x0100];
  
#line 521
  for (jchar ch = 0; ch < ComItextpdfXmpImplUtils_xmlNameChars_->size_; ch++) {
    
#line 523
    *IOSBooleanArray_GetRef(ComItextpdfXmpImplUtils_xmlNameStartChars_, ch) = (
#line 524
    ch == ':' ||
#line 525
    ('A' <= ch && ch <= 'Z') ||
#line 526
    ch == '_' ||
#line 527
    ('a' <= ch && ch <= 'z') ||
#line 528
    ((jint) 0xC0 <= ch && ch <= (jint) 0xD6) ||
#line 529
    ((jint) 0xD8 <= ch && ch <= (jint) 0xF6) ||
#line 530
    ((jint) 0xF8 <= ch && ch <= (jint) 0xFF));
    
#line 532
    *IOSBooleanArray_GetRef(ComItextpdfXmpImplUtils_xmlNameChars_, ch) = (
#line 533
    IOSBooleanArray_Get(ComItextpdfXmpImplUtils_xmlNameStartChars_, ch) ||
#line 534
    ch == '-' ||
#line 535
    ch == '.' ||
#line 536
    ('0' <= ch && ch <= '9') ||
#line 537
    ch == (jint) 0xB7);
  }
}

+ (void)initialize {
  if (self == [ComItextpdfXmpImplUtils class]) {
    {
      
#line 55
      [ComItextpdfXmpImplUtils initCharTables];
    }
    ComItextpdfXmpImplUtils_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Utils", NULL, 0x2, NULL },
    { "normalizeLangValueWithNSString:", "normalizeLangValue", "Ljava.lang.String;", 0x9, NULL },
    { "splitNameAndValueWithNSString:", "splitNameAndValue", "[Ljava.lang.String;", 0x8, NULL },
    { "isInternalPropertyWithNSString:withNSString:", "isInternalProperty", "Z", 0x8, NULL },
    { "checkUUIDFormatWithNSString:", "checkUUIDFormat", "Z", 0x8, NULL },
    { "isXMLNameWithNSString:", "isXMLName", "Z", 0x9, NULL },
    { "isXMLNameNSWithNSString:", "isXMLNameNS", "Z", 0x9, NULL },
    { "isControlCharWithChar:", "isControlChar", "Z", 0x8, NULL },
    { "escapeXMLWithNSString:withBoolean:withBoolean:", "escapeXML", "Ljava.lang.String;", 0x9, NULL },
    { "removeControlCharsWithNSString:", "removeControlChars", "Ljava.lang.String;", 0x8, NULL },
    { "isNameStartCharWithChar:", "isNameStartChar", "Z", 0xa, NULL },
    { "isNameCharWithChar:", "isNameChar", "Z", 0xa, NULL },
    { "initCharTables", NULL, "V", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UUID_SEGMENT_COUNT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplUtils_UUID_SEGMENT_COUNT },
    { "UUID_LENGTH_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfXmpImplUtils_UUID_LENGTH },
    { "xmlNameStartChars_", NULL, 0xa, "[Z", &ComItextpdfXmpImplUtils_xmlNameStartChars_,  },
    { "xmlNameChars_", NULL, 0xa, "[Z", &ComItextpdfXmpImplUtils_xmlNameChars_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplUtils = { "Utils", "com.itextpdf.xmp.impl", NULL, 0x1, 13, methods, 4, fields, 0, NULL};
  return &_ComItextpdfXmpImplUtils;
}

@end
