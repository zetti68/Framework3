//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPSchemaRegistryImpl.java
//

#ifndef _ComItextpdfXmpImplXMPSchemaRegistryImpl_H_
#define _ComItextpdfXmpImplXMPSchemaRegistryImpl_H_

@class ComItextpdfXmpOptionsAliasOptions;
@class IOSObjectArray;
@class JavaUtilRegexPattern;
@protocol JavaUtilMap;

#import "JreEmulation.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/XMPSchemaRegistry.h"
#include "com/itextpdf/xmp/properties/XMPAliasInfo.h"

@interface ComItextpdfXmpImplXMPSchemaRegistryImpl : NSObject < ComItextpdfXmpXMPSchemaRegistry, ComItextpdfXmpXMPConst > {
 @public
  id<JavaUtilMap> namespaceToPrefixMap_;
  id<JavaUtilMap> prefixToNamespaceMap_;
  id<JavaUtilMap> aliasMap_;
  JavaUtilRegexPattern *p_;
}

- (instancetype)init;

- (NSString *)registerNamespaceWithNSString:(NSString *)namespaceURI
                               withNSString:(NSString *)suggestedPrefix;

- (void)deleteNamespaceWithNSString:(NSString *)namespaceURI;

- (NSString *)getNamespacePrefixWithNSString:(NSString *)namespaceURI;

- (NSString *)getNamespaceURIWithNSString:(NSString *)namespacePrefix;

- (id<JavaUtilMap>)getNamespaces;

- (id<JavaUtilMap>)getPrefixes;

- (void)registerStandardNamespaces;

- (id<ComItextpdfXmpPropertiesXMPAliasInfo>)resolveAliasWithNSString:(NSString *)aliasNS
                                                        withNSString:(NSString *)aliasProp;

- (id<ComItextpdfXmpPropertiesXMPAliasInfo>)findAliasWithNSString:(NSString *)qname;

- (IOSObjectArray *)findAliasesWithNSString:(NSString *)aliasNS;

- (void)registerAliasWithNSString:(NSString *)aliasNS
                     withNSString:(NSString *)aliasProp
                     withNSString:(NSString *)actualNS
                     withNSString:(NSString *)actualProp
withComItextpdfXmpOptionsAliasOptions:(ComItextpdfXmpOptionsAliasOptions *)aliasForm;

- (id<JavaUtilMap>)getAliases;

- (void)registerStandardAliases;

- (void)copyAllFieldsTo:(ComItextpdfXmpImplXMPSchemaRegistryImpl *)other;

@end

__attribute__((always_inline)) inline void ComItextpdfXmpImplXMPSchemaRegistryImpl_init() {}

J2OBJC_FIELD_SETTER(ComItextpdfXmpImplXMPSchemaRegistryImpl, namespaceToPrefixMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComItextpdfXmpImplXMPSchemaRegistryImpl, prefixToNamespaceMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComItextpdfXmpImplXMPSchemaRegistryImpl, aliasMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComItextpdfXmpImplXMPSchemaRegistryImpl, p_, JavaUtilRegexPattern *)

@interface ComItextpdfXmpImplXMPSchemaRegistryImpl_$1 : NSObject < ComItextpdfXmpPropertiesXMPAliasInfo > {
 @public
  NSString *val$actualNS_;
  NSString *val$actualPrefix_;
  NSString *val$actualProp_;
  ComItextpdfXmpOptionsAliasOptions *val$aliasOpts_;
}

- (NSString *)getNamespace;

- (NSString *)getPrefix;

- (NSString *)getPropName;

- (ComItextpdfXmpOptionsAliasOptions *)getAliasForm;

- (NSString *)description;

- (instancetype)initWithNSString:(NSString *)capture$0
                    withNSString:(NSString *)capture$1
                    withNSString:(NSString *)capture$2
withComItextpdfXmpOptionsAliasOptions:(ComItextpdfXmpOptionsAliasOptions *)capture$3;

@end

__attribute__((always_inline)) inline void ComItextpdfXmpImplXMPSchemaRegistryImpl_$1_init() {}

J2OBJC_FIELD_SETTER(ComItextpdfXmpImplXMPSchemaRegistryImpl_$1, val$actualNS_, NSString *)
J2OBJC_FIELD_SETTER(ComItextpdfXmpImplXMPSchemaRegistryImpl_$1, val$actualPrefix_, NSString *)
J2OBJC_FIELD_SETTER(ComItextpdfXmpImplXMPSchemaRegistryImpl_$1, val$actualProp_, NSString *)
J2OBJC_FIELD_SETTER(ComItextpdfXmpImplXMPSchemaRegistryImpl_$1, val$aliasOpts_, ComItextpdfXmpOptionsAliasOptions *)

#endif // _ComItextpdfXmpImplXMPSchemaRegistryImpl_H_
