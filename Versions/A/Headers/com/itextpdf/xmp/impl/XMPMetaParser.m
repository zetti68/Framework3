//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPMetaParser.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/impl/XMPMetaParser.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPMeta.h"
#include "com/itextpdf/xmp/impl/ByteBuffer.h"
#include "com/itextpdf/xmp/impl/FixASCIIControlsReader.h"
#include "com/itextpdf/xmp/impl/Latin1Converter.h"
#include "com/itextpdf/xmp/impl/ParameterAsserts.h"
#include "com/itextpdf/xmp/impl/ParseRDF.h"
#include "com/itextpdf/xmp/impl/XMPMetaImpl.h"
#include "com/itextpdf/xmp/impl/XMPMetaParser.h"
#include "com/itextpdf/xmp/impl/XMPNormalizer.h"
#include "com/itextpdf/xmp/options/ParseOptions.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "org/w3c/dom/Document.h"
#include "org/w3c/dom/Node.h"
#include "org/w3c/dom/NodeList.h"
#include "org/w3c/dom/ProcessingInstruction.h"
#include "org/xml/sax/InputSource.h"

BOOL ComItextpdfXmpImplXMPMetaParser_initialized = NO;


#line 59
@implementation ComItextpdfXmpImplXMPMetaParser

id ComItextpdfXmpImplXMPMetaParser_XMP_RDF_;


#line 68
- (instancetype)init {
  return [super init];
}


#line 86
+ (id<ComItextpdfXmpXMPMeta>)parseWithId:(id)input
   withComItextpdfXmpOptionsParseOptions:(ComItextpdfXmpOptionsParseOptions *)options {
  
#line 88
  [ComItextpdfXmpImplParameterAsserts assertNotNullWithId:input];
  options = options != nil ? options : [[ComItextpdfXmpOptionsParseOptions alloc] init];
  
#line 91
  id<OrgW3cDomDocument> document = [ComItextpdfXmpImplXMPMetaParser parseXmlWithId:input withComItextpdfXmpOptionsParseOptions:options];
  
#line 93
  jboolean xmpmetaRequired = [options getRequireXMPMeta];
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:3 type:[IOSClass classWithClass:[NSObject class]]];
  result = [ComItextpdfXmpImplXMPMetaParser findRootNodeWithOrgW3cDomNode:document withBoolean:xmpmetaRequired withNSObjectArray:result];
  
#line 97
  if (result != nil && IOSObjectArray_Get(result, 1) == ComItextpdfXmpImplXMPMetaParser_XMP_RDF_) {
    ComItextpdfXmpImplXMPMetaImpl *xmp = [ComItextpdfXmpImplParseRDF parseWithOrgW3cDomNode:(id<OrgW3cDomNode>) check_protocol_cast(IOSObjectArray_Get(result, 0), @protocol(OrgW3cDomNode))];
    [((ComItextpdfXmpImplXMPMetaImpl *) nil_chk(xmp)) setPacketHeaderWithNSString:(NSString *) check_class_cast(IOSObjectArray_Get(result, 2), [NSString class])];
    
#line 102
    if (![options getOmitNormalization]) {
      return [ComItextpdfXmpImplXMPNormalizer processWithComItextpdfXmpImplXMPMetaImpl:xmp withComItextpdfXmpOptionsParseOptions:options];
    }
    else {
      
#line 105
      return xmp;
    }
  }
  else {
    return [[ComItextpdfXmpImplXMPMetaImpl alloc] init];
  }
}


#line 135
+ (id<OrgW3cDomDocument>)parseXmlWithId:(id)input
  withComItextpdfXmpOptionsParseOptions:(ComItextpdfXmpOptionsParseOptions *)options {
  
#line 137
  if ([input isKindOfClass:[JavaIoInputStream class]]) {
    return [ComItextpdfXmpImplXMPMetaParser parseXmlFromInputStreamWithJavaIoInputStream:(JavaIoInputStream *) check_class_cast(input, [JavaIoInputStream class]) withComItextpdfXmpOptionsParseOptions:options];
  }
  else
#line 139
  if ([input isKindOfClass:[IOSByteArray class]]) {
    return [ComItextpdfXmpImplXMPMetaParser parseXmlFromBytebufferWithComItextpdfXmpImplByteBuffer:[[ComItextpdfXmpImplByteBuffer alloc] initWithByteArray:(IOSByteArray *) check_class_cast(input, [IOSByteArray class])] withComItextpdfXmpOptionsParseOptions:
#line 141
    options];
  }
  else {
    
#line 143
    return [ComItextpdfXmpImplXMPMetaParser parseXmlFromStringWithNSString:(NSString *) check_class_cast(input, [NSString class]) withComItextpdfXmpOptionsParseOptions:options];
  }
}


#line 159
+ (id<OrgW3cDomDocument>)parseXmlFromInputStreamWithJavaIoInputStream:(JavaIoInputStream *)stream
                                withComItextpdfXmpOptionsParseOptions:(ComItextpdfXmpOptionsParseOptions *)options {
  
#line 161
  if (![((ComItextpdfXmpOptionsParseOptions *) nil_chk(options)) getAcceptLatin1] && ![options getFixControlChars]) {
    return [ComItextpdfXmpImplXMPMetaParser parseInputSourceWithOrgXmlSaxInputSource:[[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:stream]];
  }
  else {
    @try {
      ComItextpdfXmpImplByteBuffer *buffer = [[ComItextpdfXmpImplByteBuffer alloc] initWithJavaIoInputStream:stream];
      return [ComItextpdfXmpImplXMPMetaParser parseXmlFromBytebufferWithComItextpdfXmpImplByteBuffer:buffer withComItextpdfXmpOptionsParseOptions:options];
    }
    @catch (
#line 168
    JavaIoIOException *e) {
      @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Error reading the XML-file" withInt:
#line 170
      ComItextpdfXmpXMPError_BADSTREAM withJavaLangThrowable:e];
    }
  }
}


#line 187
+ (id<OrgW3cDomDocument>)parseXmlFromBytebufferWithComItextpdfXmpImplByteBuffer:(ComItextpdfXmpImplByteBuffer *)buffer
                                          withComItextpdfXmpOptionsParseOptions:(ComItextpdfXmpOptionsParseOptions *)options {
  
#line 189
  OrgXmlSaxInputSource *source = [[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:[((ComItextpdfXmpImplByteBuffer *) nil_chk(buffer)) getByteStream]];
  @try {
    return [ComItextpdfXmpImplXMPMetaParser parseInputSourceWithOrgXmlSaxInputSource:source];
  }
  @catch (
#line 192
  ComItextpdfXmpXMPException *e) {
    if ([((ComItextpdfXmpXMPException *) nil_chk(e)) getErrorCode] == ComItextpdfXmpXMPError_BADXML ||
#line 194
    [e getErrorCode] == ComItextpdfXmpXMPError_BADSTREAM) {
      if ([((ComItextpdfXmpOptionsParseOptions *) nil_chk(options)) getAcceptLatin1]) {
        buffer = [ComItextpdfXmpImplLatin1Converter convertWithComItextpdfXmpImplByteBuffer:buffer];
      }
      
#line 199
      if ([options getFixControlChars]) {
        @try {
          NSString *encoding = [((ComItextpdfXmpImplByteBuffer *) nil_chk(buffer)) getEncoding];
          JavaIoReader *fixReader = [[ComItextpdfXmpImplFixASCIIControlsReader alloc] initWithJavaIoReader:
#line 203
          [[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:[buffer getByteStream] withNSString:
#line 204
          encoding]];
          return [ComItextpdfXmpImplXMPMetaParser parseInputSourceWithOrgXmlSaxInputSource:[[OrgXmlSaxInputSource alloc] initWithJavaIoReader:fixReader]];
        }
        @catch (
#line 206
        JavaIoUnsupportedEncodingException *e1) {
          
#line 209
          @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Unsupported Encoding" withInt:
#line 210
          ComItextpdfXmpXMPError_INTERNALFAILURE withJavaLangThrowable:e];
        }
      }
      source = [[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:[((ComItextpdfXmpImplByteBuffer *) nil_chk(buffer)) getByteStream]];
      return [ComItextpdfXmpImplXMPMetaParser parseInputSourceWithOrgXmlSaxInputSource:source];
    }
    else {
      
#line 216
      @throw e;
    }
  }
}


#line 233
+ (id<OrgW3cDomDocument>)parseXmlFromStringWithNSString:(NSString *)input
                  withComItextpdfXmpOptionsParseOptions:(ComItextpdfXmpOptionsParseOptions *)options {
  
#line 235
  OrgXmlSaxInputSource *source = [[OrgXmlSaxInputSource alloc] initWithJavaIoReader:[[JavaIoStringReader alloc] initWithNSString:input]];
  @try {
    return [ComItextpdfXmpImplXMPMetaParser parseInputSourceWithOrgXmlSaxInputSource:source];
  }
  @catch (
#line 238
  ComItextpdfXmpXMPException *e) {
    if ([((ComItextpdfXmpXMPException *) nil_chk(e)) getErrorCode] == ComItextpdfXmpXMPError_BADXML &&
#line 240
    [((ComItextpdfXmpOptionsParseOptions *) nil_chk(options)) getFixControlChars]) {
      source = [[OrgXmlSaxInputSource alloc] initWithJavaIoReader:[[ComItextpdfXmpImplFixASCIIControlsReader alloc] initWithJavaIoReader:
#line 242
      [[JavaIoStringReader alloc] initWithNSString:input]]];
      return [ComItextpdfXmpImplXMPMetaParser parseInputSourceWithOrgXmlSaxInputSource:source];
    }
    else {
      
#line 245
      @throw e;
    }
  }
}


#line 259
+ (id<OrgW3cDomDocument>)parseInputSourceWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source {
  
#line 261
  return nil;
}


#line 297
+ (IOSObjectArray *)findRootNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)root
                                      withBoolean:(jboolean)xmpmetaRequired
                                withNSObjectArray:(IOSObjectArray *)result {
  
#line 303
  if (root != nil && [root getChildNodes] != nil) {
    id<OrgW3cDomNodeList> children = [root getChildNodes];
    for (jint i = 0; i < [((id<OrgW3cDomNodeList>) nil_chk(children)) getLength]; i++) {
      root = [children itemWithInt:i];
      if (OrgW3cDomNode_PROCESSING_INSTRUCTION_NODE == [((id<OrgW3cDomNode>) nil_chk(root)) getNodeType] &&
#line 308
      [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_XMP_PI_())) isEqual:
#line 309
      [((id<OrgW3cDomProcessingInstruction>) check_protocol_cast(root, @protocol(OrgW3cDomProcessingInstruction))) getTarget]]) {
        
#line 314
        if (result != nil) {
          IOSObjectArray_Set(result, 2, [((id<OrgW3cDomProcessingInstruction>) check_protocol_cast(root, @protocol(OrgW3cDomProcessingInstruction))) getData]);
        }
      }
      else
#line 317
      if (OrgW3cDomNode_TEXT_NODE != [root getNodeType] &&
#line 318
      OrgW3cDomNode_PROCESSING_INSTRUCTION_NODE != [root getNodeType]) {
        
#line 320
        NSString *rootNS = [root getNamespaceURI];
        NSString *rootLocal = [root getLocalName];
        if (([((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_TAG_XMPMETA_())) isEqual:rootLocal] || [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_TAG_XAPMETA_())) isEqual:
#line 323
        rootLocal]) && [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_X_())) isEqual:rootNS]) {
          
#line 326
          return [ComItextpdfXmpImplXMPMetaParser findRootNodeWithOrgW3cDomNode:root withBoolean:NO withNSObjectArray:result];
        }
        else
#line 327
        if (!xmpmetaRequired && [@"RDF" isEqual:rootLocal] &&
#line 328
        [((NSString *) nil_chk(ComItextpdfXmpXMPConst_get_NS_RDF_())) isEqual:rootNS]) {
          if (result != nil) {
            IOSObjectArray_Set(result, 0, root);
            IOSObjectArray_Set(result, 1, ComItextpdfXmpImplXMPMetaParser_XMP_RDF_);
          }
          return result;
        }
        else {
          IOSObjectArray *newResult = [ComItextpdfXmpImplXMPMetaParser findRootNodeWithOrgW3cDomNode:root withBoolean:
#line 337
          xmpmetaRequired withNSObjectArray:result];
          if (newResult != nil) {
            return newResult;
          }
          else {
            
#line 341
            continue;
          }
        }
      }
    }
  }
  
#line 348
  return nil;
}

+ (void)initialize {
  if (self == [ComItextpdfXmpImplXMPMetaParser class]) {
    ComItextpdfXmpImplXMPMetaParser_XMP_RDF_ =
#line 61
    [[NSObject alloc] init];
    ComItextpdfXmpImplXMPMetaParser_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XMPMetaParser", NULL, 0x2, NULL },
    { "parseWithId:withComItextpdfXmpOptionsParseOptions:", "parse", "Lcom.itextpdf.xmp.XMPMeta;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "parseXmlWithId:withComItextpdfXmpOptionsParseOptions:", "parseXml", "Lorg.w3c.dom.Document;", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "parseXmlFromInputStreamWithJavaIoInputStream:withComItextpdfXmpOptionsParseOptions:", "parseXmlFromInputStream", "Lorg.w3c.dom.Document;", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "parseXmlFromBytebufferWithComItextpdfXmpImplByteBuffer:withComItextpdfXmpOptionsParseOptions:", "parseXmlFromBytebuffer", "Lorg.w3c.dom.Document;", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "parseXmlFromStringWithNSString:withComItextpdfXmpOptionsParseOptions:", "parseXmlFromString", "Lorg.w3c.dom.Document;", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "parseInputSourceWithOrgXmlSaxInputSource:", "parseInputSource", "Lorg.w3c.dom.Document;", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "findRootNodeWithOrgW3cDomNode:withBoolean:withNSObjectArray:", "findRootNode", "[Ljava.lang.Object;", 0xa, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "XMP_RDF_", NULL, 0x1a, "Ljava.lang.Object;", &ComItextpdfXmpImplXMPMetaParser_XMP_RDF_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpImplXMPMetaParser = { "XMPMetaParser", "com.itextpdf.xmp.impl", NULL, 0x1, 8, methods, 1, fields, 0, NULL};
  return &_ComItextpdfXmpImplXMPMetaParser;
}

@end
