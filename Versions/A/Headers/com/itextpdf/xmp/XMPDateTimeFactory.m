//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/XMPDateTimeFactory.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/XMPDateTimeFactory.java"

#include "IOSClass.h"
#include "com/itextpdf/xmp/XMPDateTime.h"
#include "com/itextpdf/xmp/XMPDateTimeFactory.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/impl/XMPDateTimeImpl.h"
#include "java/lang/Long.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/TimeZone.h"

BOOL ComItextpdfXmpXMPDateTimeFactory_initialized = NO;


#line 47
@implementation ComItextpdfXmpXMPDateTimeFactory

JavaUtilTimeZone * ComItextpdfXmpXMPDateTimeFactory_UTC_;


#line 55
- (instancetype)init {
  return [super init];
}


#line 67
+ (id<ComItextpdfXmpXMPDateTime>)createFromCalendarWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  
#line 69
  return [[ComItextpdfXmpImplXMPDateTimeImpl alloc] initWithJavaUtilCalendar:calendar];
}


#line 77
+ (id<ComItextpdfXmpXMPDateTime>)create {
  
#line 79
  return [[ComItextpdfXmpImplXMPDateTimeImpl alloc] init];
}


#line 91
+ (id<ComItextpdfXmpXMPDateTime>)createWithInt:(jint)year
                                       withInt:(jint)month
                                       withInt:(jint)day {
  
#line 93
  id<ComItextpdfXmpXMPDateTime> dt = [[ComItextpdfXmpImplXMPDateTimeImpl alloc] init];
  [dt setYearWithInt:year];
  [dt setMonthWithInt:month];
  [dt setDayWithInt:day];
  return dt;
}


#line 113
+ (id<ComItextpdfXmpXMPDateTime>)createWithInt:(jint)year
                                       withInt:(jint)month
                                       withInt:(jint)day
                                       withInt:(jint)hour
                                       withInt:(jint)minute
                                       withInt:(jint)second
                                       withInt:(jint)nanoSecond {
  
#line 116
  id<ComItextpdfXmpXMPDateTime> dt = [[ComItextpdfXmpImplXMPDateTimeImpl alloc] init];
  [dt setYearWithInt:year];
  [dt setMonthWithInt:month];
  [dt setDayWithInt:day];
  [dt setHourWithInt:hour];
  [dt setMinuteWithInt:minute];
  [dt setSecondWithInt:second];
  [dt setNanoSecondWithInt:nanoSecond];
  return dt;
}


#line 135
+ (id<ComItextpdfXmpXMPDateTime>)createFromISO8601WithNSString:(NSString *)strValue {
  
#line 137
  return [[ComItextpdfXmpImplXMPDateTimeImpl alloc] initWithNSString:strValue];
}


#line 147
+ (id<ComItextpdfXmpXMPDateTime>)getCurrentDateTime {
  
#line 149
  return [[ComItextpdfXmpImplXMPDateTimeImpl alloc] initWithJavaUtilCalendar:[[JavaUtilGregorianCalendar alloc] init]];
}


#line 160
+ (id<ComItextpdfXmpXMPDateTime>)setLocalTimeZoneWithComItextpdfXmpXMPDateTime:(id<ComItextpdfXmpXMPDateTime>)dateTime {
  
#line 162
  JavaUtilCalendar *cal = [((id<ComItextpdfXmpXMPDateTime>) nil_chk(dateTime)) getCalendar];
  [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault]];
  return [[ComItextpdfXmpImplXMPDateTimeImpl alloc] initWithJavaUtilCalendar:cal];
}


#line 177
+ (id<ComItextpdfXmpXMPDateTime>)convertToUTCTimeWithComItextpdfXmpXMPDateTime:(id<ComItextpdfXmpXMPDateTime>)dateTime {
  
#line 179
  jlong timeInMillis = [((JavaUtilCalendar *) nil_chk([((id<ComItextpdfXmpXMPDateTime>) nil_chk(dateTime)) getCalendar])) getTimeInMillis];
  JavaUtilGregorianCalendar *cal = [[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:ComItextpdfXmpXMPDateTimeFactory_UTC_];
  [cal setGregorianChangeWithJavaUtilDate:[[JavaUtilDate alloc] initWithLong:JavaLangLong_MIN_VALUE]];
  [cal setTimeInMillisWithLong:timeInMillis];
  return [[ComItextpdfXmpImplXMPDateTimeImpl alloc] initWithJavaUtilCalendar:cal];
}


#line 194
+ (id<ComItextpdfXmpXMPDateTime>)convertToLocalTimeWithComItextpdfXmpXMPDateTime:(id<ComItextpdfXmpXMPDateTime>)dateTime {
  
#line 196
  jlong timeInMillis = [((JavaUtilCalendar *) nil_chk([((id<ComItextpdfXmpXMPDateTime>) nil_chk(dateTime)) getCalendar])) getTimeInMillis];
  
#line 198
  JavaUtilGregorianCalendar *cal = [[JavaUtilGregorianCalendar alloc] init];
  [cal setTimeInMillisWithLong:timeInMillis];
  return [[ComItextpdfXmpImplXMPDateTimeImpl alloc] initWithJavaUtilCalendar:cal];
}

+ (void)initialize {
  if (self == [ComItextpdfXmpXMPDateTimeFactory class]) {
    ComItextpdfXmpXMPDateTimeFactory_UTC_ =
#line 50
    [JavaUtilTimeZone getTimeZoneWithNSString:@"UTC"];
    ComItextpdfXmpXMPDateTimeFactory_initialized = YES;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XMPDateTimeFactory", NULL, 0x2, NULL },
    { "createFromCalendarWithJavaUtilCalendar:", "createFromCalendar", "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, NULL },
    { "create", NULL, "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, NULL },
    { "createWithInt:withInt:withInt:", "create", "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, NULL },
    { "createWithInt:withInt:withInt:withInt:withInt:withInt:withInt:", "create", "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, NULL },
    { "createFromISO8601WithNSString:", "createFromISO8601", "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "getCurrentDateTime", NULL, "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, NULL },
    { "setLocalTimeZoneWithComItextpdfXmpXMPDateTime:", "setLocalTimeZone", "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, NULL },
    { "convertToUTCTimeWithComItextpdfXmpXMPDateTime:", "convertToUTCTime", "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, NULL },
    { "convertToLocalTimeWithComItextpdfXmpXMPDateTime:", "convertToLocalTime", "Lcom.itextpdf.xmp.XMPDateTime;", 0x9, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "UTC_", NULL, 0x1a, "Ljava.util.TimeZone;", &ComItextpdfXmpXMPDateTimeFactory_UTC_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpXMPDateTimeFactory = { "XMPDateTimeFactory", "com.itextpdf.xmp", NULL, 0x11, 10, methods, 1, fields, 0, NULL};
  return &_ComItextpdfXmpXMPDateTimeFactory;
}

@end
