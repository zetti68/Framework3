//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/XMPPathFactory.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/xmp/XMPPathFactory.java"

#include "IOSClass.h"
#include "com/itextpdf/xmp/XMPConst.h"
#include "com/itextpdf/xmp/XMPError.h"
#include "com/itextpdf/xmp/XMPException.h"
#include "com/itextpdf/xmp/XMPPathFactory.h"
#include "com/itextpdf/xmp/impl/Utils.h"
#include "com/itextpdf/xmp/impl/xpath/XMPPath.h"
#include "com/itextpdf/xmp/impl/xpath/XMPPathParser.h"
#include "com/itextpdf/xmp/impl/xpath/XMPPathSegment.h"


#line 82
@implementation ComItextpdfXmpXMPPathFactory


#line 85
- (instancetype)init {
  return [super init];
}


#line 104
+ (NSString *)composeArrayItemPathWithNSString:(NSString *)arrayName
                                       withInt:(jint)itemIndex {
  
#line 106
  if (itemIndex > 0) {
    
#line 108
    return JreStrcat("$CIC", arrayName, '[', itemIndex, ']');
  }
  else if (itemIndex == ComItextpdfXmpXMPConst_ARRAY_LAST_ITEM) {
    
#line 112
    return JreStrcat("$$", arrayName, @"[last()]");
  }
  else {
    
#line 116
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Array index must be larger than zero" withInt:ComItextpdfXmpXMPError_BADINDEX];
  }
}


#line 135
+ (NSString *)composeStructFieldPathWithNSString:(NSString *)fieldNS
                                    withNSString:(NSString *)fieldName {
  
#line 138
  [ComItextpdfXmpXMPPathFactory assertFieldNSWithNSString:fieldNS];
  [ComItextpdfXmpXMPPathFactory assertFieldNameWithNSString:fieldName];
  
#line 141
  ComItextpdfXmpImplXpathXMPPath *fieldPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:fieldNS withNSString:fieldName];
  if ([((ComItextpdfXmpImplXpathXMPPath *) nil_chk(fieldPath)) size] != 2) {
    
#line 144
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"The field name must be simple" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
  
#line 147
  return JreStrcat("C$", '/', [((ComItextpdfXmpImplXpathXMPPathSegment *) nil_chk([fieldPath getSegmentWithInt:ComItextpdfXmpImplXpathXMPPath_STEP_ROOT_PROP])) getName]);
}


#line 163
+ (NSString *)composeQualifierPathWithNSString:(NSString *)qualNS
                                  withNSString:(NSString *)qualName {
  
#line 167
  [ComItextpdfXmpXMPPathFactory assertQualNSWithNSString:qualNS];
  [ComItextpdfXmpXMPPathFactory assertQualNameWithNSString:qualName];
  
#line 170
  ComItextpdfXmpImplXpathXMPPath *qualPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:qualNS withNSString:qualName];
  if ([((ComItextpdfXmpImplXpathXMPPath *) nil_chk(qualPath)) size] != 2) {
    
#line 173
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"The qualifier name must be simple" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
  
#line 176
  return JreStrcat("$$", @"/?", [((ComItextpdfXmpImplXpathXMPPathSegment *) nil_chk([qualPath getSegmentWithInt:ComItextpdfXmpImplXpathXMPPath_STEP_ROOT_PROP])) getName]);
}


#line 202
+ (NSString *)composeLangSelectorWithNSString:(NSString *)arrayName
                                 withNSString:(NSString *)langName {
  
#line 205
  return JreStrcat("$$$$", arrayName, @"[?xml:lang=\"", [ComItextpdfXmpImplUtils normalizeLangValueWithNSString:langName], @"\"]");
}


#line 242
+ (NSString *)composeFieldSelectorWithNSString:(NSString *)arrayName
                                  withNSString:(NSString *)fieldNS
                                  withNSString:(NSString *)fieldName
                                  withNSString:(NSString *)fieldValue {
  
#line 245
  ComItextpdfXmpImplXpathXMPPath *fieldPath = [ComItextpdfXmpImplXpathXMPPathParser expandXPathWithNSString:fieldNS withNSString:fieldName];
  if ([((ComItextpdfXmpImplXpathXMPPath *) nil_chk(fieldPath)) size] != 2) {
    
#line 248
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"The fieldName name must be simple" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
  
#line 251
  return JreStrcat("$C$$$$", arrayName, '[', [((ComItextpdfXmpImplXpathXMPPathSegment *) nil_chk([fieldPath getSegmentWithInt:ComItextpdfXmpImplXpathXMPPath_STEP_ROOT_PROP])) getName], @"=\"",
#line 252
  fieldValue, @"\"]");
}

+ (void)assertQualNSWithNSString:(NSString *)qualNS {
  
#line 263
  if (qualNS == nil || ((jint) [qualNS length]) == 0) {
    
#line 265
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty qualifier namespace URI" withInt:ComItextpdfXmpXMPError_BADSCHEMA];
  }
}


#line 276
+ (void)assertQualNameWithNSString:(NSString *)qualName {
  
#line 278
  if (qualName == nil || ((jint) [qualName length]) == 0) {
    
#line 280
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty qualifier name" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
}


#line 290
+ (void)assertFieldNSWithNSString:(NSString *)fieldNS {
  
#line 292
  if (fieldNS == nil || ((jint) [fieldNS length]) == 0) {
    
#line 294
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty field namespace URI" withInt:ComItextpdfXmpXMPError_BADSCHEMA];
  }
}


#line 305
+ (void)assertFieldNameWithNSString:(NSString *)fieldName {
  
#line 307
  if (fieldName == nil || ((jint) [fieldName length]) == 0) {
    
#line 309
    @throw [[ComItextpdfXmpXMPException alloc] initWithNSString:@"Empty f name" withInt:ComItextpdfXmpXMPError_BADXPATH];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "XMPPathFactory", NULL, 0x2, NULL },
    { "composeArrayItemPathWithNSString:withInt:", "composeArrayItemPath", "Ljava.lang.String;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "composeStructFieldPathWithNSString:withNSString:", "composeStructFieldPath", "Ljava.lang.String;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "composeQualifierPathWithNSString:withNSString:", "composeQualifierPath", "Ljava.lang.String;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "composeLangSelectorWithNSString:withNSString:", "composeLangSelector", "Ljava.lang.String;", 0x9, NULL },
    { "composeFieldSelectorWithNSString:withNSString:withNSString:withNSString:", "composeFieldSelector", "Ljava.lang.String;", 0x9, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertQualNSWithNSString:", "assertQualNS", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertQualNameWithNSString:", "assertQualName", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertFieldNSWithNSString:", "assertFieldNS", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
    { "assertFieldNameWithNSString:", "assertFieldName", "V", 0xa, "Lcom.itextpdf.xmp.XMPException;" },
  };
  static const J2ObjcClassInfo _ComItextpdfXmpXMPPathFactory = { "XMPPathFactory", "com.itextpdf.xmp", NULL, 0x11, 10, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfXmpXMPPathFactory;
}

@end
