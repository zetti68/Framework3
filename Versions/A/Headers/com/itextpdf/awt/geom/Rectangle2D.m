//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/Rectangle2D.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/Rectangle2D.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/awt/geom/AffineTransform.h"
#include "com/itextpdf/awt/geom/Line2D.h"
#include "com/itextpdf/awt/geom/PathIterator.h"
#include "com/itextpdf/awt/geom/Point2D.h"
#include "com/itextpdf/awt/geom/Rectangle2D.h"
#include "com/itextpdf/awt/geom/RectangularShape.h"
#include "com/itextpdf/awt/geom/misc/HashCode.h"
#include "com/itextpdf/awt/geom/misc/Messages.h"
#include "java/lang/Math.h"
#include "java/util/NoSuchElementException.h"


#line 31
@implementation ComItextpdfAwtGeomRectangle2D


#line 417
- (instancetype)init {
  return [super init];
}


#line 420
- (void)setRectWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)width
               withDouble:(jdouble)height {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 422
- (jint)outcodeWithDouble:(jdouble)x
               withDouble:(jdouble)y {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 424
- (ComItextpdfAwtGeomRectangle2D *)createIntersectionWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 426
- (ComItextpdfAwtGeomRectangle2D *)createUnionWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 428
- (void)setRectWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 429
  [self setRectWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}


#line 433
- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)width
                withDouble:(jdouble)height {
  [self setRectWithDouble:x withDouble:y withDouble:width withDouble:height];
}


#line 437
- (ComItextpdfAwtGeomRectangle2D *)getBounds2D {
  
#line 438
  return (ComItextpdfAwtGeomRectangle2D *) check_class_cast([self clone], [ComItextpdfAwtGeomRectangle2D class]);
}


#line 441
- (jboolean)intersectsLineWithDouble:(jdouble)x1
                          withDouble:(jdouble)y1
                          withDouble:(jdouble)x2
                          withDouble:(jdouble)y2 {
  
#line 442
  jdouble rx1 = [self getX];
  jdouble ry1 = [self getY];
  jdouble rx2 = rx1 + [self getWidth];
  jdouble ry2 = ry1 + [self getHeight];
  return
#line 447
  (rx1 <= x1 && x1 <= rx2 && ry1 <= y1 && y1 <= ry2) ||
#line 448
  (rx1 <= x2 && x2 <= rx2 && ry1 <= y2 && y2 <= ry2) ||
#line 449
  [ComItextpdfAwtGeomLine2D linesIntersectWithDouble:rx1 withDouble:ry1 withDouble:rx2 withDouble:ry2 withDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2] ||
#line 450
  [ComItextpdfAwtGeomLine2D linesIntersectWithDouble:rx2 withDouble:ry1 withDouble:rx1 withDouble:ry2 withDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
}


#line 453
- (jboolean)intersectsLineWithComItextpdfAwtGeomLine2D:(ComItextpdfAwtGeomLine2D *)l {
  
#line 454
  return [self intersectsLineWithDouble:[((ComItextpdfAwtGeomLine2D *) nil_chk(l)) getX1] withDouble:[l getY1] withDouble:[l getX2] withDouble:[l getY2]];
}


#line 457
- (jint)outcodeWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p {
  
#line 458
  return [self outcodeWithDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}


#line 461
- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  
#line 462
  if ([self isEmpty]) {
    return NO;
  }
  
#line 466
  jdouble x1 = [self getX];
  jdouble y1 = [self getY];
  jdouble x2 = x1 + [self getWidth];
  jdouble y2 = y1 + [self getHeight];
  
#line 471
  return
#line 472
  x1 <= x && x < x2 &&
#line 473
  y1 <= y && y < y2;
}


#line 476
- (jboolean)intersectsWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)width
                      withDouble:(jdouble)height {
  
#line 477
  if ([self isEmpty] || width <= 0.0 || height <= 0.0) {
    return NO;
  }
  
#line 481
  jdouble x1 = [self getX];
  jdouble y1 = [self getY];
  jdouble x2 = x1 + [self getWidth];
  jdouble y2 = y1 + [self getHeight];
  
#line 486
  return
#line 487
  x + width > x1 && x < x2 &&
#line 488
  y + height > y1 && y < y2;
}


#line 491
- (jboolean)containsWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height {
  
#line 492
  if ([self isEmpty] || width <= 0.0 || height <= 0.0) {
    return NO;
  }
  
#line 496
  jdouble x1 = [self getX];
  jdouble y1 = [self getY];
  jdouble x2 = x1 + [self getWidth];
  jdouble y2 = y1 + [self getHeight];
  
#line 501
  return
#line 502
  x1 <= x && x + width <= x2 &&
#line 503
  y1 <= y && y + height <= y2;
}


#line 506
+ (void)intersectWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)src1
                 withComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)src2
                 withComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)dst {
  
#line 507
  jdouble x1 = [JavaLangMath maxWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(src1)) getMinX] withDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(src2)) getMinX]];
  jdouble y1 = [JavaLangMath maxWithDouble:[src1 getMinY] withDouble:[src2 getMinY]];
  jdouble x2 = [JavaLangMath minWithDouble:[src1 getMaxX] withDouble:[src2 getMaxX]];
  jdouble y2 = [JavaLangMath minWithDouble:[src1 getMaxY] withDouble:[src2 getMaxY]];
  [((ComItextpdfAwtGeomRectangle2D *) nil_chk(dst)) setFrameWithDouble:x1 withDouble:y1 withDouble:x2 - x1 withDouble:y2 - y1];
}


#line 514
+ (void)union__WithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)src1
               withComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)src2
               withComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)dst {
  
#line 515
  jdouble x1 = [JavaLangMath minWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(src1)) getMinX] withDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(src2)) getMinX]];
  jdouble y1 = [JavaLangMath minWithDouble:[src1 getMinY] withDouble:[src2 getMinY]];
  jdouble x2 = [JavaLangMath maxWithDouble:[src1 getMaxX] withDouble:[src2 getMaxX]];
  jdouble y2 = [JavaLangMath maxWithDouble:[src1 getMaxY] withDouble:[src2 getMaxY]];
  [((ComItextpdfAwtGeomRectangle2D *) nil_chk(dst)) setFrameWithDouble:x1 withDouble:y1 withDouble:x2 - x1 withDouble:y2 - y1];
}


#line 522
- (void)addWithDouble:(jdouble)x
           withDouble:(jdouble)y {
  
#line 523
  jdouble x1 = [JavaLangMath minWithDouble:[self getMinX] withDouble:x];
  jdouble y1 = [JavaLangMath minWithDouble:[self getMinY] withDouble:y];
  jdouble x2 = [JavaLangMath maxWithDouble:[self getMaxX] withDouble:x];
  jdouble y2 = [JavaLangMath maxWithDouble:[self getMaxY] withDouble:y];
  [self setRectWithDouble:x1 withDouble:y1 withDouble:x2 - x1 withDouble:y2 - y1];
}


#line 530
- (void)addWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p {
  
#line 531
  [self addWithDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}


#line 534
- (void)addWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 535
  [ComItextpdfAwtGeomRectangle2D union__WithComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomRectangle2D:r withComItextpdfAwtGeomRectangle2D:self];
}


#line 538
- (id<ComItextpdfAwtGeomPathIterator>)getPathIteratorWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 539
  return [[ComItextpdfAwtGeomRectangle2D_Iterator alloc] initWithComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomAffineTransform:t];
}


#line 543
- (id<ComItextpdfAwtGeomPathIterator>)getPathIteratorWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t
                                                                                withDouble:(jdouble)flatness {
  return [[ComItextpdfAwtGeomRectangle2D_Iterator alloc] initWithComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomAffineTransform:t];
}

- (NSUInteger)hash {
  
#line 549
  ComItextpdfAwtGeomMiscHashCode *hash_ = [[ComItextpdfAwtGeomMiscHashCode alloc] init];
  (void) [hash_ appendWithDouble:[self getX]];
  (void) [hash_ appendWithDouble:[self getY]];
  (void) [hash_ appendWithDouble:[self getWidth]];
  (void) [hash_ appendWithDouble:[self getHeight]];
  return ((jint) [hash_ hash]);
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[ComItextpdfAwtGeomRectangle2D class]]) {
    ComItextpdfAwtGeomRectangle2D *r = (ComItextpdfAwtGeomRectangle2D *) check_class_cast(obj, [ComItextpdfAwtGeomRectangle2D class]);
    return
#line 565
    [self getX] == [((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX] &&
#line 566
    [self getY] == [r getY] &&
#line 567
    [self getWidth] == [r getWidth] &&
#line 568
    [self getHeight] == [r getHeight];
  }
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Rectangle2D", NULL, 0x4, NULL },
    { "setRectWithDouble:withDouble:withDouble:withDouble:", "setRect", "V", 0x401, NULL },
    { "outcodeWithDouble:withDouble:", "outcode", "I", 0x401, NULL },
    { "createIntersectionWithComItextpdfAwtGeomRectangle2D:", "createIntersection", "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x401, NULL },
    { "createUnionWithComItextpdfAwtGeomRectangle2D:", "createUnion", "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x401, NULL },
    { "setRectWithComItextpdfAwtGeomRectangle2D:", "setRect", "V", 0x1, NULL },
    { "setFrameWithDouble:withDouble:withDouble:withDouble:", "setFrame", "V", 0x1, NULL },
    { "getBounds2D", NULL, "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
    { "intersectsLineWithDouble:withDouble:withDouble:withDouble:", "intersectsLine", "Z", 0x1, NULL },
    { "intersectsLineWithComItextpdfAwtGeomLine2D:", "intersectsLine", "Z", 0x1, NULL },
    { "outcodeWithComItextpdfAwtGeomPoint2D:", "outcode", "I", 0x1, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL },
    { "intersectWithComItextpdfAwtGeomRectangle2D:withComItextpdfAwtGeomRectangle2D:withComItextpdfAwtGeomRectangle2D:", "intersect", "V", 0x9, NULL },
    { "union__WithComItextpdfAwtGeomRectangle2D:withComItextpdfAwtGeomRectangle2D:withComItextpdfAwtGeomRectangle2D:", "union", "V", 0x9, NULL },
    { "addWithDouble:withDouble:", "add", "V", 0x1, NULL },
    { "addWithComItextpdfAwtGeomPoint2D:", "add", "V", 0x1, NULL },
    { "addWithComItextpdfAwtGeomRectangle2D:", "add", "V", 0x1, NULL },
    { "getPathIteratorWithComItextpdfAwtGeomAffineTransform:", "getPathIterator", "Lcom.itextpdf.awt.geom.PathIterator;", 0x1, NULL },
    { "getPathIteratorWithComItextpdfAwtGeomAffineTransform:withDouble:", "getPathIterator", "Lcom.itextpdf.awt.geom.PathIterator;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "OUT_LEFT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomRectangle2D_OUT_LEFT },
    { "OUT_TOP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomRectangle2D_OUT_TOP },
    { "OUT_RIGHT_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomRectangle2D_OUT_RIGHT },
    { "OUT_BOTTOM_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomRectangle2D_OUT_BOTTOM },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomRectangle2D = { "Rectangle2D", "com.itextpdf.awt.geom", NULL, 0x401, 23, methods, 4, fields, 0, NULL};
  return &_ComItextpdfAwtGeomRectangle2D;
}

@end


#line 38
@implementation ComItextpdfAwtGeomRectangle2D_Float


#line 45
- (instancetype)init {
  return [super init];
}


#line 48
- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)width
                    withFloat:(jfloat)height {
  if (self = [super init]) {
    
#line 49
    [self setRectWithFloat:x withFloat:y withFloat:width withFloat:height];
  }
  return self;
}


#line 53
- (jdouble)getX {
  
#line 54
  return x_;
}


#line 58
- (jdouble)getY {
  return y_;
}


#line 63
- (jdouble)getWidth {
  
#line 64
  return width_;
}


#line 68
- (jdouble)getHeight {
  return height_;
}


#line 73
- (jboolean)isEmpty {
  
#line 74
  return width_ <= 0.0f || height_ <= 0.0f;
}


#line 77
- (void)setRectWithFloat:(jfloat)x
               withFloat:(jfloat)y
               withFloat:(jfloat)width
               withFloat:(jfloat)height {
  
#line 78
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
}


#line 85
- (void)setRectWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)width
               withDouble:(jdouble)height {
  
#line 86
  self->x_ = (jfloat) x;
  self->y_ = (jfloat) y;
  self->width_ = (jfloat) width;
  self->height_ = (jfloat) height;
}


#line 93
- (void)setRectWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 94
  self->x_ = (jfloat) [((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX];
  self->y_ = (jfloat) [r getY];
  self->width_ = (jfloat) [r getWidth];
  self->height_ = (jfloat) [r getHeight];
}


#line 101
- (jint)outcodeWithDouble:(jdouble)px
               withDouble:(jdouble)py {
  jint code = 0;
  
#line 104
  if (width_ <= 0.0f) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_LEFT | ComItextpdfAwtGeomRectangle2D_OUT_RIGHT;
  }
  else if (px < x_) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_LEFT;
  }
  else if (px > x_ + width_) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_RIGHT;
  }
  
#line 114
  if (height_ <= 0.0f) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_TOP | ComItextpdfAwtGeomRectangle2D_OUT_BOTTOM;
  }
  else if (py < y_) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_TOP;
  }
  else if (py > y_ + height_) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_BOTTOM;
  }
  
#line 124
  return code;
}


#line 128
- (ComItextpdfAwtGeomRectangle2D *)getBounds2D {
  
#line 129
  return [[ComItextpdfAwtGeomRectangle2D_Float alloc] initWithFloat:x_ withFloat:y_ withFloat:width_ withFloat:height_];
}


#line 133
- (ComItextpdfAwtGeomRectangle2D *)createIntersectionWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  ComItextpdfAwtGeomRectangle2D *dst;
  if ([r isKindOfClass:[ComItextpdfAwtGeomRectangle2D_Double class]]) {
    dst = [[ComItextpdfAwtGeomRectangle2D_Double alloc] init];
  }
  else {
    
#line 138
    dst = [[ComItextpdfAwtGeomRectangle2D_Float alloc] init];
  }
  [ComItextpdfAwtGeomRectangle2D intersectWithComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomRectangle2D:r withComItextpdfAwtGeomRectangle2D:dst];
  return dst;
}


#line 145
- (ComItextpdfAwtGeomRectangle2D *)createUnionWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 146
  ComItextpdfAwtGeomRectangle2D *dst;
  if ([r isKindOfClass:[ComItextpdfAwtGeomRectangle2D_Double class]]) {
    dst = [[ComItextpdfAwtGeomRectangle2D_Double alloc] init];
  }
  else {
    
#line 150
    dst = [[ComItextpdfAwtGeomRectangle2D_Float alloc] init];
  }
  [ComItextpdfAwtGeomRectangle2D union__WithComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomRectangle2D:r withComItextpdfAwtGeomRectangle2D:dst];
  return dst;
}

- (NSString *)description {
  
#line 160
  return JreStrcat("$$F$F$F$FC", [[self getClass] getName], @"[x=", x_, @",y=", y_, @",width=", width_, @",height=", height_, ']');
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomRectangle2D_Float *)other {
  [super copyAllFieldsTo:other];
  other->height_ = height_;
  other->width_ = width_;
  other->x_ = x_;
  other->y_ = y_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Float", NULL, 0x1, NULL },
    { "initWithFloat:withFloat:withFloat:withFloat:", "Float", NULL, 0x1, NULL },
    { "getX", NULL, "D", 0x1, NULL },
    { "getY", NULL, "D", 0x1, NULL },
    { "getWidth", NULL, "D", 0x1, NULL },
    { "getHeight", NULL, "D", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "setRectWithFloat:withFloat:withFloat:withFloat:", "setRect", "V", 0x1, NULL },
    { "setRectWithDouble:withDouble:withDouble:withDouble:", "setRect", "V", 0x1, NULL },
    { "setRectWithComItextpdfAwtGeomRectangle2D:", "setRect", "V", 0x1, NULL },
    { "outcodeWithDouble:withDouble:", "outcode", "I", 0x1, NULL },
    { "getBounds2D", NULL, "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
    { "createIntersectionWithComItextpdfAwtGeomRectangle2D:", "createIntersection", "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
    { "createUnionWithComItextpdfAwtGeomRectangle2D:", "createUnion", "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x1, "F", NULL,  },
    { "y_", NULL, 0x1, "F", NULL,  },
    { "width_", NULL, 0x1, "F", NULL,  },
    { "height_", NULL, 0x1, "F", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomRectangle2D_Float = { "Float", "com.itextpdf.awt.geom", "Rectangle2D", 0x9, 15, methods, 4, fields, 0, NULL};
  return &_ComItextpdfAwtGeomRectangle2D_Float;
}

@end


#line 164
@implementation ComItextpdfAwtGeomRectangle2D_Double


#line 171
- (instancetype)init {
  return [super init];
}


#line 174
- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height {
  if (self = [super init]) {
    
#line 175
    [self setRectWithDouble:x withDouble:y withDouble:width withDouble:height];
  }
  return self;
}


#line 179
- (jdouble)getX {
  
#line 180
  return x_;
}


#line 184
- (jdouble)getY {
  return y_;
}


#line 189
- (jdouble)getWidth {
  
#line 190
  return width_;
}


#line 194
- (jdouble)getHeight {
  return height_;
}


#line 199
- (jboolean)isEmpty {
  
#line 200
  return width_ <= 0.0 || height_ <= 0.0;
}


#line 204
- (void)setRectWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)width
               withDouble:(jdouble)height {
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
}


#line 212
- (void)setRectWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 213
  self->x_ = [((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX];
  self->y_ = [r getY];
  self->width_ = [r getWidth];
  self->height_ = [r getHeight];
}


#line 220
- (jint)outcodeWithDouble:(jdouble)px
               withDouble:(jdouble)py {
  jint code = 0;
  
#line 223
  if (width_ <= 0.0) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_LEFT | ComItextpdfAwtGeomRectangle2D_OUT_RIGHT;
  }
  else if (px < x_) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_LEFT;
  }
  else if (px > x_ + width_) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_RIGHT;
  }
  
#line 233
  if (height_ <= 0.0) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_TOP | ComItextpdfAwtGeomRectangle2D_OUT_BOTTOM;
  }
  else if (py < y_) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_TOP;
  }
  else if (py > y_ + height_) {
    code |= ComItextpdfAwtGeomRectangle2D_OUT_BOTTOM;
  }
  
#line 243
  return code;
}


#line 247
- (ComItextpdfAwtGeomRectangle2D *)getBounds2D {
  
#line 248
  return [[ComItextpdfAwtGeomRectangle2D_Double alloc] initWithDouble:x_ withDouble:y_ withDouble:width_ withDouble:height_];
}


#line 252
- (ComItextpdfAwtGeomRectangle2D *)createIntersectionWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  ComItextpdfAwtGeomRectangle2D *dst = [[ComItextpdfAwtGeomRectangle2D_Double alloc] init];
  [ComItextpdfAwtGeomRectangle2D intersectWithComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomRectangle2D:r withComItextpdfAwtGeomRectangle2D:dst];
  return dst;
}


#line 259
- (ComItextpdfAwtGeomRectangle2D *)createUnionWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 260
  ComItextpdfAwtGeomRectangle2D *dest = [[ComItextpdfAwtGeomRectangle2D_Double alloc] init];
  [ComItextpdfAwtGeomRectangle2D union__WithComItextpdfAwtGeomRectangle2D:self withComItextpdfAwtGeomRectangle2D:r withComItextpdfAwtGeomRectangle2D:dest];
  return dest;
}

- (NSString *)description {
  
#line 269
  return JreStrcat("$$D$D$D$DC", [[self getClass] getName], @"[x=", x_, @",y=", y_, @",width=", width_, @",height=", height_, ']');
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomRectangle2D_Double *)other {
  [super copyAllFieldsTo:other];
  other->height_ = height_;
  other->width_ = width_;
  other->x_ = x_;
  other->y_ = y_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Double", NULL, 0x1, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:", "Double", NULL, 0x1, NULL },
    { "getX", NULL, "D", 0x1, NULL },
    { "getY", NULL, "D", 0x1, NULL },
    { "getWidth", NULL, "D", 0x1, NULL },
    { "getHeight", NULL, "D", 0x1, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL },
    { "setRectWithDouble:withDouble:withDouble:withDouble:", "setRect", "V", 0x1, NULL },
    { "setRectWithComItextpdfAwtGeomRectangle2D:", "setRect", "V", 0x1, NULL },
    { "outcodeWithDouble:withDouble:", "outcode", "I", 0x1, NULL },
    { "getBounds2D", NULL, "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
    { "createIntersectionWithComItextpdfAwtGeomRectangle2D:", "createIntersection", "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
    { "createUnionWithComItextpdfAwtGeomRectangle2D:", "createUnion", "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x1, "D", NULL,  },
    { "y_", NULL, 0x1, "D", NULL,  },
    { "width_", NULL, 0x1, "D", NULL,  },
    { "height_", NULL, 0x1, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomRectangle2D_Double = { "Double", "com.itextpdf.awt.geom", "Rectangle2D", 0x9, 14, methods, 4, fields, 0, NULL};
  return &_ComItextpdfAwtGeomRectangle2D_Double;
}

@end


#line 276
@implementation ComItextpdfAwtGeomRectangle2D_Iterator


#line 314
- (instancetype)initWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)outer$
                    withComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r
                withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)at {
  if (self = [super init]) {
    
#line 315
    self->x_ = [((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX];
    
#line 316
    self->y_ = [r getY];
    
#line 317
    self->width_ = [r getWidth];
    
#line 318
    self->height_ = [r getHeight];
    
#line 319
    self->t_ = at;
    
#line 320
    if (width_ < 0.0 || height_ < 0.0) {
      index_ = 6;
    }
  }
  return self;
}


#line 325
- (jint)getWindingRule {
  
#line 326
  return ComItextpdfAwtGeomPathIterator_WIND_NON_ZERO;
}


#line 329
- (jboolean)isDone {
  
#line 330
  return index_ > 5;
}


#line 333
- (void)next {
  
#line 334
  index_++;
}


#line 337
- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  
#line 338
  if ([self isDone]) {
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.4B"]];
  }
  if (index_ == 5) {
    return ComItextpdfAwtGeomPathIterator_SEG_CLOSE;
  }
  jint type;
  if (index_ == 0) {
    type = ComItextpdfAwtGeomPathIterator_SEG_MOVETO;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_;
    *IOSDoubleArray_GetRef(coords, 1) = y_;
  }
  else {
    
#line 350
    type = ComItextpdfAwtGeomPathIterator_SEG_LINETO;
    switch (index_) {
      case 1:
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_ + width_;
      *IOSDoubleArray_GetRef(coords, 1) = y_;
      break;
      case 2:
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_ + width_;
      *IOSDoubleArray_GetRef(coords, 1) = y_ + height_;
      break;
      case 3:
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_;
      *IOSDoubleArray_GetRef(coords, 1) = y_ + height_;
      break;
      case 4:
      *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_;
      *IOSDoubleArray_GetRef(coords, 1) = y_;
      break;
    }
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:1];
  }
  return type;
}


#line 376
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  
#line 377
  if ([self isDone]) {
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.4B"]];
  }
  if (index_ == 5) {
    return ComItextpdfAwtGeomPathIterator_SEG_CLOSE;
  }
  jint type;
  if (index_ == 0) {
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) x_;
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) y_;
    type = ComItextpdfAwtGeomPathIterator_SEG_MOVETO;
  }
  else {
    
#line 389
    type = ComItextpdfAwtGeomPathIterator_SEG_LINETO;
    switch (index_) {
      case 1:
      *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) (x_ + width_);
      *IOSFloatArray_GetRef(coords, 1) = (jfloat) y_;
      break;
      case 2:
      *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) (x_ + width_);
      *IOSFloatArray_GetRef(coords, 1) = (jfloat) (y_ + height_);
      break;
      case 3:
      *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) x_;
      *IOSFloatArray_GetRef(coords, 1) = (jfloat) (y_ + height_);
      break;
      case 4:
      *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) x_;
      *IOSFloatArray_GetRef(coords, 1) = (jfloat) y_;
      break;
    }
  }
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:1];
  }
  return type;
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomRectangle2D_Iterator *)other {
  [super copyAllFieldsTo:other];
  other->height_ = height_;
  other->index_ = index_;
  other->t_ = t_;
  other->width_ = width_;
  other->x_ = x_;
  other->y_ = y_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfAwtGeomRectangle2D:withComItextpdfAwtGeomRectangle2D:withComItextpdfAwtGeomAffineTransform:", "Iterator", NULL, 0x0, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL },
    { "isDone", NULL, "Z", 0x1, NULL },
    { "next", NULL, "V", 0x1, NULL },
    { "currentSegmentWithDoubleArray:", "currentSegment", "I", 0x1, NULL },
    { "currentSegmentWithFloatArray:", "currentSegment", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x0, "D", NULL,  },
    { "y_", NULL, 0x0, "D", NULL,  },
    { "width_", NULL, 0x0, "D", NULL,  },
    { "height_", NULL, 0x0, "D", NULL,  },
    { "t_", NULL, 0x0, "Lcom.itextpdf.awt.geom.AffineTransform;", NULL,  },
    { "index_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomRectangle2D_Iterator = { "Iterator", "com.itextpdf.awt.geom", "Rectangle2D", 0x0, 6, methods, 6, fields, 0, NULL};
  return &_ComItextpdfAwtGeomRectangle2D_Iterator;
}

@end
