//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/QuadCurve2D.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/QuadCurve2D.java"

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/awt/geom/AffineTransform.h"
#include "com/itextpdf/awt/geom/FlatteningPathIterator.h"
#include "com/itextpdf/awt/geom/Line2D.h"
#include "com/itextpdf/awt/geom/PathIterator.h"
#include "com/itextpdf/awt/geom/Point2D.h"
#include "com/itextpdf/awt/geom/QuadCurve2D.h"
#include "com/itextpdf/awt/geom/Rectangle.h"
#include "com/itextpdf/awt/geom/Rectangle2D.h"
#include "com/itextpdf/awt/geom/Shape.h"
#include "com/itextpdf/awt/geom/gl/Crossing.h"
#include "com/itextpdf/awt/geom/misc/Messages.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"
#include "java/util/NoSuchElementException.h"

#pragma clang diagnostic ignored "-Wprotocol"


#line 31
@implementation ComItextpdfAwtGeomQuadCurve2D


#line 298
- (instancetype)init {
  return [super init];
}


#line 301
- (jdouble)getX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 303
- (jdouble)getY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 305
- (ComItextpdfAwtGeomPoint2D *)getP1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 307
- (jdouble)getCtrlX {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 309
- (jdouble)getCtrlY {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 311
- (ComItextpdfAwtGeomPoint2D *)getCtrlPt {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 313
- (jdouble)getX2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 315
- (jdouble)getY2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 317
- (ComItextpdfAwtGeomPoint2D *)getP2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 319
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx
                withDouble:(jdouble)ctrly
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 321
- (void)setCurveWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p1
                withComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)cp
                withComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p2 {
  
#line 322
  [self setCurveWithDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(cp)) getX] withDouble:[cp getY] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]];
}


#line 325
- (void)setCurveWithDoubleArray:(IOSDoubleArray *)coords
                        withInt:(jint)offset {
  
#line 326
  [self setCurveWithDouble:IOSDoubleArray_Get(nil_chk(
#line 327
  coords), offset + 0) withDouble:IOSDoubleArray_Get(coords, offset + 1) withDouble:IOSDoubleArray_Get(
#line 328
  coords, offset + 2) withDouble:IOSDoubleArray_Get(coords, offset + 3) withDouble:IOSDoubleArray_Get(
#line 329
  coords, offset + 4) withDouble:IOSDoubleArray_Get(coords, offset + 5)];
}


#line 332
- (void)setCurveWithComItextpdfAwtGeomPoint2DArray:(IOSObjectArray *)points
                                           withInt:(jint)offset {
  
#line 333
  [self setCurveWithDouble:
#line 334
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(nil_chk(points), offset + 0))) getX] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 0))) getY] withDouble:
#line 335
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 1))) getX] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 1))) getY] withDouble:
#line 336
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 2))) getX] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 2))) getY]];
}


#line 339
- (void)setCurveWithComItextpdfAwtGeomQuadCurve2D:(ComItextpdfAwtGeomQuadCurve2D *)curve {
  
#line 340
  [self setCurveWithDouble:
#line 341
  [((ComItextpdfAwtGeomQuadCurve2D *) nil_chk(curve)) getX1] withDouble:[curve getY1] withDouble:
#line 342
  [curve getCtrlX] withDouble:[curve getCtrlY] withDouble:
#line 343
  [curve getX2] withDouble:[curve getY2]];
}


#line 346
- (jdouble)getFlatnessSq {
  
#line 347
  return [ComItextpdfAwtGeomLine2D ptSegDistSqWithDouble:
#line 348
  [self getX1] withDouble:[self getY1] withDouble:
#line 349
  [self getX2] withDouble:[self getY2] withDouble:
#line 350
  [self getCtrlX] withDouble:[self getCtrlY]];
}


#line 353
+ (jdouble)getFlatnessSqWithDouble:(jdouble)x1
                        withDouble:(jdouble)y1
                        withDouble:(jdouble)ctrlx
                        withDouble:(jdouble)ctrly
                        withDouble:(jdouble)x2
                        withDouble:(jdouble)y2 {
  
#line 354
  return [ComItextpdfAwtGeomLine2D ptSegDistSqWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withDouble:ctrlx withDouble:ctrly];
}


#line 357
+ (jdouble)getFlatnessSqWithDoubleArray:(IOSDoubleArray *)coords
                                withInt:(jint)offset {
  
#line 358
  return [ComItextpdfAwtGeomLine2D ptSegDistSqWithDouble:IOSDoubleArray_Get(nil_chk(
#line 359
  coords), offset + 0) withDouble:IOSDoubleArray_Get(coords, offset + 1) withDouble:IOSDoubleArray_Get(
#line 360
  coords, offset + 4) withDouble:IOSDoubleArray_Get(coords, offset + 5) withDouble:IOSDoubleArray_Get(
#line 361
  coords, offset + 2) withDouble:IOSDoubleArray_Get(coords, offset + 3)];
}


#line 364
- (jdouble)getFlatness {
  
#line 365
  return [ComItextpdfAwtGeomLine2D ptSegDistWithDouble:[self getX1] withDouble:[self getY1] withDouble:[self getX2] withDouble:[self getY2] withDouble:[self getCtrlX] withDouble:[self getCtrlY]];
}


#line 368
+ (jdouble)getFlatnessWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)ctrlx
                      withDouble:(jdouble)ctrly
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2 {
  
#line 371
  return [ComItextpdfAwtGeomLine2D ptSegDistWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withDouble:ctrlx withDouble:ctrly];
}


#line 374
+ (jdouble)getFlatnessWithDoubleArray:(IOSDoubleArray *)coords
                              withInt:(jint)offset {
  
#line 375
  return [ComItextpdfAwtGeomLine2D ptSegDistWithDouble:IOSDoubleArray_Get(nil_chk(
#line 376
  coords), offset + 0) withDouble:IOSDoubleArray_Get(coords, offset + 1) withDouble:IOSDoubleArray_Get(
#line 377
  coords, offset + 4) withDouble:IOSDoubleArray_Get(coords, offset + 5) withDouble:IOSDoubleArray_Get(
#line 378
  coords, offset + 2) withDouble:IOSDoubleArray_Get(coords, offset + 3)];
}


#line 381
- (void)subdivideWithComItextpdfAwtGeomQuadCurve2D:(ComItextpdfAwtGeomQuadCurve2D *)left
                 withComItextpdfAwtGeomQuadCurve2D:(ComItextpdfAwtGeomQuadCurve2D *)right {
  
#line 382
  [ComItextpdfAwtGeomQuadCurve2D subdivideWithComItextpdfAwtGeomQuadCurve2D:self withComItextpdfAwtGeomQuadCurve2D:left withComItextpdfAwtGeomQuadCurve2D:right];
}


#line 385
+ (void)subdivideWithComItextpdfAwtGeomQuadCurve2D:(ComItextpdfAwtGeomQuadCurve2D *)src
                 withComItextpdfAwtGeomQuadCurve2D:(ComItextpdfAwtGeomQuadCurve2D *)left
                 withComItextpdfAwtGeomQuadCurve2D:(ComItextpdfAwtGeomQuadCurve2D *)right {
  
#line 386
  jdouble x1 = [((ComItextpdfAwtGeomQuadCurve2D *) nil_chk(src)) getX1];
  jdouble y1 = [src getY1];
  jdouble cx = [src getCtrlX];
  jdouble cy = [src getCtrlY];
  jdouble x2 = [src getX2];
  jdouble y2 = [src getY2];
  jdouble cx1 = (x1 + cx) / 2.0;
  jdouble cy1 = (y1 + cy) / 2.0;
  jdouble cx2 = (x2 + cx) / 2.0;
  jdouble cy2 = (y2 + cy) / 2.0;
  cx = (cx1 + cx2) / 2.0;
  cy = (cy1 + cy2) / 2.0;
  if (left != nil) {
    [left setCurveWithDouble:x1 withDouble:y1 withDouble:cx1 withDouble:cy1 withDouble:cx withDouble:cy];
  }
  if (right != nil) {
    [right setCurveWithDouble:cx withDouble:cy withDouble:cx2 withDouble:cy2 withDouble:x2 withDouble:y2];
  }
}


#line 406
+ (void)subdivideWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(jint)srcoff
                 withDoubleArray:(IOSDoubleArray *)left
                         withInt:(jint)leftOff
                 withDoubleArray:(IOSDoubleArray *)right
                         withInt:(jint)rightOff {
  
#line 409
  jdouble x1 = IOSDoubleArray_Get(nil_chk(src), srcoff + 0);
  jdouble y1 = IOSDoubleArray_Get(src, srcoff + 1);
  jdouble cx = IOSDoubleArray_Get(src, srcoff + 2);
  jdouble cy = IOSDoubleArray_Get(src, srcoff + 3);
  jdouble x2 = IOSDoubleArray_Get(src, srcoff + 4);
  jdouble y2 = IOSDoubleArray_Get(src, srcoff + 5);
  jdouble cx1 = (x1 + cx) / 2.0;
  jdouble cy1 = (y1 + cy) / 2.0;
  jdouble cx2 = (x2 + cx) / 2.0;
  jdouble cy2 = (y2 + cy) / 2.0;
  cx = (cx1 + cx2) / 2.0;
  cy = (cy1 + cy2) / 2.0;
  if (left != nil) {
    *IOSDoubleArray_GetRef(left, leftOff + 0) = x1;
    *IOSDoubleArray_GetRef(left, leftOff + 1) = y1;
    *IOSDoubleArray_GetRef(left, leftOff + 2) = cx1;
    *IOSDoubleArray_GetRef(left, leftOff + 3) = cy1;
    *IOSDoubleArray_GetRef(left, leftOff + 4) = cx;
    *IOSDoubleArray_GetRef(left, leftOff + 5) = cy;
  }
  if (right != nil) {
    *IOSDoubleArray_GetRef(right, rightOff + 0) = cx;
    *IOSDoubleArray_GetRef(right, rightOff + 1) = cy;
    *IOSDoubleArray_GetRef(right, rightOff + 2) = cx2;
    *IOSDoubleArray_GetRef(right, rightOff + 3) = cy2;
    *IOSDoubleArray_GetRef(right, rightOff + 4) = x2;
    *IOSDoubleArray_GetRef(right, rightOff + 5) = y2;
  }
}


#line 439
+ (jint)solveQuadraticWithDoubleArray:(IOSDoubleArray *)eqn {
  
#line 440
  return [ComItextpdfAwtGeomQuadCurve2D solveQuadraticWithDoubleArray:eqn withDoubleArray:eqn];
}


#line 443
+ (jint)solveQuadraticWithDoubleArray:(IOSDoubleArray *)eqn
                      withDoubleArray:(IOSDoubleArray *)res {
  
#line 444
  return [ComItextpdfAwtGeomGlCrossing solveQuadWithDoubleArray:eqn withDoubleArray:res];
}


#line 447
- (jboolean)containsWithDouble:(jdouble)px
                    withDouble:(jdouble)py {
  
#line 448
  return [ComItextpdfAwtGeomGlCrossing isInsideEvenOddWithInt:[ComItextpdfAwtGeomGlCrossing crossShapeWithComItextpdfAwtGeomShape:self withDouble:px withDouble:py]];
}


#line 451
- (jboolean)containsWithDouble:(jdouble)rx
                    withDouble:(jdouble)ry
                    withDouble:(jdouble)rw
                    withDouble:(jdouble)rh {
  
#line 452
  jint cross = [ComItextpdfAwtGeomGlCrossing intersectShapeWithComItextpdfAwtGeomShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return cross != ComItextpdfAwtGeomGlCrossing_CROSSING && [ComItextpdfAwtGeomGlCrossing isInsideEvenOddWithInt:cross];
}


#line 456
- (jboolean)intersectsWithDouble:(jdouble)rx
                      withDouble:(jdouble)ry
                      withDouble:(jdouble)rw
                      withDouble:(jdouble)rh {
  
#line 457
  jint cross = [ComItextpdfAwtGeomGlCrossing intersectShapeWithComItextpdfAwtGeomShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return cross == ComItextpdfAwtGeomGlCrossing_CROSSING || [ComItextpdfAwtGeomGlCrossing isInsideEvenOddWithInt:cross];
}


#line 461
- (jboolean)containsWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p {
  
#line 462
  return [self containsWithDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}


#line 465
- (jboolean)intersectsWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 466
  return [self intersectsWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}


#line 469
- (jboolean)containsWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 470
  return [self containsWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}


#line 473
- (ComItextpdfAwtGeomRectangle *)getBounds {
  
#line 474
  return [((ComItextpdfAwtGeomRectangle2D *) nil_chk([self getBounds2D])) getBounds];
}


#line 477
- (id<ComItextpdfAwtGeomPathIterator>)getPathIteratorWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 478
  return [[ComItextpdfAwtGeomQuadCurve2D_Iterator alloc] initWithComItextpdfAwtGeomQuadCurve2D:self withComItextpdfAwtGeomQuadCurve2D:self withComItextpdfAwtGeomAffineTransform:t];
}


#line 481
- (id<ComItextpdfAwtGeomPathIterator>)getPathIteratorWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t
                                                                                withDouble:(jdouble)flatness {
  
#line 482
  return [[ComItextpdfAwtGeomFlatteningPathIterator alloc] initWithComItextpdfAwtGeomPathIterator:[self getPathIteratorWithComItextpdfAwtGeomAffineTransform:t] withDouble:flatness];
}


#line 486
- (id)clone {
  
#line 487
  @try {
    return [super clone];
  }
  @catch (
#line 489
  JavaLangCloneNotSupportedException *e) {
    @throw [[JavaLangInternalError alloc] init];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "QuadCurve2D", NULL, 0x4, NULL },
    { "getX1", NULL, "D", 0x401, NULL },
    { "getY1", NULL, "D", 0x401, NULL },
    { "getP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x401, NULL },
    { "getCtrlX", NULL, "D", 0x401, NULL },
    { "getCtrlY", NULL, "D", 0x401, NULL },
    { "getCtrlPt", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x401, NULL },
    { "getX2", NULL, "D", 0x401, NULL },
    { "getY2", NULL, "D", 0x401, NULL },
    { "getP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x401, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x401, NULL },
    { "setCurveWithComItextpdfAwtGeomPoint2D:withComItextpdfAwtGeomPoint2D:withComItextpdfAwtGeomPoint2D:", "setCurve", "V", 0x1, NULL },
    { "setCurveWithDoubleArray:withInt:", "setCurve", "V", 0x1, NULL },
    { "setCurveWithComItextpdfAwtGeomPoint2DArray:withInt:", "setCurve", "V", 0x1, NULL },
    { "setCurveWithComItextpdfAwtGeomQuadCurve2D:", "setCurve", "V", 0x1, NULL },
    { "getFlatnessSq", NULL, "D", 0x1, NULL },
    { "getFlatnessSqWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "getFlatnessSq", "D", 0x9, NULL },
    { "getFlatnessSqWithDoubleArray:withInt:", "getFlatnessSq", "D", 0x9, NULL },
    { "getFlatness", NULL, "D", 0x1, NULL },
    { "getFlatnessWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "getFlatness", "D", 0x9, NULL },
    { "getFlatnessWithDoubleArray:withInt:", "getFlatness", "D", 0x9, NULL },
    { "subdivideWithComItextpdfAwtGeomQuadCurve2D:withComItextpdfAwtGeomQuadCurve2D:", "subdivide", "V", 0x1, NULL },
    { "subdivideWithComItextpdfAwtGeomQuadCurve2D:withComItextpdfAwtGeomQuadCurve2D:withComItextpdfAwtGeomQuadCurve2D:", "subdivide", "V", 0x9, NULL },
    { "subdivideWithDoubleArray:withInt:withDoubleArray:withInt:withDoubleArray:withInt:", "subdivide", "V", 0x9, NULL },
    { "solveQuadraticWithDoubleArray:", "solveQuadratic", "I", 0x9, NULL },
    { "solveQuadraticWithDoubleArray:withDoubleArray:", "solveQuadratic", "I", 0x9, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL },
    { "containsWithComItextpdfAwtGeomPoint2D:", "contains", "Z", 0x1, NULL },
    { "intersectsWithComItextpdfAwtGeomRectangle2D:", "intersects", "Z", 0x1, NULL },
    { "containsWithComItextpdfAwtGeomRectangle2D:", "contains", "Z", 0x1, NULL },
    { "getBounds", NULL, "Lcom.itextpdf.awt.geom.Rectangle;", 0x1, NULL },
    { "getPathIteratorWithComItextpdfAwtGeomAffineTransform:", "getPathIterator", "Lcom.itextpdf.awt.geom.PathIterator;", 0x1, NULL },
    { "getPathIteratorWithComItextpdfAwtGeomAffineTransform:withDouble:", "getPathIterator", "Lcom.itextpdf.awt.geom.PathIterator;", 0x1, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomQuadCurve2D = { "QuadCurve2D", "com.itextpdf.awt.geom", NULL, 0x401, 36, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfAwtGeomQuadCurve2D;
}

@end


#line 33
@implementation ComItextpdfAwtGeomQuadCurve2D_Float


#line 42
- (instancetype)init {
  return [super init];
}


#line 45
- (instancetype)initWithFloat:(jfloat)x1
                    withFloat:(jfloat)y1
                    withFloat:(jfloat)ctrlx
                    withFloat:(jfloat)ctrly
                    withFloat:(jfloat)x2
                    withFloat:(jfloat)y2 {
  if (self = [super init]) {
    
#line 46
    [self setCurveWithFloat:x1 withFloat:y1 withFloat:ctrlx withFloat:ctrly withFloat:x2 withFloat:y2];
  }
  return self;
}


#line 50
- (jdouble)getX1 {
  
#line 51
  return x1_;
}


#line 55
- (jdouble)getY1 {
  return y1_;
}


#line 60
- (jdouble)getCtrlX {
  
#line 61
  return ctrlx_;
}


#line 65
- (jdouble)getCtrlY {
  return ctrly_;
}


#line 70
- (jdouble)getX2 {
  
#line 71
  return x2_;
}


#line 75
- (jdouble)getY2 {
  return y2_;
}


#line 80
- (ComItextpdfAwtGeomPoint2D *)getP1 {
  
#line 81
  return [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:x1_ withFloat:y1_];
}


#line 85
- (ComItextpdfAwtGeomPoint2D *)getCtrlPt {
  return [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:ctrlx_ withFloat:ctrly_];
}


#line 90
- (ComItextpdfAwtGeomPoint2D *)getP2 {
  
#line 91
  return [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:x2_ withFloat:y2_];
}


#line 95
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx
                withDouble:(jdouble)ctrly
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  self->x1_ = (jfloat) x1;
  self->y1_ = (jfloat) y1;
  self->ctrlx_ = (jfloat) ctrlx;
  self->ctrly_ = (jfloat) ctrly;
  self->x2_ = (jfloat) x2;
  self->y2_ = (jfloat) y2;
}


#line 104
- (void)setCurveWithFloat:(jfloat)x1
                withFloat:(jfloat)y1
                withFloat:(jfloat)ctrlx
                withFloat:(jfloat)ctrly
                withFloat:(jfloat)x2
                withFloat:(jfloat)y2 {
  
#line 105
  self->x1_ = x1;
  self->y1_ = y1;
  self->ctrlx_ = ctrlx;
  self->ctrly_ = ctrly;
  self->x2_ = x2;
  self->y2_ = y2;
}


#line 113
- (ComItextpdfAwtGeomRectangle2D *)getBounds2D {
  
#line 114
  jfloat rx0 = [JavaLangMath minWithFloat:[JavaLangMath minWithFloat:x1_ withFloat:x2_] withFloat:ctrlx_];
  jfloat ry0 = [JavaLangMath minWithFloat:[JavaLangMath minWithFloat:y1_ withFloat:y2_] withFloat:ctrly_];
  jfloat rx1 = [JavaLangMath maxWithFloat:[JavaLangMath maxWithFloat:x1_ withFloat:x2_] withFloat:ctrlx_];
  jfloat ry1 = [JavaLangMath maxWithFloat:[JavaLangMath maxWithFloat:y1_ withFloat:y2_] withFloat:ctrly_];
  return [[ComItextpdfAwtGeomRectangle2D_Float alloc] initWithFloat:rx0 withFloat:ry0 withFloat:rx1 - rx0 withFloat:ry1 - ry0];
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomQuadCurve2D_Float *)other {
  [super copyAllFieldsTo:other];
  other->ctrlx_ = ctrlx_;
  other->ctrly_ = ctrly_;
  other->x1_ = x1_;
  other->x2_ = x2_;
  other->y1_ = y1_;
  other->y2_ = y2_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Float", NULL, 0x1, NULL },
    { "initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "Float", NULL, 0x1, NULL },
    { "getX1", NULL, "D", 0x1, NULL },
    { "getY1", NULL, "D", 0x1, NULL },
    { "getCtrlX", NULL, "D", 0x1, NULL },
    { "getCtrlY", NULL, "D", 0x1, NULL },
    { "getX2", NULL, "D", 0x1, NULL },
    { "getY2", NULL, "D", 0x1, NULL },
    { "getP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getCtrlPt", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x1, NULL },
    { "setCurveWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "setCurve", "V", 0x1, NULL },
    { "getBounds2D", NULL, "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x1_", NULL, 0x1, "F", NULL,  },
    { "y1_", NULL, 0x1, "F", NULL,  },
    { "ctrlx_", NULL, 0x1, "F", NULL,  },
    { "ctrly_", NULL, 0x1, "F", NULL,  },
    { "x2_", NULL, 0x1, "F", NULL,  },
    { "y2_", NULL, 0x1, "F", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomQuadCurve2D_Float = { "Float", "com.itextpdf.awt.geom", "QuadCurve2D", 0x9, 14, methods, 6, fields, 0, NULL};
  return &_ComItextpdfAwtGeomQuadCurve2D_Float;
}

@end


#line 122
@implementation ComItextpdfAwtGeomQuadCurve2D_Double


#line 131
- (instancetype)init {
  return [super init];
}


#line 134
- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)ctrlx
                    withDouble:(jdouble)ctrly
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  if (self = [super init]) {
    
#line 135
    [self setCurveWithDouble:x1 withDouble:y1 withDouble:ctrlx withDouble:ctrly withDouble:x2 withDouble:y2];
  }
  return self;
}


#line 139
- (jdouble)getX1 {
  
#line 140
  return x1_;
}


#line 144
- (jdouble)getY1 {
  return y1_;
}


#line 149
- (jdouble)getCtrlX {
  
#line 150
  return ctrlx_;
}


#line 154
- (jdouble)getCtrlY {
  return ctrly_;
}


#line 159
- (jdouble)getX2 {
  
#line 160
  return x2_;
}


#line 164
- (jdouble)getY2 {
  return y2_;
}


#line 169
- (ComItextpdfAwtGeomPoint2D *)getP1 {
  
#line 170
  return [[ComItextpdfAwtGeomPoint2D_Double alloc] initWithDouble:x1_ withDouble:y1_];
}


#line 174
- (ComItextpdfAwtGeomPoint2D *)getCtrlPt {
  return [[ComItextpdfAwtGeomPoint2D_Double alloc] initWithDouble:ctrlx_ withDouble:ctrly_];
}


#line 179
- (ComItextpdfAwtGeomPoint2D *)getP2 {
  
#line 180
  return [[ComItextpdfAwtGeomPoint2D_Double alloc] initWithDouble:x2_ withDouble:y2_];
}


#line 184
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx
                withDouble:(jdouble)ctrly
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  self->x1_ = x1;
  self->y1_ = y1;
  self->ctrlx_ = ctrlx;
  self->ctrly_ = ctrly;
  self->x2_ = x2;
  self->y2_ = y2;
}


#line 193
- (ComItextpdfAwtGeomRectangle2D *)getBounds2D {
  
#line 194
  jdouble rx0 = [JavaLangMath minWithDouble:[JavaLangMath minWithDouble:x1_ withDouble:x2_] withDouble:ctrlx_];
  jdouble ry0 = [JavaLangMath minWithDouble:[JavaLangMath minWithDouble:y1_ withDouble:y2_] withDouble:ctrly_];
  jdouble rx1 = [JavaLangMath maxWithDouble:[JavaLangMath maxWithDouble:x1_ withDouble:x2_] withDouble:ctrlx_];
  jdouble ry1 = [JavaLangMath maxWithDouble:[JavaLangMath maxWithDouble:y1_ withDouble:y2_] withDouble:ctrly_];
  return [[ComItextpdfAwtGeomRectangle2D_Double alloc] initWithDouble:rx0 withDouble:ry0 withDouble:rx1 - rx0 withDouble:ry1 - ry0];
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomQuadCurve2D_Double *)other {
  [super copyAllFieldsTo:other];
  other->ctrlx_ = ctrlx_;
  other->ctrly_ = ctrly_;
  other->x1_ = x1_;
  other->x2_ = x2_;
  other->y1_ = y1_;
  other->y2_ = y2_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Double", NULL, 0x1, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "Double", NULL, 0x1, NULL },
    { "getX1", NULL, "D", 0x1, NULL },
    { "getY1", NULL, "D", 0x1, NULL },
    { "getCtrlX", NULL, "D", 0x1, NULL },
    { "getCtrlY", NULL, "D", 0x1, NULL },
    { "getX2", NULL, "D", 0x1, NULL },
    { "getY2", NULL, "D", 0x1, NULL },
    { "getP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getCtrlPt", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x1, NULL },
    { "getBounds2D", NULL, "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x1_", NULL, 0x1, "D", NULL,  },
    { "y1_", NULL, 0x1, "D", NULL,  },
    { "ctrlx_", NULL, 0x1, "D", NULL,  },
    { "ctrly_", NULL, 0x1, "D", NULL,  },
    { "x2_", NULL, 0x1, "D", NULL,  },
    { "y2_", NULL, 0x1, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomQuadCurve2D_Double = { "Double", "com.itextpdf.awt.geom", "QuadCurve2D", 0x9, 13, methods, 6, fields, 0, NULL};
  return &_ComItextpdfAwtGeomQuadCurve2D_Double;
}

@end


#line 205
@implementation ComItextpdfAwtGeomQuadCurve2D_Iterator


#line 227
- (instancetype)initWithComItextpdfAwtGeomQuadCurve2D:(ComItextpdfAwtGeomQuadCurve2D *)outer$
                    withComItextpdfAwtGeomQuadCurve2D:(ComItextpdfAwtGeomQuadCurve2D *)q
                withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  if (self = [super init]) {
    
#line 228
    self->c_ = q;
    
#line 229
    self->t_ = t;
  }
  return self;
}


#line 232
- (jint)getWindingRule {
  
#line 233
  return ComItextpdfAwtGeomPathIterator_WIND_NON_ZERO;
}


#line 236
- (jboolean)isDone {
  
#line 237
  return (index_ > 1);
}


#line 240
- (void)next {
  
#line 241
  index_++;
}


#line 244
- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  
#line 245
  if ([self isDone]) {
    
#line 247
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.4B"]];
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = ComItextpdfAwtGeomPathIterator_SEG_MOVETO;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((ComItextpdfAwtGeomQuadCurve2D *) nil_chk(c_)) getX1];
    *IOSDoubleArray_GetRef(coords, 1) = [c_ getY1];
    count = 1;
  }
  else {
    
#line 257
    type = ComItextpdfAwtGeomPathIterator_SEG_QUADTO;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((ComItextpdfAwtGeomQuadCurve2D *) nil_chk(c_)) getCtrlX];
    *IOSDoubleArray_GetRef(coords, 1) = [c_ getCtrlY];
    *IOSDoubleArray_GetRef(coords, 2) = [c_ getX2];
    *IOSDoubleArray_GetRef(coords, 3) = [c_ getY2];
    count = 2;
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:count];
  }
  return type;
}


#line 270
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  
#line 271
  if ([self isDone]) {
    
#line 273
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.4B"]];
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = ComItextpdfAwtGeomPathIterator_SEG_MOVETO;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) [((ComItextpdfAwtGeomQuadCurve2D *) nil_chk(c_)) getX1];
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) [c_ getY1];
    count = 1;
  }
  else {
    
#line 283
    type = ComItextpdfAwtGeomPathIterator_SEG_QUADTO;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) [((ComItextpdfAwtGeomQuadCurve2D *) nil_chk(c_)) getCtrlX];
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) [c_ getCtrlY];
    *IOSFloatArray_GetRef(coords, 2) = (jfloat) [c_ getX2];
    *IOSFloatArray_GetRef(coords, 3) = (jfloat) [c_ getY2];
    count = 2;
  }
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:count];
  }
  return type;
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomQuadCurve2D_Iterator *)other {
  [super copyAllFieldsTo:other];
  other->c_ = c_;
  other->index_ = index_;
  other->t_ = t_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfAwtGeomQuadCurve2D:withComItextpdfAwtGeomQuadCurve2D:withComItextpdfAwtGeomAffineTransform:", "Iterator", NULL, 0x0, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL },
    { "isDone", NULL, "Z", 0x1, NULL },
    { "next", NULL, "V", 0x1, NULL },
    { "currentSegmentWithDoubleArray:", "currentSegment", "I", 0x1, NULL },
    { "currentSegmentWithFloatArray:", "currentSegment", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "c_", NULL, 0x0, "Lcom.itextpdf.awt.geom.QuadCurve2D;", NULL,  },
    { "t_", NULL, 0x0, "Lcom.itextpdf.awt.geom.AffineTransform;", NULL,  },
    { "index_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomQuadCurve2D_Iterator = { "Iterator", "com.itextpdf.awt.geom", "QuadCurve2D", 0x0, 6, methods, 3, fields, 0, NULL};
  return &_ComItextpdfAwtGeomQuadCurve2D_Iterator;
}

@end
