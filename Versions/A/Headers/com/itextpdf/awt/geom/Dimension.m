//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/Dimension.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/Dimension.java"

#include "IOSClass.h"
#include "com/itextpdf/awt/geom/Dimension.h"
#include "com/itextpdf/awt/geom/misc/HashCode.h"
#include "java/lang/Math.h"


#line 31
@implementation ComItextpdfAwtGeomDimension


#line 38
- (instancetype)initWithComItextpdfAwtGeomDimension:(ComItextpdfAwtGeomDimension *)d {
  return
#line 39
  [self initComItextpdfAwtGeomDimensionWithDouble:((ComItextpdfAwtGeomDimension *) nil_chk(d))->width_ withDouble:d->height_];
}


#line 42
- (instancetype)init {
  return [self initComItextpdfAwtGeomDimensionWithInt:0 withInt:0];
}

- (instancetype)initComItextpdfAwtGeomDimensionWithDouble:(jdouble)width
                                               withDouble:(jdouble)height {
  if (self = [super init]) {
    
#line 47
    [self setSizeWithDouble:width withDouble:height];
  }
  return self;
}

- (instancetype)initWithDouble:(jdouble)width
                    withDouble:(jdouble)height {
  return [self initComItextpdfAwtGeomDimensionWithDouble:
#line 46
width withDouble:height];
}


#line 50
- (instancetype)initComItextpdfAwtGeomDimensionWithInt:(jint)width
                                               withInt:(jint)height {
  if (self = [super init]) {
    
#line 51
    [self setSizeWithInt:width withInt:height];
  }
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  return [self initComItextpdfAwtGeomDimensionWithInt:
#line 50
width withInt:height];
}

- (NSUInteger)hash {
  
#line 56
  ComItextpdfAwtGeomMiscHashCode *hash_ = [[ComItextpdfAwtGeomMiscHashCode alloc] init];
  (void) [hash_ appendWithDouble:width_];
  (void) [hash_ appendWithDouble:height_];
  return ((jint) [hash_ hash]);
}

- (jboolean)isEqual:(id)obj {
  
#line 64
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[ComItextpdfAwtGeomDimension class]]) {
    ComItextpdfAwtGeomDimension *d = (ComItextpdfAwtGeomDimension *) check_class_cast(obj, [ComItextpdfAwtGeomDimension class]);
    return (((ComItextpdfAwtGeomDimension *) nil_chk(d))->width_ == width_ && d->height_ == height_);
  }
  return NO;
}

- (NSString *)description {
  
#line 78
  return JreStrcat("$$D$DC", [[self getClass] getName], @"[width=", width_, @",height=", height_, ']');
}


#line 81
- (void)setSizeWithInt:(jint)width
               withInt:(jint)height {
  
#line 82
  self->width_ = width;
  self->height_ = height;
}


#line 86
- (void)setSizeWithComItextpdfAwtGeomDimension:(ComItextpdfAwtGeomDimension *)d {
  
#line 87
  [self setSizeWithDouble:((ComItextpdfAwtGeomDimension *) nil_chk(d))->width_ withDouble:d->height_];
}


#line 91
- (void)setSizeWithDouble:(jdouble)width
               withDouble:(jdouble)height {
  [self setSizeWithInt:J2ObjCFpToInt([JavaLangMath ceilWithDouble:width]) withInt:J2ObjCFpToInt([JavaLangMath ceilWithDouble:height])];
}


#line 95
- (ComItextpdfAwtGeomDimension *)getSize {
  return [[ComItextpdfAwtGeomDimension alloc] initWithDouble:width_ withDouble:height_];
}


#line 100
- (jdouble)getHeight {
  
#line 101
  return height_;
}


#line 105
- (jdouble)getWidth {
  return width_;
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomDimension *)other {
  [super copyAllFieldsTo:other];
  other->height_ = height_;
  other->width_ = width_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfAwtGeomDimension:", "Dimension", NULL, 0x1, NULL },
    { "init", "Dimension", NULL, 0x1, NULL },
    { "initWithDouble:withDouble:", "Dimension", NULL, 0x1, NULL },
    { "initWithInt:withInt:", "Dimension", NULL, 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "setSizeWithInt:withInt:", "setSize", "V", 0x1, NULL },
    { "setSizeWithComItextpdfAwtGeomDimension:", "setSize", "V", 0x1, NULL },
    { "setSizeWithDouble:withDouble:", "setSize", "V", 0x1, NULL },
    { "getSize", NULL, "Lcom.itextpdf.awt.geom.Dimension;", 0x1, NULL },
    { "getHeight", NULL, "D", 0x1, NULL },
    { "getWidth", NULL, "D", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfAwtGeomDimension_serialVersionUID },
    { "width_", NULL, 0x1, "D", NULL,  },
    { "height_", NULL, 0x1, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomDimension = { "Dimension", "com.itextpdf.awt.geom", NULL, 0x1, 13, methods, 3, fields, 0, NULL};
  return &_ComItextpdfAwtGeomDimension;
}

@end
