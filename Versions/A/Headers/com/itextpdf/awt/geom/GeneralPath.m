//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/GeneralPath.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/GeneralPath.java"

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/awt/geom/AffineTransform.h"
#include "com/itextpdf/awt/geom/FlatteningPathIterator.h"
#include "com/itextpdf/awt/geom/GeneralPath.h"
#include "com/itextpdf/awt/geom/IllegalPathStateException.h"
#include "com/itextpdf/awt/geom/PathIterator.h"
#include "com/itextpdf/awt/geom/Point2D.h"
#include "com/itextpdf/awt/geom/Rectangle.h"
#include "com/itextpdf/awt/geom/Rectangle2D.h"
#include "com/itextpdf/awt/geom/Shape.h"
#include "com/itextpdf/awt/geom/gl/Crossing.h"
#include "com/itextpdf/awt/geom/misc/Messages.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/NoSuchElementException.h"

BOOL ComItextpdfAwtGeomGeneralPath_initialized = NO;


#line 31
@implementation ComItextpdfAwtGeomGeneralPath

IOSIntArray * ComItextpdfAwtGeomGeneralPath_pointShift_;


#line 170
- (instancetype)init {
  return
#line 171
  [self initComItextpdfAwtGeomGeneralPathWithInt:ComItextpdfAwtGeomGeneralPath_WIND_NON_ZERO withInt:ComItextpdfAwtGeomGeneralPath_BUFFER_SIZE];
}


#line 174
- (instancetype)initWithInt:(jint)rule {
  return [self initComItextpdfAwtGeomGeneralPathWithInt:rule withInt:ComItextpdfAwtGeomGeneralPath_BUFFER_SIZE];
}

- (instancetype)initComItextpdfAwtGeomGeneralPathWithInt:(jint)rule
                                                 withInt:(jint)initialCapacity {
  if (self = [super init]) {
    
#line 179
    [self setWindingRuleWithInt:rule];
    
#line 180
    types_ = [IOSByteArray arrayWithLength:initialCapacity];
    
#line 181
    points_ = [IOSFloatArray arrayWithLength:initialCapacity * 2];
  }
  return self;
}

- (instancetype)initWithInt:(jint)rule
                    withInt:(jint)initialCapacity {
  return [self initComItextpdfAwtGeomGeneralPathWithInt:
#line 178
rule withInt:initialCapacity];
}


#line 184
- (instancetype)initWithComItextpdfAwtGeomShape:(id<ComItextpdfAwtGeomShape>)shape {
  if (self =
#line 185
  [self initComItextpdfAwtGeomGeneralPathWithInt:ComItextpdfAwtGeomGeneralPath_WIND_NON_ZERO withInt:ComItextpdfAwtGeomGeneralPath_BUFFER_SIZE]) {
    
#line 186
    id<ComItextpdfAwtGeomPathIterator> p = [((id<ComItextpdfAwtGeomShape>) nil_chk(shape)) getPathIteratorWithComItextpdfAwtGeomAffineTransform:nil];
    
#line 187
    [self setWindingRuleWithInt:[((id<ComItextpdfAwtGeomPathIterator>) nil_chk(p)) getWindingRule]];
    
#line 188
    [self appendWithComItextpdfAwtGeomPathIterator:p withBoolean:NO];
  }
  return self;
}


#line 191
- (void)setWindingRuleWithInt:(jint)rule {
  
#line 192
  if (rule != ComItextpdfAwtGeomGeneralPath_WIND_EVEN_ODD && rule != ComItextpdfAwtGeomGeneralPath_WIND_NON_ZERO) {
    
#line 194
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.209"]];
  }
  self->rule_ = rule;
}


#line 199
- (jint)getWindingRule {
  
#line 200
  return rule_;
}


#line 207
- (void)checkBufWithInt:(jint)pointCount
            withBoolean:(jboolean)checkMove {
  
#line 208
  if (checkMove && typeSize_ == 0) {
    
#line 210
    @throw [[ComItextpdfAwtGeomIllegalPathStateException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.20A"]];
  }
  if (typeSize_ == ((IOSByteArray *) nil_chk(types_))->size_) {
    IOSByteArray *tmp = [IOSByteArray arrayWithLength:typeSize_ + ComItextpdfAwtGeomGeneralPath_BUFFER_CAPACITY];
    [JavaLangSystem arraycopyWithId:types_ withInt:0 withId:tmp withInt:0 withInt:typeSize_];
    types_ = tmp;
  }
  if (pointSize_ + pointCount > ((IOSFloatArray *) nil_chk(points_))->size_) {
    IOSFloatArray *tmp = [IOSFloatArray arrayWithLength:pointSize_ + [JavaLangMath maxWithInt:ComItextpdfAwtGeomGeneralPath_BUFFER_CAPACITY * 2 withInt:pointCount]];
    [JavaLangSystem arraycopyWithId:points_ withInt:0 withId:tmp withInt:0 withInt:pointSize_];
    points_ = tmp;
  }
}


#line 224
- (void)moveToWithFloat:(jfloat)x
              withFloat:(jfloat)y {
  
#line 225
  if (typeSize_ > 0 && IOSByteArray_Get(nil_chk(types_), typeSize_ - 1) == ComItextpdfAwtGeomPathIterator_SEG_MOVETO) {
    *IOSFloatArray_GetRef(nil_chk(points_), pointSize_ - 2) = x;
    *IOSFloatArray_GetRef(points_, pointSize_ - 1) = y;
  }
  else {
    
#line 229
    [self checkBufWithInt:2 withBoolean:NO];
    *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = ComItextpdfAwtGeomPathIterator_SEG_MOVETO;
    *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = x;
    *IOSFloatArray_GetRef(points_, pointSize_++) = y;
  }
}


#line 236
- (void)lineToWithFloat:(jfloat)x
              withFloat:(jfloat)y {
  
#line 237
  [self checkBufWithInt:2 withBoolean:YES];
  *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = ComItextpdfAwtGeomPathIterator_SEG_LINETO;
  *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = x;
  *IOSFloatArray_GetRef(points_, pointSize_++) = y;
}


#line 243
- (void)quadToWithFloat:(jfloat)x1
              withFloat:(jfloat)y1
              withFloat:(jfloat)x2
              withFloat:(jfloat)y2 {
  
#line 244
  [self checkBufWithInt:4 withBoolean:YES];
  *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = ComItextpdfAwtGeomPathIterator_SEG_QUADTO;
  *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = x1;
  *IOSFloatArray_GetRef(points_, pointSize_++) = y1;
  *IOSFloatArray_GetRef(points_, pointSize_++) = x2;
  *IOSFloatArray_GetRef(points_, pointSize_++) = y2;
}


#line 252
- (void)curveToWithFloat:(jfloat)x1
               withFloat:(jfloat)y1
               withFloat:(jfloat)x2
               withFloat:(jfloat)y2
               withFloat:(jfloat)x3
               withFloat:(jfloat)y3 {
  
#line 253
  [self checkBufWithInt:6 withBoolean:YES];
  *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = ComItextpdfAwtGeomPathIterator_SEG_CUBICTO;
  *IOSFloatArray_GetRef(nil_chk(points_), pointSize_++) = x1;
  *IOSFloatArray_GetRef(points_, pointSize_++) = y1;
  *IOSFloatArray_GetRef(points_, pointSize_++) = x2;
  *IOSFloatArray_GetRef(points_, pointSize_++) = y2;
  *IOSFloatArray_GetRef(points_, pointSize_++) = x3;
  *IOSFloatArray_GetRef(points_, pointSize_++) = y3;
}


#line 263
- (void)closePath {
  
#line 264
  if (typeSize_ == 0 || IOSByteArray_Get(nil_chk(types_), typeSize_ - 1) != ComItextpdfAwtGeomPathIterator_SEG_CLOSE) {
    [self checkBufWithInt:0 withBoolean:YES];
    *IOSByteArray_GetRef(nil_chk(types_), typeSize_++) = ComItextpdfAwtGeomPathIterator_SEG_CLOSE;
  }
}


#line 270
- (void)appendWithComItextpdfAwtGeomShape:(id<ComItextpdfAwtGeomShape>)shape
                              withBoolean:(jboolean)connect {
  
#line 271
  id<ComItextpdfAwtGeomPathIterator> p = [((id<ComItextpdfAwtGeomShape>) nil_chk(shape)) getPathIteratorWithComItextpdfAwtGeomAffineTransform:nil];
  [self appendWithComItextpdfAwtGeomPathIterator:p withBoolean:connect];
}


#line 275
- (void)appendWithComItextpdfAwtGeomPathIterator:(id<ComItextpdfAwtGeomPathIterator>)path
                                     withBoolean:(jboolean)connect {
  
#line 276
  while (![((id<ComItextpdfAwtGeomPathIterator>) nil_chk(path)) isDone]) {
    IOSFloatArray *coords = [IOSFloatArray arrayWithLength:6];
    switch ([path currentSegmentWithFloatArray:coords]) {
      case ComItextpdfAwtGeomPathIterator_SEG_MOVETO:
      if (!connect || typeSize_ == 0) {
        [self moveToWithFloat:IOSFloatArray_Get(coords, 0) withFloat:IOSFloatArray_Get(coords, 1)];
        break;
      }
      if (IOSByteArray_Get(nil_chk(types_), typeSize_ - 1) != ComItextpdfAwtGeomPathIterator_SEG_CLOSE &&
#line 285
      IOSFloatArray_Get(nil_chk(points_), pointSize_ - 2) == IOSFloatArray_Get(coords, 0) &&
#line 286
      IOSFloatArray_Get(points_, pointSize_ - 1) == IOSFloatArray_Get(coords, 1)) {
        
#line 288
        break;
      }
      
#line 291
      case ComItextpdfAwtGeomPathIterator_SEG_LINETO:
      [self lineToWithFloat:IOSFloatArray_Get(coords, 0) withFloat:IOSFloatArray_Get(coords, 1)];
      break;
      case ComItextpdfAwtGeomPathIterator_SEG_QUADTO:
      [self quadToWithFloat:IOSFloatArray_Get(coords, 0) withFloat:IOSFloatArray_Get(coords, 1) withFloat:IOSFloatArray_Get(coords, 2) withFloat:IOSFloatArray_Get(coords, 3)];
      break;
      case ComItextpdfAwtGeomPathIterator_SEG_CUBICTO:
      [self curveToWithFloat:IOSFloatArray_Get(coords, 0) withFloat:IOSFloatArray_Get(coords, 1) withFloat:IOSFloatArray_Get(coords, 2) withFloat:IOSFloatArray_Get(coords, 3) withFloat:IOSFloatArray_Get(coords, 4) withFloat:IOSFloatArray_Get(coords, 5)];
      break;
      case ComItextpdfAwtGeomPathIterator_SEG_CLOSE:
      [self closePath];
      break;
    }
    [path next];
    connect = NO;
  }
}


#line 309
- (ComItextpdfAwtGeomPoint2D *)getCurrentPoint {
  
#line 310
  if (typeSize_ == 0) {
    return nil;
  }
  jint j = pointSize_ - 2;
  if (IOSByteArray_Get(nil_chk(types_), typeSize_ - 1) == ComItextpdfAwtGeomPathIterator_SEG_CLOSE) {
    
#line 316
    for (jint i = typeSize_ - 2; i > 0; i--) {
      jint type = IOSByteArray_Get(types_, i);
      if (type == ComItextpdfAwtGeomPathIterator_SEG_MOVETO) {
        break;
      }
      j -= IOSIntArray_Get(nil_chk(ComItextpdfAwtGeomGeneralPath_pointShift_), type);
    }
  }
  return [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:IOSFloatArray_Get(nil_chk(points_), j) withFloat:IOSFloatArray_Get(points_, j + 1)];
}


#line 327
- (void)reset {
  
#line 328
  typeSize_ = 0;
  pointSize_ = 0;
}


#line 332
- (void)transformWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 333
  [((ComItextpdfAwtGeomAffineTransform *) nil_chk(t)) transformWithFloatArray:points_ withInt:0 withFloatArray:points_ withInt:0 withInt:pointSize_ / 2];
}


#line 336
- (id<ComItextpdfAwtGeomShape>)createTransformedShapeWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 337
  ComItextpdfAwtGeomGeneralPath *p = (ComItextpdfAwtGeomGeneralPath *) check_class_cast([self clone], [ComItextpdfAwtGeomGeneralPath class]);
  if (t != nil) {
    [((ComItextpdfAwtGeomGeneralPath *) nil_chk(p)) transformWithComItextpdfAwtGeomAffineTransform:t];
  }
  return p;
}


#line 344
- (ComItextpdfAwtGeomRectangle2D *)getBounds2D {
  
#line 345
  jfloat rx1, ry1, rx2, ry2;
  if (pointSize_ == 0) {
    rx1 = ry1 = rx2 = ry2 = 0.0f;
  }
  else {
    
#line 349
    jint i = pointSize_ - 1;
    ry1 = ry2 = IOSFloatArray_Get(nil_chk(points_), i--);
    rx1 = rx2 = IOSFloatArray_Get(points_, i--);
    while (i > 0) {
      jfloat y = IOSFloatArray_Get(points_, i--);
      jfloat x = IOSFloatArray_Get(points_, i--);
      if (x < rx1) {
        rx1 = x;
      }
      else if (x > rx2) {
        rx2 = x;
      }
      if (y < ry1) {
        ry1 = y;
      }
      else if (y > ry2) {
        ry2 = y;
      }
    }
  }
  return [[ComItextpdfAwtGeomRectangle2D_Float alloc] initWithFloat:rx1 withFloat:ry1 withFloat:rx2 - rx1 withFloat:ry2 - ry1];
}


#line 372
- (ComItextpdfAwtGeomRectangle *)getBounds {
  
#line 373
  return [((ComItextpdfAwtGeomRectangle2D *) nil_chk([self getBounds2D])) getBounds];
}


#line 381
- (jboolean)isInsideWithInt:(jint)cross {
  
#line 382
  if (rule_ == ComItextpdfAwtGeomGeneralPath_WIND_NON_ZERO) {
    return [ComItextpdfAwtGeomGlCrossing isInsideNonZeroWithInt:cross];
  }
  return [ComItextpdfAwtGeomGlCrossing isInsideEvenOddWithInt:cross];
}


#line 388
- (jboolean)containsWithDouble:(jdouble)px
                    withDouble:(jdouble)py {
  
#line 389
  return [self isInsideWithInt:[ComItextpdfAwtGeomGlCrossing crossShapeWithComItextpdfAwtGeomShape:self withDouble:px withDouble:py]];
}


#line 392
- (jboolean)containsWithDouble:(jdouble)rx
                    withDouble:(jdouble)ry
                    withDouble:(jdouble)rw
                    withDouble:(jdouble)rh {
  
#line 393
  jint cross = [ComItextpdfAwtGeomGlCrossing intersectShapeWithComItextpdfAwtGeomShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return cross != ComItextpdfAwtGeomGlCrossing_CROSSING && [self isInsideWithInt:cross];
}


#line 397
- (jboolean)intersectsWithDouble:(jdouble)rx
                      withDouble:(jdouble)ry
                      withDouble:(jdouble)rw
                      withDouble:(jdouble)rh {
  
#line 398
  jint cross = [ComItextpdfAwtGeomGlCrossing intersectShapeWithComItextpdfAwtGeomShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return cross == ComItextpdfAwtGeomGlCrossing_CROSSING || [self isInsideWithInt:cross];
}


#line 402
- (jboolean)containsWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p {
  
#line 403
  return [self containsWithDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}


#line 406
- (jboolean)containsWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 407
  return [self containsWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}


#line 410
- (jboolean)intersectsWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 411
  return [self intersectsWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}


#line 414
- (id<ComItextpdfAwtGeomPathIterator>)getPathIteratorWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 415
  return [[ComItextpdfAwtGeomGeneralPath_Iterator alloc] initWithComItextpdfAwtGeomGeneralPath:self withComItextpdfAwtGeomGeneralPath:self withComItextpdfAwtGeomAffineTransform:t];
}


#line 418
- (id<ComItextpdfAwtGeomPathIterator>)getPathIteratorWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t
                                                                                withDouble:(jdouble)flatness {
  
#line 419
  return [[ComItextpdfAwtGeomFlatteningPathIterator alloc] initWithComItextpdfAwtGeomPathIterator:[self getPathIteratorWithComItextpdfAwtGeomAffineTransform:t] withDouble:flatness];
}


#line 423
- (id)clone {
  
#line 424
  @try {
    ComItextpdfAwtGeomGeneralPath *p = (ComItextpdfAwtGeomGeneralPath *) check_class_cast([super clone], [ComItextpdfAwtGeomGeneralPath class]);
    ((ComItextpdfAwtGeomGeneralPath *) nil_chk(p))->types_ = [((IOSByteArray *) nil_chk(types_)) clone];
    p->points_ = [((IOSFloatArray *) nil_chk(points_)) clone];
    return p;
  }
  @catch (
#line 429
  JavaLangCloneNotSupportedException *e) {
    @throw [[JavaLangInternalError alloc] init];
  }
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomGeneralPath *)other {
  [super copyAllFieldsTo:other];
  other->pointSize_ = pointSize_;
  other->points_ = points_;
  other->rule_ = rule_;
  other->typeSize_ = typeSize_;
  other->types_ = types_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (void)initialize {
  if (self == [ComItextpdfAwtGeomGeneralPath class]) {
    ComItextpdfAwtGeomGeneralPath_pointShift_ = [IOSIntArray arrayWithInts:(jint[]){
#line 75
      2,
#line 76
      2,
#line 77
      4,
#line 78
      6,
#line 79
      0 } count:5];
      ComItextpdfAwtGeomGeneralPath_initialized = YES;
    }
  }

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "GeneralPath", NULL, 0x1, NULL },
    { "initWithInt:", "GeneralPath", NULL, 0x1, NULL },
    { "initWithInt:withInt:", "GeneralPath", NULL, 0x1, NULL },
    { "initWithComItextpdfAwtGeomShape:", "GeneralPath", NULL, 0x1, NULL },
    { "setWindingRuleWithInt:", "setWindingRule", "V", 0x1, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL },
    { "checkBufWithInt:withBoolean:", "checkBuf", "V", 0x0, NULL },
    { "moveToWithFloat:withFloat:", "moveTo", "V", 0x1, NULL },
    { "lineToWithFloat:withFloat:", "lineTo", "V", 0x1, NULL },
    { "quadToWithFloat:withFloat:withFloat:withFloat:", "quadTo", "V", 0x1, NULL },
    { "curveToWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "curveTo", "V", 0x1, NULL },
    { "closePath", NULL, "V", 0x1, NULL },
    { "appendWithComItextpdfAwtGeomShape:withBoolean:", "append", "V", 0x1, NULL },
    { "appendWithComItextpdfAwtGeomPathIterator:withBoolean:", "append", "V", 0x1, NULL },
    { "getCurrentPoint", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "reset", NULL, "V", 0x1, NULL },
    { "transformWithComItextpdfAwtGeomAffineTransform:", "transform", "V", 0x1, NULL },
    { "createTransformedShapeWithComItextpdfAwtGeomAffineTransform:", "createTransformedShape", "Lcom.itextpdf.awt.geom.Shape;", 0x1, NULL },
    { "getBounds2D", NULL, "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
    { "getBounds", NULL, "Lcom.itextpdf.awt.geom.Rectangle;", 0x1, NULL },
    { "isInsideWithInt:", "isInside", "Z", 0x0, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL },
    { "containsWithComItextpdfAwtGeomPoint2D:", "contains", "Z", 0x1, NULL },
    { "containsWithComItextpdfAwtGeomRectangle2D:", "contains", "Z", 0x1, NULL },
    { "intersectsWithComItextpdfAwtGeomRectangle2D:", "intersects", "Z", 0x1, NULL },
    { "getPathIteratorWithComItextpdfAwtGeomAffineTransform:", "getPathIterator", "Lcom.itextpdf.awt.geom.PathIterator;", 0x1, NULL },
    { "getPathIteratorWithComItextpdfAwtGeomAffineTransform:withDouble:", "getPathIterator", "Lcom.itextpdf.awt.geom.PathIterator;", 0x1, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "WIND_EVEN_ODD_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomGeneralPath_WIND_EVEN_ODD },
    { "WIND_NON_ZERO_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomGeneralPath_WIND_NON_ZERO },
    { "BUFFER_SIZE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomGeneralPath_BUFFER_SIZE },
    { "BUFFER_CAPACITY_", NULL, 0x1a, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomGeneralPath_BUFFER_CAPACITY },
    { "types_", NULL, 0x0, "[B", NULL,  },
    { "points_", NULL, 0x0, "[F", NULL,  },
    { "typeSize_", NULL, 0x0, "I", NULL,  },
    { "pointSize_", NULL, 0x0, "I", NULL,  },
    { "rule_", NULL, 0x0, "I", NULL,  },
    { "pointShift_", NULL, 0x8, "[I", &ComItextpdfAwtGeomGeneralPath_pointShift_,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomGeneralPath = { "GeneralPath", "com.itextpdf.awt.geom", NULL, 0x11, 30, methods, 10, fields, 0, NULL};
  return &_ComItextpdfAwtGeomGeneralPath;
}

@end


#line 84
@implementation ComItextpdfAwtGeomGeneralPath_Iterator


#line 110
- (instancetype)initWithComItextpdfAwtGeomGeneralPath:(ComItextpdfAwtGeomGeneralPath *)outer$
                    withComItextpdfAwtGeomGeneralPath:(ComItextpdfAwtGeomGeneralPath *)path {
  return
#line 111
  [self initComItextpdfAwtGeomGeneralPath_IteratorWithComItextpdfAwtGeomGeneralPath:outer$ withComItextpdfAwtGeomGeneralPath:path withComItextpdfAwtGeomAffineTransform:nil];
}


#line 119
- (instancetype)initComItextpdfAwtGeomGeneralPath_IteratorWithComItextpdfAwtGeomGeneralPath:(ComItextpdfAwtGeomGeneralPath *)outer$
                                                          withComItextpdfAwtGeomGeneralPath:(ComItextpdfAwtGeomGeneralPath *)path
                                                      withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)at {
  if (self = [super init]) {
    
#line 120
    self->p_ = path;
    
#line 121
    self->t_ = at;
  }
  return self;
}

- (instancetype)initWithComItextpdfAwtGeomGeneralPath:(ComItextpdfAwtGeomGeneralPath *)outer$
                    withComItextpdfAwtGeomGeneralPath:(ComItextpdfAwtGeomGeneralPath *)path
                withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)at {
  return [self initComItextpdfAwtGeomGeneralPath_IteratorWithComItextpdfAwtGeomGeneralPath:outer$ withComItextpdfAwtGeomGeneralPath:
#line 119
path withComItextpdfAwtGeomAffineTransform:at];
}


#line 124
- (jint)getWindingRule {
  
#line 125
  return [((ComItextpdfAwtGeomGeneralPath *) nil_chk(p_)) getWindingRule];
}


#line 128
- (jboolean)isDone {
  
#line 129
  return typeIndex_ >= ((ComItextpdfAwtGeomGeneralPath *) nil_chk(p_))->typeSize_;
}


#line 132
- (void)next {
  
#line 133
  typeIndex_++;
}


#line 136
- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  
#line 137
  if ([self isDone]) {
    
#line 139
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.4B"]];
  }
  jint type = IOSByteArray_Get(nil_chk(((ComItextpdfAwtGeomGeneralPath *) nil_chk(p_))->types_), typeIndex_);
  jint count = IOSIntArray_Get(nil_chk(ComItextpdfAwtGeomGeneralPath_get_pointShift_()), type);
  for (jint i = 0; i < count; i++) {
    *IOSDoubleArray_GetRef(nil_chk(coords), i) = IOSFloatArray_Get(nil_chk(p_->points_), pointIndex_ + i);
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:count / 2];
  }
  pointIndex_ += count;
  return type;
}


#line 153
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  
#line 154
  if ([self isDone]) {
    
#line 156
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.4B"]];
  }
  jint type = IOSByteArray_Get(nil_chk(((ComItextpdfAwtGeomGeneralPath *) nil_chk(p_))->types_), typeIndex_);
  jint count = IOSIntArray_Get(nil_chk(ComItextpdfAwtGeomGeneralPath_get_pointShift_()), type);
  [JavaLangSystem arraycopyWithId:p_->points_ withInt:pointIndex_ withId:coords withInt:0 withInt:count];
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:count / 2];
  }
  pointIndex_ += count;
  return type;
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomGeneralPath_Iterator *)other {
  [super copyAllFieldsTo:other];
  other->p_ = p_;
  other->pointIndex_ = pointIndex_;
  other->t_ = t_;
  other->typeIndex_ = typeIndex_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfAwtGeomGeneralPath:withComItextpdfAwtGeomGeneralPath:", "Iterator", NULL, 0x0, NULL },
    { "initWithComItextpdfAwtGeomGeneralPath:withComItextpdfAwtGeomGeneralPath:withComItextpdfAwtGeomAffineTransform:", "Iterator", NULL, 0x0, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL },
    { "isDone", NULL, "Z", 0x1, NULL },
    { "next", NULL, "V", 0x1, NULL },
    { "currentSegmentWithDoubleArray:", "currentSegment", "I", 0x1, NULL },
    { "currentSegmentWithFloatArray:", "currentSegment", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "typeIndex_", NULL, 0x0, "I", NULL,  },
    { "pointIndex_", NULL, 0x0, "I", NULL,  },
    { "p_", NULL, 0x0, "Lcom.itextpdf.awt.geom.GeneralPath;", NULL,  },
    { "t_", NULL, 0x0, "Lcom.itextpdf.awt.geom.AffineTransform;", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomGeneralPath_Iterator = { "Iterator", "com.itextpdf.awt.geom", "GeneralPath", 0x0, 7, methods, 4, fields, 0, NULL};
  return &_ComItextpdfAwtGeomGeneralPath_Iterator;
}

@end
