//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/AffineTransform.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/AffineTransform.java"

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/awt/geom/AffineTransform.h"
#include "com/itextpdf/awt/geom/GeneralPath.h"
#include "com/itextpdf/awt/geom/NoninvertibleTransformException.h"
#include "com/itextpdf/awt/geom/PathIterator.h"
#include "com/itextpdf/awt/geom/Point2D.h"
#include "com/itextpdf/awt/geom/Shape.h"
#include "com/itextpdf/awt/geom/misc/HashCode.h"
#include "com/itextpdf/awt/geom/misc/Messages.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"


#line 32
@implementation ComItextpdfAwtGeomAffineTransform


#line 72
- (instancetype)init {
  if (self = [super init]) {
    
#line 73
    type_ = ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY;
    
#line 74
    m00_ = m11_ = 1.0;
    
#line 75
    m10_ = m01_ = m02_ = m12_ = 0.0;
  }
  return self;
}


#line 78
- (instancetype)initWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  if (self = [super init]) {
    
#line 79
    self->type_ = ((ComItextpdfAwtGeomAffineTransform *) nil_chk(t))->type_;
    
#line 80
    self->m00_ = t->m00_;
    
#line 81
    self->m10_ = t->m10_;
    
#line 82
    self->m01_ = t->m01_;
    
#line 83
    self->m11_ = t->m11_;
    
#line 84
    self->m02_ = t->m02_;
    
#line 85
    self->m12_ = t->m12_;
  }
  return self;
}


#line 88
- (instancetype)initWithFloat:(jfloat)m00
                    withFloat:(jfloat)m10
                    withFloat:(jfloat)m01
                    withFloat:(jfloat)m11
                    withFloat:(jfloat)m02
                    withFloat:(jfloat)m12 {
  if (self = [super init]) {
    
#line 89
    self->type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
    
#line 90
    self->m00_ = m00;
    
#line 91
    self->m10_ = m10;
    
#line 92
    self->m01_ = m01;
    
#line 93
    self->m11_ = m11;
    
#line 94
    self->m02_ = m02;
    
#line 95
    self->m12_ = m12;
  }
  return self;
}


#line 98
- (instancetype)initWithDouble:(jdouble)m00
                    withDouble:(jdouble)m10
                    withDouble:(jdouble)m01
                    withDouble:(jdouble)m11
                    withDouble:(jdouble)m02
                    withDouble:(jdouble)m12 {
  if (self = [super init]) {
    
#line 99
    self->type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
    
#line 100
    self->m00_ = m00;
    
#line 101
    self->m10_ = m10;
    
#line 102
    self->m01_ = m01;
    
#line 103
    self->m11_ = m11;
    
#line 104
    self->m02_ = m02;
    
#line 105
    self->m12_ = m12;
  }
  return self;
}


#line 108
- (instancetype)initWithFloatArray:(IOSFloatArray *)matrix {
  if (self = [super init]) {
    
#line 109
    self->type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
    
#line 110
    m00_ = IOSFloatArray_Get(nil_chk(matrix), 0);
    
#line 111
    m10_ = IOSFloatArray_Get(matrix, 1);
    
#line 112
    m01_ = IOSFloatArray_Get(matrix, 2);
    
#line 113
    m11_ = IOSFloatArray_Get(matrix, 3);
    
#line 114
    if (matrix->size_ > 4) {
      m02_ = IOSFloatArray_Get(matrix, 4);
      m12_ = IOSFloatArray_Get(matrix, 5);
    }
  }
  return self;
}


#line 120
- (instancetype)initWithDoubleArray:(IOSDoubleArray *)matrix {
  if (self = [super init]) {
    
#line 121
    self->type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
    
#line 122
    m00_ = IOSDoubleArray_Get(nil_chk(matrix), 0);
    
#line 123
    m10_ = IOSDoubleArray_Get(matrix, 1);
    
#line 124
    m01_ = IOSDoubleArray_Get(matrix, 2);
    
#line 125
    m11_ = IOSDoubleArray_Get(matrix, 3);
    
#line 126
    if (matrix->size_ > 4) {
      m02_ = IOSDoubleArray_Get(matrix, 4);
      m12_ = IOSDoubleArray_Get(matrix, 5);
    }
  }
  return self;
}


#line 151
- (jint)getType {
  
#line 152
  if (type_ != ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN) {
    return type_;
  }
  
#line 156
  jint type = 0;
  
#line 158
  if (m00_ * m01_ + m10_ * m11_ != 0.0) {
    type |= ComItextpdfAwtGeomAffineTransform_TYPE_GENERAL_TRANSFORM;
    return type;
  }
  
#line 163
  if (m02_ != 0.0 || m12_ != 0.0) {
    type |= ComItextpdfAwtGeomAffineTransform_TYPE_TRANSLATION;
  }
  else if (m00_ == 1.0 && m11_ == 1.0 && m01_ == 0.0 && m10_ == 0.0) {
    type = ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY;
    return type;
  }
  
#line 171
  if (m00_ * m11_ - m01_ * m10_ < 0.0) {
    type |= ComItextpdfAwtGeomAffineTransform_TYPE_FLIP;
  }
  
#line 175
  jdouble dx = m00_ * m00_ + m10_ * m10_;
  jdouble dy = m01_ * m01_ + m11_ * m11_;
  if (dx != dy) {
    type |= ComItextpdfAwtGeomAffineTransform_TYPE_GENERAL_SCALE;
  }
  else if (dx != 1.0) {
    type |= ComItextpdfAwtGeomAffineTransform_TYPE_UNIFORM_SCALE;
  }
  
#line 184
  if ((m00_ == 0.0 && m11_ == 0.0) ||
#line 185
  (m10_ == 0.0 && m01_ == 0.0 && (m00_ < 0.0 || m11_ < 0.0))) {
    
#line 187
    type |= ComItextpdfAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION;
  }
  else if (m01_ != 0.0 || m10_ != 0.0) {
    type |= ComItextpdfAwtGeomAffineTransform_TYPE_GENERAL_ROTATION;
  }
  
#line 193
  return type;
}


#line 196
- (jdouble)getScaleX {
  
#line 197
  return m00_;
}


#line 200
- (jdouble)getScaleY {
  
#line 201
  return m11_;
}


#line 204
- (jdouble)getShearX {
  
#line 205
  return m01_;
}


#line 208
- (jdouble)getShearY {
  
#line 209
  return m10_;
}


#line 212
- (jdouble)getTranslateX {
  
#line 213
  return m02_;
}


#line 216
- (jdouble)getTranslateY {
  
#line 217
  return m12_;
}


#line 220
- (jboolean)isIdentity {
  
#line 221
  return [self getType] == ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY;
}


#line 224
- (void)getMatrixWithDoubleArray:(IOSDoubleArray *)matrix {
  
#line 225
  *IOSDoubleArray_GetRef(nil_chk(matrix), 0) = m00_;
  *IOSDoubleArray_GetRef(matrix, 1) = m10_;
  *IOSDoubleArray_GetRef(matrix, 2) = m01_;
  *IOSDoubleArray_GetRef(matrix, 3) = m11_;
  if (matrix->size_ > 4) {
    *IOSDoubleArray_GetRef(matrix, 4) = m02_;
    *IOSDoubleArray_GetRef(matrix, 5) = m12_;
  }
}


#line 235
- (jdouble)getDeterminant {
  
#line 236
  return m00_ * m11_ - m01_ * m10_;
}


#line 239
- (void)setTransformWithDouble:(jdouble)m00
                    withDouble:(jdouble)m10
                    withDouble:(jdouble)m01
                    withDouble:(jdouble)m11
                    withDouble:(jdouble)m02
                    withDouble:(jdouble)m12 {
  
#line 240
  self->type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
  self->m00_ = m00;
  self->m10_ = m10;
  self->m01_ = m01;
  self->m11_ = m11;
  self->m02_ = m02;
  self->m12_ = m12;
}


#line 249
- (void)setTransformWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 250
  type_ = ((ComItextpdfAwtGeomAffineTransform *) nil_chk(t))->type_;
  [self setTransformWithDouble:t->m00_ withDouble:t->m10_ withDouble:t->m01_ withDouble:t->m11_ withDouble:t->m02_ withDouble:t->m12_];
}


#line 254
- (void)setToIdentity {
  
#line 255
  type_ = ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY;
  m00_ = m11_ = 1.0;
  m10_ = m01_ = m02_ = m12_ = 0.0;
}


#line 260
- (void)setToTranslationWithDouble:(jdouble)mx
                        withDouble:(jdouble)my {
  
#line 261
  m00_ = m11_ = 1.0;
  m01_ = m10_ = 0.0;
  m02_ = mx;
  m12_ = my;
  if (mx == 0.0 && my == 0.0) {
    type_ = ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY;
  }
  else {
    
#line 268
    type_ = ComItextpdfAwtGeomAffineTransform_TYPE_TRANSLATION;
  }
}


#line 272
- (void)setToScaleWithDouble:(jdouble)scx
                  withDouble:(jdouble)scy {
  
#line 273
  m00_ = scx;
  m11_ = scy;
  m10_ = m01_ = m02_ = m12_ = 0.0;
  if (scx != 1.0 || scy != 1.0) {
    type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
  }
  else {
    
#line 279
    type_ = ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY;
  }
}


#line 283
- (void)setToShearWithDouble:(jdouble)shx
                  withDouble:(jdouble)shy {
  
#line 284
  m00_ = m11_ = 1.0;
  m02_ = m12_ = 0.0;
  m01_ = shx;
  m10_ = shy;
  if (shx != 0.0 || shy != 0.0) {
    type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
  }
  else {
    
#line 291
    type_ = ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY;
  }
}


#line 295
- (void)setToRotationWithDouble:(jdouble)angle {
  
#line 296
  jdouble sin = [JavaLangMath sinWithDouble:angle];
  jdouble cos = [JavaLangMath cosWithDouble:angle];
  if ([JavaLangMath absWithDouble:cos] < ComItextpdfAwtGeomAffineTransform_ZERO) {
    cos = 0.0;
    sin = sin > 0.0 ? 1.0 : -1.0;
  }
  else if ([JavaLangMath absWithDouble:sin] < ComItextpdfAwtGeomAffineTransform_ZERO) {
    sin = 0.0;
    cos = cos > 0.0 ? 1.0 : -1.0;
  }
  m00_ = m11_ = cos;
  m01_ = -sin;
  m10_ = sin;
  m02_ = m12_ = 0.0;
  type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
}


#line 313
- (void)setToRotationWithDouble:(jdouble)angle
                     withDouble:(jdouble)px
                     withDouble:(jdouble)py {
  
#line 314
  [self setToRotationWithDouble:angle];
  m02_ = px * (1.0 - m00_) + py * m10_;
  m12_ = py * (1.0 - m00_) - px * m10_;
  type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
}


#line 320
+ (ComItextpdfAwtGeomAffineTransform *)getTranslateInstanceWithDouble:(jdouble)mx
                                                           withDouble:(jdouble)my {
  
#line 321
  ComItextpdfAwtGeomAffineTransform *t = [[ComItextpdfAwtGeomAffineTransform alloc] init];
  [t setToTranslationWithDouble:mx withDouble:my];
  return t;
}


#line 326
+ (ComItextpdfAwtGeomAffineTransform *)getScaleInstanceWithDouble:(jdouble)scx
                                                       withDouble:(jdouble)scY {
  
#line 327
  ComItextpdfAwtGeomAffineTransform *t = [[ComItextpdfAwtGeomAffineTransform alloc] init];
  [t setToScaleWithDouble:scx withDouble:scY];
  return t;
}


#line 332
+ (ComItextpdfAwtGeomAffineTransform *)getShearInstanceWithDouble:(jdouble)shx
                                                       withDouble:(jdouble)shy {
  
#line 333
  ComItextpdfAwtGeomAffineTransform *m = [[ComItextpdfAwtGeomAffineTransform alloc] init];
  [m setToShearWithDouble:shx withDouble:shy];
  return m;
}


#line 338
+ (ComItextpdfAwtGeomAffineTransform *)getRotateInstanceWithDouble:(jdouble)angle {
  
#line 339
  ComItextpdfAwtGeomAffineTransform *t = [[ComItextpdfAwtGeomAffineTransform alloc] init];
  [t setToRotationWithDouble:angle];
  return t;
}


#line 344
+ (ComItextpdfAwtGeomAffineTransform *)getRotateInstanceWithDouble:(jdouble)angle
                                                        withDouble:(jdouble)x
                                                        withDouble:(jdouble)y {
  
#line 345
  ComItextpdfAwtGeomAffineTransform *t = [[ComItextpdfAwtGeomAffineTransform alloc] init];
  [t setToRotationWithDouble:angle withDouble:x withDouble:y];
  return t;
}


#line 350
- (void)translateWithDouble:(jdouble)mx
                 withDouble:(jdouble)my {
  
#line 351
  [self concatenateWithComItextpdfAwtGeomAffineTransform:[ComItextpdfAwtGeomAffineTransform getTranslateInstanceWithDouble:mx withDouble:my]];
}


#line 354
- (void)scale__WithDouble:(jdouble)scx
               withDouble:(jdouble)scy {
  
#line 355
  [self concatenateWithComItextpdfAwtGeomAffineTransform:[ComItextpdfAwtGeomAffineTransform getScaleInstanceWithDouble:scx withDouble:scy]];
}


#line 358
- (void)shearWithDouble:(jdouble)shx
             withDouble:(jdouble)shy {
  
#line 359
  [self concatenateWithComItextpdfAwtGeomAffineTransform:[ComItextpdfAwtGeomAffineTransform getShearInstanceWithDouble:shx withDouble:shy]];
}


#line 362
- (void)rotateWithDouble:(jdouble)angle {
  
#line 363
  [self concatenateWithComItextpdfAwtGeomAffineTransform:[ComItextpdfAwtGeomAffineTransform getRotateInstanceWithDouble:angle]];
}


#line 366
- (void)rotateWithDouble:(jdouble)angle
              withDouble:(jdouble)px
              withDouble:(jdouble)py {
  
#line 367
  [self concatenateWithComItextpdfAwtGeomAffineTransform:[ComItextpdfAwtGeomAffineTransform getRotateInstanceWithDouble:angle withDouble:px withDouble:py]];
}


#line 376
- (ComItextpdfAwtGeomAffineTransform *)multiplyWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t1
                                               withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t2 {
  
#line 377
  return [[ComItextpdfAwtGeomAffineTransform alloc] initWithDouble:
#line 378
  ((ComItextpdfAwtGeomAffineTransform *) nil_chk(t1))->m00_ * ((ComItextpdfAwtGeomAffineTransform *) nil_chk(t2))->m00_ + t1->m10_ * t2->m01_ withDouble:
#line 379
  t1->m00_ * t2->m10_ + t1->m10_ * t2->m11_ withDouble:
#line 380
  t1->m01_ * t2->m00_ + t1->m11_ * t2->m01_ withDouble:
#line 381
  t1->m01_ * t2->m10_ + t1->m11_ * t2->m11_ withDouble:
#line 382
  t1->m02_ * t2->m00_ + t1->m12_ * t2->m01_ + t2->m02_ withDouble:
#line 383
  t1->m02_ * t2->m10_ + t1->m12_ * t2->m11_ + t2->m12_];
}


#line 386
- (void)concatenateWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 387
  [self setTransformWithComItextpdfAwtGeomAffineTransform:[self multiplyWithComItextpdfAwtGeomAffineTransform:t withComItextpdfAwtGeomAffineTransform:self]];
}


#line 390
- (void)preConcatenateWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 391
  [self setTransformWithComItextpdfAwtGeomAffineTransform:[self multiplyWithComItextpdfAwtGeomAffineTransform:self withComItextpdfAwtGeomAffineTransform:t]];
}


#line 394
- (ComItextpdfAwtGeomAffineTransform *)createInverse {
  
#line 395
  jdouble det = [self getDeterminant];
  if ([JavaLangMath absWithDouble:det] < ComItextpdfAwtGeomAffineTransform_ZERO) {
    
#line 398
    @throw [[ComItextpdfAwtGeomNoninvertibleTransformException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.204"]];
  }
  return [[ComItextpdfAwtGeomAffineTransform alloc] initWithDouble:
#line 401
  m11_ / det withDouble:
#line 402
  -m10_ / det withDouble:
#line 403
  -m01_ / det withDouble:
#line 404
  m00_ / det withDouble:
#line 405
  (m01_ * m12_ - m11_ * m02_) / det withDouble:
#line 406
  (m10_ * m02_ - m00_ * m12_) / det];
}


#line 410
- (ComItextpdfAwtGeomPoint2D *)transformWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)src
                                        withComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)dst {
  
#line 411
  if (dst == nil) {
    if ([src isKindOfClass:[ComItextpdfAwtGeomPoint2D_Double class]]) {
      dst = [[ComItextpdfAwtGeomPoint2D_Double alloc] init];
    }
    else {
      
#line 415
      dst = [[ComItextpdfAwtGeomPoint2D_Float alloc] init];
    }
  }
  
#line 419
  jdouble x = [((ComItextpdfAwtGeomPoint2D *) nil_chk(src)) getX];
  jdouble y = [src getY];
  
#line 422
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:x * m00_ + y * m01_ + m02_ withDouble:x * m10_ + y * m11_ + m12_];
  return dst;
}


#line 426
- (void)transformWithComItextpdfAwtGeomPoint2DArray:(IOSObjectArray *)src
                                            withInt:(jint)srcOff
                 withComItextpdfAwtGeomPoint2DArray:(IOSObjectArray *)dst
                                            withInt:(jint)dstOff
                                            withInt:(jint)length {
  
#line 427
  while (--length >= 0) {
    ComItextpdfAwtGeomPoint2D *srcPoint = IOSObjectArray_Get(nil_chk(src), srcOff++);
    jdouble x = [((ComItextpdfAwtGeomPoint2D *) nil_chk(srcPoint)) getX];
    jdouble y = [srcPoint getY];
    ComItextpdfAwtGeomPoint2D *dstPoint = IOSObjectArray_Get(nil_chk(dst), dstOff);
    if (dstPoint == nil) {
      if ([srcPoint isKindOfClass:[ComItextpdfAwtGeomPoint2D_Double class]]) {
        dstPoint = [[ComItextpdfAwtGeomPoint2D_Double alloc] init];
      }
      else {
        
#line 436
        dstPoint = [[ComItextpdfAwtGeomPoint2D_Float alloc] init];
      }
    }
    [((ComItextpdfAwtGeomPoint2D *) nil_chk(dstPoint)) setLocationWithDouble:x * m00_ + y * m01_ + m02_ withDouble:x * m10_ + y * m11_ + m12_];
    IOSObjectArray_Set(dst, dstOff++, dstPoint);
  }
}


#line 444
- (void)transformWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(jint)srcOff
                 withDoubleArray:(IOSDoubleArray *)dst
                         withInt:(jint)dstOff
                         withInt:(jint)length {
  
#line 445
  jint step = 2;
  if (src == dst && srcOff < dstOff && dstOff < srcOff + length * 2) {
    srcOff = srcOff + length * 2 - 2;
    dstOff = dstOff + length * 2 - 2;
    step = -2;
  }
  while (--length >= 0) {
    jdouble x = IOSDoubleArray_Get(nil_chk(src), srcOff + 0);
    jdouble y = IOSDoubleArray_Get(src, srcOff + 1);
    *IOSDoubleArray_GetRef(nil_chk(dst), dstOff + 0) = x * m00_ + y * m01_ + m02_;
    *IOSDoubleArray_GetRef(dst, dstOff + 1) = x * m10_ + y * m11_ + m12_;
    srcOff += step;
    dstOff += step;
  }
}


#line 461
- (void)transformWithFloatArray:(IOSFloatArray *)src
                        withInt:(jint)srcOff
                 withFloatArray:(IOSFloatArray *)dst
                        withInt:(jint)dstOff
                        withInt:(jint)length {
  
#line 462
  jint step = 2;
  if (src == dst && srcOff < dstOff && dstOff < srcOff + length * 2) {
    srcOff = srcOff + length * 2 - 2;
    dstOff = dstOff + length * 2 - 2;
    step = -2;
  }
  while (--length >= 0) {
    jfloat x = IOSFloatArray_Get(nil_chk(src), srcOff + 0);
    jfloat y = IOSFloatArray_Get(src, srcOff + 1);
    *IOSFloatArray_GetRef(nil_chk(dst), dstOff + 0) = (jfloat) (x * m00_ + y * m01_ + m02_);
    *IOSFloatArray_GetRef(dst, dstOff + 1) = (jfloat) (x * m10_ + y * m11_ + m12_);
    srcOff += step;
    dstOff += step;
  }
}


#line 478
- (void)transformWithFloatArray:(IOSFloatArray *)src
                        withInt:(jint)srcOff
                withDoubleArray:(IOSDoubleArray *)dst
                        withInt:(jint)dstOff
                        withInt:(jint)length {
  
#line 479
  while (--length >= 0) {
    jfloat x = IOSFloatArray_Get(nil_chk(src), srcOff++);
    jfloat y = IOSFloatArray_Get(src, srcOff++);
    *IOSDoubleArray_GetRef(nil_chk(dst), dstOff++) = x * m00_ + y * m01_ + m02_;
    *IOSDoubleArray_GetRef(dst, dstOff++) = x * m10_ + y * m11_ + m12_;
  }
}


#line 487
- (void)transformWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(jint)srcOff
                  withFloatArray:(IOSFloatArray *)dst
                         withInt:(jint)dstOff
                         withInt:(jint)length {
  
#line 488
  while (--length >= 0) {
    jdouble x = IOSDoubleArray_Get(nil_chk(src), srcOff++);
    jdouble y = IOSDoubleArray_Get(src, srcOff++);
    *IOSFloatArray_GetRef(nil_chk(dst), dstOff++) = (jfloat) (x * m00_ + y * m01_ + m02_);
    *IOSFloatArray_GetRef(dst, dstOff++) = (jfloat) (x * m10_ + y * m11_ + m12_);
  }
}


#line 496
- (ComItextpdfAwtGeomPoint2D *)deltaTransformWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)src
                                             withComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)dst {
  
#line 497
  if (dst == nil) {
    if ([src isKindOfClass:[ComItextpdfAwtGeomPoint2D_Double class]]) {
      dst = [[ComItextpdfAwtGeomPoint2D_Double alloc] init];
    }
    else {
      
#line 501
      dst = [[ComItextpdfAwtGeomPoint2D_Float alloc] init];
    }
  }
  
#line 505
  jdouble x = [((ComItextpdfAwtGeomPoint2D *) nil_chk(src)) getX];
  jdouble y = [src getY];
  
#line 508
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:x * m00_ + y * m01_ withDouble:x * m10_ + y * m11_];
  return dst;
}


#line 512
- (void)deltaTransformWithDoubleArray:(IOSDoubleArray *)src
                              withInt:(jint)srcOff
                      withDoubleArray:(IOSDoubleArray *)dst
                              withInt:(jint)dstOff
                              withInt:(jint)length {
  
#line 513
  while (--length >= 0) {
    jdouble x = IOSDoubleArray_Get(nil_chk(src), srcOff++);
    jdouble y = IOSDoubleArray_Get(src, srcOff++);
    *IOSDoubleArray_GetRef(nil_chk(dst), dstOff++) = x * m00_ + y * m01_;
    *IOSDoubleArray_GetRef(dst, dstOff++) = x * m10_ + y * m11_;
  }
}


#line 521
- (ComItextpdfAwtGeomPoint2D *)inverseTransformWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)src
                                               withComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)dst {
  
#line 522
  jdouble det = [self getDeterminant];
  if ([JavaLangMath absWithDouble:det] < ComItextpdfAwtGeomAffineTransform_ZERO) {
    
#line 525
    @throw [[ComItextpdfAwtGeomNoninvertibleTransformException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.204"]];
  }
  
#line 528
  if (dst == nil) {
    if ([src isKindOfClass:[ComItextpdfAwtGeomPoint2D_Double class]]) {
      dst = [[ComItextpdfAwtGeomPoint2D_Double alloc] init];
    }
    else {
      
#line 532
      dst = [[ComItextpdfAwtGeomPoint2D_Float alloc] init];
    }
  }
  
#line 536
  jdouble x = [((ComItextpdfAwtGeomPoint2D *) nil_chk(src)) getX] - m02_;
  jdouble y = [src getY] - m12_;
  
#line 539
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(dst)) setLocationWithDouble:(x * m11_ - y * m01_) / det withDouble:(y * m00_ - x * m10_) / det];
  return dst;
}


#line 543
- (void)inverseTransformWithDoubleArray:(IOSDoubleArray *)src
                                withInt:(jint)srcOff
                        withDoubleArray:(IOSDoubleArray *)dst
                                withInt:(jint)dstOff
                                withInt:(jint)length {
  
#line 546
  jdouble det = [self getDeterminant];
  if ([JavaLangMath absWithDouble:det] < ComItextpdfAwtGeomAffineTransform_ZERO) {
    
#line 549
    @throw [[ComItextpdfAwtGeomNoninvertibleTransformException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.204"]];
  }
  
#line 552
  while (--length >= 0) {
    jdouble x = IOSDoubleArray_Get(nil_chk(src), srcOff++) - m02_;
    jdouble y = IOSDoubleArray_Get(src, srcOff++) - m12_;
    *IOSDoubleArray_GetRef(nil_chk(dst), dstOff++) = (x * m11_ - y * m01_) / det;
    *IOSDoubleArray_GetRef(dst, dstOff++) = (y * m00_ - x * m10_) / det;
  }
}


#line 560
- (void)inverseTransformWithFloatArray:(IOSFloatArray *)src
                               withInt:(jint)srcOff
                        withFloatArray:(IOSFloatArray *)dst
                               withInt:(jint)dstOff
                               withInt:(jint)length {
  
#line 563
  jfloat det = (jfloat) [self getDeterminant];
  if ([JavaLangMath absWithFloat:det] < ComItextpdfAwtGeomAffineTransform_ZERO) {
    
#line 566
    @throw [[ComItextpdfAwtGeomNoninvertibleTransformException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.204"]];
  }
  
#line 569
  while (--length >= 0) {
    jfloat x = IOSFloatArray_Get(nil_chk(src), srcOff++) - (jfloat) m02_;
    jfloat y = IOSFloatArray_Get(src, srcOff++) - (jfloat) m12_;
    *IOSFloatArray_GetRef(nil_chk(dst), dstOff++) = (x * (jfloat) m11_ - y * (jfloat) m01_) / det;
    *IOSFloatArray_GetRef(dst, dstOff++) = (y * (jfloat) m00_ - x * (jfloat) m10_) / det;
  }
}


#line 577
- (id<ComItextpdfAwtGeomShape>)createTransformedShapeWithComItextpdfAwtGeomShape:(id<ComItextpdfAwtGeomShape>)src {
  
#line 578
  if (src == nil) {
    return nil;
  }
  if ([(id) src isKindOfClass:[ComItextpdfAwtGeomGeneralPath class]]) {
    return [((ComItextpdfAwtGeomGeneralPath *) nil_chk(((ComItextpdfAwtGeomGeneralPath *) check_class_cast(src, [ComItextpdfAwtGeomGeneralPath class])))) createTransformedShapeWithComItextpdfAwtGeomAffineTransform:self];
  }
  id<ComItextpdfAwtGeomPathIterator> path = [((id<ComItextpdfAwtGeomShape>) nil_chk(src)) getPathIteratorWithComItextpdfAwtGeomAffineTransform:self];
  ComItextpdfAwtGeomGeneralPath *dst = [[ComItextpdfAwtGeomGeneralPath alloc] initWithInt:[((id<ComItextpdfAwtGeomPathIterator>) nil_chk(path)) getWindingRule]];
  [dst appendWithComItextpdfAwtGeomPathIterator:path withBoolean:NO];
  return dst;
}

- (NSString *)description {
  return JreStrcat("$$D$D$D$D$D$D$",
#line 593
  [[self getClass] getName], @"[[",
#line 594
  m00_, @", ", m01_, @", ", m02_, @"], [",
#line 595
  m10_, @", ", m11_, @", ", m12_, @"]]");
}


#line 599
- (id)clone {
  
#line 600
  @try {
    return [super clone];
  }
  @catch (
#line 602
  JavaLangCloneNotSupportedException *e) {
    @throw [[JavaLangInternalError alloc] init];
  }
}

- (NSUInteger)hash {
  
#line 609
  ComItextpdfAwtGeomMiscHashCode *hash_ = [[ComItextpdfAwtGeomMiscHashCode alloc] init];
  (void) [hash_ appendWithDouble:m00_];
  (void) [hash_ appendWithDouble:m01_];
  (void) [hash_ appendWithDouble:m02_];
  (void) [hash_ appendWithDouble:m10_];
  (void) [hash_ appendWithDouble:m11_];
  (void) [hash_ appendWithDouble:m12_];
  return ((jint) [hash_ hash]);
}

- (jboolean)isEqual:(id)obj {
  
#line 621
  if (obj == self) {
    return YES;
  }
  if ([obj isKindOfClass:[ComItextpdfAwtGeomAffineTransform class]]) {
    ComItextpdfAwtGeomAffineTransform *t = (ComItextpdfAwtGeomAffineTransform *) check_class_cast(obj, [ComItextpdfAwtGeomAffineTransform class]);
    return
#line 627
    m00_ == ((ComItextpdfAwtGeomAffineTransform *) nil_chk(t))->m00_ && m01_ == t->m01_ &&
#line 628
    m02_ == t->m02_ && m10_ == t->m10_ &&
#line 629
    m11_ == t->m11_ && m12_ == t->m12_;
  }
  return NO;
}


#line 640
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)stream {
  
#line 641
  [((JavaIoObjectOutputStream *) nil_chk(stream)) defaultWriteObject];
}


#line 651
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)stream {
  
#line 652
  [((JavaIoObjectInputStream *) nil_chk(stream)) defaultReadObject];
  type_ = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN;
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomAffineTransform *)other {
  [super copyAllFieldsTo:other];
  other->m00_ = m00_;
  other->m01_ = m01_;
  other->m02_ = m02_;
  other->m10_ = m10_;
  other->m11_ = m11_;
  other->m12_ = m12_;
  other->type_ = type_;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AffineTransform", NULL, 0x1, NULL },
    { "initWithComItextpdfAwtGeomAffineTransform:", "AffineTransform", NULL, 0x1, NULL },
    { "initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "AffineTransform", NULL, 0x1, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "AffineTransform", NULL, 0x1, NULL },
    { "initWithFloatArray:", "AffineTransform", NULL, 0x1, NULL },
    { "initWithDoubleArray:", "AffineTransform", NULL, 0x1, NULL },
    { "getType", NULL, "I", 0x1, NULL },
    { "getScaleX", NULL, "D", 0x1, NULL },
    { "getScaleY", NULL, "D", 0x1, NULL },
    { "getShearX", NULL, "D", 0x1, NULL },
    { "getShearY", NULL, "D", 0x1, NULL },
    { "getTranslateX", NULL, "D", 0x1, NULL },
    { "getTranslateY", NULL, "D", 0x1, NULL },
    { "isIdentity", NULL, "Z", 0x1, NULL },
    { "getMatrixWithDoubleArray:", "getMatrix", "V", 0x1, NULL },
    { "getDeterminant", NULL, "D", 0x1, NULL },
    { "setTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setTransform", "V", 0x1, NULL },
    { "setTransformWithComItextpdfAwtGeomAffineTransform:", "setTransform", "V", 0x1, NULL },
    { "setToIdentity", NULL, "V", 0x1, NULL },
    { "setToTranslationWithDouble:withDouble:", "setToTranslation", "V", 0x1, NULL },
    { "setToScaleWithDouble:withDouble:", "setToScale", "V", 0x1, NULL },
    { "setToShearWithDouble:withDouble:", "setToShear", "V", 0x1, NULL },
    { "setToRotationWithDouble:", "setToRotation", "V", 0x1, NULL },
    { "setToRotationWithDouble:withDouble:withDouble:", "setToRotation", "V", 0x1, NULL },
    { "getTranslateInstanceWithDouble:withDouble:", "getTranslateInstance", "Lcom.itextpdf.awt.geom.AffineTransform;", 0x9, NULL },
    { "getScaleInstanceWithDouble:withDouble:", "getScaleInstance", "Lcom.itextpdf.awt.geom.AffineTransform;", 0x9, NULL },
    { "getShearInstanceWithDouble:withDouble:", "getShearInstance", "Lcom.itextpdf.awt.geom.AffineTransform;", 0x9, NULL },
    { "getRotateInstanceWithDouble:", "getRotateInstance", "Lcom.itextpdf.awt.geom.AffineTransform;", 0x9, NULL },
    { "getRotateInstanceWithDouble:withDouble:withDouble:", "getRotateInstance", "Lcom.itextpdf.awt.geom.AffineTransform;", 0x9, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x1, NULL },
    { "scale__WithDouble:withDouble:", "scale", "V", 0x1, NULL },
    { "shearWithDouble:withDouble:", "shear", "V", 0x1, NULL },
    { "rotateWithDouble:", "rotate", "V", 0x1, NULL },
    { "rotateWithDouble:withDouble:withDouble:", "rotate", "V", 0x1, NULL },
    { "multiplyWithComItextpdfAwtGeomAffineTransform:withComItextpdfAwtGeomAffineTransform:", "multiply", "Lcom.itextpdf.awt.geom.AffineTransform;", 0x0, NULL },
    { "concatenateWithComItextpdfAwtGeomAffineTransform:", "concatenate", "V", 0x1, NULL },
    { "preConcatenateWithComItextpdfAwtGeomAffineTransform:", "preConcatenate", "V", 0x1, NULL },
    { "createInverse", NULL, "Lcom.itextpdf.awt.geom.AffineTransform;", 0x1, "Lcom.itextpdf.awt.geom.NoninvertibleTransformException;" },
    { "transformWithComItextpdfAwtGeomPoint2D:withComItextpdfAwtGeomPoint2D:", "transform", "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "transformWithComItextpdfAwtGeomPoint2DArray:withInt:withComItextpdfAwtGeomPoint2DArray:withInt:withInt:", "transform", "V", 0x1, NULL },
    { "transformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:", "transform", "V", 0x1, NULL },
    { "transformWithFloatArray:withInt:withFloatArray:withInt:withInt:", "transform", "V", 0x1, NULL },
    { "transformWithFloatArray:withInt:withDoubleArray:withInt:withInt:", "transform", "V", 0x1, NULL },
    { "transformWithDoubleArray:withInt:withFloatArray:withInt:withInt:", "transform", "V", 0x1, NULL },
    { "deltaTransformWithComItextpdfAwtGeomPoint2D:withComItextpdfAwtGeomPoint2D:", "deltaTransform", "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "deltaTransformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:", "deltaTransform", "V", 0x1, NULL },
    { "inverseTransformWithComItextpdfAwtGeomPoint2D:withComItextpdfAwtGeomPoint2D:", "inverseTransform", "Lcom.itextpdf.awt.geom.Point2D;", 0x1, "Lcom.itextpdf.awt.geom.NoninvertibleTransformException;" },
    { "inverseTransformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:", "inverseTransform", "V", 0x1, "Lcom.itextpdf.awt.geom.NoninvertibleTransformException;" },
    { "inverseTransformWithFloatArray:withInt:withFloatArray:withInt:withInt:", "inverseTransform", "V", 0x1, "Lcom.itextpdf.awt.geom.NoninvertibleTransformException;" },
    { "createTransformedShapeWithComItextpdfAwtGeomShape:", "createTransformedShape", "Lcom.itextpdf.awt.geom.Shape;", 0x1, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL },
    { "hash", "hashCode", "I", 0x1, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL },
    { "writeObjectWithJavaIoObjectOutputStream:", "writeObject", "V", 0x2, "Ljava.io.IOException;" },
    { "readObjectWithJavaIoObjectInputStream:", "readObject", "V", 0x2, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, .constantValue.asLong = ComItextpdfAwtGeomAffineTransform_serialVersionUID },
    { "TYPE_IDENTITY_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_IDENTITY },
    { "TYPE_TRANSLATION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_TRANSLATION },
    { "TYPE_UNIFORM_SCALE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_UNIFORM_SCALE },
    { "TYPE_GENERAL_SCALE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_GENERAL_SCALE },
    { "TYPE_QUADRANT_ROTATION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION },
    { "TYPE_GENERAL_ROTATION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_GENERAL_ROTATION },
    { "TYPE_GENERAL_TRANSFORM_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_GENERAL_TRANSFORM },
    { "TYPE_FLIP_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_FLIP },
    { "TYPE_MASK_SCALE_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_MASK_SCALE },
    { "TYPE_MASK_ROTATION_", NULL, 0x19, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_MASK_ROTATION },
    { "TYPE_UNKNOWN_", NULL, 0x18, "I", NULL, .constantValue.asInt = ComItextpdfAwtGeomAffineTransform_TYPE_UNKNOWN },
    { "ZERO_", NULL, 0x18, "D", NULL, .constantValue.asDouble = ComItextpdfAwtGeomAffineTransform_ZERO },
    { "m00_", NULL, 0x0, "D", NULL,  },
    { "m10_", NULL, 0x0, "D", NULL,  },
    { "m01_", NULL, 0x0, "D", NULL,  },
    { "m11_", NULL, 0x0, "D", NULL,  },
    { "m02_", NULL, 0x0, "D", NULL,  },
    { "m12_", NULL, 0x0, "D", NULL,  },
    { "type_", NULL, 0x80, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomAffineTransform = { "AffineTransform", "com.itextpdf.awt.geom", NULL, 0x1, 56, methods, 20, fields, 0, NULL};
  return &_ComItextpdfAwtGeomAffineTransform;
}

@end
