//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/CubicCurve2D.java
//

#line 1 "/Users/Zetzsche/Development/SimarisCurves/com.itextpdf/src/com/itextpdf/awt/geom/CubicCurve2D.java"

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "com/itextpdf/awt/geom/AffineTransform.h"
#include "com/itextpdf/awt/geom/CubicCurve2D.h"
#include "com/itextpdf/awt/geom/FlatteningPathIterator.h"
#include "com/itextpdf/awt/geom/Line2D.h"
#include "com/itextpdf/awt/geom/PathIterator.h"
#include "com/itextpdf/awt/geom/Point2D.h"
#include "com/itextpdf/awt/geom/Rectangle.h"
#include "com/itextpdf/awt/geom/Rectangle2D.h"
#include "com/itextpdf/awt/geom/Shape.h"
#include "com/itextpdf/awt/geom/gl/Crossing.h"
#include "com/itextpdf/awt/geom/misc/Messages.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"
#include "java/util/NoSuchElementException.h"

#pragma clang diagnostic ignored "-Wprotocol"


#line 31
@implementation ComItextpdfAwtGeomCubicCurve2D


#line 347
- (instancetype)init {
  return [super init];
}


#line 350
- (jdouble)getX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 352
- (jdouble)getY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 354
- (ComItextpdfAwtGeomPoint2D *)getP1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 356
- (jdouble)getCtrlX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 358
- (jdouble)getCtrlY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 360
- (ComItextpdfAwtGeomPoint2D *)getCtrlP1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 362
- (jdouble)getCtrlX2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 364
- (jdouble)getCtrlY2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 366
- (ComItextpdfAwtGeomPoint2D *)getCtrlP2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 368
- (jdouble)getX2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 370
- (jdouble)getY2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 372
- (ComItextpdfAwtGeomPoint2D *)getP2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 374
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 377
- (void)setCurveWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p1
                withComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)cp1
                withComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)cp2
                withComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p2 {
  
#line 378
  [self setCurveWithDouble:
#line 379
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:
#line 380
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(cp1)) getX] withDouble:[cp1 getY] withDouble:
#line 381
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(cp2)) getX] withDouble:[cp2 getY] withDouble:
#line 382
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]];
}


#line 385
- (void)setCurveWithDoubleArray:(IOSDoubleArray *)coords
                        withInt:(jint)offset {
  
#line 386
  [self setCurveWithDouble:IOSDoubleArray_Get(nil_chk(
#line 387
  coords), offset + 0) withDouble:IOSDoubleArray_Get(coords, offset + 1) withDouble:IOSDoubleArray_Get(
#line 388
  coords, offset + 2) withDouble:IOSDoubleArray_Get(coords, offset + 3) withDouble:IOSDoubleArray_Get(
#line 389
  coords, offset + 4) withDouble:IOSDoubleArray_Get(coords, offset + 5) withDouble:IOSDoubleArray_Get(
#line 390
  coords, offset + 6) withDouble:IOSDoubleArray_Get(coords, offset + 7)];
}


#line 393
- (void)setCurveWithComItextpdfAwtGeomPoint2DArray:(IOSObjectArray *)points
                                           withInt:(jint)offset {
  
#line 394
  [self setCurveWithDouble:
#line 395
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(nil_chk(points), offset + 0))) getX] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 0))) getY] withDouble:
#line 396
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 1))) getX] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 1))) getY] withDouble:
#line 397
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 2))) getX] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 2))) getY] withDouble:
#line 398
  [((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 3))) getX] withDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 3))) getY]];
}


#line 401
- (void)setCurveWithComItextpdfAwtGeomCubicCurve2D:(ComItextpdfAwtGeomCubicCurve2D *)curve {
  
#line 402
  [self setCurveWithDouble:
#line 403
  [((ComItextpdfAwtGeomCubicCurve2D *) nil_chk(curve)) getX1] withDouble:[curve getY1] withDouble:
#line 404
  [curve getCtrlX1] withDouble:[curve getCtrlY1] withDouble:
#line 405
  [curve getCtrlX2] withDouble:[curve getCtrlY2] withDouble:
#line 406
  [curve getX2] withDouble:[curve getY2]];
}


#line 409
- (jdouble)getFlatnessSq {
  
#line 410
  return [ComItextpdfAwtGeomCubicCurve2D getFlatnessSqWithDouble:
#line 411
  [self getX1] withDouble:[self getY1] withDouble:
#line 412
  [self getCtrlX1] withDouble:[self getCtrlY1] withDouble:
#line 413
  [self getCtrlX2] withDouble:[self getCtrlY2] withDouble:
#line 414
  [self getX2] withDouble:[self getY2]];
}


#line 417
+ (jdouble)getFlatnessSqWithDouble:(jdouble)x1
                        withDouble:(jdouble)y1
                        withDouble:(jdouble)ctrlx1
                        withDouble:(jdouble)ctrly1
                        withDouble:(jdouble)ctrlx2
                        withDouble:(jdouble)ctrly2
                        withDouble:(jdouble)x2
                        withDouble:(jdouble)y2 {
  
#line 420
  return [JavaLangMath maxWithDouble:
#line 421
  [ComItextpdfAwtGeomLine2D ptSegDistSqWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withDouble:ctrlx1 withDouble:ctrly1] withDouble:
#line 422
  [ComItextpdfAwtGeomLine2D ptSegDistSqWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2 withDouble:ctrlx2 withDouble:ctrly2]];
}


#line 425
+ (jdouble)getFlatnessSqWithDoubleArray:(IOSDoubleArray *)coords
                                withInt:(jint)offset {
  
#line 426
  return [ComItextpdfAwtGeomCubicCurve2D getFlatnessSqWithDouble:IOSDoubleArray_Get(nil_chk(
#line 427
  coords), offset + 0) withDouble:IOSDoubleArray_Get(coords, offset + 1) withDouble:IOSDoubleArray_Get(
#line 428
  coords, offset + 2) withDouble:IOSDoubleArray_Get(coords, offset + 3) withDouble:IOSDoubleArray_Get(
#line 429
  coords, offset + 4) withDouble:IOSDoubleArray_Get(coords, offset + 5) withDouble:IOSDoubleArray_Get(
#line 430
  coords, offset + 6) withDouble:IOSDoubleArray_Get(coords, offset + 7)];
}


#line 433
- (jdouble)getFlatness {
  
#line 434
  return [ComItextpdfAwtGeomCubicCurve2D getFlatnessWithDouble:
#line 435
  [self getX1] withDouble:[self getY1] withDouble:
#line 436
  [self getCtrlX1] withDouble:[self getCtrlY1] withDouble:
#line 437
  [self getCtrlX2] withDouble:[self getCtrlY2] withDouble:
#line 438
  [self getX2] withDouble:[self getY2]];
}


#line 441
+ (jdouble)getFlatnessWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)ctrlx1
                      withDouble:(jdouble)ctrly1
                      withDouble:(jdouble)ctrlx2
                      withDouble:(jdouble)ctrly2
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2 {
  
#line 444
  return [JavaLangMath sqrtWithDouble:[ComItextpdfAwtGeomCubicCurve2D getFlatnessSqWithDouble:x1 withDouble:y1 withDouble:ctrlx1 withDouble:ctrly1 withDouble:ctrlx2 withDouble:ctrly2 withDouble:x2 withDouble:y2]];
}


#line 447
+ (jdouble)getFlatnessWithDoubleArray:(IOSDoubleArray *)coords
                              withInt:(jint)offset {
  
#line 448
  return [ComItextpdfAwtGeomCubicCurve2D getFlatnessWithDouble:IOSDoubleArray_Get(nil_chk(
#line 449
  coords), offset + 0) withDouble:IOSDoubleArray_Get(coords, offset + 1) withDouble:IOSDoubleArray_Get(
#line 450
  coords, offset + 2) withDouble:IOSDoubleArray_Get(coords, offset + 3) withDouble:IOSDoubleArray_Get(
#line 451
  coords, offset + 4) withDouble:IOSDoubleArray_Get(coords, offset + 5) withDouble:IOSDoubleArray_Get(
#line 452
  coords, offset + 6) withDouble:IOSDoubleArray_Get(coords, offset + 7)];
}


#line 455
- (void)subdivideWithComItextpdfAwtGeomCubicCurve2D:(ComItextpdfAwtGeomCubicCurve2D *)left
                 withComItextpdfAwtGeomCubicCurve2D:(ComItextpdfAwtGeomCubicCurve2D *)right {
  
#line 456
  [ComItextpdfAwtGeomCubicCurve2D subdivideWithComItextpdfAwtGeomCubicCurve2D:self withComItextpdfAwtGeomCubicCurve2D:left withComItextpdfAwtGeomCubicCurve2D:right];
}


#line 459
+ (void)subdivideWithComItextpdfAwtGeomCubicCurve2D:(ComItextpdfAwtGeomCubicCurve2D *)src
                 withComItextpdfAwtGeomCubicCurve2D:(ComItextpdfAwtGeomCubicCurve2D *)left
                 withComItextpdfAwtGeomCubicCurve2D:(ComItextpdfAwtGeomCubicCurve2D *)right {
  
#line 460
  jdouble x1 = [((ComItextpdfAwtGeomCubicCurve2D *) nil_chk(src)) getX1];
  jdouble y1 = [src getY1];
  jdouble cx1 = [src getCtrlX1];
  jdouble cy1 = [src getCtrlY1];
  jdouble cx2 = [src getCtrlX2];
  jdouble cy2 = [src getCtrlY2];
  jdouble x2 = [src getX2];
  jdouble y2 = [src getY2];
  jdouble cx = (cx1 + cx2) / 2.0;
  jdouble cy = (cy1 + cy2) / 2.0;
  cx1 = (x1 + cx1) / 2.0;
  cy1 = (y1 + cy1) / 2.0;
  cx2 = (x2 + cx2) / 2.0;
  cy2 = (y2 + cy2) / 2.0;
  jdouble ax = (cx1 + cx) / 2.0;
  jdouble ay = (cy1 + cy) / 2.0;
  jdouble bx = (cx2 + cx) / 2.0;
  jdouble by = (cy2 + cy) / 2.0;
  cx = (ax + bx) / 2.0;
  cy = (ay + by) / 2.0;
  if (left != nil) {
    [left setCurveWithDouble:x1 withDouble:y1 withDouble:cx1 withDouble:cy1 withDouble:ax withDouble:ay withDouble:cx withDouble:cy];
  }
  if (right != nil) {
    [right setCurveWithDouble:cx withDouble:cy withDouble:bx withDouble:by withDouble:cx2 withDouble:cy2 withDouble:x2 withDouble:y2];
  }
}


#line 488
+ (void)subdivideWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(jint)srcOff
                 withDoubleArray:(IOSDoubleArray *)left
                         withInt:(jint)leftOff
                 withDoubleArray:(IOSDoubleArray *)right
                         withInt:(jint)rightOff {
  
#line 489
  jdouble x1 = IOSDoubleArray_Get(nil_chk(src), srcOff + 0);
  jdouble y1 = IOSDoubleArray_Get(src, srcOff + 1);
  jdouble cx1 = IOSDoubleArray_Get(src, srcOff + 2);
  jdouble cy1 = IOSDoubleArray_Get(src, srcOff + 3);
  jdouble cx2 = IOSDoubleArray_Get(src, srcOff + 4);
  jdouble cy2 = IOSDoubleArray_Get(src, srcOff + 5);
  jdouble x2 = IOSDoubleArray_Get(src, srcOff + 6);
  jdouble y2 = IOSDoubleArray_Get(src, srcOff + 7);
  jdouble cx = (cx1 + cx2) / 2.0;
  jdouble cy = (cy1 + cy2) / 2.0;
  cx1 = (x1 + cx1) / 2.0;
  cy1 = (y1 + cy1) / 2.0;
  cx2 = (x2 + cx2) / 2.0;
  cy2 = (y2 + cy2) / 2.0;
  jdouble ax = (cx1 + cx) / 2.0;
  jdouble ay = (cy1 + cy) / 2.0;
  jdouble bx = (cx2 + cx) / 2.0;
  jdouble by = (cy2 + cy) / 2.0;
  cx = (ax + bx) / 2.0;
  cy = (ay + by) / 2.0;
  if (left != nil) {
    *IOSDoubleArray_GetRef(left, leftOff + 0) = x1;
    *IOSDoubleArray_GetRef(left, leftOff + 1) = y1;
    *IOSDoubleArray_GetRef(left, leftOff + 2) = cx1;
    *IOSDoubleArray_GetRef(left, leftOff + 3) = cy1;
    *IOSDoubleArray_GetRef(left, leftOff + 4) = ax;
    *IOSDoubleArray_GetRef(left, leftOff + 5) = ay;
    *IOSDoubleArray_GetRef(left, leftOff + 6) = cx;
    *IOSDoubleArray_GetRef(left, leftOff + 7) = cy;
  }
  if (right != nil) {
    *IOSDoubleArray_GetRef(right, rightOff + 0) = cx;
    *IOSDoubleArray_GetRef(right, rightOff + 1) = cy;
    *IOSDoubleArray_GetRef(right, rightOff + 2) = bx;
    *IOSDoubleArray_GetRef(right, rightOff + 3) = by;
    *IOSDoubleArray_GetRef(right, rightOff + 4) = cx2;
    *IOSDoubleArray_GetRef(right, rightOff + 5) = cy2;
    *IOSDoubleArray_GetRef(right, rightOff + 6) = x2;
    *IOSDoubleArray_GetRef(right, rightOff + 7) = y2;
  }
}


#line 531
+ (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn {
  
#line 532
  return [ComItextpdfAwtGeomCubicCurve2D solveCubicWithDoubleArray:eqn withDoubleArray:eqn];
}


#line 535
+ (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn
                  withDoubleArray:(IOSDoubleArray *)res {
  
#line 536
  return [ComItextpdfAwtGeomGlCrossing solveCubicWithDoubleArray:eqn withDoubleArray:res];
}


#line 539
- (jboolean)containsWithDouble:(jdouble)px
                    withDouble:(jdouble)py {
  
#line 540
  return [ComItextpdfAwtGeomGlCrossing isInsideEvenOddWithInt:[ComItextpdfAwtGeomGlCrossing crossShapeWithComItextpdfAwtGeomShape:self withDouble:px withDouble:py]];
}


#line 543
- (jboolean)containsWithDouble:(jdouble)rx
                    withDouble:(jdouble)ry
                    withDouble:(jdouble)rw
                    withDouble:(jdouble)rh {
  
#line 544
  jint cross = [ComItextpdfAwtGeomGlCrossing intersectShapeWithComItextpdfAwtGeomShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return cross != ComItextpdfAwtGeomGlCrossing_CROSSING && [ComItextpdfAwtGeomGlCrossing isInsideEvenOddWithInt:cross];
}


#line 548
- (jboolean)intersectsWithDouble:(jdouble)rx
                      withDouble:(jdouble)ry
                      withDouble:(jdouble)rw
                      withDouble:(jdouble)rh {
  
#line 549
  jint cross = [ComItextpdfAwtGeomGlCrossing intersectShapeWithComItextpdfAwtGeomShape:self withDouble:rx withDouble:ry withDouble:rw withDouble:rh];
  return cross == ComItextpdfAwtGeomGlCrossing_CROSSING || [ComItextpdfAwtGeomGlCrossing isInsideEvenOddWithInt:cross];
}


#line 553
- (jboolean)containsWithComItextpdfAwtGeomPoint2D:(ComItextpdfAwtGeomPoint2D *)p {
  
#line 554
  return [self containsWithDouble:[((ComItextpdfAwtGeomPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}


#line 557
- (jboolean)intersectsWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 558
  return [self intersectsWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}


#line 561
- (jboolean)containsWithComItextpdfAwtGeomRectangle2D:(ComItextpdfAwtGeomRectangle2D *)r {
  
#line 562
  return [self containsWithDouble:[((ComItextpdfAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}


#line 565
- (ComItextpdfAwtGeomRectangle *)getBounds {
  
#line 566
  return [((ComItextpdfAwtGeomRectangle2D *) nil_chk([self getBounds2D])) getBounds];
}


#line 569
- (id<ComItextpdfAwtGeomPathIterator>)getPathIteratorWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  
#line 570
  return [[ComItextpdfAwtGeomCubicCurve2D_Iterator alloc] initWithComItextpdfAwtGeomCubicCurve2D:self withComItextpdfAwtGeomCubicCurve2D:self withComItextpdfAwtGeomAffineTransform:t];
}


#line 573
- (id<ComItextpdfAwtGeomPathIterator>)getPathIteratorWithComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)at
                                                                                withDouble:(jdouble)flatness {
  
#line 574
  return [[ComItextpdfAwtGeomFlatteningPathIterator alloc] initWithComItextpdfAwtGeomPathIterator:[self getPathIteratorWithComItextpdfAwtGeomAffineTransform:at] withDouble:flatness];
}


#line 578
- (id)clone {
  
#line 579
  @try {
    return [super clone];
  }
  @catch (
#line 581
  JavaLangCloneNotSupportedException *e) {
    @throw [[JavaLangInternalError alloc] init];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [self clone];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CubicCurve2D", NULL, 0x4, NULL },
    { "getX1", NULL, "D", 0x401, NULL },
    { "getY1", NULL, "D", 0x401, NULL },
    { "getP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x401, NULL },
    { "getCtrlX1", NULL, "D", 0x401, NULL },
    { "getCtrlY1", NULL, "D", 0x401, NULL },
    { "getCtrlP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x401, NULL },
    { "getCtrlX2", NULL, "D", 0x401, NULL },
    { "getCtrlY2", NULL, "D", 0x401, NULL },
    { "getCtrlP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x401, NULL },
    { "getX2", NULL, "D", 0x401, NULL },
    { "getY2", NULL, "D", 0x401, NULL },
    { "getP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x401, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x401, NULL },
    { "setCurveWithComItextpdfAwtGeomPoint2D:withComItextpdfAwtGeomPoint2D:withComItextpdfAwtGeomPoint2D:withComItextpdfAwtGeomPoint2D:", "setCurve", "V", 0x1, NULL },
    { "setCurveWithDoubleArray:withInt:", "setCurve", "V", 0x1, NULL },
    { "setCurveWithComItextpdfAwtGeomPoint2DArray:withInt:", "setCurve", "V", 0x1, NULL },
    { "setCurveWithComItextpdfAwtGeomCubicCurve2D:", "setCurve", "V", 0x1, NULL },
    { "getFlatnessSq", NULL, "D", 0x1, NULL },
    { "getFlatnessSqWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "getFlatnessSq", "D", 0x9, NULL },
    { "getFlatnessSqWithDoubleArray:withInt:", "getFlatnessSq", "D", 0x9, NULL },
    { "getFlatness", NULL, "D", 0x1, NULL },
    { "getFlatnessWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "getFlatness", "D", 0x9, NULL },
    { "getFlatnessWithDoubleArray:withInt:", "getFlatness", "D", 0x9, NULL },
    { "subdivideWithComItextpdfAwtGeomCubicCurve2D:withComItextpdfAwtGeomCubicCurve2D:", "subdivide", "V", 0x1, NULL },
    { "subdivideWithComItextpdfAwtGeomCubicCurve2D:withComItextpdfAwtGeomCubicCurve2D:withComItextpdfAwtGeomCubicCurve2D:", "subdivide", "V", 0x9, NULL },
    { "subdivideWithDoubleArray:withInt:withDoubleArray:withInt:withDoubleArray:withInt:", "subdivide", "V", 0x9, NULL },
    { "solveCubicWithDoubleArray:", "solveCubic", "I", 0x9, NULL },
    { "solveCubicWithDoubleArray:withDoubleArray:", "solveCubic", "I", 0x9, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL },
    { "containsWithComItextpdfAwtGeomPoint2D:", "contains", "Z", 0x1, NULL },
    { "intersectsWithComItextpdfAwtGeomRectangle2D:", "intersects", "Z", 0x1, NULL },
    { "containsWithComItextpdfAwtGeomRectangle2D:", "contains", "Z", 0x1, NULL },
    { "getBounds", NULL, "Lcom.itextpdf.awt.geom.Rectangle;", 0x1, NULL },
    { "getPathIteratorWithComItextpdfAwtGeomAffineTransform:", "getPathIterator", "Lcom.itextpdf.awt.geom.PathIterator;", 0x1, NULL },
    { "getPathIteratorWithComItextpdfAwtGeomAffineTransform:withDouble:", "getPathIterator", "Lcom.itextpdf.awt.geom.PathIterator;", 0x1, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomCubicCurve2D = { "CubicCurve2D", "com.itextpdf.awt.geom", NULL, 0x401, 39, methods, 0, NULL, 0, NULL};
  return &_ComItextpdfAwtGeomCubicCurve2D;
}

@end


#line 33
@implementation ComItextpdfAwtGeomCubicCurve2D_Float


#line 44
- (instancetype)init {
  return [super init];
}


#line 47
- (instancetype)initWithFloat:(jfloat)x1
                    withFloat:(jfloat)y1
                    withFloat:(jfloat)ctrlx1
                    withFloat:(jfloat)ctrly1
                    withFloat:(jfloat)ctrlx2
                    withFloat:(jfloat)ctrly2
                    withFloat:(jfloat)x2
                    withFloat:(jfloat)y2 {
  if (self = [super init]) {
    
#line 48
    [self setCurveWithFloat:x1 withFloat:y1 withFloat:ctrlx1 withFloat:ctrly1 withFloat:ctrlx2 withFloat:ctrly2 withFloat:x2 withFloat:y2];
  }
  return self;
}


#line 52
- (jdouble)getX1 {
  
#line 53
  return x1_;
}


#line 57
- (jdouble)getY1 {
  return y1_;
}


#line 62
- (jdouble)getCtrlX1 {
  
#line 63
  return ctrlx1_;
}


#line 67
- (jdouble)getCtrlY1 {
  return ctrly1_;
}


#line 72
- (jdouble)getCtrlX2 {
  
#line 73
  return ctrlx2_;
}


#line 77
- (jdouble)getCtrlY2 {
  return ctrly2_;
}


#line 82
- (jdouble)getX2 {
  
#line 83
  return x2_;
}


#line 87
- (jdouble)getY2 {
  return y2_;
}


#line 92
- (ComItextpdfAwtGeomPoint2D *)getP1 {
  
#line 93
  return [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:x1_ withFloat:y1_];
}


#line 97
- (ComItextpdfAwtGeomPoint2D *)getCtrlP1 {
  return [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:ctrlx1_ withFloat:ctrly1_];
}


#line 102
- (ComItextpdfAwtGeomPoint2D *)getCtrlP2 {
  
#line 103
  return [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:ctrlx2_ withFloat:ctrly2_];
}


#line 107
- (ComItextpdfAwtGeomPoint2D *)getP2 {
  return [[ComItextpdfAwtGeomPoint2D_Float alloc] initWithFloat:x2_ withFloat:y2_];
}


#line 112
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  
#line 115
  self->x1_ = (jfloat) x1;
  self->y1_ = (jfloat) y1;
  self->ctrlx1_ = (jfloat) ctrlx1;
  self->ctrly1_ = (jfloat) ctrly1;
  self->ctrlx2_ = (jfloat) ctrlx2;
  self->ctrly2_ = (jfloat) ctrly2;
  self->x2_ = (jfloat) x2;
  self->y2_ = (jfloat) y2;
}


#line 125
- (void)setCurveWithFloat:(jfloat)x1
                withFloat:(jfloat)y1
                withFloat:(jfloat)ctrlx1
                withFloat:(jfloat)ctrly1
                withFloat:(jfloat)ctrlx2
                withFloat:(jfloat)ctrly2
                withFloat:(jfloat)x2
                withFloat:(jfloat)y2 {
  
#line 128
  self->x1_ = x1;
  self->y1_ = y1;
  self->ctrlx1_ = ctrlx1;
  self->ctrly1_ = ctrly1;
  self->ctrlx2_ = ctrlx2;
  self->ctrly2_ = ctrly2;
  self->x2_ = x2;
  self->y2_ = y2;
}


#line 138
- (ComItextpdfAwtGeomRectangle2D *)getBounds2D {
  
#line 139
  jfloat rx1 = [JavaLangMath minWithFloat:[JavaLangMath minWithFloat:x1_ withFloat:x2_] withFloat:[JavaLangMath minWithFloat:ctrlx1_ withFloat:ctrlx2_]];
  jfloat ry1 = [JavaLangMath minWithFloat:[JavaLangMath minWithFloat:y1_ withFloat:y2_] withFloat:[JavaLangMath minWithFloat:ctrly1_ withFloat:ctrly2_]];
  jfloat rx2 = [JavaLangMath maxWithFloat:[JavaLangMath maxWithFloat:x1_ withFloat:x2_] withFloat:[JavaLangMath maxWithFloat:ctrlx1_ withFloat:ctrlx2_]];
  jfloat ry2 = [JavaLangMath maxWithFloat:[JavaLangMath maxWithFloat:y1_ withFloat:y2_] withFloat:[JavaLangMath maxWithFloat:ctrly1_ withFloat:ctrly2_]];
  return [[ComItextpdfAwtGeomRectangle2D_Float alloc] initWithFloat:rx1 withFloat:ry1 withFloat:rx2 - rx1 withFloat:ry2 - ry1];
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomCubicCurve2D_Float *)other {
  [super copyAllFieldsTo:other];
  other->ctrlx1_ = ctrlx1_;
  other->ctrlx2_ = ctrlx2_;
  other->ctrly1_ = ctrly1_;
  other->ctrly2_ = ctrly2_;
  other->x1_ = x1_;
  other->x2_ = x2_;
  other->y1_ = y1_;
  other->y2_ = y2_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Float", NULL, 0x1, NULL },
    { "initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "Float", NULL, 0x1, NULL },
    { "getX1", NULL, "D", 0x1, NULL },
    { "getY1", NULL, "D", 0x1, NULL },
    { "getCtrlX1", NULL, "D", 0x1, NULL },
    { "getCtrlY1", NULL, "D", 0x1, NULL },
    { "getCtrlX2", NULL, "D", 0x1, NULL },
    { "getCtrlY2", NULL, "D", 0x1, NULL },
    { "getX2", NULL, "D", 0x1, NULL },
    { "getY2", NULL, "D", 0x1, NULL },
    { "getP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getCtrlP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getCtrlP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x1, NULL },
    { "setCurveWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:", "setCurve", "V", 0x1, NULL },
    { "getBounds2D", NULL, "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x1_", NULL, 0x1, "F", NULL,  },
    { "y1_", NULL, 0x1, "F", NULL,  },
    { "ctrlx1_", NULL, 0x1, "F", NULL,  },
    { "ctrly1_", NULL, 0x1, "F", NULL,  },
    { "ctrlx2_", NULL, 0x1, "F", NULL,  },
    { "ctrly2_", NULL, 0x1, "F", NULL,  },
    { "x2_", NULL, 0x1, "F", NULL,  },
    { "y2_", NULL, 0x1, "F", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomCubicCurve2D_Float = { "Float", "com.itextpdf.awt.geom", "CubicCurve2D", 0x9, 17, methods, 8, fields, 0, NULL};
  return &_ComItextpdfAwtGeomCubicCurve2D_Float;
}

@end


#line 147
@implementation ComItextpdfAwtGeomCubicCurve2D_Double


#line 158
- (instancetype)init {
  return [super init];
}


#line 161
- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)ctrlx1
                    withDouble:(jdouble)ctrly1
                    withDouble:(jdouble)ctrlx2
                    withDouble:(jdouble)ctrly2
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  if (self = [super init]) {
    
#line 163
    [self setCurveWithDouble:x1 withDouble:y1 withDouble:ctrlx1 withDouble:ctrly1 withDouble:ctrlx2 withDouble:ctrly2 withDouble:x2 withDouble:y2];
  }
  return self;
}


#line 167
- (jdouble)getX1 {
  
#line 168
  return x1_;
}


#line 172
- (jdouble)getY1 {
  return y1_;
}


#line 177
- (jdouble)getCtrlX1 {
  
#line 178
  return ctrlx1_;
}


#line 182
- (jdouble)getCtrlY1 {
  return ctrly1_;
}


#line 187
- (jdouble)getCtrlX2 {
  
#line 188
  return ctrlx2_;
}


#line 192
- (jdouble)getCtrlY2 {
  return ctrly2_;
}


#line 197
- (jdouble)getX2 {
  
#line 198
  return x2_;
}


#line 202
- (jdouble)getY2 {
  return y2_;
}


#line 207
- (ComItextpdfAwtGeomPoint2D *)getP1 {
  
#line 208
  return [[ComItextpdfAwtGeomPoint2D_Double alloc] initWithDouble:x1_ withDouble:y1_];
}


#line 212
- (ComItextpdfAwtGeomPoint2D *)getCtrlP1 {
  return [[ComItextpdfAwtGeomPoint2D_Double alloc] initWithDouble:ctrlx1_ withDouble:ctrly1_];
}


#line 217
- (ComItextpdfAwtGeomPoint2D *)getCtrlP2 {
  
#line 218
  return [[ComItextpdfAwtGeomPoint2D_Double alloc] initWithDouble:ctrlx2_ withDouble:ctrly2_];
}


#line 222
- (ComItextpdfAwtGeomPoint2D *)getP2 {
  return [[ComItextpdfAwtGeomPoint2D_Double alloc] initWithDouble:x2_ withDouble:y2_];
}


#line 227
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  
#line 230
  self->x1_ = x1;
  self->y1_ = y1;
  self->ctrlx1_ = ctrlx1;
  self->ctrly1_ = ctrly1;
  self->ctrlx2_ = ctrlx2;
  self->ctrly2_ = ctrly2;
  self->x2_ = x2;
  self->y2_ = y2;
}


#line 240
- (ComItextpdfAwtGeomRectangle2D *)getBounds2D {
  
#line 241
  jdouble rx1 = [JavaLangMath minWithDouble:[JavaLangMath minWithDouble:x1_ withDouble:x2_] withDouble:[JavaLangMath minWithDouble:ctrlx1_ withDouble:ctrlx2_]];
  jdouble ry1 = [JavaLangMath minWithDouble:[JavaLangMath minWithDouble:y1_ withDouble:y2_] withDouble:[JavaLangMath minWithDouble:ctrly1_ withDouble:ctrly2_]];
  jdouble rx2 = [JavaLangMath maxWithDouble:[JavaLangMath maxWithDouble:x1_ withDouble:x2_] withDouble:[JavaLangMath maxWithDouble:ctrlx1_ withDouble:ctrlx2_]];
  jdouble ry2 = [JavaLangMath maxWithDouble:[JavaLangMath maxWithDouble:y1_ withDouble:y2_] withDouble:[JavaLangMath maxWithDouble:ctrly1_ withDouble:ctrly2_]];
  return [[ComItextpdfAwtGeomRectangle2D_Double alloc] initWithDouble:rx1 withDouble:ry1 withDouble:rx2 - rx1 withDouble:ry2 - ry1];
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomCubicCurve2D_Double *)other {
  [super copyAllFieldsTo:other];
  other->ctrlx1_ = ctrlx1_;
  other->ctrlx2_ = ctrlx2_;
  other->ctrly1_ = ctrly1_;
  other->ctrly2_ = ctrly2_;
  other->x1_ = x1_;
  other->x2_ = x2_;
  other->y1_ = y1_;
  other->y2_ = y2_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Double", NULL, 0x1, NULL },
    { "initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "Double", NULL, 0x1, NULL },
    { "getX1", NULL, "D", 0x1, NULL },
    { "getY1", NULL, "D", 0x1, NULL },
    { "getCtrlX1", NULL, "D", 0x1, NULL },
    { "getCtrlY1", NULL, "D", 0x1, NULL },
    { "getCtrlX2", NULL, "D", 0x1, NULL },
    { "getCtrlY2", NULL, "D", 0x1, NULL },
    { "getX2", NULL, "D", 0x1, NULL },
    { "getY2", NULL, "D", 0x1, NULL },
    { "getP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getCtrlP1", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getCtrlP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "getP2", NULL, "Lcom.itextpdf.awt.geom.Point2D;", 0x1, NULL },
    { "setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "setCurve", "V", 0x1, NULL },
    { "getBounds2D", NULL, "Lcom.itextpdf.awt.geom.Rectangle2D;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x1_", NULL, 0x1, "D", NULL,  },
    { "y1_", NULL, 0x1, "D", NULL,  },
    { "ctrlx1_", NULL, 0x1, "D", NULL,  },
    { "ctrly1_", NULL, 0x1, "D", NULL,  },
    { "ctrlx2_", NULL, 0x1, "D", NULL,  },
    { "ctrly2_", NULL, 0x1, "D", NULL,  },
    { "x2_", NULL, 0x1, "D", NULL,  },
    { "y2_", NULL, 0x1, "D", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomCubicCurve2D_Double = { "Double", "com.itextpdf.awt.geom", "CubicCurve2D", 0x9, 16, methods, 8, fields, 0, NULL};
  return &_ComItextpdfAwtGeomCubicCurve2D_Double;
}

@end


#line 252
@implementation ComItextpdfAwtGeomCubicCurve2D_Iterator


#line 274
- (instancetype)initWithComItextpdfAwtGeomCubicCurve2D:(ComItextpdfAwtGeomCubicCurve2D *)outer$
                    withComItextpdfAwtGeomCubicCurve2D:(ComItextpdfAwtGeomCubicCurve2D *)c
                 withComItextpdfAwtGeomAffineTransform:(ComItextpdfAwtGeomAffineTransform *)t {
  if (self = [super init]) {
    
#line 275
    self->c_ = c;
    
#line 276
    self->t_ = t;
  }
  return self;
}


#line 279
- (jint)getWindingRule {
  
#line 280
  return ComItextpdfAwtGeomPathIterator_WIND_NON_ZERO;
}


#line 283
- (jboolean)isDone {
  
#line 284
  return index_ > 1;
}


#line 287
- (void)next {
  
#line 288
  index_++;
}


#line 291
- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  
#line 292
  if ([self isDone]) {
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.4B"]];
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = ComItextpdfAwtGeomPathIterator_SEG_MOVETO;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((ComItextpdfAwtGeomCubicCurve2D *) nil_chk(c_)) getX1];
    *IOSDoubleArray_GetRef(coords, 1) = [c_ getY1];
    count = 1;
  }
  else {
    
#line 303
    type = ComItextpdfAwtGeomPathIterator_SEG_CUBICTO;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((ComItextpdfAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlX1];
    *IOSDoubleArray_GetRef(coords, 1) = [c_ getCtrlY1];
    *IOSDoubleArray_GetRef(coords, 2) = [c_ getCtrlX2];
    *IOSDoubleArray_GetRef(coords, 3) = [c_ getCtrlY2];
    *IOSDoubleArray_GetRef(coords, 4) = [c_ getX2];
    *IOSDoubleArray_GetRef(coords, 5) = [c_ getY2];
    count = 3;
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:count];
  }
  return type;
}


#line 318
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  
#line 319
  if ([self isDone]) {
    @throw [[JavaUtilNoSuchElementException alloc] initWithNSString:[ComItextpdfAwtGeomMiscMessages getStringWithNSString:@"awt.4B"]];
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = ComItextpdfAwtGeomPathIterator_SEG_MOVETO;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) [((ComItextpdfAwtGeomCubicCurve2D *) nil_chk(c_)) getX1];
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) [c_ getY1];
    count = 1;
  }
  else {
    
#line 330
    type = ComItextpdfAwtGeomPathIterator_SEG_CUBICTO;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) [((ComItextpdfAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlX1];
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) [c_ getCtrlY1];
    *IOSFloatArray_GetRef(coords, 2) = (jfloat) [c_ getCtrlX2];
    *IOSFloatArray_GetRef(coords, 3) = (jfloat) [c_ getCtrlY2];
    *IOSFloatArray_GetRef(coords, 4) = (jfloat) [c_ getX2];
    *IOSFloatArray_GetRef(coords, 5) = (jfloat) [c_ getY2];
    count = 3;
  }
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:count];
  }
  return type;
}

- (void)copyAllFieldsTo:(ComItextpdfAwtGeomCubicCurve2D_Iterator *)other {
  [super copyAllFieldsTo:other];
  other->c_ = c_;
  other->index_ = index_;
  other->t_ = t_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComItextpdfAwtGeomCubicCurve2D:withComItextpdfAwtGeomCubicCurve2D:withComItextpdfAwtGeomAffineTransform:", "Iterator", NULL, 0x0, NULL },
    { "getWindingRule", NULL, "I", 0x1, NULL },
    { "isDone", NULL, "Z", 0x1, NULL },
    { "next", NULL, "V", 0x1, NULL },
    { "currentSegmentWithDoubleArray:", "currentSegment", "I", 0x1, NULL },
    { "currentSegmentWithFloatArray:", "currentSegment", "I", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "c_", NULL, 0x0, "Lcom.itextpdf.awt.geom.CubicCurve2D;", NULL,  },
    { "t_", NULL, 0x0, "Lcom.itextpdf.awt.geom.AffineTransform;", NULL,  },
    { "index_", NULL, 0x0, "I", NULL,  },
  };
  static const J2ObjcClassInfo _ComItextpdfAwtGeomCubicCurve2D_Iterator = { "Iterator", "com.itextpdf.awt.geom", "CubicCurve2D", 0x0, 6, methods, 3, fields, 0, NULL};
  return &_ComItextpdfAwtGeomCubicCurve2D_Iterator;
}

@end
